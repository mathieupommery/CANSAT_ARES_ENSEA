
mainboardcansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac50  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800ae28  0800ae28  0000be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af74  0800af74  0000c024  2**0
                  CONTENTS
  4 .ARM          00000008  0800af74  0800af74  0000bf74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af7c  0800af7c  0000c024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af7c  0800af7c  0000bf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af80  0800af80  0000bf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800af84  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c14  20000024  0800afa8  0000c024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c38  0800afa8  0000cc38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000256d6  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000501d  00000000  00000000  0003172a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002080  00000000  00000000  00036748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001938  00000000  00000000  000387c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f93  00000000  00000000  0003a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c4eb  00000000  00000000  0005f093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5343  00000000  00000000  0008b57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001708c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b50  00000000  00000000  00170904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00179454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ae10 	.word	0x0800ae10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	0800ae10 	.word	0x0800ae10

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b96a 	b.w	8000ce0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14e      	bne.n	8000ace <__udivmoddi4+0xaa>
 8000a30:	4694      	mov	ip, r2
 8000a32:	458c      	cmp	ip, r1
 8000a34:	4686      	mov	lr, r0
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	d962      	bls.n	8000b02 <__udivmoddi4+0xde>
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0320 	rsb	r3, r2, #32
 8000a42:	4091      	lsls	r1, r2
 8000a44:	fa20 f303 	lsr.w	r3, r0, r3
 8000a48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a56:	fa1f f68c 	uxth.w	r6, ip
 8000a5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a62:	fb07 1114 	mls	r1, r7, r4, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb04 f106 	mul.w	r1, r4, r6
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x64>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a7a:	f080 8112 	bcs.w	8000ca2 <__udivmoddi4+0x27e>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 810f 	bls.w	8000ca2 <__udivmoddi4+0x27e>
 8000a84:	3c02      	subs	r4, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	1a59      	subs	r1, r3, r1
 8000a8a:	fa1f f38e 	uxth.w	r3, lr
 8000a8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a92:	fb07 1110 	mls	r1, r7, r0, r1
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f606 	mul.w	r6, r0, r6
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x94>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aaa:	f080 80fc 	bcs.w	8000ca6 <__udivmoddi4+0x282>
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	f240 80f9 	bls.w	8000ca6 <__udivmoddi4+0x282>
 8000ab4:	4463      	add	r3, ip
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	1b9b      	subs	r3, r3, r6
 8000aba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000abe:	2100      	movs	r1, #0
 8000ac0:	b11d      	cbz	r5, 8000aca <__udivmoddi4+0xa6>
 8000ac2:	40d3      	lsrs	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d905      	bls.n	8000ade <__udivmoddi4+0xba>
 8000ad2:	b10d      	cbz	r5, 8000ad8 <__udivmoddi4+0xb4>
 8000ad4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4608      	mov	r0, r1
 8000adc:	e7f5      	b.n	8000aca <__udivmoddi4+0xa6>
 8000ade:	fab3 f183 	clz	r1, r3
 8000ae2:	2900      	cmp	r1, #0
 8000ae4:	d146      	bne.n	8000b74 <__udivmoddi4+0x150>
 8000ae6:	42a3      	cmp	r3, r4
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xcc>
 8000aea:	4290      	cmp	r0, r2
 8000aec:	f0c0 80f0 	bcc.w	8000cd0 <__udivmoddi4+0x2ac>
 8000af0:	1a86      	subs	r6, r0, r2
 8000af2:	eb64 0303 	sbc.w	r3, r4, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d0e6      	beq.n	8000aca <__udivmoddi4+0xa6>
 8000afc:	e9c5 6300 	strd	r6, r3, [r5]
 8000b00:	e7e3      	b.n	8000aca <__udivmoddi4+0xa6>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	f040 8090 	bne.w	8000c28 <__udivmoddi4+0x204>
 8000b08:	eba1 040c 	sub.w	r4, r1, ip
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	fa1f f78c 	uxth.w	r7, ip
 8000b14:	2101      	movs	r1, #1
 8000b16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b26:	fb07 f006 	mul.w	r0, r7, r6
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x11c>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x11a>
 8000b38:	4298      	cmp	r0, r3
 8000b3a:	f200 80cd 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b3e:	4626      	mov	r6, r4
 8000b40:	1a1c      	subs	r4, r3, r0
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b52:	fb00 f707 	mul.w	r7, r0, r7
 8000b56:	429f      	cmp	r7, r3
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x148>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b62:	d202      	bcs.n	8000b6a <__udivmoddi4+0x146>
 8000b64:	429f      	cmp	r7, r3
 8000b66:	f200 80b0 	bhi.w	8000cca <__udivmoddi4+0x2a6>
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	1bdb      	subs	r3, r3, r7
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	e7a5      	b.n	8000ac0 <__udivmoddi4+0x9c>
 8000b74:	f1c1 0620 	rsb	r6, r1, #32
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b84:	fa04 f301 	lsl.w	r3, r4, r1
 8000b88:	ea43 030c 	orr.w	r3, r3, ip
 8000b8c:	40f4      	lsrs	r4, r6
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	0c38      	lsrs	r0, r7, #16
 8000b94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b98:	fbb4 fef0 	udiv	lr, r4, r0
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ba4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bac:	45a1      	cmp	r9, r4
 8000bae:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb2:	d90a      	bls.n	8000bca <__udivmoddi4+0x1a6>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bba:	f080 8084 	bcs.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bbe:	45a1      	cmp	r9, r4
 8000bc0:	f240 8081 	bls.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bc8:	443c      	add	r4, r7
 8000bca:	eba4 0409 	sub.w	r4, r4, r9
 8000bce:	fa1f f983 	uxth.w	r9, r3
 8000bd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000be2:	45a4      	cmp	ip, r4
 8000be4:	d907      	bls.n	8000bf6 <__udivmoddi4+0x1d2>
 8000be6:	193c      	adds	r4, r7, r4
 8000be8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bec:	d267      	bcs.n	8000cbe <__udivmoddi4+0x29a>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0x29a>
 8000bf2:	3b02      	subs	r3, #2
 8000bf4:	443c      	add	r4, r7
 8000bf6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bfe:	eba4 040c 	sub.w	r4, r4, ip
 8000c02:	429c      	cmp	r4, r3
 8000c04:	46ce      	mov	lr, r9
 8000c06:	469c      	mov	ip, r3
 8000c08:	d351      	bcc.n	8000cae <__udivmoddi4+0x28a>
 8000c0a:	d04e      	beq.n	8000caa <__udivmoddi4+0x286>
 8000c0c:	b155      	cbz	r5, 8000c24 <__udivmoddi4+0x200>
 8000c0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c12:	eb64 040c 	sbc.w	r4, r4, ip
 8000c16:	fa04 f606 	lsl.w	r6, r4, r6
 8000c1a:	40cb      	lsrs	r3, r1
 8000c1c:	431e      	orrs	r6, r3
 8000c1e:	40cc      	lsrs	r4, r1
 8000c20:	e9c5 6400 	strd	r6, r4, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	e750      	b.n	8000aca <__udivmoddi4+0xa6>
 8000c28:	f1c2 0320 	rsb	r3, r2, #32
 8000c2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	fa24 f303 	lsr.w	r3, r4, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	430c      	orrs	r4, r1
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c44:	fa1f f78c 	uxth.w	r7, ip
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c50:	0c23      	lsrs	r3, r4, #16
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb00 f107 	mul.w	r1, r0, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x24c>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c66:	d22c      	bcs.n	8000cc2 <__udivmoddi4+0x29e>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d92a      	bls.n	8000cc2 <__udivmoddi4+0x29e>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c78:	fb08 3311 	mls	r3, r8, r1, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb01 f307 	mul.w	r3, r1, r7
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x276>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c90:	d213      	bcs.n	8000cba <__udivmoddi4+0x296>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d911      	bls.n	8000cba <__udivmoddi4+0x296>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	1ae4      	subs	r4, r4, r3
 8000c9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ca0:	e739      	b.n	8000b16 <__udivmoddi4+0xf2>
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	e6f0      	b.n	8000a88 <__udivmoddi4+0x64>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e706      	b.n	8000ab8 <__udivmoddi4+0x94>
 8000caa:	45c8      	cmp	r8, r9
 8000cac:	d2ae      	bcs.n	8000c0c <__udivmoddi4+0x1e8>
 8000cae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cb6:	3801      	subs	r0, #1
 8000cb8:	e7a8      	b.n	8000c0c <__udivmoddi4+0x1e8>
 8000cba:	4631      	mov	r1, r6
 8000cbc:	e7ed      	b.n	8000c9a <__udivmoddi4+0x276>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	e799      	b.n	8000bf6 <__udivmoddi4+0x1d2>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e7d4      	b.n	8000c70 <__udivmoddi4+0x24c>
 8000cc6:	46d6      	mov	lr, sl
 8000cc8:	e77f      	b.n	8000bca <__udivmoddi4+0x1a6>
 8000cca:	4463      	add	r3, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	e74d      	b.n	8000b6c <__udivmoddi4+0x148>
 8000cd0:	4606      	mov	r6, r0
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e70f      	b.n	8000af8 <__udivmoddi4+0xd4>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	e730      	b.n	8000b40 <__udivmoddi4+0x11c>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	@ 0x30
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00a f85a 	bl	800adb6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d02:	4b4f      	ldr	r3, [pc, #316]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d12:	4b4b      	ldr	r3, [pc, #300]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d18:	4b49      	ldr	r3, [pc, #292]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d1e:	4b48      	ldr	r3, [pc, #288]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d24:	4b46      	ldr	r3, [pc, #280]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d2a:	4b45      	ldr	r3, [pc, #276]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d30:	4b43      	ldr	r3, [pc, #268]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d36:	4b42      	ldr	r3, [pc, #264]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 8000d3c:	4b40      	ldr	r3, [pc, #256]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d3e:	2205      	movs	r2, #5
 8000d40:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b3f      	ldr	r3, [pc, #252]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d4c:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8000d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d52:	4b3b      	ldr	r3, [pc, #236]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d58:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d5a:	4b39      	ldr	r3, [pc, #228]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d62:	4b37      	ldr	r3, [pc, #220]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d68:	4b35      	ldr	r3, [pc, #212]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4833      	ldr	r0, [pc, #204]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d72:	f001 ffb1 	bl	8002cd8 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000d7c:	f001 f837 	bl	8001dee <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	482d      	ldr	r0, [pc, #180]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000d8c:	f002 fd3e 	bl	800380c <HAL_ADCEx_MultiModeConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000d96:	f001 f82a 	bl	8001dee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <MX_ADC1_Init+0x160>)
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000da2:	2307      	movs	r3, #7
 8000da4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da6:	237f      	movs	r3, #127	@ 0x7f
 8000da8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2304      	movs	r3, #4
 8000dac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4822      	ldr	r0, [pc, #136]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000db8:	f002 f912 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000dc2:	f001 f814 	bl	8001dee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <MX_ADC1_Init+0x164>)
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481b      	ldr	r0, [pc, #108]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000dd4:	f002 f904 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000dde:	f001 f806 	bl	8001dee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_ADC1_Init+0x168>)
 8000de4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000de6:	2312      	movs	r3, #18
 8000de8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000df0:	f002 f8f6 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000dfa:	f000 fff8 	bl	8001dee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <MX_ADC1_Init+0x16c>)
 8000e00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e02:	2318      	movs	r3, #24
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000e0c:	f002 f8e8 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000e16:	f000 ffea 	bl	8001dee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_ADC1_Init+0x170>)
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_ADC1_Init+0x15c>)
 8000e2a:	f002 f8d9 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000e34:	f000 ffdb 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3730      	adds	r7, #48	@ 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000040 	.word	0x20000040
 8000e44:	cb840000 	.word	0xcb840000
 8000e48:	c3210000 	.word	0xc3210000
 8000e4c:	04300002 	.word	0x04300002
 8000e50:	08600004 	.word	0x08600004
 8000e54:	0c900008 	.word	0x0c900008

08000e58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b09a      	sub	sp, #104	@ 0x68
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2244      	movs	r2, #68	@ 0x44
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f009 ff9c 	bl	800adb6 <memset>
  if(adcHandle->Instance==ADC1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e86:	d15f      	bne.n	8000f48 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 fac5 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ea4:	f000 ffa3 	bl	8001dee <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ea8:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <HAL_ADC_MspInit+0xf8>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eac:	4a28      	ldr	r2, [pc, #160]	@ (8000f50 <HAL_ADC_MspInit+0xf8>)
 8000eae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb4:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <HAL_ADC_MspInit+0xf8>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <HAL_ADC_MspInit+0xf8>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec4:	4a22      	ldr	r2, [pc, #136]	@ (8000f50 <HAL_ADC_MspInit+0xf8>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ecc:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <HAL_ADC_MspInit+0xf8>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000edc:	2303      	movs	r3, #3
 8000ede:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eee:	f003 f8bb 	bl	8004068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000ef4:	4a18      	ldr	r2, [pc, #96]	@ (8000f58 <HAL_ADC_MspInit+0x100>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000efa:	2205      	movs	r2, #5
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f10:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f16:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f22:	2220      	movs	r2, #32
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f2e:	f002 fe21 	bl	8003b74 <HAL_DMA_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000f38:	f000 ff59 	bl	8001dee <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f40:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f42:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <HAL_ADC_MspInit+0xfc>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3768      	adds	r7, #104	@ 0x68
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	200000ac 	.word	0x200000ac
 8000f58:	40020030 	.word	0x40020030

08000f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f66:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f7e:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	200b      	movs	r0, #11
 8000f98:	f002 fdb7 	bl	8003b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f9c:	200b      	movs	r0, #11
 8000f9e:	f002 fdce 	bl	8003b3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	200c      	movs	r0, #12
 8000fa8:	f002 fdaf 	bl	8003b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fac:	200c      	movs	r0, #12
 8000fae:	f002 fdc6 	bl	8003b3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	200d      	movs	r0, #13
 8000fb8:	f002 fda7 	bl	8003b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000fbc:	200d      	movs	r0, #13
 8000fbe:	f002 fdbe 	bl	8003b3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	200e      	movs	r0, #14
 8000fc8:	f002 fd9f 	bl	8003b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000fcc:	200e      	movs	r0, #14
 8000fce:	f002 fdb6 	bl	8003b3e <HAL_NVIC_EnableIRQ>

}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <SELECT+0x14>)
 8000fea:	f003 f9bf 	bl	800436c <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2110      	movs	r1, #16
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <DESELECT+0x14>)
 8001002:	f003 f9b3 	bl	800436c <HAL_GPIO_WritePin>
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	48000800 	.word	0x48000800

08001010 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800101a:	bf00      	nop
 800101c:	4808      	ldr	r0, [pc, #32]	@ (8001040 <SPI_TxByte+0x30>)
 800101e:	f005 f833 	bl	8006088 <HAL_SPI_GetState>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d1f9      	bne.n	800101c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001028:	1df9      	adds	r1, r7, #7
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	2201      	movs	r2, #1
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <SPI_TxByte+0x30>)
 8001032:	f004 fc94 	bl	800595e <HAL_SPI_Transmit>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200005d4 	.word	0x200005d4

08001044 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800104a:	23ff      	movs	r3, #255	@ 0xff
 800104c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001052:	bf00      	nop
 8001054:	4809      	ldr	r0, [pc, #36]	@ (800107c <SPI_RxByte+0x38>)
 8001056:	f005 f817 	bl	8006088 <HAL_SPI_GetState>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d1f9      	bne.n	8001054 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001060:	1dba      	adds	r2, r7, #6
 8001062:	1df9      	adds	r1, r7, #7
 8001064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	4803      	ldr	r0, [pc, #12]	@ (800107c <SPI_RxByte+0x38>)
 800106e:	f004 fdec 	bl	8005c4a <HAL_SPI_TransmitReceive>

  return data;
 8001072:	79bb      	ldrb	r3, [r7, #6]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200005d4 	.word	0x200005d4

08001080 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001088:	f7ff ffdc 	bl	8001044 <SPI_RxByte>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	701a      	strb	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <SD_ReadyWait+0x34>)
 80010a4:	2232      	movs	r2, #50	@ 0x32
 80010a6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80010a8:	f7ff ffcc 	bl	8001044 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80010ac:	f7ff ffca 	bl	8001044 <SPI_RxByte>
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2bff      	cmp	r3, #255	@ 0xff
 80010b8:	d004      	beq.n	80010c4 <SD_ReadyWait+0x28>
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <SD_ReadyWait+0x34>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f3      	bne.n	80010ac <SD_ReadyWait+0x10>

  return res;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000010d 	.word	0x2000010d

080010d4 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80010da:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010de:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80010e0:	f7ff ff8a 	bl	8000ff8 <DESELECT>

  for(int i = 0; i < 10; i++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	e005      	b.n	80010f6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80010ea:	20ff      	movs	r0, #255	@ 0xff
 80010ec:	f7ff ff90 	bl	8001010 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	3301      	adds	r3, #1
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	2b09      	cmp	r3, #9
 80010fa:	ddf6      	ble.n	80010ea <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80010fc:	f7ff ff70 	bl	8000fe0 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001100:	2340      	movs	r3, #64	@ 0x40
 8001102:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001114:	2395      	movs	r3, #149	@ 0x95
 8001116:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	e009      	b.n	8001132 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800111e:	1d3a      	adds	r2, r7, #4
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff72 	bl	8001010 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b05      	cmp	r3, #5
 8001136:	ddf2      	ble.n	800111e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001138:	e002      	b.n	8001140 <SD_PowerOn+0x6c>
  {
    Count--;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3b01      	subs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001140:	f7ff ff80 	bl	8001044 <SPI_RxByte>
 8001144:	4603      	mov	r3, r0
 8001146:	2b01      	cmp	r3, #1
 8001148:	d002      	beq.n	8001150 <SD_PowerOn+0x7c>
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f4      	bne.n	800113a <SD_PowerOn+0x66>
  }

  DESELECT();
 8001150:	f7ff ff52 	bl	8000ff8 <DESELECT>
  SPI_TxByte(0XFF);
 8001154:	20ff      	movs	r0, #255	@ 0xff
 8001156:	f7ff ff5b 	bl	8001010 <SPI_TxByte>

  PowerFlag = 1;
 800115a:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <SD_PowerOn+0x94>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000010f 	.word	0x2000010f

0800116c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <SD_PowerOff+0x14>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	2000010f 	.word	0x2000010f

08001184 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <SD_CheckPower+0x14>)
 800118a:	781b      	ldrb	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000010f 	.word	0x2000010f

0800119c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <SD_RxDataBlock+0x68>)
 80011a8:	220a      	movs	r2, #10
 80011aa:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80011ac:	f7ff ff4a 	bl	8001044 <SPI_RxByte>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	2bff      	cmp	r3, #255	@ 0xff
 80011b8:	d104      	bne.n	80011c4 <SD_RxDataBlock+0x28>
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <SD_RxDataBlock+0x68>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f3      	bne.n	80011ac <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80011c8:	d001      	beq.n	80011ce <SD_RxDataBlock+0x32>
    return FALSE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e016      	b.n	80011fc <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff53 	bl	8001080 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff4d 	bl	8001080 <SPI_RxBytePtr>
  } while(btr -= 2);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3b02      	subs	r3, #2
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1ed      	bne.n	80011ce <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80011f2:	f7ff ff27 	bl	8001044 <SPI_RxByte>
  SPI_RxByte();
 80011f6:	f7ff ff25 	bl	8001044 <SPI_RxByte>

  return TRUE;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	2000010c 	.word	0x2000010c

08001208 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001218:	f7ff ff40 	bl	800109c <SD_ReadyWait>
 800121c:	4603      	mov	r3, r0
 800121e:	2bff      	cmp	r3, #255	@ 0xff
 8001220:	d001      	beq.n	8001226 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001222:	2300      	movs	r3, #0
 8001224:	e040      	b.n	80012a8 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fef1 	bl	8001010 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2bfd      	cmp	r3, #253	@ 0xfd
 8001232:	d031      	beq.n	8001298 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fee5 	bl	8001010 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fede 	bl	8001010 <SPI_TxByte>
    } while (--wc);
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	3b01      	subs	r3, #1
 8001258:	73bb      	strb	r3, [r7, #14]
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1eb      	bne.n	8001238 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001260:	f7ff fef0 	bl	8001044 <SPI_RxByte>
    SPI_RxByte();
 8001264:	f7ff feee 	bl	8001044 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001268:	e00b      	b.n	8001282 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800126a:	f7ff feeb 	bl	8001044 <SPI_RxByte>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	2b05      	cmp	r3, #5
 800127a:	d006      	beq.n	800128a <SD_TxDataBlock+0x82>
        break;

      i++;
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	3301      	adds	r3, #1
 8001280:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001282:	7b7b      	ldrb	r3, [r7, #13]
 8001284:	2b40      	cmp	r3, #64	@ 0x40
 8001286:	d9f0      	bls.n	800126a <SD_TxDataBlock+0x62>
 8001288:	e000      	b.n	800128c <SD_TxDataBlock+0x84>
        break;
 800128a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800128c:	bf00      	nop
 800128e:	f7ff fed9 	bl	8001044 <SPI_RxByte>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0fa      	beq.n	800128e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	2b05      	cmp	r3, #5
 80012a0:	d101      	bne.n	80012a6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80012bc:	f7ff feee 	bl	800109c <SD_ReadyWait>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2bff      	cmp	r3, #255	@ 0xff
 80012c4:	d001      	beq.n	80012ca <SD_SendCmd+0x1a>
    return 0xFF;
 80012c6:	23ff      	movs	r3, #255	@ 0xff
 80012c8:	e040      	b.n	800134c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe9f 	bl	8001010 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	0e1b      	lsrs	r3, r3, #24
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe99 	bl	8001010 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	0c1b      	lsrs	r3, r3, #16
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe93 	bl	8001010 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe8d 	bl	8001010 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe88 	bl	8001010 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b40      	cmp	r3, #64	@ 0x40
 8001308:	d101      	bne.n	800130e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800130a:	2395      	movs	r3, #149	@ 0x95
 800130c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b48      	cmp	r3, #72	@ 0x48
 8001312:	d101      	bne.n	8001318 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001314:	2387      	movs	r3, #135	@ 0x87
 8001316:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe78 	bl	8001010 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b4c      	cmp	r3, #76	@ 0x4c
 8001324:	d101      	bne.n	800132a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001326:	f7ff fe8d 	bl	8001044 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800132a:	230a      	movs	r3, #10
 800132c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800132e:	f7ff fe89 	bl	8001044 <SPI_RxByte>
 8001332:	4603      	mov	r3, r0
 8001334:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001336:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da05      	bge.n	800134a <SD_SendCmd+0x9a>
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	3b01      	subs	r3, #1
 8001342:	73bb      	strb	r3, [r7, #14]
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f1      	bne.n	800132e <SD_SendCmd+0x7e>

  return res;
 800134a:	7b7b      	ldrb	r3, [r7, #13]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001364:	2301      	movs	r3, #1
 8001366:	e0d5      	b.n	8001514 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001368:	4b6c      	ldr	r3, [pc, #432]	@ (800151c <SD_disk_initialize+0x1c8>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <SD_disk_initialize+0x2a>
    return Stat;
 8001376:	4b69      	ldr	r3, [pc, #420]	@ (800151c <SD_disk_initialize+0x1c8>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	e0ca      	b.n	8001514 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800137e:	f7ff fea9 	bl	80010d4 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001382:	f7ff fe2d 	bl	8000fe0 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800138a:	2100      	movs	r1, #0
 800138c:	2040      	movs	r0, #64	@ 0x40
 800138e:	f7ff ff8f 	bl	80012b0 <SD_SendCmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	f040 80a5 	bne.w	80014e4 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800139a:	4b61      	ldr	r3, [pc, #388]	@ (8001520 <SD_disk_initialize+0x1cc>)
 800139c:	2264      	movs	r2, #100	@ 0x64
 800139e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013a0:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80013a4:	2048      	movs	r0, #72	@ 0x48
 80013a6:	f7ff ff83 	bl	80012b0 <SD_SendCmd>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d158      	bne.n	8001462 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e00c      	b.n	80013d0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80013b6:	7bfc      	ldrb	r4, [r7, #15]
 80013b8:	f7ff fe44 	bl	8001044 <SPI_RxByte>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	f104 0310 	add.w	r3, r4, #16
 80013c4:	443b      	add	r3, r7
 80013c6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	3301      	adds	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d9ef      	bls.n	80013b6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013d6:	7abb      	ldrb	r3, [r7, #10]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f040 8083 	bne.w	80014e4 <SD_disk_initialize+0x190>
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	2baa      	cmp	r3, #170	@ 0xaa
 80013e2:	d17f      	bne.n	80014e4 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80013e4:	2100      	movs	r1, #0
 80013e6:	2077      	movs	r0, #119	@ 0x77
 80013e8:	f7ff ff62 	bl	80012b0 <SD_SendCmd>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d807      	bhi.n	8001402 <SD_disk_initialize+0xae>
 80013f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013f6:	2069      	movs	r0, #105	@ 0x69
 80013f8:	f7ff ff5a 	bl	80012b0 <SD_SendCmd>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001402:	4b47      	ldr	r3, [pc, #284]	@ (8001520 <SD_disk_initialize+0x1cc>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1eb      	bne.n	80013e4 <SD_disk_initialize+0x90>
 800140c:	e000      	b.n	8001410 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800140e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001410:	4b43      	ldr	r3, [pc, #268]	@ (8001520 <SD_disk_initialize+0x1cc>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d064      	beq.n	80014e4 <SD_disk_initialize+0x190>
 800141a:	2100      	movs	r1, #0
 800141c:	207a      	movs	r0, #122	@ 0x7a
 800141e:	f7ff ff47 	bl	80012b0 <SD_SendCmd>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d15d      	bne.n	80014e4 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e00c      	b.n	8001448 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800142e:	7bfc      	ldrb	r4, [r7, #15]
 8001430:	f7ff fe08 	bl	8001044 <SPI_RxByte>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	f104 0310 	add.w	r3, r4, #16
 800143c:	443b      	add	r3, r7
 800143e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3301      	adds	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d9ef      	bls.n	800142e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800144e:	7a3b      	ldrb	r3, [r7, #8]
 8001450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SD_disk_initialize+0x108>
 8001458:	2306      	movs	r3, #6
 800145a:	e000      	b.n	800145e <SD_disk_initialize+0x10a>
 800145c:	2302      	movs	r3, #2
 800145e:	73bb      	strb	r3, [r7, #14]
 8001460:	e040      	b.n	80014e4 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001462:	2100      	movs	r1, #0
 8001464:	2077      	movs	r0, #119	@ 0x77
 8001466:	f7ff ff23 	bl	80012b0 <SD_SendCmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d808      	bhi.n	8001482 <SD_disk_initialize+0x12e>
 8001470:	2100      	movs	r1, #0
 8001472:	2069      	movs	r0, #105	@ 0x69
 8001474:	f7ff ff1c 	bl	80012b0 <SD_SendCmd>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d801      	bhi.n	8001482 <SD_disk_initialize+0x12e>
 800147e:	2302      	movs	r3, #2
 8001480:	e000      	b.n	8001484 <SD_disk_initialize+0x130>
 8001482:	2301      	movs	r3, #1
 8001484:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d10e      	bne.n	80014aa <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800148c:	2100      	movs	r1, #0
 800148e:	2077      	movs	r0, #119	@ 0x77
 8001490:	f7ff ff0e 	bl	80012b0 <SD_SendCmd>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d80e      	bhi.n	80014b8 <SD_disk_initialize+0x164>
 800149a:	2100      	movs	r1, #0
 800149c:	2069      	movs	r0, #105	@ 0x69
 800149e:	f7ff ff07 	bl	80012b0 <SD_SendCmd>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d107      	bne.n	80014b8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80014a8:	e00d      	b.n	80014c6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80014aa:	2100      	movs	r1, #0
 80014ac:	2041      	movs	r0, #65	@ 0x41
 80014ae:	f7ff feff 	bl	80012b0 <SD_SendCmd>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <SD_disk_initialize+0x1cc>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e1      	bne.n	8001486 <SD_disk_initialize+0x132>
 80014c2:	e000      	b.n	80014c6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80014c4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80014c6:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <SD_disk_initialize+0x1cc>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <SD_disk_initialize+0x18c>
 80014d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d4:	2050      	movs	r0, #80	@ 0x50
 80014d6:	f7ff feeb 	bl	80012b0 <SD_SendCmd>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80014e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001524 <SD_disk_initialize+0x1d0>)
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80014ea:	f7ff fd85 	bl	8000ff8 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80014ee:	f7ff fda9 	bl	8001044 <SPI_RxByte>

  if (type)
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <SD_disk_initialize+0x1c8>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <SD_disk_initialize+0x1c8>)
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e001      	b.n	800150e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800150a:	f7ff fe2f 	bl	800116c <SD_PowerOff>
  }

  return Stat;
 800150e:	4b03      	ldr	r3, [pc, #12]	@ (800151c <SD_disk_initialize+0x1c8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	20000000 	.word	0x20000000
 8001520:	2000010c 	.word	0x2000010c
 8001524:	2000010e 	.word	0x2000010e

08001528 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SD_disk_status+0x14>
    return STA_NOINIT;
 8001538:	2301      	movs	r3, #1
 800153a:	e002      	b.n	8001542 <SD_disk_status+0x1a>

  return Stat;
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <SD_disk_status+0x28>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000000 	.word	0x20000000

08001554 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <SD_disk_read+0x1c>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <SD_disk_read+0x20>
    return RES_PARERR;
 8001570:	2304      	movs	r3, #4
 8001572:	e051      	b.n	8001618 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <SD_disk_read+0xcc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001582:	2303      	movs	r3, #3
 8001584:	e048      	b.n	8001618 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001586:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <SD_disk_read+0xd0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	025b      	lsls	r3, r3, #9
 8001596:	607b      	str	r3, [r7, #4]

  SELECT();
 8001598:	f7ff fd22 	bl	8000fe0 <SELECT>

  if (count == 1)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d111      	bne.n	80015c6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	2051      	movs	r0, #81	@ 0x51
 80015a6:	f7ff fe83 	bl	80012b0 <SD_SendCmd>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d129      	bne.n	8001604 <SD_disk_read+0xb0>
 80015b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f7ff fdf1 	bl	800119c <SD_RxDataBlock>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d021      	beq.n	8001604 <SD_disk_read+0xb0>
      count = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	e01e      	b.n	8001604 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	2052      	movs	r0, #82	@ 0x52
 80015ca:	f7ff fe71 	bl	80012b0 <SD_SendCmd>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d117      	bne.n	8001604 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80015d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015d8:	68b8      	ldr	r0, [r7, #8]
 80015da:	f7ff fddf 	bl	800119c <SD_RxDataBlock>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <SD_disk_read+0xa6>
          break;

        buff += 512;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015ea:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1ed      	bne.n	80015d4 <SD_disk_read+0x80>
 80015f8:	e000      	b.n	80015fc <SD_disk_read+0xa8>
          break;
 80015fa:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	204c      	movs	r0, #76	@ 0x4c
 8001600:	f7ff fe56 	bl	80012b0 <SD_SendCmd>
    }
  }

  DESELECT();
 8001604:	f7ff fcf8 	bl	8000ff8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001608:	f7ff fd1c 	bl	8001044 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf14      	ite	ne
 8001612:	2301      	movne	r3, #1
 8001614:	2300      	moveq	r3, #0
 8001616:	b2db      	uxtb	r3, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000000 	.word	0x20000000
 8001624:	2000010e 	.word	0x2000010e

08001628 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	4603      	mov	r3, r0
 8001636:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <SD_disk_write+0x1c>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <SD_disk_write+0x20>
    return RES_PARERR;
 8001644:	2304      	movs	r3, #4
 8001646:	e06b      	b.n	8001720 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <SD_disk_write+0x100>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001656:	2303      	movs	r3, #3
 8001658:	e062      	b.n	8001720 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800165a:	4b33      	ldr	r3, [pc, #204]	@ (8001728 <SD_disk_write+0x100>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001668:	2302      	movs	r3, #2
 800166a:	e059      	b.n	8001720 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800166c:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <SD_disk_write+0x104>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	607b      	str	r3, [r7, #4]

  SELECT();
 800167e:	f7ff fcaf 	bl	8000fe0 <SELECT>

  if (count == 1)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d110      	bne.n	80016aa <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	2058      	movs	r0, #88	@ 0x58
 800168c:	f7ff fe10 	bl	80012b0 <SD_SendCmd>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d13a      	bne.n	800170c <SD_disk_write+0xe4>
 8001696:	21fe      	movs	r1, #254	@ 0xfe
 8001698:	68b8      	ldr	r0, [r7, #8]
 800169a:	f7ff fdb5 	bl	8001208 <SD_TxDataBlock>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d033      	beq.n	800170c <SD_disk_write+0xe4>
      count = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	e030      	b.n	800170c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <SD_disk_write+0x104>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80016b6:	2100      	movs	r1, #0
 80016b8:	2077      	movs	r0, #119	@ 0x77
 80016ba:	f7ff fdf9 	bl	80012b0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	2057      	movs	r0, #87	@ 0x57
 80016c2:	f7ff fdf5 	bl	80012b0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	2059      	movs	r0, #89	@ 0x59
 80016ca:	f7ff fdf1 	bl	80012b0 <SD_SendCmd>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11b      	bne.n	800170c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80016d4:	21fc      	movs	r1, #252	@ 0xfc
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f7ff fd96 	bl	8001208 <SD_TxDataBlock>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016e8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ee      	bne.n	80016d4 <SD_disk_write+0xac>
 80016f6:	e000      	b.n	80016fa <SD_disk_write+0xd2>
          break;
 80016f8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80016fa:	21fd      	movs	r1, #253	@ 0xfd
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fd83 	bl	8001208 <SD_TxDataBlock>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <SD_disk_write+0xe4>
      {
        count = 1;
 8001708:	2301      	movs	r3, #1
 800170a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800170c:	f7ff fc74 	bl	8000ff8 <DESELECT>
  SPI_RxByte();
 8001710:	f7ff fc98 	bl	8001044 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	2000010e 	.word	0x2000010e

08001730 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b08b      	sub	sp, #44	@ 0x2c
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	603a      	str	r2, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	460b      	mov	r3, r1
 800173e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800174a:	2304      	movs	r3, #4
 800174c:	e119      	b.n	8001982 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001754:	79bb      	ldrb	r3, [r7, #6]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d129      	bne.n	80017ae <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d017      	beq.n	8001792 <SD_disk_ioctl+0x62>
 8001762:	2b02      	cmp	r3, #2
 8001764:	dc1f      	bgt.n	80017a6 <SD_disk_ioctl+0x76>
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <SD_disk_ioctl+0x40>
 800176a:	2b01      	cmp	r3, #1
 800176c:	d00b      	beq.n	8001786 <SD_disk_ioctl+0x56>
 800176e:	e01a      	b.n	80017a6 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001770:	f7ff fd08 	bl	8001184 <SD_CheckPower>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800177a:	f7ff fcf7 	bl	800116c <SD_PowerOff>
      res = RES_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001784:	e0fb      	b.n	800197e <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001786:	f7ff fca5 	bl	80010d4 <SD_PowerOn>
      res = RES_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001790:	e0f5      	b.n	800197e <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	1c5c      	adds	r4, r3, #1
 8001796:	f7ff fcf5 	bl	8001184 <SD_CheckPower>
 800179a:	4603      	mov	r3, r0
 800179c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017a4:	e0eb      	b.n	800197e <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80017a6:	2304      	movs	r3, #4
 80017a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017ac:	e0e7      	b.n	800197e <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80017ae:	4b77      	ldr	r3, [pc, #476]	@ (800198c <SD_disk_ioctl+0x25c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0e0      	b.n	8001982 <SD_disk_ioctl+0x252>

    SELECT();
 80017c0:	f7ff fc0e 	bl	8000fe0 <SELECT>

    switch (ctrl)
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	2b0d      	cmp	r3, #13
 80017c8:	f200 80ca 	bhi.w	8001960 <SD_disk_ioctl+0x230>
 80017cc:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <SD_disk_ioctl+0xa4>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080018cb 	.word	0x080018cb
 80017d8:	0800180d 	.word	0x0800180d
 80017dc:	080018bb 	.word	0x080018bb
 80017e0:	08001961 	.word	0x08001961
 80017e4:	08001961 	.word	0x08001961
 80017e8:	08001961 	.word	0x08001961
 80017ec:	08001961 	.word	0x08001961
 80017f0:	08001961 	.word	0x08001961
 80017f4:	08001961 	.word	0x08001961
 80017f8:	08001961 	.word	0x08001961
 80017fc:	08001961 	.word	0x08001961
 8001800:	080018dd 	.word	0x080018dd
 8001804:	08001901 	.word	0x08001901
 8001808:	08001925 	.word	0x08001925
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800180c:	2100      	movs	r1, #0
 800180e:	2049      	movs	r0, #73	@ 0x49
 8001810:	f7ff fd4e 	bl	80012b0 <SD_SendCmd>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 80a6 	bne.w	8001968 <SD_disk_ioctl+0x238>
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2110      	movs	r1, #16
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fcba 	bl	800119c <SD_RxDataBlock>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 809c 	beq.w	8001968 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	099b      	lsrs	r3, r3, #6
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10d      	bne.n	8001856 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800183a:	7d7b      	ldrb	r3, [r7, #21]
 800183c:	461a      	mov	r2, r3
 800183e:	7d3b      	ldrb	r3, [r7, #20]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b29b      	uxth	r3, r3
 8001844:	4413      	add	r3, r2
 8001846:	b29b      	uxth	r3, r3
 8001848:	3301      	adds	r3, #1
 800184a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800184c:	8bfb      	ldrh	r3, [r7, #30]
 800184e:	029a      	lsls	r2, r3, #10
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e02d      	b.n	80018b2 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001856:	7c7b      	ldrb	r3, [r7, #17]
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	b2da      	uxtb	r2, r3
 800185e:	7dbb      	ldrb	r3, [r7, #22]
 8001860:	09db      	lsrs	r3, r3, #7
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b2da      	uxtb	r2, r3
 8001868:	7d7b      	ldrb	r3, [r7, #21]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f003 0306 	and.w	r3, r3, #6
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4413      	add	r3, r2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3302      	adds	r3, #2
 800187a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800187e:	7d3b      	ldrb	r3, [r7, #20]
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	7cfb      	ldrb	r3, [r7, #19]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	b29b      	uxth	r3, r3
 800188c:	4413      	add	r3, r2
 800188e:	b29a      	uxth	r2, r3
 8001890:	7cbb      	ldrb	r3, [r7, #18]
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	b29b      	uxth	r3, r3
 8001896:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800189a:	b29b      	uxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80018a4:	8bfa      	ldrh	r2, [r7, #30]
 80018a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018aa:	3b09      	subs	r3, #9
 80018ac:	409a      	lsls	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80018b8:	e056      	b.n	8001968 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018c8:	e055      	b.n	8001976 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80018ca:	f7ff fbe7 	bl	800109c <SD_ReadyWait>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2bff      	cmp	r3, #255	@ 0xff
 80018d2:	d14b      	bne.n	800196c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018da:	e047      	b.n	800196c <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80018dc:	2100      	movs	r1, #0
 80018de:	2049      	movs	r0, #73	@ 0x49
 80018e0:	f7ff fce6 	bl	80012b0 <SD_SendCmd>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d142      	bne.n	8001970 <SD_disk_ioctl+0x240>
 80018ea:	2110      	movs	r1, #16
 80018ec:	6a38      	ldr	r0, [r7, #32]
 80018ee:	f7ff fc55 	bl	800119c <SD_RxDataBlock>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03b      	beq.n	8001970 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018fe:	e037      	b.n	8001970 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001900:	2100      	movs	r1, #0
 8001902:	204a      	movs	r0, #74	@ 0x4a
 8001904:	f7ff fcd4 	bl	80012b0 <SD_SendCmd>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d132      	bne.n	8001974 <SD_disk_ioctl+0x244>
 800190e:	2110      	movs	r1, #16
 8001910:	6a38      	ldr	r0, [r7, #32]
 8001912:	f7ff fc43 	bl	800119c <SD_RxDataBlock>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d02b      	beq.n	8001974 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001922:	e027      	b.n	8001974 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001924:	2100      	movs	r1, #0
 8001926:	207a      	movs	r0, #122	@ 0x7a
 8001928:	f7ff fcc2 	bl	80012b0 <SD_SendCmd>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 8001932:	2300      	movs	r3, #0
 8001934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001938:	e00b      	b.n	8001952 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 800193a:	6a3c      	ldr	r4, [r7, #32]
 800193c:	1c63      	adds	r3, r4, #1
 800193e:	623b      	str	r3, [r7, #32]
 8001940:	f7ff fb80 	bl	8001044 <SPI_RxByte>
 8001944:	4603      	mov	r3, r0
 8001946:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001948:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800194c:	3301      	adds	r3, #1
 800194e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001952:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001956:	2b03      	cmp	r3, #3
 8001958:	d9ef      	bls.n	800193a <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8001960:	2304      	movs	r3, #4
 8001962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001966:	e006      	b.n	8001976 <SD_disk_ioctl+0x246>
      break;
 8001968:	bf00      	nop
 800196a:	e004      	b.n	8001976 <SD_disk_ioctl+0x246>
      break;
 800196c:	bf00      	nop
 800196e:	e002      	b.n	8001976 <SD_disk_ioctl+0x246>
      break;
 8001970:	bf00      	nop
 8001972:	e000      	b.n	8001976 <SD_disk_ioctl+0x246>
      break;
 8001974:	bf00      	nop
    }

    DESELECT();
 8001976:	f7ff fb3f 	bl	8000ff8 <DESELECT>
    SPI_RxByte();
 800197a:	f7ff fb63 	bl	8001044 <SPI_RxByte>
  }

  return res;
 800197e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001982:	4618      	mov	r0, r3
 8001984:	372c      	adds	r7, #44	@ 0x2c
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000

08001990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b2:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	4a35      	ldr	r2, [pc, #212]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ca:	4b33      	ldr	r3, [pc, #204]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	4a2f      	ldr	r2, [pc, #188]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	4a29      	ldr	r2, [pc, #164]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2110      	movs	r1, #16
 8001a0a:	4824      	ldr	r0, [pc, #144]	@ (8001a9c <MX_GPIO_Init+0x10c>)
 8001a0c:	f002 fcae 	bl	800436c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001a16:	4822      	ldr	r0, [pc, #136]	@ (8001aa0 <MX_GPIO_Init+0x110>)
 8001a18:	f002 fca8 	bl	800436c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	481a      	ldr	r0, [pc, #104]	@ (8001a9c <MX_GPIO_Init+0x10c>)
 8001a34:	f002 fb18 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001a38:	2306      	movs	r3, #6
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4814      	ldr	r0, [pc, #80]	@ (8001aa0 <MX_GPIO_Init+0x110>)
 8001a4e:	f002 fb0b 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a52:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <MX_GPIO_Init+0x110>)
 8001a6c:	f002 fafc 	bl	8004068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2007      	movs	r0, #7
 8001a76:	f002 f848 	bl	8003b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a7a:	2007      	movs	r0, #7
 8001a7c:	f002 f85f 	bl	8003b3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2008      	movs	r0, #8
 8001a86:	f002 f840 	bl	8003b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a8a:	2008      	movs	r0, #8
 8001a8c:	f002 f857 	bl	8003b3e <HAL_NVIC_EnableIRQ>

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	@ 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000800 	.word	0x48000800
 8001aa0:	48000400 	.word	0x48000400

08001aa4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <MX_I2C3_Init+0x78>)
 8001aac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b20 <MX_I2C3_Init+0x7c>)
 8001ab2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ab4:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aba:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ade:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ae0:	f002 fc99 	bl	8004416 <HAL_I2C_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001aea:	f000 f980 	bl	8001dee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aee:	2100      	movs	r1, #0
 8001af0:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001af2:	f002 fd2b 	bl	800454c <HAL_I2CEx_ConfigAnalogFilter>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001afc:	f000 f977 	bl	8001dee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b00:	2100      	movs	r1, #0
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001b04:	f002 fd6d 	bl	80045e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b0e:	f000 f96e 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000110 	.word	0x20000110
 8001b1c:	40007800 	.word	0x40007800
 8001b20:	10b17db5 	.word	0x10b17db5

08001b24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b09c      	sub	sp, #112	@ 0x70
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	2244      	movs	r2, #68	@ 0x44
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f009 f936 	bl	800adb6 <memset>
  if(i2cHandle->Instance==I2C3)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001c08 <HAL_I2C_MspInit+0xe4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d155      	bne.n	8001c00 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fc60 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b6e:	f000 f93e 	bl	8001dee <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	4a25      	ldr	r2, [pc, #148]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7e:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc2:	f002 fa51 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001bd8:	2308      	movs	r3, #8
 8001bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bdc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001be0:	4619      	mov	r1, r3
 8001be2:	480b      	ldr	r0, [pc, #44]	@ (8001c10 <HAL_I2C_MspInit+0xec>)
 8001be4:	f002 fa40 	bl	8004068 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001bee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001c00:	bf00      	nop
 8001c02:	3770      	adds	r7, #112	@ 0x70
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40007800 	.word	0x40007800
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	48000800 	.word	0x48000800

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c18:	f000 fdf5 	bl	8002806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1c:	f000 f896 	bl	8001d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c20:	f7ff feb6 	bl	8001990 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c24:	f7ff f99a 	bl	8000f5c <MX_DMA_Init>
  MX_SPI1_Init();
 8001c28:	f000 f8e8 	bl	8001dfc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8001c2c:	f000 fd66 	bl	80026fc <MX_USB_PCD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8001c30:	f006 fd48 	bl	80086c4 <MX_FATFS_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <main+0x2a>
    Error_Handler();
 8001c3a:	f000 f8d8 	bl	8001dee <Error_Handler>
  }
  MX_I2C3_Init();
 8001c3e:	f7ff ff31 	bl	8001aa4 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001c42:	f000 fb75 	bl	8002330 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001c46:	f7ff f84d 	bl	8000ce4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001c4a:	f000 fbbb 	bl	80023c4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001c4e:	f000 fa3d 	bl	80020cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c52:	f000 fab3 	bl	80021bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  f_mount(&fs, "", 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	4930      	ldr	r1, [pc, #192]	@ (8001d1c <main+0x108>)
 8001c5a:	4831      	ldr	r0, [pc, #196]	@ (8001d20 <main+0x10c>)
 8001c5c:	f008 fae2 	bl	800a224 <f_mount>

 f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001c60:	2213      	movs	r2, #19
 8001c62:	4930      	ldr	r1, [pc, #192]	@ (8001d24 <main+0x110>)
 8001c64:	4830      	ldr	r0, [pc, #192]	@ (8001d28 <main+0x114>)
 8001c66:	f008 fb23 	bl	800a2b0 <f_open>

 f_getfree("", &fre_clust, &pfs);
 8001c6a:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <main+0x118>)
 8001c6c:	4930      	ldr	r1, [pc, #192]	@ (8001d30 <main+0x11c>)
 8001c6e:	482b      	ldr	r0, [pc, #172]	@ (8001d1c <main+0x108>)
 8001c70:	f008 fef5 	bl	800aa5e <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <main+0x118>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	3b02      	subs	r3, #2
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d2c <main+0x118>)
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	8952      	ldrh	r2, [r2, #10]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc08 	bl	800049c <__aeabi_ui2d>
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <main+0x120>)
 8001c92:	f7fe fc7d 	bl	8000590 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe fe89 	bl	80009b4 <__aeabi_d2uiz>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a24      	ldr	r2, [pc, #144]	@ (8001d38 <main+0x124>)
 8001ca6:	6013      	str	r3, [r2, #0]
  free1 = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001ca8:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <main+0x118>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <main+0x11c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fbef 	bl	800049c <__aeabi_ui2d>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <main+0x120>)
 8001cc4:	f7fe fc64 	bl	8000590 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe fe70 	bl	80009b4 <__aeabi_d2uiz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <main+0x128>)
 8001cd8:	6013      	str	r3, [r2, #0]

  f_puts("ta grosse mere la pute louis\n", &fil);
 8001cda:	4913      	ldr	r1, [pc, #76]	@ (8001d28 <main+0x114>)
 8001cdc:	4818      	ldr	r0, [pc, #96]	@ (8001d40 <main+0x12c>)
 8001cde:	f008 ffea 	bl	800acb6 <f_puts>
  f_puts("va te faire enculer!!!", &fil);
 8001ce2:	4911      	ldr	r1, [pc, #68]	@ (8001d28 <main+0x114>)
 8001ce4:	4817      	ldr	r0, [pc, #92]	@ (8001d44 <main+0x130>)
 8001ce6:	f008 ffe6 	bl	800acb6 <f_puts>
  f_close(&fil);
 8001cea:	480f      	ldr	r0, [pc, #60]	@ (8001d28 <main+0x114>)
 8001cec:	f008 fe8d 	bl	800aa0a <f_close>
  /* Unmount SDCARD */
  f_mount(NULL, "", 1);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	490a      	ldr	r1, [pc, #40]	@ (8001d1c <main+0x108>)
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f008 fa95 	bl	800a224 <f_mount>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8001cfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cfe:	4812      	ldr	r0, [pc, #72]	@ (8001d48 <main+0x134>)
 8001d00:	f002 fb4c 	bl	800439c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_15);
 8001d04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d08:	480f      	ldr	r0, [pc, #60]	@ (8001d48 <main+0x134>)
 8001d0a:	f002 fb47 	bl	800439c <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8001d0e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001d12:	f000 fde9 	bl	80028e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8001d16:	bf00      	nop
 8001d18:	e7ef      	b.n	8001cfa <main+0xe6>
 8001d1a:	bf00      	nop
 8001d1c:	0800ae28 	.word	0x0800ae28
 8001d20:	20000164 	.word	0x20000164
 8001d24:	0800ae2c 	.word	0x0800ae2c
 8001d28:	20000398 	.word	0x20000398
 8001d2c:	20000394 	.word	0x20000394
 8001d30:	200005c8 	.word	0x200005c8
 8001d34:	3fe00000 	.word	0x3fe00000
 8001d38:	200005cc 	.word	0x200005cc
 8001d3c:	200005d0 	.word	0x200005d0
 8001d40:	0800ae38 	.word	0x0800ae38
 8001d44:	0800ae58 	.word	0x0800ae58
 8001d48:	48000400 	.word	0x48000400

08001d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	@ 0x50
 8001d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	2238      	movs	r2, #56	@ 0x38
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f009 f82b 	bl	800adb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d72:	f002 fd7b 	bl	800486c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8001d76:	2323      	movs	r3, #35	@ 0x23
 8001d78:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d86:	2340      	movs	r3, #64	@ 0x40
 8001d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d92:	2303      	movs	r3, #3
 8001d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001da2:	2302      	movs	r3, #2
 8001da4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001daa:	f107 0318 	add.w	r3, r7, #24
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fe10 	bl	80049d4 <HAL_RCC_OscConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001dba:	f000 f818 	bl	8001dee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 f90e 	bl	8004ff8 <HAL_RCC_ClockConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001de2:	f000 f804 	bl	8001dee <Error_Handler>
  }
}
 8001de6:	bf00      	nop
 8001de8:	3750      	adds	r7, #80	@ 0x50
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df2:	b672      	cpsid	i
}
 8001df4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df6:	bf00      	nop
 8001df8:	e7fd      	b.n	8001df6 <Error_Handler+0x8>
	...

08001dfc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e02:	4a1c      	ldr	r2, [pc, #112]	@ (8001e74 <MX_SPI1_Init+0x78>)
 8001e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e14:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e32:	2210      	movs	r2, #16
 8001e34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e56:	2208      	movs	r2, #8
 8001e58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e5c:	f003 fcd4 	bl	8005808 <HAL_SPI_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e66:	f7ff ffc2 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200005d4 	.word	0x200005d4
 8001e74:	40013000 	.word	0x40013000

08001e78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	@ 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a17      	ldr	r2, [pc, #92]	@ (8001ef4 <HAL_SPI_MspInit+0x7c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d128      	bne.n	8001eec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9e:	4a16      	ldr	r2, [pc, #88]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001ea0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eca:	23e0      	movs	r3, #224	@ 0xe0
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eda:	2305      	movs	r3, #5
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee8:	f002 f8be 	bl	8004068 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	@ 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40013000 	.word	0x40013000
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	4a0e      	ldr	r2, [pc, #56]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f32:	f002 fd3f 	bl	80049b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <SDTimer_Handler+0x40>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <SDTimer_Handler+0x1c>
    Timer1--;
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <SDTimer_Handler+0x40>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <SDTimer_Handler+0x40>)
 8001f5e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <SDTimer_Handler+0x44>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <SDTimer_Handler+0x34>
    Timer2--;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <SDTimer_Handler+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <SDTimer_Handler+0x44>)
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000010c 	.word	0x2000010c
 8001f88:	2000010d 	.word	0x2000010d

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <NMI_Handler+0x4>

08001f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <SysTick_Handler+0x30>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <SysTick_Handler+0x30>)
 8001ff0:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <SysTick_Handler+0x30>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b09      	cmp	r3, #9
 8001ffa:	d904      	bls.n	8002006 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <SysTick_Handler+0x30>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002002:	f7ff ff9f 	bl	8001f44 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002006:	f000 fc51 	bl	80028ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000638 	.word	0x20000638

08002014 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002018:	2002      	movs	r0, #2
 800201a:	f002 f9d9 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}

08002022 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002026:	2004      	movs	r0, #4
 8002028:	f002 f9d2 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <DMA1_Channel1_IRQHandler+0x10>)
 8002036:	f001 ff05 	bl	8003e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200007fc 	.word	0x200007fc

08002044 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <DMA1_Channel2_IRQHandler+0x10>)
 800204a:	f001 fefb 	bl	8003e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000085c 	.word	0x2000085c

08002058 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <DMA1_Channel3_IRQHandler+0x10>)
 800205e:	f001 fef1 	bl	8003e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200000ac 	.word	0x200000ac

0800206c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <DMA1_Channel4_IRQHandler+0x10>)
 8002072:	f001 fee7 	bl	8003e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200008bc 	.word	0x200008bc

08002080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <USART1_IRQHandler+0x10>)
 8002086:	f005 f937 	bl	80072f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000768 	.word	0x20000768

08002094 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <LPUART1_IRQHandler+0x10>)
 800209a:	f005 f92d 	bl	80072f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200006d4 	.word	0x200006d4

080020a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08e      	sub	sp, #56	@ 0x38
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ec:	463b      	mov	r3, r7
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	611a      	str	r2, [r3, #16]
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020fe:	4b2d      	ldr	r3, [pc, #180]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002100:	4a2d      	ldr	r2, [pc, #180]	@ (80021b8 <MX_TIM3_Init+0xec>)
 8002102:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002104:	4b2b      	ldr	r3, [pc, #172]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210a:	4b2a      	ldr	r3, [pc, #168]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002110:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002116:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002118:	4b26      	ldr	r3, [pc, #152]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211e:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002124:	4823      	ldr	r0, [pc, #140]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002126:	f004 f921 	bl	800636c <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002130:	f7ff fe5d 	bl	8001dee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002138:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800213a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800213e:	4619      	mov	r1, r3
 8002140:	481c      	ldr	r0, [pc, #112]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002142:	f004 fadf 	bl	8006704 <HAL_TIM_ConfigClockSource>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800214c:	f7ff fe4f 	bl	8001dee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002150:	4818      	ldr	r0, [pc, #96]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002152:	f004 f962 	bl	800641a <HAL_TIM_PWM_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800215c:	f7ff fe47 	bl	8001dee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	4811      	ldr	r0, [pc, #68]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002170:	f004 fff0 	bl	8007154 <HAL_TIMEx_MasterConfigSynchronization>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800217a:	f7ff fe38 	bl	8001dee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217e:	2360      	movs	r3, #96	@ 0x60
 8002180:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	4619      	mov	r1, r3
 8002194:	4807      	ldr	r0, [pc, #28]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002196:	f004 f9a1 	bl	80064dc <HAL_TIM_PWM_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80021a0:	f7ff fe25 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021a4:	4803      	ldr	r0, [pc, #12]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 80021a6:	f000 f88b 	bl	80022c0 <HAL_TIM_MspPostInit>

}
 80021aa:	bf00      	nop
 80021ac:	3738      	adds	r7, #56	@ 0x38
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000063c 	.word	0x2000063c
 80021b8:	40000400 	.word	0x40000400

080021bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c2:	f107 0310 	add.w	r3, r7, #16
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021da:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002254 <MX_TIM4_Init+0x98>)
 80021de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000-1;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021e2:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80021e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80021ee:	4b18      	ldr	r3, [pc, #96]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021f0:	2263      	movs	r2, #99	@ 0x63
 80021f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002200:	4813      	ldr	r0, [pc, #76]	@ (8002250 <MX_TIM4_Init+0x94>)
 8002202:	f004 f8b3 	bl	800636c <HAL_TIM_Base_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800220c:	f7ff fdef 	bl	8001dee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002214:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	4619      	mov	r1, r3
 800221c:	480c      	ldr	r0, [pc, #48]	@ (8002250 <MX_TIM4_Init+0x94>)
 800221e:	f004 fa71 	bl	8006704 <HAL_TIM_ConfigClockSource>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002228:	f7ff fde1 	bl	8001dee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800222c:	2320      	movs	r3, #32
 800222e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	@ (8002250 <MX_TIM4_Init+0x94>)
 800223a:	f004 ff8b 	bl	8007154 <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002244:	f7ff fdd3 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000688 	.word	0x20000688
 8002254:	40000800 	.word	0x40000800

08002258 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <HAL_TIM_Base_MspInit+0x5c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10c      	bne.n	8002284 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800226a:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6593      	str	r3, [r2, #88]	@ 0x58
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002282:	e010      	b.n	80022a6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0c      	ldr	r2, [pc, #48]	@ (80022bc <HAL_TIM_Base_MspInit+0x64>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10b      	bne.n	80022a6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6593      	str	r3, [r2, #88]	@ 0x58
 800229a:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a11      	ldr	r2, [pc, #68]	@ (8002324 <HAL_TIM_MspPostInit+0x64>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d11b      	bne.n	800231a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_TIM_MspPostInit+0x68>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <HAL_TIM_MspPostInit+0x68>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_TIM_MspPostInit+0x68>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022fa:	2340      	movs	r3, #64	@ 0x40
 80022fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	@ (800232c <HAL_TIM_MspPostInit+0x6c>)
 8002316:	f001 fea7 	bl	8004068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800231a:	bf00      	nop
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40000400 	.word	0x40000400
 8002328:	40021000 	.word	0x40021000
 800232c:	48000800 	.word	0x48000800

08002330 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002334:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002336:	4a21      	ldr	r2, [pc, #132]	@ (80023bc <MX_LPUART1_UART_Init+0x8c>)
 8002338:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800233a:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 800233c:	4a20      	ldr	r2, [pc, #128]	@ (80023c0 <MX_LPUART1_UART_Init+0x90>)
 800233e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002340:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002346:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800234c:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002352:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002354:	220c      	movs	r2, #12
 8002356:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002358:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800235e:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002364:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002366:	2200      	movs	r2, #0
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800236a:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 800236c:	2200      	movs	r2, #0
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002370:	4811      	ldr	r0, [pc, #68]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002372:	f004 ff71 	bl	8007258 <HAL_UART_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800237c:	f7ff fd37 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002380:	2100      	movs	r1, #0
 8002382:	480d      	ldr	r0, [pc, #52]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002384:	f006 f899 	bl	80084ba <HAL_UARTEx_SetTxFifoThreshold>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800238e:	f7ff fd2e 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002392:	2100      	movs	r1, #0
 8002394:	4808      	ldr	r0, [pc, #32]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002396:	f006 f8ce 	bl	8008536 <HAL_UARTEx_SetRxFifoThreshold>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80023a0:	f7ff fd25 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 80023a6:	f006 f84f 	bl	8008448 <HAL_UARTEx_DisableFifoMode>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80023b0:	f7ff fd1d 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200006d4 	.word	0x200006d4
 80023bc:	40008000 	.word	0x40008000
 80023c0:	00033324 	.word	0x00033324

080023c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c8:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023ca:	4a23      	ldr	r2, [pc, #140]	@ (8002458 <MX_USART1_UART_Init+0x94>)
 80023cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023ce:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f4:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fa:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002400:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002406:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002408:	2200      	movs	r2, #0
 800240a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800240c:	4811      	ldr	r0, [pc, #68]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 800240e:	f004 ff23 	bl	8007258 <HAL_UART_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002418:	f7ff fce9 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800241c:	2100      	movs	r1, #0
 800241e:	480d      	ldr	r0, [pc, #52]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002420:	f006 f84b 	bl	80084ba <HAL_UARTEx_SetTxFifoThreshold>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800242a:	f7ff fce0 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800242e:	2100      	movs	r1, #0
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002432:	f006 f880 	bl	8008536 <HAL_UARTEx_SetRxFifoThreshold>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800243c:	f7ff fcd7 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002440:	4804      	ldr	r0, [pc, #16]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002442:	f006 f801 	bl	8008448 <HAL_UARTEx_DisableFifoMode>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800244c:	f7ff fccf 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000768 	.word	0x20000768
 8002458:	40013800 	.word	0x40013800

0800245c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b09e      	sub	sp, #120	@ 0x78
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002474:	f107 0320 	add.w	r3, r7, #32
 8002478:	2244      	movs	r2, #68	@ 0x44
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f008 fc9a 	bl	800adb6 <memset>
  if(uartHandle->Instance==LPUART1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a93      	ldr	r2, [pc, #588]	@ (80026d4 <HAL_UART_MspInit+0x278>)
 8002488:	4293      	cmp	r3, r2
 800248a:	f040 80b0 	bne.w	80025ee <HAL_UART_MspInit+0x192>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800248e:	2320      	movs	r3, #32
 8002490:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002492:	2300      	movs	r3, #0
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002496:	f107 0320 	add.w	r3, r7, #32
 800249a:	4618      	mov	r0, r3
 800249c:	f002 ffc4 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024a6:	f7ff fca2 	bl	8001dee <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024aa:	4b8b      	ldr	r3, [pc, #556]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	4a8a      	ldr	r2, [pc, #552]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80024b6:	4b88      	ldr	r3, [pc, #544]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b85      	ldr	r3, [pc, #532]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	4a84      	ldr	r2, [pc, #528]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ce:	4b82      	ldr	r3, [pc, #520]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b7f      	ldr	r3, [pc, #508]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	4a7e      	ldr	r2, [pc, #504]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e6:	4b7c      	ldr	r3, [pc, #496]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024f2:	2308      	movs	r3, #8
 80024f4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002502:	230c      	movs	r3, #12
 8002504:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002510:	f001 fdaa 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002514:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002518:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002526:	2308      	movs	r3, #8
 8002528:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800252e:	4619      	mov	r1, r3
 8002530:	486a      	ldr	r0, [pc, #424]	@ (80026dc <HAL_UART_MspInit+0x280>)
 8002532:	f001 fd99 	bl	8004068 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002536:	4b6a      	ldr	r3, [pc, #424]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002538:	4a6a      	ldr	r2, [pc, #424]	@ (80026e4 <HAL_UART_MspInit+0x288>)
 800253a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800253c:	4b68      	ldr	r3, [pc, #416]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 800253e:	2222      	movs	r2, #34	@ 0x22
 8002540:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002542:	4b67      	ldr	r3, [pc, #412]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002548:	4b65      	ldr	r3, [pc, #404]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800254e:	4b64      	ldr	r3, [pc, #400]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002550:	2280      	movs	r2, #128	@ 0x80
 8002552:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002554:	4b62      	ldr	r3, [pc, #392]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800255a:	4b61      	ldr	r3, [pc, #388]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002560:	4b5f      	ldr	r3, [pc, #380]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002566:	4b5e      	ldr	r3, [pc, #376]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800256c:	485c      	ldr	r0, [pc, #368]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 800256e:	f001 fb01 	bl	8003b74 <HAL_DMA_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8002578:	f7ff fc39 	bl	8001dee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a58      	ldr	r2, [pc, #352]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002584:	4a56      	ldr	r2, [pc, #344]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800258a:	4b57      	ldr	r3, [pc, #348]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 800258c:	4a57      	ldr	r2, [pc, #348]	@ (80026ec <HAL_UART_MspInit+0x290>)
 800258e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002590:	4b55      	ldr	r3, [pc, #340]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 8002592:	2223      	movs	r2, #35	@ 0x23
 8002594:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002596:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 8002598:	2210      	movs	r2, #16
 800259a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800259c:	4b52      	ldr	r3, [pc, #328]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025a2:	4b51      	ldr	r3, [pc, #324]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025a4:	2280      	movs	r2, #128	@ 0x80
 80025a6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025a8:	4b4f      	ldr	r3, [pc, #316]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ae:	4b4e      	ldr	r3, [pc, #312]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80025b4:	4b4c      	ldr	r3, [pc, #304]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ba:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80025c0:	4849      	ldr	r0, [pc, #292]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025c2:	f001 fad7 	bl	8003b74 <HAL_DMA_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 80025cc:	f7ff fc0f 	bl	8001dee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a45      	ldr	r2, [pc, #276]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025d4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025d6:	4a44      	ldr	r2, [pc, #272]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	205b      	movs	r0, #91	@ 0x5b
 80025e2:	f001 fa92 	bl	8003b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80025e6:	205b      	movs	r0, #91	@ 0x5b
 80025e8:	f001 faa9 	bl	8003b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025ec:	e06e      	b.n	80026cc <HAL_UART_MspInit+0x270>
  else if(uartHandle->Instance==USART1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a3f      	ldr	r2, [pc, #252]	@ (80026f0 <HAL_UART_MspInit+0x294>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d169      	bne.n	80026cc <HAL_UART_MspInit+0x270>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80025fc:	2302      	movs	r3, #2
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	4618      	mov	r0, r3
 8002606:	f002 ff0f 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002610:	f7ff fbed 	bl	8001dee <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002614:	4b30      	ldr	r3, [pc, #192]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 8002616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002618:	4a2f      	ldr	r2, [pc, #188]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002620:	4b2d      	ldr	r3, [pc, #180]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 8002622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002630:	4a29      	ldr	r2, [pc, #164]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002638:	4b27      	ldr	r3, [pc, #156]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 800263a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002644:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002648:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002656:	2307      	movs	r3, #7
 8002658:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800265e:	4619      	mov	r1, r3
 8002660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002664:	f001 fd00 	bl	8004068 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8002668:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 800266a:	4a23      	ldr	r2, [pc, #140]	@ (80026f8 <HAL_UART_MspInit+0x29c>)
 800266c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800266e:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002670:	2218      	movs	r2, #24
 8002672:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002674:	4b1f      	ldr	r3, [pc, #124]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002680:	4b1c      	ldr	r3, [pc, #112]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002686:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002692:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002694:	2220      	movs	r2, #32
 8002696:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002698:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 800269a:	2200      	movs	r2, #0
 800269c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800269e:	4815      	ldr	r0, [pc, #84]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 80026a0:	f001 fa68 	bl	8003b74 <HAL_DMA_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_UART_MspInit+0x252>
      Error_Handler();
 80026aa:	f7ff fba0 	bl	8001dee <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a10      	ldr	r2, [pc, #64]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 80026b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026b6:	4a0f      	ldr	r2, [pc, #60]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	2025      	movs	r0, #37	@ 0x25
 80026c2:	f001 fa22 	bl	8003b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026c6:	2025      	movs	r0, #37	@ 0x25
 80026c8:	f001 fa39 	bl	8003b3e <HAL_NVIC_EnableIRQ>
}
 80026cc:	bf00      	nop
 80026ce:	3778      	adds	r7, #120	@ 0x78
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40008000 	.word	0x40008000
 80026d8:	40021000 	.word	0x40021000
 80026dc:	48000400 	.word	0x48000400
 80026e0:	200007fc 	.word	0x200007fc
 80026e4:	40020008 	.word	0x40020008
 80026e8:	2000085c 	.word	0x2000085c
 80026ec:	4002001c 	.word	0x4002001c
 80026f0:	40013800 	.word	0x40013800
 80026f4:	200008bc 	.word	0x200008bc
 80026f8:	40020044 	.word	0x40020044

080026fc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002700:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002702:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <MX_USB_PCD_Init+0x4c>)
 8002704:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002706:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002708:	2208      	movs	r2, #8
 800270a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800270c:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 800270e:	2202      	movs	r2, #2
 8002710:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002714:	2202      	movs	r2, #2
 8002716:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 800271a:	2200      	movs	r2, #0
 800271c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002720:	2200      	movs	r2, #0
 8002722:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002724:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002726:	2200      	movs	r2, #0
 8002728:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 800272c:	2200      	movs	r2, #0
 800272e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002732:	f001 ffa2 	bl	800467a <HAL_PCD_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800273c:	f7ff fb57 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000091c 	.word	0x2000091c
 8002748:	40005c00 	.word	0x40005c00

0800274c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b094      	sub	sp, #80	@ 0x50
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	2244      	movs	r2, #68	@ 0x44
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f008 fb2a 	bl	800adb6 <memset>
  if(pcdHandle->Instance==USB)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <HAL_PCD_MspInit+0x60>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d11a      	bne.n	80027a2 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800276c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002770:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002772:	2300      	movs	r3, #0
 8002774:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	4618      	mov	r0, r3
 800277c:	f002 fe54 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002786:	f7ff fb32 	bl	8001dee <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_PCD_MspInit+0x64>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	4a08      	ldr	r2, [pc, #32]	@ (80027b0 <HAL_PCD_MspInit+0x64>)
 8002790:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002794:	6593      	str	r3, [r2, #88]	@ 0x58
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_PCD_MspInit+0x64>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80027a2:	bf00      	nop
 80027a4:	3750      	adds	r7, #80	@ 0x50
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40005c00 	.word	0x40005c00
 80027b0:	40021000 	.word	0x40021000

080027b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027b4:	480d      	ldr	r0, [pc, #52]	@ (80027ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80027b8:	f7ff fc76 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027bc:	480c      	ldr	r0, [pc, #48]	@ (80027f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80027be:	490d      	ldr	r1, [pc, #52]	@ (80027f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027c0:	4a0d      	ldr	r2, [pc, #52]	@ (80027f8 <LoopForever+0xe>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80027d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002800 <LoopForever+0x16>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80027e2:	f008 faf1 	bl	800adc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027e6:	f7ff fa15 	bl	8001c14 <main>

080027ea <LoopForever>:

LoopForever:
    b LoopForever
 80027ea:	e7fe      	b.n	80027ea <LoopForever>
  ldr   r0, =_estack
 80027ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80027f8:	0800af84 	.word	0x0800af84
  ldr r2, =_sbss
 80027fc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002800:	20000c38 	.word	0x20000c38

08002804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC1_2_IRQHandler>

08002806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002810:	2003      	movs	r0, #3
 8002812:	f001 f96f 	bl	8003af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002816:	200f      	movs	r0, #15
 8002818:	f000 f80e 	bl	8002838 <HAL_InitTick>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	e001      	b.n	800282c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002828:	f7ff fb68 	bl	8001efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800282c:	79fb      	ldrb	r3, [r7, #7]

}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002844:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_InitTick+0x68>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d022      	beq.n	8002892 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <HAL_InitTick+0x6c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <HAL_InitTick+0x68>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002858:	fbb1 f3f3 	udiv	r3, r1, r3
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	4618      	mov	r0, r3
 8002862:	f001 f97a 	bl	8003b5a <HAL_SYSTICK_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10f      	bne.n	800288c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	d809      	bhi.n	8002886 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002872:	2200      	movs	r2, #0
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	f04f 30ff 	mov.w	r0, #4294967295
 800287a:	f001 f946 	bl	8003b0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800287e:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <HAL_InitTick+0x70>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e007      	b.n	8002896 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	e004      	b.n	8002896 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	e001      	b.n	8002896 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000000c 	.word	0x2000000c
 80028a4:	20000004 	.word	0x20000004
 80028a8:	20000008 	.word	0x20000008

080028ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b0:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <HAL_IncTick+0x1c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_IncTick+0x20>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a03      	ldr	r2, [pc, #12]	@ (80028c8 <HAL_IncTick+0x1c>)
 80028bc:	6013      	str	r3, [r2, #0]
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	20000bf8 	.word	0x20000bf8
 80028cc:	2000000c 	.word	0x2000000c

080028d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return uwTick;
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_GetTick+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000bf8 	.word	0x20000bf8

080028e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff ffee 	bl	80028d0 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d004      	beq.n	800290c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_Delay+0x40>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800290c:	bf00      	nop
 800290e:	f7ff ffdf 	bl	80028d0 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	429a      	cmp	r2, r3
 800291c:	d8f7      	bhi.n	800290e <HAL_Delay+0x26>
  {
  }
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000000c 	.word	0x2000000c

0800292c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	609a      	str	r2, [r3, #8]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3360      	adds	r3, #96	@ 0x60
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <LL_ADC_SetOffset+0x44>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	03fff000 	.word	0x03fff000

080029dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3360      	adds	r3, #96	@ 0x60
 80029ea:	461a      	mov	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3360      	adds	r3, #96	@ 0x60
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3360      	adds	r3, #96	@ 0x60
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3360      	adds	r3, #96	@ 0x60
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	615a      	str	r2, [r3, #20]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3330      	adds	r3, #48	@ 0x30
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	211f      	movs	r1, #31
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	401a      	ands	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 011f 	and.w	r1, r3, #31
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	431a      	orrs	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b1c:	bf00      	nop
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3314      	adds	r3, #20
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	0e5b      	lsrs	r3, r3, #25
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	0d1b      	lsrs	r3, r3, #20
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2107      	movs	r1, #7
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	0d1b      	lsrs	r3, r3, #20
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0318 	and.w	r3, r3, #24
 8002ba2:	4908      	ldr	r1, [pc, #32]	@ (8002bc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ba4:	40d9      	lsrs	r1, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	400b      	ands	r3, r1
 8002baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	0007ffff 	.word	0x0007ffff

08002bc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002bd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6093      	str	r3, [r2, #8]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c00:	d101      	bne.n	8002c06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <LL_ADC_IsEnabled+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_ADC_IsEnabled+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d101      	bne.n	8002ca2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d101      	bne.n	8002cc8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b089      	sub	sp, #36	@ 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e167      	b.n	8002fc2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fe f8a9 	bl	8000e58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff67 	bl	8002bec <LL_ADC_IsDeepPowerDownEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff4d 	bl	8002bc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff82 	bl	8002c3c <LL_ADC_IsInternalRegulatorEnabled>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d115      	bne.n	8002d6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ff66 	bl	8002c14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d48:	4ba0      	ldr	r3, [pc, #640]	@ (8002fcc <HAL_ADC_Init+0x2f4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	4aa0      	ldr	r2, [pc, #640]	@ (8002fd0 <HAL_ADC_Init+0x2f8>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	3301      	adds	r3, #1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f9      	bne.n	8002d5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff64 	bl	8002c3c <LL_ADC_IsInternalRegulatorEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10d      	bne.n	8002d96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff75 	bl	8002c8a <LL_ADC_REG_IsConversionOngoing>
 8002da0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 8100 	bne.w	8002fb0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f040 80fc 	bne.w	8002fb0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002dc0:	f043 0202 	orr.w	r2, r3, #2
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff49 	bl	8002c64 <LL_ADC_IsEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d111      	bne.n	8002dfc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ddc:	f7ff ff42 	bl	8002c64 <LL_ADC_IsEnabled>
 8002de0:	4604      	mov	r4, r0
 8002de2:	487c      	ldr	r0, [pc, #496]	@ (8002fd4 <HAL_ADC_Init+0x2fc>)
 8002de4:	f7ff ff3e 	bl	8002c64 <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4323      	orrs	r3, r4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4878      	ldr	r0, [pc, #480]	@ (8002fd8 <HAL_ADC_Init+0x300>)
 8002df8:	f7ff fd98 	bl	800292c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7f5b      	ldrb	r3, [r3, #29]
 8002e00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d106      	bne.n	8002e38 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	045b      	lsls	r3, r3, #17
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	4b60      	ldr	r3, [pc, #384]	@ (8002fdc <HAL_ADC_Init+0x304>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	430b      	orrs	r3, r1
 8002e66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff14 	bl	8002cb0 <LL_ADC_INJ_IsConversionOngoing>
 8002e88:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d16d      	bne.n	8002f6c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d16a      	bne.n	8002f6c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e9a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ea2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eb2:	f023 0302 	bic.w	r3, r3, #2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d017      	beq.n	8002ef8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ed6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ee0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ee4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6911      	ldr	r1, [r2, #16]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ef6:	e013      	b.n	8002f20 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f1c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d118      	bne.n	8002f5c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f40:	4311      	orrs	r1, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	e007      	b.n	8002f6c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10c      	bne.n	8002f8e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	f023 010f 	bic.w	r1, r3, #15
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	1e5a      	subs	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f8c:	e007      	b.n	8002f9e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 020f 	bic.w	r2, r2, #15
 8002f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fae:	e007      	b.n	8002fc0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	f043 0210 	orr.w	r2, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	@ 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	053e2d63 	.word	0x053e2d63
 8002fd4:	50000100 	.word	0x50000100
 8002fd8:	50000300 	.word	0x50000300
 8002fdc:	fff04007 	.word	0xfff04007

08002fe0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0b6      	sub	sp, #216	@ 0xd8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x22>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e3c8      	b.n	8003794 <HAL_ADC_ConfigChannel+0x7b4>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fe3b 	bl	8002c8a <LL_ADC_REG_IsConversionOngoing>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 83ad 	bne.w	8003776 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	f7ff fd51 	bl	8002ad0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fe29 	bl	8002c8a <LL_ADC_REG_IsConversionOngoing>
 8003038:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fe35 	bl	8002cb0 <LL_ADC_INJ_IsConversionOngoing>
 8003046:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 81d9 	bne.w	8003406 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 81d4 	bne.w	8003406 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003066:	d10f      	bne.n	8003088 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2200      	movs	r2, #0
 8003072:	4619      	mov	r1, r3
 8003074:	f7ff fd58 	bl	8002b28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fd12 	bl	8002aaa <LL_ADC_SetSamplingTimeCommonConfig>
 8003086:	e00e      	b.n	80030a6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	461a      	mov	r2, r3
 8003096:	f7ff fd47 	bl	8002b28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fd02 	bl	8002aaa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d022      	beq.n	800310e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6919      	ldr	r1, [r3, #16]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030d8:	f7ff fc5c 	bl	8002994 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6919      	ldr	r1, [r3, #16]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f7ff fca8 	bl	8002a3e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d102      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x124>
 80030fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003102:	e000      	b.n	8003106 <HAL_ADC_ConfigChannel+0x126>
 8003104:	2300      	movs	r3, #0
 8003106:	461a      	mov	r2, r3
 8003108:	f7ff fcb4 	bl	8002a74 <LL_ADC_SetOffsetSaturation>
 800310c:	e17b      	b.n	8003406 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fc61 	bl	80029dc <LL_ADC_GetOffsetChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <HAL_ADC_ConfigChannel+0x15a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fc56 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	0e9b      	lsrs	r3, r3, #26
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	e01e      	b.n	8003178 <HAL_ADC_ConfigChannel+0x198>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fc4b 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800315c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e004      	b.n	8003176 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800316c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1b0>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0e9b      	lsrs	r3, r3, #26
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	e018      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x1e2>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80031a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80031ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	e004      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80031b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d106      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fc1a 	bl	8002a08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2101      	movs	r1, #1
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fbfe 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x220>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fbf3 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	e01e      	b.n	800323e <HAL_ADC_ConfigChannel+0x25e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fbe8 	bl	80029dc <LL_ADC_GetOffsetChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800321e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003222:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800322e:	2320      	movs	r3, #32
 8003230:	e004      	b.n	800323c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003232:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x276>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0e9b      	lsrs	r3, r3, #26
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	e018      	b.n	8003288 <HAL_ADC_ConfigChannel+0x2a8>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800326a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800326e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003272:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800327a:	2320      	movs	r3, #32
 800327c:	e004      	b.n	8003288 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800327e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003288:	429a      	cmp	r2, r3
 800328a:	d106      	bne.n	800329a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fbb7 	bl	8002a08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fb9b 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x2e6>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2102      	movs	r1, #2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fb90 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80032bc:	4603      	mov	r3, r0
 80032be:	0e9b      	lsrs	r3, r3, #26
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	e01e      	b.n	8003304 <HAL_ADC_ConfigChannel+0x324>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2102      	movs	r1, #2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fb85 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80032e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80032ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e004      	b.n	8003302 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80032f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_ADC_ConfigChannel+0x33c>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	e016      	b.n	800334a <HAL_ADC_ConfigChannel+0x36a>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800332e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003330:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003334:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800333c:	2320      	movs	r3, #32
 800333e:	e004      	b.n	800334a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003340:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800334a:	429a      	cmp	r2, r3
 800334c:	d106      	bne.n	800335c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	2102      	movs	r1, #2
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fb56 	bl	8002a08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2103      	movs	r1, #3
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fb3a 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x3a8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2103      	movs	r1, #3
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fb2f 	bl	80029dc <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	0e9b      	lsrs	r3, r3, #26
 8003382:	f003 021f 	and.w	r2, r3, #31
 8003386:	e017      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x3d8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2103      	movs	r1, #3
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fb24 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033a2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80033a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80033ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x3f0>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	0e9b      	lsrs	r3, r3, #26
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	e011      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x414>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80033de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80033e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80033e8:	2320      	movs	r3, #32
 80033ea:	e003      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80033ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d106      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2103      	movs	r1, #3
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fb01 	bl	8002a08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fc2a 	bl	8002c64 <LL_ADC_IsEnabled>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8140 	bne.w	8003698 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	461a      	mov	r2, r3
 8003426:	f7ff fbab 	bl	8002b80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4a8f      	ldr	r2, [pc, #572]	@ (800366c <HAL_ADC_ConfigChannel+0x68c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	f040 8131 	bne.w	8003698 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <HAL_ADC_ConfigChannel+0x47e>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0e9b      	lsrs	r3, r3, #26
 800344c:	3301      	adds	r3, #1
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	2b09      	cmp	r3, #9
 8003454:	bf94      	ite	ls
 8003456:	2301      	movls	r3, #1
 8003458:	2300      	movhi	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e019      	b.n	8003492 <HAL_ADC_ConfigChannel+0x4b2>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800346c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800346e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003476:	2320      	movs	r3, #32
 8003478:	e003      	b.n	8003482 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800347a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2b09      	cmp	r3, #9
 800348a:	bf94      	ite	ls
 800348c:	2301      	movls	r3, #1
 800348e:	2300      	movhi	r3, #0
 8003490:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003492:	2b00      	cmp	r3, #0
 8003494:	d079      	beq.n	800358a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x4d2>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	0e9b      	lsrs	r3, r3, #26
 80034a8:	3301      	adds	r3, #1
 80034aa:	069b      	lsls	r3, r3, #26
 80034ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034b0:	e015      	b.n	80034de <HAL_ADC_ConfigChannel+0x4fe>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80034c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034c2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80034c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e003      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	069b      	lsls	r3, r3, #26
 80034da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x51e>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0e9b      	lsrs	r3, r3, #26
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	e017      	b.n	800352e <HAL_ADC_ConfigChannel+0x54e>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800350c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003516:	2320      	movs	r3, #32
 8003518:	e003      	b.n	8003522 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800351a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	3301      	adds	r3, #1
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	ea42 0103 	orr.w	r1, r2, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x574>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	3301      	adds	r3, #1
 8003546:	f003 021f 	and.w	r2, r3, #31
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	051b      	lsls	r3, r3, #20
 8003552:	e018      	b.n	8003586 <HAL_ADC_ConfigChannel+0x5a6>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003564:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800356c:	2320      	movs	r3, #32
 800356e:	e003      	b.n	8003578 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f003 021f 	and.w	r2, r3, #31
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003586:	430b      	orrs	r3, r1
 8003588:	e081      	b.n	800368e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	2b00      	cmp	r3, #0
 8003594:	d107      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x5c6>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	3301      	adds	r3, #1
 800359e:	069b      	lsls	r3, r3, #26
 80035a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035a4:	e015      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x5f2>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e003      	b.n	80035ca <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	069b      	lsls	r3, r3, #26
 80035ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x612>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	e017      	b.n	8003622 <HAL_ADC_ConfigChannel+0x642>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	61fb      	str	r3, [r7, #28]
  return result;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800360a:	2320      	movs	r3, #32
 800360c:	e003      	b.n	8003616 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	3301      	adds	r3, #1
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	ea42 0103 	orr.w	r1, r2, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10d      	bne.n	800364e <HAL_ADC_ConfigChannel+0x66e>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	0e9b      	lsrs	r3, r3, #26
 8003638:	3301      	adds	r3, #1
 800363a:	f003 021f 	and.w	r2, r3, #31
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	3b1e      	subs	r3, #30
 8003646:	051b      	lsls	r3, r3, #20
 8003648:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800364c:	e01e      	b.n	800368c <HAL_ADC_ConfigChannel+0x6ac>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	613b      	str	r3, [r7, #16]
  return result;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003666:	2320      	movs	r3, #32
 8003668:	e006      	b.n	8003678 <HAL_ADC_ConfigChannel+0x698>
 800366a:	bf00      	nop
 800366c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f003 021f 	and.w	r2, r3, #31
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	3b1e      	subs	r3, #30
 8003686:	051b      	lsls	r3, r3, #20
 8003688:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800368c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003692:	4619      	mov	r1, r3
 8003694:	f7ff fa48 	bl	8002b28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b3f      	ldr	r3, [pc, #252]	@ (800379c <HAL_ADC_ConfigChannel+0x7bc>)
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d071      	beq.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036a4:	483e      	ldr	r0, [pc, #248]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80036a6:	f7ff f967 	bl	8002978 <LL_ADC_GetCommonPathInternalCh>
 80036aa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3c      	ldr	r2, [pc, #240]	@ (80037a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_ADC_ConfigChannel+0x6e2>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3a      	ldr	r2, [pc, #232]	@ (80037a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d127      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d121      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036d6:	d157      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036e0:	4619      	mov	r1, r3
 80036e2:	482f      	ldr	r0, [pc, #188]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80036e4:	f7ff f935 	bl	8002952 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036e8:	4b30      	ldr	r3, [pc, #192]	@ (80037ac <HAL_ADC_ConfigChannel+0x7cc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	099b      	lsrs	r3, r3, #6
 80036ee:	4a30      	ldr	r2, [pc, #192]	@ (80037b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003702:	e002      	b.n	800370a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3b01      	subs	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f9      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003710:	e03a      	b.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a27      	ldr	r2, [pc, #156]	@ (80037b4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d113      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800371c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10d      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a22      	ldr	r2, [pc, #136]	@ (80037b8 <HAL_ADC_ConfigChannel+0x7d8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d02a      	beq.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800373a:	4619      	mov	r1, r3
 800373c:	4818      	ldr	r0, [pc, #96]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c0>)
 800373e:	f7ff f908 	bl	8002952 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003742:	e021      	b.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1c      	ldr	r2, [pc, #112]	@ (80037bc <HAL_ADC_ConfigChannel+0x7dc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d11c      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800374e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d011      	beq.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003768:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800376c:	4619      	mov	r1, r3
 800376e:	480c      	ldr	r0, [pc, #48]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003770:	f7ff f8ef 	bl	8002952 <LL_ADC_SetCommonPathInternalCh>
 8003774:	e008      	b.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003790:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003794:	4618      	mov	r0, r3
 8003796:	37d8      	adds	r7, #216	@ 0xd8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	80080000 	.word	0x80080000
 80037a0:	50000300 	.word	0x50000300
 80037a4:	c3210000 	.word	0xc3210000
 80037a8:	90c00010 	.word	0x90c00010
 80037ac:	20000004 	.word	0x20000004
 80037b0:	053e2d63 	.word	0x053e2d63
 80037b4:	c7520000 	.word	0xc7520000
 80037b8:	50000100 	.word	0x50000100
 80037bc:	cb840000 	.word	0xcb840000

080037c0 <LL_ADC_IsEnabled>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <LL_ADC_IsEnabled+0x18>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <LL_ADC_IsEnabled+0x1a>
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d101      	bne.n	80037fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b0a1      	sub	sp, #132	@ 0x84
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003826:	2302      	movs	r3, #2
 8003828:	e08b      	b.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003832:	2300      	movs	r3, #0
 8003834:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003836:	2300      	movs	r3, #0
 8003838:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003842:	d102      	bne.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003844:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	e001      	b.n	800384e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e06a      	b.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ffb9 	bl	80037e6 <LL_ADC_REG_IsConversionOngoing>
 8003874:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffb3 	bl	80037e6 <LL_ADC_REG_IsConversionOngoing>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d14c      	bne.n	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003888:	2b00      	cmp	r3, #0
 800388a:	d149      	bne.n	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800388c:	4b30      	ldr	r3, [pc, #192]	@ (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800388e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d028      	beq.n	80038ea <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003898:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038aa:	035b      	lsls	r3, r3, #13
 80038ac:	430b      	orrs	r3, r1
 80038ae:	431a      	orrs	r2, r3
 80038b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038b8:	f7ff ff82 	bl	80037c0 <LL_ADC_IsEnabled>
 80038bc:	4604      	mov	r4, r0
 80038be:	4823      	ldr	r0, [pc, #140]	@ (800394c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80038c0:	f7ff ff7e 	bl	80037c0 <LL_ADC_IsEnabled>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4323      	orrs	r3, r4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d133      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038d4:	f023 030f 	bic.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	6811      	ldr	r1, [r2, #0]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038e8:	e024      	b.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038f6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038fa:	f7ff ff61 	bl	80037c0 <LL_ADC_IsEnabled>
 80038fe:	4604      	mov	r4, r0
 8003900:	4812      	ldr	r0, [pc, #72]	@ (800394c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003902:	f7ff ff5d 	bl	80037c0 <LL_ADC_IsEnabled>
 8003906:	4603      	mov	r3, r0
 8003908:	4323      	orrs	r3, r4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d112      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800390e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003916:	f023 030f 	bic.w	r3, r3, #15
 800391a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800391c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800391e:	e009      	b.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	f043 0220 	orr.w	r2, r3, #32
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003932:	e000      	b.n	8003936 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003934:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800393e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003942:	4618      	mov	r0, r3
 8003944:	3784      	adds	r7, #132	@ 0x84
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	bf00      	nop
 800394c:	50000100 	.word	0x50000100
 8003950:	50000300 	.word	0x50000300

08003954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003970:	4013      	ands	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800397c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003986:	4a04      	ldr	r2, [pc, #16]	@ (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	60d3      	str	r3, [r2, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a0:	4b04      	ldr	r3, [pc, #16]	@ (80039b4 <__NVIC_GetPriorityGrouping+0x18>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	f003 0307 	and.w	r3, r3, #7
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	db0b      	blt.n	80039e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4907      	ldr	r1, [pc, #28]	@ (80039f0 <__NVIC_EnableIRQ+0x38>)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2001      	movs	r0, #1
 80039da:	fa00 f202 	lsl.w	r2, r0, r2
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000e100 	.word	0xe000e100

080039f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	6039      	str	r1, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	db0a      	blt.n	8003a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	490c      	ldr	r1, [pc, #48]	@ (8003a40 <__NVIC_SetPriority+0x4c>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	0112      	lsls	r2, r2, #4
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	440b      	add	r3, r1
 8003a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a1c:	e00a      	b.n	8003a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4908      	ldr	r1, [pc, #32]	@ (8003a44 <__NVIC_SetPriority+0x50>)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	3b04      	subs	r3, #4
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	440b      	add	r3, r1
 8003a32:	761a      	strb	r2, [r3, #24]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000e100 	.word	0xe000e100
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	@ 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f1c3 0307 	rsb	r3, r3, #7
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	bf28      	it	cs
 8003a66:	2304      	movcs	r3, #4
 8003a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d902      	bls.n	8003a78 <NVIC_EncodePriority+0x30>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3b03      	subs	r3, #3
 8003a76:	e000      	b.n	8003a7a <NVIC_EncodePriority+0x32>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	43d9      	mvns	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	4313      	orrs	r3, r2
         );
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	@ 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac0:	d301      	bcc.n	8003ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00f      	b.n	8003ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <SysTick_Config+0x40>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ace:	210f      	movs	r1, #15
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	f7ff ff8e 	bl	80039f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <SysTick_Config+0x40>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ade:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <SysTick_Config+0x40>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff29 	bl	8003954 <__NVIC_SetPriorityGrouping>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	4603      	mov	r3, r0
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b18:	f7ff ff40 	bl	800399c <__NVIC_GetPriorityGrouping>
 8003b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	f7ff ff90 	bl	8003a48 <NVIC_EncodePriority>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff5f 	bl	80039f4 <__NVIC_SetPriority>
}
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff33 	bl	80039b8 <__NVIC_EnableIRQ>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff ffa4 	bl	8003ab0 <SysTick_Config>
 8003b68:	4603      	mov	r3, r0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e08d      	b.n	8003ca2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b47      	ldr	r3, [pc, #284]	@ (8003cac <HAL_DMA_Init+0x138>)
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d80f      	bhi.n	8003bb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b45      	ldr	r3, [pc, #276]	@ (8003cb0 <HAL_DMA_Init+0x13c>)
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4a45      	ldr	r2, [pc, #276]	@ (8003cb4 <HAL_DMA_Init+0x140>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a42      	ldr	r2, [pc, #264]	@ (8003cb8 <HAL_DMA_Init+0x144>)
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bb0:	e00e      	b.n	8003bd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b40      	ldr	r3, [pc, #256]	@ (8003cbc <HAL_DMA_Init+0x148>)
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb4 <HAL_DMA_Init+0x140>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	009a      	lsls	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc0 <HAL_DMA_Init+0x14c>)
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9be 	bl	8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c30:	d102      	bne.n	8003c38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_DMA_Init+0x104>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d80c      	bhi.n	8003c78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9de 	bl	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	e008      	b.n	8003c8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40020407 	.word	0x40020407
 8003cb0:	bffdfff8 	.word	0xbffdfff8
 8003cb4:	cccccccd 	.word	0xcccccccd
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	bffdfbf8 	.word	0xbffdfbf8
 8003cc0:	40020400 	.word	0x40020400

08003cc4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d005      	beq.n	8003ce8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	e037      	b.n	8003d58 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 020e 	bic.w	r2, r2, #14
 8003cf6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d06:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0201 	bic.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d34:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d4c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d56:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d00d      	beq.n	8003daa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2204      	movs	r2, #4
 8003d92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	e047      	b.n	8003e3a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020e 	bic.w	r2, r2, #14
 8003db8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f003 021f 	and.w	r2, r3, #31
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2101      	movs	r1, #1
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003df6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e18:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
    }
  }
  return status;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2204      	movs	r2, #4
 8003e66:	409a      	lsls	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d026      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x7a>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d021      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eaa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d071      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ebc:	e06c      	b.n	8003f98 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d02e      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d029      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 020a 	bic.w	r2, r2, #10
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f003 021f 	and.w	r2, r3, #31
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2102      	movs	r1, #2
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d038      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f2e:	e033      	b.n	8003f98 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2208      	movs	r2, #8
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02a      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d025      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 020e 	bic.w	r2, r2, #14
 8003f5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f003 021f 	and.w	r2, r3, #31
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
}
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b16      	ldr	r3, [pc, #88]	@ (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d802      	bhi.n	8003fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003fb8:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e001      	b.n	8003fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003fbe:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fc0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	3b08      	subs	r3, #8
 8003fce:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	009a      	lsls	r2, r3, #2
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a0b      	ldr	r2, [pc, #44]	@ (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40020407 	.word	0x40020407
 8004010:	40020800 	.word	0x40020800
 8004014:	40020820 	.word	0x40020820
 8004018:	cccccccd 	.word	0xcccccccd
 800401c:	40020880 	.word	0x40020880

08004020 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	461a      	mov	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a08      	ldr	r2, [pc, #32]	@ (8004064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004042:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b01      	subs	r3, #1
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	1000823f 	.word	0x1000823f
 8004064:	40020940 	.word	0x40020940

08004068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004076:	e15a      	b.n	800432e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 814c 	beq.w	8004328 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d005      	beq.n	80040a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d130      	bne.n	800410a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	2203      	movs	r2, #3
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040de:	2201      	movs	r2, #1
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0201 	and.w	r2, r3, #1
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b03      	cmp	r3, #3
 8004114:	d017      	beq.n	8004146 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2203      	movs	r2, #3
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d123      	bne.n	800419a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	08da      	lsrs	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3208      	adds	r2, #8
 800415a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	220f      	movs	r2, #15
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	08da      	lsrs	r2, r3, #3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3208      	adds	r2, #8
 8004194:	6939      	ldr	r1, [r7, #16]
 8004196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	2203      	movs	r2, #3
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 0203 	and.w	r2, r3, #3
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80a6 	beq.w	8004328 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041dc:	4b5b      	ldr	r3, [pc, #364]	@ (800434c <HAL_GPIO_Init+0x2e4>)
 80041de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e0:	4a5a      	ldr	r2, [pc, #360]	@ (800434c <HAL_GPIO_Init+0x2e4>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80041e8:	4b58      	ldr	r3, [pc, #352]	@ (800434c <HAL_GPIO_Init+0x2e4>)
 80041ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041f4:	4a56      	ldr	r2, [pc, #344]	@ (8004350 <HAL_GPIO_Init+0x2e8>)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	3302      	adds	r3, #2
 80041fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	220f      	movs	r2, #15
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800421e:	d01f      	beq.n	8004260 <HAL_GPIO_Init+0x1f8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a4c      	ldr	r2, [pc, #304]	@ (8004354 <HAL_GPIO_Init+0x2ec>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d019      	beq.n	800425c <HAL_GPIO_Init+0x1f4>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a4b      	ldr	r2, [pc, #300]	@ (8004358 <HAL_GPIO_Init+0x2f0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_GPIO_Init+0x1f0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a4a      	ldr	r2, [pc, #296]	@ (800435c <HAL_GPIO_Init+0x2f4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00d      	beq.n	8004254 <HAL_GPIO_Init+0x1ec>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a49      	ldr	r2, [pc, #292]	@ (8004360 <HAL_GPIO_Init+0x2f8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <HAL_GPIO_Init+0x1e8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a48      	ldr	r2, [pc, #288]	@ (8004364 <HAL_GPIO_Init+0x2fc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d101      	bne.n	800424c <HAL_GPIO_Init+0x1e4>
 8004248:	2305      	movs	r3, #5
 800424a:	e00a      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 800424c:	2306      	movs	r3, #6
 800424e:	e008      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004250:	2304      	movs	r3, #4
 8004252:	e006      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004254:	2303      	movs	r3, #3
 8004256:	e004      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004258:	2302      	movs	r3, #2
 800425a:	e002      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004260:	2300      	movs	r3, #0
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	f002 0203 	and.w	r2, r2, #3
 8004268:	0092      	lsls	r2, r2, #2
 800426a:	4093      	lsls	r3, r2
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004272:	4937      	ldr	r1, [pc, #220]	@ (8004350 <HAL_GPIO_Init+0x2e8>)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	089b      	lsrs	r3, r3, #2
 8004278:	3302      	adds	r3, #2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004280:	4b39      	ldr	r3, [pc, #228]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042a4:	4a30      	ldr	r2, [pc, #192]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042ce:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042d4:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	43db      	mvns	r3, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	43db      	mvns	r3, r3
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004322:	4a11      	ldr	r2, [pc, #68]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3301      	adds	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f ae9d 	bne.w	8004078 <HAL_GPIO_Init+0x10>
  }
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40021000 	.word	0x40021000
 8004350:	40010000 	.word	0x40010000
 8004354:	48000400 	.word	0x48000400
 8004358:	48000800 	.word	0x48000800
 800435c:	48000c00 	.word	0x48000c00
 8004360:	48001000 	.word	0x48001000
 8004364:	48001400 	.word	0x48001400
 8004368:	40010400 	.word	0x40010400

0800436c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	807b      	strh	r3, [r7, #2]
 8004378:	4613      	mov	r3, r2
 800437a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800437c:	787b      	ldrb	r3, [r7, #1]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004382:	887a      	ldrh	r2, [r7, #2]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004388:	e002      	b.n	8004390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4013      	ands	r3, r2
 80043b4:	041a      	lsls	r2, r3, #16
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	43d9      	mvns	r1, r3
 80043ba:	887b      	ldrh	r3, [r7, #2]
 80043bc:	400b      	ands	r3, r1
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043da:	4b08      	ldr	r3, [pc, #32]	@ (80043fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043e6:	4a05      	ldr	r2, [pc, #20]	@ (80043fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f806 	bl	8004400 <HAL_GPIO_EXTI_Callback>
  }
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40010400 	.word	0x40010400

08004400 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e08d      	b.n	8004544 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fd fb71 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2224      	movs	r2, #36	@ 0x24
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004466:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004476:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	e006      	b.n	800449e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800449c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d108      	bne.n	80044b8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	e007      	b.n	80044c8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044da:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69d9      	ldr	r1, [r3, #28]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	d138      	bne.n	80045d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800456c:	2302      	movs	r3, #2
 800456e:	e032      	b.n	80045d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2224      	movs	r2, #36	@ 0x24
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800459e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d139      	bne.n	800466c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004602:	2302      	movs	r3, #2
 8004604:	e033      	b.n	800466e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2224      	movs	r2, #36	@ 0x24
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004634:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0c0      	b.n	800480e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7fe f853 	bl	800274c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f003 ffcc 	bl	8008650 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b8:	2300      	movs	r3, #0
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	e03e      	b.n	800473c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	440b      	add	r3, r1
 80046cc:	3311      	adds	r3, #17
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	440b      	add	r3, r1
 80046e0:	3310      	adds	r3, #16
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	440b      	add	r3, r1
 80046f4:	3313      	adds	r3, #19
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	3320      	adds	r3, #32
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800470e:	7bfa      	ldrb	r2, [r7, #15]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	3324      	adds	r3, #36	@ 0x24
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	440b      	add	r3, r1
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	3301      	adds	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	791b      	ldrb	r3, [r3, #4]
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	429a      	cmp	r2, r3
 8004744:	d3bb      	bcc.n	80046be <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
 800474a:	e044      	b.n	80047d6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	440b      	add	r3, r1
 800475a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004774:	7bfa      	ldrb	r2, [r7, #15]
 8004776:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800478e:	7bfa      	ldrb	r2, [r7, #15]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047a4:	7bfa      	ldrb	r2, [r7, #15]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	440b      	add	r3, r1
 80047c8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	3301      	adds	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	791b      	ldrb	r3, [r3, #4]
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d3b5      	bcc.n	800474c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80047ec:	f003 ff4b 	bl	8008686 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7a9b      	ldrb	r3, [r3, #10]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d102      	bne.n	800480c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f805 	bl	8004816 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800483a:	b29b      	uxth	r3, r3
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800484e:	b29b      	uxth	r3, r3
 8004850:	f043 0302 	orr.w	r3, r3, #2
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d141      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800487a:	4b4b      	ldr	r3, [pc, #300]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004886:	d131      	bne.n	80048ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004888:	4b47      	ldr	r3, [pc, #284]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800488e:	4a46      	ldr	r2, [pc, #280]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004894:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004898:	4b43      	ldr	r3, [pc, #268]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048a0:	4a41      	ldr	r2, [pc, #260]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048a8:	4b40      	ldr	r3, [pc, #256]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2232      	movs	r2, #50	@ 0x32
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	4a3f      	ldr	r2, [pc, #252]	@ (80049b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	0c9b      	lsrs	r3, r3, #18
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048be:	e002      	b.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c6:	4b38      	ldr	r3, [pc, #224]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d2:	d102      	bne.n	80048da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f2      	bne.n	80048c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048da:	4b33      	ldr	r3, [pc, #204]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e6:	d158      	bne.n	800499a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e057      	b.n	800499c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048ec:	4b2e      	ldr	r3, [pc, #184]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f2:	4a2d      	ldr	r2, [pc, #180]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048fc:	e04d      	b.n	800499a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004904:	d141      	bne.n	800498a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004906:	4b28      	ldr	r3, [pc, #160]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004912:	d131      	bne.n	8004978 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004914:	4b24      	ldr	r3, [pc, #144]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800491a:	4a23      	ldr	r2, [pc, #140]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004920:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004924:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800492c:	4a1e      	ldr	r2, [pc, #120]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004932:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004934:	4b1d      	ldr	r3, [pc, #116]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2232      	movs	r2, #50	@ 0x32
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	4a1c      	ldr	r2, [pc, #112]	@ (80049b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004940:	fba2 2303 	umull	r2, r3, r2, r3
 8004944:	0c9b      	lsrs	r3, r3, #18
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800494a:	e002      	b.n	8004952 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3b01      	subs	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004952:	4b15      	ldr	r3, [pc, #84]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495e:	d102      	bne.n	8004966 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f2      	bne.n	800494c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004966:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004972:	d112      	bne.n	800499a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e011      	b.n	800499c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800497e:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004984:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004988:	e007      	b.n	800499a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800498a:	4b07      	ldr	r3, [pc, #28]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004992:	4a05      	ldr	r2, [pc, #20]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004994:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004998:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40007000 	.word	0x40007000
 80049ac:	20000004 	.word	0x20000004
 80049b0:	431bde83 	.word	0x431bde83

080049b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049b8:	4b05      	ldr	r3, [pc, #20]	@ (80049d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a04      	ldr	r2, [pc, #16]	@ (80049d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049c2:	6093      	str	r3, [r2, #8]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40007000 	.word	0x40007000

080049d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e2fe      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d075      	beq.n	8004ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f2:	4b97      	ldr	r3, [pc, #604]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049fc:	4b94      	ldr	r3, [pc, #592]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3e>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_OscConfig+0x44>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	4b8d      	ldr	r3, [pc, #564]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d05b      	beq.n	8004adc <HAL_RCC_OscConfig+0x108>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d157      	bne.n	8004adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e2d9      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a38:	d106      	bne.n	8004a48 <HAL_RCC_OscConfig+0x74>
 8004a3a:	4b85      	ldr	r3, [pc, #532]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a84      	ldr	r2, [pc, #528]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e01d      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x98>
 8004a52:	4b7f      	ldr	r3, [pc, #508]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a7e      	ldr	r2, [pc, #504]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a7b      	ldr	r2, [pc, #492]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a6c:	4b78      	ldr	r3, [pc, #480]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a77      	ldr	r2, [pc, #476]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b75      	ldr	r3, [pc, #468]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a74      	ldr	r2, [pc, #464]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd ff20 	bl	80028d0 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fd ff1c 	bl	80028d0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	@ 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e29e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xc0>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd ff0c 	bl	80028d0 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fd ff08 	bl	80028d0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e28a      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ace:	4b60      	ldr	r3, [pc, #384]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0xe8>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d075      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aea:	4b59      	ldr	r3, [pc, #356]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af4:	4b56      	ldr	r3, [pc, #344]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	d102      	bne.n	8004b0a <HAL_RCC_OscConfig+0x136>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d002      	beq.n	8004b10 <HAL_RCC_OscConfig+0x13c>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d11f      	bne.n	8004b50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b10:	4b4f      	ldr	r3, [pc, #316]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_OscConfig+0x154>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e25d      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b28:	4b49      	ldr	r3, [pc, #292]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	4946      	ldr	r1, [pc, #280]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b3c:	4b45      	ldr	r3, [pc, #276]	@ (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd fe79 	bl	8002838 <HAL_InitTick>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d043      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e249      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d023      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b58:	4b3d      	ldr	r3, [pc, #244]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fd feb4 	bl	80028d0 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6c:	f7fd feb0 	bl	80028d0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e232      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7e:	4b34      	ldr	r3, [pc, #208]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8a:	4b31      	ldr	r3, [pc, #196]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	492d      	ldr	r1, [pc, #180]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]
 8004b9e:	e01a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fd fe90 	bl	80028d0 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7fd fe8c 	bl	80028d0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e20e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc6:	4b22      	ldr	r3, [pc, #136]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x1e0>
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d041      	beq.n	8004c66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01c      	beq.n	8004c24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bea:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf0:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfa:	f7fd fe69 	bl	80028d0 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c02:	f7fd fe65 	bl	80028d0 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e1e7      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c14:	4b0e      	ldr	r3, [pc, #56]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ef      	beq.n	8004c02 <HAL_RCC_OscConfig+0x22e>
 8004c22:	e020      	b.n	8004c66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c24:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c2a:	4a09      	ldr	r2, [pc, #36]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fd fe4c 	bl	80028d0 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c3a:	e00d      	b.n	8004c58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c3c:	f7fd fe48 	bl	80028d0 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d906      	bls.n	8004c58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e1ca      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004c4e:	bf00      	nop
 8004c50:	40021000 	.word	0x40021000
 8004c54:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c58:	4b8c      	ldr	r3, [pc, #560]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1ea      	bne.n	8004c3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80a6 	beq.w	8004dc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c74:	2300      	movs	r3, #0
 8004c76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c78:	4b84      	ldr	r3, [pc, #528]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_OscConfig+0x2b4>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x2b6>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c92:	4a7e      	ldr	r2, [pc, #504]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004caa:	4b79      	ldr	r3, [pc, #484]	@ (8004e90 <HAL_RCC_OscConfig+0x4bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb6:	4b76      	ldr	r3, [pc, #472]	@ (8004e90 <HAL_RCC_OscConfig+0x4bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a75      	ldr	r2, [pc, #468]	@ (8004e90 <HAL_RCC_OscConfig+0x4bc>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc2:	f7fd fe05 	bl	80028d0 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fd fe01 	bl	80028d0 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e183      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e90 <HAL_RCC_OscConfig+0x4bc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d108      	bne.n	8004d02 <HAL_RCC_OscConfig+0x32e>
 8004cf0:	4b66      	ldr	r3, [pc, #408]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	4a65      	ldr	r2, [pc, #404]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d00:	e024      	b.n	8004d4c <HAL_RCC_OscConfig+0x378>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d110      	bne.n	8004d2c <HAL_RCC_OscConfig+0x358>
 8004d0a:	4b60      	ldr	r3, [pc, #384]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d10:	4a5e      	ldr	r2, [pc, #376]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d12:	f043 0304 	orr.w	r3, r3, #4
 8004d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	4a5a      	ldr	r2, [pc, #360]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d2a:	e00f      	b.n	8004d4c <HAL_RCC_OscConfig+0x378>
 8004d2c:	4b57      	ldr	r3, [pc, #348]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d32:	4a56      	ldr	r2, [pc, #344]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d3c:	4b53      	ldr	r3, [pc, #332]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	4a52      	ldr	r2, [pc, #328]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d016      	beq.n	8004d82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fd fdbc 	bl	80028d0 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fd fdb8 	bl	80028d0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e138      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d72:	4b46      	ldr	r3, [pc, #280]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ed      	beq.n	8004d5c <HAL_RCC_OscConfig+0x388>
 8004d80:	e015      	b.n	8004dae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fd fda5 	bl	80028d0 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fd fda1 	bl	80028d0 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e121      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da0:	4b3a      	ldr	r3, [pc, #232]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1ed      	bne.n	8004d8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db4:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db8:	4a34      	ldr	r2, [pc, #208]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d03c      	beq.n	8004e46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dda:	4a2c      	ldr	r2, [pc, #176]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de4:	f7fd fd74 	bl	80028d0 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dec:	f7fd fd70 	bl	80028d0 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0f2      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dfe:	4b23      	ldr	r3, [pc, #140]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ef      	beq.n	8004dec <HAL_RCC_OscConfig+0x418>
 8004e0c:	e01b      	b.n	8004e46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e14:	4a1d      	ldr	r2, [pc, #116]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fd fd57 	bl	80028d0 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e26:	f7fd fd53 	bl	80028d0 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0d5      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e38:	4b14      	ldr	r3, [pc, #80]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ef      	bne.n	8004e26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80c9 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e50:	4b0e      	ldr	r3, [pc, #56]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	f000 8083 	beq.w	8004f64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d15e      	bne.n	8004f24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e66:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e72:	f7fd fd2d 	bl	80028d0 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e78:	e00c      	b.n	8004e94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fd fd29 	bl	80028d0 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d905      	bls.n	8004e94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0ab      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e94:	4b55      	ldr	r3, [pc, #340]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ec      	bne.n	8004e7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea0:	4b52      	ldr	r3, [pc, #328]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	4b52      	ldr	r3, [pc, #328]	@ (8004ff0 <HAL_RCC_OscConfig+0x61c>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6a11      	ldr	r1, [r2, #32]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	0112      	lsls	r2, r2, #4
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004eba:	0212      	lsls	r2, r2, #8
 8004ebc:	4311      	orrs	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ec2:	0852      	lsrs	r2, r2, #1
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	0552      	lsls	r2, r2, #21
 8004ec8:	4311      	orrs	r1, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0652      	lsls	r2, r2, #25
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004eda:	06d2      	lsls	r2, r2, #27
 8004edc:	430a      	orrs	r2, r1
 8004ede:	4943      	ldr	r1, [pc, #268]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee4:	4b41      	ldr	r3, [pc, #260]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a40      	ldr	r2, [pc, #256]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a3d      	ldr	r2, [pc, #244]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004efa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd fce8 	bl	80028d0 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fd fce4 	bl	80028d0 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e066      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f16:	4b35      	ldr	r3, [pc, #212]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x530>
 8004f22:	e05e      	b.n	8004fe2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f24:	4b31      	ldr	r3, [pc, #196]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a30      	ldr	r2, [pc, #192]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fd fcce 	bl	80028d0 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fd fcca 	bl	80028d0 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e04c      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f4a:	4b28      	ldr	r3, [pc, #160]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f56:	4b25      	ldr	r3, [pc, #148]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	4924      	ldr	r1, [pc, #144]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ff4 <HAL_RCC_OscConfig+0x620>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]
 8004f62:	e03e      	b.n	8004fe2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e039      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f70:	4b1e      	ldr	r3, [pc, #120]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 0203 	and.w	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d12c      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d123      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11b      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d113      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	019f800c 	.word	0x019f800c
 8004ff4:	feeefffc 	.word	0xfeeefffc

08004ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e11e      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b91      	ldr	r3, [pc, #580]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d910      	bls.n	8005040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b8e      	ldr	r3, [pc, #568]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 020f 	bic.w	r2, r3, #15
 8005026:	498c      	ldr	r1, [pc, #560]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b8a      	ldr	r3, [pc, #552]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e106      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d073      	beq.n	8005134 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d129      	bne.n	80050a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005054:	4b81      	ldr	r3, [pc, #516]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0f4      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005064:	f000 f99c 	bl	80053a0 <RCC_GetSysClockFreqFromPLLSource>
 8005068:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4a7c      	ldr	r2, [pc, #496]	@ (8005260 <HAL_RCC_ClockConfig+0x268>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d93f      	bls.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005072:	4b7a      	ldr	r3, [pc, #488]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005086:	2b00      	cmp	r3, #0
 8005088:	d033      	beq.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800508e:	2b00      	cmp	r3, #0
 8005090:	d12f      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005092:	4b72      	ldr	r3, [pc, #456]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800509a:	4a70      	ldr	r2, [pc, #448]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800509c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050a2:	2380      	movs	r3, #128	@ 0x80
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e024      	b.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d107      	bne.n	80050c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050b0:	4b6a      	ldr	r3, [pc, #424]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0c6      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c0:	4b66      	ldr	r3, [pc, #408]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0be      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050d0:	f000 f8ce 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 80050d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4a61      	ldr	r2, [pc, #388]	@ (8005260 <HAL_RCC_ClockConfig+0x268>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d909      	bls.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050de:	4b5f      	ldr	r3, [pc, #380]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050e6:	4a5d      	ldr	r2, [pc, #372]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f2:	4b5a      	ldr	r3, [pc, #360]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f023 0203 	bic.w	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4957      	ldr	r1, [pc, #348]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005100:	4313      	orrs	r3, r2
 8005102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005104:	f7fd fbe4 	bl	80028d0 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	e00a      	b.n	8005122 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510c:	f7fd fbe0 	bl	80028d0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e095      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	4b4e      	ldr	r3, [pc, #312]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 020c 	and.w	r2, r3, #12
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	429a      	cmp	r2, r3
 8005132:	d1eb      	bne.n	800510c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d023      	beq.n	8005188 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800514c:	4b43      	ldr	r3, [pc, #268]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	4a42      	ldr	r2, [pc, #264]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005152:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005156:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005164:	4b3d      	ldr	r3, [pc, #244]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800516c:	4a3b      	ldr	r2, [pc, #236]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800516e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005172:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005174:	4b39      	ldr	r3, [pc, #228]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4936      	ldr	r1, [pc, #216]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
 8005186:	e008      	b.n	800519a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2b80      	cmp	r3, #128	@ 0x80
 800518c:	d105      	bne.n	800519a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800518e:	4b33      	ldr	r3, [pc, #204]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	4a32      	ldr	r2, [pc, #200]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005198:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800519a:	4b2f      	ldr	r3, [pc, #188]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d21d      	bcs.n	80051e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 020f 	bic.w	r2, r3, #15
 80051b0:	4929      	ldr	r1, [pc, #164]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051b8:	f7fd fb8a 	bl	80028d0 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c0:	f7fd fb86 	bl	80028d0 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e03b      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b20      	ldr	r3, [pc, #128]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d1ed      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f0:	4b1a      	ldr	r3, [pc, #104]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4917      	ldr	r1, [pc, #92]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800520e:	4b13      	ldr	r3, [pc, #76]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	490f      	ldr	r1, [pc, #60]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005222:	f000 f825 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8005226:	4602      	mov	r2, r0
 8005228:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	490c      	ldr	r1, [pc, #48]	@ (8005264 <HAL_RCC_ClockConfig+0x26c>)
 8005234:	5ccb      	ldrb	r3, [r1, r3]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	4a0a      	ldr	r2, [pc, #40]	@ (8005268 <HAL_RCC_ClockConfig+0x270>)
 8005240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005242:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <HAL_RCC_ClockConfig+0x274>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fd faf6 	bl	8002838 <HAL_InitTick>
 800524c:	4603      	mov	r3, r0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40022000 	.word	0x40022000
 800525c:	40021000 	.word	0x40021000
 8005260:	04c4b400 	.word	0x04c4b400
 8005264:	0800aeb4 	.word	0x0800aeb4
 8005268:	20000004 	.word	0x20000004
 800526c:	20000008 	.word	0x20000008

08005270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005276:	4b2c      	ldr	r3, [pc, #176]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b04      	cmp	r3, #4
 8005280:	d102      	bne.n	8005288 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005282:	4b2a      	ldr	r3, [pc, #168]	@ (800532c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	e047      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005288:	4b27      	ldr	r3, [pc, #156]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 030c 	and.w	r3, r3, #12
 8005290:	2b08      	cmp	r3, #8
 8005292:	d102      	bne.n	800529a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005294:	4b25      	ldr	r3, [pc, #148]	@ (800532c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	e03e      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800529a:	4b23      	ldr	r3, [pc, #140]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d136      	bne.n	8005314 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052a6:	4b20      	ldr	r3, [pc, #128]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	3301      	adds	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d10c      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052c4:	4a19      	ldr	r2, [pc, #100]	@ (800532c <HAL_RCC_GetSysClockFreq+0xbc>)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ce:	68d2      	ldr	r2, [r2, #12]
 80052d0:	0a12      	lsrs	r2, r2, #8
 80052d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	617b      	str	r3, [r7, #20]
      break;
 80052dc:	e00c      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052de:	4a13      	ldr	r2, [pc, #76]	@ (800532c <HAL_RCC_GetSysClockFreq+0xbc>)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	4a10      	ldr	r2, [pc, #64]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e8:	68d2      	ldr	r2, [r2, #12]
 80052ea:	0a12      	lsrs	r2, r2, #8
 80052ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]
      break;
 80052f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	0e5b      	lsrs	r3, r3, #25
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	3301      	adds	r3, #1
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	e001      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005318:	693b      	ldr	r3, [r7, #16]
}
 800531a:	4618      	mov	r0, r3
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
 800532c:	00f42400 	.word	0x00f42400

08005330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005334:	4b03      	ldr	r3, [pc, #12]	@ (8005344 <HAL_RCC_GetHCLKFreq+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000004 	.word	0x20000004

08005348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800534c:	f7ff fff0 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b06      	ldr	r3, [pc, #24]	@ (800536c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4904      	ldr	r1, [pc, #16]	@ (8005370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	0800aec4 	.word	0x0800aec4

08005374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005378:	f7ff ffda 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0adb      	lsrs	r3, r3, #11
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4904      	ldr	r1, [pc, #16]	@ (800539c <HAL_RCC_GetPCLK2Freq+0x28>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	0800aec4 	.word	0x0800aec4

080053a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d10c      	bne.n	80053de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053c4:	4a17      	ldr	r2, [pc, #92]	@ (8005424 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	4a14      	ldr	r2, [pc, #80]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ce:	68d2      	ldr	r2, [r2, #12]
 80053d0:	0a12      	lsrs	r2, r2, #8
 80053d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	617b      	str	r3, [r7, #20]
    break;
 80053dc:	e00c      	b.n	80053f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053de:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053e8:	68d2      	ldr	r2, [r2, #12]
 80053ea:	0a12      	lsrs	r2, r2, #8
 80053ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
    break;
 80053f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053f8:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	0e5b      	lsrs	r3, r3, #25
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005412:	687b      	ldr	r3, [r7, #4]
}
 8005414:	4618      	mov	r0, r3
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40021000 	.word	0x40021000
 8005424:	00f42400 	.word	0x00f42400

08005428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005430:	2300      	movs	r3, #0
 8005432:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005434:	2300      	movs	r3, #0
 8005436:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8098 	beq.w	8005576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005446:	2300      	movs	r3, #0
 8005448:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800544a:	4b43      	ldr	r3, [pc, #268]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10d      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005456:	4b40      	ldr	r3, [pc, #256]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545a:	4a3f      	ldr	r2, [pc, #252]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005460:	6593      	str	r3, [r2, #88]	@ 0x58
 8005462:	4b3d      	ldr	r3, [pc, #244]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800546e:	2301      	movs	r3, #1
 8005470:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005472:	4b3a      	ldr	r3, [pc, #232]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a39      	ldr	r2, [pc, #228]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800547e:	f7fd fa27 	bl	80028d0 <HAL_GetTick>
 8005482:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005484:	e009      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005486:	f7fd fa23 	bl	80028d0 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d902      	bls.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	74fb      	strb	r3, [r7, #19]
        break;
 8005498:	e005      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800549a:	4b30      	ldr	r3, [pc, #192]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0ef      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054a6:	7cfb      	ldrb	r3, [r7, #19]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d159      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01e      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d019      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054c8:	4b23      	ldr	r3, [pc, #140]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054d4:	4b20      	ldr	r3, [pc, #128]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054da:	4a1f      	ldr	r2, [pc, #124]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054f4:	4a18      	ldr	r2, [pc, #96]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d016      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fd f9e3 	bl	80028d0 <HAL_GetTick>
 800550a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550c:	e00b      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550e:	f7fd f9df 	bl	80028d0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551c:	4293      	cmp	r3, r2
 800551e:	d902      	bls.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	74fb      	strb	r3, [r7, #19]
            break;
 8005524:	e006      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005526:	4b0c      	ldr	r3, [pc, #48]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0ec      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005534:	7cfb      	ldrb	r3, [r7, #19]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800553a:	4b07      	ldr	r3, [pc, #28]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005548:	4903      	ldr	r1, [pc, #12]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005550:	e008      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005552:	7cfb      	ldrb	r3, [r7, #19]
 8005554:	74bb      	strb	r3, [r7, #18]
 8005556:	e005      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005558:	40021000 	.word	0x40021000
 800555c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005564:	7c7b      	ldrb	r3, [r7, #17]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d105      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556a:	4ba6      	ldr	r3, [pc, #664]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556e:	4aa5      	ldr	r2, [pc, #660]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005574:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005582:	4ba0      	ldr	r3, [pc, #640]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005588:	f023 0203 	bic.w	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	499c      	ldr	r1, [pc, #624]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055a4:	4b97      	ldr	r3, [pc, #604]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055aa:	f023 020c 	bic.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	4994      	ldr	r1, [pc, #592]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	498b      	ldr	r1, [pc, #556]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055e8:	4b86      	ldr	r3, [pc, #536]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	4983      	ldr	r1, [pc, #524]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800560a:	4b7e      	ldr	r3, [pc, #504]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	497a      	ldr	r1, [pc, #488]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800562c:	4b75      	ldr	r3, [pc, #468]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	4972      	ldr	r1, [pc, #456]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800564e:	4b6d      	ldr	r3, [pc, #436]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4969      	ldr	r1, [pc, #420]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005670:	4b64      	ldr	r3, [pc, #400]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	4961      	ldr	r1, [pc, #388]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005692:	4b5c      	ldr	r3, [pc, #368]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	4958      	ldr	r1, [pc, #352]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056b4:	4b53      	ldr	r3, [pc, #332]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c2:	4950      	ldr	r1, [pc, #320]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d2:	d105      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d015      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056ec:	4b45      	ldr	r3, [pc, #276]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	4942      	ldr	r1, [pc, #264]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800570a:	d105      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800570c:	4b3d      	ldr	r3, [pc, #244]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a3c      	ldr	r2, [pc, #240]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005716:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d015      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005724:	4b37      	ldr	r3, [pc, #220]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005732:	4934      	ldr	r1, [pc, #208]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005742:	d105      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005744:	4b2f      	ldr	r3, [pc, #188]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a2e      	ldr	r2, [pc, #184]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800574e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800575c:	4b29      	ldr	r3, [pc, #164]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576a:	4926      	ldr	r1, [pc, #152]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800577a:	d105      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800577c:	4b21      	ldr	r3, [pc, #132]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4a20      	ldr	r2, [pc, #128]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005786:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d015      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005794:	4b1b      	ldr	r3, [pc, #108]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a2:	4918      	ldr	r1, [pc, #96]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057b2:	d105      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b4:	4b13      	ldr	r3, [pc, #76]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d015      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057da:	490a      	ldr	r1, [pc, #40]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ea:	d105      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4a04      	ldr	r2, [pc, #16]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000

08005808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e09d      	b.n	8005956 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	d108      	bne.n	8005834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800582a:	d009      	beq.n	8005840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	61da      	str	r2, [r3, #28]
 8005832:	e005      	b.n	8005840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fb0c 	bl	8001e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005880:	d902      	bls.n	8005888 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e002      	b.n	800588e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800588c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005896:	d007      	beq.n	80058a8 <HAL_SPI_Init+0xa0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058a0:	d002      	beq.n	80058a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ea:	ea42 0103 	orr.w	r1, r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	f003 0204 	and.w	r2, r3, #4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005924:	ea42 0103 	orr.w	r1, r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b088      	sub	sp, #32
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800596e:	f7fc ffaf 	bl	80028d0 <HAL_GetTick>
 8005972:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
 8005986:	e15c      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_Transmit+0x36>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e154      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_SPI_Transmit+0x48>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e14d      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2203      	movs	r2, #3
 80059b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f8:	d10f      	bne.n	8005a1a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b40      	cmp	r3, #64	@ 0x40
 8005a26:	d007      	beq.n	8005a38 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a40:	d952      	bls.n	8005ae8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_SPI_Transmit+0xf2>
 8005a4a:	8b7b      	ldrh	r3, [r7, #26]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d145      	bne.n	8005adc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a74:	e032      	b.n	8005adc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d112      	bne.n	8005aaa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a88:	881a      	ldrh	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	1c9a      	adds	r2, r3, #2
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005aa8:	e018      	b.n	8005adc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aaa:	f7fc ff11 	bl	80028d0 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d803      	bhi.n	8005ac2 <HAL_SPI_Transmit+0x164>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d102      	bne.n	8005ac8 <HAL_SPI_Transmit+0x16a>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e0b2      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1c7      	bne.n	8005a76 <HAL_SPI_Transmit+0x118>
 8005ae6:	e083      	b.n	8005bf0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_Transmit+0x198>
 8005af0:	8b7b      	ldrh	r3, [r7, #26]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d177      	bne.n	8005be6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d912      	bls.n	8005b26 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b04:	881a      	ldrh	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	1c9a      	adds	r2, r3, #2
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b02      	subs	r3, #2
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b24:	e05f      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	7812      	ldrb	r2, [r2, #0]
 8005b32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b4c:	e04b      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d12b      	bne.n	8005bb4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d912      	bls.n	8005b8c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b02      	subs	r3, #2
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b8a:	e02c      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	7812      	ldrb	r2, [r2, #0]
 8005b98:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bb2:	e018      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb4:	f7fc fe8c 	bl	80028d0 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d803      	bhi.n	8005bcc <HAL_SPI_Transmit+0x26e>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d102      	bne.n	8005bd2 <HAL_SPI_Transmit+0x274>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e02d      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ae      	bne.n	8005b4e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 fb73 	bl	80062e0 <SPI_EndRxTxTransaction>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005c40:	2300      	movs	r3, #0
  }
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b08a      	sub	sp, #40	@ 0x28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c5c:	f7fc fe38 	bl	80028d0 <HAL_GetTick>
 8005c60:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c68:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005c70:	887b      	ldrh	r3, [r7, #2]
 8005c72:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005c74:	887b      	ldrh	r3, [r7, #2]
 8005c76:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c78:	7ffb      	ldrb	r3, [r7, #31]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d00c      	beq.n	8005c98 <HAL_SPI_TransmitReceive+0x4e>
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c84:	d106      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x4a>
 8005c8e:	7ffb      	ldrb	r3, [r7, #31]
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d001      	beq.n	8005c98 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
 8005c96:	e1f3      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_SPI_TransmitReceive+0x60>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_SPI_TransmitReceive+0x60>
 8005ca4:	887b      	ldrh	r3, [r7, #2]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e1e8      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x72>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e1e1      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d003      	beq.n	8005cd8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2205      	movs	r2, #5
 8005cd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	887a      	ldrh	r2, [r7, #2]
 8005cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	887a      	ldrh	r2, [r7, #2]
 8005cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	887a      	ldrh	r2, [r7, #2]
 8005d04:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d1a:	d802      	bhi.n	8005d22 <HAL_SPI_TransmitReceive+0xd8>
 8005d1c:	8abb      	ldrh	r3, [r7, #20]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d908      	bls.n	8005d34 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	e007      	b.n	8005d44 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4e:	2b40      	cmp	r3, #64	@ 0x40
 8005d50:	d007      	beq.n	8005d62 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d6a:	f240 8083 	bls.w	8005e74 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_SPI_TransmitReceive+0x132>
 8005d76:	8afb      	ldrh	r3, [r7, #22]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d16f      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	881a      	ldrh	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	1c9a      	adds	r2, r3, #2
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da0:	e05c      	b.n	8005e5c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d11b      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x19e>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x19e>
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d113      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc4:	881a      	ldrh	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	1c9a      	adds	r2, r3, #2
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d11c      	bne.n	8005e30 <HAL_SPI_TransmitReceive+0x1e6>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0c:	b292      	uxth	r2, r2
 8005e0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e14:	1c9a      	adds	r2, r3, #2
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e30:	f7fc fd4e 	bl	80028d0 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d80d      	bhi.n	8005e5c <HAL_SPI_TransmitReceive+0x212>
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d009      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e111      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d19d      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x158>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d197      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x158>
 8005e72:	e0e5      	b.n	8006040 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x23a>
 8005e7c:	8afb      	ldrh	r3, [r7, #22]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	f040 80d1 	bne.w	8006026 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d912      	bls.n	8005eb4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e92:	881a      	ldrh	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	1c9a      	adds	r2, r3, #2
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b02      	subs	r3, #2
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eb2:	e0b8      	b.n	8006026 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	7812      	ldrb	r2, [r2, #0]
 8005ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eda:	e0a4      	b.n	8006026 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d134      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x30a>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d02f      	beq.n	8005f54 <HAL_SPI_TransmitReceive+0x30a>
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d12c      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d912      	bls.n	8005f2a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	881a      	ldrh	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	1c9a      	adds	r2, r3, #2
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b02      	subs	r3, #2
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f28:	e012      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d148      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x3aa>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d042      	beq.n	8005ff4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d923      	bls.n	8005fc2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	b292      	uxth	r2, r2
 8005f86:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b02      	subs	r3, #2
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d81f      	bhi.n	8005ff0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fbe:	605a      	str	r2, [r3, #4]
 8005fc0:	e016      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f103 020c 	add.w	r2, r3, #12
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	7812      	ldrb	r2, [r2, #0]
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ff4:	f7fc fc6c 	bl	80028d0 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006000:	429a      	cmp	r2, r3
 8006002:	d803      	bhi.n	800600c <HAL_SPI_TransmitReceive+0x3c2>
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d102      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x3c8>
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e02c      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f af55 	bne.w	8005edc <HAL_SPI_TransmitReceive+0x292>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	f47f af4e 	bne.w	8005edc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f94b 	bl	80062e0 <SPI_EndRxTxTransaction>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e00e      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800607e:	2300      	movs	r3, #0
  }
}
 8006080:	4618      	mov	r0, r3
 8006082:	3728      	adds	r7, #40	@ 0x28
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006096:	b2db      	uxtb	r3, r3
}
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060b4:	f7fc fc0c 	bl	80028d0 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	4413      	add	r3, r2
 80060c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060c4:	f7fc fc04 	bl	80028d0 <HAL_GetTick>
 80060c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ca:	4b39      	ldr	r3, [pc, #228]	@ (80061b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	015b      	lsls	r3, r3, #5
 80060d0:	0d1b      	lsrs	r3, r3, #20
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	fb02 f303 	mul.w	r3, r2, r3
 80060d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060da:	e054      	b.n	8006186 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d050      	beq.n	8006186 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060e4:	f7fc fbf4 	bl	80028d0 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d902      	bls.n	80060fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d13d      	bne.n	8006176 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006108:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006112:	d111      	bne.n	8006138 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800611c:	d004      	beq.n	8006128 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006126:	d107      	bne.n	8006138 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006136:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006140:	d10f      	bne.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006160:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e017      	b.n	80061a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3b01      	subs	r3, #1
 8006184:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4013      	ands	r3, r2
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	bf0c      	ite	eq
 8006196:	2301      	moveq	r3, #1
 8006198:	2300      	movne	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d19b      	bne.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000004 	.word	0x20000004

080061b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	@ 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061c6:	f7fc fb83 	bl	80028d0 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	4413      	add	r3, r2
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80061d6:	f7fc fb7b 	bl	80028d0 <HAL_GetTick>
 80061da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061e4:	4b3d      	ldr	r3, [pc, #244]	@ (80062dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	00da      	lsls	r2, r3, #3
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	0d1b      	lsrs	r3, r3, #20
 80061f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061fc:	e060      	b.n	80062c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006204:	d107      	bne.n	8006216 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006214:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d050      	beq.n	80062c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800621e:	f7fc fb57 	bl	80028d0 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622a:	429a      	cmp	r2, r3
 800622c:	d902      	bls.n	8006234 <SPI_WaitFifoStateUntilTimeout+0x80>
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d13d      	bne.n	80062b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006242:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800624c:	d111      	bne.n	8006272 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006256:	d004      	beq.n	8006262 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006260:	d107      	bne.n	8006272 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006270:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627a:	d10f      	bne.n	800629c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800629a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e010      	b.n	80062d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	3b01      	subs	r3, #1
 80062be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d196      	bne.n	80061fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3728      	adds	r7, #40	@ 0x28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000004 	.word	0x20000004

080062e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff5b 	bl	80061b4 <SPI_WaitFifoStateUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e027      	b.n	8006364 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2200      	movs	r2, #0
 800631c:	2180      	movs	r1, #128	@ 0x80
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f7ff fec0 	bl	80060a4 <SPI_WaitFlagStateUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e014      	b.n	8006364 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2200      	movs	r2, #0
 8006342:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff ff34 	bl	80061b4 <SPI_WaitFifoStateUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e000      	b.n	8006364 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e049      	b.n	8006412 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fb ff60 	bl	8002258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f000 faa4 	bl	80068f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e049      	b.n	80064c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f841 	bl	80064c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2202      	movs	r2, #2
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3304      	adds	r3, #4
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f000 fa4d 	bl	80068f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e0ff      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b14      	cmp	r3, #20
 8006506:	f200 80f0 	bhi.w	80066ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800650a:	a201      	add	r2, pc, #4	@ (adr r2, 8006510 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006565 	.word	0x08006565
 8006514:	080066eb 	.word	0x080066eb
 8006518:	080066eb 	.word	0x080066eb
 800651c:	080066eb 	.word	0x080066eb
 8006520:	080065a5 	.word	0x080065a5
 8006524:	080066eb 	.word	0x080066eb
 8006528:	080066eb 	.word	0x080066eb
 800652c:	080066eb 	.word	0x080066eb
 8006530:	080065e7 	.word	0x080065e7
 8006534:	080066eb 	.word	0x080066eb
 8006538:	080066eb 	.word	0x080066eb
 800653c:	080066eb 	.word	0x080066eb
 8006540:	08006627 	.word	0x08006627
 8006544:	080066eb 	.word	0x080066eb
 8006548:	080066eb 	.word	0x080066eb
 800654c:	080066eb 	.word	0x080066eb
 8006550:	08006669 	.word	0x08006669
 8006554:	080066eb 	.word	0x080066eb
 8006558:	080066eb 	.word	0x080066eb
 800655c:	080066eb 	.word	0x080066eb
 8006560:	080066a9 	.word	0x080066a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fa60 	bl	8006a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0208 	orr.w	r2, r2, #8
 800657e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0204 	bic.w	r2, r2, #4
 800658e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6999      	ldr	r1, [r3, #24]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	619a      	str	r2, [r3, #24]
      break;
 80065a2:	e0a5      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fad0 	bl	8006b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6999      	ldr	r1, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	021a      	lsls	r2, r3, #8
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	619a      	str	r2, [r3, #24]
      break;
 80065e4:	e084      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fb39 	bl	8006c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0208 	orr.w	r2, r2, #8
 8006600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0204 	bic.w	r2, r2, #4
 8006610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69d9      	ldr	r1, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	61da      	str	r2, [r3, #28]
      break;
 8006624:	e064      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fba1 	bl	8006d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69d9      	ldr	r1, [r3, #28]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	021a      	lsls	r2, r3, #8
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	61da      	str	r2, [r3, #28]
      break;
 8006666:	e043      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fc0a 	bl	8006e88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0208 	orr.w	r2, r2, #8
 8006682:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0204 	bic.w	r2, r2, #4
 8006692:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80066a6:	e023      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fc4e 	bl	8006f50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	021a      	lsls	r2, r3, #8
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80066e8:	e002      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	75fb      	strb	r3, [r7, #23]
      break;
 80066ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop

08006704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_TIM_ConfigClockSource+0x1c>
 800671c:	2302      	movs	r3, #2
 800671e:	e0de      	b.n	80068de <HAL_TIM_ConfigClockSource+0x1da>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800673e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800674a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a63      	ldr	r2, [pc, #396]	@ (80068e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	f000 80a9 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006760:	4a61      	ldr	r2, [pc, #388]	@ (80068e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	f200 80ae 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006768:	4a60      	ldr	r2, [pc, #384]	@ (80068ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	f000 80a1 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006770:	4a5e      	ldr	r2, [pc, #376]	@ (80068ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	f200 80a6 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006778:	4a5d      	ldr	r2, [pc, #372]	@ (80068f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800677a:	4293      	cmp	r3, r2
 800677c:	f000 8099 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006780:	4a5b      	ldr	r2, [pc, #364]	@ (80068f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006782:	4293      	cmp	r3, r2
 8006784:	f200 809e 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006788:	4a5a      	ldr	r2, [pc, #360]	@ (80068f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	f000 8091 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006790:	4a58      	ldr	r2, [pc, #352]	@ (80068f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	f200 8096 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006798:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800679c:	f000 8089 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067a4:	f200 808e 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ac:	d03e      	beq.n	800682c <HAL_TIM_ConfigClockSource+0x128>
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067b2:	f200 8087 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ba:	f000 8086 	beq.w	80068ca <HAL_TIM_ConfigClockSource+0x1c6>
 80067be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c2:	d87f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067c4:	2b70      	cmp	r3, #112	@ 0x70
 80067c6:	d01a      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0xfa>
 80067c8:	2b70      	cmp	r3, #112	@ 0x70
 80067ca:	d87b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067cc:	2b60      	cmp	r3, #96	@ 0x60
 80067ce:	d050      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x16e>
 80067d0:	2b60      	cmp	r3, #96	@ 0x60
 80067d2:	d877      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067d4:	2b50      	cmp	r3, #80	@ 0x50
 80067d6:	d03c      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0x14e>
 80067d8:	2b50      	cmp	r3, #80	@ 0x50
 80067da:	d873      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067dc:	2b40      	cmp	r3, #64	@ 0x40
 80067de:	d058      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x18e>
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	d86f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067e4:	2b30      	cmp	r3, #48	@ 0x30
 80067e6:	d064      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067e8:	2b30      	cmp	r3, #48	@ 0x30
 80067ea:	d86b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d060      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d867      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d05c      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d05a      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067fc:	e062      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800680e:	f000 fc81 	bl	8007114 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	609a      	str	r2, [r3, #8]
      break;
 800682a:	e04f      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800683c:	f000 fc6a 	bl	8007114 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800684e:	609a      	str	r2, [r3, #8]
      break;
 8006850:	e03c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685e:	461a      	mov	r2, r3
 8006860:	f000 fbdc 	bl	800701c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2150      	movs	r1, #80	@ 0x50
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fc35 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006870:	e02c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800687e:	461a      	mov	r2, r3
 8006880:	f000 fbfb 	bl	800707a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2160      	movs	r1, #96	@ 0x60
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fc25 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006890:	e01c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 fbbc 	bl	800701c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2140      	movs	r1, #64	@ 0x40
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fc15 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 80068b0:	e00c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4619      	mov	r1, r3
 80068bc:	4610      	mov	r0, r2
 80068be:	f000 fc0c 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 80068c2:	e003      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	e000      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80068ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	00100070 	.word	0x00100070
 80068ec:	00100040 	.word	0x00100040
 80068f0:	00100030 	.word	0x00100030
 80068f4:	00100020 	.word	0x00100020

080068f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a42      	ldr	r2, [pc, #264]	@ (8006a14 <TIM_Base_SetConfig+0x11c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00f      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006916:	d00b      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a3f      	ldr	r2, [pc, #252]	@ (8006a18 <TIM_Base_SetConfig+0x120>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d007      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a3e      	ldr	r2, [pc, #248]	@ (8006a1c <TIM_Base_SetConfig+0x124>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a20 <TIM_Base_SetConfig+0x128>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d108      	bne.n	8006942 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a33      	ldr	r2, [pc, #204]	@ (8006a14 <TIM_Base_SetConfig+0x11c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01b      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006950:	d017      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a30      	ldr	r2, [pc, #192]	@ (8006a18 <TIM_Base_SetConfig+0x120>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2f      	ldr	r2, [pc, #188]	@ (8006a1c <TIM_Base_SetConfig+0x124>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2e      	ldr	r2, [pc, #184]	@ (8006a20 <TIM_Base_SetConfig+0x128>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a2d      	ldr	r2, [pc, #180]	@ (8006a24 <TIM_Base_SetConfig+0x12c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a2c      	ldr	r2, [pc, #176]	@ (8006a28 <TIM_Base_SetConfig+0x130>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a2b      	ldr	r2, [pc, #172]	@ (8006a2c <TIM_Base_SetConfig+0x134>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d108      	bne.n	8006994 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a16      	ldr	r2, [pc, #88]	@ (8006a14 <TIM_Base_SetConfig+0x11c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00f      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a17      	ldr	r2, [pc, #92]	@ (8006a20 <TIM_Base_SetConfig+0x128>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a16      	ldr	r2, [pc, #88]	@ (8006a24 <TIM_Base_SetConfig+0x12c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d007      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a15      	ldr	r2, [pc, #84]	@ (8006a28 <TIM_Base_SetConfig+0x130>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a14      	ldr	r2, [pc, #80]	@ (8006a2c <TIM_Base_SetConfig+0x134>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d103      	bne.n	80069e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d105      	bne.n	8006a06 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f023 0201 	bic.w	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	611a      	str	r2, [r3, #16]
  }
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800

08006a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f023 0201 	bic.w	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0303 	bic.w	r3, r3, #3
 8006a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f023 0302 	bic.w	r3, r3, #2
 8006a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8006b3c <TIM_OC1_SetConfig+0x10c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00f      	beq.n	8006ab0 <TIM_OC1_SetConfig+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a2b      	ldr	r2, [pc, #172]	@ (8006b40 <TIM_OC1_SetConfig+0x110>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <TIM_OC1_SetConfig+0x80>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b44 <TIM_OC1_SetConfig+0x114>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d007      	beq.n	8006ab0 <TIM_OC1_SetConfig+0x80>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a29      	ldr	r2, [pc, #164]	@ (8006b48 <TIM_OC1_SetConfig+0x118>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_OC1_SetConfig+0x80>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a28      	ldr	r2, [pc, #160]	@ (8006b4c <TIM_OC1_SetConfig+0x11c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10c      	bne.n	8006aca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f023 0308 	bic.w	r3, r3, #8
 8006ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f023 0304 	bic.w	r3, r3, #4
 8006ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b3c <TIM_OC1_SetConfig+0x10c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00f      	beq.n	8006af2 <TIM_OC1_SetConfig+0xc2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b40 <TIM_OC1_SetConfig+0x110>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <TIM_OC1_SetConfig+0xc2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a19      	ldr	r2, [pc, #100]	@ (8006b44 <TIM_OC1_SetConfig+0x114>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <TIM_OC1_SetConfig+0xc2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a18      	ldr	r2, [pc, #96]	@ (8006b48 <TIM_OC1_SetConfig+0x118>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_OC1_SetConfig+0xc2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a17      	ldr	r2, [pc, #92]	@ (8006b4c <TIM_OC1_SetConfig+0x11c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d111      	bne.n	8006b16 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40013400 	.word	0x40013400
 8006b44:	40014000 	.word	0x40014000
 8006b48:	40014400 	.word	0x40014400
 8006b4c:	40014800 	.word	0x40014800

08006b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	f023 0210 	bic.w	r2, r3, #16
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0320 	bic.w	r3, r3, #32
 8006b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a28      	ldr	r2, [pc, #160]	@ (8006c50 <TIM_OC2_SetConfig+0x100>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_OC2_SetConfig+0x6c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a27      	ldr	r2, [pc, #156]	@ (8006c54 <TIM_OC2_SetConfig+0x104>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d10d      	bne.n	8006bd8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <TIM_OC2_SetConfig+0x100>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00f      	beq.n	8006c00 <TIM_OC2_SetConfig+0xb0>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <TIM_OC2_SetConfig+0x104>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00b      	beq.n	8006c00 <TIM_OC2_SetConfig+0xb0>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <TIM_OC2_SetConfig+0x108>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d007      	beq.n	8006c00 <TIM_OC2_SetConfig+0xb0>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c5c <TIM_OC2_SetConfig+0x10c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_OC2_SetConfig+0xb0>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a19      	ldr	r2, [pc, #100]	@ (8006c60 <TIM_OC2_SetConfig+0x110>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d113      	bne.n	8006c28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	621a      	str	r2, [r3, #32]
}
 8006c42:	bf00      	nop
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40013400 	.word	0x40013400
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40014400 	.word	0x40014400
 8006c60:	40014800 	.word	0x40014800

08006c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a27      	ldr	r2, [pc, #156]	@ (8006d60 <TIM_OC3_SetConfig+0xfc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d003      	beq.n	8006cce <TIM_OC3_SetConfig+0x6a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a26      	ldr	r2, [pc, #152]	@ (8006d64 <TIM_OC3_SetConfig+0x100>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d10d      	bne.n	8006cea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a1c      	ldr	r2, [pc, #112]	@ (8006d60 <TIM_OC3_SetConfig+0xfc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00f      	beq.n	8006d12 <TIM_OC3_SetConfig+0xae>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d64 <TIM_OC3_SetConfig+0x100>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_OC3_SetConfig+0xae>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8006d68 <TIM_OC3_SetConfig+0x104>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <TIM_OC3_SetConfig+0xae>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a19      	ldr	r2, [pc, #100]	@ (8006d6c <TIM_OC3_SetConfig+0x108>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_OC3_SetConfig+0xae>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <TIM_OC3_SetConfig+0x10c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d113      	bne.n	8006d3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	621a      	str	r2, [r3, #32]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800

08006d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	021b      	lsls	r3, r3, #8
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	031b      	lsls	r3, r3, #12
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a28      	ldr	r2, [pc, #160]	@ (8006e74 <TIM_OC4_SetConfig+0x100>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d003      	beq.n	8006de0 <TIM_OC4_SetConfig+0x6c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a27      	ldr	r2, [pc, #156]	@ (8006e78 <TIM_OC4_SetConfig+0x104>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10d      	bne.n	8006dfc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	031b      	lsls	r3, r3, #12
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8006e74 <TIM_OC4_SetConfig+0x100>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00f      	beq.n	8006e24 <TIM_OC4_SetConfig+0xb0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a1c      	ldr	r2, [pc, #112]	@ (8006e78 <TIM_OC4_SetConfig+0x104>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00b      	beq.n	8006e24 <TIM_OC4_SetConfig+0xb0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <TIM_OC4_SetConfig+0x108>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <TIM_OC4_SetConfig+0xb0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a1a      	ldr	r2, [pc, #104]	@ (8006e80 <TIM_OC4_SetConfig+0x10c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_OC4_SetConfig+0xb0>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a19      	ldr	r2, [pc, #100]	@ (8006e84 <TIM_OC4_SetConfig+0x110>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d113      	bne.n	8006e4c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e32:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	019b      	lsls	r3, r3, #6
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	019b      	lsls	r3, r3, #6
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40013400 	.word	0x40013400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800

08006e88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ecc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	041b      	lsls	r3, r3, #16
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a17      	ldr	r2, [pc, #92]	@ (8006f3c <TIM_OC5_SetConfig+0xb4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00f      	beq.n	8006f02 <TIM_OC5_SetConfig+0x7a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a16      	ldr	r2, [pc, #88]	@ (8006f40 <TIM_OC5_SetConfig+0xb8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00b      	beq.n	8006f02 <TIM_OC5_SetConfig+0x7a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a15      	ldr	r2, [pc, #84]	@ (8006f44 <TIM_OC5_SetConfig+0xbc>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d007      	beq.n	8006f02 <TIM_OC5_SetConfig+0x7a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a14      	ldr	r2, [pc, #80]	@ (8006f48 <TIM_OC5_SetConfig+0xc0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d003      	beq.n	8006f02 <TIM_OC5_SetConfig+0x7a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a13      	ldr	r2, [pc, #76]	@ (8006f4c <TIM_OC5_SetConfig+0xc4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d109      	bne.n	8006f16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	621a      	str	r2, [r3, #32]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40013400 	.word	0x40013400
 8006f44:	40014000 	.word	0x40014000
 8006f48:	40014400 	.word	0x40014400
 8006f4c:	40014800 	.word	0x40014800

08006f50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	051b      	lsls	r3, r3, #20
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	@ (8007008 <TIM_OC6_SetConfig+0xb8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00f      	beq.n	8006fcc <TIM_OC6_SetConfig+0x7c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a17      	ldr	r2, [pc, #92]	@ (800700c <TIM_OC6_SetConfig+0xbc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00b      	beq.n	8006fcc <TIM_OC6_SetConfig+0x7c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a16      	ldr	r2, [pc, #88]	@ (8007010 <TIM_OC6_SetConfig+0xc0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d007      	beq.n	8006fcc <TIM_OC6_SetConfig+0x7c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a15      	ldr	r2, [pc, #84]	@ (8007014 <TIM_OC6_SetConfig+0xc4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC6_SetConfig+0x7c>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a14      	ldr	r2, [pc, #80]	@ (8007018 <TIM_OC6_SetConfig+0xc8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d109      	bne.n	8006fe0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40013400 	.word	0x40013400
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800

0800701c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 030a 	bic.w	r3, r3, #10
 8007058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800707a:	b480      	push	{r7}
 800707c:	b087      	sub	sp, #28
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	f023 0210 	bic.w	r2, r3, #16
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	031b      	lsls	r3, r3, #12
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80070f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f043 0307 	orr.w	r3, r3, #7
 8007100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	609a      	str	r2, [r3, #8]
}
 8007108:	bf00      	nop
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800712e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	021a      	lsls	r2, r3, #8
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	431a      	orrs	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4313      	orrs	r3, r2
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	609a      	str	r2, [r3, #8]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007168:	2302      	movs	r3, #2
 800716a:	e065      	b.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2c      	ldr	r2, [pc, #176]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d004      	beq.n	80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2b      	ldr	r2, [pc, #172]	@ (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d108      	bne.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80071b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d018      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e2:	d013      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a18      	ldr	r2, [pc, #96]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00e      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a17      	ldr	r2, [pc, #92]	@ (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d009      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a12      	ldr	r2, [pc, #72]	@ (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d004      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a13      	ldr	r2, [pc, #76]	@ (8007254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d10c      	bne.n	8007226 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007212:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	4313      	orrs	r3, r2
 800721c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	40012c00 	.word	0x40012c00
 8007248:	40013400 	.word	0x40013400
 800724c:	40000400 	.word	0x40000400
 8007250:	40000800 	.word	0x40000800
 8007254:	40014000 	.word	0x40014000

08007258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e042      	b.n	80072f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007270:	2b00      	cmp	r3, #0
 8007272:	d106      	bne.n	8007282 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7fb f8ed 	bl	800245c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2224      	movs	r2, #36	@ 0x24
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fe56 	bl	8007f54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fb87 	bl	80079bc <UART_SetConfig>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e01b      	b.n	80072f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fed5 	bl	8008098 <UART_CheckIdleState>
 80072ee:	4603      	mov	r3, r0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b0ba      	sub	sp, #232	@ 0xe8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800731e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007322:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007326:	4013      	ands	r3, r2
 8007328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800732c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d11b      	bne.n	800736c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d015      	beq.n	800736c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d105      	bne.n	8007358 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800734c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8300 	beq.w	8007962 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
      }
      return;
 800736a:	e2fa      	b.n	8007962 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800736c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8123 	beq.w	80075bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007376:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800737a:	4b8d      	ldr	r3, [pc, #564]	@ (80075b0 <HAL_UART_IRQHandler+0x2b8>)
 800737c:	4013      	ands	r3, r2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007382:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007386:	4b8b      	ldr	r3, [pc, #556]	@ (80075b4 <HAL_UART_IRQHandler+0x2bc>)
 8007388:	4013      	ands	r3, r2
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8116 	beq.w	80075bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d011      	beq.n	80073c0 <HAL_UART_IRQHandler+0xc8>
 800739c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00b      	beq.n	80073c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2201      	movs	r2, #1
 80073ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b6:	f043 0201 	orr.w	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d011      	beq.n	80073f0 <HAL_UART_IRQHandler+0xf8>
 80073cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00b      	beq.n	80073f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2202      	movs	r2, #2
 80073de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e6:	f043 0204 	orr.w	r2, r3, #4
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d011      	beq.n	8007420 <HAL_UART_IRQHandler+0x128>
 80073fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2204      	movs	r2, #4
 800740e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007416:	f043 0202 	orr.w	r2, r3, #2
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d017      	beq.n	800745c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d105      	bne.n	8007444 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007438:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800743c:	4b5c      	ldr	r3, [pc, #368]	@ (80075b0 <HAL_UART_IRQHandler+0x2b8>)
 800743e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2208      	movs	r2, #8
 800744a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007452:	f043 0208 	orr.w	r2, r3, #8
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800745c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007464:	2b00      	cmp	r3, #0
 8007466:	d012      	beq.n	800748e <HAL_UART_IRQHandler+0x196>
 8007468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800746c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00c      	beq.n	800748e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800747c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8266 	beq.w	8007966 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d013      	beq.n	80074ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d105      	bne.n	80074be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e2:	2b40      	cmp	r3, #64	@ 0x40
 80074e4:	d005      	beq.n	80074f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d054      	beq.n	800759c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fee7 	bl	80082c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007502:	2b40      	cmp	r3, #64	@ 0x40
 8007504:	d146      	bne.n	8007594 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800751c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3308      	adds	r3, #8
 800752e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007532:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007536:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800753e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800754a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1d9      	bne.n	8007506 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007558:	2b00      	cmp	r3, #0
 800755a:	d017      	beq.n	800758c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007562:	4a15      	ldr	r2, [pc, #84]	@ (80075b8 <HAL_UART_IRQHandler+0x2c0>)
 8007564:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800756c:	4618      	mov	r0, r3
 800756e:	f7fc fc02 	bl	8003d76 <HAL_DMA_Abort_IT>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d019      	beq.n	80075ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800757e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007586:	4610      	mov	r0, r2
 8007588:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800758a:	e00f      	b.n	80075ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9ff 	bl	8007990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007592:	e00b      	b.n	80075ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f9fb 	bl	8007990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759a:	e007      	b.n	80075ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9f7 	bl	8007990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80075aa:	e1dc      	b.n	8007966 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ac:	bf00      	nop
    return;
 80075ae:	e1da      	b.n	8007966 <HAL_UART_IRQHandler+0x66e>
 80075b0:	10000001 	.word	0x10000001
 80075b4:	04000120 	.word	0x04000120
 80075b8:	08008393 	.word	0x08008393

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	f040 8170 	bne.w	80078a6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 8169 	beq.w	80078a6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8162 	beq.w	80078a6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2210      	movs	r2, #16
 80075e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f4:	2b40      	cmp	r3, #64	@ 0x40
 80075f6:	f040 80d8 	bne.w	80077aa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007608:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80af 	beq.w	8007770 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007618:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800761c:	429a      	cmp	r2, r3
 800761e:	f080 80a7 	bcs.w	8007770 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007628:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	f040 8087 	bne.w	800774e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007654:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800765c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800766a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800766e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007676:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1da      	bne.n	8007640 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800769a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e1      	bne.n	800768a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3308      	adds	r3, #8
 80076e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e3      	bne.n	80076c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800771a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800771c:	f023 0310 	bic.w	r3, r3, #16
 8007720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800772e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007730:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800773c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e4      	bne.n	800770c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007748:	4618      	mov	r0, r3
 800774a:	f7fc fabb 	bl	8003cc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007760:	b29b      	uxth	r3, r3
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	b29b      	uxth	r3, r3
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f91b 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800776e:	e0fc      	b.n	800796a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800777a:	429a      	cmp	r2, r3
 800777c:	f040 80f5 	bne.w	800796a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b20      	cmp	r3, #32
 8007790:	f040 80eb 	bne.w	800796a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f8fe 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
      return;
 80077a8:	e0df      	b.n	800796a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 80d1 	beq.w	800796e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80077cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80cc 	beq.w	800796e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e4      	bne.n	80077d6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	623b      	str	r3, [r7, #32]
   return(result);
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007822:	f023 0301 	bic.w	r3, r3, #1
 8007826:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007834:	633a      	str	r2, [r7, #48]	@ 0x30
 8007836:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800783a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e1      	bne.n	800780c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	60fb      	str	r3, [r7, #12]
   return(result);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f023 0310 	bic.w	r3, r3, #16
 8007870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800787e:	61fb      	str	r3, [r7, #28]
 8007880:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	69b9      	ldr	r1, [r7, #24]
 8007884:	69fa      	ldr	r2, [r7, #28]
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	617b      	str	r3, [r7, #20]
   return(result);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e4      	bne.n	800785c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f880 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078a4:	e063      	b.n	800796e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00e      	beq.n	80078d0 <HAL_UART_IRQHandler+0x5d8>
 80078b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d008      	beq.n	80078d0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80078c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd9f 	bl	800840c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078ce:	e051      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d014      	beq.n	8007906 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d03a      	beq.n	8007972 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
    }
    return;
 8007904:	e035      	b.n	8007972 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <HAL_UART_IRQHandler+0x62e>
 8007912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fd49 	bl	80083b6 <UART_EndTransmit_IT>
    return;
 8007924:	e026      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800792a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <HAL_UART_IRQHandler+0x64e>
 8007932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007936:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fd78 	bl	8008434 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007944:	e016      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <HAL_UART_IRQHandler+0x67c>
 8007952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007956:	2b00      	cmp	r3, #0
 8007958:	da0c      	bge.n	8007974 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fd60 	bl	8008420 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007960:	e008      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
      return;
 8007962:	bf00      	nop
 8007964:	e006      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
    return;
 8007966:	bf00      	nop
 8007968:	e004      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
      return;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
      return;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
    return;
 8007972:	bf00      	nop
  }
}
 8007974:	37e8      	adds	r7, #232	@ 0xe8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop

0800797c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079c0:	b08c      	sub	sp, #48	@ 0x30
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	431a      	orrs	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4bab      	ldr	r3, [pc, #684]	@ (8007c98 <UART_SetConfig+0x2dc>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4aa0      	ldr	r2, [pc, #640]	@ (8007c9c <UART_SetConfig+0x2e0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a24:	4313      	orrs	r3, r2
 8007a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007a32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a46:	f023 010f 	bic.w	r1, r3, #15
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a91      	ldr	r2, [pc, #580]	@ (8007ca0 <UART_SetConfig+0x2e4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d125      	bne.n	8007aac <UART_SetConfig+0xf0>
 8007a60:	4b90      	ldr	r3, [pc, #576]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d81a      	bhi.n	8007aa4 <UART_SetConfig+0xe8>
 8007a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a74 <UART_SetConfig+0xb8>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a85 	.word	0x08007a85
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007a8d 	.word	0x08007a8d
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a8a:	e0d6      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a92:	e0d2      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007a94:	2304      	movs	r3, #4
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a9a:	e0ce      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007a9c:	2308      	movs	r3, #8
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aa2:	e0ca      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aaa:	e0c6      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a7d      	ldr	r2, [pc, #500]	@ (8007ca8 <UART_SetConfig+0x2ec>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d138      	bne.n	8007b28 <UART_SetConfig+0x16c>
 8007ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007abc:	f003 030c 	and.w	r3, r3, #12
 8007ac0:	2b0c      	cmp	r3, #12
 8007ac2:	d82d      	bhi.n	8007b20 <UART_SetConfig+0x164>
 8007ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8007acc <UART_SetConfig+0x110>)
 8007ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aca:	bf00      	nop
 8007acc:	08007b01 	.word	0x08007b01
 8007ad0:	08007b21 	.word	0x08007b21
 8007ad4:	08007b21 	.word	0x08007b21
 8007ad8:	08007b21 	.word	0x08007b21
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b21 	.word	0x08007b21
 8007ae4:	08007b21 	.word	0x08007b21
 8007ae8:	08007b21 	.word	0x08007b21
 8007aec:	08007b09 	.word	0x08007b09
 8007af0:	08007b21 	.word	0x08007b21
 8007af4:	08007b21 	.word	0x08007b21
 8007af8:	08007b21 	.word	0x08007b21
 8007afc:	08007b19 	.word	0x08007b19
 8007b00:	2300      	movs	r3, #0
 8007b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b06:	e098      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b0e:	e094      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b10:	2304      	movs	r3, #4
 8007b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b16:	e090      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b18:	2308      	movs	r3, #8
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b1e:	e08c      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b20:	2310      	movs	r3, #16
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b26:	e088      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a5f      	ldr	r2, [pc, #380]	@ (8007cac <UART_SetConfig+0x2f0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d125      	bne.n	8007b7e <UART_SetConfig+0x1c2>
 8007b32:	4b5c      	ldr	r3, [pc, #368]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b3c:	2b30      	cmp	r3, #48	@ 0x30
 8007b3e:	d016      	beq.n	8007b6e <UART_SetConfig+0x1b2>
 8007b40:	2b30      	cmp	r3, #48	@ 0x30
 8007b42:	d818      	bhi.n	8007b76 <UART_SetConfig+0x1ba>
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d00a      	beq.n	8007b5e <UART_SetConfig+0x1a2>
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d814      	bhi.n	8007b76 <UART_SetConfig+0x1ba>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <UART_SetConfig+0x19a>
 8007b50:	2b10      	cmp	r3, #16
 8007b52:	d008      	beq.n	8007b66 <UART_SetConfig+0x1aa>
 8007b54:	e00f      	b.n	8007b76 <UART_SetConfig+0x1ba>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5c:	e06d      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b64:	e069      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b66:	2304      	movs	r3, #4
 8007b68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b6c:	e065      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b6e:	2308      	movs	r3, #8
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b74:	e061      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b76:	2310      	movs	r3, #16
 8007b78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b7c:	e05d      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a4b      	ldr	r2, [pc, #300]	@ (8007cb0 <UART_SetConfig+0x2f4>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d125      	bne.n	8007bd4 <UART_SetConfig+0x218>
 8007b88:	4b46      	ldr	r3, [pc, #280]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b92:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b94:	d016      	beq.n	8007bc4 <UART_SetConfig+0x208>
 8007b96:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b98:	d818      	bhi.n	8007bcc <UART_SetConfig+0x210>
 8007b9a:	2b80      	cmp	r3, #128	@ 0x80
 8007b9c:	d00a      	beq.n	8007bb4 <UART_SetConfig+0x1f8>
 8007b9e:	2b80      	cmp	r3, #128	@ 0x80
 8007ba0:	d814      	bhi.n	8007bcc <UART_SetConfig+0x210>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <UART_SetConfig+0x1f0>
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d008      	beq.n	8007bbc <UART_SetConfig+0x200>
 8007baa:	e00f      	b.n	8007bcc <UART_SetConfig+0x210>
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb2:	e042      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bba:	e03e      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc2:	e03a      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bca:	e036      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd2:	e032      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a30      	ldr	r2, [pc, #192]	@ (8007c9c <UART_SetConfig+0x2e0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d12a      	bne.n	8007c34 <UART_SetConfig+0x278>
 8007bde:	4b31      	ldr	r3, [pc, #196]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007be8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bec:	d01a      	beq.n	8007c24 <UART_SetConfig+0x268>
 8007bee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bf2:	d81b      	bhi.n	8007c2c <UART_SetConfig+0x270>
 8007bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bf8:	d00c      	beq.n	8007c14 <UART_SetConfig+0x258>
 8007bfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bfe:	d815      	bhi.n	8007c2c <UART_SetConfig+0x270>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <UART_SetConfig+0x250>
 8007c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c08:	d008      	beq.n	8007c1c <UART_SetConfig+0x260>
 8007c0a:	e00f      	b.n	8007c2c <UART_SetConfig+0x270>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c12:	e012      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c14:	2302      	movs	r3, #2
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1a:	e00e      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c22:	e00a      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c24:	2308      	movs	r3, #8
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c2a:	e006      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c32:	e002      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c34:	2310      	movs	r3, #16
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a17      	ldr	r2, [pc, #92]	@ (8007c9c <UART_SetConfig+0x2e0>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	f040 80a8 	bne.w	8007d96 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	d834      	bhi.n	8007cb8 <UART_SetConfig+0x2fc>
 8007c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <UART_SetConfig+0x298>)
 8007c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c54:	08007c79 	.word	0x08007c79
 8007c58:	08007cb9 	.word	0x08007cb9
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007cb9 	.word	0x08007cb9
 8007c64:	08007c87 	.word	0x08007c87
 8007c68:	08007cb9 	.word	0x08007cb9
 8007c6c:	08007cb9 	.word	0x08007cb9
 8007c70:	08007cb9 	.word	0x08007cb9
 8007c74:	08007c8f 	.word	0x08007c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c78:	f7fd fb66 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8007c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c7e:	e021      	b.n	8007cc4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c80:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb4 <UART_SetConfig+0x2f8>)
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c84:	e01e      	b.n	8007cc4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c86:	f7fd faf3 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007c8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c8c:	e01a      	b.n	8007cc4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c94:	e016      	b.n	8007cc4 <UART_SetConfig+0x308>
 8007c96:	bf00      	nop
 8007c98:	cfff69f3 	.word	0xcfff69f3
 8007c9c:	40008000 	.word	0x40008000
 8007ca0:	40013800 	.word	0x40013800
 8007ca4:	40021000 	.word	0x40021000
 8007ca8:	40004400 	.word	0x40004400
 8007cac:	40004800 	.word	0x40004800
 8007cb0:	40004c00 	.word	0x40004c00
 8007cb4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007cc2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 812a 	beq.w	8007f20 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	4a9e      	ldr	r2, [pc, #632]	@ (8007f4c <UART_SetConfig+0x590>)
 8007cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	4413      	add	r3, r2
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d305      	bcc.n	8007cfc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d903      	bls.n	8007d04 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d02:	e10d      	b.n	8007f20 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	2200      	movs	r2, #0
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	60fa      	str	r2, [r7, #12]
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	4a8e      	ldr	r2, [pc, #568]	@ (8007f4c <UART_SetConfig+0x590>)
 8007d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2200      	movs	r2, #0
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	607a      	str	r2, [r7, #4]
 8007d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d26:	f7f8 fe65 	bl	80009f4 <__aeabi_uldivmod>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4619      	mov	r1, r3
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	f04f 0300 	mov.w	r3, #0
 8007d3a:	020b      	lsls	r3, r1, #8
 8007d3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d40:	0202      	lsls	r2, r0, #8
 8007d42:	6979      	ldr	r1, [r7, #20]
 8007d44:	6849      	ldr	r1, [r1, #4]
 8007d46:	0849      	lsrs	r1, r1, #1
 8007d48:	2000      	movs	r0, #0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	eb12 0804 	adds.w	r8, r2, r4
 8007d52:	eb43 0905 	adc.w	r9, r3, r5
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	469a      	mov	sl, r3
 8007d5e:	4693      	mov	fp, r2
 8007d60:	4652      	mov	r2, sl
 8007d62:	465b      	mov	r3, fp
 8007d64:	4640      	mov	r0, r8
 8007d66:	4649      	mov	r1, r9
 8007d68:	f7f8 fe44 	bl	80009f4 <__aeabi_uldivmod>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4613      	mov	r3, r2
 8007d72:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d7a:	d308      	bcc.n	8007d8e <UART_SetConfig+0x3d2>
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d82:	d204      	bcs.n	8007d8e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6a3a      	ldr	r2, [r7, #32]
 8007d8a:	60da      	str	r2, [r3, #12]
 8007d8c:	e0c8      	b.n	8007f20 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d94:	e0c4      	b.n	8007f20 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d9e:	d167      	bne.n	8007e70 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007da0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d828      	bhi.n	8007dfa <UART_SetConfig+0x43e>
 8007da8:	a201      	add	r2, pc, #4	@ (adr r2, 8007db0 <UART_SetConfig+0x3f4>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007dd5 	.word	0x08007dd5
 8007db4:	08007ddd 	.word	0x08007ddd
 8007db8:	08007de5 	.word	0x08007de5
 8007dbc:	08007dfb 	.word	0x08007dfb
 8007dc0:	08007deb 	.word	0x08007deb
 8007dc4:	08007dfb 	.word	0x08007dfb
 8007dc8:	08007dfb 	.word	0x08007dfb
 8007dcc:	08007dfb 	.word	0x08007dfb
 8007dd0:	08007df3 	.word	0x08007df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd4:	f7fd fab8 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8007dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dda:	e014      	b.n	8007e06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ddc:	f7fd faca 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8007de0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007de2:	e010      	b.n	8007e06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007de4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f50 <UART_SetConfig+0x594>)
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007de8:	e00d      	b.n	8007e06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dea:	f7fd fa41 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007dee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007df0:	e009      	b.n	8007e06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007df6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007df8:	e005      	b.n	8007e06 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 8089 	beq.w	8007f20 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e12:	4a4e      	ldr	r2, [pc, #312]	@ (8007f4c <UART_SetConfig+0x590>)
 8007e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e20:	005a      	lsls	r2, r3, #1
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	441a      	add	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	2b0f      	cmp	r3, #15
 8007e38:	d916      	bls.n	8007e68 <UART_SetConfig+0x4ac>
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e40:	d212      	bcs.n	8007e68 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f023 030f 	bic.w	r3, r3, #15
 8007e4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	8bfb      	ldrh	r3, [r7, #30]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	8bfa      	ldrh	r2, [r7, #30]
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	e05b      	b.n	8007f20 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e6e:	e057      	b.n	8007f20 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d828      	bhi.n	8007eca <UART_SetConfig+0x50e>
 8007e78:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <UART_SetConfig+0x4c4>)
 8007e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7e:	bf00      	nop
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ead 	.word	0x08007ead
 8007e88:	08007eb5 	.word	0x08007eb5
 8007e8c:	08007ecb 	.word	0x08007ecb
 8007e90:	08007ebb 	.word	0x08007ebb
 8007e94:	08007ecb 	.word	0x08007ecb
 8007e98:	08007ecb 	.word	0x08007ecb
 8007e9c:	08007ecb 	.word	0x08007ecb
 8007ea0:	08007ec3 	.word	0x08007ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea4:	f7fd fa50 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8007ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eaa:	e014      	b.n	8007ed6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eac:	f7fd fa62 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8007eb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eb2:	e010      	b.n	8007ed6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb4:	4b26      	ldr	r3, [pc, #152]	@ (8007f50 <UART_SetConfig+0x594>)
 8007eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007eb8:	e00d      	b.n	8007ed6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eba:	f7fd f9d9 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007ebe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ec0:	e009      	b.n	8007ed6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ec8:	e005      	b.n	8007ed6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d021      	beq.n	8007f20 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8007f4c <UART_SetConfig+0x590>)
 8007ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	441a      	add	r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	2b0f      	cmp	r3, #15
 8007f04:	d909      	bls.n	8007f1a <UART_SetConfig+0x55e>
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0c:	d205      	bcs.n	8007f1a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60da      	str	r2, [r3, #12]
 8007f18:	e002      	b.n	8007f20 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2200      	movs	r2, #0
 8007f34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3730      	adds	r7, #48	@ 0x30
 8007f44:	46bd      	mov	sp, r7
 8007f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f4a:	bf00      	nop
 8007f4c:	0800aecc 	.word	0x0800aecc
 8007f50:	00f42400 	.word	0x00f42400

08007f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f60:	f003 0308 	and.w	r3, r3, #8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01a      	beq.n	800806a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800804e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008052:	d10a      	bne.n	800806a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
  }
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b098      	sub	sp, #96	@ 0x60
 800809c:	af02      	add	r7, sp, #8
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080a8:	f7fa fc12 	bl	80028d0 <HAL_GetTick>
 80080ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d12f      	bne.n	800811c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c4:	2200      	movs	r2, #0
 80080c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f88e 	bl	80081ec <UART_WaitOnFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d022      	beq.n	800811c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e6      	bne.n	80080d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2220      	movs	r2, #32
 800810c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e063      	b.n	80081e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b04      	cmp	r3, #4
 8008128:	d149      	bne.n	80081be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800812a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008132:	2200      	movs	r2, #0
 8008134:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f857 	bl	80081ec <UART_WaitOnFlagUntilTimeout>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d03c      	beq.n	80081be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	623b      	str	r3, [r7, #32]
   return(result);
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008162:	633b      	str	r3, [r7, #48]	@ 0x30
 8008164:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e6      	bne.n	8008144 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3308      	adds	r3, #8
 800817c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	60fb      	str	r3, [r7, #12]
   return(result);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f023 0301 	bic.w	r3, r3, #1
 800818c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008196:	61fa      	str	r2, [r7, #28]
 8008198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	69b9      	ldr	r1, [r7, #24]
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	617b      	str	r3, [r7, #20]
   return(result);
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e5      	bne.n	8008176 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e012      	b.n	80081e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3758      	adds	r7, #88	@ 0x58
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081fc:	e04f      	b.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d04b      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008206:	f7fa fb63 	bl	80028d0 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	429a      	cmp	r2, r3
 8008214:	d302      	bcc.n	800821c <UART_WaitOnFlagUntilTimeout+0x30>
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e04e      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d037      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b80      	cmp	r3, #128	@ 0x80
 8008232:	d034      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b40      	cmp	r3, #64	@ 0x40
 8008238:	d031      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b08      	cmp	r3, #8
 8008246:	d110      	bne.n	800826a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2208      	movs	r2, #8
 800824e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f838 	bl	80082c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2208      	movs	r2, #8
 800825a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e029      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008278:	d111      	bne.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 f81e 	bl	80082c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e00f      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4013      	ands	r3, r2
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	bf0c      	ite	eq
 80082ae:	2301      	moveq	r3, #1
 80082b0:	2300      	movne	r3, #0
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d0a0      	beq.n	80081fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b095      	sub	sp, #84	@ 0x54
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80082ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082f4:	e841 2300 	strex	r3, r2, [r1]
 80082f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1e6      	bne.n	80082ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3308      	adds	r3, #8
 8008306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3308      	adds	r3, #8
 8008322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008324:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008326:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800832a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e3      	bne.n	8008300 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800833c:	2b01      	cmp	r3, #1
 800833e:	d118      	bne.n	8008372 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	60bb      	str	r3, [r7, #8]
   return(result);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f023 0310 	bic.w	r3, r3, #16
 8008354:	647b      	str	r3, [r7, #68]	@ 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	613b      	str	r3, [r7, #16]
   return(result);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e6      	bne.n	8008340 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008386:	bf00      	nop
 8008388:	3754      	adds	r7, #84	@ 0x54
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff faf1 	bl	8007990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b088      	sub	sp, #32
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	61bb      	str	r3, [r7, #24]
 80083de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6979      	ldr	r1, [r7, #20]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	613b      	str	r3, [r7, #16]
   return(result);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e6      	bne.n	80083be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff fabc 	bl	800797c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008404:	bf00      	nop
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <HAL_UARTEx_DisableFifoMode+0x16>
 800845a:	2302      	movs	r3, #2
 800845c:	e027      	b.n	80084ae <HAL_UARTEx_DisableFifoMode+0x66>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2224      	movs	r2, #36	@ 0x24
 800846a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0201 	bic.w	r2, r2, #1
 8008484:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800848c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084ce:	2302      	movs	r3, #2
 80084d0:	e02d      	b.n	800852e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2224      	movs	r2, #36	@ 0x24
 80084de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0201 	bic.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f850 	bl	80085b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2220      	movs	r2, #32
 8008520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800854a:	2302      	movs	r3, #2
 800854c:	e02d      	b.n	80085aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2224      	movs	r2, #36	@ 0x24
 800855a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0201 	bic.w	r2, r2, #1
 8008574:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f812 	bl	80085b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d108      	bne.n	80085d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085d4:	e031      	b.n	800863a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085d6:	2308      	movs	r3, #8
 80085d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085da:	2308      	movs	r3, #8
 80085dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	0e5b      	lsrs	r3, r3, #25
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	0f5b      	lsrs	r3, r3, #29
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	7b3a      	ldrb	r2, [r7, #12]
 8008602:	4911      	ldr	r1, [pc, #68]	@ (8008648 <UARTEx_SetNbDataToProcess+0x94>)
 8008604:	5c8a      	ldrb	r2, [r1, r2]
 8008606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800860a:	7b3a      	ldrb	r2, [r7, #12]
 800860c:	490f      	ldr	r1, [pc, #60]	@ (800864c <UARTEx_SetNbDataToProcess+0x98>)
 800860e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008610:	fb93 f3f2 	sdiv	r3, r3, r2
 8008614:	b29a      	uxth	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	7b7a      	ldrb	r2, [r7, #13]
 8008620:	4909      	ldr	r1, [pc, #36]	@ (8008648 <UARTEx_SetNbDataToProcess+0x94>)
 8008622:	5c8a      	ldrb	r2, [r1, r2]
 8008624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008628:	7b7a      	ldrb	r2, [r7, #13]
 800862a:	4908      	ldr	r1, [pc, #32]	@ (800864c <UARTEx_SetNbDataToProcess+0x98>)
 800862c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800862e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008632:	b29a      	uxth	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800863a:	bf00      	nop
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	0800aee4 	.word	0x0800aee4
 800864c:	0800aeec 	.word	0x0800aeec

08008650 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008658:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800865c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008664:	b29a      	uxth	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	b29b      	uxth	r3, r3
 800866a:	43db      	mvns	r3, r3
 800866c:	b29b      	uxth	r3, r3
 800866e:	4013      	ands	r3, r2
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008686:	b480      	push	{r7}
 8008688:	b085      	sub	sp, #20
 800868a:	af00      	add	r7, sp, #0
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
	...

080086c4 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80086c8:	4907      	ldr	r1, [pc, #28]	@ (80086e8 <MX_FATFS_Init+0x24>)
 80086ca:	4808      	ldr	r0, [pc, #32]	@ (80086ec <MX_FATFS_Init+0x28>)
 80086cc:	f002 fb64 	bl	800ad98 <FATFS_LinkDriver>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80086d6:	f04f 33ff 	mov.w	r3, #4294967295
 80086da:	e003      	b.n	80086e4 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80086dc:	4b04      	ldr	r3, [pc, #16]	@ (80086f0 <MX_FATFS_Init+0x2c>)
 80086de:	2201      	movs	r2, #1
 80086e0:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80086e2:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20000bfc 	.word	0x20000bfc
 80086ec:	20000010 	.word	0x20000010
 80086f0:	20000c00 	.word	0x20000c00

080086f4 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80086f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	4618      	mov	r0, r3
 8008712:	f7f8 fe1f 	bl	8001354 <SD_disk_initialize>
 8008716:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	4618      	mov	r0, r3
 800872e:	f7f8 fefb 	bl	8001528 <SD_disk_status>
 8008732:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	607a      	str	r2, [r7, #4]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800874c:	7bf8      	ldrb	r0, [r7, #15]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	f7f8 fefe 	bl	8001554 <SD_disk_read>
 8008758:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	4603      	mov	r3, r0
 8008770:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008772:	7bf8      	ldrb	r0, [r7, #15]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	f7f8 ff55 	bl	8001628 <SD_disk_write>
 800877e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	603a      	str	r2, [r7, #0]
 8008792:	71fb      	strb	r3, [r7, #7]
 8008794:	460b      	mov	r3, r1
 8008796:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008798:	79b9      	ldrb	r1, [r7, #6]
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f7f8 ffc6 	bl	8001730 <SD_disk_ioctl>
 80087a4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	4a08      	ldr	r2, [pc, #32]	@ (80087e0 <disk_status+0x30>)
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	79fa      	ldrb	r2, [r7, #7]
 80087c8:	4905      	ldr	r1, [pc, #20]	@ (80087e0 <disk_status+0x30>)
 80087ca:	440a      	add	r2, r1
 80087cc:	7a12      	ldrb	r2, [r2, #8]
 80087ce:	4610      	mov	r0, r2
 80087d0:	4798      	blx	r3
 80087d2:	4603      	mov	r3, r0
 80087d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20000c2c 	.word	0x20000c2c

080087e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	4a0d      	ldr	r2, [pc, #52]	@ (800882c <disk_initialize+0x48>)
 80087f6:	5cd3      	ldrb	r3, [r2, r3]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d111      	bne.n	8008820 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	4a0b      	ldr	r2, [pc, #44]	@ (800882c <disk_initialize+0x48>)
 8008800:	2101      	movs	r1, #1
 8008802:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	4a09      	ldr	r2, [pc, #36]	@ (800882c <disk_initialize+0x48>)
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	79fa      	ldrb	r2, [r7, #7]
 8008812:	4906      	ldr	r1, [pc, #24]	@ (800882c <disk_initialize+0x48>)
 8008814:	440a      	add	r2, r1
 8008816:	7a12      	ldrb	r2, [r2, #8]
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000c2c 	.word	0x20000c2c

08008830 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008830:	b590      	push	{r4, r7, lr}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4a0a      	ldr	r2, [pc, #40]	@ (800886c <disk_read+0x3c>)
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	689c      	ldr	r4, [r3, #8]
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	4a07      	ldr	r2, [pc, #28]	@ (800886c <disk_read+0x3c>)
 8008850:	4413      	add	r3, r2
 8008852:	7a18      	ldrb	r0, [r3, #8]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	47a0      	blx	r4
 800885c:	4603      	mov	r3, r0
 800885e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008860:	7dfb      	ldrb	r3, [r7, #23]
}
 8008862:	4618      	mov	r0, r3
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	bd90      	pop	{r4, r7, pc}
 800886a:	bf00      	nop
 800886c:	20000c2c 	.word	0x20000c2c

08008870 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008870:	b590      	push	{r4, r7, lr}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4a0a      	ldr	r2, [pc, #40]	@ (80088ac <disk_write+0x3c>)
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	68dc      	ldr	r4, [r3, #12]
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	4a07      	ldr	r2, [pc, #28]	@ (80088ac <disk_write+0x3c>)
 8008890:	4413      	add	r3, r2
 8008892:	7a18      	ldrb	r0, [r3, #8]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	47a0      	blx	r4
 800889c:	4603      	mov	r3, r0
 800889e:	75fb      	strb	r3, [r7, #23]
  return res;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd90      	pop	{r4, r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000c2c 	.word	0x20000c2c

080088b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	603a      	str	r2, [r7, #0]
 80088ba:	71fb      	strb	r3, [r7, #7]
 80088bc:	460b      	mov	r3, r1
 80088be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	4a09      	ldr	r2, [pc, #36]	@ (80088e8 <disk_ioctl+0x38>)
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	79fa      	ldrb	r2, [r7, #7]
 80088ce:	4906      	ldr	r1, [pc, #24]	@ (80088e8 <disk_ioctl+0x38>)
 80088d0:	440a      	add	r2, r1
 80088d2:	7a10      	ldrb	r0, [r2, #8]
 80088d4:	79b9      	ldrb	r1, [r7, #6]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4798      	blx	r3
 80088da:	4603      	mov	r3, r0
 80088dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20000c2c 	.word	0x20000c2c

080088ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3301      	adds	r3, #1
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80088fc:	89fb      	ldrh	r3, [r7, #14]
 80088fe:	021b      	lsls	r3, r3, #8
 8008900:	b21a      	sxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	b21b      	sxth	r3, r3
 8008908:	4313      	orrs	r3, r2
 800890a:	b21b      	sxth	r3, r3
 800890c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800890e:	89fb      	ldrh	r3, [r7, #14]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3303      	adds	r3, #3
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	3202      	adds	r2, #2
 8008934:	7812      	ldrb	r2, [r2, #0]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	3201      	adds	r2, #1
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
	return rv;
 8008954:	68fb      	ldr	r3, [r7, #12]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	887a      	ldrh	r2, [r7, #2]
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	887b      	ldrh	r3, [r7, #2]
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	1c5a      	adds	r2, r3, #1
 8008984:	607a      	str	r2, [r7, #4]
 8008986:	887a      	ldrh	r2, [r7, #2]
 8008988:	b2d2      	uxtb	r2, r2
 800898a:	701a      	strb	r2, [r3, #0]
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	607a      	str	r2, [r7, #4]
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	607a      	str	r2, [r7, #4]
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	b2d2      	uxtb	r2, r2
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	0a1b      	lsrs	r3, r3, #8
 80089c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	0a1b      	lsrs	r3, r3, #8
 80089d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	b2d2      	uxtb	r2, r2
 80089e2:	701a      	strb	r2, [r3, #0]
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00d      	beq.n	8008a26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	1c53      	adds	r3, r2, #1
 8008a0e:	613b      	str	r3, [r7, #16]
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	1c59      	adds	r1, r3, #1
 8008a14:	6179      	str	r1, [r7, #20]
 8008a16:	7812      	ldrb	r2, [r2, #0]
 8008a18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	607b      	str	r3, [r7, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f1      	bne.n	8008a0a <mem_cpy+0x1a>
	}
}
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008a32:	b480      	push	{r7}
 8008a34:	b087      	sub	sp, #28
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	617a      	str	r2, [r7, #20]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	607b      	str	r3, [r7, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1f3      	bne.n	8008a42 <mem_set+0x10>
}
 8008a5a:	bf00      	nop
 8008a5c:	bf00      	nop
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008a68:	b480      	push	{r7}
 8008a6a:	b089      	sub	sp, #36	@ 0x24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	61fb      	str	r3, [r7, #28]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	61fa      	str	r2, [r7, #28]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	61ba      	str	r2, [r7, #24]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	1acb      	subs	r3, r1, r3
 8008a94:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	607b      	str	r3, [r7, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <mem_cmp+0x40>
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0eb      	beq.n	8008a80 <mem_cmp+0x18>

	return r;
 8008aa8:	697b      	ldr	r3, [r7, #20]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3724      	adds	r7, #36	@ 0x24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008ac0:	e002      	b.n	8008ac8 <chk_chr+0x12>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	607b      	str	r3, [r7, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <chk_chr+0x26>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d1f2      	bne.n	8008ac2 <chk_chr+0xc>
	return *str;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	781b      	ldrb	r3, [r3, #0]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008af6:	2300      	movs	r3, #0
 8008af8:	60bb      	str	r3, [r7, #8]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	e029      	b.n	8008b54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008b00:	4a27      	ldr	r2, [pc, #156]	@ (8008ba0 <chk_lock+0xb4>)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	4413      	add	r3, r2
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d01d      	beq.n	8008b4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b0e:	4a24      	ldr	r2, [pc, #144]	@ (8008ba0 <chk_lock+0xb4>)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	4413      	add	r3, r2
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d116      	bne.n	8008b4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008b20:	4a1f      	ldr	r2, [pc, #124]	@ (8008ba0 <chk_lock+0xb4>)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	4413      	add	r3, r2
 8008b28:	3304      	adds	r3, #4
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d10c      	bne.n	8008b4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b34:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba0 <chk_lock+0xb4>)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	4413      	add	r3, r2
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d102      	bne.n	8008b4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b48:	e007      	b.n	8008b5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d9d2      	bls.n	8008b00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d109      	bne.n	8008b74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <chk_lock+0x80>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d101      	bne.n	8008b70 <chk_lock+0x84>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e010      	b.n	8008b92 <chk_lock+0xa6>
 8008b70:	2312      	movs	r3, #18
 8008b72:	e00e      	b.n	8008b92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d108      	bne.n	8008b8c <chk_lock+0xa0>
 8008b7a:	4a09      	ldr	r2, [pc, #36]	@ (8008ba0 <chk_lock+0xb4>)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	4413      	add	r3, r2
 8008b82:	330c      	adds	r3, #12
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b8a:	d101      	bne.n	8008b90 <chk_lock+0xa4>
 8008b8c:	2310      	movs	r3, #16
 8008b8e:	e000      	b.n	8008b92 <chk_lock+0xa6>
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000c0c 	.word	0x20000c0c

08008ba4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008baa:	2300      	movs	r3, #0
 8008bac:	607b      	str	r3, [r7, #4]
 8008bae:	e002      	b.n	8008bb6 <enq_lock+0x12>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	607b      	str	r3, [r7, #4]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d806      	bhi.n	8008bca <enq_lock+0x26>
 8008bbc:	4a09      	ldr	r2, [pc, #36]	@ (8008be4 <enq_lock+0x40>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	4413      	add	r3, r2
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1f2      	bne.n	8008bb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	bf14      	ite	ne
 8008bd0:	2301      	movne	r3, #1
 8008bd2:	2300      	moveq	r3, #0
 8008bd4:	b2db      	uxtb	r3, r3
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	20000c0c 	.word	0x20000c0c

08008be8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e01f      	b.n	8008c38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008bf8:	4a41      	ldr	r2, [pc, #260]	@ (8008d00 <inc_lock+0x118>)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	4413      	add	r3, r2
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d113      	bne.n	8008c32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8008d00 <inc_lock+0x118>)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	4413      	add	r3, r2
 8008c12:	3304      	adds	r3, #4
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d109      	bne.n	8008c32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008c1e:	4a38      	ldr	r2, [pc, #224]	@ (8008d00 <inc_lock+0x118>)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	4413      	add	r3, r2
 8008c26:	3308      	adds	r3, #8
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d006      	beq.n	8008c40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d9dc      	bls.n	8008bf8 <inc_lock+0x10>
 8008c3e:	e000      	b.n	8008c42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008c40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d132      	bne.n	8008cae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	e002      	b.n	8008c54 <inc_lock+0x6c>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3301      	adds	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d806      	bhi.n	8008c68 <inc_lock+0x80>
 8008c5a:	4a29      	ldr	r2, [pc, #164]	@ (8008d00 <inc_lock+0x118>)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	4413      	add	r3, r2
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f2      	bne.n	8008c4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d101      	bne.n	8008c72 <inc_lock+0x8a>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e040      	b.n	8008cf4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4922      	ldr	r1, [pc, #136]	@ (8008d00 <inc_lock+0x118>)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	440b      	add	r3, r1
 8008c7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	491e      	ldr	r1, [pc, #120]	@ (8008d00 <inc_lock+0x118>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	491a      	ldr	r1, [pc, #104]	@ (8008d00 <inc_lock+0x118>)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	440b      	add	r3, r1
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008ca0:	4a17      	ldr	r2, [pc, #92]	@ (8008d00 <inc_lock+0x118>)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	4413      	add	r3, r2
 8008ca8:	330c      	adds	r3, #12
 8008caa:	2200      	movs	r2, #0
 8008cac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d009      	beq.n	8008cc8 <inc_lock+0xe0>
 8008cb4:	4a12      	ldr	r2, [pc, #72]	@ (8008d00 <inc_lock+0x118>)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	4413      	add	r3, r2
 8008cbc:	330c      	adds	r3, #12
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <inc_lock+0xe0>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e015      	b.n	8008cf4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d108      	bne.n	8008ce0 <inc_lock+0xf8>
 8008cce:	4a0c      	ldr	r2, [pc, #48]	@ (8008d00 <inc_lock+0x118>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	011b      	lsls	r3, r3, #4
 8008cd4:	4413      	add	r3, r2
 8008cd6:	330c      	adds	r3, #12
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	e001      	b.n	8008ce4 <inc_lock+0xfc>
 8008ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ce4:	4906      	ldr	r1, [pc, #24]	@ (8008d00 <inc_lock+0x118>)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	440b      	add	r3, r1
 8008cec:	330c      	adds	r3, #12
 8008cee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	3301      	adds	r3, #1
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	20000c0c 	.word	0x20000c0c

08008d04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d825      	bhi.n	8008d64 <dec_lock+0x60>
		n = Files[i].ctr;
 8008d18:	4a17      	ldr	r2, [pc, #92]	@ (8008d78 <dec_lock+0x74>)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	4413      	add	r3, r2
 8008d20:	330c      	adds	r3, #12
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008d26:	89fb      	ldrh	r3, [r7, #14]
 8008d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d2c:	d101      	bne.n	8008d32 <dec_lock+0x2e>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008d32:	89fb      	ldrh	r3, [r7, #14]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <dec_lock+0x3a>
 8008d38:	89fb      	ldrh	r3, [r7, #14]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8008d78 <dec_lock+0x74>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	4413      	add	r3, r2
 8008d46:	330c      	adds	r3, #12
 8008d48:	89fa      	ldrh	r2, [r7, #14]
 8008d4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008d4c:	89fb      	ldrh	r3, [r7, #14]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d105      	bne.n	8008d5e <dec_lock+0x5a>
 8008d52:	4a09      	ldr	r2, [pc, #36]	@ (8008d78 <dec_lock+0x74>)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	4413      	add	r3, r2
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	737b      	strb	r3, [r7, #13]
 8008d62:	e001      	b.n	8008d68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008d64:	2302      	movs	r3, #2
 8008d66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008d68:	7b7b      	ldrb	r3, [r7, #13]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	20000c0c 	.word	0x20000c0c

08008d7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008d84:	2300      	movs	r3, #0
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	e010      	b.n	8008dac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8008dc0 <clear_lock+0x44>)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	4413      	add	r3, r2
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d105      	bne.n	8008da6 <clear_lock+0x2a>
 8008d9a:	4a09      	ldr	r2, [pc, #36]	@ (8008dc0 <clear_lock+0x44>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	011b      	lsls	r3, r3, #4
 8008da0:	4413      	add	r3, r2
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d9eb      	bls.n	8008d8a <clear_lock+0xe>
	}
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	20000c0c 	.word	0x20000c0c

08008dc4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	78db      	ldrb	r3, [r3, #3]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d034      	beq.n	8008e42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ddc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	7858      	ldrb	r0, [r3, #1]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008de8:	2301      	movs	r3, #1
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	f7ff fd40 	bl	8008870 <disk_write>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <sync_window+0x38>
			res = FR_DISK_ERR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	73fb      	strb	r3, [r7, #15]
 8008dfa:	e022      	b.n	8008e42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	1ad2      	subs	r2, r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d217      	bcs.n	8008e42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	789b      	ldrb	r3, [r3, #2]
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	e010      	b.n	8008e3c <sync_window+0x78>
					wsect += fs->fsize;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	4413      	add	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7858      	ldrb	r0, [r3, #1]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e2e:	2301      	movs	r3, #1
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	f7ff fd1d 	bl	8008870 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d8eb      	bhi.n	8008e1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d01b      	beq.n	8008e9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ffad 	bl	8008dc4 <sync_window>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d113      	bne.n	8008e9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7858      	ldrb	r0, [r3, #1]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e7e:	2301      	movs	r3, #1
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	f7ff fcd5 	bl	8008830 <disk_read>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff ff87 	bl	8008dc4 <sync_window>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d158      	bne.n	8008f72 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d148      	bne.n	8008f5a <sync_fs+0xb2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	791b      	ldrb	r3, [r3, #4]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d144      	bne.n	8008f5a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3330      	adds	r3, #48	@ 0x30
 8008ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff fda9 	bl	8008a32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3330      	adds	r3, #48	@ 0x30
 8008ee4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ee8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff fd38 	bl	8008962 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3330      	adds	r3, #48	@ 0x30
 8008ef6:	4921      	ldr	r1, [pc, #132]	@ (8008f7c <sync_fs+0xd4>)
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fd4d 	bl	8008998 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3330      	adds	r3, #48	@ 0x30
 8008f02:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008f06:	491e      	ldr	r1, [pc, #120]	@ (8008f80 <sync_fs+0xd8>)
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff fd45 	bl	8008998 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3330      	adds	r3, #48	@ 0x30
 8008f12:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f7ff fd3b 	bl	8008998 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	3330      	adds	r3, #48	@ 0x30
 8008f26:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4610      	mov	r0, r2
 8008f32:	f7ff fd31 	bl	8008998 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7858      	ldrb	r0, [r3, #1]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f7ff fc8e 	bl	8008870 <disk_write>
			fs->fsi_flag = 0;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	785b      	ldrb	r3, [r3, #1]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff fca4 	bl	80088b0 <disk_ioctl>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <sync_fs+0xca>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	41615252 	.word	0x41615252
 8008f80:	61417272 	.word	0x61417272

08008f84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	3b02      	subs	r3, #2
 8008f92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	3b02      	subs	r3, #2
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d301      	bcc.n	8008fa4 <clust2sect+0x20>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e008      	b.n	8008fb6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	895b      	ldrh	r3, [r3, #10]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	fb03 f202 	mul.w	r2, r3, r2
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb4:	4413      	add	r3, r2
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b086      	sub	sp, #24
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d904      	bls.n	8008fe2 <get_fat+0x20>
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d302      	bcc.n	8008fe8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e08e      	b.n	8009106 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d061      	beq.n	80090ba <get_fat+0xf8>
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	dc7b      	bgt.n	80090f2 <get_fat+0x130>
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d002      	beq.n	8009004 <get_fat+0x42>
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d041      	beq.n	8009086 <get_fat+0xc4>
 8009002:	e076      	b.n	80090f2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	085b      	lsrs	r3, r3, #1
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	6a1a      	ldr	r2, [r3, #32]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	0a5b      	lsrs	r3, r3, #9
 800901a:	4413      	add	r3, r2
 800901c:	4619      	mov	r1, r3
 800901e:	6938      	ldr	r0, [r7, #16]
 8009020:	f7ff ff14 	bl	8008e4c <move_window>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d166      	bne.n	80090f8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	60fa      	str	r2, [r7, #12]
 8009030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	4413      	add	r3, r2
 8009038:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800903c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6a1a      	ldr	r2, [r3, #32]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	0a5b      	lsrs	r3, r3, #9
 8009046:	4413      	add	r3, r2
 8009048:	4619      	mov	r1, r3
 800904a:	6938      	ldr	r0, [r7, #16]
 800904c:	f7ff fefe 	bl	8008e4c <move_window>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d152      	bne.n	80090fc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4413      	add	r3, r2
 8009060:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	4313      	orrs	r3, r2
 800906a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <get_fat+0xba>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	091b      	lsrs	r3, r3, #4
 800907a:	e002      	b.n	8009082 <get_fat+0xc0>
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009082:	617b      	str	r3, [r7, #20]
			break;
 8009084:	e03f      	b.n	8009106 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6a1a      	ldr	r2, [r3, #32]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	0a1b      	lsrs	r3, r3, #8
 800908e:	4413      	add	r3, r2
 8009090:	4619      	mov	r1, r3
 8009092:	6938      	ldr	r0, [r7, #16]
 8009094:	f7ff feda 	bl	8008e4c <move_window>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d130      	bne.n	8009100 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80090ac:	4413      	add	r3, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff fc1c 	bl	80088ec <ld_word>
 80090b4:	4603      	mov	r3, r0
 80090b6:	617b      	str	r3, [r7, #20]
			break;
 80090b8:	e025      	b.n	8009106 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6a1a      	ldr	r2, [r3, #32]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	09db      	lsrs	r3, r3, #7
 80090c2:	4413      	add	r3, r2
 80090c4:	4619      	mov	r1, r3
 80090c6:	6938      	ldr	r0, [r7, #16]
 80090c8:	f7ff fec0 	bl	8008e4c <move_window>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d118      	bne.n	8009104 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80090e0:	4413      	add	r3, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff fc1a 	bl	800891c <ld_dword>
 80090e8:	4603      	mov	r3, r0
 80090ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80090ee:	617b      	str	r3, [r7, #20]
			break;
 80090f0:	e009      	b.n	8009106 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80090f2:	2301      	movs	r3, #1
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	e006      	b.n	8009106 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090f8:	bf00      	nop
 80090fa:	e004      	b.n	8009106 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090fc:	bf00      	nop
 80090fe:	e002      	b.n	8009106 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009100:	bf00      	nop
 8009102:	e000      	b.n	8009106 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009104:	bf00      	nop
		}
	}

	return val;
 8009106:	697b      	ldr	r3, [r7, #20]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009110:	b590      	push	{r4, r7, lr}
 8009112:	b089      	sub	sp, #36	@ 0x24
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800911c:	2302      	movs	r3, #2
 800911e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b01      	cmp	r3, #1
 8009124:	f240 80d9 	bls.w	80092da <put_fat+0x1ca>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	429a      	cmp	r2, r3
 8009130:	f080 80d3 	bcs.w	80092da <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b03      	cmp	r3, #3
 800913a:	f000 8096 	beq.w	800926a <put_fat+0x15a>
 800913e:	2b03      	cmp	r3, #3
 8009140:	f300 80cb 	bgt.w	80092da <put_fat+0x1ca>
 8009144:	2b01      	cmp	r3, #1
 8009146:	d002      	beq.n	800914e <put_fat+0x3e>
 8009148:	2b02      	cmp	r3, #2
 800914a:	d06e      	beq.n	800922a <put_fat+0x11a>
 800914c:	e0c5      	b.n	80092da <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	4413      	add	r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a1a      	ldr	r2, [r3, #32]
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	0a5b      	lsrs	r3, r3, #9
 8009164:	4413      	add	r3, r2
 8009166:	4619      	mov	r1, r3
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7ff fe6f 	bl	8008e4c <move_window>
 800916e:	4603      	mov	r3, r0
 8009170:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009172:	7ffb      	ldrb	r3, [r7, #31]
 8009174:	2b00      	cmp	r3, #0
 8009176:	f040 80a9 	bne.w	80092cc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	61b9      	str	r1, [r7, #24]
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	4413      	add	r3, r2
 800918c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00d      	beq.n	80091b4 <put_fat+0xa4>
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	b25b      	sxtb	r3, r3
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	b25a      	sxtb	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b25b      	sxtb	r3, r3
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	e001      	b.n	80091b8 <put_fat+0xa8>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a1a      	ldr	r2, [r3, #32]
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	0a5b      	lsrs	r3, r3, #9
 80091ca:	4413      	add	r3, r2
 80091cc:	4619      	mov	r1, r3
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff fe3c 	bl	8008e4c <move_window>
 80091d4:	4603      	mov	r3, r0
 80091d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091d8:	7ffb      	ldrb	r3, [r7, #31]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d178      	bne.n	80092d0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ea:	4413      	add	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <put_fat+0xf0>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	091b      	lsrs	r3, r3, #4
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	e00e      	b.n	800921e <put_fat+0x10e>
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	b25b      	sxtb	r3, r3
 8009206:	f023 030f 	bic.w	r3, r3, #15
 800920a:	b25a      	sxtb	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	b25b      	sxtb	r3, r3
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	b25b      	sxtb	r3, r3
 8009218:	4313      	orrs	r3, r2
 800921a:	b25b      	sxtb	r3, r3
 800921c:	b2db      	uxtb	r3, r3
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	70da      	strb	r2, [r3, #3]
			break;
 8009228:	e057      	b.n	80092da <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	4413      	add	r3, r2
 8009234:	4619      	mov	r1, r3
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f7ff fe08 	bl	8008e4c <move_window>
 800923c:	4603      	mov	r3, r0
 800923e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009240:	7ffb      	ldrb	r3, [r7, #31]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d146      	bne.n	80092d4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009254:	4413      	add	r3, r2
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	b292      	uxth	r2, r2
 800925a:	4611      	mov	r1, r2
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff fb80 	bl	8008962 <st_word>
			fs->wflag = 1;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	70da      	strb	r2, [r3, #3]
			break;
 8009268:	e037      	b.n	80092da <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a1a      	ldr	r2, [r3, #32]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	09db      	lsrs	r3, r3, #7
 8009272:	4413      	add	r3, r2
 8009274:	4619      	mov	r1, r3
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7ff fde8 	bl	8008e4c <move_window>
 800927c:	4603      	mov	r3, r0
 800927e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009280:	7ffb      	ldrb	r3, [r7, #31]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d128      	bne.n	80092d8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800929a:	4413      	add	r3, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff fb3d 	bl	800891c <ld_dword>
 80092a2:	4603      	mov	r3, r0
 80092a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80092a8:	4323      	orrs	r3, r4
 80092aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80092ba:	4413      	add	r3, r2
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff fb6a 	bl	8008998 <st_dword>
			fs->wflag = 1;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	70da      	strb	r2, [r3, #3]
			break;
 80092ca:	e006      	b.n	80092da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80092cc:	bf00      	nop
 80092ce:	e004      	b.n	80092da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80092d0:	bf00      	nop
 80092d2:	e002      	b.n	80092da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80092d4:	bf00      	nop
 80092d6:	e000      	b.n	80092da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80092d8:	bf00      	nop
		}
	}
	return res;
 80092da:	7ffb      	ldrb	r3, [r7, #31]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3724      	adds	r7, #36	@ 0x24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd90      	pop	{r4, r7, pc}

080092e4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d904      	bls.n	800930a <remove_chain+0x26>
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	429a      	cmp	r2, r3
 8009308:	d301      	bcc.n	800930e <remove_chain+0x2a>
 800930a:	2302      	movs	r3, #2
 800930c:	e04b      	b.n	80093a6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00c      	beq.n	800932e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009314:	f04f 32ff 	mov.w	r2, #4294967295
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	69b8      	ldr	r0, [r7, #24]
 800931c:	f7ff fef8 	bl	8009110 <put_fat>
 8009320:	4603      	mov	r3, r0
 8009322:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009324:	7ffb      	ldrb	r3, [r7, #31]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <remove_chain+0x4a>
 800932a:	7ffb      	ldrb	r3, [r7, #31]
 800932c:	e03b      	b.n	80093a6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800932e:	68b9      	ldr	r1, [r7, #8]
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f7ff fe46 	bl	8008fc2 <get_fat>
 8009336:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d031      	beq.n	80093a2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <remove_chain+0x64>
 8009344:	2302      	movs	r3, #2
 8009346:	e02e      	b.n	80093a6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934e:	d101      	bne.n	8009354 <remove_chain+0x70>
 8009350:	2301      	movs	r3, #1
 8009352:	e028      	b.n	80093a6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009354:	2200      	movs	r2, #0
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	69b8      	ldr	r0, [r7, #24]
 800935a:	f7ff fed9 	bl	8009110 <put_fat>
 800935e:	4603      	mov	r3, r0
 8009360:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009362:	7ffb      	ldrb	r3, [r7, #31]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <remove_chain+0x88>
 8009368:	7ffb      	ldrb	r3, [r7, #31]
 800936a:	e01c      	b.n	80093a6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	691a      	ldr	r2, [r3, #16]
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	3b02      	subs	r3, #2
 8009376:	429a      	cmp	r2, r3
 8009378:	d20b      	bcs.n	8009392 <remove_chain+0xae>
			fs->free_clst++;
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	791b      	ldrb	r3, [r3, #4]
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	b2da      	uxtb	r2, r3
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	429a      	cmp	r2, r3
 800939e:	d3c6      	bcc.n	800932e <remove_chain+0x4a>
 80093a0:	e000      	b.n	80093a4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80093a2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b088      	sub	sp, #32
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10d      	bne.n	80093e0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d004      	beq.n	80093da <create_chain+0x2c>
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d31b      	bcc.n	8009412 <create_chain+0x64>
 80093da:	2301      	movs	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	e018      	b.n	8009412 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff fded 	bl	8008fc2 <get_fat>
 80093e8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d801      	bhi.n	80093f4 <create_chain+0x46>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e070      	b.n	80094d6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d101      	bne.n	8009400 <create_chain+0x52>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	e06a      	b.n	80094d6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	429a      	cmp	r2, r3
 8009408:	d201      	bcs.n	800940e <create_chain+0x60>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	e063      	b.n	80094d6 <create_chain+0x128>
		scl = clst;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	3301      	adds	r3, #1
 800941a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	429a      	cmp	r2, r3
 8009424:	d307      	bcc.n	8009436 <create_chain+0x88>
				ncl = 2;
 8009426:	2302      	movs	r3, #2
 8009428:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800942a:	69fa      	ldr	r2, [r7, #28]
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	429a      	cmp	r2, r3
 8009430:	d901      	bls.n	8009436 <create_chain+0x88>
 8009432:	2300      	movs	r3, #0
 8009434:	e04f      	b.n	80094d6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009436:	69f9      	ldr	r1, [r7, #28]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fdc2 	bl	8008fc2 <get_fat>
 800943e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00e      	beq.n	8009464 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d003      	beq.n	8009454 <create_chain+0xa6>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d101      	bne.n	8009458 <create_chain+0xaa>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	e03e      	b.n	80094d6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	429a      	cmp	r2, r3
 800945e:	d1da      	bne.n	8009416 <create_chain+0x68>
 8009460:	2300      	movs	r3, #0
 8009462:	e038      	b.n	80094d6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009464:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009466:	f04f 32ff 	mov.w	r2, #4294967295
 800946a:	69f9      	ldr	r1, [r7, #28]
 800946c:	6938      	ldr	r0, [r7, #16]
 800946e:	f7ff fe4f 	bl	8009110 <put_fat>
 8009472:	4603      	mov	r3, r0
 8009474:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <create_chain+0xe2>
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d006      	beq.n	8009490 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009482:	69fa      	ldr	r2, [r7, #28]
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6938      	ldr	r0, [r7, #16]
 8009488:	f7ff fe42 	bl	8009110 <put_fat>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d116      	bne.n	80094c4 <create_chain+0x116>
		fs->last_clst = ncl;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	3b02      	subs	r3, #2
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d804      	bhi.n	80094b4 <create_chain+0x106>
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	1e5a      	subs	r2, r3, #1
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	791b      	ldrb	r3, [r3, #4]
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	711a      	strb	r2, [r3, #4]
 80094c2:	e007      	b.n	80094d4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d102      	bne.n	80094d0 <create_chain+0x122>
 80094ca:	f04f 33ff 	mov.w	r3, #4294967295
 80094ce:	e000      	b.n	80094d2 <create_chain+0x124>
 80094d0:	2301      	movs	r3, #1
 80094d2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80094d4:	69fb      	ldr	r3, [r7, #28]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3720      	adds	r7, #32
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80094de:	b480      	push	{r7}
 80094e0:	b087      	sub	sp, #28
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f2:	3304      	adds	r3, #4
 80094f4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	0a5b      	lsrs	r3, r3, #9
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	8952      	ldrh	r2, [r2, #10]
 80094fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009502:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	613a      	str	r2, [r7, #16]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <clmt_clust+0x3a>
 8009514:	2300      	movs	r3, #0
 8009516:	e010      	b.n	800953a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	429a      	cmp	r2, r3
 800951e:	d307      	bcc.n	8009530 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	3304      	adds	r3, #4
 800952c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800952e:	e7e9      	b.n	8009504 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009530:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	4413      	add	r3, r2
}
 800953a:	4618      	mov	r0, r3
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b086      	sub	sp, #24
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800955c:	d204      	bcs.n	8009568 <dir_sdi+0x22>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	f003 031f 	and.w	r3, r3, #31
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009568:	2302      	movs	r3, #2
 800956a:	e063      	b.n	8009634 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <dir_sdi+0x46>
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d902      	bls.n	800958c <dir_sdi+0x46>
		clst = fs->dirbase;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10c      	bne.n	80095ac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	095b      	lsrs	r3, r3, #5
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	8912      	ldrh	r2, [r2, #8]
 800959a:	4293      	cmp	r3, r2
 800959c:	d301      	bcc.n	80095a2 <dir_sdi+0x5c>
 800959e:	2302      	movs	r3, #2
 80095a0:	e048      	b.n	8009634 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	61da      	str	r2, [r3, #28]
 80095aa:	e029      	b.n	8009600 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	895b      	ldrh	r3, [r3, #10]
 80095b0:	025b      	lsls	r3, r3, #9
 80095b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80095b4:	e019      	b.n	80095ea <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6979      	ldr	r1, [r7, #20]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff fd01 	bl	8008fc2 <get_fat>
 80095c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c8:	d101      	bne.n	80095ce <dir_sdi+0x88>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e032      	b.n	8009634 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d904      	bls.n	80095de <dir_sdi+0x98>
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d301      	bcc.n	80095e2 <dir_sdi+0x9c>
 80095de:	2302      	movs	r3, #2
 80095e0:	e028      	b.n	8009634 <dir_sdi+0xee>
			ofs -= csz;
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d2e1      	bcs.n	80095b6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80095f2:	6979      	ldr	r1, [r7, #20]
 80095f4:	6938      	ldr	r0, [r7, #16]
 80095f6:	f7ff fcc5 	bl	8008f84 <clust2sect>
 80095fa:	4602      	mov	r2, r0
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <dir_sdi+0xcc>
 800960e:	2302      	movs	r3, #2
 8009610:	e010      	b.n	8009634 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69da      	ldr	r2, [r3, #28]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	0a5b      	lsrs	r3, r3, #9
 800961a:	441a      	add	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962c:	441a      	add	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3718      	adds	r7, #24
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	3320      	adds	r3, #32
 8009652:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <dir_next+0x28>
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009662:	d301      	bcc.n	8009668 <dir_next+0x2c>
 8009664:	2304      	movs	r3, #4
 8009666:	e0aa      	b.n	80097be <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	2b00      	cmp	r3, #0
 8009670:	f040 8098 	bne.w	80097a4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	095b      	lsrs	r3, r3, #5
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	8912      	ldrh	r2, [r2, #8]
 800968e:	4293      	cmp	r3, r2
 8009690:	f0c0 8088 	bcc.w	80097a4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	61da      	str	r2, [r3, #28]
 800969a:	2304      	movs	r3, #4
 800969c:	e08f      	b.n	80097be <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	0a5b      	lsrs	r3, r3, #9
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	8952      	ldrh	r2, [r2, #10]
 80096a6:	3a01      	subs	r2, #1
 80096a8:	4013      	ands	r3, r2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d17a      	bne.n	80097a4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7ff fc83 	bl	8008fc2 <get_fat>
 80096bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d801      	bhi.n	80096c8 <dir_next+0x8c>
 80096c4:	2302      	movs	r3, #2
 80096c6:	e07a      	b.n	80097be <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d101      	bne.n	80096d4 <dir_next+0x98>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e074      	b.n	80097be <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d358      	bcc.n	8009790 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d104      	bne.n	80096ee <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	61da      	str	r2, [r3, #28]
 80096ea:	2304      	movs	r3, #4
 80096ec:	e067      	b.n	80097be <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f7ff fe59 	bl	80093ae <create_chain>
 80096fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <dir_next+0xcc>
 8009704:	2307      	movs	r3, #7
 8009706:	e05a      	b.n	80097be <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <dir_next+0xd6>
 800970e:	2302      	movs	r3, #2
 8009710:	e055      	b.n	80097be <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d101      	bne.n	800971e <dir_next+0xe2>
 800971a:	2301      	movs	r3, #1
 800971c:	e04f      	b.n	80097be <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7ff fb50 	bl	8008dc4 <sync_window>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <dir_next+0xf2>
 800972a:	2301      	movs	r3, #1
 800972c:	e047      	b.n	80097be <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3330      	adds	r3, #48	@ 0x30
 8009732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009736:	2100      	movs	r1, #0
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff f97a 	bl	8008a32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
 8009742:	6979      	ldr	r1, [r7, #20]
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7ff fc1d 	bl	8008f84 <clust2sect>
 800974a:	4602      	mov	r2, r0
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009750:	e012      	b.n	8009778 <dir_next+0x13c>
						fs->wflag = 1;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff fb33 	bl	8008dc4 <sync_window>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <dir_next+0x12c>
 8009764:	2301      	movs	r3, #1
 8009766:	e02a      	b.n	80097be <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	3301      	adds	r3, #1
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	895b      	ldrh	r3, [r3, #10]
 800977c:	461a      	mov	r2, r3
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	4293      	cmp	r3, r2
 8009782:	d3e6      	bcc.n	8009752 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	1ad2      	subs	r2, r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009796:	6979      	ldr	r1, [r7, #20]
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fbf3 	bl	8008f84 <clust2sect>
 800979e:	4602      	mov	r2, r0
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b6:	441a      	add	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b086      	sub	sp, #24
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80097d6:	2100      	movs	r1, #0
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff feb4 	bl	8009546 <dir_sdi>
 80097de:	4603      	mov	r3, r0
 80097e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d12b      	bne.n	8009840 <dir_alloc+0x7a>
		n = 0;
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	4619      	mov	r1, r3
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7ff fb2a 	bl	8008e4c <move_window>
 80097f8:	4603      	mov	r3, r0
 80097fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d11d      	bne.n	800983e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2be5      	cmp	r3, #229	@ 0xe5
 800980a:	d004      	beq.n	8009816 <dir_alloc+0x50>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d107      	bne.n	8009826 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3301      	adds	r3, #1
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d102      	bne.n	800982a <dir_alloc+0x64>
 8009824:	e00c      	b.n	8009840 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009826:	2300      	movs	r3, #0
 8009828:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800982a:	2101      	movs	r1, #1
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff ff05 	bl	800963c <dir_next>
 8009832:	4603      	mov	r3, r0
 8009834:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d0d7      	beq.n	80097ec <dir_alloc+0x26>
 800983c:	e000      	b.n	8009840 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800983e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b04      	cmp	r3, #4
 8009844:	d101      	bne.n	800984a <dir_alloc+0x84>
 8009846:	2307      	movs	r3, #7
 8009848:	75fb      	strb	r3, [r7, #23]
	return res;
 800984a:	7dfb      	ldrb	r3, [r7, #23]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	331a      	adds	r3, #26
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff f842 	bl	80088ec <ld_word>
 8009868:	4603      	mov	r3, r0
 800986a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b03      	cmp	r3, #3
 8009872:	d109      	bne.n	8009888 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	3314      	adds	r3, #20
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff f837 	bl	80088ec <ld_word>
 800987e:	4603      	mov	r3, r0
 8009880:	041b      	lsls	r3, r3, #16
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009888:	68fb      	ldr	r3, [r7, #12]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	331a      	adds	r3, #26
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	b292      	uxth	r2, r2
 80098a6:	4611      	mov	r1, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff f85a 	bl	8008962 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d109      	bne.n	80098ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	f103 0214 	add.w	r2, r3, #20
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	0c1b      	lsrs	r3, r3, #16
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	4619      	mov	r1, r3
 80098c4:	4610      	mov	r0, r2
 80098c6:	f7ff f84c 	bl	8008962 <st_word>
	}
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80098e0:	2100      	movs	r1, #0
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff fe2f 	bl	8009546 <dir_sdi>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <dir_find+0x24>
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	e03e      	b.n	8009974 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	4619      	mov	r1, r3
 80098fc:	6938      	ldr	r0, [r7, #16]
 80098fe:	f7ff faa5 	bl	8008e4c <move_window>
 8009902:	4603      	mov	r3, r0
 8009904:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d12f      	bne.n	800996c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <dir_find+0x4e>
 800991a:	2304      	movs	r3, #4
 800991c:	75fb      	strb	r3, [r7, #23]
 800991e:	e028      	b.n	8009972 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	330b      	adds	r3, #11
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	330b      	adds	r3, #11
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	f003 0308 	and.w	r3, r3, #8
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10a      	bne.n	8009958 <dir_find+0x86>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a18      	ldr	r0, [r3, #32]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3324      	adds	r3, #36	@ 0x24
 800994a:	220b      	movs	r2, #11
 800994c:	4619      	mov	r1, r3
 800994e:	f7ff f88b 	bl	8008a68 <mem_cmp>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00b      	beq.n	8009970 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009958:	2100      	movs	r1, #0
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff fe6e 	bl	800963c <dir_next>
 8009960:	4603      	mov	r3, r0
 8009962:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0c5      	beq.n	80098f6 <dir_find+0x24>
 800996a:	e002      	b.n	8009972 <dir_find+0xa0>
		if (res != FR_OK) break;
 800996c:	bf00      	nop
 800996e:	e000      	b.n	8009972 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009970:	bf00      	nop

	return res;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800998a:	2101      	movs	r1, #1
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff ff1a 	bl	80097c6 <dir_alloc>
 8009992:	4603      	mov	r3, r0
 8009994:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d11c      	bne.n	80099d6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	4619      	mov	r1, r3
 80099a2:	68b8      	ldr	r0, [r7, #8]
 80099a4:	f7ff fa52 	bl	8008e4c <move_window>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d111      	bne.n	80099d6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	2220      	movs	r2, #32
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff f839 	bl	8008a32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a18      	ldr	r0, [r3, #32]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3324      	adds	r3, #36	@ 0x24
 80099c8:	220b      	movs	r2, #11
 80099ca:	4619      	mov	r1, r3
 80099cc:	f7ff f810 	bl	80089f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2201      	movs	r2, #1
 80099d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3324      	adds	r3, #36	@ 0x24
 80099f4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80099f6:	220b      	movs	r2, #11
 80099f8:	2120      	movs	r1, #32
 80099fa:	68b8      	ldr	r0, [r7, #8]
 80099fc:	f7ff f819 	bl	8008a32 <mem_set>
	si = i = 0; ni = 8;
 8009a00:	2300      	movs	r3, #0
 8009a02:	613b      	str	r3, [r7, #16]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	61fb      	str	r3, [r7, #28]
 8009a08:	2308      	movs	r3, #8
 8009a0a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	61fa      	str	r2, [r7, #28]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	4413      	add	r3, r2
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a1a:	7efb      	ldrb	r3, [r7, #27]
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d94e      	bls.n	8009abe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009a20:	7efb      	ldrb	r3, [r7, #27]
 8009a22:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a24:	d006      	beq.n	8009a34 <create_name+0x54>
 8009a26:	7efb      	ldrb	r3, [r7, #27]
 8009a28:	2b5c      	cmp	r3, #92	@ 0x5c
 8009a2a:	d110      	bne.n	8009a4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009a2c:	e002      	b.n	8009a34 <create_name+0x54>
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	3301      	adds	r3, #1
 8009a32:	61fb      	str	r3, [r7, #28]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	4413      	add	r3, r2
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a3e:	d0f6      	beq.n	8009a2e <create_name+0x4e>
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b5c      	cmp	r3, #92	@ 0x5c
 8009a4a:	d0f0      	beq.n	8009a2e <create_name+0x4e>
			break;
 8009a4c:	e038      	b.n	8009ac0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009a4e:	7efb      	ldrb	r3, [r7, #27]
 8009a50:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a52:	d003      	beq.n	8009a5c <create_name+0x7c>
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d30c      	bcc.n	8009a76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2b0b      	cmp	r3, #11
 8009a60:	d002      	beq.n	8009a68 <create_name+0x88>
 8009a62:	7efb      	ldrb	r3, [r7, #27]
 8009a64:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a66:	d001      	beq.n	8009a6c <create_name+0x8c>
 8009a68:	2306      	movs	r3, #6
 8009a6a:	e044      	b.n	8009af6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	613b      	str	r3, [r7, #16]
 8009a70:	230b      	movs	r3, #11
 8009a72:	617b      	str	r3, [r7, #20]
			continue;
 8009a74:	e022      	b.n	8009abc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009a76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da04      	bge.n	8009a88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009a7e:	7efb      	ldrb	r3, [r7, #27]
 8009a80:	3b80      	subs	r3, #128	@ 0x80
 8009a82:	4a1f      	ldr	r2, [pc, #124]	@ (8009b00 <create_name+0x120>)
 8009a84:	5cd3      	ldrb	r3, [r2, r3]
 8009a86:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009a88:	7efb      	ldrb	r3, [r7, #27]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	481d      	ldr	r0, [pc, #116]	@ (8009b04 <create_name+0x124>)
 8009a8e:	f7ff f812 	bl	8008ab6 <chk_chr>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <create_name+0xbc>
 8009a98:	2306      	movs	r3, #6
 8009a9a:	e02c      	b.n	8009af6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009a9c:	7efb      	ldrb	r3, [r7, #27]
 8009a9e:	2b60      	cmp	r3, #96	@ 0x60
 8009aa0:	d905      	bls.n	8009aae <create_name+0xce>
 8009aa2:	7efb      	ldrb	r3, [r7, #27]
 8009aa4:	2b7a      	cmp	r3, #122	@ 0x7a
 8009aa6:	d802      	bhi.n	8009aae <create_name+0xce>
 8009aa8:	7efb      	ldrb	r3, [r7, #27]
 8009aaa:	3b20      	subs	r3, #32
 8009aac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	613a      	str	r2, [r7, #16]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	7efa      	ldrb	r2, [r7, #27]
 8009aba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009abc:	e7a6      	b.n	8009a0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009abe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	441a      	add	r2, r3
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <create_name+0xf4>
 8009ad0:	2306      	movs	r3, #6
 8009ad2:	e010      	b.n	8009af6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2be5      	cmp	r3, #229	@ 0xe5
 8009ada:	d102      	bne.n	8009ae2 <create_name+0x102>
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2205      	movs	r2, #5
 8009ae0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009ae2:	7efb      	ldrb	r3, [r7, #27]
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d801      	bhi.n	8009aec <create_name+0x10c>
 8009ae8:	2204      	movs	r2, #4
 8009aea:	e000      	b.n	8009aee <create_name+0x10e>
 8009aec:	2200      	movs	r2, #0
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	330b      	adds	r3, #11
 8009af2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009af4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3720      	adds	r7, #32
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	0800aef4 	.word	0x0800aef4
 8009b04:	0800ae70 	.word	0x0800ae70

08009b08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009b1c:	e002      	b.n	8009b24 <follow_path+0x1c>
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	3301      	adds	r3, #1
 8009b22:	603b      	str	r3, [r7, #0]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b2a:	d0f8      	beq.n	8009b1e <follow_path+0x16>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b32:	d0f4      	beq.n	8009b1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2200      	movs	r2, #0
 8009b38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b1f      	cmp	r3, #31
 8009b40:	d80a      	bhi.n	8009b58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2280      	movs	r2, #128	@ 0x80
 8009b46:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff fcfa 	bl	8009546 <dir_sdi>
 8009b52:	4603      	mov	r3, r0
 8009b54:	75fb      	strb	r3, [r7, #23]
 8009b56:	e043      	b.n	8009be0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b58:	463b      	mov	r3, r7
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ff3f 	bl	80099e0 <create_name>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d134      	bne.n	8009bd6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff feb0 	bl	80098d2 <dir_find>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009b7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00a      	beq.n	8009b9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d127      	bne.n	8009bda <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d122      	bne.n	8009bda <follow_path+0xd2>
 8009b94:	2305      	movs	r3, #5
 8009b96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009b98:	e01f      	b.n	8009bda <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d11c      	bne.n	8009bde <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	799b      	ldrb	r3, [r3, #6]
 8009ba8:	f003 0310 	and.w	r3, r3, #16
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009bb0:	2305      	movs	r3, #5
 8009bb2:	75fb      	strb	r3, [r7, #23]
 8009bb4:	e014      	b.n	8009be0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc4:	4413      	add	r3, r2
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff fe43 	bl	8009854 <ld_clust>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009bd4:	e7c0      	b.n	8009b58 <follow_path+0x50>
			if (res != FR_OK) break;
 8009bd6:	bf00      	nop
 8009bd8:	e002      	b.n	8009be0 <follow_path+0xd8>
				break;
 8009bda:	bf00      	nop
 8009bdc:	e000      	b.n	8009be0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009bde:	bf00      	nop
			}
		}
	}

	return res;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b087      	sub	sp, #28
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d031      	beq.n	8009c64 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	e002      	b.n	8009c0e <get_ldnumber+0x24>
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	617b      	str	r3, [r7, #20]
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	d903      	bls.n	8009c1e <get_ldnumber+0x34>
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8009c1c:	d1f4      	bne.n	8009c08 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b3a      	cmp	r3, #58	@ 0x3a
 8009c24:	d11c      	bne.n	8009c60 <get_ldnumber+0x76>
			tp = *path;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	60fa      	str	r2, [r7, #12]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	3b30      	subs	r3, #48	@ 0x30
 8009c36:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b09      	cmp	r3, #9
 8009c3c:	d80e      	bhi.n	8009c5c <get_ldnumber+0x72>
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d10a      	bne.n	8009c5c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d107      	bne.n	8009c5c <get_ldnumber+0x72>
					vol = (int)i;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	3301      	adds	r3, #1
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	e002      	b.n	8009c66 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009c60:	2300      	movs	r3, #0
 8009c62:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009c64:	693b      	ldr	r3, [r7, #16]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
	...

08009c74 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	70da      	strb	r2, [r3, #3]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff f8dc 	bl	8008e4c <move_window>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <check_fs+0x2a>
 8009c9a:	2304      	movs	r3, #4
 8009c9c:	e038      	b.n	8009d10 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3330      	adds	r3, #48	@ 0x30
 8009ca2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe fe20 	bl	80088ec <ld_word>
 8009cac:	4603      	mov	r3, r0
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d001      	beq.n	8009cbc <check_fs+0x48>
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e029      	b.n	8009d10 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009cc2:	2be9      	cmp	r3, #233	@ 0xe9
 8009cc4:	d009      	beq.n	8009cda <check_fs+0x66>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ccc:	2beb      	cmp	r3, #235	@ 0xeb
 8009cce:	d11e      	bne.n	8009d0e <check_fs+0x9a>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009cd6:	2b90      	cmp	r3, #144	@ 0x90
 8009cd8:	d119      	bne.n	8009d0e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3330      	adds	r3, #48	@ 0x30
 8009cde:	3336      	adds	r3, #54	@ 0x36
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe fe1b 	bl	800891c <ld_dword>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009cec:	4a0a      	ldr	r2, [pc, #40]	@ (8009d18 <check_fs+0xa4>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d101      	bne.n	8009cf6 <check_fs+0x82>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e00c      	b.n	8009d10 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3330      	adds	r3, #48	@ 0x30
 8009cfa:	3352      	adds	r3, #82	@ 0x52
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fe fe0d 	bl	800891c <ld_dword>
 8009d02:	4603      	mov	r3, r0
 8009d04:	4a05      	ldr	r2, [pc, #20]	@ (8009d1c <check_fs+0xa8>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d101      	bne.n	8009d0e <check_fs+0x9a>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e000      	b.n	8009d10 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009d0e:	2302      	movs	r3, #2
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	00544146 	.word	0x00544146
 8009d1c:	33544146 	.word	0x33544146

08009d20 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b096      	sub	sp, #88	@ 0x58
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2200      	movs	r2, #0
 8009d32:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f7ff ff58 	bl	8009bea <get_ldnumber>
 8009d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	da01      	bge.n	8009d46 <find_volume+0x26>
 8009d42:	230b      	movs	r3, #11
 8009d44:	e22d      	b.n	800a1a2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009d46:	4aa1      	ldr	r2, [pc, #644]	@ (8009fcc <find_volume+0x2ac>)
 8009d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <find_volume+0x3a>
 8009d56:	230c      	movs	r3, #12
 8009d58:	e223      	b.n	800a1a2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d5e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	f023 0301 	bic.w	r3, r3, #1
 8009d66:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01a      	beq.n	8009da6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	785b      	ldrb	r3, [r3, #1]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe fd1b 	bl	80087b0 <disk_status>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009d80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10c      	bne.n	8009da6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d007      	beq.n	8009da2 <find_volume+0x82>
 8009d92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009d9e:	230a      	movs	r3, #10
 8009da0:	e1ff      	b.n	800a1a2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009da2:	2300      	movs	r3, #0
 8009da4:	e1fd      	b.n	800a1a2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da8:	2200      	movs	r2, #0
 8009daa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db6:	785b      	ldrb	r3, [r3, #1]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fe fd13 	bl	80087e4 <disk_initialize>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009dc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e1e6      	b.n	800a1a2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d007      	beq.n	8009dea <find_volume+0xca>
 8009dda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009dde:	f003 0304 	and.w	r3, r3, #4
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009de6:	230a      	movs	r3, #10
 8009de8:	e1db      	b.n	800a1a2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009dee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009df0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009df2:	f7ff ff3f 	bl	8009c74 <check_fs>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d149      	bne.n	8009e98 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e04:	2300      	movs	r3, #0
 8009e06:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e08:	e01e      	b.n	8009e48 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009e18:	4413      	add	r3, r2
 8009e1a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	3304      	adds	r3, #4
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d006      	beq.n	8009e34 <find_volume+0x114>
 8009e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e28:	3308      	adds	r3, #8
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fd76 	bl	800891c <ld_dword>
 8009e30:	4602      	mov	r2, r0
 8009e32:	e000      	b.n	8009e36 <find_volume+0x116>
 8009e34:	2200      	movs	r2, #0
 8009e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	3358      	adds	r3, #88	@ 0x58
 8009e3c:	443b      	add	r3, r7
 8009e3e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e44:	3301      	adds	r3, #1
 8009e46:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d9dd      	bls.n	8009e0a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009e4e:	2300      	movs	r3, #0
 8009e50:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <find_volume+0x13e>
 8009e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	3358      	adds	r3, #88	@ 0x58
 8009e64:	443b      	add	r3, r7
 8009e66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009e6a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <find_volume+0x15e>
 8009e72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e74:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e76:	f7ff fefd 	bl	8009c74 <check_fs>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	e000      	b.n	8009e80 <find_volume+0x160>
 8009e7e:	2303      	movs	r3, #3
 8009e80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009e84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d905      	bls.n	8009e98 <find_volume+0x178>
 8009e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e8e:	3301      	adds	r3, #1
 8009e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	d9e2      	bls.n	8009e5e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d101      	bne.n	8009ea4 <find_volume+0x184>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e17e      	b.n	800a1a2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d901      	bls.n	8009eb0 <find_volume+0x190>
 8009eac:	230d      	movs	r3, #13
 8009eae:	e178      	b.n	800a1a2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	3330      	adds	r3, #48	@ 0x30
 8009eb4:	330b      	adds	r3, #11
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fd18 	bl	80088ec <ld_word>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ec2:	d001      	beq.n	8009ec8 <find_volume+0x1a8>
 8009ec4:	230d      	movs	r3, #13
 8009ec6:	e16c      	b.n	800a1a2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	3330      	adds	r3, #48	@ 0x30
 8009ecc:	3316      	adds	r3, #22
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fd0c 	bl	80088ec <ld_word>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d106      	bne.n	8009eec <find_volume+0x1cc>
 8009ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee0:	3330      	adds	r3, #48	@ 0x30
 8009ee2:	3324      	adds	r3, #36	@ 0x24
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fe fd19 	bl	800891c <ld_dword>
 8009eea:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ef0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efe:	789b      	ldrb	r3, [r3, #2]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d005      	beq.n	8009f10 <find_volume+0x1f0>
 8009f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f06:	789b      	ldrb	r3, [r3, #2]
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d001      	beq.n	8009f10 <find_volume+0x1f0>
 8009f0c:	230d      	movs	r3, #13
 8009f0e:	e148      	b.n	800a1a2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	789b      	ldrb	r3, [r3, #2]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f18:	fb02 f303 	mul.w	r3, r2, r3
 8009f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f24:	461a      	mov	r2, r3
 8009f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2c:	895b      	ldrh	r3, [r3, #10]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d008      	beq.n	8009f44 <find_volume+0x224>
 8009f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f34:	895b      	ldrh	r3, [r3, #10]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3a:	895b      	ldrh	r3, [r3, #10]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	4013      	ands	r3, r2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <find_volume+0x228>
 8009f44:	230d      	movs	r3, #13
 8009f46:	e12c      	b.n	800a1a2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4a:	3330      	adds	r3, #48	@ 0x30
 8009f4c:	3311      	adds	r3, #17
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fccc 	bl	80088ec <ld_word>
 8009f54:	4603      	mov	r3, r0
 8009f56:	461a      	mov	r2, r3
 8009f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5e:	891b      	ldrh	r3, [r3, #8]
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <find_volume+0x24e>
 8009f6a:	230d      	movs	r3, #13
 8009f6c:	e119      	b.n	800a1a2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	3330      	adds	r3, #48	@ 0x30
 8009f72:	3313      	adds	r3, #19
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe fcb9 	bl	80088ec <ld_word>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d106      	bne.n	8009f92 <find_volume+0x272>
 8009f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f86:	3330      	adds	r3, #48	@ 0x30
 8009f88:	3320      	adds	r3, #32
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fcc6 	bl	800891c <ld_dword>
 8009f90:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	3330      	adds	r3, #48	@ 0x30
 8009f96:	330e      	adds	r3, #14
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe fca7 	bl	80088ec <ld_word>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009fa2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <find_volume+0x28c>
 8009fa8:	230d      	movs	r3, #13
 8009faa:	e0fa      	b.n	800a1a2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009fac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fb0:	4413      	add	r3, r2
 8009fb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fb4:	8912      	ldrh	r2, [r2, #8]
 8009fb6:	0912      	lsrs	r2, r2, #4
 8009fb8:	b292      	uxth	r2, r2
 8009fba:	4413      	add	r3, r2
 8009fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d204      	bcs.n	8009fd0 <find_volume+0x2b0>
 8009fc6:	230d      	movs	r3, #13
 8009fc8:	e0eb      	b.n	800a1a2 <find_volume+0x482>
 8009fca:	bf00      	nop
 8009fcc:	20000c04 	.word	0x20000c04
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fd8:	8952      	ldrh	r2, [r2, #10]
 8009fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fde:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <find_volume+0x2ca>
 8009fe6:	230d      	movs	r3, #13
 8009fe8:	e0db      	b.n	800a1a2 <find_volume+0x482>
		fmt = FS_FAT32;
 8009fea:	2303      	movs	r3, #3
 8009fec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d802      	bhi.n	800a000 <find_volume+0x2e0>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a002:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a006:	4293      	cmp	r3, r2
 800a008:	d802      	bhi.n	800a010 <find_volume+0x2f0>
 800a00a:	2301      	movs	r3, #1
 800a00c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a012:	1c9a      	adds	r2, r3, #2
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a01c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a01e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a022:	441a      	add	r2, r3
 800a024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a026:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a028:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02c:	441a      	add	r2, r3
 800a02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a030:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a032:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a036:	2b03      	cmp	r3, #3
 800a038:	d11e      	bne.n	800a078 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03c:	3330      	adds	r3, #48	@ 0x30
 800a03e:	332a      	adds	r3, #42	@ 0x2a
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe fc53 	bl	80088ec <ld_word>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <find_volume+0x330>
 800a04c:	230d      	movs	r3, #13
 800a04e:	e0a8      	b.n	800a1a2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	891b      	ldrh	r3, [r3, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <find_volume+0x33c>
 800a058:	230d      	movs	r3, #13
 800a05a:	e0a2      	b.n	800a1a2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05e:	3330      	adds	r3, #48	@ 0x30
 800a060:	332c      	adds	r3, #44	@ 0x2c
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fc5a 	bl	800891c <ld_dword>
 800a068:	4602      	mov	r2, r0
 800a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	647b      	str	r3, [r7, #68]	@ 0x44
 800a076:	e01f      	b.n	800a0b8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	891b      	ldrh	r3, [r3, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <find_volume+0x364>
 800a080:	230d      	movs	r3, #13
 800a082:	e08e      	b.n	800a1a2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a086:	6a1a      	ldr	r2, [r3, #32]
 800a088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a08a:	441a      	add	r2, r3
 800a08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a090:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a094:	2b02      	cmp	r3, #2
 800a096:	d103      	bne.n	800a0a0 <find_volume+0x380>
 800a098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	e00a      	b.n	800a0b6 <find_volume+0x396>
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a2:	695a      	ldr	r2, [r3, #20]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	085a      	lsrs	r2, r3, #1
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a0b6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ba:	699a      	ldr	r2, [r3, #24]
 800a0bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0be:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a0c2:	0a5b      	lsrs	r3, r3, #9
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d201      	bcs.n	800a0cc <find_volume+0x3ac>
 800a0c8:	230d      	movs	r3, #13
 800a0ca:	e06a      	b.n	800a1a2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d2:	611a      	str	r2, [r3, #16]
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d6:	691a      	ldr	r2, [r3, #16]
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0da:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0de:	2280      	movs	r2, #128	@ 0x80
 800a0e0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a0e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d149      	bne.n	800a17e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ec:	3330      	adds	r3, #48	@ 0x30
 800a0ee:	3330      	adds	r3, #48	@ 0x30
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe fbfb 	bl	80088ec <ld_word>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d140      	bne.n	800a17e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0fe:	3301      	adds	r3, #1
 800a100:	4619      	mov	r1, r3
 800a102:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a104:	f7fe fea2 	bl	8008e4c <move_window>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d137      	bne.n	800a17e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a110:	2200      	movs	r2, #0
 800a112:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	3330      	adds	r3, #48	@ 0x30
 800a118:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fe fbe5 	bl	80088ec <ld_word>
 800a122:	4603      	mov	r3, r0
 800a124:	461a      	mov	r2, r3
 800a126:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d127      	bne.n	800a17e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	3330      	adds	r3, #48	@ 0x30
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fbf2 	bl	800891c <ld_dword>
 800a138:	4603      	mov	r3, r0
 800a13a:	4a1c      	ldr	r2, [pc, #112]	@ (800a1ac <find_volume+0x48c>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d11e      	bne.n	800a17e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	3330      	adds	r3, #48	@ 0x30
 800a144:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe fbe7 	bl	800891c <ld_dword>
 800a14e:	4603      	mov	r3, r0
 800a150:	4a17      	ldr	r2, [pc, #92]	@ (800a1b0 <find_volume+0x490>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d113      	bne.n	800a17e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	3330      	adds	r3, #48	@ 0x30
 800a15a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fbdc 	bl	800891c <ld_dword>
 800a164:	4602      	mov	r2, r0
 800a166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a168:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16c:	3330      	adds	r3, #48	@ 0x30
 800a16e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a172:	4618      	mov	r0, r3
 800a174:	f7fe fbd2 	bl	800891c <ld_dword>
 800a178:	4602      	mov	r2, r0
 800a17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a180:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a184:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a186:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b4 <find_volume+0x494>)
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	3301      	adds	r3, #1
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	4b09      	ldr	r3, [pc, #36]	@ (800a1b4 <find_volume+0x494>)
 800a190:	801a      	strh	r2, [r3, #0]
 800a192:	4b08      	ldr	r3, [pc, #32]	@ (800a1b4 <find_volume+0x494>)
 800a194:	881a      	ldrh	r2, [r3, #0]
 800a196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a198:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a19a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a19c:	f7fe fdee 	bl	8008d7c <clear_lock>
#endif
	return FR_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3758      	adds	r7, #88	@ 0x58
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	41615252 	.word	0x41615252
 800a1b0:	61417272 	.word	0x61417272
 800a1b4:	20000c08 	.word	0x20000c08

0800a1b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a1c2:	2309      	movs	r3, #9
 800a1c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01c      	beq.n	800a206 <validate+0x4e>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d018      	beq.n	800a206 <validate+0x4e>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d013      	beq.n	800a206 <validate+0x4e>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	889a      	ldrh	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	88db      	ldrh	r3, [r3, #6]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d10c      	bne.n	800a206 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fadc 	bl	80087b0 <disk_status>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d101      	bne.n	800a206 <validate+0x4e>
			res = FR_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <validate+0x5a>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	e000      	b.n	800a214 <validate+0x5c>
 800a212:	2300      	movs	r3, #0
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	6013      	str	r3, [r2, #0]
	return res;
 800a218:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a236:	f107 0310 	add.w	r3, r7, #16
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7ff fcd5 	bl	8009bea <get_ldnumber>
 800a240:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	2b00      	cmp	r3, #0
 800a246:	da01      	bge.n	800a24c <f_mount+0x28>
 800a248:	230b      	movs	r3, #11
 800a24a:	e02b      	b.n	800a2a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a24c:	4a17      	ldr	r2, [pc, #92]	@ (800a2ac <f_mount+0x88>)
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a254:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a25c:	69b8      	ldr	r0, [r7, #24]
 800a25e:	f7fe fd8d 	bl	8008d7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	490d      	ldr	r1, [pc, #52]	@ (800a2ac <f_mount+0x88>)
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <f_mount+0x66>
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d001      	beq.n	800a28e <f_mount+0x6a>
 800a28a:	2300      	movs	r3, #0
 800a28c:	e00a      	b.n	800a2a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a28e:	f107 010c 	add.w	r1, r7, #12
 800a292:	f107 0308 	add.w	r3, r7, #8
 800a296:	2200      	movs	r2, #0
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff fd41 	bl	8009d20 <find_volume>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3720      	adds	r7, #32
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20000c04 	.word	0x20000c04

0800a2b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b098      	sub	sp, #96	@ 0x60
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <f_open+0x18>
 800a2c4:	2309      	movs	r3, #9
 800a2c6:	e1a9      	b.n	800a61c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a2d0:	79fa      	ldrb	r2, [r7, #7]
 800a2d2:	f107 0110 	add.w	r1, r7, #16
 800a2d6:	f107 0308 	add.w	r3, r7, #8
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff fd20 	bl	8009d20 <find_volume>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a2e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f040 818d 	bne.w	800a60a <f_open+0x35a>
		dj.obj.fs = fs;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	f107 0314 	add.w	r3, r7, #20
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff fc03 	bl	8009b08 <follow_path>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a308:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d118      	bne.n	800a342 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a310:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a314:	b25b      	sxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	da03      	bge.n	800a322 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a31a:	2306      	movs	r3, #6
 800a31c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a320:	e00f      	b.n	800a342 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	2b01      	cmp	r3, #1
 800a326:	bf8c      	ite	hi
 800a328:	2301      	movhi	r3, #1
 800a32a:	2300      	movls	r3, #0
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	461a      	mov	r2, r3
 800a330:	f107 0314 	add.w	r3, r7, #20
 800a334:	4611      	mov	r1, r2
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe fbd8 	bl	8008aec <chk_lock>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	f003 031c 	and.w	r3, r3, #28
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d07f      	beq.n	800a44c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a34c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a350:	2b00      	cmp	r3, #0
 800a352:	d017      	beq.n	800a384 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a354:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a358:	2b04      	cmp	r3, #4
 800a35a:	d10e      	bne.n	800a37a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a35c:	f7fe fc22 	bl	8008ba4 <enq_lock>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d006      	beq.n	800a374 <f_open+0xc4>
 800a366:	f107 0314 	add.w	r3, r7, #20
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7ff fb06 	bl	800997c <dir_register>
 800a370:	4603      	mov	r3, r0
 800a372:	e000      	b.n	800a376 <f_open+0xc6>
 800a374:	2312      	movs	r3, #18
 800a376:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a37a:	79fb      	ldrb	r3, [r7, #7]
 800a37c:	f043 0308 	orr.w	r3, r3, #8
 800a380:	71fb      	strb	r3, [r7, #7]
 800a382:	e010      	b.n	800a3a6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a384:	7ebb      	ldrb	r3, [r7, #26]
 800a386:	f003 0311 	and.w	r3, r3, #17
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <f_open+0xe6>
					res = FR_DENIED;
 800a38e:	2307      	movs	r3, #7
 800a390:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a394:	e007      	b.n	800a3a6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <f_open+0xf6>
 800a3a0:	2308      	movs	r3, #8
 800a3a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d168      	bne.n	800a480 <f_open+0x1d0>
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	f003 0308 	and.w	r3, r3, #8
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d063      	beq.n	800a480 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a3b8:	f7fe f99c 	bl	80086f4 <get_fattime>
 800a3bc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c0:	330e      	adds	r3, #14
 800a3c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fae7 	bl	8008998 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3cc:	3316      	adds	r3, #22
 800a3ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fe fae1 	bl	8008998 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d8:	330b      	adds	r3, #11
 800a3da:	2220      	movs	r2, #32
 800a3dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff fa35 	bl	8009854 <ld_clust>
 800a3ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fa4d 	bl	8009892 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fa:	331c      	adds	r3, #28
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe faca 	bl	8008998 <st_dword>
					fs->wflag = 1;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2201      	movs	r2, #1
 800a408:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a40a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d037      	beq.n	800a480 <f_open+0x1d0>
						dw = fs->winsect;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a414:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a416:	f107 0314 	add.w	r3, r7, #20
 800a41a:	2200      	movs	r2, #0
 800a41c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe ff60 	bl	80092e4 <remove_chain>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a42a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d126      	bne.n	800a480 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe fd08 	bl	8008e4c <move_window>
 800a43c:	4603      	mov	r3, r0
 800a43e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a446:	3a01      	subs	r2, #1
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	e019      	b.n	800a480 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a44c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a450:	2b00      	cmp	r3, #0
 800a452:	d115      	bne.n	800a480 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a454:	7ebb      	ldrb	r3, [r7, #26]
 800a456:	f003 0310 	and.w	r3, r3, #16
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a45e:	2304      	movs	r3, #4
 800a460:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a464:	e00c      	b.n	800a480 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d007      	beq.n	800a480 <f_open+0x1d0>
 800a470:	7ebb      	ldrb	r3, [r7, #26]
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <f_open+0x1d0>
						res = FR_DENIED;
 800a47a:	2307      	movs	r3, #7
 800a47c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a480:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a484:	2b00      	cmp	r3, #0
 800a486:	d126      	bne.n	800a4d6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	f003 0308 	and.w	r3, r3, #8
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a498:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a4a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	bf8c      	ite	hi
 800a4ae:	2301      	movhi	r3, #1
 800a4b0:	2300      	movls	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	f107 0314 	add.w	r3, r7, #20
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fb93 	bl	8008be8 <inc_lock>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d102      	bne.n	800a4d6 <f_open+0x226>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f040 8095 	bne.w	800a60a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff f9b4 	bl	8009854 <ld_clust>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f4:	331c      	adds	r3, #28
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe fa10 	bl	800891c <ld_dword>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	88da      	ldrh	r2, [r3, #6]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	79fa      	ldrb	r2, [r7, #7]
 800a51a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3330      	adds	r3, #48	@ 0x30
 800a532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a536:	2100      	movs	r1, #0
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fa7a 	bl	8008a32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	f003 0320 	and.w	r3, r3, #32
 800a544:	2b00      	cmp	r3, #0
 800a546:	d060      	beq.n	800a60a <f_open+0x35a>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d05c      	beq.n	800a60a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	68da      	ldr	r2, [r3, #12]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	895b      	ldrh	r3, [r3, #10]
 800a55c:	025b      	lsls	r3, r3, #9
 800a55e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a56c:	e016      	b.n	800a59c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fd25 	bl	8008fc2 <get_fat>
 800a578:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a57a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d802      	bhi.n	800a586 <f_open+0x2d6>
 800a580:	2302      	movs	r3, #2
 800a582:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58c:	d102      	bne.n	800a594 <f_open+0x2e4>
 800a58e:	2301      	movs	r3, #1
 800a590:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a594:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a59c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d103      	bne.n	800a5ac <f_open+0x2fc>
 800a5a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a5a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d8e0      	bhi.n	800a56e <f_open+0x2be>
				}
				fp->clust = clst;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d127      	bne.n	800a60a <f_open+0x35a>
 800a5ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d022      	beq.n	800a60a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe fcdb 	bl	8008f84 <clust2sect>
 800a5ce:	6478      	str	r0, [r7, #68]	@ 0x44
 800a5d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d103      	bne.n	800a5de <f_open+0x32e>
						res = FR_INT_ERR;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a5dc:	e015      	b.n	800a60a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a5de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5e0:	0a5a      	lsrs	r2, r3, #9
 800a5e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5e4:	441a      	add	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	7858      	ldrb	r0, [r3, #1]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6a1a      	ldr	r2, [r3, #32]
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f7fe f919 	bl	8008830 <disk_read>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <f_open+0x35a>
 800a604:	2301      	movs	r3, #1
 800a606:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a60a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <f_open+0x368>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a618:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3760      	adds	r7, #96	@ 0x60
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08c      	sub	sp, #48	@ 0x30
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f107 0210 	add.w	r2, r7, #16
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f7ff fdb7 	bl	800a1b8 <validate>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a650:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a654:	2b00      	cmp	r3, #0
 800a656:	d107      	bne.n	800a668 <f_write+0x44>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	7d5b      	ldrb	r3, [r3, #21]
 800a65c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a660:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <f_write+0x4a>
 800a668:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a66c:	e14b      	b.n	800a906 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	7d1b      	ldrb	r3, [r3, #20]
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <f_write+0x5a>
 800a67a:	2307      	movs	r3, #7
 800a67c:	e143      	b.n	800a906 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	699a      	ldr	r2, [r3, #24]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	441a      	add	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	f080 812d 	bcs.w	800a8ea <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	43db      	mvns	r3, r3
 800a696:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a698:	e127      	b.n	800a8ea <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f040 80e3 	bne.w	800a86e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	0a5b      	lsrs	r3, r3, #9
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	8952      	ldrh	r2, [r2, #10]
 800a6b2:	3a01      	subs	r2, #1
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d143      	bne.n	800a746 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10c      	bne.n	800a6e0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d11a      	bne.n	800a708 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe fe69 	bl	80093ae <create_chain>
 800a6dc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a6de:	e013      	b.n	800a708 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d007      	beq.n	800a6f8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f7fe fef5 	bl	80094de <clmt_clust>
 800a6f4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a6f6:	e007      	b.n	800a708 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	4619      	mov	r1, r3
 800a700:	4610      	mov	r0, r2
 800a702:	f7fe fe54 	bl	80093ae <create_chain>
 800a706:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 80f2 	beq.w	800a8f4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a712:	2b01      	cmp	r3, #1
 800a714:	d104      	bne.n	800a720 <f_write+0xfc>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2202      	movs	r2, #2
 800a71a:	755a      	strb	r2, [r3, #21]
 800a71c:	2302      	movs	r3, #2
 800a71e:	e0f2      	b.n	800a906 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d104      	bne.n	800a732 <f_write+0x10e>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	755a      	strb	r2, [r3, #21]
 800a72e:	2301      	movs	r3, #1
 800a730:	e0e9      	b.n	800a906 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a736:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <f_write+0x122>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a744:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	7d1b      	ldrb	r3, [r3, #20]
 800a74a:	b25b      	sxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	da18      	bge.n	800a782 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	7858      	ldrb	r0, [r3, #1]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6a1a      	ldr	r2, [r3, #32]
 800a75e:	2301      	movs	r3, #1
 800a760:	f7fe f886 	bl	8008870 <disk_write>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d004      	beq.n	800a774 <f_write+0x150>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2201      	movs	r2, #1
 800a76e:	755a      	strb	r2, [r3, #21]
 800a770:	2301      	movs	r3, #1
 800a772:	e0c8      	b.n	800a906 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	7d1b      	ldrb	r3, [r3, #20]
 800a778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	69db      	ldr	r3, [r3, #28]
 800a788:	4619      	mov	r1, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	f7fe fbfa 	bl	8008f84 <clust2sect>
 800a790:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d104      	bne.n	800a7a2 <f_write+0x17e>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2202      	movs	r2, #2
 800a79c:	755a      	strb	r2, [r3, #21]
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e0b1      	b.n	800a906 <f_write+0x2e2>
			sect += csect;
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	0a5b      	lsrs	r3, r3, #9
 800a7ae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d03c      	beq.n	800a830 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	8952      	ldrh	r2, [r2, #10]
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d905      	bls.n	800a7d0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	895b      	ldrh	r3, [r3, #10]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	7858      	ldrb	r0, [r3, #1]
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	69f9      	ldr	r1, [r7, #28]
 800a7da:	f7fe f849 	bl	8008870 <disk_write>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <f_write+0x1ca>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	755a      	strb	r2, [r3, #21]
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e08b      	b.n	800a906 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6a1a      	ldr	r2, [r3, #32]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	6a3a      	ldr	r2, [r7, #32]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d915      	bls.n	800a828 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6a1a      	ldr	r2, [r3, #32]
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	025b      	lsls	r3, r3, #9
 800a80c:	69fa      	ldr	r2, [r7, #28]
 800a80e:	4413      	add	r3, r2
 800a810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a814:	4619      	mov	r1, r3
 800a816:	f7fe f8eb 	bl	80089f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	7d1b      	ldrb	r3, [r3, #20]
 800a81e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a822:	b2da      	uxtb	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	025b      	lsls	r3, r3, #9
 800a82c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a82e:	e03f      	b.n	800a8b0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	429a      	cmp	r2, r3
 800a838:	d016      	beq.n	800a868 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	699a      	ldr	r2, [r3, #24]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a842:	429a      	cmp	r2, r3
 800a844:	d210      	bcs.n	800a868 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	7858      	ldrb	r0, [r3, #1]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a850:	2301      	movs	r3, #1
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	f7fd ffec 	bl	8008830 <disk_read>
 800a858:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d004      	beq.n	800a868 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2201      	movs	r2, #1
 800a862:	755a      	strb	r2, [r3, #21]
 800a864:	2301      	movs	r3, #1
 800a866:	e04e      	b.n	800a906 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a876:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a87a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a87c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	429a      	cmp	r2, r3
 800a882:	d901      	bls.n	800a888 <f_write+0x264>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a896:	4413      	add	r3, r2
 800a898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a89a:	69f9      	ldr	r1, [r7, #28]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fe f8a7 	bl	80089f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	7d1b      	ldrb	r3, [r3, #20]
 800a8a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a8b0:	69fa      	ldr	r2, [r7, #28]
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b4:	4413      	add	r3, r2
 800a8b6:	61fb      	str	r3, [r7, #28]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	699a      	ldr	r2, [r3, #24]
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	441a      	add	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	619a      	str	r2, [r3, #24]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	bf38      	it	cc
 800a8d0:	461a      	movcc	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	60da      	str	r2, [r3, #12]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8dc:	441a      	add	r2, r3
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f47f aed4 	bne.w	800a69a <f_write+0x76>
 800a8f2:	e000      	b.n	800a8f6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a8f4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	7d1b      	ldrb	r3, [r3, #20]
 800a8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3730      	adds	r7, #48	@ 0x30
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b086      	sub	sp, #24
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f107 0208 	add.w	r2, r7, #8
 800a91c:	4611      	mov	r1, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fc4a 	bl	800a1b8 <validate>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d168      	bne.n	800aa00 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	7d1b      	ldrb	r3, [r3, #20]
 800a932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a936:	2b00      	cmp	r3, #0
 800a938:	d062      	beq.n	800aa00 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	7d1b      	ldrb	r3, [r3, #20]
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	da15      	bge.n	800a970 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	7858      	ldrb	r0, [r3, #1]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a1a      	ldr	r2, [r3, #32]
 800a952:	2301      	movs	r3, #1
 800a954:	f7fd ff8c 	bl	8008870 <disk_write>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <f_sync+0x54>
 800a95e:	2301      	movs	r3, #1
 800a960:	e04f      	b.n	800aa02 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	7d1b      	ldrb	r3, [r3, #20]
 800a966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a970:	f7fd fec0 	bl	80086f4 <get_fattime>
 800a974:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97c:	4619      	mov	r1, r3
 800a97e:	4610      	mov	r0, r2
 800a980:	f7fe fa64 	bl	8008e4c <move_window>
 800a984:	4603      	mov	r3, r0
 800a986:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d138      	bne.n	800aa00 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a992:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	330b      	adds	r3, #11
 800a998:	781a      	ldrb	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	330b      	adds	r3, #11
 800a99e:	f042 0220 	orr.w	r2, r2, #32
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	68f9      	ldr	r1, [r7, #12]
 800a9b2:	f7fe ff6e 	bl	8009892 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f103 021c 	add.w	r2, r3, #28
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	f7fd ffe8 	bl	8008998 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3316      	adds	r3, #22
 800a9cc:	6939      	ldr	r1, [r7, #16]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fd ffe2 	bl	8008998 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3312      	adds	r3, #18
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fd ffc1 	bl	8008962 <st_word>
					fs->wflag = 1;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fe fa5d 	bl	8008ea8 <sync_fs>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	7d1b      	ldrb	r3, [r3, #20]
 800a9f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aa00:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3718      	adds	r7, #24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff ff7b 	bl	800a90e <f_sync>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d118      	bne.n	800aa54 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f107 0208 	add.w	r2, r7, #8
 800aa28:	4611      	mov	r1, r2
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff fbc4 	bl	800a1b8 <validate>
 800aa30:	4603      	mov	r3, r0
 800aa32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10c      	bne.n	800aa54 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe f960 	bl	8008d04 <dec_lock>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b092      	sub	sp, #72	@ 0x48
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	60b9      	str	r1, [r7, #8]
 800aa68:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800aa6a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800aa6e:	f107 030c 	add.w	r3, r7, #12
 800aa72:	2200      	movs	r2, #0
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff f953 	bl	8009d20 <find_volume>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800aa80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f040 8099 	bne.w	800abbc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800aa8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800aa90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa92:	691a      	ldr	r2, [r3, #16]
 800aa94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	3b02      	subs	r3, #2
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d804      	bhi.n	800aaa8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800aa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa0:	691a      	ldr	r2, [r3, #16]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	601a      	str	r2, [r3, #0]
 800aaa6:	e089      	b.n	800abbc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d128      	bne.n	800ab06 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800aab4:	2302      	movs	r3, #2
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800aabc:	f107 0314 	add.w	r3, r7, #20
 800aac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fa7d 	bl	8008fc2 <get_fat>
 800aac8:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800aaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad0:	d103      	bne.n	800aada <f_getfree+0x7c>
 800aad2:	2301      	movs	r3, #1
 800aad4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aad8:	e063      	b.n	800aba2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800aada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d103      	bne.n	800aae8 <f_getfree+0x8a>
 800aae0:	2302      	movs	r3, #2
 800aae2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aae6:	e05c      	b.n	800aba2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800aae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d102      	bne.n	800aaf4 <f_getfree+0x96>
 800aaee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800aaf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d3db      	bcc.n	800aabc <f_getfree+0x5e>
 800ab04:	e04d      	b.n	800aba2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ab06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab16:	2300      	movs	r3, #0
 800ab18:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800ab1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d113      	bne.n	800ab48 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ab20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ab28:	4619      	mov	r1, r3
 800ab2a:	f7fe f98f 	bl	8008e4c <move_window>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800ab34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d131      	bne.n	800aba0 <f_getfree+0x142>
							p = fs->win;
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	3330      	adds	r3, #48	@ 0x30
 800ab40:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ab42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab46:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d10f      	bne.n	800ab70 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ab50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab52:	f7fd fecb 	bl	80088ec <ld_word>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d102      	bne.n	800ab62 <f_getfree+0x104>
 800ab5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab5e:	3301      	adds	r3, #1
 800ab60:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab64:	3302      	adds	r3, #2
 800ab66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6a:	3b02      	subs	r3, #2
 800ab6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab6e:	e010      	b.n	800ab92 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ab70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab72:	f7fd fed3 	bl	800891c <ld_dword>
 800ab76:	4603      	mov	r3, r0
 800ab78:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <f_getfree+0x128>
 800ab80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab82:	3301      	adds	r3, #1
 800ab84:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ab86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab88:	3304      	adds	r3, #4
 800ab8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab8e:	3b04      	subs	r3, #4
 800ab90:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ab92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab94:	3b01      	subs	r3, #1
 800ab96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1bd      	bne.n	800ab1a <f_getfree+0xbc>
 800ab9e:	e000      	b.n	800aba2 <f_getfree+0x144>
							if (res != FR_OK) break;
 800aba0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aba6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800aba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abac:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800abae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb0:	791a      	ldrb	r2, [r3, #4]
 800abb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb4:	f042 0201 	orr.w	r2, r2, #1
 800abb8:	b2d2      	uxtb	r2, r2
 800abba:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800abbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3748      	adds	r7, #72	@ 0x48
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	2b0a      	cmp	r3, #10
 800abd8:	d103      	bne.n	800abe2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800abda:	210d      	movs	r1, #13
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7ff fff3 	bl	800abc8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	db25      	blt.n	800ac3a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	60fa      	str	r2, [r7, #12]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	4413      	add	r3, r2
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b3c      	cmp	r3, #60	@ 0x3c
 800ac00:	dd12      	ble.n	800ac28 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f103 010c 	add.w	r1, r3, #12
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	f107 0308 	add.w	r3, r7, #8
 800ac12:	f7ff fd07 	bl	800a624 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d101      	bne.n	800ac22 <putc_bfd+0x5a>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e001      	b.n	800ac26 <putc_bfd+0x5e>
 800ac22:	f04f 33ff 	mov.w	r3, #4294967295
 800ac26:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	609a      	str	r2, [r3, #8]
 800ac38:	e000      	b.n	800ac3c <putc_bfd+0x74>
	if (i < 0) return;
 800ac3a:	bf00      	nop
}
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	db16      	blt.n	800ac80 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f103 010c 	add.w	r1, r3, #12
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	461a      	mov	r2, r3
 800ac62:	f107 030c 	add.w	r3, r7, #12
 800ac66:	f7ff fcdd 	bl	800a624 <f_write>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d107      	bne.n	800ac80 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d102      	bne.n	800ac80 <putc_flush+0x3e>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	e001      	b.n	800ac84 <putc_flush+0x42>
	return EOF;
 800ac80:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	605a      	str	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	609a      	str	r2, [r3, #8]
}
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b096      	sub	sp, #88	@ 0x58
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800acc0:	f107 030c 	add.w	r3, r7, #12
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff ffe0 	bl	800ac8c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800accc:	e009      	b.n	800ace2 <f_puts+0x2c>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	781a      	ldrb	r2, [r3, #0]
 800acd6:	f107 030c 	add.w	r3, r7, #12
 800acda:	4611      	mov	r1, r2
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff ff73 	bl	800abc8 <putc_bfd>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1f1      	bne.n	800acce <f_puts+0x18>
	return putc_flush(&pb);
 800acea:	f107 030c 	add.w	r3, r7, #12
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff ffa7 	bl	800ac42 <putc_flush>
 800acf4:	4603      	mov	r3, r0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3758      	adds	r7, #88	@ 0x58
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ad16:	4b1f      	ldr	r3, [pc, #124]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad18:	7a5b      	ldrb	r3, [r3, #9]
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d131      	bne.n	800ad84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ad20:	4b1c      	ldr	r3, [pc, #112]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad22:	7a5b      	ldrb	r3, [r3, #9]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	461a      	mov	r2, r3
 800ad28:	4b1a      	ldr	r3, [pc, #104]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ad2e:	4b19      	ldr	r3, [pc, #100]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad30:	7a5b      	ldrb	r3, [r3, #9]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	4a17      	ldr	r2, [pc, #92]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ad3e:	4b15      	ldr	r3, [pc, #84]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad40:	7a5b      	ldrb	r3, [r3, #9]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	461a      	mov	r2, r3
 800ad46:	4b13      	ldr	r3, [pc, #76]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad48:	4413      	add	r3, r2
 800ad4a:	79fa      	ldrb	r2, [r7, #7]
 800ad4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad4e:	4b11      	ldr	r3, [pc, #68]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad50:	7a5b      	ldrb	r3, [r3, #9]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	b2d1      	uxtb	r1, r2
 800ad58:	4a0e      	ldr	r2, [pc, #56]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad5a:	7251      	strb	r1, [r2, #9]
 800ad5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad5e:	7dbb      	ldrb	r3, [r7, #22]
 800ad60:	3330      	adds	r3, #48	@ 0x30
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	223a      	movs	r2, #58	@ 0x3a
 800ad6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	3302      	adds	r3, #2
 800ad74:	222f      	movs	r2, #47	@ 0x2f
 800ad76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	3303      	adds	r3, #3
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20000c2c 	.word	0x20000c2c

0800ad98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ada2:	2200      	movs	r2, #0
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff ffaa 	bl	800ad00 <FATFS_LinkDriverEx>
 800adac:	4603      	mov	r3, r0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <memset>:
 800adb6:	4402      	add	r2, r0
 800adb8:	4603      	mov	r3, r0
 800adba:	4293      	cmp	r3, r2
 800adbc:	d100      	bne.n	800adc0 <memset+0xa>
 800adbe:	4770      	bx	lr
 800adc0:	f803 1b01 	strb.w	r1, [r3], #1
 800adc4:	e7f9      	b.n	800adba <memset+0x4>
	...

0800adc8 <__libc_init_array>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	4d0d      	ldr	r5, [pc, #52]	@ (800ae00 <__libc_init_array+0x38>)
 800adcc:	4c0d      	ldr	r4, [pc, #52]	@ (800ae04 <__libc_init_array+0x3c>)
 800adce:	1b64      	subs	r4, r4, r5
 800add0:	10a4      	asrs	r4, r4, #2
 800add2:	2600      	movs	r6, #0
 800add4:	42a6      	cmp	r6, r4
 800add6:	d109      	bne.n	800adec <__libc_init_array+0x24>
 800add8:	4d0b      	ldr	r5, [pc, #44]	@ (800ae08 <__libc_init_array+0x40>)
 800adda:	4c0c      	ldr	r4, [pc, #48]	@ (800ae0c <__libc_init_array+0x44>)
 800addc:	f000 f818 	bl	800ae10 <_init>
 800ade0:	1b64      	subs	r4, r4, r5
 800ade2:	10a4      	asrs	r4, r4, #2
 800ade4:	2600      	movs	r6, #0
 800ade6:	42a6      	cmp	r6, r4
 800ade8:	d105      	bne.n	800adf6 <__libc_init_array+0x2e>
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	f855 3b04 	ldr.w	r3, [r5], #4
 800adf0:	4798      	blx	r3
 800adf2:	3601      	adds	r6, #1
 800adf4:	e7ee      	b.n	800add4 <__libc_init_array+0xc>
 800adf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adfa:	4798      	blx	r3
 800adfc:	3601      	adds	r6, #1
 800adfe:	e7f2      	b.n	800ade6 <__libc_init_array+0x1e>
 800ae00:	0800af7c 	.word	0x0800af7c
 800ae04:	0800af7c 	.word	0x0800af7c
 800ae08:	0800af7c 	.word	0x0800af7c
 800ae0c:	0800af80 	.word	0x0800af80

0800ae10 <_init>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr

0800ae1c <_fini>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	bf00      	nop
 800ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae22:	bc08      	pop	{r3}
 800ae24:	469e      	mov	lr, r3
 800ae26:	4770      	bx	lr
