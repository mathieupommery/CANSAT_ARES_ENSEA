
mainboardcansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a24  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08010c08  08010c08  00011c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011174  08011174  000131f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011174  08011174  00012174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801117c  0801117c  000131f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801117c  0801117c  0001217c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011180  08011180  00012180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08011184  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d4  200001f4  08011378  000131f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013c8  08011378  000133c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000270a8  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005324  00000000  00000000  0003a2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002148  00000000  00000000  0003f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019c5  00000000  00000000  00041738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260db  00000000  00000000  000430fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d3d4  00000000  00000000  000691d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7986  00000000  00000000  000965ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017df32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2b8  00000000  00000000  0017df78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00188230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010bec 	.word	0x08010bec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f8 	.word	0x200001f8
 800021c:	08010bec 	.word	0x08010bec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00d f932 	bl	800e2b6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b48      	ldr	r3, [pc, #288]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800105a:	4b46      	ldr	r3, [pc, #280]	@ (8001174 <MX_ADC1_Init+0x140>)
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b44      	ldr	r3, [pc, #272]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b42      	ldr	r3, [pc, #264]	@ (8001174 <MX_ADC1_Init+0x140>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001074:	4b3f      	ldr	r3, [pc, #252]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001076:	2201      	movs	r2, #1
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800107a:	4b3e      	ldr	r3, [pc, #248]	@ (8001174 <MX_ADC1_Init+0x140>)
 800107c:	2208      	movs	r2, #8
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b3c      	ldr	r3, [pc, #240]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001086:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001088:	2201      	movs	r2, #1
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800108c:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <MX_ADC1_Init+0x140>)
 800108e:	2204      	movs	r2, #4
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800109a:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <MX_ADC1_Init+0x140>)
 800109c:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010a2:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b2:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c0:	482c      	ldr	r0, [pc, #176]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010c2:	f002 faaf 	bl	8003624 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010cc:	f001 f957 	bl	800237e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	4826      	ldr	r0, [pc, #152]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010dc:	f003 fa1e 	bl	800451c <HAL_ADCEx_MultiModeConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010e6:	f001 f94a 	bl	800237e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010ea:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <MX_ADC1_Init+0x144>)
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ee:	2306      	movs	r3, #6
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010f2:	2307      	movs	r3, #7
 80010f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f6:	237f      	movs	r3, #127	@ 0x7f
 80010f8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fa:	2304      	movs	r3, #4
 80010fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	481b      	ldr	r0, [pc, #108]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001108:	f002 fcd8 	bl	8003abc <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001112:	f001 f934 	bl	800237e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001116:	4b19      	ldr	r3, [pc, #100]	@ (800117c <MX_ADC1_Init+0x148>)
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800111a:	230c      	movs	r3, #12
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4814      	ldr	r0, [pc, #80]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001124:	f002 fcca 	bl	8003abc <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800112e:	f001 f926 	bl	800237e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_ADC1_Init+0x14c>)
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001136:	2312      	movs	r3, #18
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001140:	f002 fcbc 	bl	8003abc <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800114a:	f001 f918 	bl	800237e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_ADC1_Init+0x150>)
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001152:	2318      	movs	r3, #24
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <MX_ADC1_Init+0x140>)
 800115c:	f002 fcae 	bl	8003abc <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001166:	f001 f90a 	bl	800237e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	@ 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000210 	.word	0x20000210
 8001178:	cb840000 	.word	0xcb840000
 800117c:	c3210000 	.word	0xc3210000
 8001180:	08600004 	.word	0x08600004
 8001184:	0c900008 	.word	0x0c900008

08001188 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b09a      	sub	sp, #104	@ 0x68
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2244      	movs	r2, #68	@ 0x44
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00d f884 	bl	800e2b6 <memset>
  if(adcHandle->Instance==ADC1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011b6:	d15f      	bne.n	8001278 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 f879 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011d4:	f001 f8d3 	bl	800237e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011d8:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <HAL_ADC_MspInit+0xf8>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	4a28      	ldr	r2, [pc, #160]	@ (8001280 <HAL_ADC_MspInit+0xf8>)
 80011de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e4:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <HAL_ADC_MspInit+0xf8>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <HAL_ADC_MspInit+0xf8>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a22      	ldr	r2, [pc, #136]	@ (8001280 <HAL_ADC_MspInit+0xf8>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <HAL_ADC_MspInit+0xf8>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001208:	2306      	movs	r3, #6
 800120a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120c:	2303      	movs	r3, #3
 800120e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f003 fe6f 	bl	8004f00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 8001224:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <HAL_ADC_MspInit+0x100>)
 8001226:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 800122a:	2205      	movs	r2, #5
 800122c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001240:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 8001242:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001246:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001248:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 800124a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800124e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 8001252:	2220      	movs	r2, #32
 8001254:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800125c:	4809      	ldr	r0, [pc, #36]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 800125e:	f003 fb11 	bl	8004884 <HAL_DMA_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001268:	f001 f889 	bl	800237e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 8001270:	655a      	str	r2, [r3, #84]	@ 0x54
 8001272:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_ADC_MspInit+0xfc>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001278:	bf00      	nop
 800127a:	3768      	adds	r7, #104	@ 0x68
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	2000027c 	.word	0x2000027c
 8001288:	40020030 	.word	0x40020030
 800128c:	00000000 	.word	0x00000000

08001290 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001290:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012a2:	f040 80cd 	bne.w	8001440 <HAL_ADC_ConvCpltCallback+0x1b0>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80012a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001460 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f962 	bl	8000574 <__aeabi_i2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	a166      	add	r1, pc, #408	@ (adr r1, 8001450 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80012b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ba:	f7ff faef 	bl	800089c <__aeabi_ddiv>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fcb7 	bl	8000c38 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a65      	ldr	r2, [pc, #404]	@ (8001464 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80012ce:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80012d0:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80012d2:	ed93 7a00 	vldr	s14, [r3]
 80012d6:	4b65      	ldr	r3, [pc, #404]	@ (800146c <HAL_ADC_ConvCpltCallback+0x1dc>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e0:	ee17 0a90 	vmov	r0, s15
 80012e4:	f7ff f958 	bl	8000598 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f04f 0000 	mov.w	r0, #0
 80012f0:	495f      	ldr	r1, [pc, #380]	@ (8001470 <HAL_ADC_ConvCpltCallback+0x1e0>)
 80012f2:	f7ff fad3 	bl	800089c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4690      	mov	r8, r2
 80012fc:	4699      	mov	r9, r3
 80012fe:	4b58      	ldr	r3, [pc, #352]	@ (8001460 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001300:	885b      	ldrh	r3, [r3, #2]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f936 	bl	8000574 <__aeabi_i2d>
 8001308:	4604      	mov	r4, r0
 800130a:	460d      	mov	r5, r1
 800130c:	4b55      	ldr	r3, [pc, #340]	@ (8001464 <HAL_ADC_ConvCpltCallback+0x1d4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f941 	bl	8000598 <__aeabi_f2d>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b56      	ldr	r3, [pc, #344]	@ (8001474 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800131c:	f7ff fabe 	bl	800089c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4620      	mov	r0, r4
 8001326:	4629      	mov	r1, r5
 8001328:	f7ff f98e 	bl	8000648 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4614      	mov	r4, r2
 8001332:	461d      	mov	r5, r3
 8001334:	4b4d      	ldr	r3, [pc, #308]	@ (800146c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f92d 	bl	8000598 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7fe ffc7 	bl	80002d8 <__aeabi_dsub>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4640      	mov	r0, r8
 8001350:	4649      	mov	r1, r9
 8001352:	f7ff f979 	bl	8000648 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc6b 	bl	8000c38 <__aeabi_d2f>
 8001362:	ee07 0a10 	vmov	s14, r0
 8001366:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	4b42      	ldr	r3, [pc, #264]	@ (8001478 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001370:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 8001374:	4b3a      	ldr	r3, [pc, #232]	@ (8001460 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001376:	88db      	ldrh	r3, [r3, #6]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8fb 	bl	8000574 <__aeabi_i2d>
 800137e:	a336      	add	r3, pc, #216	@ (adr r3, 8001458 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	f7ff fa8a 	bl	800089c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001396:	f7ff f957 	bl	8000648 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4614      	mov	r4, r2
 80013a0:	461d      	mov	r5, r3
 80013a2:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8f6 	bl	8000598 <__aeabi_f2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7ff f948 	bl	8000648 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fc3a 	bl	8000c38 <__aeabi_d2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a2d      	ldr	r2, [pc, #180]	@ (800147c <HAL_ADC_ConvCpltCallback+0x1ec>)
 80013c8:	6013      	str	r3, [r2, #0]
		current=(float) 60.0*(rawADCdata[2]/4095.0)*vrefint;
 80013ca:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8d0 	bl	8000574 <__aeabi_i2d>
 80013d4:	a320      	add	r3, pc, #128	@ (adr r3, 8001458 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff fa5f 	bl	800089c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80013ec:	f7ff f92c 	bl	8000648 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4614      	mov	r4, r2
 80013f6:	461d      	mov	r5, r3
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f8cb 	bl	8000598 <__aeabi_f2d>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4620      	mov	r0, r4
 8001408:	4629      	mov	r1, r5
 800140a:	f7ff f91d 	bl	8000648 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fc0f 	bl	8000c38 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4a19      	ldr	r2, [pc, #100]	@ (8001484 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800141e:	6013      	str	r3, [r2, #0]
		power=(float) vbat*current;
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001432:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 4);
 8001436:	2204      	movs	r2, #4
 8001438:	4909      	ldr	r1, [pc, #36]	@ (8001460 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800143a:	4814      	ldr	r0, [pc, #80]	@ (800148c <HAL_ADC_ConvCpltCallback+0x1fc>)
 800143c:	f002 fa76 	bl	800392c <HAL_ADC_Start_DMA>
//		vexternalsensor=(float) (rawADCdata[4]/4095.0)*vrefint;
//		HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
//
//	}

}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	d70a3d70 	.word	0xd70a3d70
 8001454:	40b36323 	.word	0x40b36323
 8001458:	00000000 	.word	0x00000000
 800145c:	40affe00 	.word	0x40affe00
 8001460:	20000bf4 	.word	0x20000bf4
 8001464:	20000c04 	.word	0x20000c04
 8001468:	20000000 	.word	0x20000000
 800146c:	20000004 	.word	0x20000004
 8001470:	40590000 	.word	0x40590000
 8001474:	40080000 	.word	0x40080000
 8001478:	20000c00 	.word	0x20000c00
 800147c:	20000c08 	.word	0x20000c08
 8001480:	404e0000 	.word	0x404e0000
 8001484:	20000c0c 	.word	0x20000c0c
 8001488:	20000c10 	.word	0x20000c10
 800148c:	20000210 	.word	0x20000210

08001490 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_DMA_Init+0x80>)
 8001498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149a:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <MX_DMA_Init+0x80>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <MX_DMA_Init+0x80>)
 80014a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <MX_DMA_Init+0x80>)
 80014b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b2:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <MX_DMA_Init+0x80>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MX_DMA_Init+0x80>)
 80014bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	200b      	movs	r0, #11
 80014cc:	f003 f9a5 	bl	800481a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014d0:	200b      	movs	r0, #11
 80014d2:	f003 f9bc 	bl	800484e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	200c      	movs	r0, #12
 80014dc:	f003 f99d 	bl	800481a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014e0:	200c      	movs	r0, #12
 80014e2:	f003 f9b4 	bl	800484e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	200d      	movs	r0, #13
 80014ec:	f003 f995 	bl	800481a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014f0:	200d      	movs	r0, #13
 80014f2:	f003 f9ac 	bl	800484e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	200e      	movs	r0, #14
 80014fc:	f003 f98d 	bl	800481a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001500:	200e      	movs	r0, #14
 8001502:	f003 f9a4 	bl	800484e <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <SELECT+0x14>)
 800151e:	f003 fe71 	bl	8005204 <HAL_GPIO_WritePin>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	48000800 	.word	0x48000800

0800152c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2110      	movs	r1, #16
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DESELECT+0x14>)
 8001536:	f003 fe65 	bl	8005204 <HAL_GPIO_WritePin>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	48000800 	.word	0x48000800

08001544 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800154e:	bf00      	nop
 8001550:	4808      	ldr	r0, [pc, #32]	@ (8001574 <SPI_TxByte+0x30>)
 8001552:	f005 fce5 	bl	8006f20 <HAL_SPI_GetState>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	d1f9      	bne.n	8001550 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800155c:	1df9      	adds	r1, r7, #7
 800155e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001562:	2201      	movs	r2, #1
 8001564:	4803      	ldr	r0, [pc, #12]	@ (8001574 <SPI_TxByte+0x30>)
 8001566:	f005 f946 	bl	80067f6 <HAL_SPI_Transmit>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000c14 	.word	0x20000c14

08001578 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800157e:	23ff      	movs	r3, #255	@ 0xff
 8001580:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001586:	bf00      	nop
 8001588:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <SPI_RxByte+0x38>)
 800158a:	f005 fcc9 	bl	8006f20 <HAL_SPI_GetState>
 800158e:	4603      	mov	r3, r0
 8001590:	2b01      	cmp	r3, #1
 8001592:	d1f9      	bne.n	8001588 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001594:	1dba      	adds	r2, r7, #6
 8001596:	1df9      	adds	r1, r7, #7
 8001598:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2301      	movs	r3, #1
 80015a0:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <SPI_RxByte+0x38>)
 80015a2:	f005 fa9e 	bl	8006ae2 <HAL_SPI_TransmitReceive>

  return data;
 80015a6:	79bb      	ldrb	r3, [r7, #6]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000c14 	.word	0x20000c14

080015b4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80015bc:	f7ff ffdc 	bl	8001578 <SPI_RxByte>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	701a      	strb	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <SD_ReadyWait+0x34>)
 80015d8:	2232      	movs	r2, #50	@ 0x32
 80015da:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80015dc:	f7ff ffcc 	bl	8001578 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80015e0:	f7ff ffca 	bl	8001578 <SPI_RxByte>
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2bff      	cmp	r3, #255	@ 0xff
 80015ec:	d004      	beq.n	80015f8 <SD_ReadyWait+0x28>
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <SD_ReadyWait+0x34>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f3      	bne.n	80015e0 <SD_ReadyWait+0x10>

  return res;
 80015f8:	79fb      	ldrb	r3, [r7, #7]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200002dd 	.word	0x200002dd

08001608 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800160e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001612:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001614:	f7ff ff8a 	bl	800152c <DESELECT>

  for(int i = 0; i < 10; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	e005      	b.n	800162a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800161e:	20ff      	movs	r0, #255	@ 0xff
 8001620:	f7ff ff90 	bl	8001544 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	3301      	adds	r3, #1
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b09      	cmp	r3, #9
 800162e:	ddf6      	ble.n	800161e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001630:	f7ff ff70 	bl	8001514 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001634:	2340      	movs	r3, #64	@ 0x40
 8001636:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001648:	2395      	movs	r3, #149	@ 0x95
 800164a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e009      	b.n	8001666 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001652:	1d3a      	adds	r2, r7, #4
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff72 	bl	8001544 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b05      	cmp	r3, #5
 800166a:	ddf2      	ble.n	8001652 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800166c:	e002      	b.n	8001674 <SD_PowerOn+0x6c>
  {
    Count--;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3b01      	subs	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001674:	f7ff ff80 	bl	8001578 <SPI_RxByte>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d002      	beq.n	8001684 <SD_PowerOn+0x7c>
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f4      	bne.n	800166e <SD_PowerOn+0x66>
  }

  DESELECT();
 8001684:	f7ff ff52 	bl	800152c <DESELECT>
  SPI_TxByte(0XFF);
 8001688:	20ff      	movs	r0, #255	@ 0xff
 800168a:	f7ff ff5b 	bl	8001544 <SPI_TxByte>

  PowerFlag = 1;
 800168e:	4b03      	ldr	r3, [pc, #12]	@ (800169c <SD_PowerOn+0x94>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002df 	.word	0x200002df

080016a0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <SD_PowerOff+0x14>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	200002df 	.word	0x200002df

080016b8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80016bc:	4b03      	ldr	r3, [pc, #12]	@ (80016cc <SD_CheckPower+0x14>)
 80016be:	781b      	ldrb	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200002df 	.word	0x200002df

080016d0 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80016da:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <SD_RxDataBlock+0x68>)
 80016dc:	220a      	movs	r2, #10
 80016de:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80016e0:	f7ff ff4a 	bl	8001578 <SPI_RxByte>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2bff      	cmp	r3, #255	@ 0xff
 80016ec:	d104      	bne.n	80016f8 <SD_RxDataBlock+0x28>
 80016ee:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <SD_RxDataBlock+0x68>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f3      	bne.n	80016e0 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80016fc:	d001      	beq.n	8001702 <SD_RxDataBlock+0x32>
    return FALSE;
 80016fe:	2300      	movs	r3, #0
 8001700:	e016      	b.n	8001730 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff53 	bl	80015b4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff4d 	bl	80015b4 <SPI_RxBytePtr>
  } while(btr -= 2);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	3b02      	subs	r3, #2
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1ed      	bne.n	8001702 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001726:	f7ff ff27 	bl	8001578 <SPI_RxByte>
  SPI_RxByte();
 800172a:	f7ff ff25 	bl	8001578 <SPI_RxByte>

  return TRUE;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200002dc 	.word	0x200002dc

0800173c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800174c:	f7ff ff40 	bl	80015d0 <SD_ReadyWait>
 8001750:	4603      	mov	r3, r0
 8001752:	2bff      	cmp	r3, #255	@ 0xff
 8001754:	d001      	beq.n	800175a <SD_TxDataBlock+0x1e>
    return FALSE;
 8001756:	2300      	movs	r3, #0
 8001758:	e040      	b.n	80017dc <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fef1 	bl	8001544 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	2bfd      	cmp	r3, #253	@ 0xfd
 8001766:	d031      	beq.n	80017cc <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fee5 	bl	8001544 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fede 	bl	8001544 <SPI_TxByte>
    } while (--wc);
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	3b01      	subs	r3, #1
 800178c:	73bb      	strb	r3, [r7, #14]
 800178e:	7bbb      	ldrb	r3, [r7, #14]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1eb      	bne.n	800176c <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001794:	f7ff fef0 	bl	8001578 <SPI_RxByte>
    SPI_RxByte();
 8001798:	f7ff feee 	bl	8001578 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800179c:	e00b      	b.n	80017b6 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800179e:	f7ff feeb 	bl	8001578 <SPI_RxByte>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d006      	beq.n	80017be <SD_TxDataBlock+0x82>
        break;

      i++;
 80017b0:	7b7b      	ldrb	r3, [r7, #13]
 80017b2:	3301      	adds	r3, #1
 80017b4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80017b6:	7b7b      	ldrb	r3, [r7, #13]
 80017b8:	2b40      	cmp	r3, #64	@ 0x40
 80017ba:	d9f0      	bls.n	800179e <SD_TxDataBlock+0x62>
 80017bc:	e000      	b.n	80017c0 <SD_TxDataBlock+0x84>
        break;
 80017be:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80017c0:	bf00      	nop
 80017c2:	f7ff fed9 	bl	8001578 <SPI_RxByte>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0fa      	beq.n	80017c2 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d101      	bne.n	80017da <SD_TxDataBlock+0x9e>
    return TRUE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80017f0:	f7ff feee 	bl	80015d0 <SD_ReadyWait>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2bff      	cmp	r3, #255	@ 0xff
 80017f8:	d001      	beq.n	80017fe <SD_SendCmd+0x1a>
    return 0xFF;
 80017fa:	23ff      	movs	r3, #255	@ 0xff
 80017fc:	e040      	b.n	8001880 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fe9f 	bl	8001544 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	0e1b      	lsrs	r3, r3, #24
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fe99 	bl	8001544 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	0c1b      	lsrs	r3, r3, #16
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fe93 	bl	8001544 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe8d 	bl	8001544 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fe88 	bl	8001544 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b40      	cmp	r3, #64	@ 0x40
 800183c:	d101      	bne.n	8001842 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800183e:	2395      	movs	r3, #149	@ 0x95
 8001840:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b48      	cmp	r3, #72	@ 0x48
 8001846:	d101      	bne.n	800184c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001848:	2387      	movs	r3, #135	@ 0x87
 800184a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fe78 	bl	8001544 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2b4c      	cmp	r3, #76	@ 0x4c
 8001858:	d101      	bne.n	800185e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800185a:	f7ff fe8d 	bl	8001578 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800185e:	230a      	movs	r3, #10
 8001860:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001862:	f7ff fe89 	bl	8001578 <SPI_RxByte>
 8001866:	4603      	mov	r3, r0
 8001868:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800186a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800186e:	2b00      	cmp	r3, #0
 8001870:	da05      	bge.n	800187e <SD_SendCmd+0x9a>
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	3b01      	subs	r3, #1
 8001876:	73bb      	strb	r3, [r7, #14]
 8001878:	7bbb      	ldrb	r3, [r7, #14]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f1      	bne.n	8001862 <SD_SendCmd+0x7e>

  return res;
 800187e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001898:	2301      	movs	r3, #1
 800189a:	e0d5      	b.n	8001a48 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800189c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a50 <SD_disk_initialize+0x1c8>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <SD_disk_initialize+0x2a>
    return Stat;
 80018aa:	4b69      	ldr	r3, [pc, #420]	@ (8001a50 <SD_disk_initialize+0x1c8>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	e0ca      	b.n	8001a48 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80018b2:	f7ff fea9 	bl	8001608 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80018b6:	f7ff fe2d 	bl	8001514 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80018be:	2100      	movs	r1, #0
 80018c0:	2040      	movs	r0, #64	@ 0x40
 80018c2:	f7ff ff8f 	bl	80017e4 <SD_SendCmd>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	f040 80a5 	bne.w	8001a18 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80018ce:	4b61      	ldr	r3, [pc, #388]	@ (8001a54 <SD_disk_initialize+0x1cc>)
 80018d0:	2264      	movs	r2, #100	@ 0x64
 80018d2:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80018d4:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80018d8:	2048      	movs	r0, #72	@ 0x48
 80018da:	f7ff ff83 	bl	80017e4 <SD_SendCmd>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d158      	bne.n	8001996 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e00c      	b.n	8001904 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80018ea:	7bfc      	ldrb	r4, [r7, #15]
 80018ec:	f7ff fe44 	bl	8001578 <SPI_RxByte>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	f104 0310 	add.w	r3, r4, #16
 80018f8:	443b      	add	r3, r7
 80018fa:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	3301      	adds	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d9ef      	bls.n	80018ea <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800190a:	7abb      	ldrb	r3, [r7, #10]
 800190c:	2b01      	cmp	r3, #1
 800190e:	f040 8083 	bne.w	8001a18 <SD_disk_initialize+0x190>
 8001912:	7afb      	ldrb	r3, [r7, #11]
 8001914:	2baa      	cmp	r3, #170	@ 0xaa
 8001916:	d17f      	bne.n	8001a18 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001918:	2100      	movs	r1, #0
 800191a:	2077      	movs	r0, #119	@ 0x77
 800191c:	f7ff ff62 	bl	80017e4 <SD_SendCmd>
 8001920:	4603      	mov	r3, r0
 8001922:	2b01      	cmp	r3, #1
 8001924:	d807      	bhi.n	8001936 <SD_disk_initialize+0xae>
 8001926:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800192a:	2069      	movs	r0, #105	@ 0x69
 800192c:	f7ff ff5a 	bl	80017e4 <SD_SendCmd>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001936:	4b47      	ldr	r3, [pc, #284]	@ (8001a54 <SD_disk_initialize+0x1cc>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1eb      	bne.n	8001918 <SD_disk_initialize+0x90>
 8001940:	e000      	b.n	8001944 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001942:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001944:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <SD_disk_initialize+0x1cc>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d064      	beq.n	8001a18 <SD_disk_initialize+0x190>
 800194e:	2100      	movs	r1, #0
 8001950:	207a      	movs	r0, #122	@ 0x7a
 8001952:	f7ff ff47 	bl	80017e4 <SD_SendCmd>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d15d      	bne.n	8001a18 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e00c      	b.n	800197c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001962:	7bfc      	ldrb	r4, [r7, #15]
 8001964:	f7ff fe08 	bl	8001578 <SPI_RxByte>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	f104 0310 	add.w	r3, r4, #16
 8001970:	443b      	add	r3, r7
 8001972:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	3301      	adds	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d9ef      	bls.n	8001962 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001982:	7a3b      	ldrb	r3, [r7, #8]
 8001984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SD_disk_initialize+0x108>
 800198c:	2306      	movs	r3, #6
 800198e:	e000      	b.n	8001992 <SD_disk_initialize+0x10a>
 8001990:	2302      	movs	r3, #2
 8001992:	73bb      	strb	r3, [r7, #14]
 8001994:	e040      	b.n	8001a18 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001996:	2100      	movs	r1, #0
 8001998:	2077      	movs	r0, #119	@ 0x77
 800199a:	f7ff ff23 	bl	80017e4 <SD_SendCmd>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d808      	bhi.n	80019b6 <SD_disk_initialize+0x12e>
 80019a4:	2100      	movs	r1, #0
 80019a6:	2069      	movs	r0, #105	@ 0x69
 80019a8:	f7ff ff1c 	bl	80017e4 <SD_SendCmd>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d801      	bhi.n	80019b6 <SD_disk_initialize+0x12e>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e000      	b.n	80019b8 <SD_disk_initialize+0x130>
 80019b6:	2301      	movs	r3, #1
 80019b8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80019ba:	7bbb      	ldrb	r3, [r7, #14]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d10e      	bne.n	80019de <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80019c0:	2100      	movs	r1, #0
 80019c2:	2077      	movs	r0, #119	@ 0x77
 80019c4:	f7ff ff0e 	bl	80017e4 <SD_SendCmd>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d80e      	bhi.n	80019ec <SD_disk_initialize+0x164>
 80019ce:	2100      	movs	r1, #0
 80019d0:	2069      	movs	r0, #105	@ 0x69
 80019d2:	f7ff ff07 	bl	80017e4 <SD_SendCmd>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d107      	bne.n	80019ec <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80019dc:	e00d      	b.n	80019fa <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80019de:	2100      	movs	r1, #0
 80019e0:	2041      	movs	r0, #65	@ 0x41
 80019e2:	f7ff feff 	bl	80017e4 <SD_SendCmd>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80019ec:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <SD_disk_initialize+0x1cc>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1e1      	bne.n	80019ba <SD_disk_initialize+0x132>
 80019f6:	e000      	b.n	80019fa <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80019f8:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <SD_disk_initialize+0x1cc>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <SD_disk_initialize+0x18c>
 8001a04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a08:	2050      	movs	r0, #80	@ 0x50
 8001a0a:	f7ff feeb 	bl	80017e4 <SD_SendCmd>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001a18:	4a0f      	ldr	r2, [pc, #60]	@ (8001a58 <SD_disk_initialize+0x1d0>)
 8001a1a:	7bbb      	ldrb	r3, [r7, #14]
 8001a1c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001a1e:	f7ff fd85 	bl	800152c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001a22:	f7ff fda9 	bl	8001578 <SPI_RxByte>

  if (type)
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <SD_disk_initialize+0x1c8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <SD_disk_initialize+0x1c8>)
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	e001      	b.n	8001a42 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001a3e:	f7ff fe2f 	bl	80016a0 <SD_PowerOff>
  }

  return Stat;
 8001a42:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <SD_disk_initialize+0x1c8>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2db      	uxtb	r3, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}
 8001a50:	20000008 	.word	0x20000008
 8001a54:	200002dc 	.word	0x200002dc
 8001a58:	200002de 	.word	0x200002de

08001a5c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e002      	b.n	8001a76 <SD_disk_status+0x1a>

  return Stat;
 8001a70:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <SD_disk_status+0x28>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000008 	.word	0x20000008

08001a88 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <SD_disk_read+0x1c>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <SD_disk_read+0x20>
    return RES_PARERR;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e051      	b.n	8001b4c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <SD_disk_read+0xcc>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e048      	b.n	8001b4c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001aba:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <SD_disk_read+0xd0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	025b      	lsls	r3, r3, #9
 8001aca:	607b      	str	r3, [r7, #4]

  SELECT();
 8001acc:	f7ff fd22 	bl	8001514 <SELECT>

  if (count == 1)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d111      	bne.n	8001afa <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	2051      	movs	r0, #81	@ 0x51
 8001ada:	f7ff fe83 	bl	80017e4 <SD_SendCmd>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d129      	bne.n	8001b38 <SD_disk_read+0xb0>
 8001ae4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ae8:	68b8      	ldr	r0, [r7, #8]
 8001aea:	f7ff fdf1 	bl	80016d0 <SD_RxDataBlock>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d021      	beq.n	8001b38 <SD_disk_read+0xb0>
      count = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	e01e      	b.n	8001b38 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	2052      	movs	r0, #82	@ 0x52
 8001afe:	f7ff fe71 	bl	80017e4 <SD_SendCmd>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d117      	bne.n	8001b38 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001b08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f7ff fddf 	bl	80016d0 <SD_RxDataBlock>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00a      	beq.n	8001b2e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001b1e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ed      	bne.n	8001b08 <SD_disk_read+0x80>
 8001b2c:	e000      	b.n	8001b30 <SD_disk_read+0xa8>
          break;
 8001b2e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001b30:	2100      	movs	r1, #0
 8001b32:	204c      	movs	r0, #76	@ 0x4c
 8001b34:	f7ff fe56 	bl	80017e4 <SD_SendCmd>
    }
  }

  DESELECT();
 8001b38:	f7ff fcf8 	bl	800152c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001b3c:	f7ff fd1c 	bl	8001578 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000008 	.word	0x20000008
 8001b58:	200002de 	.word	0x200002de

08001b5c <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <SD_disk_write+0x1c>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <SD_disk_write+0x20>
    return RES_PARERR;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	e06b      	b.n	8001c54 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001b7c:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <SD_disk_write+0x100>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e062      	b.n	8001c54 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001b8e:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <SD_disk_write+0x100>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e059      	b.n	8001c54 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <SD_disk_write+0x104>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	025b      	lsls	r3, r3, #9
 8001bb0:	607b      	str	r3, [r7, #4]

  SELECT();
 8001bb2:	f7ff fcaf 	bl	8001514 <SELECT>

  if (count == 1)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d110      	bne.n	8001bde <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	2058      	movs	r0, #88	@ 0x58
 8001bc0:	f7ff fe10 	bl	80017e4 <SD_SendCmd>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d13a      	bne.n	8001c40 <SD_disk_write+0xe4>
 8001bca:	21fe      	movs	r1, #254	@ 0xfe
 8001bcc:	68b8      	ldr	r0, [r7, #8]
 8001bce:	f7ff fdb5 	bl	800173c <SD_TxDataBlock>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d033      	beq.n	8001c40 <SD_disk_write+0xe4>
      count = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	e030      	b.n	8001c40 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <SD_disk_write+0x104>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001bea:	2100      	movs	r1, #0
 8001bec:	2077      	movs	r0, #119	@ 0x77
 8001bee:	f7ff fdf9 	bl	80017e4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001bf2:	6839      	ldr	r1, [r7, #0]
 8001bf4:	2057      	movs	r0, #87	@ 0x57
 8001bf6:	f7ff fdf5 	bl	80017e4 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	2059      	movs	r0, #89	@ 0x59
 8001bfe:	f7ff fdf1 	bl	80017e4 <SD_SendCmd>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d11b      	bne.n	8001c40 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001c08:	21fc      	movs	r1, #252	@ 0xfc
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f7ff fd96 	bl	800173c <SD_TxDataBlock>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00a      	beq.n	8001c2c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001c1c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ee      	bne.n	8001c08 <SD_disk_write+0xac>
 8001c2a:	e000      	b.n	8001c2e <SD_disk_write+0xd2>
          break;
 8001c2c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001c2e:	21fd      	movs	r1, #253	@ 0xfd
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fd83 	bl	800173c <SD_TxDataBlock>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <SD_disk_write+0xe4>
      {
        count = 1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001c40:	f7ff fc74 	bl	800152c <DESELECT>
  SPI_RxByte();
 8001c44:	f7ff fc98 	bl	8001578 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	200002de 	.word	0x200002de

08001c64 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b08b      	sub	sp, #44	@ 0x2c
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	603a      	str	r2, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	460b      	mov	r3, r1
 8001c72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	e119      	b.n	8001eb6 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d129      	bne.n	8001ce2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d017      	beq.n	8001cc6 <SD_disk_ioctl+0x62>
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	dc1f      	bgt.n	8001cda <SD_disk_ioctl+0x76>
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <SD_disk_ioctl+0x40>
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d00b      	beq.n	8001cba <SD_disk_ioctl+0x56>
 8001ca2:	e01a      	b.n	8001cda <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001ca4:	f7ff fd08 	bl	80016b8 <SD_CheckPower>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001cae:	f7ff fcf7 	bl	80016a0 <SD_PowerOff>
      res = RES_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001cb8:	e0fb      	b.n	8001eb2 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001cba:	f7ff fca5 	bl	8001608 <SD_PowerOn>
      res = RES_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001cc4:	e0f5      	b.n	8001eb2 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	1c5c      	adds	r4, r3, #1
 8001cca:	f7ff fcf5 	bl	80016b8 <SD_CheckPower>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001cd8:	e0eb      	b.n	8001eb2 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ce0:	e0e7      	b.n	8001eb2 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001ce2:	4b77      	ldr	r3, [pc, #476]	@ (8001ec0 <SD_disk_ioctl+0x25c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0e0      	b.n	8001eb6 <SD_disk_ioctl+0x252>

    SELECT();
 8001cf4:	f7ff fc0e 	bl	8001514 <SELECT>

    switch (ctrl)
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	2b0d      	cmp	r3, #13
 8001cfc:	f200 80ca 	bhi.w	8001e94 <SD_disk_ioctl+0x230>
 8001d00:	a201      	add	r2, pc, #4	@ (adr r2, 8001d08 <SD_disk_ioctl+0xa4>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001dff 	.word	0x08001dff
 8001d0c:	08001d41 	.word	0x08001d41
 8001d10:	08001def 	.word	0x08001def
 8001d14:	08001e95 	.word	0x08001e95
 8001d18:	08001e95 	.word	0x08001e95
 8001d1c:	08001e95 	.word	0x08001e95
 8001d20:	08001e95 	.word	0x08001e95
 8001d24:	08001e95 	.word	0x08001e95
 8001d28:	08001e95 	.word	0x08001e95
 8001d2c:	08001e95 	.word	0x08001e95
 8001d30:	08001e95 	.word	0x08001e95
 8001d34:	08001e11 	.word	0x08001e11
 8001d38:	08001e35 	.word	0x08001e35
 8001d3c:	08001e59 	.word	0x08001e59
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001d40:	2100      	movs	r1, #0
 8001d42:	2049      	movs	r0, #73	@ 0x49
 8001d44:	f7ff fd4e 	bl	80017e4 <SD_SendCmd>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80a6 	bne.w	8001e9c <SD_disk_ioctl+0x238>
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2110      	movs	r1, #16
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fcba 	bl	80016d0 <SD_RxDataBlock>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 809c 	beq.w	8001e9c <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8001d64:	7b3b      	ldrb	r3, [r7, #12]
 8001d66:	099b      	lsrs	r3, r3, #6
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10d      	bne.n	8001d8a <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001d6e:	7d7b      	ldrb	r3, [r7, #21]
 8001d70:	461a      	mov	r2, r3
 8001d72:	7d3b      	ldrb	r3, [r7, #20]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001d80:	8bfb      	ldrh	r3, [r7, #30]
 8001d82:	029a      	lsls	r2, r3, #10
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e02d      	b.n	8001de6 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001d8a:	7c7b      	ldrb	r3, [r7, #17]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	7dbb      	ldrb	r3, [r7, #22]
 8001d94:	09db      	lsrs	r3, r3, #7
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	7d7b      	ldrb	r3, [r7, #21]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f003 0306 	and.w	r3, r3, #6
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	3302      	adds	r3, #2
 8001dae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001db2:	7d3b      	ldrb	r3, [r7, #20]
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	7cfb      	ldrb	r3, [r7, #19]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	7cbb      	ldrb	r3, [r7, #18]
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001dd8:	8bfa      	ldrh	r2, [r7, #30]
 8001dda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001dde:	3b09      	subs	r3, #9
 8001de0:	409a      	lsls	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001dec:	e056      	b.n	8001e9c <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001dfc:	e055      	b.n	8001eaa <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001dfe:	f7ff fbe7 	bl	80015d0 <SD_ReadyWait>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2bff      	cmp	r3, #255	@ 0xff
 8001e06:	d14b      	bne.n	8001ea0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001e0e:	e047      	b.n	8001ea0 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001e10:	2100      	movs	r1, #0
 8001e12:	2049      	movs	r0, #73	@ 0x49
 8001e14:	f7ff fce6 	bl	80017e4 <SD_SendCmd>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d142      	bne.n	8001ea4 <SD_disk_ioctl+0x240>
 8001e1e:	2110      	movs	r1, #16
 8001e20:	6a38      	ldr	r0, [r7, #32]
 8001e22:	f7ff fc55 	bl	80016d0 <SD_RxDataBlock>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d03b      	beq.n	8001ea4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001e32:	e037      	b.n	8001ea4 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001e34:	2100      	movs	r1, #0
 8001e36:	204a      	movs	r0, #74	@ 0x4a
 8001e38:	f7ff fcd4 	bl	80017e4 <SD_SendCmd>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d132      	bne.n	8001ea8 <SD_disk_ioctl+0x244>
 8001e42:	2110      	movs	r1, #16
 8001e44:	6a38      	ldr	r0, [r7, #32]
 8001e46:	f7ff fc43 	bl	80016d0 <SD_RxDataBlock>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d02b      	beq.n	8001ea8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001e56:	e027      	b.n	8001ea8 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	207a      	movs	r0, #122	@ 0x7a
 8001e5c:	f7ff fcc2 	bl	80017e4 <SD_SendCmd>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d116      	bne.n	8001e94 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001e6c:	e00b      	b.n	8001e86 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001e6e:	6a3c      	ldr	r4, [r7, #32]
 8001e70:	1c63      	adds	r3, r4, #1
 8001e72:	623b      	str	r3, [r7, #32]
 8001e74:	f7ff fb80 	bl	8001578 <SPI_RxByte>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e80:	3301      	adds	r3, #1
 8001e82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001e86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d9ef      	bls.n	8001e6e <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8001e94:	2304      	movs	r3, #4
 8001e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e9a:	e006      	b.n	8001eaa <SD_disk_ioctl+0x246>
      break;
 8001e9c:	bf00      	nop
 8001e9e:	e004      	b.n	8001eaa <SD_disk_ioctl+0x246>
      break;
 8001ea0:	bf00      	nop
 8001ea2:	e002      	b.n	8001eaa <SD_disk_ioctl+0x246>
      break;
 8001ea4:	bf00      	nop
 8001ea6:	e000      	b.n	8001eaa <SD_disk_ioctl+0x246>
      break;
 8001ea8:	bf00      	nop
    }

    DESELECT();
 8001eaa:	f7ff fb3f 	bl	800152c <DESELECT>
    SPI_RxByte();
 8001eae:	f7ff fb63 	bl	8001578 <SPI_RxByte>
  }

  return res;
 8001eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	372c      	adds	r7, #44	@ 0x2c
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eda:	4b3c      	ldr	r3, [pc, #240]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	4a3b      	ldr	r2, [pc, #236]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee6:	4b39      	ldr	r3, [pc, #228]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	4a35      	ldr	r2, [pc, #212]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001efe:	4b33      	ldr	r3, [pc, #204]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0a:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f16:	4b2d      	ldr	r3, [pc, #180]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	4a29      	ldr	r2, [pc, #164]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2e:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <MX_GPIO_Init+0x108>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	4824      	ldr	r0, [pc, #144]	@ (8001fd0 <MX_GPIO_Init+0x10c>)
 8001f40:	f003 f960 	bl	8005204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001f4a:	4822      	ldr	r0, [pc, #136]	@ (8001fd4 <MX_GPIO_Init+0x110>)
 8001f4c:	f003 f95a 	bl	8005204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f50:	2310      	movs	r3, #16
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	481a      	ldr	r0, [pc, #104]	@ (8001fd0 <MX_GPIO_Init+0x10c>)
 8001f68:	f002 ffca 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001f6c:	2306      	movs	r3, #6
 8001f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4814      	ldr	r0, [pc, #80]	@ (8001fd4 <MX_GPIO_Init+0x110>)
 8001f82:	f002 ffbd 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f86:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <MX_GPIO_Init+0x110>)
 8001fa0:	f002 ffae 	bl	8004f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2007      	movs	r0, #7
 8001faa:	f002 fc36 	bl	800481a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fae:	2007      	movs	r0, #7
 8001fb0:	f002 fc4d 	bl	800484e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2008      	movs	r0, #8
 8001fba:	f002 fc2e 	bl	800481a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001fbe:	2008      	movs	r0, #8
 8001fc0:	f002 fc45 	bl	800484e <HAL_NVIC_EnableIRQ>

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	@ 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000400 	.word	0x48000400

08001fd8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <MX_I2C3_Init+0x74>)
 8001fde:	4a1c      	ldr	r2, [pc, #112]	@ (8002050 <MX_I2C3_Init+0x78>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <MX_I2C3_Init+0x74>)
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <MX_I2C3_Init+0x7c>)
 8001fe6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	@ (800204c <MX_I2C3_Init+0x74>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fee:	4b17      	ldr	r3, [pc, #92]	@ (800204c <MX_I2C3_Init+0x74>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	@ (800204c <MX_I2C3_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <MX_I2C3_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <MX_I2C3_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002006:	4b11      	ldr	r3, [pc, #68]	@ (800204c <MX_I2C3_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800200c:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <MX_I2C3_Init+0x74>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002012:	480e      	ldr	r0, [pc, #56]	@ (800204c <MX_I2C3_Init+0x74>)
 8002014:	f003 f94b 	bl	80052ae <HAL_I2C_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800201e:	f000 f9ae 	bl	800237e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002022:	2100      	movs	r1, #0
 8002024:	4809      	ldr	r0, [pc, #36]	@ (800204c <MX_I2C3_Init+0x74>)
 8002026:	f003 f9dd 	bl	80053e4 <HAL_I2CEx_ConfigAnalogFilter>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002030:	f000 f9a5 	bl	800237e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002034:	2100      	movs	r1, #0
 8002036:	4805      	ldr	r0, [pc, #20]	@ (800204c <MX_I2C3_Init+0x74>)
 8002038:	f003 fa1f 	bl	800547a <HAL_I2CEx_ConfigDigitalFilter>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002042:	f000 f99c 	bl	800237e <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002e0 	.word	0x200002e0
 8002050:	40007800 	.word	0x40007800
 8002054:	10b17db5 	.word	0x10b17db5

08002058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b09c      	sub	sp, #112	@ 0x70
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	2244      	movs	r2, #68	@ 0x44
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f00c f91c 	bl	800e2b6 <memset>
  if(i2cHandle->Instance==I2C3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2e      	ldr	r2, [pc, #184]	@ (800213c <HAL_I2C_MspInit+0xe4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d155      	bne.n	8002134 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800208c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800208e:	2300      	movs	r3, #0
 8002090:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	4618      	mov	r0, r3
 8002098:	f004 f912 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020a2:	f000 f96c 	bl	800237e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <HAL_I2C_MspInit+0xe8>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	4a25      	ldr	r2, [pc, #148]	@ (8002140 <HAL_I2C_MspInit+0xe8>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b2:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <HAL_I2C_MspInit+0xe8>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <HAL_I2C_MspInit+0xe8>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002140 <HAL_I2C_MspInit+0xe8>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <HAL_I2C_MspInit+0xe8>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020dc:	2312      	movs	r3, #18
 80020de:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80020e8:	2302      	movs	r3, #2
 80020ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020f0:	4619      	mov	r1, r3
 80020f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020f6:	f002 ff03 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002100:	2312      	movs	r3, #18
 8002102:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800210c:	2308      	movs	r3, #8
 800210e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002110:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002114:	4619      	mov	r1, r3
 8002116:	480b      	ldr	r0, [pc, #44]	@ (8002144 <HAL_I2C_MspInit+0xec>)
 8002118:	f002 fef2 	bl	8004f00 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <HAL_I2C_MspInit+0xe8>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	4a07      	ldr	r2, [pc, #28]	@ (8002140 <HAL_I2C_MspInit+0xe8>)
 8002122:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002126:	6593      	str	r3, [r2, #88]	@ 0x58
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <HAL_I2C_MspInit+0xe8>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002134:	bf00      	nop
 8002136:	3770      	adds	r7, #112	@ 0x70
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40007800 	.word	0x40007800
 8002140:	40021000 	.word	0x40021000
 8002144:	48000800 	.word	0x48000800

08002148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b087      	sub	sp, #28
 800214c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800214e:	f000 ffb8 	bl	80030c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002152:	f000 f8c3 	bl	80022dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002156:	f7ff feb5 	bl	8001ec4 <MX_GPIO_Init>
  MX_DMA_Init();
 800215a:	f7ff f999 	bl	8001490 <MX_DMA_Init>
  MX_SPI1_Init();
 800215e:	f000 f915 	bl	800238c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8002162:	f000 ff29 	bl	8002fb8 <MX_USB_PCD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002166:	f007 fe2b 	bl	8009dc0 <MX_FATFS_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <main+0x2c>
    Error_Handler();
 8002170:	f000 f905 	bl	800237e <Error_Handler>
  }
  MX_I2C3_Init();
 8002174:	f7ff ff30 	bl	8001fd8 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002178:	f000 fc68 	bl	8002a4c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800217c:	f7fe ff5a 	bl	8001034 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002180:	f000 fcae 	bl	8002ae0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002184:	f000 fb30 	bl	80027e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002188:	f000 fba6 	bl	80028d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 5);
 800218c:	2205      	movs	r2, #5
 800218e:	4942      	ldr	r1, [pc, #264]	@ (8002298 <main+0x150>)
 8002190:	4842      	ldr	r0, [pc, #264]	@ (800229c <main+0x154>)
 8002192:	f001 fbcb 	bl	800392c <HAL_ADC_Start_DMA>
//  HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
  HAL_TIM_Base_Start(&htim4);
 8002196:	4842      	ldr	r0, [pc, #264]	@ (80022a0 <main+0x158>)
 8002198:	f005 f88c 	bl	80072b4 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021a2:	4840      	ldr	r0, [pc, #256]	@ (80022a4 <main+0x15c>)
 80021a4:	f003 f82e 	bl	8005204 <HAL_GPIO_WritePin>


  HAL_Delay(100);
 80021a8:	2064      	movs	r0, #100	@ 0x64
 80021aa:	f000 fffb 	bl	80031a4 <HAL_Delay>
  HAL_UART_Abort(&huart1);
 80021ae:	483e      	ldr	r0, [pc, #248]	@ (80022a8 <main+0x160>)
 80021b0:	f006 f92c 	bl	800840c <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 80021b4:	2240      	movs	r2, #64	@ 0x40
 80021b6:	493d      	ldr	r1, [pc, #244]	@ (80022ac <main+0x164>)
 80021b8:	483b      	ldr	r0, [pc, #236]	@ (80022a8 <main+0x160>)
 80021ba:	f006 f8db 	bl	8008374 <HAL_UART_Receive_DMA>

  HAL_Delay(100);
 80021be:	2064      	movs	r0, #100	@ 0x64
 80021c0:	f000 fff0 	bl	80031a4 <HAL_Delay>
    HAL_UART_Abort(&hlpuart1);
 80021c4:	483a      	ldr	r0, [pc, #232]	@ (80022b0 <main+0x168>)
 80021c6:	f006 f921 	bl	800840c <HAL_UART_Abort>
    HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 80021ca:	2208      	movs	r2, #8
 80021cc:	4939      	ldr	r1, [pc, #228]	@ (80022b4 <main+0x16c>)
 80021ce:	4838      	ldr	r0, [pc, #224]	@ (80022b0 <main+0x168>)
 80021d0:	f006 f8d0 	bl	8008374 <HAL_UART_Receive_DMA>




  f_mount(&fs, "", 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	4938      	ldr	r1, [pc, #224]	@ (80022b8 <main+0x170>)
 80021d8:	4838      	ldr	r0, [pc, #224]	@ (80022bc <main+0x174>)
 80021da:	f009 fba1 	bl	800b920 <f_mount>
//  f_close(&fil);
//  /* Unmount SDCARD */
//  f_mount(NULL, "", 1);


  int indexboucle=0;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
  int tarvosen=0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	603b      	str	r3, [r7, #0]
  f_open(&fil, "adc.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80021e6:	2213      	movs	r2, #19
 80021e8:	4935      	ldr	r1, [pc, #212]	@ (80022c0 <main+0x178>)
 80021ea:	4836      	ldr	r0, [pc, #216]	@ (80022c4 <main+0x17c>)
 80021ec:	f009 fbde 	bl	800b9ac <f_open>

  		   f_getfree("", &fre_clust, &pfs);
 80021f0:	4a35      	ldr	r2, [pc, #212]	@ (80022c8 <main+0x180>)
 80021f2:	4936      	ldr	r1, [pc, #216]	@ (80022cc <main+0x184>)
 80021f4:	4830      	ldr	r0, [pc, #192]	@ (80022b8 <main+0x170>)
 80021f6:	f009 ffb0 	bl	800c15a <f_getfree>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(indexboucle<=50){
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b32      	cmp	r3, #50	@ 0x32
 80021fe:	dc23      	bgt.n	8002248 <main+0x100>





		  snprintf((uint8_t *) SD_Card_Write_Buffer,256,"adc1=%d,adc2=%d,adc3=%d,adc4=%d,adc5=%d\n\r",rawADCdata[0],rawADCdata[1],rawADCdata[2],rawADCdata[3],rawADCdata[4]);
 8002200:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <main+0x150>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	461c      	mov	r4, r3
 8002206:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <main+0x150>)
 8002208:	885b      	ldrh	r3, [r3, #2]
 800220a:	461a      	mov	r2, r3
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <main+0x150>)
 800220e:	889b      	ldrh	r3, [r3, #4]
 8002210:	4619      	mov	r1, r3
 8002212:	4b21      	ldr	r3, [pc, #132]	@ (8002298 <main+0x150>)
 8002214:	88db      	ldrh	r3, [r3, #6]
 8002216:	4618      	mov	r0, r3
 8002218:	4b1f      	ldr	r3, [pc, #124]	@ (8002298 <main+0x150>)
 800221a:	891b      	ldrh	r3, [r3, #8]
 800221c:	9303      	str	r3, [sp, #12]
 800221e:	9002      	str	r0, [sp, #8]
 8002220:	9101      	str	r1, [sp, #4]
 8002222:	9200      	str	r2, [sp, #0]
 8002224:	4623      	mov	r3, r4
 8002226:	4a2a      	ldr	r2, [pc, #168]	@ (80022d0 <main+0x188>)
 8002228:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800222c:	4829      	ldr	r0, [pc, #164]	@ (80022d4 <main+0x18c>)
 800222e:	f00b ffab 	bl	800e188 <sniprintf>
		   f_puts((uint8_t *) SD_Card_Write_Buffer, &fil);
 8002232:	4924      	ldr	r1, [pc, #144]	@ (80022c4 <main+0x17c>)
 8002234:	4827      	ldr	r0, [pc, #156]	@ (80022d4 <main+0x18c>)
 8002236:	f00a f8bc 	bl	800c3b2 <f_puts>


		  indexboucle++;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3301      	adds	r3, #1
 800223e:	607b      	str	r3, [r7, #4]
		  HAL_Delay(100);
 8002240:	2064      	movs	r0, #100	@ 0x64
 8002242:	f000 ffaf 	bl	80031a4 <HAL_Delay>
 8002246:	e018      	b.n	800227a <main+0x132>
	  }
	  else{


		  if(indexboucle<=51){
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b33      	cmp	r3, #51	@ 0x33
 800224c:	dc0c      	bgt.n	8002268 <main+0x120>
			  f_close(&fil);
 800224e:	481d      	ldr	r0, [pc, #116]	@ (80022c4 <main+0x17c>)
 8002250:	f009 ff59 	bl	800c106 <f_close>
		  f_mount(NULL, "", 1);
 8002254:	2201      	movs	r2, #1
 8002256:	4918      	ldr	r1, [pc, #96]	@ (80022b8 <main+0x170>)
 8002258:	2000      	movs	r0, #0
 800225a:	f009 fb61 	bl	800b920 <f_mount>
		  indexboucle++;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3301      	adds	r3, #1
 8002262:	607b      	str	r3, [r7, #4]
		  tarvosen=1;
 8002264:	2301      	movs	r3, #1
 8002266:	603b      	str	r3, [r7, #0]

		  }

		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8002268:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800226c:	480d      	ldr	r0, [pc, #52]	@ (80022a4 <main+0x15c>)
 800226e:	f002 ffe1 	bl	8005234 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8002272:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002276:	f000 ff95 	bl	80031a4 <HAL_Delay>



	  }

	  if(tarvosen==1){
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d1bc      	bne.n	80021fa <main+0xb2>

		  HAL_UART_Transmit(&hlpuart1,"caca",sizeof("caca"),100);
 8002280:	2364      	movs	r3, #100	@ 0x64
 8002282:	2205      	movs	r2, #5
 8002284:	4914      	ldr	r1, [pc, #80]	@ (80022d8 <main+0x190>)
 8002286:	480a      	ldr	r0, [pc, #40]	@ (80022b0 <main+0x168>)
 8002288:	f005 ffe6 	bl	8008258 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 800228c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002290:	f000 ff88 	bl	80031a4 <HAL_Delay>
	  if(indexboucle<=50){
 8002294:	e7b1      	b.n	80021fa <main+0xb2>
 8002296:	bf00      	nop
 8002298:	20000bf4 	.word	0x20000bf4
 800229c:	20000210 	.word	0x20000210
 80022a0:	20000ccc 	.word	0x20000ccc
 80022a4:	48000400 	.word	0x48000400
 80022a8:	20000dac 	.word	0x20000dac
 80022ac:	20000aa4 	.word	0x20000aa4
 80022b0:	20000d18 	.word	0x20000d18
 80022b4:	2000089c 	.word	0x2000089c
 80022b8:	08010c08 	.word	0x08010c08
 80022bc:	20000334 	.word	0x20000334
 80022c0:	08010c0c 	.word	0x08010c0c
 80022c4:	20000568 	.word	0x20000568
 80022c8:	20000564 	.word	0x20000564
 80022cc:	20000798 	.word	0x20000798
 80022d0:	08010c14 	.word	0x08010c14
 80022d4:	20000ae4 	.word	0x20000ae4
 80022d8:	08010c40 	.word	0x08010c40

080022dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b094      	sub	sp, #80	@ 0x50
 80022e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e2:	f107 0318 	add.w	r3, r7, #24
 80022e6:	2238      	movs	r2, #56	@ 0x38
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f00b ffe3 	bl	800e2b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002302:	f003 f9ff 	bl	8005704 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8002306:	2323      	movs	r3, #35	@ 0x23
 8002308:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800230a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800230e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002316:	2340      	movs	r3, #64	@ 0x40
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800231a:	2301      	movs	r3, #1
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800231e:	2302      	movs	r3, #2
 8002320:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002322:	2303      	movs	r3, #3
 8002324:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002326:	2301      	movs	r3, #1
 8002328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800232a:	2308      	movs	r3, #8
 800232c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800232e:	2302      	movs	r3, #2
 8002330:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002332:	2302      	movs	r3, #2
 8002334:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002336:	2302      	movs	r3, #2
 8002338:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233a:	f107 0318 	add.w	r3, r7, #24
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fa94 	bl	800586c <HAL_RCC_OscConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800234a:	f000 f818 	bl	800237e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234e:	230f      	movs	r3, #15
 8002350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002352:	2303      	movs	r3, #3
 8002354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2102      	movs	r1, #2
 8002366:	4618      	mov	r0, r3
 8002368:	f003 fd92 	bl	8005e90 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002372:	f000 f804 	bl	800237e <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3750      	adds	r7, #80	@ 0x50
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002382:	b672      	cpsid	i
}
 8002384:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002386:	bf00      	nop
 8002388:	e7fd      	b.n	8002386 <Error_Handler+0x8>
	...

0800238c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002390:	4b1b      	ldr	r3, [pc, #108]	@ (8002400 <MX_SPI1_Init+0x74>)
 8002392:	4a1c      	ldr	r2, [pc, #112]	@ (8002404 <MX_SPI1_Init+0x78>)
 8002394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002396:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <MX_SPI1_Init+0x74>)
 8002398:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800239c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800239e:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023a4:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80023aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023b2:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023c2:	2210      	movs	r2, #16
 80023c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023d8:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023da:	2207      	movs	r2, #7
 80023dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023e6:	2208      	movs	r2, #8
 80023e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <MX_SPI1_Init+0x74>)
 80023ec:	f004 f958 	bl	80066a0 <HAL_SPI_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023f6:	f7ff ffc2 	bl	800237e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000c14 	.word	0x20000c14
 8002404:	40013000 	.word	0x40013000

08002408 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a17      	ldr	r2, [pc, #92]	@ (8002484 <HAL_SPI_MspInit+0x7c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d128      	bne.n	800247c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_SPI_MspInit+0x80>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242e:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_SPI_MspInit+0x80>)
 8002430:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002434:	6613      	str	r3, [r2, #96]	@ 0x60
 8002436:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <HAL_SPI_MspInit+0x80>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_SPI_MspInit+0x80>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <HAL_SPI_MspInit+0x80>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <HAL_SPI_MspInit+0x80>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800245a:	23e0      	movs	r3, #224	@ 0xe0
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800246a:	2305      	movs	r3, #5
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002478:	f002 fd42 	bl	8004f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800247c:	bf00      	nop
 800247e:	3728      	adds	r7, #40	@ 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40013000 	.word	0x40013000
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <HAL_MspInit+0x44>)
 8002494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002496:	4a0e      	ldr	r2, [pc, #56]	@ (80024d0 <HAL_MspInit+0x44>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6613      	str	r3, [r2, #96]	@ 0x60
 800249e:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_MspInit+0x44>)
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_MspInit+0x44>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	4a08      	ldr	r2, [pc, #32]	@ (80024d0 <HAL_MspInit+0x44>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_MspInit+0x44>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024c2:	f003 f9c3 	bl	800584c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000

080024d4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80024d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <SDTimer_Handler+0x40>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <SDTimer_Handler+0x1c>
    Timer1--;
 80024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <SDTimer_Handler+0x40>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <SDTimer_Handler+0x40>)
 80024ee:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80024f0:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <SDTimer_Handler+0x44>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <SDTimer_Handler+0x34>
    Timer2--;
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <SDTimer_Handler+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <SDTimer_Handler+0x44>)
 8002506:	701a      	strb	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	200002dc 	.word	0x200002dc
 8002518:	200002dd 	.word	0x200002dd

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <NMI_Handler+0x4>

08002524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <MemManage_Handler+0x4>

08002534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <BusFault_Handler+0x4>

0800253c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <UsageFault_Handler+0x4>

08002544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <SysTick_Handler+0x30>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <SysTick_Handler+0x30>)
 8002580:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <SysTick_Handler+0x30>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b09      	cmp	r3, #9
 800258a:	d904      	bls.n	8002596 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800258c:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <SysTick_Handler+0x30>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002592:	f7ff ff9f 	bl	80024d4 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002596:	f000 fde7 	bl	8003168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000c78 	.word	0x20000c78

080025a4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80025a8:	2002      	movs	r0, #2
 80025aa:	f002 fe5d 	bl	8005268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80025b6:	2004      	movs	r0, #4
 80025b8:	f002 fe56 	bl	8005268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <DMA1_Channel1_IRQHandler+0x10>)
 80025c6:	f002 fb40 	bl	8004c4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000e40 	.word	0x20000e40

080025d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80025d8:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <DMA1_Channel2_IRQHandler+0x10>)
 80025da:	f002 fb36 	bl	8004c4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000ea0 	.word	0x20000ea0

080025e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025ec:	4802      	ldr	r0, [pc, #8]	@ (80025f8 <DMA1_Channel3_IRQHandler+0x10>)
 80025ee:	f002 fb2c 	bl	8004c4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000027c 	.word	0x2000027c

080025fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002600:	4802      	ldr	r0, [pc, #8]	@ (800260c <DMA1_Channel4_IRQHandler+0x10>)
 8002602:	f002 fb22 	bl	8004c4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000f00 	.word	0x20000f00

08002610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002614:	4802      	ldr	r0, [pc, #8]	@ (8002620 <USART1_IRQHandler+0x10>)
 8002616:	f006 f807 	bl	8008628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000dac 	.word	0x20000dac

08002624 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002628:	4802      	ldr	r0, [pc, #8]	@ (8002634 <LPUART1_IRQHandler+0x10>)
 800262a:	f005 fffd 	bl	8008628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000d18 	.word	0x20000d18

08002638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return 1;
 800263c:	2301      	movs	r3, #1
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_kill>:

int _kill(int pid, int sig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002652:	f00b fea5 	bl	800e3a0 <__errno>
 8002656:	4603      	mov	r3, r0
 8002658:	2216      	movs	r2, #22
 800265a:	601a      	str	r2, [r3, #0]
  return -1;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_exit>:

void _exit (int status)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffe7 	bl	8002648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800267a:	bf00      	nop
 800267c:	e7fd      	b.n	800267a <_exit+0x12>

0800267e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	e00a      	b.n	80026a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002690:	f3af 8000 	nop.w
 8002694:	4601      	mov	r1, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	60ba      	str	r2, [r7, #8]
 800269c:	b2ca      	uxtb	r2, r1
 800269e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	dbf0      	blt.n	8002690 <_read+0x12>
  }

  return len;
 80026ae:	687b      	ldr	r3, [r7, #4]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e009      	b.n	80026de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	60ba      	str	r2, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3301      	adds	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	dbf1      	blt.n	80026ca <_write+0x12>
  }
  return len;
 80026e6:	687b      	ldr	r3, [r7, #4]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_close>:

int _close(int file)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002718:	605a      	str	r2, [r3, #4]
  return 0;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_isatty>:

int _isatty(int file)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002760:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <_sbrk+0x5c>)
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <_sbrk+0x60>)
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <_sbrk+0x64>)
 8002776:	4a12      	ldr	r2, [pc, #72]	@ (80027c0 <_sbrk+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002788:	f00b fe0a 	bl	800e3a0 <__errno>
 800278c:	4603      	mov	r3, r0
 800278e:	220c      	movs	r2, #12
 8002790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e009      	b.n	80027ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002798:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <_sbrk+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20008000 	.word	0x20008000
 80027b8:	00000400 	.word	0x00000400
 80027bc:	20000c7c 	.word	0x20000c7c
 80027c0:	200013c8 	.word	0x200013c8

080027c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <SystemInit+0x20>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	4a05      	ldr	r2, [pc, #20]	@ (80027e4 <SystemInit+0x20>)
 80027d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08e      	sub	sp, #56	@ 0x38
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002808:	463b      	mov	r3, r7
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800281a:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 800281c:	4a2d      	ldr	r2, [pc, #180]	@ (80028d4 <MX_TIM3_Init+0xec>)
 800281e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002820:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800282c:	4b28      	ldr	r3, [pc, #160]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 800282e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002832:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002834:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283a:	4b25      	ldr	r3, [pc, #148]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002840:	4823      	ldr	r0, [pc, #140]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 8002842:	f004 fcdf 	bl	8007204 <HAL_TIM_Base_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800284c:	f7ff fd97 	bl	800237e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800285a:	4619      	mov	r1, r3
 800285c:	481c      	ldr	r0, [pc, #112]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 800285e:	f004 ff01 	bl	8007664 <HAL_TIM_ConfigClockSource>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002868:	f7ff fd89 	bl	800237e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800286c:	4818      	ldr	r0, [pc, #96]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 800286e:	f004 fd83 	bl	8007378 <HAL_TIM_PWM_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002878:	f7ff fd81 	bl	800237e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	4619      	mov	r1, r3
 800288a:	4811      	ldr	r0, [pc, #68]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 800288c:	f005 fc12 	bl	80080b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002896:	f7ff fd72 	bl	800237e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800289a:	2360      	movs	r3, #96	@ 0x60
 800289c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028aa:	463b      	mov	r3, r7
 80028ac:	2200      	movs	r2, #0
 80028ae:	4619      	mov	r1, r3
 80028b0:	4807      	ldr	r0, [pc, #28]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 80028b2:	f004 fdc3 	bl	800743c <HAL_TIM_PWM_ConfigChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80028bc:	f7ff fd5f 	bl	800237e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028c0:	4803      	ldr	r0, [pc, #12]	@ (80028d0 <MX_TIM3_Init+0xe8>)
 80028c2:	f000 f88b 	bl	80029dc <HAL_TIM_MspPostInit>

}
 80028c6:	bf00      	nop
 80028c8:	3738      	adds	r7, #56	@ 0x38
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000c80 	.word	0x20000c80
 80028d4:	40000400 	.word	0x40000400

080028d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028f6:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <MX_TIM4_Init+0x94>)
 80028f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002970 <MX_TIM4_Init+0x98>)
 80028fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000-1;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <MX_TIM4_Init+0x94>)
 80028fe:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8002902:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002904:	4b19      	ldr	r3, [pc, #100]	@ (800296c <MX_TIM4_Init+0x94>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800290a:	4b18      	ldr	r3, [pc, #96]	@ (800296c <MX_TIM4_Init+0x94>)
 800290c:	2263      	movs	r2, #99	@ 0x63
 800290e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002910:	4b16      	ldr	r3, [pc, #88]	@ (800296c <MX_TIM4_Init+0x94>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <MX_TIM4_Init+0x94>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800291c:	4813      	ldr	r0, [pc, #76]	@ (800296c <MX_TIM4_Init+0x94>)
 800291e:	f004 fc71 	bl	8007204 <HAL_TIM_Base_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002928:	f7ff fd29 	bl	800237e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800292c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002930:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <MX_TIM4_Init+0x94>)
 800293a:	f004 fe93 	bl	8007664 <HAL_TIM_ConfigClockSource>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002944:	f7ff fd1b 	bl	800237e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002948:	2320      	movs	r3, #32
 800294a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4805      	ldr	r0, [pc, #20]	@ (800296c <MX_TIM4_Init+0x94>)
 8002956:	f005 fbad 	bl	80080b4 <HAL_TIMEx_MasterConfigSynchronization>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002960:	f7ff fd0d 	bl	800237e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002964:	bf00      	nop
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000ccc 	.word	0x20000ccc
 8002970:	40000800 	.word	0x40000800

08002974 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a13      	ldr	r2, [pc, #76]	@ (80029d0 <HAL_TIM_Base_MspInit+0x5c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10c      	bne.n	80029a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002986:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <HAL_TIM_Base_MspInit+0x60>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <HAL_TIM_Base_MspInit+0x60>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6593      	str	r3, [r2, #88]	@ 0x58
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_TIM_Base_MspInit+0x60>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800299e:	e010      	b.n	80029c2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0c      	ldr	r2, [pc, #48]	@ (80029d8 <HAL_TIM_Base_MspInit+0x64>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10b      	bne.n	80029c2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <HAL_TIM_Base_MspInit+0x60>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	4a09      	ldr	r2, [pc, #36]	@ (80029d4 <HAL_TIM_Base_MspInit+0x60>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <HAL_TIM_Base_MspInit+0x60>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40000800 	.word	0x40000800

080029dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a11      	ldr	r2, [pc, #68]	@ (8002a40 <HAL_TIM_MspPostInit+0x64>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d11b      	bne.n	8002a36 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <HAL_TIM_MspPostInit+0x68>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a02:	4a10      	ldr	r2, [pc, #64]	@ (8002a44 <HAL_TIM_MspPostInit+0x68>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <HAL_TIM_MspPostInit+0x68>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a16:	2340      	movs	r3, #64	@ 0x40
 8002a18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a26:	2302      	movs	r3, #2
 8002a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	@ (8002a48 <HAL_TIM_MspPostInit+0x6c>)
 8002a32:	f002 fa65 	bl	8004f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40021000 	.word	0x40021000
 8002a48:	48000800 	.word	0x48000800

08002a4c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002a50:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a52:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <MX_LPUART1_UART_Init+0x90>)
 8002a54:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a5c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a7c:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a88:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002a8e:	4812      	ldr	r0, [pc, #72]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002a90:	f005 fb92 	bl	80081b8 <HAL_UART_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a9a:	f7ff fc70 	bl	800237e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	480d      	ldr	r0, [pc, #52]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002aa2:	f007 f889 	bl	8009bb8 <HAL_UARTEx_SetTxFifoThreshold>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002aac:	f7ff fc67 	bl	800237e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4809      	ldr	r0, [pc, #36]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002ab4:	f007 f8be 	bl	8009c34 <HAL_UARTEx_SetRxFifoThreshold>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002abe:	f7ff fc5e 	bl	800237e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	@ (8002ad8 <MX_LPUART1_UART_Init+0x8c>)
 8002ac4:	f007 f83f 	bl	8009b46 <HAL_UARTEx_DisableFifoMode>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002ace:	f7ff fc56 	bl	800237e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000d18 	.word	0x20000d18
 8002adc:	40008000 	.word	0x40008000

08002ae0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ae4:	4b22      	ldr	r3, [pc, #136]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002ae6:	4a23      	ldr	r2, [pc, #140]	@ (8002b74 <MX_USART1_UART_Init+0x94>)
 8002ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aea:	4b21      	ldr	r3, [pc, #132]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002af2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002afe:	4b1c      	ldr	r3, [pc, #112]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b04:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b06:	220c      	movs	r2, #12
 8002b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b0a:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b10:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b16:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b1c:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b22:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b28:	4811      	ldr	r0, [pc, #68]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b2a:	f005 fb45 	bl	80081b8 <HAL_UART_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b34:	f7ff fc23 	bl	800237e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b38:	2100      	movs	r1, #0
 8002b3a:	480d      	ldr	r0, [pc, #52]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b3c:	f007 f83c 	bl	8009bb8 <HAL_UARTEx_SetTxFifoThreshold>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b46:	f7ff fc1a 	bl	800237e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4808      	ldr	r0, [pc, #32]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b4e:	f007 f871 	bl	8009c34 <HAL_UARTEx_SetRxFifoThreshold>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b58:	f7ff fc11 	bl	800237e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b5c:	4804      	ldr	r0, [pc, #16]	@ (8002b70 <MX_USART1_UART_Init+0x90>)
 8002b5e:	f006 fff2 	bl	8009b46 <HAL_UARTEx_DisableFifoMode>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b68:	f7ff fc09 	bl	800237e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000dac 	.word	0x20000dac
 8002b74:	40013800 	.word	0x40013800

08002b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b09e      	sub	sp, #120	@ 0x78
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b90:	f107 0320 	add.w	r3, r7, #32
 8002b94:	2244      	movs	r2, #68	@ 0x44
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f00b fb8c 	bl	800e2b6 <memset>
  if(uartHandle->Instance==LPUART1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a92      	ldr	r2, [pc, #584]	@ (8002dec <HAL_UART_MspInit+0x274>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	f040 80b0 	bne.w	8002d0a <HAL_UART_MspInit+0x192>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002baa:	2320      	movs	r3, #32
 8002bac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb2:	f107 0320 	add.w	r3, r7, #32
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fb82 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bc2:	f7ff fbdc 	bl	800237e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bca:	4a89      	ldr	r2, [pc, #548]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002bd2:	4b87      	ldr	r3, [pc, #540]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	4b84      	ldr	r3, [pc, #528]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	4a83      	ldr	r2, [pc, #524]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bea:	4b81      	ldr	r3, [pc, #516]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	4b7e      	ldr	r3, [pc, #504]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c02:	4b7b      	ldr	r3, [pc, #492]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c0e:	2308      	movs	r3, #8
 8002c10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002c1e:	230c      	movs	r3, #12
 8002c20:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c26:	4619      	mov	r1, r3
 8002c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c2c:	f002 f968 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c34:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c42:	2308      	movs	r3, #8
 8002c44:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c46:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4869      	ldr	r0, [pc, #420]	@ (8002df4 <HAL_UART_MspInit+0x27c>)
 8002c4e:	f002 f957 	bl	8004f00 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002c52:	4b69      	ldr	r3, [pc, #420]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c54:	4a69      	ldr	r2, [pc, #420]	@ (8002dfc <HAL_UART_MspInit+0x284>)
 8002c56:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002c58:	4b67      	ldr	r3, [pc, #412]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c5a:	2222      	movs	r2, #34	@ 0x22
 8002c5c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c5e:	4b66      	ldr	r3, [pc, #408]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c64:	4b64      	ldr	r3, [pc, #400]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6a:	4b63      	ldr	r3, [pc, #396]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c6c:	2280      	movs	r2, #128	@ 0x80
 8002c6e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c70:	4b61      	ldr	r3, [pc, #388]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c76:	4b60      	ldr	r3, [pc, #384]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c82:	4b5d      	ldr	r3, [pc, #372]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002c88:	485b      	ldr	r0, [pc, #364]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c8a:	f001 fdfb 	bl	8004884 <HAL_DMA_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8002c94:	f7ff fb73 	bl	800237e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a57      	ldr	r2, [pc, #348]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002c9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ca0:	4a55      	ldr	r2, [pc, #340]	@ (8002df8 <HAL_UART_MspInit+0x280>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002ca6:	4b56      	ldr	r3, [pc, #344]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002ca8:	4a56      	ldr	r2, [pc, #344]	@ (8002e04 <HAL_UART_MspInit+0x28c>)
 8002caa:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002cac:	4b54      	ldr	r3, [pc, #336]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cae:	2223      	movs	r2, #35	@ 0x23
 8002cb0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cb2:	4b53      	ldr	r3, [pc, #332]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb8:	4b51      	ldr	r3, [pc, #324]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cbe:	4b50      	ldr	r3, [pc, #320]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cc0:	2280      	movs	r2, #128	@ 0x80
 8002cc2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cc4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cca:	4b4d      	ldr	r3, [pc, #308]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002cdc:	4848      	ldr	r0, [pc, #288]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cde:	f001 fdd1 	bl	8004884 <HAL_DMA_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 8002ce8:	f7ff fb49 	bl	800237e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a44      	ldr	r2, [pc, #272]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cf0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002cf2:	4a43      	ldr	r2, [pc, #268]	@ (8002e00 <HAL_UART_MspInit+0x288>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	205b      	movs	r0, #91	@ 0x5b
 8002cfe:	f001 fd8c 	bl	800481a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002d02:	205b      	movs	r0, #91	@ 0x5b
 8002d04:	f001 fda3 	bl	800484e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d08:	e06c      	b.n	8002de4 <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e08 <HAL_UART_MspInit+0x290>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d167      	bne.n	8002de4 <HAL_UART_MspInit+0x26c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d14:	2301      	movs	r3, #1
 8002d16:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d1c:	f107 0320 	add.w	r3, r7, #32
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 facd 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002d2c:	f7ff fb27 	bl	800237e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d30:	4b2f      	ldr	r3, [pc, #188]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d34:	4a2e      	ldr	r2, [pc, #184]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d48:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4c:	4a28      	ldr	r2, [pc, #160]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d54:	4b26      	ldr	r3, [pc, #152]	@ (8002df0 <HAL_UART_MspInit+0x278>)
 8002d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d60:	23c0      	movs	r3, #192	@ 0xc0
 8002d62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d70:	2307      	movs	r3, #7
 8002d72:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d78:	4619      	mov	r1, r3
 8002d7a:	481e      	ldr	r0, [pc, #120]	@ (8002df4 <HAL_UART_MspInit+0x27c>)
 8002d7c:	f002 f8c0 	bl	8004f00 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8002d80:	4b22      	ldr	r3, [pc, #136]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002d82:	4a23      	ldr	r2, [pc, #140]	@ (8002e10 <HAL_UART_MspInit+0x298>)
 8002d84:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002d86:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002d88:	2218      	movs	r2, #24
 8002d8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d92:	4b1e      	ldr	r3, [pc, #120]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d98:	4b1c      	ldr	r3, [pc, #112]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002d9a:	2280      	movs	r2, #128	@ 0x80
 8002d9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002daa:	4b18      	ldr	r3, [pc, #96]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002dac:	2220      	movs	r2, #32
 8002dae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002db0:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002db6:	4815      	ldr	r0, [pc, #84]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002db8:	f001 fd64 	bl	8004884 <HAL_DMA_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002dc2:	f7ff fadc 	bl	800237e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a10      	ldr	r2, [pc, #64]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002dca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002dce:	4a0f      	ldr	r2, [pc, #60]	@ (8002e0c <HAL_UART_MspInit+0x294>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2025      	movs	r0, #37	@ 0x25
 8002dda:	f001 fd1e 	bl	800481a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dde:	2025      	movs	r0, #37	@ 0x25
 8002de0:	f001 fd35 	bl	800484e <HAL_NVIC_EnableIRQ>
}
 8002de4:	bf00      	nop
 8002de6:	3778      	adds	r7, #120	@ 0x78
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40008000 	.word	0x40008000
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400
 8002df8:	20000e40 	.word	0x20000e40
 8002dfc:	40020008 	.word	0x40020008
 8002e00:	20000ea0 	.word	0x20000ea0
 8002e04:	4002001c 	.word	0x4002001c
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	20000f00 	.word	0x20000f00
 8002e10:	40020044 	.word	0x40020044

08002e14 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a57      	ldr	r2, [pc, #348]	@ (8002f80 <HAL_UART_RxCpltCallback+0x16c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d15b      	bne.n	8002ede <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 8002e26:	4b57      	ldr	r3, [pc, #348]	@ (8002f84 <HAL_UART_RxCpltCallback+0x170>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a57      	ldr	r2, [pc, #348]	@ (8002f88 <HAL_UART_RxCpltCallback+0x174>)
 8002e2c:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8002e2e:	4b56      	ldr	r3, [pc, #344]	@ (8002f88 <HAL_UART_RxCpltCallback+0x174>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8002e36:	dd22      	ble.n	8002e7e <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 8002e38:	4b53      	ldr	r3, [pc, #332]	@ (8002f88 <HAL_UART_RxCpltCallback+0x174>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002e42:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 8002e44:	4b50      	ldr	r3, [pc, #320]	@ (8002f88 <HAL_UART_RxCpltCallback+0x174>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b50      	ldr	r3, [pc, #320]	@ (8002f8c <HAL_UART_RxCpltCallback+0x178>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	89fa      	ldrh	r2, [r7, #14]
 8002e50:	494f      	ldr	r1, [pc, #316]	@ (8002f90 <HAL_UART_RxCpltCallback+0x17c>)
 8002e52:	4618      	mov	r0, r3
 8002e54:	f00b fad1 	bl	800e3fa <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 8002e58:	4b4b      	ldr	r3, [pc, #300]	@ (8002f88 <HAL_UART_RxCpltCallback+0x174>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	4a4b      	ldr	r2, [pc, #300]	@ (8002f90 <HAL_UART_RxCpltCallback+0x17c>)
 8002e62:	1899      	adds	r1, r3, r2
 8002e64:	89fb      	ldrh	r3, [r7, #14]
 8002e66:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4847      	ldr	r0, [pc, #284]	@ (8002f8c <HAL_UART_RxCpltCallback+0x178>)
 8002e6e:	f00b fac4 	bl	800e3fa <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 8002e72:	89fb      	ldrh	r3, [r7, #14]
 8002e74:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002e78:	4a42      	ldr	r2, [pc, #264]	@ (8002f84 <HAL_UART_RxCpltCallback+0x170>)
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	e01d      	b.n	8002eba <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 8002e7e:	4b42      	ldr	r3, [pc, #264]	@ (8002f88 <HAL_UART_RxCpltCallback+0x174>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b41      	ldr	r3, [pc, #260]	@ (8002f8c <HAL_UART_RxCpltCallback+0x178>)
 8002e86:	441a      	add	r2, r3
 8002e88:	4b41      	ldr	r3, [pc, #260]	@ (8002f90 <HAL_UART_RxCpltCallback+0x17c>)
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8002e90:	4602      	mov	r2, r0
 8002e92:	4619      	mov	r1, r3
 8002e94:	f8d1 c000 	ldr.w	ip, [r1]
 8002e98:	684e      	ldr	r6, [r1, #4]
 8002e9a:	688d      	ldr	r5, [r1, #8]
 8002e9c:	68c9      	ldr	r1, [r1, #12]
 8002e9e:	f8c2 c000 	str.w	ip, [r2]
 8002ea2:	6056      	str	r6, [r2, #4]
 8002ea4:	6095      	str	r5, [r2, #8]
 8002ea6:	60d1      	str	r1, [r2, #12]
 8002ea8:	3310      	adds	r3, #16
 8002eaa:	3010      	adds	r0, #16
 8002eac:	42a3      	cmp	r3, r4
 8002eae:	d1ef      	bne.n	8002e90 <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 8002eb0:	4b35      	ldr	r3, [pc, #212]	@ (8002f88 <HAL_UART_RxCpltCallback+0x174>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3340      	adds	r3, #64	@ 0x40
 8002eb6:	4a33      	ldr	r2, [pc, #204]	@ (8002f84 <HAL_UART_RxCpltCallback+0x170>)
 8002eb8:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8002eba:	2240      	movs	r2, #64	@ 0x40
 8002ebc:	4934      	ldr	r1, [pc, #208]	@ (8002f90 <HAL_UART_RxCpltCallback+0x17c>)
 8002ebe:	4835      	ldr	r0, [pc, #212]	@ (8002f94 <HAL_UART_RxCpltCallback+0x180>)
 8002ec0:	f005 fa58 	bl	8008374 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <HAL_UART_RxCpltCallback+0x184>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b33      	ldr	r3, [pc, #204]	@ (8002f98 <HAL_UART_RxCpltCallback+0x184>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0204 	bic.w	r2, r2, #4
 8002ed2:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 8002ed4:	2240      	movs	r2, #64	@ 0x40
 8002ed6:	492e      	ldr	r1, [pc, #184]	@ (8002f90 <HAL_UART_RxCpltCallback+0x17c>)
 8002ed8:	482e      	ldr	r0, [pc, #184]	@ (8002f94 <HAL_UART_RxCpltCallback+0x180>)
 8002eda:	f005 fa4b 	bl	8008374 <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8002f9c <HAL_UART_RxCpltCallback+0x188>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d146      	bne.n	8002f76 <HAL_UART_RxCpltCallback+0x162>
		TarvosRXbufferoldpos = TarvosRXbuffernewpos; //keep track of the last position in the buffer
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa0 <HAL_UART_RxCpltCallback+0x18c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa4 <HAL_UART_RxCpltCallback+0x190>)
 8002eee:	6013      	str	r3, [r2, #0]
				if(TarvosRXbufferoldpos + TarvosRxTamponSize > TarvosRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa4 <HAL_UART_RxCpltCallback+0x190>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ef6:	dd22      	ble.n	8002f3e <HAL_UART_RxCpltCallback+0x12a>

					uint16_t datatocopy = TarvosRxBufferSize-TarvosRXbufferoldpos;  // find out how much space is left in the main buffer
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa4 <HAL_UART_RxCpltCallback+0x190>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002f02:	81bb      	strh	r3, [r7, #12]
					memcpy ((uint8_t *)tarvos_RX_Buffer+TarvosRXbufferoldpos,(uint8_t *) tarvos_RX_Tampon, datatocopy);  // copy data in that remaining space
 8002f04:	4b27      	ldr	r3, [pc, #156]	@ (8002fa4 <HAL_UART_RxCpltCallback+0x190>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b27      	ldr	r3, [pc, #156]	@ (8002fa8 <HAL_UART_RxCpltCallback+0x194>)
 8002f0c:	4413      	add	r3, r2
 8002f0e:	89ba      	ldrh	r2, [r7, #12]
 8002f10:	4926      	ldr	r1, [pc, #152]	@ (8002fac <HAL_UART_RxCpltCallback+0x198>)
 8002f12:	4618      	mov	r0, r3
 8002f14:	f00b fa71 	bl	800e3fa <memcpy>

					TarvosRXbufferoldpos = 0;  // point to the start of the buffer
 8002f18:	4b22      	ldr	r3, [pc, #136]	@ (8002fa4 <HAL_UART_RxCpltCallback+0x190>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
					memcpy ((uint8_t *)tarvos_RX_Buffer, (uint8_t *)tarvos_RX_Tampon+datatocopy, (TarvosRxTamponSize-datatocopy));  // copy the remaining data
 8002f1e:	89bb      	ldrh	r3, [r7, #12]
 8002f20:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <HAL_UART_RxCpltCallback+0x198>)
 8002f22:	1899      	adds	r1, r3, r2
 8002f24:	89bb      	ldrh	r3, [r7, #12]
 8002f26:	f1c3 0308 	rsb	r3, r3, #8
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	481e      	ldr	r0, [pc, #120]	@ (8002fa8 <HAL_UART_RxCpltCallback+0x194>)
 8002f2e:	f00b fa64 	bl	800e3fa <memcpy>
					TarvosRXbuffernewpos = (TarvosRxTamponSize-datatocopy);  // update the position
 8002f32:	89bb      	ldrh	r3, [r7, #12]
 8002f34:	f1c3 0308 	rsb	r3, r3, #8
 8002f38:	4a19      	ldr	r2, [pc, #100]	@ (8002fa0 <HAL_UART_RxCpltCallback+0x18c>)
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e00e      	b.n	8002f5c <HAL_UART_RxCpltCallback+0x148>
				}
				else{
					memcpy((uint8_t *)tarvos_RX_Buffer+TarvosRXbufferoldpos,(uint8_t *) tarvos_RX_Tampon, TarvosRxTamponSize); //copy received data to the buffer
 8002f3e:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <HAL_UART_RxCpltCallback+0x190>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b18      	ldr	r3, [pc, #96]	@ (8002fa8 <HAL_UART_RxCpltCallback+0x194>)
 8002f46:	4413      	add	r3, r2
 8002f48:	4a18      	ldr	r2, [pc, #96]	@ (8002fac <HAL_UART_RxCpltCallback+0x198>)
 8002f4a:	6811      	ldr	r1, [r2, #0]
 8002f4c:	6852      	ldr	r2, [r2, #4]
 8002f4e:	6019      	str	r1, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
					TarvosRXbuffernewpos = TarvosRxTamponSize+TarvosRXbufferoldpos; //update buffer position
 8002f52:	4b14      	ldr	r3, [pc, #80]	@ (8002fa4 <HAL_UART_RxCpltCallback+0x190>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3308      	adds	r3, #8
 8002f58:	4a11      	ldr	r2, [pc, #68]	@ (8002fa0 <HAL_UART_RxCpltCallback+0x18c>)
 8002f5a:	6013      	str	r3, [r2, #0]

				}
				HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	4913      	ldr	r1, [pc, #76]	@ (8002fac <HAL_UART_RxCpltCallback+0x198>)
 8002f60:	4813      	ldr	r0, [pc, #76]	@ (8002fb0 <HAL_UART_RxCpltCallback+0x19c>)
 8002f62:	f005 fa07 	bl	8008374 <HAL_UART_Receive_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8002f66:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <HAL_UART_RxCpltCallback+0x1a0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <HAL_UART_RxCpltCallback+0x1a0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0204 	bic.w	r2, r2, #4
 8002f74:	601a      	str	r2, [r3, #0]
				}

}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40013800 	.word	0x40013800
 8002f84:	20000be8 	.word	0x20000be8
 8002f88:	20000be4 	.word	0x20000be4
 8002f8c:	200008a4 	.word	0x200008a4
 8002f90:	20000aa4 	.word	0x20000aa4
 8002f94:	20000dac 	.word	0x20000dac
 8002f98:	20000f00 	.word	0x20000f00
 8002f9c:	40008000 	.word	0x40008000
 8002fa0:	20000bf0 	.word	0x20000bf0
 8002fa4:	20000bec 	.word	0x20000bec
 8002fa8:	2000079c 	.word	0x2000079c
 8002fac:	2000089c 	.word	0x2000089c
 8002fb0:	20000d18 	.word	0x20000d18
 8002fb4:	20000e40 	.word	0x20000e40

08002fb8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002fbc:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <MX_USB_PCD_Init+0x48>)
 8002fbe:	4a11      	ldr	r2, [pc, #68]	@ (8003004 <MX_USB_PCD_Init+0x4c>)
 8002fc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <MX_USB_PCD_Init+0x48>)
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003000 <MX_USB_PCD_Init+0x48>)
 8002fca:	2202      	movs	r2, #2
 8002fcc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002fce:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <MX_USB_PCD_Init+0x48>)
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <MX_USB_PCD_Init+0x48>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <MX_USB_PCD_Init+0x48>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <MX_USB_PCD_Init+0x48>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <MX_USB_PCD_Init+0x48>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002fec:	4804      	ldr	r0, [pc, #16]	@ (8003000 <MX_USB_PCD_Init+0x48>)
 8002fee:	f002 fa90 	bl	8005512 <HAL_PCD_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002ff8:	f7ff f9c1 	bl	800237e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000f60 	.word	0x20000f60
 8003004:	40005c00 	.word	0x40005c00

08003008 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b094      	sub	sp, #80	@ 0x50
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	2244      	movs	r2, #68	@ 0x44
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f00b f94c 	bl	800e2b6 <memset>
  if(pcdHandle->Instance==USB)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a11      	ldr	r2, [pc, #68]	@ (8003068 <HAL_PCD_MspInit+0x60>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d11a      	bne.n	800305e <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003028:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800302c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800302e:	2300      	movs	r3, #0
 8003030:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003032:	f107 030c 	add.w	r3, r7, #12
 8003036:	4618      	mov	r0, r3
 8003038:	f003 f942 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8003042:	f7ff f99c 	bl	800237e <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003046:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_PCD_MspInit+0x64>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	4a08      	ldr	r2, [pc, #32]	@ (800306c <HAL_PCD_MspInit+0x64>)
 800304c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003050:	6593      	str	r3, [r2, #88]	@ 0x58
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_PCD_MspInit+0x64>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800305e:	bf00      	nop
 8003060:	3750      	adds	r7, #80	@ 0x50
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40005c00 	.word	0x40005c00
 800306c:	40021000 	.word	0x40021000

08003070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003070:	480d      	ldr	r0, [pc, #52]	@ (80030a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003072:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003074:	f7ff fba6 	bl	80027c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003078:	480c      	ldr	r0, [pc, #48]	@ (80030ac <LoopForever+0x6>)
  ldr r1, =_edata
 800307a:	490d      	ldr	r1, [pc, #52]	@ (80030b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800307c:	4a0d      	ldr	r2, [pc, #52]	@ (80030b4 <LoopForever+0xe>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003080:	e002      	b.n	8003088 <LoopCopyDataInit>

08003082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003086:	3304      	adds	r3, #4

08003088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800308c:	d3f9      	bcc.n	8003082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800308e:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003090:	4c0a      	ldr	r4, [pc, #40]	@ (80030bc <LoopForever+0x16>)
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003094:	e001      	b.n	800309a <LoopFillZerobss>

08003096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003098:	3204      	adds	r2, #4

0800309a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800309c:	d3fb      	bcc.n	8003096 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800309e:	f00b f985 	bl	800e3ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030a2:	f7ff f851 	bl	8002148 <main>

080030a6 <LoopForever>:

LoopForever:
    b LoopForever
 80030a6:	e7fe      	b.n	80030a6 <LoopForever>
  ldr   r0, =_estack
 80030a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80030ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80030b4:	08011184 	.word	0x08011184
  ldr r2, =_sbss
 80030b8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80030bc:	200013c8 	.word	0x200013c8

080030c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030c0:	e7fe      	b.n	80030c0 <ADC1_2_IRQHandler>

080030c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f001 fb99 	bl	8004804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030d2:	200f      	movs	r0, #15
 80030d4:	f000 f80e 	bl	80030f4 <HAL_InitTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	71fb      	strb	r3, [r7, #7]
 80030e2:	e001      	b.n	80030e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030e4:	f7ff f9d2 	bl	800248c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030e8:	79fb      	ldrb	r3, [r7, #7]

}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003100:	4b16      	ldr	r3, [pc, #88]	@ (800315c <HAL_InitTick+0x68>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d022      	beq.n	800314e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003108:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <HAL_InitTick+0x6c>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b13      	ldr	r3, [pc, #76]	@ (800315c <HAL_InitTick+0x68>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003114:	fbb1 f3f3 	udiv	r3, r1, r3
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f001 fba4 	bl	800486a <HAL_SYSTICK_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10f      	bne.n	8003148 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	d809      	bhi.n	8003142 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800312e:	2200      	movs	r2, #0
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
 8003136:	f001 fb70 	bl	800481a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <HAL_InitTick+0x70>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	e007      	b.n	8003152 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	e004      	b.n	8003152 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e001      	b.n	8003152 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000014 	.word	0x20000014
 8003160:	2000000c 	.word	0x2000000c
 8003164:	20000010 	.word	0x20000010

08003168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_IncTick+0x1c>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <HAL_IncTick+0x20>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4413      	add	r3, r2
 8003176:	4a03      	ldr	r2, [pc, #12]	@ (8003184 <HAL_IncTick+0x1c>)
 8003178:	6013      	str	r3, [r2, #0]
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	2000123c 	.word	0x2000123c
 8003188:	20000014 	.word	0x20000014

0800318c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return uwTick;
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <HAL_GetTick+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	2000123c 	.word	0x2000123c

080031a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7ff ffee 	bl	800318c <HAL_GetTick>
 80031b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d004      	beq.n	80031c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80031be:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <HAL_Delay+0x40>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031c8:	bf00      	nop
 80031ca:	f7ff ffdf 	bl	800318c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d8f7      	bhi.n	80031ca <HAL_Delay+0x26>
  {
  }
}
 80031da:	bf00      	nop
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000014 	.word	0x20000014

080031e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3360      	adds	r3, #96	@ 0x60
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b08      	ldr	r3, [pc, #32]	@ (8003294 <LL_ADC_SetOffset+0x44>)
 8003272:	4013      	ands	r3, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	4313      	orrs	r3, r2
 8003280:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	03fff000 	.word	0x03fff000

08003298 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3360      	adds	r3, #96	@ 0x60
 80032a6:	461a      	mov	r2, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3360      	adds	r3, #96	@ 0x60
 80032d4:	461a      	mov	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b087      	sub	sp, #28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3360      	adds	r3, #96	@ 0x60
 800330a:	461a      	mov	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	431a      	orrs	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3360      	adds	r3, #96	@ 0x60
 8003340:	461a      	mov	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	431a      	orrs	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	615a      	str	r2, [r3, #20]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b087      	sub	sp, #28
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3330      	adds	r3, #48	@ 0x30
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	4413      	add	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	211f      	movs	r1, #31
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	401a      	ands	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	f003 011f 	and.w	r1, r3, #31
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	431a      	orrs	r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800340a:	b480      	push	{r7}
 800340c:	b087      	sub	sp, #28
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3314      	adds	r3, #20
 800341a:	461a      	mov	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	0e5b      	lsrs	r3, r3, #25
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	4413      	add	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	0d1b      	lsrs	r3, r3, #20
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2107      	movs	r1, #7
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	401a      	ands	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	0d1b      	lsrs	r3, r3, #20
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	431a      	orrs	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003478:	43db      	mvns	r3, r3
 800347a:	401a      	ands	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0318 	and.w	r3, r3, #24
 8003482:	4908      	ldr	r1, [pc, #32]	@ (80034a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003484:	40d9      	lsrs	r1, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	400b      	ands	r3, r1
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	431a      	orrs	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	0007ffff 	.word	0x0007ffff

080034a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 031f 	and.w	r3, r3, #31
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80034d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6093      	str	r3, [r2, #8]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034fc:	d101      	bne.n	8003502 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003520:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003524:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003548:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800354c:	d101      	bne.n	8003552 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003570:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003574:	f043 0201 	orr.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <LL_ADC_IsEnabled+0x18>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <LL_ADC_IsEnabled+0x1a>
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035c2:	f043 0204 	orr.w	r2, r3, #4
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d101      	bne.n	80035ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d101      	bne.n	8003614 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b089      	sub	sp, #36	@ 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e167      	b.n	800390e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fd fd9b 	bl	8001188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff3f 	bl	80034e8 <LL_ADC_IsDeepPowerDownEnabled>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff25 	bl	80034c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff5a 	bl	8003538 <LL_ADC_IsInternalRegulatorEnabled>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ff3e 	bl	8003510 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003694:	4ba0      	ldr	r3, [pc, #640]	@ (8003918 <HAL_ADC_Init+0x2f4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	4aa0      	ldr	r2, [pc, #640]	@ (800391c <HAL_ADC_Init+0x2f8>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	3301      	adds	r3, #1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036a8:	e002      	b.n	80036b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f9      	bne.n	80036aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff ff3c 	bl	8003538 <LL_ADC_IsInternalRegulatorEnabled>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10d      	bne.n	80036e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	f043 0210 	orr.w	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff75 	bl	80035d6 <LL_ADC_REG_IsConversionOngoing>
 80036ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f040 8100 	bne.w	80038fc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 80fc 	bne.w	80038fc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800370c:	f043 0202 	orr.w	r2, r3, #2
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff35 	bl	8003588 <LL_ADC_IsEnabled>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d111      	bne.n	8003748 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003724:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003728:	f7ff ff2e 	bl	8003588 <LL_ADC_IsEnabled>
 800372c:	4604      	mov	r4, r0
 800372e:	487c      	ldr	r0, [pc, #496]	@ (8003920 <HAL_ADC_Init+0x2fc>)
 8003730:	f7ff ff2a 	bl	8003588 <LL_ADC_IsEnabled>
 8003734:	4603      	mov	r3, r0
 8003736:	4323      	orrs	r3, r4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4619      	mov	r1, r3
 8003742:	4878      	ldr	r0, [pc, #480]	@ (8003924 <HAL_ADC_Init+0x300>)
 8003744:	f7ff fd50 	bl	80031e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7f5b      	ldrb	r3, [r3, #29]
 800374c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003752:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003758:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800375e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003766:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003772:	2b01      	cmp	r3, #1
 8003774:	d106      	bne.n	8003784 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	3b01      	subs	r3, #1
 800377c:	045b      	lsls	r3, r3, #17
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	4b60      	ldr	r3, [pc, #384]	@ (8003928 <HAL_ADC_Init+0x304>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ff14 	bl	80035fc <LL_ADC_INJ_IsConversionOngoing>
 80037d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d16d      	bne.n	80038b8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d16a      	bne.n	80038b8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037e6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037fe:	f023 0302 	bic.w	r3, r3, #2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	69b9      	ldr	r1, [r7, #24]
 8003808:	430b      	orrs	r3, r1
 800380a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d017      	beq.n	8003844 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003822:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800382c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003830:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6911      	ldr	r1, [r2, #16]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	430b      	orrs	r3, r1
 800383e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003842:	e013      	b.n	800386c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003852:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003864:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003868:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003872:	2b01      	cmp	r3, #1
 8003874:	d118      	bne.n	80038a8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003898:	430a      	orrs	r2, r1
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	611a      	str	r2, [r3, #16]
 80038a6:	e007      	b.n	80038b8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10c      	bne.n	80038da <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	f023 010f 	bic.w	r1, r3, #15
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	1e5a      	subs	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80038d8:	e007      	b.n	80038ea <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 020f 	bic.w	r2, r2, #15
 80038e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038fa:	e007      	b.n	800390c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	f043 0210 	orr.w	r2, r3, #16
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800390c:	7ffb      	ldrb	r3, [r7, #31]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	@ 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd90      	pop	{r4, r7, pc}
 8003916:	bf00      	nop
 8003918:	2000000c 	.word	0x2000000c
 800391c:	053e2d63 	.word	0x053e2d63
 8003920:	50000100 	.word	0x50000100
 8003924:	50000300 	.word	0x50000300
 8003928:	fff04007 	.word	0xfff04007

0800392c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003938:	4851      	ldr	r0, [pc, #324]	@ (8003a80 <HAL_ADC_Start_DMA+0x154>)
 800393a:	f7ff fdb5 	bl	80034a8 <LL_ADC_GetMultimode>
 800393e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fe46 	bl	80035d6 <LL_ADC_REG_IsConversionOngoing>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	f040 808f 	bne.w	8003a70 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_ADC_Start_DMA+0x34>
 800395c:	2302      	movs	r3, #2
 800395e:	e08a      	b.n	8003a76 <HAL_ADC_Start_DMA+0x14a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b05      	cmp	r3, #5
 8003972:	d002      	beq.n	800397a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b09      	cmp	r3, #9
 8003978:	d173      	bne.n	8003a62 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fc8e 	bl	800429c <ADC_Enable>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d166      	bne.n	8003a58 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a38      	ldr	r2, [pc, #224]	@ (8003a84 <HAL_ADC_Start_DMA+0x158>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d002      	beq.n	80039ae <HAL_ADC_Start_DMA+0x82>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	e001      	b.n	80039b2 <HAL_ADC_Start_DMA+0x86>
 80039ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d002      	beq.n	80039c0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039dc:	f023 0206 	bic.w	r2, r3, #6
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	661a      	str	r2, [r3, #96]	@ 0x60
 80039e4:	e002      	b.n	80039ec <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	4a25      	ldr	r2, [pc, #148]	@ (8003a88 <HAL_ADC_Start_DMA+0x15c>)
 80039f2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	4a24      	ldr	r2, [pc, #144]	@ (8003a8c <HAL_ADC_Start_DMA+0x160>)
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a00:	4a23      	ldr	r2, [pc, #140]	@ (8003a90 <HAL_ADC_Start_DMA+0x164>)
 8003a02:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	221c      	movs	r2, #28
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0210 	orr.w	r2, r2, #16
 8003a22:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3340      	adds	r3, #64	@ 0x40
 8003a3e:	4619      	mov	r1, r3
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f000 ffc6 	bl	80049d4 <HAL_DMA_Start_IT>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fdac 	bl	80035ae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003a56:	e00d      	b.n	8003a74 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003a60:	e008      	b.n	8003a74 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003a6e:	e001      	b.n	8003a74 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
 8003a72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	50000300 	.word	0x50000300
 8003a84:	50000100 	.word	0x50000100
 8003a88:	080043a9 	.word	0x080043a9
 8003a8c:	08004481 	.word	0x08004481
 8003a90:	0800449d 	.word	0x0800449d

08003a94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b0b6      	sub	sp, #216	@ 0xd8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x22>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e3c8      	b.n	8004270 <HAL_ADC_ConfigChannel+0x7b4>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fd73 	bl	80035d6 <LL_ADC_REG_IsConversionOngoing>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 83ad 	bne.w	8004252 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	f7ff fc54 	bl	80033b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fd61 	bl	80035d6 <LL_ADC_REG_IsConversionOngoing>
 8003b14:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fd6d 	bl	80035fc <LL_ADC_INJ_IsConversionOngoing>
 8003b22:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f040 81d9 	bne.w	8003ee2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 81d4 	bne.w	8003ee2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b42:	d10f      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7ff fc5b 	bl	800340a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fc02 	bl	8003366 <LL_ADC_SetSamplingTimeCommonConfig>
 8003b62:	e00e      	b.n	8003b82 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	461a      	mov	r2, r3
 8003b72:	f7ff fc4a 	bl	800340a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fbf2 	bl	8003366 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d022      	beq.n	8003bea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6919      	ldr	r1, [r3, #16]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bb4:	f7ff fb4c 	bl	8003250 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6919      	ldr	r1, [r3, #16]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f7ff fb98 	bl	80032fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x124>
 8003bda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bde:	e000      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x126>
 8003be0:	2300      	movs	r3, #0
 8003be2:	461a      	mov	r2, r3
 8003be4:	f7ff fba4 	bl	8003330 <LL_ADC_SetOffsetSaturation>
 8003be8:	e17b      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fb51 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x15a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fb46 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	0e9b      	lsrs	r3, r3, #26
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	e01e      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x198>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fb3b 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003c44:	2320      	movs	r3, #32
 8003c46:	e004      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d105      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1b0>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	e018      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x1e2>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003c90:	2320      	movs	r3, #32
 8003c92:	e004      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003c94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c98:	fab3 f383 	clz	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d106      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fb0a 	bl	80032c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff faee 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x220>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fae3 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	0e9b      	lsrs	r3, r3, #26
 8003cd6:	f003 021f 	and.w	r2, r3, #31
 8003cda:	e01e      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x25e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fad8 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003cfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003d02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003d0a:	2320      	movs	r3, #32
 8003d0c:	e004      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d105      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x276>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	0e9b      	lsrs	r3, r3, #26
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	e018      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x2a8>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003d46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003d56:	2320      	movs	r3, #32
 8003d58:	e004      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d5e:	fab3 f383 	clz	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d106      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2101      	movs	r1, #1
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff faa7 	bl	80032c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fa8b 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x2e6>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2102      	movs	r1, #2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fa80 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	0e9b      	lsrs	r3, r3, #26
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	e01e      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x324>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2102      	movs	r1, #2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fa75 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	e004      	b.n	8003dde <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x33c>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0e9b      	lsrs	r3, r3, #26
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	e016      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x36a>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003e0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003e18:	2320      	movs	r3, #32
 8003e1a:	e004      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e20:	fab3 f383 	clz	r3, r3
 8003e24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d106      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2102      	movs	r1, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fa46 	bl	80032c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2103      	movs	r1, #3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fa2a 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x3a8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2103      	movs	r1, #3
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fa1f 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	0e9b      	lsrs	r3, r3, #26
 8003e5e:	f003 021f 	and.w	r2, r3, #31
 8003e62:	e017      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x3d8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2103      	movs	r1, #3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fa14 	bl	8003298 <LL_ADC_GetOffsetChannel>
 8003e70:	4603      	mov	r3, r0
 8003e72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003e7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e7e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003e86:	2320      	movs	r3, #32
 8003e88:	e003      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003e8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e8c:	fab3 f383 	clz	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x3f0>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	0e9b      	lsrs	r3, r3, #26
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	e011      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x414>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003eba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ebc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	e003      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d106      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2103      	movs	r1, #3
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff f9f1 	bl	80032c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fb4e 	bl	8003588 <LL_ADC_IsEnabled>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 8140 	bne.w	8004174 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6819      	ldr	r1, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	461a      	mov	r2, r3
 8003f02:	f7ff faad 	bl	8003460 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a8f      	ldr	r2, [pc, #572]	@ (8004148 <HAL_ADC_ConfigChannel+0x68c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	f040 8131 	bne.w	8004174 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x47e>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	0e9b      	lsrs	r3, r3, #26
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2b09      	cmp	r3, #9
 8003f30:	bf94      	ite	ls
 8003f32:	2301      	movls	r3, #1
 8003f34:	2300      	movhi	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e019      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x4b2>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003f48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f4a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003f52:	2320      	movs	r3, #32
 8003f54:	e003      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f58:	fab3 f383 	clz	r3, r3
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2b09      	cmp	r3, #9
 8003f66:	bf94      	ite	ls
 8003f68:	2301      	movls	r3, #1
 8003f6a:	2300      	movhi	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d079      	beq.n	8004066 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x4d2>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	0e9b      	lsrs	r3, r3, #26
 8003f84:	3301      	adds	r3, #1
 8003f86:	069b      	lsls	r3, r3, #26
 8003f88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f8c:	e015      	b.n	8003fba <HAL_ADC_ConfigChannel+0x4fe>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f9e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	e003      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	069b      	lsls	r3, r3, #26
 8003fb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x51e>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	0e9b      	lsrs	r3, r3, #26
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	e017      	b.n	800400a <HAL_ADC_ConfigChannel+0x54e>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003fec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	e003      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003ff6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	3301      	adds	r3, #1
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	ea42 0103 	orr.w	r1, r2, r3
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x574>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	0e9b      	lsrs	r3, r3, #26
 8004020:	3301      	adds	r3, #1
 8004022:	f003 021f 	and.w	r2, r3, #31
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	051b      	lsls	r3, r3, #20
 800402e:	e018      	b.n	8004062 <HAL_ADC_ConfigChannel+0x5a6>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800403e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004048:	2320      	movs	r3, #32
 800404a:	e003      	b.n	8004054 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800404c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404e:	fab3 f383 	clz	r3, r3
 8004052:	b2db      	uxtb	r3, r3
 8004054:	3301      	adds	r3, #1
 8004056:	f003 021f 	and.w	r2, r3, #31
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004062:	430b      	orrs	r3, r1
 8004064:	e081      	b.n	800416a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x5c6>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	0e9b      	lsrs	r3, r3, #26
 8004078:	3301      	adds	r3, #1
 800407a:	069b      	lsls	r3, r3, #26
 800407c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004080:	e015      	b.n	80040ae <HAL_ADC_ConfigChannel+0x5f2>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004092:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800409a:	2320      	movs	r3, #32
 800409c:	e003      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	3301      	adds	r3, #1
 80040a8:	069b      	lsls	r3, r3, #26
 80040aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x612>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0e9b      	lsrs	r3, r3, #26
 80040c0:	3301      	adds	r3, #1
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	2101      	movs	r1, #1
 80040c8:	fa01 f303 	lsl.w	r3, r1, r3
 80040cc:	e017      	b.n	80040fe <HAL_ADC_ConfigChannel+0x642>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	61fb      	str	r3, [r7, #28]
  return result;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e003      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	3301      	adds	r3, #1
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	2101      	movs	r1, #1
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	ea42 0103 	orr.w	r1, r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10d      	bne.n	800412a <HAL_ADC_ConfigChannel+0x66e>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	0e9b      	lsrs	r3, r3, #26
 8004114:	3301      	adds	r3, #1
 8004116:	f003 021f 	and.w	r2, r3, #31
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	3b1e      	subs	r3, #30
 8004122:	051b      	lsls	r3, r3, #20
 8004124:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004128:	e01e      	b.n	8004168 <HAL_ADC_ConfigChannel+0x6ac>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	613b      	str	r3, [r7, #16]
  return result;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d104      	bne.n	800414c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004142:	2320      	movs	r3, #32
 8004144:	e006      	b.n	8004154 <HAL_ADC_ConfigChannel+0x698>
 8004146:	bf00      	nop
 8004148:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f003 021f 	and.w	r2, r3, #31
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	3b1e      	subs	r3, #30
 8004162:	051b      	lsls	r3, r3, #20
 8004164:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004168:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800416e:	4619      	mov	r1, r3
 8004170:	f7ff f94b 	bl	800340a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b3f      	ldr	r3, [pc, #252]	@ (8004278 <HAL_ADC_ConfigChannel+0x7bc>)
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d071      	beq.n	8004264 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004180:	483e      	ldr	r0, [pc, #248]	@ (800427c <HAL_ADC_ConfigChannel+0x7c0>)
 8004182:	f7ff f857 	bl	8003234 <LL_ADC_GetCommonPathInternalCh>
 8004186:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3c      	ldr	r2, [pc, #240]	@ (8004280 <HAL_ADC_ConfigChannel+0x7c4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_ADC_ConfigChannel+0x6e2>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3a      	ldr	r2, [pc, #232]	@ (8004284 <HAL_ADC_ConfigChannel+0x7c8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d127      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800419e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d121      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b2:	d157      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041bc:	4619      	mov	r1, r3
 80041be:	482f      	ldr	r0, [pc, #188]	@ (800427c <HAL_ADC_ConfigChannel+0x7c0>)
 80041c0:	f7ff f825 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041c4:	4b30      	ldr	r3, [pc, #192]	@ (8004288 <HAL_ADC_ConfigChannel+0x7cc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	099b      	lsrs	r3, r3, #6
 80041ca:	4a30      	ldr	r2, [pc, #192]	@ (800428c <HAL_ADC_ConfigChannel+0x7d0>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041de:	e002      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f9      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ec:	e03a      	b.n	8004264 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a27      	ldr	r2, [pc, #156]	@ (8004290 <HAL_ADC_ConfigChannel+0x7d4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d113      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10d      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a22      	ldr	r2, [pc, #136]	@ (8004294 <HAL_ADC_ConfigChannel+0x7d8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d02a      	beq.n	8004264 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800420e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004216:	4619      	mov	r1, r3
 8004218:	4818      	ldr	r0, [pc, #96]	@ (800427c <HAL_ADC_ConfigChannel+0x7c0>)
 800421a:	f7fe fff8 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800421e:	e021      	b.n	8004264 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1c      	ldr	r2, [pc, #112]	@ (8004298 <HAL_ADC_ConfigChannel+0x7dc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d11c      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800422a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800422e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d116      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a16      	ldr	r2, [pc, #88]	@ (8004294 <HAL_ADC_ConfigChannel+0x7d8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d011      	beq.n	8004264 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004248:	4619      	mov	r1, r3
 800424a:	480c      	ldr	r0, [pc, #48]	@ (800427c <HAL_ADC_ConfigChannel+0x7c0>)
 800424c:	f7fe ffdf 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
 8004250:	e008      	b.n	8004264 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800426c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004270:	4618      	mov	r0, r3
 8004272:	37d8      	adds	r7, #216	@ 0xd8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	80080000 	.word	0x80080000
 800427c:	50000300 	.word	0x50000300
 8004280:	c3210000 	.word	0xc3210000
 8004284:	90c00010 	.word	0x90c00010
 8004288:	2000000c 	.word	0x2000000c
 800428c:	053e2d63 	.word	0x053e2d63
 8004290:	c7520000 	.word	0xc7520000
 8004294:	50000100 	.word	0x50000100
 8004298:	cb840000 	.word	0xcb840000

0800429c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff f96b 	bl	8003588 <LL_ADC_IsEnabled>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d169      	bne.n	800438c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	4b36      	ldr	r3, [pc, #216]	@ (8004398 <ADC_Enable+0xfc>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ca:	f043 0210 	orr.w	r2, r3, #16
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d6:	f043 0201 	orr.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e055      	b.n	800438e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff f93a 	bl	8003560 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80042ec:	482b      	ldr	r0, [pc, #172]	@ (800439c <ADC_Enable+0x100>)
 80042ee:	f7fe ffa1 	bl	8003234 <LL_ADC_GetCommonPathInternalCh>
 80042f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80042f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042fc:	4b28      	ldr	r3, [pc, #160]	@ (80043a0 <ADC_Enable+0x104>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	099b      	lsrs	r3, r3, #6
 8004302:	4a28      	ldr	r2, [pc, #160]	@ (80043a4 <ADC_Enable+0x108>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	099b      	lsrs	r3, r3, #6
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004316:	e002      	b.n	800431e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	3b01      	subs	r3, #1
 800431c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f9      	bne.n	8004318 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004324:	f7fe ff32 	bl	800318c <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800432a:	e028      	b.n	800437e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff f929 	bl	8003588 <LL_ADC_IsEnabled>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff f90d 	bl	8003560 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004346:	f7fe ff21 	bl	800318c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d914      	bls.n	800437e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b01      	cmp	r3, #1
 8004360:	d00d      	beq.n	800437e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	f043 0210 	orr.w	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e007      	b.n	800438e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d1cf      	bne.n	800432c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	8000003f 	.word	0x8000003f
 800439c:	50000300 	.word	0x50000300
 80043a0:	2000000c 	.word	0x2000000c
 80043a4:	053e2d63 	.word	0x053e2d63

080043a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d14b      	bne.n	800445a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d021      	beq.n	8004420 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe ffd3 	bl	800338c <LL_ADC_REG_IsTriggerSourceSWStart>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d032      	beq.n	8004452 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d12b      	bne.n	8004452 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11f      	bne.n	8004452 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004416:	f043 0201 	orr.w	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800441e:	e018      	b.n	8004452 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d111      	bne.n	8004452 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004432:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7fc ff1c 	bl	8001290 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004458:	e00e      	b.n	8004478 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fb1e 	bl	8003aa8 <HAL_ADC_ErrorCallback>
}
 800446c:	e004      	b.n	8004478 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff fb00 	bl	8003a94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff faf0 	bl	8003aa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <LL_ADC_IsEnabled>:
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <LL_ADC_IsEnabled+0x18>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <LL_ADC_IsEnabled+0x1a>
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b04      	cmp	r3, #4
 8004508:	d101      	bne.n	800450e <LL_ADC_REG_IsConversionOngoing+0x18>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b0a1      	sub	sp, #132	@ 0x84
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004536:	2302      	movs	r3, #2
 8004538:	e08b      	b.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004542:	2300      	movs	r3, #0
 8004544:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004546:	2300      	movs	r3, #0
 8004548:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004552:	d102      	bne.n	800455a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004554:	4b41      	ldr	r3, [pc, #260]	@ (800465c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	e001      	b.n	800455e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e06a      	b.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ffb9 	bl	80044f6 <LL_ADC_REG_IsConversionOngoing>
 8004584:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff ffb3 	bl	80044f6 <LL_ADC_REG_IsConversionOngoing>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d14c      	bne.n	8004630 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004596:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004598:	2b00      	cmp	r3, #0
 800459a:	d149      	bne.n	8004630 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800459c:	4b30      	ldr	r3, [pc, #192]	@ (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800459e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d028      	beq.n	80045fa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80045a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045ba:	035b      	lsls	r3, r3, #13
 80045bc:	430b      	orrs	r3, r1
 80045be:	431a      	orrs	r2, r3
 80045c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80045c8:	f7ff ff82 	bl	80044d0 <LL_ADC_IsEnabled>
 80045cc:	4604      	mov	r4, r0
 80045ce:	4823      	ldr	r0, [pc, #140]	@ (800465c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80045d0:	f7ff ff7e 	bl	80044d0 <LL_ADC_IsEnabled>
 80045d4:	4603      	mov	r3, r0
 80045d6:	4323      	orrs	r3, r4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d133      	bne.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80045e4:	f023 030f 	bic.w	r3, r3, #15
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	6811      	ldr	r1, [r2, #0]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	6892      	ldr	r2, [r2, #8]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	431a      	orrs	r2, r3
 80045f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045f8:	e024      	b.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80045fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004604:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004606:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800460a:	f7ff ff61 	bl	80044d0 <LL_ADC_IsEnabled>
 800460e:	4604      	mov	r4, r0
 8004610:	4812      	ldr	r0, [pc, #72]	@ (800465c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004612:	f7ff ff5d 	bl	80044d0 <LL_ADC_IsEnabled>
 8004616:	4603      	mov	r3, r0
 8004618:	4323      	orrs	r3, r4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d112      	bne.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800461e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004626:	f023 030f 	bic.w	r3, r3, #15
 800462a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800462c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800462e:	e009      	b.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004642:	e000      	b.n	8004646 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004644:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800464e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004652:	4618      	mov	r0, r3
 8004654:	3784      	adds	r7, #132	@ 0x84
 8004656:	46bd      	mov	sp, r7
 8004658:	bd90      	pop	{r4, r7, pc}
 800465a:	bf00      	nop
 800465c:	50000100 	.word	0x50000100
 8004660:	50000300 	.word	0x50000300

08004664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004680:	4013      	ands	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800468c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004696:	4a04      	ldr	r2, [pc, #16]	@ (80046a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	60d3      	str	r3, [r2, #12]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b0:	4b04      	ldr	r3, [pc, #16]	@ (80046c4 <__NVIC_GetPriorityGrouping+0x18>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	f003 0307 	and.w	r3, r3, #7
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	e000ed00 	.word	0xe000ed00

080046c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	db0b      	blt.n	80046f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	f003 021f 	and.w	r2, r3, #31
 80046e0:	4907      	ldr	r1, [pc, #28]	@ (8004700 <__NVIC_EnableIRQ+0x38>)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2001      	movs	r0, #1
 80046ea:	fa00 f202 	lsl.w	r2, r0, r2
 80046ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e100 	.word	0xe000e100

08004704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	6039      	str	r1, [r7, #0]
 800470e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004714:	2b00      	cmp	r3, #0
 8004716:	db0a      	blt.n	800472e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	490c      	ldr	r1, [pc, #48]	@ (8004750 <__NVIC_SetPriority+0x4c>)
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	440b      	add	r3, r1
 8004728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800472c:	e00a      	b.n	8004744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4908      	ldr	r1, [pc, #32]	@ (8004754 <__NVIC_SetPriority+0x50>)
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	3b04      	subs	r3, #4
 800473c:	0112      	lsls	r2, r2, #4
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	440b      	add	r3, r1
 8004742:	761a      	strb	r2, [r3, #24]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	e000e100 	.word	0xe000e100
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004758:	b480      	push	{r7}
 800475a:	b089      	sub	sp, #36	@ 0x24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f1c3 0307 	rsb	r3, r3, #7
 8004772:	2b04      	cmp	r3, #4
 8004774:	bf28      	it	cs
 8004776:	2304      	movcs	r3, #4
 8004778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3304      	adds	r3, #4
 800477e:	2b06      	cmp	r3, #6
 8004780:	d902      	bls.n	8004788 <NVIC_EncodePriority+0x30>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3b03      	subs	r3, #3
 8004786:	e000      	b.n	800478a <NVIC_EncodePriority+0x32>
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800478c:	f04f 32ff 	mov.w	r2, #4294967295
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43da      	mvns	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	401a      	ands	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a0:	f04f 31ff 	mov.w	r1, #4294967295
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	43d9      	mvns	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b0:	4313      	orrs	r3, r2
         );
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3724      	adds	r7, #36	@ 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047d0:	d301      	bcc.n	80047d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047d2:	2301      	movs	r3, #1
 80047d4:	e00f      	b.n	80047f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004800 <SysTick_Config+0x40>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047de:	210f      	movs	r1, #15
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	f7ff ff8e 	bl	8004704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047e8:	4b05      	ldr	r3, [pc, #20]	@ (8004800 <SysTick_Config+0x40>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ee:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <SysTick_Config+0x40>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	e000e010 	.word	0xe000e010

08004804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff29 	bl	8004664 <__NVIC_SetPriorityGrouping>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	af00      	add	r7, sp, #0
 8004820:	4603      	mov	r3, r0
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004828:	f7ff ff40 	bl	80046ac <__NVIC_GetPriorityGrouping>
 800482c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	6978      	ldr	r0, [r7, #20]
 8004834:	f7ff ff90 	bl	8004758 <NVIC_EncodePriority>
 8004838:	4602      	mov	r2, r0
 800483a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff5f 	bl	8004704 <__NVIC_SetPriority>
}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	4603      	mov	r3, r0
 8004856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff33 	bl	80046c8 <__NVIC_EnableIRQ>
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ffa4 	bl	80047c0 <SysTick_Config>
 8004878:	4603      	mov	r3, r0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e08d      	b.n	80049b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	4b47      	ldr	r3, [pc, #284]	@ (80049bc <HAL_DMA_Init+0x138>)
 800489e:	429a      	cmp	r2, r3
 80048a0:	d80f      	bhi.n	80048c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	4b45      	ldr	r3, [pc, #276]	@ (80049c0 <HAL_DMA_Init+0x13c>)
 80048aa:	4413      	add	r3, r2
 80048ac:	4a45      	ldr	r2, [pc, #276]	@ (80049c4 <HAL_DMA_Init+0x140>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	009a      	lsls	r2, r3, #2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a42      	ldr	r2, [pc, #264]	@ (80049c8 <HAL_DMA_Init+0x144>)
 80048be:	641a      	str	r2, [r3, #64]	@ 0x40
 80048c0:	e00e      	b.n	80048e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	4b40      	ldr	r3, [pc, #256]	@ (80049cc <HAL_DMA_Init+0x148>)
 80048ca:	4413      	add	r3, r2
 80048cc:	4a3d      	ldr	r2, [pc, #244]	@ (80049c4 <HAL_DMA_Init+0x140>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	009a      	lsls	r2, r3, #2
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a3c      	ldr	r2, [pc, #240]	@ (80049d0 <HAL_DMA_Init+0x14c>)
 80048de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80048f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fa82 	bl	8004e3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004940:	d102      	bne.n	8004948 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800495c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d010      	beq.n	8004988 <HAL_DMA_Init+0x104>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d80c      	bhi.n	8004988 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 faa2 	bl	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	e008      	b.n	800499a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40020407 	.word	0x40020407
 80049c0:	bffdfff8 	.word	0xbffdfff8
 80049c4:	cccccccd 	.word	0xcccccccd
 80049c8:	40020000 	.word	0x40020000
 80049cc:	bffdfbf8 	.word	0xbffdfbf8
 80049d0:	40020400 	.word	0x40020400

080049d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_DMA_Start_IT+0x20>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e066      	b.n	8004ac2 <HAL_DMA_Start_IT+0xee>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d155      	bne.n	8004ab4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f9c7 	bl	8004dc0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 020e 	orr.w	r2, r2, #14
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e00f      	b.n	8004a6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0204 	bic.w	r2, r2, #4
 8004a5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 020a 	orr.w	r2, r2, #10
 8004a6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aa0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e005      	b.n	8004ac0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
 8004abe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d005      	beq.n	8004aee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
 8004aec:	e037      	b.n	8004b5e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 020e 	bic.w	r2, r2, #14
 8004afc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b0c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b22:	f003 021f 	and.w	r2, r3, #31
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b30:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b3a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00c      	beq.n	8004b5e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b52:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b5c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d00d      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2204      	movs	r2, #4
 8004b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
 8004bae:	e047      	b.n	8004c40 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 020e 	bic.w	r2, r2, #14
 8004bbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bfc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00c      	beq.n	8004c20 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
    }
  }
  return status;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d026      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x7a>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d021      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0204 	bic.w	r2, r2, #4
 8004c9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca2:	f003 021f 	and.w	r2, r3, #31
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	2104      	movs	r1, #4
 8004cac:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d071      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004cc2:	e06c      	b.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2202      	movs	r2, #2
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02e      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d029      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 020a 	bic.w	r2, r2, #10
 8004cfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0c:	f003 021f 	and.w	r2, r3, #31
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	2102      	movs	r1, #2
 8004d16:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d038      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d34:	e033      	b.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2208      	movs	r2, #8
 8004d40:	409a      	lsls	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d02a      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d025      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 020e 	bic.w	r2, r2, #14
 8004d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d68:	f003 021f 	and.w	r2, r3, #31
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	2101      	movs	r1, #1
 8004d72:	fa01 f202 	lsl.w	r2, r1, r2
 8004d76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d004      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
}
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dd6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dee:	f003 021f 	and.w	r2, r3, #31
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d108      	bne.n	8004e20 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e1e:	e007      	b.n	8004e30 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	60da      	str	r2, [r3, #12]
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b16      	ldr	r3, [pc, #88]	@ (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d802      	bhi.n	8004e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004e50:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e001      	b.n	8004e5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004e56:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e58:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	3b08      	subs	r3, #8
 8004e66:	4a12      	ldr	r2, [pc, #72]	@ (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e74:	089b      	lsrs	r3, r3, #2
 8004e76:	009a      	lsls	r2, r3, #2
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a0b      	ldr	r2, [pc, #44]	@ (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2201      	movs	r2, #1
 8004e90:	409a      	lsls	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40020407 	.word	0x40020407
 8004ea8:	40020800 	.word	0x40020800
 8004eac:	40020820 	.word	0x40020820
 8004eb0:	cccccccd 	.word	0xcccccccd
 8004eb4:	40020880 	.word	0x40020880

08004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a08      	ldr	r2, [pc, #32]	@ (8004efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004eda:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	f003 031f 	and.w	r3, r3, #31
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	1000823f 	.word	0x1000823f
 8004efc:	40020940 	.word	0x40020940

08004f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f0e:	e15a      	b.n	80051c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	2101      	movs	r1, #1
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 814c 	beq.w	80051c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d005      	beq.n	8004f40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d130      	bne.n	8004fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4013      	ands	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f76:	2201      	movs	r2, #1
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4013      	ands	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	f003 0201 	and.w	r2, r3, #1
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d017      	beq.n	8004fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	2203      	movs	r2, #3
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d123      	bne.n	8005032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	08da      	lsrs	r2, r3, #3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3208      	adds	r2, #8
 8004ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	220f      	movs	r2, #15
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43db      	mvns	r3, r3
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	08da      	lsrs	r2, r3, #3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3208      	adds	r2, #8
 800502c:	6939      	ldr	r1, [r7, #16]
 800502e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	2203      	movs	r2, #3
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f003 0203 	and.w	r2, r3, #3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80a6 	beq.w	80051c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005074:	4b5b      	ldr	r3, [pc, #364]	@ (80051e4 <HAL_GPIO_Init+0x2e4>)
 8005076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005078:	4a5a      	ldr	r2, [pc, #360]	@ (80051e4 <HAL_GPIO_Init+0x2e4>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005080:	4b58      	ldr	r3, [pc, #352]	@ (80051e4 <HAL_GPIO_Init+0x2e4>)
 8005082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800508c:	4a56      	ldr	r2, [pc, #344]	@ (80051e8 <HAL_GPIO_Init+0x2e8>)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	089b      	lsrs	r3, r3, #2
 8005092:	3302      	adds	r3, #2
 8005094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	220f      	movs	r2, #15
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4013      	ands	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80050b6:	d01f      	beq.n	80050f8 <HAL_GPIO_Init+0x1f8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a4c      	ldr	r2, [pc, #304]	@ (80051ec <HAL_GPIO_Init+0x2ec>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d019      	beq.n	80050f4 <HAL_GPIO_Init+0x1f4>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a4b      	ldr	r2, [pc, #300]	@ (80051f0 <HAL_GPIO_Init+0x2f0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <HAL_GPIO_Init+0x1f0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a4a      	ldr	r2, [pc, #296]	@ (80051f4 <HAL_GPIO_Init+0x2f4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00d      	beq.n	80050ec <HAL_GPIO_Init+0x1ec>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a49      	ldr	r2, [pc, #292]	@ (80051f8 <HAL_GPIO_Init+0x2f8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d007      	beq.n	80050e8 <HAL_GPIO_Init+0x1e8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a48      	ldr	r2, [pc, #288]	@ (80051fc <HAL_GPIO_Init+0x2fc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d101      	bne.n	80050e4 <HAL_GPIO_Init+0x1e4>
 80050e0:	2305      	movs	r3, #5
 80050e2:	e00a      	b.n	80050fa <HAL_GPIO_Init+0x1fa>
 80050e4:	2306      	movs	r3, #6
 80050e6:	e008      	b.n	80050fa <HAL_GPIO_Init+0x1fa>
 80050e8:	2304      	movs	r3, #4
 80050ea:	e006      	b.n	80050fa <HAL_GPIO_Init+0x1fa>
 80050ec:	2303      	movs	r3, #3
 80050ee:	e004      	b.n	80050fa <HAL_GPIO_Init+0x1fa>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e002      	b.n	80050fa <HAL_GPIO_Init+0x1fa>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_GPIO_Init+0x1fa>
 80050f8:	2300      	movs	r3, #0
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	f002 0203 	and.w	r2, r2, #3
 8005100:	0092      	lsls	r2, r2, #2
 8005102:	4093      	lsls	r3, r2
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800510a:	4937      	ldr	r1, [pc, #220]	@ (80051e8 <HAL_GPIO_Init+0x2e8>)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	089b      	lsrs	r3, r3, #2
 8005110:	3302      	adds	r3, #2
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005118:	4b39      	ldr	r3, [pc, #228]	@ (8005200 <HAL_GPIO_Init+0x300>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	43db      	mvns	r3, r3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4013      	ands	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800513c:	4a30      	ldr	r2, [pc, #192]	@ (8005200 <HAL_GPIO_Init+0x300>)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005142:	4b2f      	ldr	r3, [pc, #188]	@ (8005200 <HAL_GPIO_Init+0x300>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	43db      	mvns	r3, r3
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005166:	4a26      	ldr	r2, [pc, #152]	@ (8005200 <HAL_GPIO_Init+0x300>)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800516c:	4b24      	ldr	r3, [pc, #144]	@ (8005200 <HAL_GPIO_Init+0x300>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	43db      	mvns	r3, r3
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4013      	ands	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005190:	4a1b      	ldr	r2, [pc, #108]	@ (8005200 <HAL_GPIO_Init+0x300>)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005196:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <HAL_GPIO_Init+0x300>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	43db      	mvns	r3, r3
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051ba:	4a11      	ldr	r2, [pc, #68]	@ (8005200 <HAL_GPIO_Init+0x300>)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3301      	adds	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f ae9d 	bne.w	8004f10 <HAL_GPIO_Init+0x10>
  }
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40010000 	.word	0x40010000
 80051ec:	48000400 	.word	0x48000400
 80051f0:	48000800 	.word	0x48000800
 80051f4:	48000c00 	.word	0x48000c00
 80051f8:	48001000 	.word	0x48001000
 80051fc:	48001400 	.word	0x48001400
 8005200:	40010400 	.word	0x40010400

08005204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
 8005210:	4613      	mov	r3, r2
 8005212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005214:	787b      	ldrb	r3, [r7, #1]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800521a:	887a      	ldrh	r2, [r7, #2]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005220:	e002      	b.n	8005228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4013      	ands	r3, r2
 800524c:	041a      	lsls	r2, r3, #16
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	43d9      	mvns	r1, r3
 8005252:	887b      	ldrh	r3, [r7, #2]
 8005254:	400b      	ands	r3, r1
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	619a      	str	r2, [r3, #24]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005272:	4b08      	ldr	r3, [pc, #32]	@ (8005294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d006      	beq.n	800528c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800527e:	4a05      	ldr	r2, [pc, #20]	@ (8005294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f806 	bl	8005298 <HAL_GPIO_EXTI_Callback>
  }
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40010400 	.word	0x40010400

08005298 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e08d      	b.n	80053dc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fc febf 	bl	8002058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2224      	movs	r2, #36	@ 0x24
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800530e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d107      	bne.n	8005328 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005324:	609a      	str	r2, [r3, #8]
 8005326:	e006      	b.n	8005336 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005334:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d108      	bne.n	8005350 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800534c:	605a      	str	r2, [r3, #4]
 800534e:	e007      	b.n	8005360 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800535e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800536e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005372:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005382:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69d9      	ldr	r1, [r3, #28]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1a      	ldr	r2, [r3, #32]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d138      	bne.n	800546c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005404:	2302      	movs	r3, #2
 8005406:	e032      	b.n	800546e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2224      	movs	r2, #36	@ 0x24
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005436:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6819      	ldr	r1, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	e000      	b.n	800546e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800546c:	2302      	movs	r3, #2
  }
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b20      	cmp	r3, #32
 800548e:	d139      	bne.n	8005504 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800549a:	2302      	movs	r3, #2
 800549c:	e033      	b.n	8005506 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2224      	movs	r2, #36	@ 0x24
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0c0      	b.n	80056a6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fd fd65 	bl	8003008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2203      	movs	r2, #3
 8005542:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f004 fbfe 	bl	8009d4c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005550:	2300      	movs	r3, #0
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e03e      	b.n	80055d4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005556:	7bfa      	ldrb	r2, [r7, #15]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	440b      	add	r3, r1
 8005564:	3311      	adds	r3, #17
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800556a:	7bfa      	ldrb	r2, [r7, #15]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	440b      	add	r3, r1
 8005578:	3310      	adds	r3, #16
 800557a:	7bfa      	ldrb	r2, [r7, #15]
 800557c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800557e:	7bfa      	ldrb	r2, [r7, #15]
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	440b      	add	r3, r1
 800558c:	3313      	adds	r3, #19
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005592:	7bfa      	ldrb	r2, [r7, #15]
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	440b      	add	r3, r1
 80055a0:	3320      	adds	r3, #32
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055a6:	7bfa      	ldrb	r2, [r7, #15]
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	440b      	add	r3, r1
 80055b4:	3324      	adds	r3, #36	@ 0x24
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	440b      	add	r3, r1
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	3301      	adds	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	791b      	ldrb	r3, [r3, #4]
 80055d8:	7bfa      	ldrb	r2, [r7, #15]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d3bb      	bcc.n	8005556 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]
 80055e2:	e044      	b.n	800566e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055e4:	7bfa      	ldrb	r2, [r7, #15]
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	440b      	add	r3, r1
 80055f2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055fa:	7bfa      	ldrb	r2, [r7, #15]
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	440b      	add	r3, r1
 8005608:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800560c:	7bfa      	ldrb	r2, [r7, #15]
 800560e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005610:	7bfa      	ldrb	r2, [r7, #15]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	440b      	add	r3, r1
 800561e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005626:	7bfa      	ldrb	r2, [r7, #15]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	440b      	add	r3, r1
 8005634:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800563c:	7bfa      	ldrb	r2, [r7, #15]
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	440b      	add	r3, r1
 800564a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005652:	7bfa      	ldrb	r2, [r7, #15]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	440b      	add	r3, r1
 8005660:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	3301      	adds	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	791b      	ldrb	r3, [r3, #4]
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	429a      	cmp	r2, r3
 8005676:	d3b5      	bcc.n	80055e4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005684:	f004 fb7d 	bl	8009d82 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	7a9b      	ldrb	r3, [r3, #10]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d102      	bne.n	80056a4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f805 	bl	80056ae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d141      	bne.n	8005796 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005712:	4b4b      	ldr	r3, [pc, #300]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800571a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800571e:	d131      	bne.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005720:	4b47      	ldr	r3, [pc, #284]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005726:	4a46      	ldr	r2, [pc, #280]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800572c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005730:	4b43      	ldr	r3, [pc, #268]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005738:	4a41      	ldr	r2, [pc, #260]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800573e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005740:	4b40      	ldr	r3, [pc, #256]	@ (8005844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2232      	movs	r2, #50	@ 0x32
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	4a3f      	ldr	r2, [pc, #252]	@ (8005848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	0c9b      	lsrs	r3, r3, #18
 8005752:	3301      	adds	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005756:	e002      	b.n	800575e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b01      	subs	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800575e:	4b38      	ldr	r3, [pc, #224]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800576a:	d102      	bne.n	8005772 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f2      	bne.n	8005758 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005772:	4b33      	ldr	r3, [pc, #204]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577e:	d158      	bne.n	8005832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e057      	b.n	8005834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005784:	4b2e      	ldr	r3, [pc, #184]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800578a:	4a2d      	ldr	r2, [pc, #180]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005790:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005794:	e04d      	b.n	8005832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800579c:	d141      	bne.n	8005822 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800579e:	4b28      	ldr	r3, [pc, #160]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057aa:	d131      	bne.n	8005810 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057ac:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b2:	4a23      	ldr	r2, [pc, #140]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057bc:	4b20      	ldr	r3, [pc, #128]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2232      	movs	r2, #50	@ 0x32
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	0c9b      	lsrs	r3, r3, #18
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057e2:	e002      	b.n	80057ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ea:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f6:	d102      	bne.n	80057fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f2      	bne.n	80057e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057fe:	4b10      	ldr	r3, [pc, #64]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800580a:	d112      	bne.n	8005832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e011      	b.n	8005834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005810:	4b0b      	ldr	r3, [pc, #44]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005816:	4a0a      	ldr	r2, [pc, #40]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800581c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005820:	e007      	b.n	8005832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800582a:	4a05      	ldr	r2, [pc, #20]	@ (8005840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005830:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40007000 	.word	0x40007000
 8005844:	2000000c 	.word	0x2000000c
 8005848:	431bde83 	.word	0x431bde83

0800584c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	4a04      	ldr	r2, [pc, #16]	@ (8005868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800585a:	6093      	str	r3, [r2, #8]
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40007000 	.word	0x40007000

0800586c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e2fe      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d075      	beq.n	8005976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800588a:	4b97      	ldr	r3, [pc, #604]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
 8005892:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005894:	4b94      	ldr	r3, [pc, #592]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	d102      	bne.n	80058aa <HAL_RCC_OscConfig+0x3e>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d002      	beq.n	80058b0 <HAL_RCC_OscConfig+0x44>
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d10b      	bne.n	80058c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b0:	4b8d      	ldr	r3, [pc, #564]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d05b      	beq.n	8005974 <HAL_RCC_OscConfig+0x108>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d157      	bne.n	8005974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e2d9      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d0:	d106      	bne.n	80058e0 <HAL_RCC_OscConfig+0x74>
 80058d2:	4b85      	ldr	r3, [pc, #532]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a84      	ldr	r2, [pc, #528]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e01d      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058e8:	d10c      	bne.n	8005904 <HAL_RCC_OscConfig+0x98>
 80058ea:	4b7f      	ldr	r3, [pc, #508]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a7e      	ldr	r2, [pc, #504]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80058f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a7b      	ldr	r2, [pc, #492]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e00b      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 8005904:	4b78      	ldr	r3, [pc, #480]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a77      	ldr	r2, [pc, #476]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 800590a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b75      	ldr	r3, [pc, #468]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a74      	ldr	r2, [pc, #464]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800591a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fd fc32 	bl	800318c <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800592c:	f7fd fc2e 	bl	800318c <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	@ 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e29e      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800593e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0xc0>
 800594a:	e014      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fd fc1e 	bl	800318c <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005954:	f7fd fc1a 	bl	800318c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	@ 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e28a      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005966:	4b60      	ldr	r3, [pc, #384]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0xe8>
 8005972:	e000      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d075      	beq.n	8005a6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005982:	4b59      	ldr	r3, [pc, #356]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800598c:	4b56      	ldr	r3, [pc, #344]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b0c      	cmp	r3, #12
 800599a:	d102      	bne.n	80059a2 <HAL_RCC_OscConfig+0x136>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d002      	beq.n	80059a8 <HAL_RCC_OscConfig+0x13c>
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d11f      	bne.n	80059e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059a8:	4b4f      	ldr	r3, [pc, #316]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_OscConfig+0x154>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e25d      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c0:	4b49      	ldr	r3, [pc, #292]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	061b      	lsls	r3, r3, #24
 80059ce:	4946      	ldr	r1, [pc, #280]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059d4:	4b45      	ldr	r3, [pc, #276]	@ (8005aec <HAL_RCC_OscConfig+0x280>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fd fb8b 	bl	80030f4 <HAL_InitTick>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d043      	beq.n	8005a6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e249      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d023      	beq.n	8005a38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059f0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 80059f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fd fbc6 	bl	800318c <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a04:	f7fd fbc2 	bl	800318c <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e232      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a16:	4b34      	ldr	r3, [pc, #208]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a22:	4b31      	ldr	r3, [pc, #196]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	061b      	lsls	r3, r3, #24
 8005a30:	492d      	ldr	r1, [pc, #180]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	604b      	str	r3, [r1, #4]
 8005a36:	e01a      	b.n	8005a6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a38:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a44:	f7fd fba2 	bl	800318c <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a4c:	f7fd fb9e 	bl	800318c <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e20e      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a5e:	4b22      	ldr	r3, [pc, #136]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0x1e0>
 8005a6a:	e000      	b.n	8005a6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d041      	beq.n	8005afe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01c      	beq.n	8005abc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a82:	4b19      	ldr	r3, [pc, #100]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a88:	4a17      	ldr	r2, [pc, #92]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005a8a:	f043 0301 	orr.w	r3, r3, #1
 8005a8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a92:	f7fd fb7b 	bl	800318c <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a9a:	f7fd fb77 	bl	800318c <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e1e7      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aac:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ef      	beq.n	8005a9a <HAL_RCC_OscConfig+0x22e>
 8005aba:	e020      	b.n	8005afe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005abc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ac2:	4a09      	ldr	r2, [pc, #36]	@ (8005ae8 <HAL_RCC_OscConfig+0x27c>)
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fd fb5e 	bl	800318c <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ad2:	e00d      	b.n	8005af0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ad4:	f7fd fb5a 	bl	800318c <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d906      	bls.n	8005af0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e1ca      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005af0:	4b8c      	ldr	r3, [pc, #560]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1ea      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80a6 	beq.w	8005c58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b10:	4b84      	ldr	r3, [pc, #528]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_OscConfig+0x2b4>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x2b6>
 8005b20:	2300      	movs	r3, #0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b26:	4b7f      	ldr	r3, [pc, #508]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b32:	4b7c      	ldr	r3, [pc, #496]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b42:	4b79      	ldr	r3, [pc, #484]	@ (8005d28 <HAL_RCC_OscConfig+0x4bc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d118      	bne.n	8005b80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b4e:	4b76      	ldr	r3, [pc, #472]	@ (8005d28 <HAL_RCC_OscConfig+0x4bc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a75      	ldr	r2, [pc, #468]	@ (8005d28 <HAL_RCC_OscConfig+0x4bc>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b5a:	f7fd fb17 	bl	800318c <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b62:	f7fd fb13 	bl	800318c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e183      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b74:	4b6c      	ldr	r3, [pc, #432]	@ (8005d28 <HAL_RCC_OscConfig+0x4bc>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d108      	bne.n	8005b9a <HAL_RCC_OscConfig+0x32e>
 8005b88:	4b66      	ldr	r3, [pc, #408]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8e:	4a65      	ldr	r2, [pc, #404]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b98:	e024      	b.n	8005be4 <HAL_RCC_OscConfig+0x378>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d110      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x358>
 8005ba2:	4b60      	ldr	r3, [pc, #384]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba8:	4a5e      	ldr	r2, [pc, #376]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005baa:	f043 0304 	orr.w	r3, r3, #4
 8005bae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb8:	4a5a      	ldr	r2, [pc, #360]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bc2:	e00f      	b.n	8005be4 <HAL_RCC_OscConfig+0x378>
 8005bc4:	4b57      	ldr	r3, [pc, #348]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bca:	4a56      	ldr	r2, [pc, #344]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bd4:	4b53      	ldr	r3, [pc, #332]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bda:	4a52      	ldr	r2, [pc, #328]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005bdc:	f023 0304 	bic.w	r3, r3, #4
 8005be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d016      	beq.n	8005c1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bec:	f7fd face 	bl	800318c <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f7fd faca 	bl	800318c <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e138      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c0a:	4b46      	ldr	r3, [pc, #280]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0ed      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x388>
 8005c18:	e015      	b.n	8005c46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1a:	f7fd fab7 	bl	800318c <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c20:	e00a      	b.n	8005c38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c22:	f7fd fab3 	bl	800318c <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e121      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c38:	4b3a      	ldr	r3, [pc, #232]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1ed      	bne.n	8005c22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c46:	7ffb      	ldrb	r3, [r7, #31]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d105      	bne.n	8005c58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4c:	4b35      	ldr	r3, [pc, #212]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c50:	4a34      	ldr	r2, [pc, #208]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c56:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d03c      	beq.n	8005cde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01c      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c72:	4a2c      	ldr	r2, [pc, #176]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7c:	f7fd fa86 	bl	800318c <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c84:	f7fd fa82 	bl	800318c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e0f2      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c96:	4b23      	ldr	r3, [pc, #140]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ef      	beq.n	8005c84 <HAL_RCC_OscConfig+0x418>
 8005ca4:	e01b      	b.n	8005cde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cac:	4a1d      	ldr	r2, [pc, #116]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb6:	f7fd fa69 	bl	800318c <HAL_GetTick>
 8005cba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cbe:	f7fd fa65 	bl	800318c <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e0d5      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cd0:	4b14      	ldr	r3, [pc, #80]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ef      	bne.n	8005cbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80c9 	beq.w	8005e7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 030c 	and.w	r3, r3, #12
 8005cf0:	2b0c      	cmp	r3, #12
 8005cf2:	f000 8083 	beq.w	8005dfc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d15e      	bne.n	8005dbc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfe:	4b09      	ldr	r3, [pc, #36]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a08      	ldr	r2, [pc, #32]	@ (8005d24 <HAL_RCC_OscConfig+0x4b8>)
 8005d04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0a:	f7fd fa3f 	bl	800318c <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d10:	e00c      	b.n	8005d2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d12:	f7fd fa3b 	bl	800318c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d905      	bls.n	8005d2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e0ab      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d2c:	4b55      	ldr	r3, [pc, #340]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1ec      	bne.n	8005d12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d38:	4b52      	ldr	r3, [pc, #328]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	4b52      	ldr	r3, [pc, #328]	@ (8005e88 <HAL_RCC_OscConfig+0x61c>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6a11      	ldr	r1, [r2, #32]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d48:	3a01      	subs	r2, #1
 8005d4a:	0112      	lsls	r2, r2, #4
 8005d4c:	4311      	orrs	r1, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005d52:	0212      	lsls	r2, r2, #8
 8005d54:	4311      	orrs	r1, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d5a:	0852      	lsrs	r2, r2, #1
 8005d5c:	3a01      	subs	r2, #1
 8005d5e:	0552      	lsls	r2, r2, #21
 8005d60:	4311      	orrs	r1, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d66:	0852      	lsrs	r2, r2, #1
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	0652      	lsls	r2, r2, #25
 8005d6c:	4311      	orrs	r1, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d72:	06d2      	lsls	r2, r2, #27
 8005d74:	430a      	orrs	r2, r1
 8005d76:	4943      	ldr	r1, [pc, #268]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d7c:	4b41      	ldr	r3, [pc, #260]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a40      	ldr	r2, [pc, #256]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d88:	4b3e      	ldr	r3, [pc, #248]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	4a3d      	ldr	r2, [pc, #244]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fd f9fa 	bl	800318c <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fd f9f6 	bl	800318c <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e066      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dae:	4b35      	ldr	r3, [pc, #212]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x530>
 8005dba:	e05e      	b.n	8005e7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dbc:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a30      	ldr	r2, [pc, #192]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fd f9e0 	bl	800318c <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fd f9dc 	bl	800318c <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e04c      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005de2:	4b28      	ldr	r3, [pc, #160]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005dee:	4b25      	ldr	r3, [pc, #148]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	4924      	ldr	r1, [pc, #144]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005df4:	4b25      	ldr	r3, [pc, #148]	@ (8005e8c <HAL_RCC_OscConfig+0x620>)
 8005df6:	4013      	ands	r3, r2
 8005df8:	60cb      	str	r3, [r1, #12]
 8005dfa:	e03e      	b.n	8005e7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e039      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e08:	4b1e      	ldr	r3, [pc, #120]	@ (8005e84 <HAL_RCC_OscConfig+0x618>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f003 0203 	and.w	r2, r3, #3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d12c      	bne.n	8005e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e26:	3b01      	subs	r3, #1
 8005e28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d123      	bne.n	8005e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d11b      	bne.n	8005e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d113      	bne.n	8005e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d109      	bne.n	8005e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d001      	beq.n	8005e7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40021000 	.word	0x40021000
 8005e88:	019f800c 	.word	0x019f800c
 8005e8c:	feeefffc 	.word	0xfeeefffc

08005e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e11e      	b.n	80060e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea8:	4b91      	ldr	r3, [pc, #580]	@ (80060f0 <HAL_RCC_ClockConfig+0x260>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d910      	bls.n	8005ed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb6:	4b8e      	ldr	r3, [pc, #568]	@ (80060f0 <HAL_RCC_ClockConfig+0x260>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 020f 	bic.w	r2, r3, #15
 8005ebe:	498c      	ldr	r1, [pc, #560]	@ (80060f0 <HAL_RCC_ClockConfig+0x260>)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80060f0 <HAL_RCC_ClockConfig+0x260>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e106      	b.n	80060e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d073      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d129      	bne.n	8005f40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eec:	4b81      	ldr	r3, [pc, #516]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0f4      	b.n	80060e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005efc:	f000 f99c 	bl	8006238 <RCC_GetSysClockFreqFromPLLSource>
 8005f00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4a7c      	ldr	r2, [pc, #496]	@ (80060f8 <HAL_RCC_ClockConfig+0x268>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d93f      	bls.n	8005f8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d033      	beq.n	8005f8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d12f      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f2a:	4b72      	ldr	r3, [pc, #456]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f32:	4a70      	ldr	r2, [pc, #448]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f3a:	2380      	movs	r3, #128	@ 0x80
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e024      	b.n	8005f8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d107      	bne.n	8005f58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f48:	4b6a      	ldr	r3, [pc, #424]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0c6      	b.n	80060e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f58:	4b66      	ldr	r3, [pc, #408]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0be      	b.n	80060e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f68:	f000 f8ce 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 8005f6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4a61      	ldr	r2, [pc, #388]	@ (80060f8 <HAL_RCC_ClockConfig+0x268>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d909      	bls.n	8005f8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f76:	4b5f      	ldr	r3, [pc, #380]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f7e:	4a5d      	ldr	r2, [pc, #372]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f86:	2380      	movs	r3, #128	@ 0x80
 8005f88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f8a:	4b5a      	ldr	r3, [pc, #360]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f023 0203 	bic.w	r2, r3, #3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	4957      	ldr	r1, [pc, #348]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f9c:	f7fd f8f6 	bl	800318c <HAL_GetTick>
 8005fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa2:	e00a      	b.n	8005fba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa4:	f7fd f8f2 	bl	800318c <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e095      	b.n	80060e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fba:	4b4e      	ldr	r3, [pc, #312]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 020c 	and.w	r2, r3, #12
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d1eb      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d023      	beq.n	8006020 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fe4:	4b43      	ldr	r3, [pc, #268]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	4a42      	ldr	r2, [pc, #264]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005fea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005fee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006004:	4a3b      	ldr	r2, [pc, #236]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8006006:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800600a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800600c:	4b39      	ldr	r3, [pc, #228]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4936      	ldr	r1, [pc, #216]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 800601a:	4313      	orrs	r3, r2
 800601c:	608b      	str	r3, [r1, #8]
 800601e:	e008      	b.n	8006032 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b80      	cmp	r3, #128	@ 0x80
 8006024:	d105      	bne.n	8006032 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006026:	4b33      	ldr	r3, [pc, #204]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	4a32      	ldr	r2, [pc, #200]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 800602c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006030:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006032:	4b2f      	ldr	r3, [pc, #188]	@ (80060f0 <HAL_RCC_ClockConfig+0x260>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d21d      	bcs.n	800607c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006040:	4b2b      	ldr	r3, [pc, #172]	@ (80060f0 <HAL_RCC_ClockConfig+0x260>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 020f 	bic.w	r2, r3, #15
 8006048:	4929      	ldr	r1, [pc, #164]	@ (80060f0 <HAL_RCC_ClockConfig+0x260>)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	4313      	orrs	r3, r2
 800604e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006050:	f7fd f89c 	bl	800318c <HAL_GetTick>
 8006054:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006056:	e00a      	b.n	800606e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006058:	f7fd f898 	bl	800318c <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e03b      	b.n	80060e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606e:	4b20      	ldr	r3, [pc, #128]	@ (80060f0 <HAL_RCC_ClockConfig+0x260>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d1ed      	bne.n	8006058 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006088:	4b1a      	ldr	r3, [pc, #104]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	4917      	ldr	r1, [pc, #92]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 8006096:	4313      	orrs	r3, r2
 8006098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060a6:	4b13      	ldr	r3, [pc, #76]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	490f      	ldr	r1, [pc, #60]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060ba:	f000 f825 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 80060be:	4602      	mov	r2, r0
 80060c0:	4b0c      	ldr	r3, [pc, #48]	@ (80060f4 <HAL_RCC_ClockConfig+0x264>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	490c      	ldr	r1, [pc, #48]	@ (80060fc <HAL_RCC_ClockConfig+0x26c>)
 80060cc:	5ccb      	ldrb	r3, [r1, r3]
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	fa22 f303 	lsr.w	r3, r2, r3
 80060d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006100 <HAL_RCC_ClockConfig+0x270>)
 80060d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060da:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <HAL_RCC_ClockConfig+0x274>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fd f808 	bl	80030f4 <HAL_InitTick>
 80060e4:	4603      	mov	r3, r0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40022000 	.word	0x40022000
 80060f4:	40021000 	.word	0x40021000
 80060f8:	04c4b400 	.word	0x04c4b400
 80060fc:	08010c8c 	.word	0x08010c8c
 8006100:	2000000c 	.word	0x2000000c
 8006104:	20000010 	.word	0x20000010

08006108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800610e:	4b2c      	ldr	r3, [pc, #176]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b04      	cmp	r3, #4
 8006118:	d102      	bne.n	8006120 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800611a:	4b2a      	ldr	r3, [pc, #168]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	e047      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006120:	4b27      	ldr	r3, [pc, #156]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 030c 	and.w	r3, r3, #12
 8006128:	2b08      	cmp	r3, #8
 800612a:	d102      	bne.n	8006132 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800612c:	4b25      	ldr	r3, [pc, #148]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	e03e      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006132:	4b23      	ldr	r3, [pc, #140]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 030c 	and.w	r3, r3, #12
 800613a:	2b0c      	cmp	r3, #12
 800613c:	d136      	bne.n	80061ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800613e:	4b20      	ldr	r3, [pc, #128]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006148:	4b1d      	ldr	r3, [pc, #116]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	3301      	adds	r3, #1
 8006154:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b03      	cmp	r3, #3
 800615a:	d10c      	bne.n	8006176 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800615c:	4a19      	ldr	r2, [pc, #100]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006166:	68d2      	ldr	r2, [r2, #12]
 8006168:	0a12      	lsrs	r2, r2, #8
 800616a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800616e:	fb02 f303 	mul.w	r3, r2, r3
 8006172:	617b      	str	r3, [r7, #20]
      break;
 8006174:	e00c      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006176:	4a13      	ldr	r2, [pc, #76]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	fbb2 f3f3 	udiv	r3, r2, r3
 800617e:	4a10      	ldr	r2, [pc, #64]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006180:	68d2      	ldr	r2, [r2, #12]
 8006182:	0a12      	lsrs	r2, r2, #8
 8006184:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006188:	fb02 f303 	mul.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]
      break;
 800618e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006190:	4b0b      	ldr	r3, [pc, #44]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	0e5b      	lsrs	r3, r3, #25
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	3301      	adds	r3, #1
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	e001      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061b0:	693b      	ldr	r3, [r7, #16]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40021000 	.word	0x40021000
 80061c4:	00f42400 	.word	0x00f42400

080061c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061cc:	4b03      	ldr	r3, [pc, #12]	@ (80061dc <HAL_RCC_GetHCLKFreq+0x14>)
 80061ce:	681b      	ldr	r3, [r3, #0]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	2000000c 	.word	0x2000000c

080061e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80061e4:	f7ff fff0 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 80061e8:	4602      	mov	r2, r0
 80061ea:	4b06      	ldr	r3, [pc, #24]	@ (8006204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	4904      	ldr	r1, [pc, #16]	@ (8006208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061f6:	5ccb      	ldrb	r3, [r1, r3]
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40021000 	.word	0x40021000
 8006208:	08010c9c 	.word	0x08010c9c

0800620c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006210:	f7ff ffda 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 8006214:	4602      	mov	r2, r0
 8006216:	4b06      	ldr	r3, [pc, #24]	@ (8006230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	0adb      	lsrs	r3, r3, #11
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	4904      	ldr	r1, [pc, #16]	@ (8006234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006222:	5ccb      	ldrb	r3, [r1, r3]
 8006224:	f003 031f 	and.w	r3, r3, #31
 8006228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40021000 	.word	0x40021000
 8006234:	08010c9c 	.word	0x08010c9c

08006238 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800623e:	4b1e      	ldr	r3, [pc, #120]	@ (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006248:	4b1b      	ldr	r3, [pc, #108]	@ (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	3301      	adds	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d10c      	bne.n	8006276 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800625c:	4a17      	ldr	r2, [pc, #92]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	4a14      	ldr	r2, [pc, #80]	@ (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006266:	68d2      	ldr	r2, [r2, #12]
 8006268:	0a12      	lsrs	r2, r2, #8
 800626a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	617b      	str	r3, [r7, #20]
    break;
 8006274:	e00c      	b.n	8006290 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006276:	4a11      	ldr	r2, [pc, #68]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	4a0e      	ldr	r2, [pc, #56]	@ (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006280:	68d2      	ldr	r2, [r2, #12]
 8006282:	0a12      	lsrs	r2, r2, #8
 8006284:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	617b      	str	r3, [r7, #20]
    break;
 800628e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006290:	4b09      	ldr	r3, [pc, #36]	@ (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	0e5b      	lsrs	r3, r3, #25
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	3301      	adds	r3, #1
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80062aa:	687b      	ldr	r3, [r7, #4]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40021000 	.word	0x40021000
 80062bc:	00f42400 	.word	0x00f42400

080062c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062c8:	2300      	movs	r3, #0
 80062ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062cc:	2300      	movs	r3, #0
 80062ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8098 	beq.w	800640e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062de:	2300      	movs	r3, #0
 80062e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e2:	4b43      	ldr	r3, [pc, #268]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10d      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ee:	4b40      	ldr	r3, [pc, #256]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f2:	4a3f      	ldr	r2, [pc, #252]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80062fa:	4b3d      	ldr	r3, [pc, #244]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006306:	2301      	movs	r3, #1
 8006308:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800630a:	4b3a      	ldr	r3, [pc, #232]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a39      	ldr	r2, [pc, #228]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006316:	f7fc ff39 	bl	800318c <HAL_GetTick>
 800631a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800631c:	e009      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631e:	f7fc ff35 	bl	800318c <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d902      	bls.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	74fb      	strb	r3, [r7, #19]
        break;
 8006330:	e005      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006332:	4b30      	ldr	r3, [pc, #192]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0ef      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d159      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006344:	4b2a      	ldr	r3, [pc, #168]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800634e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01e      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	429a      	cmp	r2, r3
 800635e:	d019      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006360:	4b23      	ldr	r3, [pc, #140]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800636a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800636c:	4b20      	ldr	r3, [pc, #128]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006372:	4a1f      	ldr	r2, [pc, #124]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800637c:	4b1c      	ldr	r3, [pc, #112]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006382:	4a1b      	ldr	r2, [pc, #108]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800638c:	4a18      	ldr	r2, [pc, #96]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d016      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639e:	f7fc fef5 	bl	800318c <HAL_GetTick>
 80063a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a4:	e00b      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a6:	f7fc fef1 	bl	800318c <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d902      	bls.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	74fb      	strb	r3, [r7, #19]
            break;
 80063bc:	e006      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063be:	4b0c      	ldr	r3, [pc, #48]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0ec      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80063cc:	7cfb      	ldrb	r3, [r7, #19]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063d2:	4b07      	ldr	r3, [pc, #28]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	4903      	ldr	r1, [pc, #12]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063e8:	e008      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063ea:	7cfb      	ldrb	r3, [r7, #19]
 80063ec:	74bb      	strb	r3, [r7, #18]
 80063ee:	e005      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063f0:	40021000 	.word	0x40021000
 80063f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f8:	7cfb      	ldrb	r3, [r7, #19]
 80063fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063fc:	7c7b      	ldrb	r3, [r7, #17]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d105      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006402:	4ba6      	ldr	r3, [pc, #664]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006406:	4aa5      	ldr	r2, [pc, #660]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800640c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800641a:	4ba0      	ldr	r3, [pc, #640]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006420:	f023 0203 	bic.w	r2, r3, #3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	499c      	ldr	r1, [pc, #624]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800643c:	4b97      	ldr	r3, [pc, #604]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006442:	f023 020c 	bic.w	r2, r3, #12
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	4994      	ldr	r1, [pc, #592]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800645e:	4b8f      	ldr	r3, [pc, #572]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006464:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	498b      	ldr	r1, [pc, #556]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006480:	4b86      	ldr	r3, [pc, #536]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006486:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	4983      	ldr	r1, [pc, #524]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064a2:	4b7e      	ldr	r3, [pc, #504]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	497a      	ldr	r1, [pc, #488]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064c4:	4b75      	ldr	r3, [pc, #468]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	4972      	ldr	r1, [pc, #456]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064e6:	4b6d      	ldr	r3, [pc, #436]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	4969      	ldr	r1, [pc, #420]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006508:	4b64      	ldr	r3, [pc, #400]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	4961      	ldr	r1, [pc, #388]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800652a:	4b5c      	ldr	r3, [pc, #368]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006530:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	4958      	ldr	r1, [pc, #352]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006548:	2b00      	cmp	r3, #0
 800654a:	d015      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800654c:	4b53      	ldr	r3, [pc, #332]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006552:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655a:	4950      	ldr	r1, [pc, #320]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800656a:	d105      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800656c:	4b4b      	ldr	r3, [pc, #300]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	4a4a      	ldr	r2, [pc, #296]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006576:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006580:	2b00      	cmp	r3, #0
 8006582:	d015      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006584:	4b45      	ldr	r3, [pc, #276]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	4942      	ldr	r1, [pc, #264]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065a2:	d105      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a4:	4b3d      	ldr	r3, [pc, #244]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a3c      	ldr	r2, [pc, #240]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d015      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065bc:	4b37      	ldr	r3, [pc, #220]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ca:	4934      	ldr	r1, [pc, #208]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065da:	d105      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065dc:	4b2f      	ldr	r3, [pc, #188]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	4a2e      	ldr	r2, [pc, #184]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d015      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065f4:	4b29      	ldr	r3, [pc, #164]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006602:	4926      	ldr	r1, [pc, #152]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006604:	4313      	orrs	r3, r2
 8006606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800660e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006612:	d105      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006614:	4b21      	ldr	r3, [pc, #132]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4a20      	ldr	r2, [pc, #128]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800661a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d015      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800662c:	4b1b      	ldr	r3, [pc, #108]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800662e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006632:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663a:	4918      	ldr	r1, [pc, #96]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800663c:	4313      	orrs	r3, r2
 800663e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800664a:	d105      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800664c:	4b13      	ldr	r3, [pc, #76]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	4a12      	ldr	r2, [pc, #72]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006656:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d015      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006664:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006672:	490a      	ldr	r1, [pc, #40]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006674:	4313      	orrs	r3, r2
 8006676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006682:	d105      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006684:	4b05      	ldr	r3, [pc, #20]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4a04      	ldr	r2, [pc, #16]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800668a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800668e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006690:	7cbb      	ldrb	r3, [r7, #18]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40021000 	.word	0x40021000

080066a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e09d      	b.n	80067ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d108      	bne.n	80066cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066c2:	d009      	beq.n	80066d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	61da      	str	r2, [r3, #28]
 80066ca:	e005      	b.n	80066d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fb fe88 	bl	8002408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800670e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006718:	d902      	bls.n	8006720 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e002      	b.n	8006726 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006724:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800672e:	d007      	beq.n	8006740 <HAL_SPI_Init+0xa0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006738:	d002      	beq.n	8006740 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006782:	ea42 0103 	orr.w	r1, r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	0c1b      	lsrs	r3, r3, #16
 800679c:	f003 0204 	and.w	r2, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80067bc:	ea42 0103 	orr.w	r1, r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b088      	sub	sp, #32
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	4613      	mov	r3, r2
 8006804:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006806:	f7fc fcc1 	bl	800318c <HAL_GetTick>
 800680a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	d001      	beq.n	8006820 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800681c:	2302      	movs	r3, #2
 800681e:	e15c      	b.n	8006ada <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <HAL_SPI_Transmit+0x36>
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e154      	b.n	8006ada <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_SPI_Transmit+0x48>
 800683a:	2302      	movs	r3, #2
 800683c:	e14d      	b.n	8006ada <HAL_SPI_Transmit+0x2e4>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2203      	movs	r2, #3
 800684a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006890:	d10f      	bne.n	80068b2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068bc:	2b40      	cmp	r3, #64	@ 0x40
 80068be:	d007      	beq.n	80068d0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068d8:	d952      	bls.n	8006980 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_SPI_Transmit+0xf2>
 80068e2:	8b7b      	ldrh	r3, [r7, #26]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d145      	bne.n	8006974 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ec:	881a      	ldrh	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	1c9a      	adds	r2, r3, #2
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800690c:	e032      	b.n	8006974 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b02      	cmp	r3, #2
 800691a:	d112      	bne.n	8006942 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006920:	881a      	ldrh	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692c:	1c9a      	adds	r2, r3, #2
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006940:	e018      	b.n	8006974 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006942:	f7fc fc23 	bl	800318c <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d803      	bhi.n	800695a <HAL_SPI_Transmit+0x164>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d102      	bne.n	8006960 <HAL_SPI_Transmit+0x16a>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e0b2      	b.n	8006ada <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1c7      	bne.n	800690e <HAL_SPI_Transmit+0x118>
 800697e:	e083      	b.n	8006a88 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_SPI_Transmit+0x198>
 8006988:	8b7b      	ldrh	r3, [r7, #26]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d177      	bne.n	8006a7e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d912      	bls.n	80069be <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699c:	881a      	ldrh	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a8:	1c9a      	adds	r2, r3, #2
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b02      	subs	r3, #2
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069bc:	e05f      	b.n	8006a7e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	7812      	ldrb	r2, [r2, #0]
 80069ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80069e4:	e04b      	b.n	8006a7e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d12b      	bne.n	8006a4c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d912      	bls.n	8006a24 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a02:	881a      	ldrh	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0e:	1c9a      	adds	r2, r3, #2
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b02      	subs	r3, #2
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a22:	e02c      	b.n	8006a7e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	7812      	ldrb	r2, [r2, #0]
 8006a30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a4a:	e018      	b.n	8006a7e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a4c:	f7fc fb9e 	bl	800318c <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d803      	bhi.n	8006a64 <HAL_SPI_Transmit+0x26e>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d102      	bne.n	8006a6a <HAL_SPI_Transmit+0x274>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e02d      	b.n	8006ada <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1ae      	bne.n	80069e6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fb73 	bl	8007178 <SPI_EndRxTxTransaction>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
  }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b08a      	sub	sp, #40	@ 0x28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006af0:	2301      	movs	r3, #1
 8006af2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006af4:	f7fc fb4a 	bl	800318c <HAL_GetTick>
 8006af8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b00:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006b08:	887b      	ldrh	r3, [r7, #2]
 8006b0a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006b0c:	887b      	ldrh	r3, [r7, #2]
 8006b0e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b10:	7ffb      	ldrb	r3, [r7, #31]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d00c      	beq.n	8006b30 <HAL_SPI_TransmitReceive+0x4e>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b1c:	d106      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x4a>
 8006b26:	7ffb      	ldrb	r3, [r7, #31]
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d001      	beq.n	8006b30 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e1f3      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_SPI_TransmitReceive+0x60>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <HAL_SPI_TransmitReceive+0x60>
 8006b3c:	887b      	ldrh	r3, [r7, #2]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e1e8      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_SPI_TransmitReceive+0x72>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e1e1      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x436>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d003      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2205      	movs	r2, #5
 8006b6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	887a      	ldrh	r2, [r7, #2]
 8006b80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	887a      	ldrh	r2, [r7, #2]
 8006b88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	887a      	ldrh	r2, [r7, #2]
 8006b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	887a      	ldrh	r2, [r7, #2]
 8006b9c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bb2:	d802      	bhi.n	8006bba <HAL_SPI_TransmitReceive+0xd8>
 8006bb4:	8abb      	ldrh	r3, [r7, #20]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d908      	bls.n	8006bcc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	e007      	b.n	8006bdc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bda:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be6:	2b40      	cmp	r3, #64	@ 0x40
 8006be8:	d007      	beq.n	8006bfa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c02:	f240 8083 	bls.w	8006d0c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x132>
 8006c0e:	8afb      	ldrh	r3, [r7, #22]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d16f      	bne.n	8006cf4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c18:	881a      	ldrh	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	1c9a      	adds	r2, r3, #2
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c38:	e05c      	b.n	8006cf4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d11b      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0x19e>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d016      	beq.n	8006c80 <HAL_SPI_TransmitReceive+0x19e>
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d113      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5c:	881a      	ldrh	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c68:	1c9a      	adds	r2, r3, #2
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d11c      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0x1e6>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d016      	beq.n	8006cc8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca4:	b292      	uxth	r2, r2
 8006ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cc8:	f7fc fa60 	bl	800318c <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d80d      	bhi.n	8006cf4 <HAL_SPI_TransmitReceive+0x212>
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d009      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e111      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d19d      	bne.n	8006c3a <HAL_SPI_TransmitReceive+0x158>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d197      	bne.n	8006c3a <HAL_SPI_TransmitReceive+0x158>
 8006d0a:	e0e5      	b.n	8006ed8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_SPI_TransmitReceive+0x23a>
 8006d14:	8afb      	ldrh	r3, [r7, #22]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	f040 80d1 	bne.w	8006ebe <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d912      	bls.n	8006d4c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2a:	881a      	ldrh	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d36:	1c9a      	adds	r2, r3, #2
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b02      	subs	r3, #2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d4a:	e0b8      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	330c      	adds	r3, #12
 8006d56:	7812      	ldrb	r2, [r2, #0]
 8006d58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d72:	e0a4      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d134      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x30a>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d02f      	beq.n	8006dec <HAL_SPI_TransmitReceive+0x30a>
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d12c      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d912      	bls.n	8006dc2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da0:	881a      	ldrh	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dac:	1c9a      	adds	r2, r3, #2
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b02      	subs	r3, #2
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006dc0:	e012      	b.n	8006de8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	330c      	adds	r3, #12
 8006dcc:	7812      	ldrb	r2, [r2, #0]
 8006dce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d148      	bne.n	8006e8c <HAL_SPI_TransmitReceive+0x3aa>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d042      	beq.n	8006e8c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d923      	bls.n	8006e5a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1c:	b292      	uxth	r2, r2
 8006e1e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e24:	1c9a      	adds	r2, r3, #2
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b02      	subs	r3, #2
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d81f      	bhi.n	8006e88 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e56:	605a      	str	r2, [r3, #4]
 8006e58:	e016      	b.n	8006e88 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f103 020c 	add.w	r2, r3, #12
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e66:	7812      	ldrb	r2, [r2, #0]
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e8c:	f7fc f97e 	bl	800318c <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d803      	bhi.n	8006ea4 <HAL_SPI_TransmitReceive+0x3c2>
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea2:	d102      	bne.n	8006eaa <HAL_SPI_TransmitReceive+0x3c8>
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d109      	bne.n	8006ebe <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e02c      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f47f af55 	bne.w	8006d74 <HAL_SPI_TransmitReceive+0x292>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f47f af4e 	bne.w	8006d74 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ed8:	6a3a      	ldr	r2, [r7, #32]
 8006eda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 f94b 	bl	8007178 <SPI_EndRxTxTransaction>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e00e      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006f16:	2300      	movs	r3, #0
  }
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3728      	adds	r7, #40	@ 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f2e:	b2db      	uxtb	r3, r3
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f4c:	f7fc f91e 	bl	800318c <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4413      	add	r3, r2
 8006f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f5c:	f7fc f916 	bl	800318c <HAL_GetTick>
 8006f60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f62:	4b39      	ldr	r3, [pc, #228]	@ (8007048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	015b      	lsls	r3, r3, #5
 8006f68:	0d1b      	lsrs	r3, r3, #20
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	fb02 f303 	mul.w	r3, r2, r3
 8006f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f72:	e054      	b.n	800701e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d050      	beq.n	800701e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f7c:	f7fc f906 	bl	800318c <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d902      	bls.n	8006f92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d13d      	bne.n	800700e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006faa:	d111      	bne.n	8006fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fb4:	d004      	beq.n	8006fc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fbe:	d107      	bne.n	8006fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fd8:	d10f      	bne.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e017      	b.n	800703e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	3b01      	subs	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4013      	ands	r3, r2
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	bf0c      	ite	eq
 800702e:	2301      	moveq	r3, #1
 8007030:	2300      	movne	r3, #0
 8007032:	b2db      	uxtb	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	429a      	cmp	r2, r3
 800703a:	d19b      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	2000000c 	.word	0x2000000c

0800704c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	@ 0x28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800705e:	f7fc f895 	bl	800318c <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	1a9b      	subs	r3, r3, r2
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	4413      	add	r3, r2
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800706e:	f7fc f88d 	bl	800318c <HAL_GetTick>
 8007072:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	330c      	adds	r3, #12
 800707a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800707c:	4b3d      	ldr	r3, [pc, #244]	@ (8007174 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	00da      	lsls	r2, r3, #3
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	0d1b      	lsrs	r3, r3, #20
 800708c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800708e:	fb02 f303 	mul.w	r3, r2, r3
 8007092:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007094:	e060      	b.n	8007158 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800709c:	d107      	bne.n	80070ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d050      	beq.n	8007158 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070b6:	f7fc f869 	bl	800318c <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d902      	bls.n	80070cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d13d      	bne.n	8007148 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e4:	d111      	bne.n	800710a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ee:	d004      	beq.n	80070fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f8:	d107      	bne.n	800710a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007108:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007112:	d10f      	bne.n	8007134 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007132:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e010      	b.n	800716a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	3b01      	subs	r3, #1
 8007156:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4013      	ands	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d196      	bne.n	8007096 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3728      	adds	r7, #40	@ 0x28
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	2000000c 	.word	0x2000000c

08007178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2200      	movs	r2, #0
 800718c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7ff ff5b 	bl	800704c <SPI_WaitFifoStateUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a0:	f043 0220 	orr.w	r2, r3, #32
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e027      	b.n	80071fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	2180      	movs	r1, #128	@ 0x80
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff fec0 	bl	8006f3c <SPI_WaitFlagStateUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c6:	f043 0220 	orr.w	r2, r3, #32
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e014      	b.n	80071fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff ff34 	bl	800704c <SPI_WaitFifoStateUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d007      	beq.n	80071fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ee:	f043 0220 	orr.w	r2, r3, #32
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e000      	b.n	80071fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e049      	b.n	80072aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d106      	bne.n	8007230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7fb fba2 	bl	8002974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3304      	adds	r3, #4
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f000 fb08 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d001      	beq.n	80072cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e042      	b.n	8007352 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a21      	ldr	r2, [pc, #132]	@ (8007360 <HAL_TIM_Base_Start+0xac>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d018      	beq.n	8007310 <HAL_TIM_Base_Start+0x5c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e6:	d013      	beq.n	8007310 <HAL_TIM_Base_Start+0x5c>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007364 <HAL_TIM_Base_Start+0xb0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00e      	beq.n	8007310 <HAL_TIM_Base_Start+0x5c>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007368 <HAL_TIM_Base_Start+0xb4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d009      	beq.n	8007310 <HAL_TIM_Base_Start+0x5c>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1a      	ldr	r2, [pc, #104]	@ (800736c <HAL_TIM_Base_Start+0xb8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <HAL_TIM_Base_Start+0x5c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a19      	ldr	r2, [pc, #100]	@ (8007370 <HAL_TIM_Base_Start+0xbc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d115      	bne.n	800733c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	4b17      	ldr	r3, [pc, #92]	@ (8007374 <HAL_TIM_Base_Start+0xc0>)
 8007318:	4013      	ands	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b06      	cmp	r3, #6
 8007320:	d015      	beq.n	800734e <HAL_TIM_Base_Start+0x9a>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007328:	d011      	beq.n	800734e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0201 	orr.w	r2, r2, #1
 8007338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733a:	e008      	b.n	800734e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	e000      	b.n	8007350 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40000400 	.word	0x40000400
 8007368:	40000800 	.word	0x40000800
 800736c:	40013400 	.word	0x40013400
 8007370:	40014000 	.word	0x40014000
 8007374:	00010007 	.word	0x00010007

08007378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e049      	b.n	800741e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f841 	bl	8007426 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f000 fa4e 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
	...

0800743c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007456:	2302      	movs	r3, #2
 8007458:	e0ff      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b14      	cmp	r3, #20
 8007466:	f200 80f0 	bhi.w	800764a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800746a:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074c5 	.word	0x080074c5
 8007474:	0800764b 	.word	0x0800764b
 8007478:	0800764b 	.word	0x0800764b
 800747c:	0800764b 	.word	0x0800764b
 8007480:	08007505 	.word	0x08007505
 8007484:	0800764b 	.word	0x0800764b
 8007488:	0800764b 	.word	0x0800764b
 800748c:	0800764b 	.word	0x0800764b
 8007490:	08007547 	.word	0x08007547
 8007494:	0800764b 	.word	0x0800764b
 8007498:	0800764b 	.word	0x0800764b
 800749c:	0800764b 	.word	0x0800764b
 80074a0:	08007587 	.word	0x08007587
 80074a4:	0800764b 	.word	0x0800764b
 80074a8:	0800764b 	.word	0x0800764b
 80074ac:	0800764b 	.word	0x0800764b
 80074b0:	080075c9 	.word	0x080075c9
 80074b4:	0800764b 	.word	0x0800764b
 80074b8:	0800764b 	.word	0x0800764b
 80074bc:	0800764b 	.word	0x0800764b
 80074c0:	08007609 	.word	0x08007609
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fa60 	bl	8007990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0208 	orr.w	r2, r2, #8
 80074de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0204 	bic.w	r2, r2, #4
 80074ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6999      	ldr	r1, [r3, #24]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	619a      	str	r2, [r3, #24]
      break;
 8007502:	e0a5      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 fad0 	bl	8007ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699a      	ldr	r2, [r3, #24]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800751e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800752e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6999      	ldr	r1, [r3, #24]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	021a      	lsls	r2, r3, #8
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	619a      	str	r2, [r3, #24]
      break;
 8007544:	e084      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fb39 	bl	8007bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69da      	ldr	r2, [r3, #28]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0208 	orr.w	r2, r2, #8
 8007560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0204 	bic.w	r2, r2, #4
 8007570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69d9      	ldr	r1, [r3, #28]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	61da      	str	r2, [r3, #28]
      break;
 8007584:	e064      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fba1 	bl	8007cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69d9      	ldr	r1, [r3, #28]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	021a      	lsls	r2, r3, #8
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	61da      	str	r2, [r3, #28]
      break;
 80075c6:	e043      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fc0a 	bl	8007de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0208 	orr.w	r2, r2, #8
 80075e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007606:	e023      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fc4e 	bl	8007eb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007622:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007632:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	021a      	lsls	r2, r3, #8
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007648:	e002      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
      break;
 800764e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop

08007664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_TIM_ConfigClockSource+0x1c>
 800767c:	2302      	movs	r3, #2
 800767e:	e0de      	b.n	800783e <HAL_TIM_ConfigClockSource+0x1da>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800769e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a63      	ldr	r2, [pc, #396]	@ (8007848 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	f000 80a9 	beq.w	8007812 <HAL_TIM_ConfigClockSource+0x1ae>
 80076c0:	4a61      	ldr	r2, [pc, #388]	@ (8007848 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	f200 80ae 	bhi.w	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 80076c8:	4a60      	ldr	r2, [pc, #384]	@ (800784c <HAL_TIM_ConfigClockSource+0x1e8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	f000 80a1 	beq.w	8007812 <HAL_TIM_ConfigClockSource+0x1ae>
 80076d0:	4a5e      	ldr	r2, [pc, #376]	@ (800784c <HAL_TIM_ConfigClockSource+0x1e8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	f200 80a6 	bhi.w	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 80076d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007850 <HAL_TIM_ConfigClockSource+0x1ec>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	f000 8099 	beq.w	8007812 <HAL_TIM_ConfigClockSource+0x1ae>
 80076e0:	4a5b      	ldr	r2, [pc, #364]	@ (8007850 <HAL_TIM_ConfigClockSource+0x1ec>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	f200 809e 	bhi.w	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 80076e8:	4a5a      	ldr	r2, [pc, #360]	@ (8007854 <HAL_TIM_ConfigClockSource+0x1f0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	f000 8091 	beq.w	8007812 <HAL_TIM_ConfigClockSource+0x1ae>
 80076f0:	4a58      	ldr	r2, [pc, #352]	@ (8007854 <HAL_TIM_ConfigClockSource+0x1f0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	f200 8096 	bhi.w	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 80076f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076fc:	f000 8089 	beq.w	8007812 <HAL_TIM_ConfigClockSource+0x1ae>
 8007700:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007704:	f200 808e 	bhi.w	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 8007708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800770c:	d03e      	beq.n	800778c <HAL_TIM_ConfigClockSource+0x128>
 800770e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007712:	f200 8087 	bhi.w	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 8007716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800771a:	f000 8086 	beq.w	800782a <HAL_TIM_ConfigClockSource+0x1c6>
 800771e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007722:	d87f      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 8007724:	2b70      	cmp	r3, #112	@ 0x70
 8007726:	d01a      	beq.n	800775e <HAL_TIM_ConfigClockSource+0xfa>
 8007728:	2b70      	cmp	r3, #112	@ 0x70
 800772a:	d87b      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 800772c:	2b60      	cmp	r3, #96	@ 0x60
 800772e:	d050      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x16e>
 8007730:	2b60      	cmp	r3, #96	@ 0x60
 8007732:	d877      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 8007734:	2b50      	cmp	r3, #80	@ 0x50
 8007736:	d03c      	beq.n	80077b2 <HAL_TIM_ConfigClockSource+0x14e>
 8007738:	2b50      	cmp	r3, #80	@ 0x50
 800773a:	d873      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 800773c:	2b40      	cmp	r3, #64	@ 0x40
 800773e:	d058      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0x18e>
 8007740:	2b40      	cmp	r3, #64	@ 0x40
 8007742:	d86f      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 8007744:	2b30      	cmp	r3, #48	@ 0x30
 8007746:	d064      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x1ae>
 8007748:	2b30      	cmp	r3, #48	@ 0x30
 800774a:	d86b      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 800774c:	2b20      	cmp	r3, #32
 800774e:	d060      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x1ae>
 8007750:	2b20      	cmp	r3, #32
 8007752:	d867      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d05c      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x1ae>
 8007758:	2b10      	cmp	r3, #16
 800775a:	d05a      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x1ae>
 800775c:	e062      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800776e:	f000 fc81 	bl	8008074 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	609a      	str	r2, [r3, #8]
      break;
 800778a:	e04f      	b.n	800782c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800779c:	f000 fc6a 	bl	8008074 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077ae:	609a      	str	r2, [r3, #8]
      break;
 80077b0:	e03c      	b.n	800782c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077be:	461a      	mov	r2, r3
 80077c0:	f000 fbdc 	bl	8007f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2150      	movs	r1, #80	@ 0x50
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fc35 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 80077d0:	e02c      	b.n	800782c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077de:	461a      	mov	r2, r3
 80077e0:	f000 fbfb 	bl	8007fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2160      	movs	r1, #96	@ 0x60
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fc25 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 80077f0:	e01c      	b.n	800782c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fe:	461a      	mov	r2, r3
 8007800:	f000 fbbc 	bl	8007f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2140      	movs	r1, #64	@ 0x40
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fc15 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007810:	e00c      	b.n	800782c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4619      	mov	r1, r3
 800781c:	4610      	mov	r0, r2
 800781e:	f000 fc0c 	bl	800803a <TIM_ITRx_SetConfig>
      break;
 8007822:	e003      	b.n	800782c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
      break;
 8007828:	e000      	b.n	800782c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800782a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	00100070 	.word	0x00100070
 800784c:	00100040 	.word	0x00100040
 8007850:	00100030 	.word	0x00100030
 8007854:	00100020 	.word	0x00100020

08007858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a42      	ldr	r2, [pc, #264]	@ (8007974 <TIM_Base_SetConfig+0x11c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00f      	beq.n	8007890 <TIM_Base_SetConfig+0x38>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007876:	d00b      	beq.n	8007890 <TIM_Base_SetConfig+0x38>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a3f      	ldr	r2, [pc, #252]	@ (8007978 <TIM_Base_SetConfig+0x120>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d007      	beq.n	8007890 <TIM_Base_SetConfig+0x38>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a3e      	ldr	r2, [pc, #248]	@ (800797c <TIM_Base_SetConfig+0x124>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_Base_SetConfig+0x38>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a3d      	ldr	r2, [pc, #244]	@ (8007980 <TIM_Base_SetConfig+0x128>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d108      	bne.n	80078a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a33      	ldr	r2, [pc, #204]	@ (8007974 <TIM_Base_SetConfig+0x11c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d01b      	beq.n	80078e2 <TIM_Base_SetConfig+0x8a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078b0:	d017      	beq.n	80078e2 <TIM_Base_SetConfig+0x8a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a30      	ldr	r2, [pc, #192]	@ (8007978 <TIM_Base_SetConfig+0x120>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d013      	beq.n	80078e2 <TIM_Base_SetConfig+0x8a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a2f      	ldr	r2, [pc, #188]	@ (800797c <TIM_Base_SetConfig+0x124>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d00f      	beq.n	80078e2 <TIM_Base_SetConfig+0x8a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007980 <TIM_Base_SetConfig+0x128>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d00b      	beq.n	80078e2 <TIM_Base_SetConfig+0x8a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2d      	ldr	r2, [pc, #180]	@ (8007984 <TIM_Base_SetConfig+0x12c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d007      	beq.n	80078e2 <TIM_Base_SetConfig+0x8a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2c      	ldr	r2, [pc, #176]	@ (8007988 <TIM_Base_SetConfig+0x130>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d003      	beq.n	80078e2 <TIM_Base_SetConfig+0x8a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2b      	ldr	r2, [pc, #172]	@ (800798c <TIM_Base_SetConfig+0x134>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d108      	bne.n	80078f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a16      	ldr	r2, [pc, #88]	@ (8007974 <TIM_Base_SetConfig+0x11c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d00f      	beq.n	8007940 <TIM_Base_SetConfig+0xe8>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a17      	ldr	r2, [pc, #92]	@ (8007980 <TIM_Base_SetConfig+0x128>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d00b      	beq.n	8007940 <TIM_Base_SetConfig+0xe8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a16      	ldr	r2, [pc, #88]	@ (8007984 <TIM_Base_SetConfig+0x12c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d007      	beq.n	8007940 <TIM_Base_SetConfig+0xe8>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a15      	ldr	r2, [pc, #84]	@ (8007988 <TIM_Base_SetConfig+0x130>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d003      	beq.n	8007940 <TIM_Base_SetConfig+0xe8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a14      	ldr	r2, [pc, #80]	@ (800798c <TIM_Base_SetConfig+0x134>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d103      	bne.n	8007948 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	691a      	ldr	r2, [r3, #16]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	d105      	bne.n	8007966 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f023 0201 	bic.w	r2, r3, #1
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	611a      	str	r2, [r3, #16]
  }
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40000400 	.word	0x40000400
 800797c:	40000800 	.word	0x40000800
 8007980:	40013400 	.word	0x40013400
 8007984:	40014000 	.word	0x40014000
 8007988:	40014400 	.word	0x40014400
 800798c:	40014800 	.word	0x40014800

08007990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	f023 0201 	bic.w	r2, r3, #1
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 0302 	bic.w	r3, r3, #2
 80079dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a2c      	ldr	r2, [pc, #176]	@ (8007a9c <TIM_OC1_SetConfig+0x10c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00f      	beq.n	8007a10 <TIM_OC1_SetConfig+0x80>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a2b      	ldr	r2, [pc, #172]	@ (8007aa0 <TIM_OC1_SetConfig+0x110>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00b      	beq.n	8007a10 <TIM_OC1_SetConfig+0x80>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa4 <TIM_OC1_SetConfig+0x114>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d007      	beq.n	8007a10 <TIM_OC1_SetConfig+0x80>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a29      	ldr	r2, [pc, #164]	@ (8007aa8 <TIM_OC1_SetConfig+0x118>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d003      	beq.n	8007a10 <TIM_OC1_SetConfig+0x80>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a28      	ldr	r2, [pc, #160]	@ (8007aac <TIM_OC1_SetConfig+0x11c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d10c      	bne.n	8007a2a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f023 0308 	bic.w	r3, r3, #8
 8007a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f023 0304 	bic.w	r3, r3, #4
 8007a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a9c <TIM_OC1_SetConfig+0x10c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00f      	beq.n	8007a52 <TIM_OC1_SetConfig+0xc2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a1a      	ldr	r2, [pc, #104]	@ (8007aa0 <TIM_OC1_SetConfig+0x110>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00b      	beq.n	8007a52 <TIM_OC1_SetConfig+0xc2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a19      	ldr	r2, [pc, #100]	@ (8007aa4 <TIM_OC1_SetConfig+0x114>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d007      	beq.n	8007a52 <TIM_OC1_SetConfig+0xc2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a18      	ldr	r2, [pc, #96]	@ (8007aa8 <TIM_OC1_SetConfig+0x118>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d003      	beq.n	8007a52 <TIM_OC1_SetConfig+0xc2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a17      	ldr	r2, [pc, #92]	@ (8007aac <TIM_OC1_SetConfig+0x11c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d111      	bne.n	8007a76 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	621a      	str	r2, [r3, #32]
}
 8007a90:	bf00      	nop
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	40012c00 	.word	0x40012c00
 8007aa0:	40013400 	.word	0x40013400
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	40014400 	.word	0x40014400
 8007aac:	40014800 	.word	0x40014800

08007ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	f023 0210 	bic.w	r2, r3, #16
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f023 0320 	bic.w	r3, r3, #32
 8007afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a28      	ldr	r2, [pc, #160]	@ (8007bb0 <TIM_OC2_SetConfig+0x100>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_OC2_SetConfig+0x6c>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a27      	ldr	r2, [pc, #156]	@ (8007bb4 <TIM_OC2_SetConfig+0x104>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d10d      	bne.n	8007b38 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb0 <TIM_OC2_SetConfig+0x100>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00f      	beq.n	8007b60 <TIM_OC2_SetConfig+0xb0>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb4 <TIM_OC2_SetConfig+0x104>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00b      	beq.n	8007b60 <TIM_OC2_SetConfig+0xb0>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb8 <TIM_OC2_SetConfig+0x108>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d007      	beq.n	8007b60 <TIM_OC2_SetConfig+0xb0>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a1a      	ldr	r2, [pc, #104]	@ (8007bbc <TIM_OC2_SetConfig+0x10c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d003      	beq.n	8007b60 <TIM_OC2_SetConfig+0xb0>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a19      	ldr	r2, [pc, #100]	@ (8007bc0 <TIM_OC2_SetConfig+0x110>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d113      	bne.n	8007b88 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	621a      	str	r2, [r3, #32]
}
 8007ba2:	bf00      	nop
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40012c00 	.word	0x40012c00
 8007bb4:	40013400 	.word	0x40013400
 8007bb8:	40014000 	.word	0x40014000
 8007bbc:	40014400 	.word	0x40014400
 8007bc0:	40014800 	.word	0x40014800

08007bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 0303 	bic.w	r3, r3, #3
 8007bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a27      	ldr	r2, [pc, #156]	@ (8007cc0 <TIM_OC3_SetConfig+0xfc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_OC3_SetConfig+0x6a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a26      	ldr	r2, [pc, #152]	@ (8007cc4 <TIM_OC3_SetConfig+0x100>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d10d      	bne.n	8007c4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cc0 <TIM_OC3_SetConfig+0xfc>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00f      	beq.n	8007c72 <TIM_OC3_SetConfig+0xae>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a1b      	ldr	r2, [pc, #108]	@ (8007cc4 <TIM_OC3_SetConfig+0x100>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00b      	beq.n	8007c72 <TIM_OC3_SetConfig+0xae>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8007cc8 <TIM_OC3_SetConfig+0x104>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d007      	beq.n	8007c72 <TIM_OC3_SetConfig+0xae>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a19      	ldr	r2, [pc, #100]	@ (8007ccc <TIM_OC3_SetConfig+0x108>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d003      	beq.n	8007c72 <TIM_OC3_SetConfig+0xae>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a18      	ldr	r2, [pc, #96]	@ (8007cd0 <TIM_OC3_SetConfig+0x10c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d113      	bne.n	8007c9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	621a      	str	r2, [r3, #32]
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40013400 	.word	0x40013400
 8007cc8:	40014000 	.word	0x40014000
 8007ccc:	40014400 	.word	0x40014400
 8007cd0:	40014800 	.word	0x40014800

08007cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	031b      	lsls	r3, r3, #12
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a28      	ldr	r2, [pc, #160]	@ (8007dd4 <TIM_OC4_SetConfig+0x100>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_OC4_SetConfig+0x6c>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a27      	ldr	r2, [pc, #156]	@ (8007dd8 <TIM_OC4_SetConfig+0x104>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10d      	bne.n	8007d5c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	031b      	lsls	r3, r3, #12
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd4 <TIM_OC4_SetConfig+0x100>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00f      	beq.n	8007d84 <TIM_OC4_SetConfig+0xb0>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd8 <TIM_OC4_SetConfig+0x104>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00b      	beq.n	8007d84 <TIM_OC4_SetConfig+0xb0>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8007ddc <TIM_OC4_SetConfig+0x108>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d007      	beq.n	8007d84 <TIM_OC4_SetConfig+0xb0>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1a      	ldr	r2, [pc, #104]	@ (8007de0 <TIM_OC4_SetConfig+0x10c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d003      	beq.n	8007d84 <TIM_OC4_SetConfig+0xb0>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a19      	ldr	r2, [pc, #100]	@ (8007de4 <TIM_OC4_SetConfig+0x110>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d113      	bne.n	8007dac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	019b      	lsls	r3, r3, #6
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	019b      	lsls	r3, r3, #6
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40012c00 	.word	0x40012c00
 8007dd8:	40013400 	.word	0x40013400
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40014400 	.word	0x40014400
 8007de4:	40014800 	.word	0x40014800

08007de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a17      	ldr	r2, [pc, #92]	@ (8007e9c <TIM_OC5_SetConfig+0xb4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00f      	beq.n	8007e62 <TIM_OC5_SetConfig+0x7a>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a16      	ldr	r2, [pc, #88]	@ (8007ea0 <TIM_OC5_SetConfig+0xb8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00b      	beq.n	8007e62 <TIM_OC5_SetConfig+0x7a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a15      	ldr	r2, [pc, #84]	@ (8007ea4 <TIM_OC5_SetConfig+0xbc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d007      	beq.n	8007e62 <TIM_OC5_SetConfig+0x7a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a14      	ldr	r2, [pc, #80]	@ (8007ea8 <TIM_OC5_SetConfig+0xc0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_OC5_SetConfig+0x7a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a13      	ldr	r2, [pc, #76]	@ (8007eac <TIM_OC5_SetConfig+0xc4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d109      	bne.n	8007e76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	40012c00 	.word	0x40012c00
 8007ea0:	40013400 	.word	0x40013400
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	40014400 	.word	0x40014400
 8007eac:	40014800 	.word	0x40014800

08007eb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	051b      	lsls	r3, r3, #20
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a18      	ldr	r2, [pc, #96]	@ (8007f68 <TIM_OC6_SetConfig+0xb8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00f      	beq.n	8007f2c <TIM_OC6_SetConfig+0x7c>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a17      	ldr	r2, [pc, #92]	@ (8007f6c <TIM_OC6_SetConfig+0xbc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <TIM_OC6_SetConfig+0x7c>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a16      	ldr	r2, [pc, #88]	@ (8007f70 <TIM_OC6_SetConfig+0xc0>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d007      	beq.n	8007f2c <TIM_OC6_SetConfig+0x7c>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a15      	ldr	r2, [pc, #84]	@ (8007f74 <TIM_OC6_SetConfig+0xc4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC6_SetConfig+0x7c>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a14      	ldr	r2, [pc, #80]	@ (8007f78 <TIM_OC6_SetConfig+0xc8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d109      	bne.n	8007f40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	029b      	lsls	r3, r3, #10
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	40012c00 	.word	0x40012c00
 8007f6c:	40013400 	.word	0x40013400
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f023 0201 	bic.w	r2, r3, #1
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	011b      	lsls	r3, r3, #4
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f023 030a 	bic.w	r3, r3, #10
 8007fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	621a      	str	r2, [r3, #32]
}
 8007fce:	bf00      	nop
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b087      	sub	sp, #28
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	f023 0210 	bic.w	r2, r3, #16
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	031b      	lsls	r3, r3, #12
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008016:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	621a      	str	r2, [r3, #32]
}
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	f043 0307 	orr.w	r3, r3, #7
 8008060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	609a      	str	r2, [r3, #8]
}
 8008068:	bf00      	nop
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800808e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	021a      	lsls	r2, r3, #8
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	431a      	orrs	r2, r3
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4313      	orrs	r3, r2
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	4313      	orrs	r3, r2
 80080a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	609a      	str	r2, [r3, #8]
}
 80080a8:	bf00      	nop
 80080aa:	371c      	adds	r7, #28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d101      	bne.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c8:	2302      	movs	r3, #2
 80080ca:	e065      	b.n	8008198 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a2c      	ldr	r2, [pc, #176]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a2b      	ldr	r2, [pc, #172]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d108      	bne.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008106:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	4313      	orrs	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1b      	ldr	r2, [pc, #108]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d018      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008142:	d013      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a18      	ldr	r2, [pc, #96]	@ (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00e      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a17      	ldr	r2, [pc, #92]	@ (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d009      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a12      	ldr	r2, [pc, #72]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d004      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a13      	ldr	r2, [pc, #76]	@ (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d10c      	bne.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	4313      	orrs	r3, r2
 800817c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	40012c00 	.word	0x40012c00
 80081a8:	40013400 	.word	0x40013400
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	40014000 	.word	0x40014000

080081b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e042      	b.n	8008250 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d106      	bne.n	80081e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7fa fccb 	bl	8002b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2224      	movs	r2, #36	@ 0x24
 80081e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0201 	bic.w	r2, r2, #1
 80081f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 f848 	bl	8009298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fd79 	bl	8008d00 <UART_SetConfig>
 800820e:	4603      	mov	r3, r0
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e01b      	b.n	8008250 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 f8c7 	bl	80093dc <UART_CheckIdleState>
 800824e:	4603      	mov	r3, r0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08a      	sub	sp, #40	@ 0x28
 800825c:	af02      	add	r7, sp, #8
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	603b      	str	r3, [r7, #0]
 8008264:	4613      	mov	r3, r2
 8008266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800826e:	2b20      	cmp	r3, #32
 8008270:	d17b      	bne.n	800836a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <HAL_UART_Transmit+0x26>
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e074      	b.n	800836c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2221      	movs	r2, #33	@ 0x21
 800828e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008292:	f7fa ff7b 	bl	800318c <HAL_GetTick>
 8008296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	88fa      	ldrh	r2, [r7, #6]
 800829c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	88fa      	ldrh	r2, [r7, #6]
 80082a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b0:	d108      	bne.n	80082c4 <HAL_UART_Transmit+0x6c>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d104      	bne.n	80082c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	61bb      	str	r3, [r7, #24]
 80082c2:	e003      	b.n	80082cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082cc:	e030      	b.n	8008330 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2200      	movs	r2, #0
 80082d6:	2180      	movs	r1, #128	@ 0x80
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f001 f929 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e03d      	b.n	800836c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10b      	bne.n	800830e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008304:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	3302      	adds	r3, #2
 800830a:	61bb      	str	r3, [r7, #24]
 800830c:	e007      	b.n	800831e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	781a      	ldrb	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	3301      	adds	r3, #1
 800831c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008336:	b29b      	uxth	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1c8      	bne.n	80082ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2200      	movs	r2, #0
 8008344:	2140      	movs	r1, #64	@ 0x40
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f001 f8f2 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2220      	movs	r2, #32
 8008356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e006      	b.n	800836c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2220      	movs	r2, #32
 8008362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	e000      	b.n	800836c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800836a:	2302      	movs	r3, #2
  }
}
 800836c:	4618      	mov	r0, r3
 800836e:	3720      	adds	r7, #32
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08a      	sub	sp, #40	@ 0x28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008388:	2b20      	cmp	r3, #32
 800838a:	d137      	bne.n	80083fc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <HAL_UART_Receive_DMA+0x24>
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e030      	b.n	80083fe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a18      	ldr	r2, [pc, #96]	@ (8008408 <HAL_UART_Receive_DMA+0x94>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d01f      	beq.n	80083ec <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d018      	beq.n	80083ec <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	613b      	str	r3, [r7, #16]
   return(result);
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	623b      	str	r3, [r7, #32]
 80083da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	69f9      	ldr	r1, [r7, #28]
 80083de:	6a3a      	ldr	r2, [r7, #32]
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e6      	bne.n	80083ba <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80083ec:	88fb      	ldrh	r3, [r7, #6]
 80083ee:	461a      	mov	r2, r3
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f001 f90a 	bl	800960c <UART_Start_Receive_DMA>
 80083f8:	4603      	mov	r3, r0
 80083fa:	e000      	b.n	80083fe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083fc:	2302      	movs	r3, #2
  }
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3728      	adds	r7, #40	@ 0x28
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	40008000 	.word	0x40008000

0800840c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b0a0      	sub	sp, #128	@ 0x80
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008424:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8008428:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008432:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008434:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008438:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008440:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e6      	bne.n	8008414 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3308      	adds	r3, #8
 800844c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008458:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800845c:	f023 0301 	bic.w	r3, r3, #1
 8008460:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800846a:	657a      	str	r2, [r7, #84]	@ 0x54
 800846c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008470:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e3      	bne.n	8008446 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008482:	2b01      	cmp	r3, #1
 8008484:	d118      	bne.n	80084b8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848e:	e853 3f00 	ldrex	r3, [r3]
 8008492:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008496:	f023 0310 	bic.w	r3, r3, #16
 800849a:	677b      	str	r3, [r7, #116]	@ 0x74
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084ac:	e841 2300 	strex	r3, r2, [r1]
 80084b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e6      	bne.n	8008486 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c2:	2b80      	cmp	r3, #128	@ 0x80
 80084c4:	d137      	bne.n	8008536 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3308      	adds	r3, #8
 80084cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3308      	adds	r3, #8
 80084e4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80084e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e5      	bne.n	80084c6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d019      	beq.n	8008536 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008506:	2200      	movs	r2, #0
 8008508:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800850e:	4618      	mov	r0, r3
 8008510:	f7fc fadb 	bl	8004aca <HAL_DMA_Abort>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00d      	beq.n	8008536 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800851e:	4618      	mov	r0, r3
 8008520:	f7fc fc42 	bl	8004da8 <HAL_DMA_GetError>
 8008524:	4603      	mov	r3, r0
 8008526:	2b20      	cmp	r3, #32
 8008528:	d105      	bne.n	8008536 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2210      	movs	r2, #16
 800852e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e073      	b.n	800861e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008540:	2b40      	cmp	r3, #64	@ 0x40
 8008542:	d13b      	bne.n	80085bc <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	60bb      	str	r3, [r7, #8]
   return(result);
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800855a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3308      	adds	r3, #8
 8008562:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008564:	61ba      	str	r2, [r7, #24]
 8008566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6979      	ldr	r1, [r7, #20]
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	613b      	str	r3, [r7, #16]
   return(result);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e5      	bne.n	8008544 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01c      	beq.n	80085bc <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008588:	2200      	movs	r2, #0
 800858a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008592:	4618      	mov	r0, r3
 8008594:	f7fc fa99 	bl	8004aca <HAL_DMA_Abort>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fc fbff 	bl	8004da8 <HAL_DMA_GetError>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d105      	bne.n	80085bc <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2210      	movs	r2, #16
 80085b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e030      	b.n	800861e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	220f      	movs	r2, #15
 80085d2:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085dc:	d107      	bne.n	80085ee <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f042 0210 	orr.w	r2, r2, #16
 80085ec:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699a      	ldr	r2, [r3, #24]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f042 0208 	orr.w	r2, r2, #8
 80085fc:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2220      	movs	r2, #32
 800860a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3780      	adds	r7, #128	@ 0x80
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b0ba      	sub	sp, #232	@ 0xe8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800864e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008652:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008656:	4013      	ands	r3, r2
 8008658:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800865c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008660:	2b00      	cmp	r3, #0
 8008662:	d11b      	bne.n	800869c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b00      	cmp	r3, #0
 800866e:	d015      	beq.n	800869c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008674:	f003 0320 	and.w	r3, r3, #32
 8008678:	2b00      	cmp	r3, #0
 800867a:	d105      	bne.n	8008688 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800867c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d009      	beq.n	800869c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8300 	beq.w	8008c92 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
      }
      return;
 800869a:	e2fa      	b.n	8008c92 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800869c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8123 	beq.w	80088ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80086a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80086aa:	4b8d      	ldr	r3, [pc, #564]	@ (80088e0 <HAL_UART_IRQHandler+0x2b8>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d106      	bne.n	80086c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80086b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80086b6:	4b8b      	ldr	r3, [pc, #556]	@ (80088e4 <HAL_UART_IRQHandler+0x2bc>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 8116 	beq.w	80088ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d011      	beq.n	80086f0 <HAL_UART_IRQHandler+0xc8>
 80086cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2201      	movs	r2, #1
 80086de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e6:	f043 0201 	orr.w	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d011      	beq.n	8008720 <HAL_UART_IRQHandler+0xf8>
 80086fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2202      	movs	r2, #2
 800870e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008716:	f043 0204 	orr.w	r2, r3, #4
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	d011      	beq.n	8008750 <HAL_UART_IRQHandler+0x128>
 800872c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00b      	beq.n	8008750 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2204      	movs	r2, #4
 800873e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008746:	f043 0202 	orr.w	r2, r3, #2
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008754:	f003 0308 	and.w	r3, r3, #8
 8008758:	2b00      	cmp	r3, #0
 800875a:	d017      	beq.n	800878c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800875c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d105      	bne.n	8008774 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008768:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800876c:	4b5c      	ldr	r3, [pc, #368]	@ (80088e0 <HAL_UART_IRQHandler+0x2b8>)
 800876e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2208      	movs	r2, #8
 800877a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008782:	f043 0208 	orr.w	r2, r3, #8
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800878c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008794:	2b00      	cmp	r3, #0
 8008796:	d012      	beq.n	80087be <HAL_UART_IRQHandler+0x196>
 8008798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800879c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00c      	beq.n	80087be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b4:	f043 0220 	orr.w	r2, r3, #32
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8266 	beq.w	8008c96 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d013      	beq.n	80087fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d105      	bne.n	80087ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008804:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008812:	2b40      	cmp	r3, #64	@ 0x40
 8008814:	d005      	beq.n	8008822 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800881a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800881e:	2b00      	cmp	r3, #0
 8008820:	d054      	beq.n	80088cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 ffd9 	bl	80097da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008832:	2b40      	cmp	r3, #64	@ 0x40
 8008834:	d146      	bne.n	80088c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3308      	adds	r3, #8
 800883c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800884c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008862:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008866:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800886e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800887a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1d9      	bne.n	8008836 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008888:	2b00      	cmp	r3, #0
 800888a:	d017      	beq.n	80088bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008892:	4a15      	ldr	r2, [pc, #84]	@ (80088e8 <HAL_UART_IRQHandler+0x2c0>)
 8008894:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800889c:	4618      	mov	r0, r3
 800889e:	f7fc f96d 	bl	8004b7c <HAL_DMA_Abort_IT>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d019      	beq.n	80088dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80088b6:	4610      	mov	r0, r2
 80088b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ba:	e00f      	b.n	80088dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fa09 	bl	8008cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c2:	e00b      	b.n	80088dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa05 	bl	8008cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ca:	e007      	b.n	80088dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fa01 	bl	8008cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80088da:	e1dc      	b.n	8008c96 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088dc:	bf00      	nop
    return;
 80088de:	e1da      	b.n	8008c96 <HAL_UART_IRQHandler+0x66e>
 80088e0:	10000001 	.word	0x10000001
 80088e4:	04000120 	.word	0x04000120
 80088e8:	08009a91 	.word	0x08009a91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	f040 8170 	bne.w	8008bd6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 8169 	beq.w	8008bd6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 8162 	beq.w	8008bd6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2210      	movs	r2, #16
 8008918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008924:	2b40      	cmp	r3, #64	@ 0x40
 8008926:	f040 80d8 	bne.w	8008ada <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 80af 	beq.w	8008aa0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008948:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800894c:	429a      	cmp	r2, r3
 800894e:	f080 80a7 	bcs.w	8008aa0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008958:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0320 	and.w	r3, r3, #32
 800896a:	2b00      	cmp	r3, #0
 800896c:	f040 8087 	bne.w	8008a7e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800898c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800899a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800899e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80089a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80089b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1da      	bne.n	8008970 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80089ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089cc:	f023 0301 	bic.w	r3, r3, #1
 80089d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3308      	adds	r3, #8
 80089da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089ea:	e841 2300 	strex	r3, r2, [r1]
 80089ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1e1      	bne.n	80089ba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3308      	adds	r3, #8
 80089fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3308      	adds	r3, #8
 8008a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e3      	bne.n	80089f6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2220      	movs	r2, #32
 8008a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a4c:	f023 0310 	bic.w	r3, r3, #16
 8008a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e4      	bne.n	8008a3c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fc f826 	bl	8004aca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2202      	movs	r2, #2
 8008a82:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f925 	bl	8008ce8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008a9e:	e0fc      	b.n	8008c9a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	f040 80f5 	bne.w	8008c9a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0320 	and.w	r3, r3, #32
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	f040 80eb 	bne.w	8008c9a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f908 	bl	8008ce8 <HAL_UARTEx_RxEventCallback>
      return;
 8008ad8:	e0df      	b.n	8008c9a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 80d1 	beq.w	8008c9e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 80cc 	beq.w	8008c9e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e4      	bne.n	8008b06 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3308      	adds	r3, #8
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	e853 3f00 	ldrex	r3, [r3]
 8008b4a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b52:	f023 0301 	bic.w	r3, r3, #1
 8008b56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b64:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e1      	bne.n	8008b3c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f023 0310 	bic.w	r3, r3, #16
 8008ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008bae:	61fb      	str	r3, [r7, #28]
 8008bb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	69b9      	ldr	r1, [r7, #24]
 8008bb4:	69fa      	ldr	r2, [r7, #28]
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	617b      	str	r3, [r7, #20]
   return(result);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e4      	bne.n	8008b8c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f88a 	bl	8008ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bd4:	e063      	b.n	8008c9e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00e      	beq.n	8008c00 <HAL_UART_IRQHandler+0x5d8>
 8008be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d008      	beq.n	8008c00 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008bf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 ff86 	bl	8009b0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bfe:	e051      	b.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d014      	beq.n	8008c36 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d008      	beq.n	8008c36 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d03a      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	4798      	blx	r3
    }
    return;
 8008c34:	e035      	b.n	8008ca2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <HAL_UART_IRQHandler+0x62e>
 8008c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 ff30 	bl	8009ab4 <UART_EndTransmit_IT>
    return;
 8008c54:	e026      	b.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d009      	beq.n	8008c76 <HAL_UART_IRQHandler+0x64e>
 8008c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 ff5f 	bl	8009b32 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c74:	e016      	b.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d010      	beq.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
 8008c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	da0c      	bge.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 ff47 	bl	8009b1e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c90:	e008      	b.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
      return;
 8008c92:	bf00      	nop
 8008c94:	e006      	b.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
    return;
 8008c96:	bf00      	nop
 8008c98:	e004      	b.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
      return;
 8008c9a:	bf00      	nop
 8008c9c:	e002      	b.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
      return;
 8008c9e:	bf00      	nop
 8008ca0:	e000      	b.n	8008ca4 <HAL_UART_IRQHandler+0x67c>
    return;
 8008ca2:	bf00      	nop
  }
}
 8008ca4:	37e8      	adds	r7, #232	@ 0xe8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop

08008cac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d04:	b08c      	sub	sp, #48	@ 0x30
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	689a      	ldr	r2, [r3, #8]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	4bab      	ldr	r3, [pc, #684]	@ (8008fdc <UART_SetConfig+0x2dc>)
 8008d30:	4013      	ands	r3, r2
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	6812      	ldr	r2, [r2, #0]
 8008d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d38:	430b      	orrs	r3, r1
 8008d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4aa0      	ldr	r2, [pc, #640]	@ (8008fe0 <UART_SetConfig+0x2e0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d004      	beq.n	8008d6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008d76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	6812      	ldr	r2, [r2, #0]
 8008d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d80:	430b      	orrs	r3, r1
 8008d82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8a:	f023 010f 	bic.w	r1, r3, #15
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a91      	ldr	r2, [pc, #580]	@ (8008fe4 <UART_SetConfig+0x2e4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d125      	bne.n	8008df0 <UART_SetConfig+0xf0>
 8008da4:	4b90      	ldr	r3, [pc, #576]	@ (8008fe8 <UART_SetConfig+0x2e8>)
 8008da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d81a      	bhi.n	8008de8 <UART_SetConfig+0xe8>
 8008db2:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <UART_SetConfig+0xb8>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008dc9 	.word	0x08008dc9
 8008dbc:	08008dd9 	.word	0x08008dd9
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008de1 	.word	0x08008de1
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dce:	e0d6      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dd6:	e0d2      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008dd8:	2304      	movs	r3, #4
 8008dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dde:	e0ce      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008de0:	2308      	movs	r3, #8
 8008de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008de6:	e0ca      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008de8:	2310      	movs	r3, #16
 8008dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dee:	e0c6      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a7d      	ldr	r2, [pc, #500]	@ (8008fec <UART_SetConfig+0x2ec>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d138      	bne.n	8008e6c <UART_SetConfig+0x16c>
 8008dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8008fe8 <UART_SetConfig+0x2e8>)
 8008dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e00:	f003 030c 	and.w	r3, r3, #12
 8008e04:	2b0c      	cmp	r3, #12
 8008e06:	d82d      	bhi.n	8008e64 <UART_SetConfig+0x164>
 8008e08:	a201      	add	r2, pc, #4	@ (adr r2, 8008e10 <UART_SetConfig+0x110>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e45 	.word	0x08008e45
 8008e14:	08008e65 	.word	0x08008e65
 8008e18:	08008e65 	.word	0x08008e65
 8008e1c:	08008e65 	.word	0x08008e65
 8008e20:	08008e55 	.word	0x08008e55
 8008e24:	08008e65 	.word	0x08008e65
 8008e28:	08008e65 	.word	0x08008e65
 8008e2c:	08008e65 	.word	0x08008e65
 8008e30:	08008e4d 	.word	0x08008e4d
 8008e34:	08008e65 	.word	0x08008e65
 8008e38:	08008e65 	.word	0x08008e65
 8008e3c:	08008e65 	.word	0x08008e65
 8008e40:	08008e5d 	.word	0x08008e5d
 8008e44:	2300      	movs	r3, #0
 8008e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e4a:	e098      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e52:	e094      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008e54:	2304      	movs	r3, #4
 8008e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e5a:	e090      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e62:	e08c      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008e64:	2310      	movs	r3, #16
 8008e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e6a:	e088      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a5f      	ldr	r2, [pc, #380]	@ (8008ff0 <UART_SetConfig+0x2f0>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d125      	bne.n	8008ec2 <UART_SetConfig+0x1c2>
 8008e76:	4b5c      	ldr	r3, [pc, #368]	@ (8008fe8 <UART_SetConfig+0x2e8>)
 8008e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e80:	2b30      	cmp	r3, #48	@ 0x30
 8008e82:	d016      	beq.n	8008eb2 <UART_SetConfig+0x1b2>
 8008e84:	2b30      	cmp	r3, #48	@ 0x30
 8008e86:	d818      	bhi.n	8008eba <UART_SetConfig+0x1ba>
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d00a      	beq.n	8008ea2 <UART_SetConfig+0x1a2>
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d814      	bhi.n	8008eba <UART_SetConfig+0x1ba>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <UART_SetConfig+0x19a>
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d008      	beq.n	8008eaa <UART_SetConfig+0x1aa>
 8008e98:	e00f      	b.n	8008eba <UART_SetConfig+0x1ba>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea0:	e06d      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea8:	e069      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008eaa:	2304      	movs	r3, #4
 8008eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb0:	e065      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008eb2:	2308      	movs	r3, #8
 8008eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb8:	e061      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008eba:	2310      	movs	r3, #16
 8008ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ec0:	e05d      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8008ff4 <UART_SetConfig+0x2f4>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d125      	bne.n	8008f18 <UART_SetConfig+0x218>
 8008ecc:	4b46      	ldr	r3, [pc, #280]	@ (8008fe8 <UART_SetConfig+0x2e8>)
 8008ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ed8:	d016      	beq.n	8008f08 <UART_SetConfig+0x208>
 8008eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8008edc:	d818      	bhi.n	8008f10 <UART_SetConfig+0x210>
 8008ede:	2b80      	cmp	r3, #128	@ 0x80
 8008ee0:	d00a      	beq.n	8008ef8 <UART_SetConfig+0x1f8>
 8008ee2:	2b80      	cmp	r3, #128	@ 0x80
 8008ee4:	d814      	bhi.n	8008f10 <UART_SetConfig+0x210>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <UART_SetConfig+0x1f0>
 8008eea:	2b40      	cmp	r3, #64	@ 0x40
 8008eec:	d008      	beq.n	8008f00 <UART_SetConfig+0x200>
 8008eee:	e00f      	b.n	8008f10 <UART_SetConfig+0x210>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef6:	e042      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008efe:	e03e      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008f00:	2304      	movs	r3, #4
 8008f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f06:	e03a      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008f08:	2308      	movs	r3, #8
 8008f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f0e:	e036      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008f10:	2310      	movs	r3, #16
 8008f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f16:	e032      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a30      	ldr	r2, [pc, #192]	@ (8008fe0 <UART_SetConfig+0x2e0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d12a      	bne.n	8008f78 <UART_SetConfig+0x278>
 8008f22:	4b31      	ldr	r3, [pc, #196]	@ (8008fe8 <UART_SetConfig+0x2e8>)
 8008f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f30:	d01a      	beq.n	8008f68 <UART_SetConfig+0x268>
 8008f32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f36:	d81b      	bhi.n	8008f70 <UART_SetConfig+0x270>
 8008f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f3c:	d00c      	beq.n	8008f58 <UART_SetConfig+0x258>
 8008f3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f42:	d815      	bhi.n	8008f70 <UART_SetConfig+0x270>
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <UART_SetConfig+0x250>
 8008f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f4c:	d008      	beq.n	8008f60 <UART_SetConfig+0x260>
 8008f4e:	e00f      	b.n	8008f70 <UART_SetConfig+0x270>
 8008f50:	2300      	movs	r3, #0
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f56:	e012      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5e:	e00e      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008f60:	2304      	movs	r3, #4
 8008f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f66:	e00a      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008f68:	2308      	movs	r3, #8
 8008f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6e:	e006      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008f70:	2310      	movs	r3, #16
 8008f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f76:	e002      	b.n	8008f7e <UART_SetConfig+0x27e>
 8008f78:	2310      	movs	r3, #16
 8008f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a17      	ldr	r2, [pc, #92]	@ (8008fe0 <UART_SetConfig+0x2e0>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	f040 80a8 	bne.w	80090da <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f8e:	2b08      	cmp	r3, #8
 8008f90:	d834      	bhi.n	8008ffc <UART_SetConfig+0x2fc>
 8008f92:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <UART_SetConfig+0x298>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	08008ffd 	.word	0x08008ffd
 8008fa0:	08008fc5 	.word	0x08008fc5
 8008fa4:	08008ffd 	.word	0x08008ffd
 8008fa8:	08008fcb 	.word	0x08008fcb
 8008fac:	08008ffd 	.word	0x08008ffd
 8008fb0:	08008ffd 	.word	0x08008ffd
 8008fb4:	08008ffd 	.word	0x08008ffd
 8008fb8:	08008fd3 	.word	0x08008fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fbc:	f7fd f910 	bl	80061e0 <HAL_RCC_GetPCLK1Freq>
 8008fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fc2:	e021      	b.n	8009008 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff8 <UART_SetConfig+0x2f8>)
 8008fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fc8:	e01e      	b.n	8009008 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fca:	f7fd f89d 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 8008fce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fd0:	e01a      	b.n	8009008 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fd8:	e016      	b.n	8009008 <UART_SetConfig+0x308>
 8008fda:	bf00      	nop
 8008fdc:	cfff69f3 	.word	0xcfff69f3
 8008fe0:	40008000 	.word	0x40008000
 8008fe4:	40013800 	.word	0x40013800
 8008fe8:	40021000 	.word	0x40021000
 8008fec:	40004400 	.word	0x40004400
 8008ff0:	40004800 	.word	0x40004800
 8008ff4:	40004c00 	.word	0x40004c00
 8008ff8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009006:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 812a 	beq.w	8009264 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009014:	4a9e      	ldr	r2, [pc, #632]	@ (8009290 <UART_SetConfig+0x590>)
 8009016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800901a:	461a      	mov	r2, r3
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009022:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	4613      	mov	r3, r2
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	4413      	add	r3, r2
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	429a      	cmp	r2, r3
 8009032:	d305      	bcc.n	8009040 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	429a      	cmp	r2, r3
 800903e:	d903      	bls.n	8009048 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009046:	e10d      	b.n	8009264 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904a:	2200      	movs	r2, #0
 800904c:	60bb      	str	r3, [r7, #8]
 800904e:	60fa      	str	r2, [r7, #12]
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009054:	4a8e      	ldr	r2, [pc, #568]	@ (8009290 <UART_SetConfig+0x590>)
 8009056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905a:	b29b      	uxth	r3, r3
 800905c:	2200      	movs	r2, #0
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	607a      	str	r2, [r7, #4]
 8009062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009066:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800906a:	f7f7 fe35 	bl	8000cd8 <__aeabi_uldivmod>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4610      	mov	r0, r2
 8009074:	4619      	mov	r1, r3
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	f04f 0300 	mov.w	r3, #0
 800907e:	020b      	lsls	r3, r1, #8
 8009080:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009084:	0202      	lsls	r2, r0, #8
 8009086:	6979      	ldr	r1, [r7, #20]
 8009088:	6849      	ldr	r1, [r1, #4]
 800908a:	0849      	lsrs	r1, r1, #1
 800908c:	2000      	movs	r0, #0
 800908e:	460c      	mov	r4, r1
 8009090:	4605      	mov	r5, r0
 8009092:	eb12 0804 	adds.w	r8, r2, r4
 8009096:	eb43 0905 	adc.w	r9, r3, r5
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	469a      	mov	sl, r3
 80090a2:	4693      	mov	fp, r2
 80090a4:	4652      	mov	r2, sl
 80090a6:	465b      	mov	r3, fp
 80090a8:	4640      	mov	r0, r8
 80090aa:	4649      	mov	r1, r9
 80090ac:	f7f7 fe14 	bl	8000cd8 <__aeabi_uldivmod>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4613      	mov	r3, r2
 80090b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090be:	d308      	bcc.n	80090d2 <UART_SetConfig+0x3d2>
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090c6:	d204      	bcs.n	80090d2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6a3a      	ldr	r2, [r7, #32]
 80090ce:	60da      	str	r2, [r3, #12]
 80090d0:	e0c8      	b.n	8009264 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090d8:	e0c4      	b.n	8009264 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090e2:	d167      	bne.n	80091b4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80090e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090e8:	2b08      	cmp	r3, #8
 80090ea:	d828      	bhi.n	800913e <UART_SetConfig+0x43e>
 80090ec:	a201      	add	r2, pc, #4	@ (adr r2, 80090f4 <UART_SetConfig+0x3f4>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	08009119 	.word	0x08009119
 80090f8:	08009121 	.word	0x08009121
 80090fc:	08009129 	.word	0x08009129
 8009100:	0800913f 	.word	0x0800913f
 8009104:	0800912f 	.word	0x0800912f
 8009108:	0800913f 	.word	0x0800913f
 800910c:	0800913f 	.word	0x0800913f
 8009110:	0800913f 	.word	0x0800913f
 8009114:	08009137 	.word	0x08009137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009118:	f7fd f862 	bl	80061e0 <HAL_RCC_GetPCLK1Freq>
 800911c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800911e:	e014      	b.n	800914a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009120:	f7fd f874 	bl	800620c <HAL_RCC_GetPCLK2Freq>
 8009124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009126:	e010      	b.n	800914a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009128:	4b5a      	ldr	r3, [pc, #360]	@ (8009294 <UART_SetConfig+0x594>)
 800912a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800912c:	e00d      	b.n	800914a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800912e:	f7fc ffeb 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 8009132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009134:	e009      	b.n	800914a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800913a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800913c:	e005      	b.n	800914a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800914a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8089 	beq.w	8009264 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009156:	4a4e      	ldr	r2, [pc, #312]	@ (8009290 <UART_SetConfig+0x590>)
 8009158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800915c:	461a      	mov	r2, r3
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	fbb3 f3f2 	udiv	r3, r3, r2
 8009164:	005a      	lsls	r2, r3, #1
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	085b      	lsrs	r3, r3, #1
 800916c:	441a      	add	r2, r3
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	fbb2 f3f3 	udiv	r3, r2, r3
 8009176:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	2b0f      	cmp	r3, #15
 800917c:	d916      	bls.n	80091ac <UART_SetConfig+0x4ac>
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009184:	d212      	bcs.n	80091ac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	b29b      	uxth	r3, r3
 800918a:	f023 030f 	bic.w	r3, r3, #15
 800918e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	085b      	lsrs	r3, r3, #1
 8009194:	b29b      	uxth	r3, r3
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	b29a      	uxth	r2, r3
 800919c:	8bfb      	ldrh	r3, [r7, #30]
 800919e:	4313      	orrs	r3, r2
 80091a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	8bfa      	ldrh	r2, [r7, #30]
 80091a8:	60da      	str	r2, [r3, #12]
 80091aa:	e05b      	b.n	8009264 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091b2:	e057      	b.n	8009264 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091b8:	2b08      	cmp	r3, #8
 80091ba:	d828      	bhi.n	800920e <UART_SetConfig+0x50e>
 80091bc:	a201      	add	r2, pc, #4	@ (adr r2, 80091c4 <UART_SetConfig+0x4c4>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	080091e9 	.word	0x080091e9
 80091c8:	080091f1 	.word	0x080091f1
 80091cc:	080091f9 	.word	0x080091f9
 80091d0:	0800920f 	.word	0x0800920f
 80091d4:	080091ff 	.word	0x080091ff
 80091d8:	0800920f 	.word	0x0800920f
 80091dc:	0800920f 	.word	0x0800920f
 80091e0:	0800920f 	.word	0x0800920f
 80091e4:	08009207 	.word	0x08009207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091e8:	f7fc fffa 	bl	80061e0 <HAL_RCC_GetPCLK1Freq>
 80091ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091ee:	e014      	b.n	800921a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091f0:	f7fd f80c 	bl	800620c <HAL_RCC_GetPCLK2Freq>
 80091f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091f6:	e010      	b.n	800921a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091f8:	4b26      	ldr	r3, [pc, #152]	@ (8009294 <UART_SetConfig+0x594>)
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091fc:	e00d      	b.n	800921a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091fe:	f7fc ff83 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 8009202:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009204:	e009      	b.n	800921a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800920a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800920c:	e005      	b.n	800921a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009218:	bf00      	nop
    }

    if (pclk != 0U)
 800921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921c:	2b00      	cmp	r3, #0
 800921e:	d021      	beq.n	8009264 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009224:	4a1a      	ldr	r2, [pc, #104]	@ (8009290 <UART_SetConfig+0x590>)
 8009226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800922a:	461a      	mov	r2, r3
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	085b      	lsrs	r3, r3, #1
 8009238:	441a      	add	r2, r3
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009242:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	2b0f      	cmp	r3, #15
 8009248:	d909      	bls.n	800925e <UART_SetConfig+0x55e>
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009250:	d205      	bcs.n	800925e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	b29a      	uxth	r2, r3
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60da      	str	r2, [r3, #12]
 800925c:	e002      	b.n	8009264 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2201      	movs	r2, #1
 8009268:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2201      	movs	r2, #1
 8009270:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	2200      	movs	r2, #0
 8009278:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2200      	movs	r2, #0
 800927e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009280:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009284:	4618      	mov	r0, r3
 8009286:	3730      	adds	r7, #48	@ 0x30
 8009288:	46bd      	mov	sp, r7
 800928a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800928e:	bf00      	nop
 8009290:	08010ca4 	.word	0x08010ca4
 8009294:	00f42400 	.word	0x00f42400

08009298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00a      	beq.n	80092c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00a      	beq.n	8009306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800930a:	f003 0304 	and.w	r3, r3, #4
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00a      	beq.n	800934a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	430a      	orrs	r2, r1
 800936a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01a      	beq.n	80093ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009396:	d10a      	bne.n	80093ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	605a      	str	r2, [r3, #4]
  }
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b098      	sub	sp, #96	@ 0x60
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093ec:	f7f9 fece 	bl	800318c <HAL_GetTick>
 80093f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0308 	and.w	r3, r3, #8
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d12f      	bne.n	8009460 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009400:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009408:	2200      	movs	r2, #0
 800940a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f88e 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d022      	beq.n	8009460 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800942a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800942e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009438:	647b      	str	r3, [r7, #68]	@ 0x44
 800943a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800943e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e6      	bne.n	800941a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e063      	b.n	8009528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0304 	and.w	r3, r3, #4
 800946a:	2b04      	cmp	r3, #4
 800946c:	d149      	bne.n	8009502 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800946e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009476:	2200      	movs	r2, #0
 8009478:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f857 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d03c      	beq.n	8009502 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	623b      	str	r3, [r7, #32]
   return(result);
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800949c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e6      	bne.n	8009488 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f023 0301 	bic.w	r3, r3, #1
 80094d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3308      	adds	r3, #8
 80094d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094da:	61fa      	str	r2, [r7, #28]
 80094dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	69b9      	ldr	r1, [r7, #24]
 80094e0:	69fa      	ldr	r2, [r7, #28]
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	617b      	str	r3, [r7, #20]
   return(result);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e5      	bne.n	80094ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e012      	b.n	8009528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2220      	movs	r2, #32
 8009506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3758      	adds	r7, #88	@ 0x58
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	4613      	mov	r3, r2
 800953e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009540:	e04f      	b.n	80095e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d04b      	beq.n	80095e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954a:	f7f9 fe1f 	bl	800318c <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	429a      	cmp	r2, r3
 8009558:	d302      	bcc.n	8009560 <UART_WaitOnFlagUntilTimeout+0x30>
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e04e      	b.n	8009602 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b00      	cmp	r3, #0
 8009570:	d037      	beq.n	80095e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b80      	cmp	r3, #128	@ 0x80
 8009576:	d034      	beq.n	80095e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b40      	cmp	r3, #64	@ 0x40
 800957c:	d031      	beq.n	80095e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	f003 0308 	and.w	r3, r3, #8
 8009588:	2b08      	cmp	r3, #8
 800958a:	d110      	bne.n	80095ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2208      	movs	r2, #8
 8009592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 f920 	bl	80097da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2208      	movs	r2, #8
 800959e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e029      	b.n	8009602 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095bc:	d111      	bne.n	80095e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 f906 	bl	80097da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2220      	movs	r2, #32
 80095d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e00f      	b.n	8009602 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	69da      	ldr	r2, [r3, #28]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	4013      	ands	r3, r2
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	bf0c      	ite	eq
 80095f2:	2301      	moveq	r3, #1
 80095f4:	2300      	movne	r3, #0
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	461a      	mov	r2, r3
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d0a0      	beq.n	8009542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b096      	sub	sp, #88	@ 0x58
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	88fa      	ldrh	r2, [r7, #6]
 8009624:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2222      	movs	r2, #34	@ 0x22
 8009634:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800963e:	2b00      	cmp	r3, #0
 8009640:	d02d      	beq.n	800969e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009648:	4a40      	ldr	r2, [pc, #256]	@ (800974c <UART_Start_Receive_DMA+0x140>)
 800964a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009652:	4a3f      	ldr	r2, [pc, #252]	@ (8009750 <UART_Start_Receive_DMA+0x144>)
 8009654:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800965c:	4a3d      	ldr	r2, [pc, #244]	@ (8009754 <UART_Start_Receive_DMA+0x148>)
 800965e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009666:	2200      	movs	r2, #0
 8009668:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3324      	adds	r3, #36	@ 0x24
 8009676:	4619      	mov	r1, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800967c:	461a      	mov	r2, r3
 800967e:	88fb      	ldrh	r3, [r7, #6]
 8009680:	f7fb f9a8 	bl	80049d4 <HAL_DMA_Start_IT>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d009      	beq.n	800969e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2210      	movs	r2, #16
 800968e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2220      	movs	r2, #32
 8009696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e051      	b.n	8009742 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d018      	beq.n	80096d8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096c6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80096d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e6      	bne.n	80096a6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3308      	adds	r3, #8
 80096de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ea:	f043 0301 	orr.w	r3, r3, #1
 80096ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80096fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80096fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e5      	bne.n	80096d8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3308      	adds	r3, #8
 8009712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	e853 3f00 	ldrex	r3, [r3]
 800971a:	613b      	str	r3, [r7, #16]
   return(result);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3308      	adds	r3, #8
 800972a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800972c:	623a      	str	r2, [r7, #32]
 800972e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	69f9      	ldr	r1, [r7, #28]
 8009732:	6a3a      	ldr	r2, [r7, #32]
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	61bb      	str	r3, [r7, #24]
   return(result);
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e5      	bne.n	800970c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3758      	adds	r7, #88	@ 0x58
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	080098a7 	.word	0x080098a7
 8009750:	080099d3 	.word	0x080099d3
 8009754:	08009a11 	.word	0x08009a11

08009758 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009758:	b480      	push	{r7}
 800975a:	b08f      	sub	sp, #60	@ 0x3c
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	61fb      	str	r3, [r7, #28]
   return(result);
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009774:	637b      	str	r3, [r7, #52]	@ 0x34
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800977e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009780:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800978c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e6      	bne.n	8009760 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	e853 3f00 	ldrex	r3, [r3]
 80097a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80097a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3308      	adds	r3, #8
 80097b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b2:	61ba      	str	r2, [r7, #24]
 80097b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b6:	6979      	ldr	r1, [r7, #20]
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	e841 2300 	strex	r3, r2, [r1]
 80097be:	613b      	str	r3, [r7, #16]
   return(result);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1e5      	bne.n	8009792 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2220      	movs	r2, #32
 80097ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80097ce:	bf00      	nop
 80097d0:	373c      	adds	r7, #60	@ 0x3c
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097da:	b480      	push	{r7}
 80097dc:	b095      	sub	sp, #84	@ 0x54
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009800:	643b      	str	r3, [r7, #64]	@ 0x40
 8009802:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009806:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800980e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e6      	bne.n	80097e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3308      	adds	r3, #8
 800981a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	e853 3f00 	ldrex	r3, [r3]
 8009822:	61fb      	str	r3, [r7, #28]
   return(result);
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800982a:	f023 0301 	bic.w	r3, r3, #1
 800982e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3308      	adds	r3, #8
 8009836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009838:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800983a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800983e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009840:	e841 2300 	strex	r3, r2, [r1]
 8009844:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e3      	bne.n	8009814 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009850:	2b01      	cmp	r3, #1
 8009852:	d118      	bne.n	8009886 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	60bb      	str	r3, [r7, #8]
   return(result);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	f023 0310 	bic.w	r3, r3, #16
 8009868:	647b      	str	r3, [r7, #68]	@ 0x44
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009872:	61bb      	str	r3, [r7, #24]
 8009874:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	6979      	ldr	r1, [r7, #20]
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	613b      	str	r3, [r7, #16]
   return(result);
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e6      	bne.n	8009854 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2220      	movs	r2, #32
 800988a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800989a:	bf00      	nop
 800989c:	3754      	adds	r7, #84	@ 0x54
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b09c      	sub	sp, #112	@ 0x70
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d171      	bne.n	80099a6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80098c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098c4:	2200      	movs	r2, #0
 80098c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e6      	bne.n	80098ca <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800990c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990e:	f023 0301 	bic.w	r3, r3, #1
 8009912:	667b      	str	r3, [r7, #100]	@ 0x64
 8009914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3308      	adds	r3, #8
 800991a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800991c:	647a      	str	r2, [r7, #68]	@ 0x44
 800991e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800992a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e5      	bne.n	80098fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3308      	adds	r3, #8
 8009936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	623b      	str	r3, [r7, #32]
   return(result);
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009946:	663b      	str	r3, [r7, #96]	@ 0x60
 8009948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3308      	adds	r3, #8
 800994e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009950:	633a      	str	r2, [r7, #48]	@ 0x30
 8009952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009958:	e841 2300 	strex	r3, r2, [r1]
 800995c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1e5      	bne.n	8009930 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009966:	2220      	movs	r2, #32
 8009968:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800996c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800996e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009970:	2b01      	cmp	r3, #1
 8009972:	d118      	bne.n	80099a6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	e853 3f00 	ldrex	r3, [r3]
 8009980:	60fb      	str	r3, [r7, #12]
   return(result);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f023 0310 	bic.w	r3, r3, #16
 8009988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800998a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009996:	69b9      	ldr	r1, [r7, #24]
 8009998:	69fa      	ldr	r2, [r7, #28]
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	617b      	str	r3, [r7, #20]
   return(result);
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1e6      	bne.n	8009974 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099a8:	2200      	movs	r2, #0
 80099aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d107      	bne.n	80099c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099ba:	4619      	mov	r1, r3
 80099bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099be:	f7ff f993 	bl	8008ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099c2:	e002      	b.n	80099ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80099c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099c6:	f7f9 fa25 	bl	8002e14 <HAL_UART_RxCpltCallback>
}
 80099ca:	bf00      	nop
 80099cc:	3770      	adds	r7, #112	@ 0x70
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2201      	movs	r2, #1
 80099e4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d109      	bne.n	8009a02 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099f4:	085b      	lsrs	r3, r3, #1
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	4619      	mov	r1, r3
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f7ff f974 	bl	8008ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a00:	e002      	b.n	8009a08 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f7ff f95c 	bl	8008cc0 <HAL_UART_RxHalfCpltCallback>
}
 8009a08:	bf00      	nop
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a38:	2b80      	cmp	r3, #128	@ 0x80
 8009a3a:	d109      	bne.n	8009a50 <UART_DMAError+0x40>
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	2b21      	cmp	r3, #33	@ 0x21
 8009a40:	d106      	bne.n	8009a50 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009a4a:	6978      	ldr	r0, [r7, #20]
 8009a4c:	f7ff fe84 	bl	8009758 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a5a:	2b40      	cmp	r3, #64	@ 0x40
 8009a5c:	d109      	bne.n	8009a72 <UART_DMAError+0x62>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b22      	cmp	r3, #34	@ 0x22
 8009a62:	d106      	bne.n	8009a72 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009a6c:	6978      	ldr	r0, [r7, #20]
 8009a6e:	f7ff feb4 	bl	80097da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a78:	f043 0210 	orr.w	r2, r3, #16
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a82:	6978      	ldr	r0, [r7, #20]
 8009a84:	f7ff f926 	bl	8008cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a88:	bf00      	nop
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7ff f914 	bl	8008cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aac:	bf00      	nop
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ad0:	61fb      	str	r3, [r7, #28]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	61bb      	str	r3, [r7, #24]
 8009adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6979      	ldr	r1, [r7, #20]
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e6      	bne.n	8009abc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff f8d5 	bl	8008cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b02:	bf00      	nop
 8009b04:	3720      	adds	r7, #32
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b083      	sub	sp, #12
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b12:	bf00      	nop
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b26:	bf00      	nop
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b3a:	bf00      	nop
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b085      	sub	sp, #20
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d101      	bne.n	8009b5c <HAL_UARTEx_DisableFifoMode+0x16>
 8009b58:	2302      	movs	r3, #2
 8009b5a:	e027      	b.n	8009bac <HAL_UARTEx_DisableFifoMode+0x66>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2224      	movs	r2, #36	@ 0x24
 8009b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0201 	bic.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d101      	bne.n	8009bd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	e02d      	b.n	8009c2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2224      	movs	r2, #36	@ 0x24
 8009bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f022 0201 	bic.w	r2, r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f84f 	bl	8009cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e02d      	b.n	8009ca8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2224      	movs	r2, #36	@ 0x24
 8009c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f022 0201 	bic.w	r2, r2, #1
 8009c72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f811 	bl	8009cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d108      	bne.n	8009cd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cd0:	e031      	b.n	8009d36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cd2:	2308      	movs	r3, #8
 8009cd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	0e5b      	lsrs	r3, r3, #25
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f003 0307 	and.w	r3, r3, #7
 8009ce8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	0f5b      	lsrs	r3, r3, #29
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f003 0307 	and.w	r3, r3, #7
 8009cf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	7b3a      	ldrb	r2, [r7, #12]
 8009cfe:	4911      	ldr	r1, [pc, #68]	@ (8009d44 <UARTEx_SetNbDataToProcess+0x94>)
 8009d00:	5c8a      	ldrb	r2, [r1, r2]
 8009d02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d06:	7b3a      	ldrb	r2, [r7, #12]
 8009d08:	490f      	ldr	r1, [pc, #60]	@ (8009d48 <UARTEx_SetNbDataToProcess+0x98>)
 8009d0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	7b7a      	ldrb	r2, [r7, #13]
 8009d1c:	4909      	ldr	r1, [pc, #36]	@ (8009d44 <UARTEx_SetNbDataToProcess+0x94>)
 8009d1e:	5c8a      	ldrb	r2, [r1, r2]
 8009d20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d24:	7b7a      	ldrb	r2, [r7, #13]
 8009d26:	4908      	ldr	r1, [pc, #32]	@ (8009d48 <UARTEx_SetNbDataToProcess+0x98>)
 8009d28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d36:	bf00      	nop
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	08010cbc 	.word	0x08010cbc
 8009d48:	08010cc4 	.word	0x08010cc4

08009d4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d54:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009d58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	43db      	mvns	r3, r3
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b085      	sub	sp, #20
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	1d3b      	adds	r3, r7, #4
 8009d8c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
	...

08009dc0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8009dc4:	4907      	ldr	r1, [pc, #28]	@ (8009de4 <MX_FATFS_Init+0x24>)
 8009dc6:	4808      	ldr	r0, [pc, #32]	@ (8009de8 <MX_FATFS_Init+0x28>)
 8009dc8:	f002 fb64 	bl	800c494 <FATFS_LinkDriver>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd6:	e003      	b.n	8009de0 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8009dd8:	4b04      	ldr	r3, [pc, #16]	@ (8009dec <MX_FATFS_Init+0x2c>)
 8009dda:	2201      	movs	r2, #1
 8009ddc:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8009dde:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20001240 	.word	0x20001240
 8009de8:	20000018 	.word	0x20000018
 8009dec:	20001244 	.word	0x20001244

08009df0 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009df0:	b480      	push	{r7}
 8009df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009df4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7f7 fd3b 	bl	8001888 <SD_disk_initialize>
 8009e12:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7f7 fe17 	bl	8001a5c <SD_disk_status>
 8009e2e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60b9      	str	r1, [r7, #8]
 8009e40:	607a      	str	r2, [r7, #4]
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009e48:	7bf8      	ldrb	r0, [r7, #15]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	68b9      	ldr	r1, [r7, #8]
 8009e50:	f7f7 fe1a 	bl	8001a88 <SD_disk_read>
 8009e54:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
 8009e68:	603b      	str	r3, [r7, #0]
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8009e6e:	7bf8      	ldrb	r0, [r7, #15]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	f7f7 fe71 	bl	8001b5c <SD_disk_write>
 8009e7a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	603a      	str	r2, [r7, #0]
 8009e8e:	71fb      	strb	r3, [r7, #7]
 8009e90:	460b      	mov	r3, r1
 8009e92:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8009e94:	79b9      	ldrb	r1, [r7, #6]
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7f7 fee2 	bl	8001c64 <SD_disk_ioctl>
 8009ea0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	4a08      	ldr	r2, [pc, #32]	@ (8009edc <disk_status+0x30>)
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	79fa      	ldrb	r2, [r7, #7]
 8009ec4:	4905      	ldr	r1, [pc, #20]	@ (8009edc <disk_status+0x30>)
 8009ec6:	440a      	add	r2, r1
 8009ec8:	7a12      	ldrb	r2, [r2, #8]
 8009eca:	4610      	mov	r0, r2
 8009ecc:	4798      	blx	r3
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20001270 	.word	0x20001270

08009ee0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009eee:	79fb      	ldrb	r3, [r7, #7]
 8009ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8009f28 <disk_initialize+0x48>)
 8009ef2:	5cd3      	ldrb	r3, [r2, r3]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d111      	bne.n	8009f1c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	4a0b      	ldr	r2, [pc, #44]	@ (8009f28 <disk_initialize+0x48>)
 8009efc:	2101      	movs	r1, #1
 8009efe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	4a09      	ldr	r2, [pc, #36]	@ (8009f28 <disk_initialize+0x48>)
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	79fa      	ldrb	r2, [r7, #7]
 8009f0e:	4906      	ldr	r1, [pc, #24]	@ (8009f28 <disk_initialize+0x48>)
 8009f10:	440a      	add	r2, r1
 8009f12:	7a12      	ldrb	r2, [r2, #8]
 8009f14:	4610      	mov	r0, r2
 8009f16:	4798      	blx	r3
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20001270 	.word	0x20001270

08009f2c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009f2c:	b590      	push	{r4, r7, lr}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	607a      	str	r2, [r7, #4]
 8009f36:	603b      	str	r3, [r7, #0]
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8009f68 <disk_read+0x3c>)
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	689c      	ldr	r4, [r3, #8]
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	4a07      	ldr	r2, [pc, #28]	@ (8009f68 <disk_read+0x3c>)
 8009f4c:	4413      	add	r3, r2
 8009f4e:	7a18      	ldrb	r0, [r3, #8]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	47a0      	blx	r4
 8009f58:	4603      	mov	r3, r0
 8009f5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	371c      	adds	r7, #28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd90      	pop	{r4, r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20001270 	.word	0x20001270

08009f6c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009f6c:	b590      	push	{r4, r7, lr}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8009fa8 <disk_write+0x3c>)
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	68dc      	ldr	r4, [r3, #12]
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	4a07      	ldr	r2, [pc, #28]	@ (8009fa8 <disk_write+0x3c>)
 8009f8c:	4413      	add	r3, r2
 8009f8e:	7a18      	ldrb	r0, [r3, #8]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	68b9      	ldr	r1, [r7, #8]
 8009f96:	47a0      	blx	r4
 8009f98:	4603      	mov	r3, r0
 8009f9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd90      	pop	{r4, r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20001270 	.word	0x20001270

08009fac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	603a      	str	r2, [r7, #0]
 8009fb6:	71fb      	strb	r3, [r7, #7]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	4a09      	ldr	r2, [pc, #36]	@ (8009fe4 <disk_ioctl+0x38>)
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	79fa      	ldrb	r2, [r7, #7]
 8009fca:	4906      	ldr	r1, [pc, #24]	@ (8009fe4 <disk_ioctl+0x38>)
 8009fcc:	440a      	add	r2, r1
 8009fce:	7a10      	ldrb	r0, [r2, #8]
 8009fd0:	79b9      	ldrb	r1, [r7, #6]
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	4798      	blx	r3
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73fb      	strb	r3, [r7, #15]
  return res;
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20001270 	.word	0x20001270

08009fe8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009ff8:	89fb      	ldrh	r3, [r7, #14]
 8009ffa:	021b      	lsls	r3, r3, #8
 8009ffc:	b21a      	sxth	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	b21b      	sxth	r3, r3
 800a004:	4313      	orrs	r3, r2
 800a006:	b21b      	sxth	r3, r3
 800a008:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a00a:	89fb      	ldrh	r3, [r7, #14]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	3303      	adds	r3, #3
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	021b      	lsls	r3, r3, #8
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	3202      	adds	r2, #2
 800a030:	7812      	ldrb	r2, [r2, #0]
 800a032:	4313      	orrs	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	021b      	lsls	r3, r3, #8
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	3201      	adds	r2, #1
 800a03e:	7812      	ldrb	r2, [r2, #0]
 800a040:	4313      	orrs	r3, r2
 800a042:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	7812      	ldrb	r2, [r2, #0]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
	return rv;
 800a050:	68fb      	ldr	r3, [r7, #12]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	460b      	mov	r3, r1
 800a068:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	887a      	ldrh	r2, [r7, #2]
 800a072:	b2d2      	uxtb	r2, r2
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	887b      	ldrh	r3, [r7, #2]
 800a078:	0a1b      	lsrs	r3, r3, #8
 800a07a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	607a      	str	r2, [r7, #4]
 800a082:	887a      	ldrh	r2, [r7, #2]
 800a084:	b2d2      	uxtb	r2, r2
 800a086:	701a      	strb	r2, [r3, #0]
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	b2d2      	uxtb	r2, r2
 800a0a8:	701a      	strb	r2, [r3, #0]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	0a1b      	lsrs	r3, r3, #8
 800a0ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	b2d2      	uxtb	r2, r2
 800a0ba:	701a      	strb	r2, [r3, #0]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	0a1b      	lsrs	r3, r3, #8
 800a0c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	b2d2      	uxtb	r2, r2
 800a0cc:	701a      	strb	r2, [r3, #0]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	0a1b      	lsrs	r3, r3, #8
 800a0d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	607a      	str	r2, [r7, #4]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	b2d2      	uxtb	r2, r2
 800a0de:	701a      	strb	r2, [r3, #0]
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00d      	beq.n	800a122 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	1c53      	adds	r3, r2, #1
 800a10a:	613b      	str	r3, [r7, #16]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	1c59      	adds	r1, r3, #1
 800a110:	6179      	str	r1, [r7, #20]
 800a112:	7812      	ldrb	r2, [r2, #0]
 800a114:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3b01      	subs	r3, #1
 800a11a:	607b      	str	r3, [r7, #4]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1f1      	bne.n	800a106 <mem_cpy+0x1a>
	}
}
 800a122:	bf00      	nop
 800a124:	371c      	adds	r7, #28
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a12e:	b480      	push	{r7}
 800a130:	b087      	sub	sp, #28
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	617a      	str	r2, [r7, #20]
 800a144:	68ba      	ldr	r2, [r7, #8]
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	607b      	str	r3, [r7, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1f3      	bne.n	800a13e <mem_set+0x10>
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	371c      	adds	r7, #28
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a164:	b480      	push	{r7}
 800a166:	b089      	sub	sp, #36	@ 0x24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	61fb      	str	r3, [r7, #28]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	61fa      	str	r2, [r7, #28]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	4619      	mov	r1, r3
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	61ba      	str	r2, [r7, #24]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	1acb      	subs	r3, r1, r3
 800a190:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3b01      	subs	r3, #1
 800a196:	607b      	str	r3, [r7, #4]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <mem_cmp+0x40>
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0eb      	beq.n	800a17c <mem_cmp+0x18>

	return r;
 800a1a4:	697b      	ldr	r3, [r7, #20]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3724      	adds	r7, #36	@ 0x24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a1b2:	b480      	push	{r7}
 800a1b4:	b083      	sub	sp, #12
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a1bc:	e002      	b.n	800a1c4 <chk_chr+0x12>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	607b      	str	r3, [r7, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d005      	beq.n	800a1d8 <chk_chr+0x26>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d1f2      	bne.n	800a1be <chk_chr+0xc>
	return *str;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	781b      	ldrb	r3, [r3, #0]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60bb      	str	r3, [r7, #8]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	e029      	b.n	800a250 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a1fc:	4a27      	ldr	r2, [pc, #156]	@ (800a29c <chk_lock+0xb4>)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	011b      	lsls	r3, r3, #4
 800a202:	4413      	add	r3, r2
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d01d      	beq.n	800a246 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a20a:	4a24      	ldr	r2, [pc, #144]	@ (800a29c <chk_lock+0xb4>)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	011b      	lsls	r3, r3, #4
 800a210:	4413      	add	r3, r2
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d116      	bne.n	800a24a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a21c:	4a1f      	ldr	r2, [pc, #124]	@ (800a29c <chk_lock+0xb4>)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	4413      	add	r3, r2
 800a224:	3304      	adds	r3, #4
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d10c      	bne.n	800a24a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a230:	4a1a      	ldr	r2, [pc, #104]	@ (800a29c <chk_lock+0xb4>)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	4413      	add	r3, r2
 800a238:	3308      	adds	r3, #8
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a240:	429a      	cmp	r2, r3
 800a242:	d102      	bne.n	800a24a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a244:	e007      	b.n	800a256 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a246:	2301      	movs	r3, #1
 800a248:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3301      	adds	r3, #1
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d9d2      	bls.n	800a1fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d109      	bne.n	800a270 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <chk_lock+0x80>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d101      	bne.n	800a26c <chk_lock+0x84>
 800a268:	2300      	movs	r3, #0
 800a26a:	e010      	b.n	800a28e <chk_lock+0xa6>
 800a26c:	2312      	movs	r3, #18
 800a26e:	e00e      	b.n	800a28e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d108      	bne.n	800a288 <chk_lock+0xa0>
 800a276:	4a09      	ldr	r2, [pc, #36]	@ (800a29c <chk_lock+0xb4>)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	4413      	add	r3, r2
 800a27e:	330c      	adds	r3, #12
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a286:	d101      	bne.n	800a28c <chk_lock+0xa4>
 800a288:	2310      	movs	r3, #16
 800a28a:	e000      	b.n	800a28e <chk_lock+0xa6>
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20001250 	.word	0x20001250

0800a2a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	607b      	str	r3, [r7, #4]
 800a2aa:	e002      	b.n	800a2b2 <enq_lock+0x12>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	607b      	str	r3, [r7, #4]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d806      	bhi.n	800a2c6 <enq_lock+0x26>
 800a2b8:	4a09      	ldr	r2, [pc, #36]	@ (800a2e0 <enq_lock+0x40>)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	4413      	add	r3, r2
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1f2      	bne.n	800a2ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	bf14      	ite	ne
 800a2cc:	2301      	movne	r3, #1
 800a2ce:	2300      	moveq	r3, #0
 800a2d0:	b2db      	uxtb	r3, r3
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	20001250 	.word	0x20001250

0800a2e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	e01f      	b.n	800a334 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a2f4:	4a41      	ldr	r2, [pc, #260]	@ (800a3fc <inc_lock+0x118>)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	011b      	lsls	r3, r3, #4
 800a2fa:	4413      	add	r3, r2
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d113      	bne.n	800a32e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a306:	4a3d      	ldr	r2, [pc, #244]	@ (800a3fc <inc_lock+0x118>)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	011b      	lsls	r3, r3, #4
 800a30c:	4413      	add	r3, r2
 800a30e:	3304      	adds	r3, #4
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a316:	429a      	cmp	r2, r3
 800a318:	d109      	bne.n	800a32e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a31a:	4a38      	ldr	r2, [pc, #224]	@ (800a3fc <inc_lock+0x118>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	4413      	add	r3, r2
 800a322:	3308      	adds	r3, #8
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d006      	beq.n	800a33c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3301      	adds	r3, #1
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d9dc      	bls.n	800a2f4 <inc_lock+0x10>
 800a33a:	e000      	b.n	800a33e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a33c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b02      	cmp	r3, #2
 800a342:	d132      	bne.n	800a3aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a344:	2300      	movs	r3, #0
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	e002      	b.n	800a350 <inc_lock+0x6c>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	3301      	adds	r3, #1
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d806      	bhi.n	800a364 <inc_lock+0x80>
 800a356:	4a29      	ldr	r2, [pc, #164]	@ (800a3fc <inc_lock+0x118>)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	4413      	add	r3, r2
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1f2      	bne.n	800a34a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d101      	bne.n	800a36e <inc_lock+0x8a>
 800a36a:	2300      	movs	r3, #0
 800a36c:	e040      	b.n	800a3f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	4922      	ldr	r1, [pc, #136]	@ (800a3fc <inc_lock+0x118>)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	011b      	lsls	r3, r3, #4
 800a378:	440b      	add	r3, r1
 800a37a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	491e      	ldr	r1, [pc, #120]	@ (800a3fc <inc_lock+0x118>)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	440b      	add	r3, r1
 800a388:	3304      	adds	r3, #4
 800a38a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	695a      	ldr	r2, [r3, #20]
 800a390:	491a      	ldr	r1, [pc, #104]	@ (800a3fc <inc_lock+0x118>)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	011b      	lsls	r3, r3, #4
 800a396:	440b      	add	r3, r1
 800a398:	3308      	adds	r3, #8
 800a39a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a39c:	4a17      	ldr	r2, [pc, #92]	@ (800a3fc <inc_lock+0x118>)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	011b      	lsls	r3, r3, #4
 800a3a2:	4413      	add	r3, r2
 800a3a4:	330c      	adds	r3, #12
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d009      	beq.n	800a3c4 <inc_lock+0xe0>
 800a3b0:	4a12      	ldr	r2, [pc, #72]	@ (800a3fc <inc_lock+0x118>)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	4413      	add	r3, r2
 800a3b8:	330c      	adds	r3, #12
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d001      	beq.n	800a3c4 <inc_lock+0xe0>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e015      	b.n	800a3f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d108      	bne.n	800a3dc <inc_lock+0xf8>
 800a3ca:	4a0c      	ldr	r2, [pc, #48]	@ (800a3fc <inc_lock+0x118>)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	011b      	lsls	r3, r3, #4
 800a3d0:	4413      	add	r3, r2
 800a3d2:	330c      	adds	r3, #12
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	e001      	b.n	800a3e0 <inc_lock+0xfc>
 800a3dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3e0:	4906      	ldr	r1, [pc, #24]	@ (800a3fc <inc_lock+0x118>)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	011b      	lsls	r3, r3, #4
 800a3e6:	440b      	add	r3, r1
 800a3e8:	330c      	adds	r3, #12
 800a3ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3301      	adds	r3, #1
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	20001250 	.word	0x20001250

0800a400 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	607b      	str	r3, [r7, #4]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d825      	bhi.n	800a460 <dec_lock+0x60>
		n = Files[i].ctr;
 800a414:	4a17      	ldr	r2, [pc, #92]	@ (800a474 <dec_lock+0x74>)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	011b      	lsls	r3, r3, #4
 800a41a:	4413      	add	r3, r2
 800a41c:	330c      	adds	r3, #12
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a422:	89fb      	ldrh	r3, [r7, #14]
 800a424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a428:	d101      	bne.n	800a42e <dec_lock+0x2e>
 800a42a:	2300      	movs	r3, #0
 800a42c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a42e:	89fb      	ldrh	r3, [r7, #14]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <dec_lock+0x3a>
 800a434:	89fb      	ldrh	r3, [r7, #14]
 800a436:	3b01      	subs	r3, #1
 800a438:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a43a:	4a0e      	ldr	r2, [pc, #56]	@ (800a474 <dec_lock+0x74>)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	011b      	lsls	r3, r3, #4
 800a440:	4413      	add	r3, r2
 800a442:	330c      	adds	r3, #12
 800a444:	89fa      	ldrh	r2, [r7, #14]
 800a446:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a448:	89fb      	ldrh	r3, [r7, #14]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d105      	bne.n	800a45a <dec_lock+0x5a>
 800a44e:	4a09      	ldr	r2, [pc, #36]	@ (800a474 <dec_lock+0x74>)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	4413      	add	r3, r2
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	737b      	strb	r3, [r7, #13]
 800a45e:	e001      	b.n	800a464 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a460:	2302      	movs	r3, #2
 800a462:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a464:	7b7b      	ldrb	r3, [r7, #13]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20001250 	.word	0x20001250

0800a478 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e010      	b.n	800a4a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a486:	4a0d      	ldr	r2, [pc, #52]	@ (800a4bc <clear_lock+0x44>)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	4413      	add	r3, r2
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	429a      	cmp	r2, r3
 800a494:	d105      	bne.n	800a4a2 <clear_lock+0x2a>
 800a496:	4a09      	ldr	r2, [pc, #36]	@ (800a4bc <clear_lock+0x44>)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	011b      	lsls	r3, r3, #4
 800a49c:	4413      	add	r3, r2
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d9eb      	bls.n	800a486 <clear_lock+0xe>
	}
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	20001250 	.word	0x20001250

0800a4c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	78db      	ldrb	r3, [r3, #3]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d034      	beq.n	800a53e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	7858      	ldrb	r0, [r3, #1]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	f7ff fd40 	bl	8009f6c <disk_write>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	73fb      	strb	r3, [r7, #15]
 800a4f6:	e022      	b.n	800a53e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	1ad2      	subs	r2, r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d217      	bcs.n	800a53e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	789b      	ldrb	r3, [r3, #2]
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	e010      	b.n	800a538 <sync_window+0x78>
					wsect += fs->fsize;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	4413      	add	r3, r2
 800a51e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	7858      	ldrb	r0, [r3, #1]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a52a:	2301      	movs	r3, #1
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	f7ff fd1d 	bl	8009f6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	3b01      	subs	r3, #1
 800a536:	613b      	str	r3, [r7, #16]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d8eb      	bhi.n	800a516 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d01b      	beq.n	800a598 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff ffad 	bl	800a4c0 <sync_window>
 800a566:	4603      	mov	r3, r0
 800a568:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d113      	bne.n	800a598 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	7858      	ldrb	r0, [r3, #1]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a57a:	2301      	movs	r3, #1
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	f7ff fcd5 	bl	8009f2c <disk_read>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d004      	beq.n	800a592 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a588:	f04f 33ff 	mov.w	r3, #4294967295
 800a58c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7ff ff87 	bl	800a4c0 <sync_window>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d158      	bne.n	800a66e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d148      	bne.n	800a656 <sync_fs+0xb2>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	791b      	ldrb	r3, [r3, #4]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d144      	bne.n	800a656 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3330      	adds	r3, #48	@ 0x30
 800a5d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff fda9 	bl	800a12e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3330      	adds	r3, #48	@ 0x30
 800a5e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a5e4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff fd38 	bl	800a05e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3330      	adds	r3, #48	@ 0x30
 800a5f2:	4921      	ldr	r1, [pc, #132]	@ (800a678 <sync_fs+0xd4>)
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff fd4d 	bl	800a094 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	3330      	adds	r3, #48	@ 0x30
 800a5fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a602:	491e      	ldr	r1, [pc, #120]	@ (800a67c <sync_fs+0xd8>)
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fd45 	bl	800a094 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3330      	adds	r3, #48	@ 0x30
 800a60e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f7ff fd3b 	bl	800a094 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3330      	adds	r3, #48	@ 0x30
 800a622:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	4619      	mov	r1, r3
 800a62c:	4610      	mov	r0, r2
 800a62e:	f7ff fd31 	bl	800a094 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	1c5a      	adds	r2, r3, #1
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	7858      	ldrb	r0, [r3, #1]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a64a:	2301      	movs	r3, #1
 800a64c:	f7ff fc8e 	bl	8009f6c <disk_write>
			fs->fsi_flag = 0;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	2200      	movs	r2, #0
 800a65c:	2100      	movs	r1, #0
 800a65e:	4618      	mov	r0, r3
 800a660:	f7ff fca4 	bl	8009fac <disk_ioctl>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <sync_fs+0xca>
 800a66a:	2301      	movs	r3, #1
 800a66c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	41615252 	.word	0x41615252
 800a67c:	61417272 	.word	0x61417272

0800a680 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	3b02      	subs	r3, #2
 800a68e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	3b02      	subs	r3, #2
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d301      	bcc.n	800a6a0 <clust2sect+0x20>
 800a69c:	2300      	movs	r3, #0
 800a69e:	e008      	b.n	800a6b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	895b      	ldrh	r3, [r3, #10]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	fb03 f202 	mul.w	r2, r3, r2
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b0:	4413      	add	r3, r2
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b086      	sub	sp, #24
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d904      	bls.n	800a6de <get_fat+0x20>
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d302      	bcc.n	800a6e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a6de:	2301      	movs	r3, #1
 800a6e0:	617b      	str	r3, [r7, #20]
 800a6e2:	e08e      	b.n	800a802 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d061      	beq.n	800a7b6 <get_fat+0xf8>
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	dc7b      	bgt.n	800a7ee <get_fat+0x130>
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d002      	beq.n	800a700 <get_fat+0x42>
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d041      	beq.n	800a782 <get_fat+0xc4>
 800a6fe:	e076      	b.n	800a7ee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	085b      	lsrs	r3, r3, #1
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4413      	add	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	6a1a      	ldr	r2, [r3, #32]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	0a5b      	lsrs	r3, r3, #9
 800a716:	4413      	add	r3, r2
 800a718:	4619      	mov	r1, r3
 800a71a:	6938      	ldr	r0, [r7, #16]
 800a71c:	f7ff ff14 	bl	800a548 <move_window>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d166      	bne.n	800a7f4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	60fa      	str	r2, [r7, #12]
 800a72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	4413      	add	r3, r2
 800a734:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a738:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	6a1a      	ldr	r2, [r3, #32]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	0a5b      	lsrs	r3, r3, #9
 800a742:	4413      	add	r3, r2
 800a744:	4619      	mov	r1, r3
 800a746:	6938      	ldr	r0, [r7, #16]
 800a748:	f7ff fefe 	bl	800a548 <move_window>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d152      	bne.n	800a7f8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	4413      	add	r3, r2
 800a75c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a760:	021b      	lsls	r3, r3, #8
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	4313      	orrs	r3, r2
 800a766:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d002      	beq.n	800a778 <get_fat+0xba>
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	091b      	lsrs	r3, r3, #4
 800a776:	e002      	b.n	800a77e <get_fat+0xc0>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a77e:	617b      	str	r3, [r7, #20]
			break;
 800a780:	e03f      	b.n	800a802 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	6a1a      	ldr	r2, [r3, #32]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	0a1b      	lsrs	r3, r3, #8
 800a78a:	4413      	add	r3, r2
 800a78c:	4619      	mov	r1, r3
 800a78e:	6938      	ldr	r0, [r7, #16]
 800a790:	f7ff feda 	bl	800a548 <move_window>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d130      	bne.n	800a7fc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a7a8:	4413      	add	r3, r2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff fc1c 	bl	8009fe8 <ld_word>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	617b      	str	r3, [r7, #20]
			break;
 800a7b4:	e025      	b.n	800a802 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6a1a      	ldr	r2, [r3, #32]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	09db      	lsrs	r3, r3, #7
 800a7be:	4413      	add	r3, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6938      	ldr	r0, [r7, #16]
 800a7c4:	f7ff fec0 	bl	800a548 <move_window>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d118      	bne.n	800a800 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a7dc:	4413      	add	r3, r2
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fc1a 	bl	800a018 <ld_dword>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a7ea:	617b      	str	r3, [r7, #20]
			break;
 800a7ec:	e009      	b.n	800a802 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	617b      	str	r3, [r7, #20]
 800a7f2:	e006      	b.n	800a802 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7f4:	bf00      	nop
 800a7f6:	e004      	b.n	800a802 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7f8:	bf00      	nop
 800a7fa:	e002      	b.n	800a802 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7fc:	bf00      	nop
 800a7fe:	e000      	b.n	800a802 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a800:	bf00      	nop
		}
	}

	return val;
 800a802:	697b      	ldr	r3, [r7, #20]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a80c:	b590      	push	{r4, r7, lr}
 800a80e:	b089      	sub	sp, #36	@ 0x24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a818:	2302      	movs	r3, #2
 800a81a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	f240 80d9 	bls.w	800a9d6 <put_fat+0x1ca>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	f080 80d3 	bcs.w	800a9d6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b03      	cmp	r3, #3
 800a836:	f000 8096 	beq.w	800a966 <put_fat+0x15a>
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	f300 80cb 	bgt.w	800a9d6 <put_fat+0x1ca>
 800a840:	2b01      	cmp	r3, #1
 800a842:	d002      	beq.n	800a84a <put_fat+0x3e>
 800a844:	2b02      	cmp	r3, #2
 800a846:	d06e      	beq.n	800a926 <put_fat+0x11a>
 800a848:	e0c5      	b.n	800a9d6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	61bb      	str	r3, [r7, #24]
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	085b      	lsrs	r3, r3, #1
 800a852:	69ba      	ldr	r2, [r7, #24]
 800a854:	4413      	add	r3, r2
 800a856:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6a1a      	ldr	r2, [r3, #32]
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	0a5b      	lsrs	r3, r3, #9
 800a860:	4413      	add	r3, r2
 800a862:	4619      	mov	r1, r3
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f7ff fe6f 	bl	800a548 <move_window>
 800a86a:	4603      	mov	r3, r0
 800a86c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a86e:	7ffb      	ldrb	r3, [r7, #31]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f040 80a9 	bne.w	800a9c8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	1c59      	adds	r1, r3, #1
 800a880:	61b9      	str	r1, [r7, #24]
 800a882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a886:	4413      	add	r3, r2
 800a888:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00d      	beq.n	800a8b0 <put_fat+0xa4>
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	b25b      	sxtb	r3, r3
 800a89a:	f003 030f 	and.w	r3, r3, #15
 800a89e:	b25a      	sxtb	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	011b      	lsls	r3, r3, #4
 800a8a6:	b25b      	sxtb	r3, r3
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	b25b      	sxtb	r3, r3
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	e001      	b.n	800a8b4 <put_fat+0xa8>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6a1a      	ldr	r2, [r3, #32]
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	0a5b      	lsrs	r3, r3, #9
 800a8c6:	4413      	add	r3, r2
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff fe3c 	bl	800a548 <move_window>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8d4:	7ffb      	ldrb	r3, [r7, #31]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d178      	bne.n	800a9cc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e6:	4413      	add	r3, r2
 800a8e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <put_fat+0xf0>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	091b      	lsrs	r3, r3, #4
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	e00e      	b.n	800a91a <put_fat+0x10e>
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	b25b      	sxtb	r3, r3
 800a902:	f023 030f 	bic.w	r3, r3, #15
 800a906:	b25a      	sxtb	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	0a1b      	lsrs	r3, r3, #8
 800a90c:	b25b      	sxtb	r3, r3
 800a90e:	f003 030f 	and.w	r3, r3, #15
 800a912:	b25b      	sxtb	r3, r3
 800a914:	4313      	orrs	r3, r2
 800a916:	b25b      	sxtb	r3, r3
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2201      	movs	r2, #1
 800a922:	70da      	strb	r2, [r3, #3]
			break;
 800a924:	e057      	b.n	800a9d6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6a1a      	ldr	r2, [r3, #32]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	4413      	add	r3, r2
 800a930:	4619      	mov	r1, r3
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7ff fe08 	bl	800a548 <move_window>
 800a938:	4603      	mov	r3, r0
 800a93a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a93c:	7ffb      	ldrb	r3, [r7, #31]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d146      	bne.n	800a9d0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a950:	4413      	add	r3, r2
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	b292      	uxth	r2, r2
 800a956:	4611      	mov	r1, r2
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff fb80 	bl	800a05e <st_word>
			fs->wflag = 1;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	70da      	strb	r2, [r3, #3]
			break;
 800a964:	e037      	b.n	800a9d6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6a1a      	ldr	r2, [r3, #32]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	09db      	lsrs	r3, r3, #7
 800a96e:	4413      	add	r3, r2
 800a970:	4619      	mov	r1, r3
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f7ff fde8 	bl	800a548 <move_window>
 800a978:	4603      	mov	r3, r0
 800a97a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a97c:	7ffb      	ldrb	r3, [r7, #31]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d128      	bne.n	800a9d4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a996:	4413      	add	r3, r2
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fb3d 	bl	800a018 <ld_dword>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a9a4:	4323      	orrs	r3, r4
 800a9a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a9b6:	4413      	add	r3, r2
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7ff fb6a 	bl	800a094 <st_dword>
			fs->wflag = 1;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	70da      	strb	r2, [r3, #3]
			break;
 800a9c6:	e006      	b.n	800a9d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9c8:	bf00      	nop
 800a9ca:	e004      	b.n	800a9d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9cc:	bf00      	nop
 800a9ce:	e002      	b.n	800a9d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9d0:	bf00      	nop
 800a9d2:	e000      	b.n	800a9d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9d4:	bf00      	nop
		}
	}
	return res;
 800a9d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3724      	adds	r7, #36	@ 0x24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd90      	pop	{r4, r7, pc}

0800a9e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d904      	bls.n	800aa06 <remove_chain+0x26>
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d301      	bcc.n	800aa0a <remove_chain+0x2a>
 800aa06:	2302      	movs	r3, #2
 800aa08:	e04b      	b.n	800aaa2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00c      	beq.n	800aa2a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aa10:	f04f 32ff 	mov.w	r2, #4294967295
 800aa14:	6879      	ldr	r1, [r7, #4]
 800aa16:	69b8      	ldr	r0, [r7, #24]
 800aa18:	f7ff fef8 	bl	800a80c <put_fat>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aa20:	7ffb      	ldrb	r3, [r7, #31]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <remove_chain+0x4a>
 800aa26:	7ffb      	ldrb	r3, [r7, #31]
 800aa28:	e03b      	b.n	800aaa2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7ff fe46 	bl	800a6be <get_fat>
 800aa32:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d031      	beq.n	800aa9e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d101      	bne.n	800aa44 <remove_chain+0x64>
 800aa40:	2302      	movs	r3, #2
 800aa42:	e02e      	b.n	800aaa2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4a:	d101      	bne.n	800aa50 <remove_chain+0x70>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e028      	b.n	800aaa2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800aa50:	2200      	movs	r2, #0
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	69b8      	ldr	r0, [r7, #24]
 800aa56:	f7ff fed9 	bl	800a80c <put_fat>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aa5e:	7ffb      	ldrb	r3, [r7, #31]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <remove_chain+0x88>
 800aa64:	7ffb      	ldrb	r3, [r7, #31]
 800aa66:	e01c      	b.n	800aaa2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	691a      	ldr	r2, [r3, #16]
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	3b02      	subs	r3, #2
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d20b      	bcs.n	800aa8e <remove_chain+0xae>
			fs->free_clst++;
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	791b      	ldrb	r3, [r3, #4]
 800aa84:	f043 0301 	orr.w	r3, r3, #1
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d3c6      	bcc.n	800aa2a <remove_chain+0x4a>
 800aa9c:	e000      	b.n	800aaa0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aa9e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3720      	adds	r7, #32
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b088      	sub	sp, #32
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10d      	bne.n	800aadc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d004      	beq.n	800aad6 <create_chain+0x2c>
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	69ba      	ldr	r2, [r7, #24]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d31b      	bcc.n	800ab0e <create_chain+0x64>
 800aad6:	2301      	movs	r3, #1
 800aad8:	61bb      	str	r3, [r7, #24]
 800aada:	e018      	b.n	800ab0e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff fded 	bl	800a6be <get_fat>
 800aae4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d801      	bhi.n	800aaf0 <create_chain+0x46>
 800aaec:	2301      	movs	r3, #1
 800aaee:	e070      	b.n	800abd2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d101      	bne.n	800aafc <create_chain+0x52>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	e06a      	b.n	800abd2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d201      	bcs.n	800ab0a <create_chain+0x60>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	e063      	b.n	800abd2 <create_chain+0x128>
		scl = clst;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	3301      	adds	r3, #1
 800ab16:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	69fa      	ldr	r2, [r7, #28]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d307      	bcc.n	800ab32 <create_chain+0x88>
				ncl = 2;
 800ab22:	2302      	movs	r3, #2
 800ab24:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d901      	bls.n	800ab32 <create_chain+0x88>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e04f      	b.n	800abd2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ab32:	69f9      	ldr	r1, [r7, #28]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff fdc2 	bl	800a6be <get_fat>
 800ab3a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00e      	beq.n	800ab60 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d003      	beq.n	800ab50 <create_chain+0xa6>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4e:	d101      	bne.n	800ab54 <create_chain+0xaa>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	e03e      	b.n	800abd2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ab54:	69fa      	ldr	r2, [r7, #28]
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d1da      	bne.n	800ab12 <create_chain+0x68>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	e038      	b.n	800abd2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ab60:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ab62:	f04f 32ff 	mov.w	r2, #4294967295
 800ab66:	69f9      	ldr	r1, [r7, #28]
 800ab68:	6938      	ldr	r0, [r7, #16]
 800ab6a:	f7ff fe4f 	bl	800a80c <put_fat>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d109      	bne.n	800ab8c <create_chain+0xe2>
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d006      	beq.n	800ab8c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6938      	ldr	r0, [r7, #16]
 800ab84:	f7ff fe42 	bl	800a80c <put_fat>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d116      	bne.n	800abc0 <create_chain+0x116>
		fs->last_clst = ncl;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	69fa      	ldr	r2, [r7, #28]
 800ab96:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	691a      	ldr	r2, [r3, #16]
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	3b02      	subs	r3, #2
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d804      	bhi.n	800abb0 <create_chain+0x106>
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	1e5a      	subs	r2, r3, #1
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	791b      	ldrb	r3, [r3, #4]
 800abb4:	f043 0301 	orr.w	r3, r3, #1
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	711a      	strb	r2, [r3, #4]
 800abbe:	e007      	b.n	800abd0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d102      	bne.n	800abcc <create_chain+0x122>
 800abc6:	f04f 33ff 	mov.w	r3, #4294967295
 800abca:	e000      	b.n	800abce <create_chain+0x124>
 800abcc:	2301      	movs	r3, #1
 800abce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800abd0:	69fb      	ldr	r3, [r7, #28]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3720      	adds	r7, #32
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800abda:	b480      	push	{r7}
 800abdc:	b087      	sub	sp, #28
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abee:	3304      	adds	r3, #4
 800abf0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	0a5b      	lsrs	r3, r3, #9
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	8952      	ldrh	r2, [r2, #10]
 800abfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800abfe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	1d1a      	adds	r2, r3, #4
 800ac04:	613a      	str	r2, [r7, #16]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <clmt_clust+0x3a>
 800ac10:	2300      	movs	r3, #0
 800ac12:	e010      	b.n	800ac36 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d307      	bcc.n	800ac2c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	617b      	str	r3, [r7, #20]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	3304      	adds	r3, #4
 800ac28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac2a:	e7e9      	b.n	800ac00 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ac2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	4413      	add	r3, r2
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	371c      	adds	r7, #28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b086      	sub	sp, #24
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac58:	d204      	bcs.n	800ac64 <dir_sdi+0x22>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	f003 031f 	and.w	r3, r3, #31
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ac64:	2302      	movs	r3, #2
 800ac66:	e063      	b.n	800ad30 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d106      	bne.n	800ac88 <dir_sdi+0x46>
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d902      	bls.n	800ac88 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10c      	bne.n	800aca8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	095b      	lsrs	r3, r3, #5
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	8912      	ldrh	r2, [r2, #8]
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d301      	bcc.n	800ac9e <dir_sdi+0x5c>
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	e048      	b.n	800ad30 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	61da      	str	r2, [r3, #28]
 800aca6:	e029      	b.n	800acfc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	895b      	ldrh	r3, [r3, #10]
 800acac:	025b      	lsls	r3, r3, #9
 800acae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800acb0:	e019      	b.n	800ace6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6979      	ldr	r1, [r7, #20]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff fd01 	bl	800a6be <get_fat>
 800acbc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc4:	d101      	bne.n	800acca <dir_sdi+0x88>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e032      	b.n	800ad30 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d904      	bls.n	800acda <dir_sdi+0x98>
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	697a      	ldr	r2, [r7, #20]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d301      	bcc.n	800acde <dir_sdi+0x9c>
 800acda:	2302      	movs	r3, #2
 800acdc:	e028      	b.n	800ad30 <dir_sdi+0xee>
			ofs -= csz;
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	429a      	cmp	r2, r3
 800acec:	d2e1      	bcs.n	800acb2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800acee:	6979      	ldr	r1, [r7, #20]
 800acf0:	6938      	ldr	r0, [r7, #16]
 800acf2:	f7ff fcc5 	bl	800a680 <clust2sect>
 800acf6:	4602      	mov	r2, r0
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <dir_sdi+0xcc>
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	e010      	b.n	800ad30 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	69da      	ldr	r2, [r3, #28]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	0a5b      	lsrs	r3, r3, #9
 800ad16:	441a      	add	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad28:	441a      	add	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	3320      	adds	r3, #32
 800ad4e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <dir_next+0x28>
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad5e:	d301      	bcc.n	800ad64 <dir_next+0x2c>
 800ad60:	2304      	movs	r3, #4
 800ad62:	e0aa      	b.n	800aeba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f040 8098 	bne.w	800aea0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	1c5a      	adds	r2, r3, #1
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10b      	bne.n	800ad9a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	095b      	lsrs	r3, r3, #5
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	8912      	ldrh	r2, [r2, #8]
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	f0c0 8088 	bcc.w	800aea0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	61da      	str	r2, [r3, #28]
 800ad96:	2304      	movs	r3, #4
 800ad98:	e08f      	b.n	800aeba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	0a5b      	lsrs	r3, r3, #9
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	8952      	ldrh	r2, [r2, #10]
 800ada2:	3a01      	subs	r2, #1
 800ada4:	4013      	ands	r3, r2
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d17a      	bne.n	800aea0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	4619      	mov	r1, r3
 800adb2:	4610      	mov	r0, r2
 800adb4:	f7ff fc83 	bl	800a6be <get_fat>
 800adb8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d801      	bhi.n	800adc4 <dir_next+0x8c>
 800adc0:	2302      	movs	r3, #2
 800adc2:	e07a      	b.n	800aeba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adca:	d101      	bne.n	800add0 <dir_next+0x98>
 800adcc:	2301      	movs	r3, #1
 800adce:	e074      	b.n	800aeba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	429a      	cmp	r2, r3
 800add8:	d358      	bcc.n	800ae8c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d104      	bne.n	800adea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	61da      	str	r2, [r3, #28]
 800ade6:	2304      	movs	r3, #4
 800ade8:	e067      	b.n	800aeba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	4619      	mov	r1, r3
 800adf2:	4610      	mov	r0, r2
 800adf4:	f7ff fe59 	bl	800aaaa <create_chain>
 800adf8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <dir_next+0xcc>
 800ae00:	2307      	movs	r3, #7
 800ae02:	e05a      	b.n	800aeba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d101      	bne.n	800ae0e <dir_next+0xd6>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e055      	b.n	800aeba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae14:	d101      	bne.n	800ae1a <dir_next+0xe2>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e04f      	b.n	800aeba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7ff fb50 	bl	800a4c0 <sync_window>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <dir_next+0xf2>
 800ae26:	2301      	movs	r3, #1
 800ae28:	e047      	b.n	800aeba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3330      	adds	r3, #48	@ 0x30
 800ae2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae32:	2100      	movs	r1, #0
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7ff f97a 	bl	800a12e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	6979      	ldr	r1, [r7, #20]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7ff fc1d 	bl	800a680 <clust2sect>
 800ae46:	4602      	mov	r2, r0
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae4c:	e012      	b.n	800ae74 <dir_next+0x13c>
						fs->wflag = 1;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2201      	movs	r2, #1
 800ae52:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff fb33 	bl	800a4c0 <sync_window>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <dir_next+0x12c>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e02a      	b.n	800aeba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	3301      	adds	r3, #1
 800ae68:	613b      	str	r3, [r7, #16]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6e:	1c5a      	adds	r2, r3, #1
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	895b      	ldrh	r3, [r3, #10]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d3e6      	bcc.n	800ae4e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	1ad2      	subs	r2, r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ae92:	6979      	ldr	r1, [r7, #20]
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f7ff fbf3 	bl	800a680 <clust2sect>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb2:	441a      	add	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3718      	adds	r7, #24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b086      	sub	sp, #24
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aed2:	2100      	movs	r1, #0
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff feb4 	bl	800ac42 <dir_sdi>
 800aeda:	4603      	mov	r3, r0
 800aedc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d12b      	bne.n	800af3c <dir_alloc+0x7a>
		n = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	69db      	ldr	r3, [r3, #28]
 800aeec:	4619      	mov	r1, r3
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7ff fb2a 	bl	800a548 <move_window>
 800aef4:	4603      	mov	r3, r0
 800aef6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d11d      	bne.n	800af3a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	2be5      	cmp	r3, #229	@ 0xe5
 800af06:	d004      	beq.n	800af12 <dir_alloc+0x50>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d107      	bne.n	800af22 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	3301      	adds	r3, #1
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d102      	bne.n	800af26 <dir_alloc+0x64>
 800af20:	e00c      	b.n	800af3c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800af22:	2300      	movs	r3, #0
 800af24:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800af26:	2101      	movs	r1, #1
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff ff05 	bl	800ad38 <dir_next>
 800af2e:	4603      	mov	r3, r0
 800af30:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800af32:	7dfb      	ldrb	r3, [r7, #23]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0d7      	beq.n	800aee8 <dir_alloc+0x26>
 800af38:	e000      	b.n	800af3c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800af3a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d101      	bne.n	800af46 <dir_alloc+0x84>
 800af42:	2307      	movs	r3, #7
 800af44:	75fb      	strb	r3, [r7, #23]
	return res;
 800af46:	7dfb      	ldrb	r3, [r7, #23]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	331a      	adds	r3, #26
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff f842 	bl	8009fe8 <ld_word>
 800af64:	4603      	mov	r3, r0
 800af66:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d109      	bne.n	800af84 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	3314      	adds	r3, #20
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff f837 	bl	8009fe8 <ld_word>
 800af7a:	4603      	mov	r3, r0
 800af7c:	041b      	lsls	r3, r3, #16
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	4313      	orrs	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800af84:	68fb      	ldr	r3, [r7, #12]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	331a      	adds	r3, #26
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	b292      	uxth	r2, r2
 800afa2:	4611      	mov	r1, r2
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7ff f85a 	bl	800a05e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b03      	cmp	r3, #3
 800afb0:	d109      	bne.n	800afc6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	f103 0214 	add.w	r2, r3, #20
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	0c1b      	lsrs	r3, r3, #16
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	4619      	mov	r1, r3
 800afc0:	4610      	mov	r0, r2
 800afc2:	f7ff f84c 	bl	800a05e <st_word>
	}
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b086      	sub	sp, #24
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800afdc:	2100      	movs	r1, #0
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7ff fe2f 	bl	800ac42 <dir_sdi>
 800afe4:	4603      	mov	r3, r0
 800afe6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <dir_find+0x24>
 800afee:	7dfb      	ldrb	r3, [r7, #23]
 800aff0:	e03e      	b.n	800b070 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6938      	ldr	r0, [r7, #16]
 800affa:	f7ff faa5 	bl	800a548 <move_window>
 800affe:	4603      	mov	r3, r0
 800b000:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d12f      	bne.n	800b068 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d102      	bne.n	800b01c <dir_find+0x4e>
 800b016:	2304      	movs	r3, #4
 800b018:	75fb      	strb	r3, [r7, #23]
 800b01a:	e028      	b.n	800b06e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a1b      	ldr	r3, [r3, #32]
 800b020:	330b      	adds	r3, #11
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	330b      	adds	r3, #11
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	f003 0308 	and.w	r3, r3, #8
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10a      	bne.n	800b054 <dir_find+0x86>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a18      	ldr	r0, [r3, #32]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3324      	adds	r3, #36	@ 0x24
 800b046:	220b      	movs	r2, #11
 800b048:	4619      	mov	r1, r3
 800b04a:	f7ff f88b 	bl	800a164 <mem_cmp>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00b      	beq.n	800b06c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b054:	2100      	movs	r1, #0
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7ff fe6e 	bl	800ad38 <dir_next>
 800b05c:	4603      	mov	r3, r0
 800b05e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b060:	7dfb      	ldrb	r3, [r7, #23]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d0c5      	beq.n	800aff2 <dir_find+0x24>
 800b066:	e002      	b.n	800b06e <dir_find+0xa0>
		if (res != FR_OK) break;
 800b068:	bf00      	nop
 800b06a:	e000      	b.n	800b06e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b06c:	bf00      	nop

	return res;
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3718      	adds	r7, #24
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b086:	2101      	movs	r1, #1
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff ff1a 	bl	800aec2 <dir_alloc>
 800b08e:	4603      	mov	r3, r0
 800b090:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d11c      	bne.n	800b0d2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	4619      	mov	r1, r3
 800b09e:	68b8      	ldr	r0, [r7, #8]
 800b0a0:	f7ff fa52 	bl	800a548 <move_window>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d111      	bne.n	800b0d2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7ff f839 	bl	800a12e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a18      	ldr	r0, [r3, #32]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	3324      	adds	r3, #36	@ 0x24
 800b0c4:	220b      	movs	r2, #11
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	f7ff f810 	bl	800a0ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3324      	adds	r3, #36	@ 0x24
 800b0f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b0f2:	220b      	movs	r2, #11
 800b0f4:	2120      	movs	r1, #32
 800b0f6:	68b8      	ldr	r0, [r7, #8]
 800b0f8:	f7ff f819 	bl	800a12e <mem_set>
	si = i = 0; ni = 8;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	613b      	str	r3, [r7, #16]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	61fb      	str	r3, [r7, #28]
 800b104:	2308      	movs	r3, #8
 800b106:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	61fa      	str	r2, [r7, #28]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	4413      	add	r3, r2
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b116:	7efb      	ldrb	r3, [r7, #27]
 800b118:	2b20      	cmp	r3, #32
 800b11a:	d94e      	bls.n	800b1ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b11c:	7efb      	ldrb	r3, [r7, #27]
 800b11e:	2b2f      	cmp	r3, #47	@ 0x2f
 800b120:	d006      	beq.n	800b130 <create_name+0x54>
 800b122:	7efb      	ldrb	r3, [r7, #27]
 800b124:	2b5c      	cmp	r3, #92	@ 0x5c
 800b126:	d110      	bne.n	800b14a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b128:	e002      	b.n	800b130 <create_name+0x54>
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	3301      	adds	r3, #1
 800b12e:	61fb      	str	r3, [r7, #28]
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	4413      	add	r3, r2
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b2f      	cmp	r3, #47	@ 0x2f
 800b13a:	d0f6      	beq.n	800b12a <create_name+0x4e>
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	4413      	add	r3, r2
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b5c      	cmp	r3, #92	@ 0x5c
 800b146:	d0f0      	beq.n	800b12a <create_name+0x4e>
			break;
 800b148:	e038      	b.n	800b1bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b14a:	7efb      	ldrb	r3, [r7, #27]
 800b14c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b14e:	d003      	beq.n	800b158 <create_name+0x7c>
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	429a      	cmp	r2, r3
 800b156:	d30c      	bcc.n	800b172 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2b0b      	cmp	r3, #11
 800b15c:	d002      	beq.n	800b164 <create_name+0x88>
 800b15e:	7efb      	ldrb	r3, [r7, #27]
 800b160:	2b2e      	cmp	r3, #46	@ 0x2e
 800b162:	d001      	beq.n	800b168 <create_name+0x8c>
 800b164:	2306      	movs	r3, #6
 800b166:	e044      	b.n	800b1f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b168:	2308      	movs	r3, #8
 800b16a:	613b      	str	r3, [r7, #16]
 800b16c:	230b      	movs	r3, #11
 800b16e:	617b      	str	r3, [r7, #20]
			continue;
 800b170:	e022      	b.n	800b1b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b172:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b176:	2b00      	cmp	r3, #0
 800b178:	da04      	bge.n	800b184 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b17a:	7efb      	ldrb	r3, [r7, #27]
 800b17c:	3b80      	subs	r3, #128	@ 0x80
 800b17e:	4a1f      	ldr	r2, [pc, #124]	@ (800b1fc <create_name+0x120>)
 800b180:	5cd3      	ldrb	r3, [r2, r3]
 800b182:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b184:	7efb      	ldrb	r3, [r7, #27]
 800b186:	4619      	mov	r1, r3
 800b188:	481d      	ldr	r0, [pc, #116]	@ (800b200 <create_name+0x124>)
 800b18a:	f7ff f812 	bl	800a1b2 <chk_chr>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d001      	beq.n	800b198 <create_name+0xbc>
 800b194:	2306      	movs	r3, #6
 800b196:	e02c      	b.n	800b1f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b198:	7efb      	ldrb	r3, [r7, #27]
 800b19a:	2b60      	cmp	r3, #96	@ 0x60
 800b19c:	d905      	bls.n	800b1aa <create_name+0xce>
 800b19e:	7efb      	ldrb	r3, [r7, #27]
 800b1a0:	2b7a      	cmp	r3, #122	@ 0x7a
 800b1a2:	d802      	bhi.n	800b1aa <create_name+0xce>
 800b1a4:	7efb      	ldrb	r3, [r7, #27]
 800b1a6:	3b20      	subs	r3, #32
 800b1a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	613a      	str	r2, [r7, #16]
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	7efa      	ldrb	r2, [r7, #27]
 800b1b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b1b8:	e7a6      	b.n	800b108 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b1ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	441a      	add	r2, r3
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <create_name+0xf4>
 800b1cc:	2306      	movs	r3, #6
 800b1ce:	e010      	b.n	800b1f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	2be5      	cmp	r3, #229	@ 0xe5
 800b1d6:	d102      	bne.n	800b1de <create_name+0x102>
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	2205      	movs	r2, #5
 800b1dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b1de:	7efb      	ldrb	r3, [r7, #27]
 800b1e0:	2b20      	cmp	r3, #32
 800b1e2:	d801      	bhi.n	800b1e8 <create_name+0x10c>
 800b1e4:	2204      	movs	r2, #4
 800b1e6:	e000      	b.n	800b1ea <create_name+0x10e>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	330b      	adds	r3, #11
 800b1ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b1f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3720      	adds	r7, #32
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	08010ccc 	.word	0x08010ccc
 800b200:	08010c48 	.word	0x08010c48

0800b204 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b218:	e002      	b.n	800b220 <follow_path+0x1c>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	3301      	adds	r3, #1
 800b21e:	603b      	str	r3, [r7, #0]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2b2f      	cmp	r3, #47	@ 0x2f
 800b226:	d0f8      	beq.n	800b21a <follow_path+0x16>
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b22e:	d0f4      	beq.n	800b21a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	2200      	movs	r2, #0
 800b234:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	2b1f      	cmp	r3, #31
 800b23c:	d80a      	bhi.n	800b254 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2280      	movs	r2, #128	@ 0x80
 800b242:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b246:	2100      	movs	r1, #0
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff fcfa 	bl	800ac42 <dir_sdi>
 800b24e:	4603      	mov	r3, r0
 800b250:	75fb      	strb	r3, [r7, #23]
 800b252:	e043      	b.n	800b2dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b254:	463b      	mov	r3, r7
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff ff3f 	bl	800b0dc <create_name>
 800b25e:	4603      	mov	r3, r0
 800b260:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d134      	bne.n	800b2d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff feb0 	bl	800afce <dir_find>
 800b26e:	4603      	mov	r3, r0
 800b270:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b278:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00a      	beq.n	800b296 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	2b04      	cmp	r3, #4
 800b284:	d127      	bne.n	800b2d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b286:	7afb      	ldrb	r3, [r7, #11]
 800b288:	f003 0304 	and.w	r3, r3, #4
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d122      	bne.n	800b2d6 <follow_path+0xd2>
 800b290:	2305      	movs	r3, #5
 800b292:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b294:	e01f      	b.n	800b2d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b296:	7afb      	ldrb	r3, [r7, #11]
 800b298:	f003 0304 	and.w	r3, r3, #4
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d11c      	bne.n	800b2da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	799b      	ldrb	r3, [r3, #6]
 800b2a4:	f003 0310 	and.w	r3, r3, #16
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d102      	bne.n	800b2b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b2ac:	2305      	movs	r3, #5
 800b2ae:	75fb      	strb	r3, [r7, #23]
 800b2b0:	e014      	b.n	800b2dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c0:	4413      	add	r3, r2
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7ff fe43 	bl	800af50 <ld_clust>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b2d0:	e7c0      	b.n	800b254 <follow_path+0x50>
			if (res != FR_OK) break;
 800b2d2:	bf00      	nop
 800b2d4:	e002      	b.n	800b2dc <follow_path+0xd8>
				break;
 800b2d6:	bf00      	nop
 800b2d8:	e000      	b.n	800b2dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2da:	bf00      	nop
			}
		}
	}

	return res;
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b087      	sub	sp, #28
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d031      	beq.n	800b360 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	617b      	str	r3, [r7, #20]
 800b302:	e002      	b.n	800b30a <get_ldnumber+0x24>
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	3301      	adds	r3, #1
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	2b20      	cmp	r3, #32
 800b310:	d903      	bls.n	800b31a <get_ldnumber+0x34>
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b3a      	cmp	r3, #58	@ 0x3a
 800b318:	d1f4      	bne.n	800b304 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	2b3a      	cmp	r3, #58	@ 0x3a
 800b320:	d11c      	bne.n	800b35c <get_ldnumber+0x76>
			tp = *path;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	60fa      	str	r2, [r7, #12]
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	3b30      	subs	r3, #48	@ 0x30
 800b332:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b09      	cmp	r3, #9
 800b338:	d80e      	bhi.n	800b358 <get_ldnumber+0x72>
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d10a      	bne.n	800b358 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d107      	bne.n	800b358 <get_ldnumber+0x72>
					vol = (int)i;
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	3301      	adds	r3, #1
 800b350:	617b      	str	r3, [r7, #20]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	e002      	b.n	800b362 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b35c:	2300      	movs	r3, #0
 800b35e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b360:	693b      	ldr	r3, [r7, #16]
}
 800b362:	4618      	mov	r0, r3
 800b364:	371c      	adds	r7, #28
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
	...

0800b370 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	70da      	strb	r2, [r3, #3]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f04f 32ff 	mov.w	r2, #4294967295
 800b386:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7ff f8dc 	bl	800a548 <move_window>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <check_fs+0x2a>
 800b396:	2304      	movs	r3, #4
 800b398:	e038      	b.n	800b40c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3330      	adds	r3, #48	@ 0x30
 800b39e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe fe20 	bl	8009fe8 <ld_word>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d001      	beq.n	800b3b8 <check_fs+0x48>
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	e029      	b.n	800b40c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b3be:	2be9      	cmp	r3, #233	@ 0xe9
 800b3c0:	d009      	beq.n	800b3d6 <check_fs+0x66>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b3c8:	2beb      	cmp	r3, #235	@ 0xeb
 800b3ca:	d11e      	bne.n	800b40a <check_fs+0x9a>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b3d2:	2b90      	cmp	r3, #144	@ 0x90
 800b3d4:	d119      	bne.n	800b40a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3330      	adds	r3, #48	@ 0x30
 800b3da:	3336      	adds	r3, #54	@ 0x36
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7fe fe1b 	bl	800a018 <ld_dword>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b3e8:	4a0a      	ldr	r2, [pc, #40]	@ (800b414 <check_fs+0xa4>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d101      	bne.n	800b3f2 <check_fs+0x82>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	e00c      	b.n	800b40c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3330      	adds	r3, #48	@ 0x30
 800b3f6:	3352      	adds	r3, #82	@ 0x52
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fe fe0d 	bl	800a018 <ld_dword>
 800b3fe:	4603      	mov	r3, r0
 800b400:	4a05      	ldr	r2, [pc, #20]	@ (800b418 <check_fs+0xa8>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d101      	bne.n	800b40a <check_fs+0x9a>
 800b406:	2300      	movs	r3, #0
 800b408:	e000      	b.n	800b40c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b40a:	2302      	movs	r3, #2
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	00544146 	.word	0x00544146
 800b418:	33544146 	.word	0x33544146

0800b41c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b096      	sub	sp, #88	@ 0x58
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2200      	movs	r2, #0
 800b42e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f7ff ff58 	bl	800b2e6 <get_ldnumber>
 800b436:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	da01      	bge.n	800b442 <find_volume+0x26>
 800b43e:	230b      	movs	r3, #11
 800b440:	e22d      	b.n	800b89e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b442:	4aa1      	ldr	r2, [pc, #644]	@ (800b6c8 <find_volume+0x2ac>)
 800b444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b44a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <find_volume+0x3a>
 800b452:	230c      	movs	r3, #12
 800b454:	e223      	b.n	800b89e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b45a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	f023 0301 	bic.w	r3, r3, #1
 800b462:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01a      	beq.n	800b4a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46e:	785b      	ldrb	r3, [r3, #1]
 800b470:	4618      	mov	r0, r3
 800b472:	f7fe fd1b 	bl	8009eac <disk_status>
 800b476:	4603      	mov	r3, r0
 800b478:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b47c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10c      	bne.n	800b4a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b488:	79fb      	ldrb	r3, [r7, #7]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d007      	beq.n	800b49e <find_volume+0x82>
 800b48e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b492:	f003 0304 	and.w	r3, r3, #4
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b49a:	230a      	movs	r3, #10
 800b49c:	e1ff      	b.n	800b89e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e1fd      	b.n	800b89e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	785b      	ldrb	r3, [r3, #1]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fe fd13 	bl	8009ee0 <disk_initialize>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b4c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e1e6      	b.n	800b89e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b4d0:	79fb      	ldrb	r3, [r7, #7]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d007      	beq.n	800b4e6 <find_volume+0xca>
 800b4d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4da:	f003 0304 	and.w	r3, r3, #4
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b4e2:	230a      	movs	r3, #10
 800b4e4:	e1db      	b.n	800b89e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b4ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b4ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4ee:	f7ff ff3f 	bl	800b370 <check_fs>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b4f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d149      	bne.n	800b594 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b500:	2300      	movs	r3, #0
 800b502:	643b      	str	r3, [r7, #64]	@ 0x40
 800b504:	e01e      	b.n	800b544 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b508:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b50c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b50e:	011b      	lsls	r3, r3, #4
 800b510:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b514:	4413      	add	r3, r2
 800b516:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51a:	3304      	adds	r3, #4
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d006      	beq.n	800b530 <find_volume+0x114>
 800b522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b524:	3308      	adds	r3, #8
 800b526:	4618      	mov	r0, r3
 800b528:	f7fe fd76 	bl	800a018 <ld_dword>
 800b52c:	4602      	mov	r2, r0
 800b52e:	e000      	b.n	800b532 <find_volume+0x116>
 800b530:	2200      	movs	r2, #0
 800b532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	3358      	adds	r3, #88	@ 0x58
 800b538:	443b      	add	r3, r7
 800b53a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b53e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b540:	3301      	adds	r3, #1
 800b542:	643b      	str	r3, [r7, #64]	@ 0x40
 800b544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b546:	2b03      	cmp	r3, #3
 800b548:	d9dd      	bls.n	800b506 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b54a:	2300      	movs	r3, #0
 800b54c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b54e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <find_volume+0x13e>
 800b554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b556:	3b01      	subs	r3, #1
 800b558:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b55a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	3358      	adds	r3, #88	@ 0x58
 800b560:	443b      	add	r3, r7
 800b562:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b566:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d005      	beq.n	800b57a <find_volume+0x15e>
 800b56e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b570:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b572:	f7ff fefd 	bl	800b370 <check_fs>
 800b576:	4603      	mov	r3, r0
 800b578:	e000      	b.n	800b57c <find_volume+0x160>
 800b57a:	2303      	movs	r3, #3
 800b57c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b580:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b584:	2b01      	cmp	r3, #1
 800b586:	d905      	bls.n	800b594 <find_volume+0x178>
 800b588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b58a:	3301      	adds	r3, #1
 800b58c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b58e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b590:	2b03      	cmp	r3, #3
 800b592:	d9e2      	bls.n	800b55a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b594:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b598:	2b04      	cmp	r3, #4
 800b59a:	d101      	bne.n	800b5a0 <find_volume+0x184>
 800b59c:	2301      	movs	r3, #1
 800b59e:	e17e      	b.n	800b89e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b5a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d901      	bls.n	800b5ac <find_volume+0x190>
 800b5a8:	230d      	movs	r3, #13
 800b5aa:	e178      	b.n	800b89e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ae:	3330      	adds	r3, #48	@ 0x30
 800b5b0:	330b      	adds	r3, #11
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe fd18 	bl	8009fe8 <ld_word>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5be:	d001      	beq.n	800b5c4 <find_volume+0x1a8>
 800b5c0:	230d      	movs	r3, #13
 800b5c2:	e16c      	b.n	800b89e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c6:	3330      	adds	r3, #48	@ 0x30
 800b5c8:	3316      	adds	r3, #22
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe fd0c 	bl	8009fe8 <ld_word>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b5d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d106      	bne.n	800b5e8 <find_volume+0x1cc>
 800b5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5dc:	3330      	adds	r3, #48	@ 0x30
 800b5de:	3324      	adds	r3, #36	@ 0x24
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fe fd19 	bl	800a018 <ld_dword>
 800b5e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fa:	789b      	ldrb	r3, [r3, #2]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d005      	beq.n	800b60c <find_volume+0x1f0>
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	789b      	ldrb	r3, [r3, #2]
 800b604:	2b02      	cmp	r3, #2
 800b606:	d001      	beq.n	800b60c <find_volume+0x1f0>
 800b608:	230d      	movs	r3, #13
 800b60a:	e148      	b.n	800b89e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60e:	789b      	ldrb	r3, [r3, #2]
 800b610:	461a      	mov	r2, r3
 800b612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b614:	fb02 f303 	mul.w	r3, r2, r3
 800b618:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b620:	461a      	mov	r2, r3
 800b622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b624:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b628:	895b      	ldrh	r3, [r3, #10]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d008      	beq.n	800b640 <find_volume+0x224>
 800b62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b630:	895b      	ldrh	r3, [r3, #10]
 800b632:	461a      	mov	r2, r3
 800b634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b636:	895b      	ldrh	r3, [r3, #10]
 800b638:	3b01      	subs	r3, #1
 800b63a:	4013      	ands	r3, r2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <find_volume+0x228>
 800b640:	230d      	movs	r3, #13
 800b642:	e12c      	b.n	800b89e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b646:	3330      	adds	r3, #48	@ 0x30
 800b648:	3311      	adds	r3, #17
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe fccc 	bl	8009fe8 <ld_word>
 800b650:	4603      	mov	r3, r0
 800b652:	461a      	mov	r2, r3
 800b654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b656:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65a:	891b      	ldrh	r3, [r3, #8]
 800b65c:	f003 030f 	and.w	r3, r3, #15
 800b660:	b29b      	uxth	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <find_volume+0x24e>
 800b666:	230d      	movs	r3, #13
 800b668:	e119      	b.n	800b89e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b66c:	3330      	adds	r3, #48	@ 0x30
 800b66e:	3313      	adds	r3, #19
 800b670:	4618      	mov	r0, r3
 800b672:	f7fe fcb9 	bl	8009fe8 <ld_word>
 800b676:	4603      	mov	r3, r0
 800b678:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b67a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d106      	bne.n	800b68e <find_volume+0x272>
 800b680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b682:	3330      	adds	r3, #48	@ 0x30
 800b684:	3320      	adds	r3, #32
 800b686:	4618      	mov	r0, r3
 800b688:	f7fe fcc6 	bl	800a018 <ld_dword>
 800b68c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b690:	3330      	adds	r3, #48	@ 0x30
 800b692:	330e      	adds	r3, #14
 800b694:	4618      	mov	r0, r3
 800b696:	f7fe fca7 	bl	8009fe8 <ld_word>
 800b69a:	4603      	mov	r3, r0
 800b69c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b69e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <find_volume+0x28c>
 800b6a4:	230d      	movs	r3, #13
 800b6a6:	e0fa      	b.n	800b89e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b6a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b6aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6ac:	4413      	add	r3, r2
 800b6ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6b0:	8912      	ldrh	r2, [r2, #8]
 800b6b2:	0912      	lsrs	r2, r2, #4
 800b6b4:	b292      	uxth	r2, r2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b6ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d204      	bcs.n	800b6cc <find_volume+0x2b0>
 800b6c2:	230d      	movs	r3, #13
 800b6c4:	e0eb      	b.n	800b89e <find_volume+0x482>
 800b6c6:	bf00      	nop
 800b6c8:	20001248 	.word	0x20001248
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b6cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6d4:	8952      	ldrh	r2, [r2, #10]
 800b6d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <find_volume+0x2ca>
 800b6e2:	230d      	movs	r3, #13
 800b6e4:	e0db      	b.n	800b89e <find_volume+0x482>
		fmt = FS_FAT32;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d802      	bhi.n	800b6fc <find_volume+0x2e0>
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b702:	4293      	cmp	r3, r2
 800b704:	d802      	bhi.n	800b70c <find_volume+0x2f0>
 800b706:	2301      	movs	r3, #1
 800b708:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70e:	1c9a      	adds	r2, r3, #2
 800b710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b712:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b716:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b718:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b71a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b71c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b71e:	441a      	add	r2, r3
 800b720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b722:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b724:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b728:	441a      	add	r2, r3
 800b72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b72e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b732:	2b03      	cmp	r3, #3
 800b734:	d11e      	bne.n	800b774 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b738:	3330      	adds	r3, #48	@ 0x30
 800b73a:	332a      	adds	r3, #42	@ 0x2a
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fe fc53 	bl	8009fe8 <ld_word>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <find_volume+0x330>
 800b748:	230d      	movs	r3, #13
 800b74a:	e0a8      	b.n	800b89e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74e:	891b      	ldrh	r3, [r3, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <find_volume+0x33c>
 800b754:	230d      	movs	r3, #13
 800b756:	e0a2      	b.n	800b89e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75a:	3330      	adds	r3, #48	@ 0x30
 800b75c:	332c      	adds	r3, #44	@ 0x2c
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fc5a 	bl	800a018 <ld_dword>
 800b764:	4602      	mov	r2, r0
 800b766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b768:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	647b      	str	r3, [r7, #68]	@ 0x44
 800b772:	e01f      	b.n	800b7b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b776:	891b      	ldrh	r3, [r3, #8]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <find_volume+0x364>
 800b77c:	230d      	movs	r3, #13
 800b77e:	e08e      	b.n	800b89e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b782:	6a1a      	ldr	r2, [r3, #32]
 800b784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b786:	441a      	add	r2, r3
 800b788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b78c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b790:	2b02      	cmp	r3, #2
 800b792:	d103      	bne.n	800b79c <find_volume+0x380>
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	005b      	lsls	r3, r3, #1
 800b79a:	e00a      	b.n	800b7b2 <find_volume+0x396>
 800b79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79e:	695a      	ldr	r2, [r3, #20]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	4413      	add	r3, r2
 800b7a6:	085a      	lsrs	r2, r3, #1
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7aa:	695b      	ldr	r3, [r3, #20]
 800b7ac:	f003 0301 	and.w	r3, r3, #1
 800b7b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b7b2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b6:	699a      	ldr	r2, [r3, #24]
 800b7b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b7be:	0a5b      	lsrs	r3, r3, #9
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d201      	bcs.n	800b7c8 <find_volume+0x3ac>
 800b7c4:	230d      	movs	r3, #13
 800b7c6:	e06a      	b.n	800b89e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ce:	611a      	str	r2, [r3, #16]
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d2:	691a      	ldr	r2, [r3, #16]
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7da:	2280      	movs	r2, #128	@ 0x80
 800b7dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b7de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d149      	bne.n	800b87a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e8:	3330      	adds	r3, #48	@ 0x30
 800b7ea:	3330      	adds	r3, #48	@ 0x30
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fe fbfb 	bl	8009fe8 <ld_word>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d140      	bne.n	800b87a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b7f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b800:	f7fe fea2 	bl	800a548 <move_window>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d137      	bne.n	800b87a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80c:	2200      	movs	r2, #0
 800b80e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	3330      	adds	r3, #48	@ 0x30
 800b814:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe fbe5 	bl	8009fe8 <ld_word>
 800b81e:	4603      	mov	r3, r0
 800b820:	461a      	mov	r2, r3
 800b822:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b826:	429a      	cmp	r2, r3
 800b828:	d127      	bne.n	800b87a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82c:	3330      	adds	r3, #48	@ 0x30
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fbf2 	bl	800a018 <ld_dword>
 800b834:	4603      	mov	r3, r0
 800b836:	4a1c      	ldr	r2, [pc, #112]	@ (800b8a8 <find_volume+0x48c>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d11e      	bne.n	800b87a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83e:	3330      	adds	r3, #48	@ 0x30
 800b840:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe fbe7 	bl	800a018 <ld_dword>
 800b84a:	4603      	mov	r3, r0
 800b84c:	4a17      	ldr	r2, [pc, #92]	@ (800b8ac <find_volume+0x490>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d113      	bne.n	800b87a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b854:	3330      	adds	r3, #48	@ 0x30
 800b856:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe fbdc 	bl	800a018 <ld_dword>
 800b860:	4602      	mov	r2, r0
 800b862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b864:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b868:	3330      	adds	r3, #48	@ 0x30
 800b86a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fe fbd2 	bl	800a018 <ld_dword>
 800b874:	4602      	mov	r2, r0
 800b876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b878:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b87c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b880:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b882:	4b0b      	ldr	r3, [pc, #44]	@ (800b8b0 <find_volume+0x494>)
 800b884:	881b      	ldrh	r3, [r3, #0]
 800b886:	3301      	adds	r3, #1
 800b888:	b29a      	uxth	r2, r3
 800b88a:	4b09      	ldr	r3, [pc, #36]	@ (800b8b0 <find_volume+0x494>)
 800b88c:	801a      	strh	r2, [r3, #0]
 800b88e:	4b08      	ldr	r3, [pc, #32]	@ (800b8b0 <find_volume+0x494>)
 800b890:	881a      	ldrh	r2, [r3, #0]
 800b892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b894:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b896:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b898:	f7fe fdee 	bl	800a478 <clear_lock>
#endif
	return FR_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3758      	adds	r7, #88	@ 0x58
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	41615252 	.word	0x41615252
 800b8ac:	61417272 	.word	0x61417272
 800b8b0:	2000124c 	.word	0x2000124c

0800b8b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b8be:	2309      	movs	r3, #9
 800b8c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d01c      	beq.n	800b902 <validate+0x4e>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d018      	beq.n	800b902 <validate+0x4e>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d013      	beq.n	800b902 <validate+0x4e>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	889a      	ldrh	r2, [r3, #4]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	88db      	ldrh	r3, [r3, #6]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d10c      	bne.n	800b902 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	785b      	ldrb	r3, [r3, #1]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fe fadc 	bl	8009eac <disk_status>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <validate+0x4e>
			res = FR_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d102      	bne.n	800b90e <validate+0x5a>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	e000      	b.n	800b910 <validate+0x5c>
 800b90e:	2300      	movs	r3, #0
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	6013      	str	r3, [r2, #0]
	return res;
 800b914:	7bfb      	ldrb	r3, [r7, #15]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	4613      	mov	r3, r2
 800b92c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b932:	f107 0310 	add.w	r3, r7, #16
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff fcd5 	bl	800b2e6 <get_ldnumber>
 800b93c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	2b00      	cmp	r3, #0
 800b942:	da01      	bge.n	800b948 <f_mount+0x28>
 800b944:	230b      	movs	r3, #11
 800b946:	e02b      	b.n	800b9a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b948:	4a17      	ldr	r2, [pc, #92]	@ (800b9a8 <f_mount+0x88>)
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b950:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b958:	69b8      	ldr	r0, [r7, #24]
 800b95a:	f7fe fd8d 	bl	800a478 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	2200      	movs	r2, #0
 800b962:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d002      	beq.n	800b970 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	490d      	ldr	r1, [pc, #52]	@ (800b9a8 <f_mount+0x88>)
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <f_mount+0x66>
 800b980:	79fb      	ldrb	r3, [r7, #7]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d001      	beq.n	800b98a <f_mount+0x6a>
 800b986:	2300      	movs	r3, #0
 800b988:	e00a      	b.n	800b9a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b98a:	f107 010c 	add.w	r1, r7, #12
 800b98e:	f107 0308 	add.w	r3, r7, #8
 800b992:	2200      	movs	r2, #0
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff fd41 	bl	800b41c <find_volume>
 800b99a:	4603      	mov	r3, r0
 800b99c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3720      	adds	r7, #32
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	20001248 	.word	0x20001248

0800b9ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b098      	sub	sp, #96	@ 0x60
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <f_open+0x18>
 800b9c0:	2309      	movs	r3, #9
 800b9c2:	e1a9      	b.n	800bd18 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b9cc:	79fa      	ldrb	r2, [r7, #7]
 800b9ce:	f107 0110 	add.w	r1, r7, #16
 800b9d2:	f107 0308 	add.w	r3, r7, #8
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff fd20 	bl	800b41c <find_volume>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b9e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f040 818d 	bne.w	800bd06 <f_open+0x35a>
		dj.obj.fs = fs;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	f107 0314 	add.w	r3, r7, #20
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fc03 	bl	800b204 <follow_path>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ba04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d118      	bne.n	800ba3e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ba0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba10:	b25b      	sxtb	r3, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	da03      	bge.n	800ba1e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ba16:	2306      	movs	r3, #6
 800ba18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ba1c:	e00f      	b.n	800ba3e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	bf8c      	ite	hi
 800ba24:	2301      	movhi	r3, #1
 800ba26:	2300      	movls	r3, #0
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f107 0314 	add.w	r3, r7, #20
 800ba30:	4611      	mov	r1, r2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fbd8 	bl	800a1e8 <chk_lock>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	f003 031c 	and.w	r3, r3, #28
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d07f      	beq.n	800bb48 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ba48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d017      	beq.n	800ba80 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ba50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d10e      	bne.n	800ba76 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ba58:	f7fe fc22 	bl	800a2a0 <enq_lock>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d006      	beq.n	800ba70 <f_open+0xc4>
 800ba62:	f107 0314 	add.w	r3, r7, #20
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fb06 	bl	800b078 <dir_register>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	e000      	b.n	800ba72 <f_open+0xc6>
 800ba70:	2312      	movs	r3, #18
 800ba72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ba76:	79fb      	ldrb	r3, [r7, #7]
 800ba78:	f043 0308 	orr.w	r3, r3, #8
 800ba7c:	71fb      	strb	r3, [r7, #7]
 800ba7e:	e010      	b.n	800baa2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ba80:	7ebb      	ldrb	r3, [r7, #26]
 800ba82:	f003 0311 	and.w	r3, r3, #17
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d003      	beq.n	800ba92 <f_open+0xe6>
					res = FR_DENIED;
 800ba8a:	2307      	movs	r3, #7
 800ba8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ba90:	e007      	b.n	800baa2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ba92:	79fb      	ldrb	r3, [r7, #7]
 800ba94:	f003 0304 	and.w	r3, r3, #4
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <f_open+0xf6>
 800ba9c:	2308      	movs	r3, #8
 800ba9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800baa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d168      	bne.n	800bb7c <f_open+0x1d0>
 800baaa:	79fb      	ldrb	r3, [r7, #7]
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d063      	beq.n	800bb7c <f_open+0x1d0>
				dw = GET_FATTIME();
 800bab4:	f7fe f99c 	bl	8009df0 <get_fattime>
 800bab8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800baba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800babc:	330e      	adds	r3, #14
 800babe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe fae7 	bl	800a094 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac8:	3316      	adds	r3, #22
 800baca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe fae1 	bl	800a094 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad4:	330b      	adds	r3, #11
 800bad6:	2220      	movs	r2, #32
 800bad8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bade:	4611      	mov	r1, r2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fa35 	bl	800af50 <ld_clust>
 800bae6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800baec:	2200      	movs	r2, #0
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fa4d 	bl	800af8e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800baf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf6:	331c      	adds	r3, #28
 800baf8:	2100      	movs	r1, #0
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe faca 	bl	800a094 <st_dword>
					fs->wflag = 1;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	2201      	movs	r2, #1
 800bb04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bb06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d037      	beq.n	800bb7c <f_open+0x1d0>
						dw = fs->winsect;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb10:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bb12:	f107 0314 	add.w	r3, r7, #20
 800bb16:	2200      	movs	r2, #0
 800bb18:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fe ff60 	bl	800a9e0 <remove_chain>
 800bb20:	4603      	mov	r3, r0
 800bb22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800bb26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d126      	bne.n	800bb7c <f_open+0x1d0>
							res = move_window(fs, dw);
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fe fd08 	bl	800a548 <move_window>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb42:	3a01      	subs	r2, #1
 800bb44:	60da      	str	r2, [r3, #12]
 800bb46:	e019      	b.n	800bb7c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bb48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d115      	bne.n	800bb7c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bb50:	7ebb      	ldrb	r3, [r7, #26]
 800bb52:	f003 0310 	and.w	r3, r3, #16
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <f_open+0x1b6>
					res = FR_NO_FILE;
 800bb5a:	2304      	movs	r3, #4
 800bb5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bb60:	e00c      	b.n	800bb7c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bb62:	79fb      	ldrb	r3, [r7, #7]
 800bb64:	f003 0302 	and.w	r3, r3, #2
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d007      	beq.n	800bb7c <f_open+0x1d0>
 800bb6c:	7ebb      	ldrb	r3, [r7, #26]
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <f_open+0x1d0>
						res = FR_DENIED;
 800bb76:	2307      	movs	r3, #7
 800bb78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bb7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d126      	bne.n	800bbd2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	f003 0308 	and.w	r3, r3, #8
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bb8e:	79fb      	ldrb	r3, [r7, #7]
 800bb90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bb9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bba4:	79fb      	ldrb	r3, [r7, #7]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	bf8c      	ite	hi
 800bbaa:	2301      	movhi	r3, #1
 800bbac:	2300      	movls	r3, #0
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f107 0314 	add.w	r3, r7, #20
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe fb93 	bl	800a2e4 <inc_lock>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	691b      	ldr	r3, [r3, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <f_open+0x226>
 800bbcc:	2302      	movs	r3, #2
 800bbce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bbd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f040 8095 	bne.w	800bd06 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7ff f9b4 	bl	800af50 <ld_clust>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bbee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbf0:	331c      	adds	r3, #28
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe fa10 	bl	800a018 <ld_dword>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	88da      	ldrh	r2, [r3, #6]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	79fa      	ldrb	r2, [r7, #7]
 800bc16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	3330      	adds	r3, #48	@ 0x30
 800bc2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc32:	2100      	movs	r1, #0
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe fa7a 	bl	800a12e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
 800bc3c:	f003 0320 	and.w	r3, r3, #32
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d060      	beq.n	800bd06 <f_open+0x35a>
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d05c      	beq.n	800bd06 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	68da      	ldr	r2, [r3, #12]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	895b      	ldrh	r3, [r3, #10]
 800bc58:	025b      	lsls	r3, r3, #9
 800bc5a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc68:	e016      	b.n	800bc98 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fd25 	bl	800a6be <get_fat>
 800bc74:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bc76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d802      	bhi.n	800bc82 <f_open+0x2d6>
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bc82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc88:	d102      	bne.n	800bc90 <f_open+0x2e4>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d103      	bne.n	800bca8 <f_open+0x2fc>
 800bca0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d8e0      	bhi.n	800bc6a <f_open+0x2be>
				}
				fp->clust = clst;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bcae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d127      	bne.n	800bd06 <f_open+0x35a>
 800bcb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d022      	beq.n	800bd06 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fe fcdb 	bl	800a680 <clust2sect>
 800bcca:	6478      	str	r0, [r7, #68]	@ 0x44
 800bccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d103      	bne.n	800bcda <f_open+0x32e>
						res = FR_INT_ERR;
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bcd8:	e015      	b.n	800bd06 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bcda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcdc:	0a5a      	lsrs	r2, r3, #9
 800bcde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bce0:	441a      	add	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	7858      	ldrb	r0, [r3, #1]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6a1a      	ldr	r2, [r3, #32]
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	f7fe f919 	bl	8009f2c <disk_read>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <f_open+0x35a>
 800bd00:	2301      	movs	r3, #1
 800bd02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bd06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d002      	beq.n	800bd14 <f_open+0x368>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bd14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3760      	adds	r7, #96	@ 0x60
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08c      	sub	sp, #48	@ 0x30
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	607a      	str	r2, [r7, #4]
 800bd2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2200      	movs	r2, #0
 800bd36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f107 0210 	add.w	r2, r7, #16
 800bd3e:	4611      	mov	r1, r2
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff fdb7 	bl	800b8b4 <validate>
 800bd46:	4603      	mov	r3, r0
 800bd48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bd4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d107      	bne.n	800bd64 <f_write+0x44>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	7d5b      	ldrb	r3, [r3, #21]
 800bd58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bd5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <f_write+0x4a>
 800bd64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd68:	e14b      	b.n	800c002 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	7d1b      	ldrb	r3, [r3, #20]
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <f_write+0x5a>
 800bd76:	2307      	movs	r3, #7
 800bd78:	e143      	b.n	800c002 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	699a      	ldr	r2, [r3, #24]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	441a      	add	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	f080 812d 	bcs.w	800bfe6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	43db      	mvns	r3, r3
 800bd92:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bd94:	e127      	b.n	800bfe6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f040 80e3 	bne.w	800bf6a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	0a5b      	lsrs	r3, r3, #9
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	8952      	ldrh	r2, [r2, #10]
 800bdae:	3a01      	subs	r2, #1
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d143      	bne.n	800be42 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10c      	bne.n	800bddc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bdc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d11a      	bne.n	800be04 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7fe fe69 	bl	800aaaa <create_chain>
 800bdd8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bdda:	e013      	b.n	800be04 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d007      	beq.n	800bdf4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	4619      	mov	r1, r3
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f7fe fef5 	bl	800abda <clmt_clust>
 800bdf0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bdf2:	e007      	b.n	800be04 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	69db      	ldr	r3, [r3, #28]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	f7fe fe54 	bl	800aaaa <create_chain>
 800be02:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800be04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 80f2 	beq.w	800bff0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800be0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d104      	bne.n	800be1c <f_write+0xfc>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2202      	movs	r2, #2
 800be16:	755a      	strb	r2, [r3, #21]
 800be18:	2302      	movs	r3, #2
 800be1a:	e0f2      	b.n	800c002 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be22:	d104      	bne.n	800be2e <f_write+0x10e>
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2201      	movs	r2, #1
 800be28:	755a      	strb	r2, [r3, #21]
 800be2a:	2301      	movs	r3, #1
 800be2c:	e0e9      	b.n	800c002 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be32:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d102      	bne.n	800be42 <f_write+0x122>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be40:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	7d1b      	ldrb	r3, [r3, #20]
 800be46:	b25b      	sxtb	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	da18      	bge.n	800be7e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	7858      	ldrb	r0, [r3, #1]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6a1a      	ldr	r2, [r3, #32]
 800be5a:	2301      	movs	r3, #1
 800be5c:	f7fe f886 	bl	8009f6c <disk_write>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d004      	beq.n	800be70 <f_write+0x150>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2201      	movs	r2, #1
 800be6a:	755a      	strb	r2, [r3, #21]
 800be6c:	2301      	movs	r3, #1
 800be6e:	e0c8      	b.n	800c002 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	7d1b      	ldrb	r3, [r3, #20]
 800be74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	69db      	ldr	r3, [r3, #28]
 800be84:	4619      	mov	r1, r3
 800be86:	4610      	mov	r0, r2
 800be88:	f7fe fbfa 	bl	800a680 <clust2sect>
 800be8c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d104      	bne.n	800be9e <f_write+0x17e>
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2202      	movs	r2, #2
 800be98:	755a      	strb	r2, [r3, #21]
 800be9a:	2302      	movs	r3, #2
 800be9c:	e0b1      	b.n	800c002 <f_write+0x2e2>
			sect += csect;
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	4413      	add	r3, r2
 800bea4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	0a5b      	lsrs	r3, r3, #9
 800beaa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d03c      	beq.n	800bf2c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800beb2:	69ba      	ldr	r2, [r7, #24]
 800beb4:	6a3b      	ldr	r3, [r7, #32]
 800beb6:	4413      	add	r3, r2
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	8952      	ldrh	r2, [r2, #10]
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d905      	bls.n	800becc <f_write+0x1ac>
					cc = fs->csize - csect;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	895b      	ldrh	r3, [r3, #10]
 800bec4:	461a      	mov	r2, r3
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	7858      	ldrb	r0, [r3, #1]
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	697a      	ldr	r2, [r7, #20]
 800bed4:	69f9      	ldr	r1, [r7, #28]
 800bed6:	f7fe f849 	bl	8009f6c <disk_write>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d004      	beq.n	800beea <f_write+0x1ca>
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2201      	movs	r2, #1
 800bee4:	755a      	strb	r2, [r3, #21]
 800bee6:	2301      	movs	r3, #1
 800bee8:	e08b      	b.n	800c002 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6a1a      	ldr	r2, [r3, #32]
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	6a3a      	ldr	r2, [r7, #32]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d915      	bls.n	800bf24 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6a1a      	ldr	r2, [r3, #32]
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	025b      	lsls	r3, r3, #9
 800bf08:	69fa      	ldr	r2, [r7, #28]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf10:	4619      	mov	r1, r3
 800bf12:	f7fe f8eb 	bl	800a0ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	7d1b      	ldrb	r3, [r3, #20]
 800bf1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	025b      	lsls	r3, r3, #9
 800bf28:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bf2a:	e03f      	b.n	800bfac <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d016      	beq.n	800bf64 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	699a      	ldr	r2, [r3, #24]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d210      	bcs.n	800bf64 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	7858      	ldrb	r0, [r3, #1]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	f7fd ffec 	bl	8009f2c <disk_read>
 800bf54:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d004      	beq.n	800bf64 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	755a      	strb	r2, [r3, #21]
 800bf60:	2301      	movs	r3, #1
 800bf62:	e04e      	b.n	800c002 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf72:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bf76:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bf78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d901      	bls.n	800bf84 <f_write+0x264>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	699b      	ldr	r3, [r3, #24]
 800bf8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf92:	4413      	add	r3, r2
 800bf94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf96:	69f9      	ldr	r1, [r7, #28]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fe f8a7 	bl	800a0ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	7d1b      	ldrb	r3, [r3, #20]
 800bfa2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bfac:	69fa      	ldr	r2, [r7, #28]
 800bfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb0:	4413      	add	r3, r2
 800bfb2:	61fb      	str	r3, [r7, #28]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	699a      	ldr	r2, [r3, #24]
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfba:	441a      	add	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	619a      	str	r2, [r3, #24]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	68da      	ldr	r2, [r3, #12]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	699b      	ldr	r3, [r3, #24]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	bf38      	it	cc
 800bfcc:	461a      	movcc	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	60da      	str	r2, [r3, #12]
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	441a      	add	r2, r3
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f47f aed4 	bne.w	800bd96 <f_write+0x76>
 800bfee:	e000      	b.n	800bff2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bff0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	7d1b      	ldrb	r3, [r3, #20]
 800bff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3730      	adds	r7, #48	@ 0x30
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b086      	sub	sp, #24
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f107 0208 	add.w	r2, r7, #8
 800c018:	4611      	mov	r1, r2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7ff fc4a 	bl	800b8b4 <validate>
 800c020:	4603      	mov	r3, r0
 800c022:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c024:	7dfb      	ldrb	r3, [r7, #23]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d168      	bne.n	800c0fc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	7d1b      	ldrb	r3, [r3, #20]
 800c02e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c032:	2b00      	cmp	r3, #0
 800c034:	d062      	beq.n	800c0fc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	7d1b      	ldrb	r3, [r3, #20]
 800c03a:	b25b      	sxtb	r3, r3
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	da15      	bge.n	800c06c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	7858      	ldrb	r0, [r3, #1]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1a      	ldr	r2, [r3, #32]
 800c04e:	2301      	movs	r3, #1
 800c050:	f7fd ff8c 	bl	8009f6c <disk_write>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <f_sync+0x54>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e04f      	b.n	800c0fe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	7d1b      	ldrb	r3, [r3, #20]
 800c062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c066:	b2da      	uxtb	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c06c:	f7fd fec0 	bl	8009df0 <get_fattime>
 800c070:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c078:	4619      	mov	r1, r3
 800c07a:	4610      	mov	r0, r2
 800c07c:	f7fe fa64 	bl	800a548 <move_window>
 800c080:	4603      	mov	r3, r0
 800c082:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d138      	bne.n	800c0fc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c08e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	330b      	adds	r3, #11
 800c094:	781a      	ldrb	r2, [r3, #0]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	330b      	adds	r3, #11
 800c09a:	f042 0220 	orr.w	r2, r2, #32
 800c09e:	b2d2      	uxtb	r2, r2
 800c0a0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	68f9      	ldr	r1, [r7, #12]
 800c0ae:	f7fe ff6e 	bl	800af8e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f103 021c 	add.w	r2, r3, #28
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	f7fd ffe8 	bl	800a094 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3316      	adds	r3, #22
 800c0c8:	6939      	ldr	r1, [r7, #16]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fd ffe2 	bl	800a094 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3312      	adds	r3, #18
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd ffc1 	bl	800a05e <st_word>
					fs->wflag = 1;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fe fa5d 	bl	800a5a4 <sync_fs>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	7d1b      	ldrb	r3, [r3, #20]
 800c0f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c0fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b084      	sub	sp, #16
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff ff7b 	bl	800c00a <f_sync>
 800c114:	4603      	mov	r3, r0
 800c116:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d118      	bne.n	800c150 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f107 0208 	add.w	r2, r7, #8
 800c124:	4611      	mov	r1, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f7ff fbc4 	bl	800b8b4 <validate>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10c      	bne.n	800c150 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe f960 	bl	800a400 <dec_lock>
 800c140:	4603      	mov	r3, r0
 800c142:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c144:	7bfb      	ldrb	r3, [r7, #15]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d102      	bne.n	800c150 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c150:	7bfb      	ldrb	r3, [r7, #15]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b092      	sub	sp, #72	@ 0x48
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c166:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c16a:	f107 030c 	add.w	r3, r7, #12
 800c16e:	2200      	movs	r2, #0
 800c170:	4618      	mov	r0, r3
 800c172:	f7ff f953 	bl	800b41c <find_volume>
 800c176:	4603      	mov	r3, r0
 800c178:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800c17c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c180:	2b00      	cmp	r3, #0
 800c182:	f040 8099 	bne.w	800c2b8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18e:	691a      	ldr	r2, [r3, #16]
 800c190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	3b02      	subs	r3, #2
 800c196:	429a      	cmp	r2, r3
 800c198:	d804      	bhi.n	800c1a4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19c:	691a      	ldr	r2, [r3, #16]
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	e089      	b.n	800c2b8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d128      	bne.n	800c202 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c1b8:	f107 0314 	add.w	r3, r7, #20
 800c1bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fe fa7d 	bl	800a6be <get_fat>
 800c1c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1cc:	d103      	bne.n	800c1d6 <f_getfree+0x7c>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c1d4:	e063      	b.n	800c29e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d103      	bne.n	800c1e4 <f_getfree+0x8a>
 800c1dc:	2302      	movs	r3, #2
 800c1de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c1e2:	e05c      	b.n	800c29e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d102      	bne.n	800c1f0 <f_getfree+0x96>
 800c1ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800c1f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d3db      	bcc.n	800c1b8 <f_getfree+0x5e>
 800c200:	e04d      	b.n	800c29e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c204:	695b      	ldr	r3, [r3, #20]
 800c206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c20a:	6a1b      	ldr	r3, [r3, #32]
 800c20c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	637b      	str	r3, [r7, #52]	@ 0x34
 800c212:	2300      	movs	r3, #0
 800c214:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800c216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d113      	bne.n	800c244 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c21c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c220:	1c5a      	adds	r2, r3, #1
 800c222:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c224:	4619      	mov	r1, r3
 800c226:	f7fe f98f 	bl	800a548 <move_window>
 800c22a:	4603      	mov	r3, r0
 800c22c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800c230:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c234:	2b00      	cmp	r3, #0
 800c236:	d131      	bne.n	800c29c <f_getfree+0x142>
							p = fs->win;
 800c238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23a:	3330      	adds	r3, #48	@ 0x30
 800c23c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800c23e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c242:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d10f      	bne.n	800c26c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c24c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c24e:	f7fd fecb 	bl	8009fe8 <ld_word>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d102      	bne.n	800c25e <f_getfree+0x104>
 800c258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c25a:	3301      	adds	r3, #1
 800c25c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800c25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c260:	3302      	adds	r3, #2
 800c262:	633b      	str	r3, [r7, #48]	@ 0x30
 800c264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c266:	3b02      	subs	r3, #2
 800c268:	637b      	str	r3, [r7, #52]	@ 0x34
 800c26a:	e010      	b.n	800c28e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c26c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c26e:	f7fd fed3 	bl	800a018 <ld_dword>
 800c272:	4603      	mov	r3, r0
 800c274:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d102      	bne.n	800c282 <f_getfree+0x128>
 800c27c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c27e:	3301      	adds	r3, #1
 800c280:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800c282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c284:	3304      	adds	r3, #4
 800c286:	633b      	str	r3, [r7, #48]	@ 0x30
 800c288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c28a:	3b04      	subs	r3, #4
 800c28c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800c28e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c290:	3b01      	subs	r3, #1
 800c292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1bd      	bne.n	800c216 <f_getfree+0xbc>
 800c29a:	e000      	b.n	800c29e <f_getfree+0x144>
							if (res != FR_OK) break;
 800c29c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2a2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2a8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ac:	791a      	ldrb	r2, [r3, #4]
 800c2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b0:	f042 0201 	orr.w	r2, r2, #1
 800c2b4:	b2d2      	uxtb	r2, r2
 800c2b6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c2b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3748      	adds	r7, #72	@ 0x48
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	2b0a      	cmp	r3, #10
 800c2d4:	d103      	bne.n	800c2de <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c2d6:	210d      	movs	r1, #13
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff fff3 	bl	800c2c4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	db25      	blt.n	800c336 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	1c5a      	adds	r2, r3, #1
 800c2ee:	60fa      	str	r2, [r7, #12]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	78fa      	ldrb	r2, [r7, #3]
 800c2f6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2b3c      	cmp	r3, #60	@ 0x3c
 800c2fc:	dd12      	ble.n	800c324 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6818      	ldr	r0, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f103 010c 	add.w	r1, r3, #12
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	f107 0308 	add.w	r3, r7, #8
 800c30e:	f7ff fd07 	bl	800bd20 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	429a      	cmp	r2, r3
 800c318:	d101      	bne.n	800c31e <putc_bfd+0x5a>
 800c31a:	2300      	movs	r3, #0
 800c31c:	e001      	b.n	800c322 <putc_bfd+0x5e>
 800c31e:	f04f 33ff 	mov.w	r3, #4294967295
 800c322:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	1c5a      	adds	r2, r3, #1
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	609a      	str	r2, [r3, #8]
 800c334:	e000      	b.n	800c338 <putc_bfd+0x74>
	if (i < 0) return;
 800c336:	bf00      	nop
}
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	db16      	blt.n	800c37c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f103 010c 	add.w	r1, r3, #12
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	461a      	mov	r2, r3
 800c35e:	f107 030c 	add.w	r3, r7, #12
 800c362:	f7ff fcdd 	bl	800bd20 <f_write>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d107      	bne.n	800c37c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	4293      	cmp	r3, r2
 800c374:	d102      	bne.n	800c37c <putc_flush+0x3e>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	e001      	b.n	800c380 <putc_flush+0x42>
	return EOF;
 800c37c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	605a      	str	r2, [r3, #4]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685a      	ldr	r2, [r3, #4]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	609a      	str	r2, [r3, #8]
}
 800c3a6:	bf00      	nop
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr

0800c3b2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b096      	sub	sp, #88	@ 0x58
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c3bc:	f107 030c 	add.w	r3, r7, #12
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff ffe0 	bl	800c388 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c3c8:	e009      	b.n	800c3de <f_puts+0x2c>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	781a      	ldrb	r2, [r3, #0]
 800c3d2:	f107 030c 	add.w	r3, r7, #12
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7ff ff73 	bl	800c2c4 <putc_bfd>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1f1      	bne.n	800c3ca <f_puts+0x18>
	return putc_flush(&pb);
 800c3e6:	f107 030c 	add.w	r3, r7, #12
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff ffa7 	bl	800c33e <putc_flush>
 800c3f0:	4603      	mov	r3, r0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3758      	adds	r7, #88	@ 0x58
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b087      	sub	sp, #28
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	4613      	mov	r3, r2
 800c408:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c40a:	2301      	movs	r3, #1
 800c40c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c412:	4b1f      	ldr	r3, [pc, #124]	@ (800c490 <FATFS_LinkDriverEx+0x94>)
 800c414:	7a5b      	ldrb	r3, [r3, #9]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d131      	bne.n	800c480 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c41c:	4b1c      	ldr	r3, [pc, #112]	@ (800c490 <FATFS_LinkDriverEx+0x94>)
 800c41e:	7a5b      	ldrb	r3, [r3, #9]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	461a      	mov	r2, r3
 800c424:	4b1a      	ldr	r3, [pc, #104]	@ (800c490 <FATFS_LinkDriverEx+0x94>)
 800c426:	2100      	movs	r1, #0
 800c428:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c42a:	4b19      	ldr	r3, [pc, #100]	@ (800c490 <FATFS_LinkDriverEx+0x94>)
 800c42c:	7a5b      	ldrb	r3, [r3, #9]
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	4a17      	ldr	r2, [pc, #92]	@ (800c490 <FATFS_LinkDriverEx+0x94>)
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	4413      	add	r3, r2
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c43a:	4b15      	ldr	r3, [pc, #84]	@ (800c490 <FATFS_LinkDriverEx+0x94>)
 800c43c:	7a5b      	ldrb	r3, [r3, #9]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	461a      	mov	r2, r3
 800c442:	4b13      	ldr	r3, [pc, #76]	@ (800c490 <FATFS_LinkDriverEx+0x94>)
 800c444:	4413      	add	r3, r2
 800c446:	79fa      	ldrb	r2, [r7, #7]
 800c448:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c44a:	4b11      	ldr	r3, [pc, #68]	@ (800c490 <FATFS_LinkDriverEx+0x94>)
 800c44c:	7a5b      	ldrb	r3, [r3, #9]
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	1c5a      	adds	r2, r3, #1
 800c452:	b2d1      	uxtb	r1, r2
 800c454:	4a0e      	ldr	r2, [pc, #56]	@ (800c490 <FATFS_LinkDriverEx+0x94>)
 800c456:	7251      	strb	r1, [r2, #9]
 800c458:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c45a:	7dbb      	ldrb	r3, [r7, #22]
 800c45c:	3330      	adds	r3, #48	@ 0x30
 800c45e:	b2da      	uxtb	r2, r3
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	3301      	adds	r3, #1
 800c468:	223a      	movs	r2, #58	@ 0x3a
 800c46a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	3302      	adds	r3, #2
 800c470:	222f      	movs	r2, #47	@ 0x2f
 800c472:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	3303      	adds	r3, #3
 800c478:	2200      	movs	r2, #0
 800c47a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c47c:	2300      	movs	r3, #0
 800c47e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c480:	7dfb      	ldrb	r3, [r7, #23]
}
 800c482:	4618      	mov	r0, r3
 800c484:	371c      	adds	r7, #28
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	20001270 	.word	0x20001270

0800c494 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c49e:	2200      	movs	r2, #0
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff ffaa 	bl	800c3fc <FATFS_LinkDriverEx>
 800c4a8:	4603      	mov	r3, r0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
	...

0800c4b4 <malloc>:
 800c4b4:	4b02      	ldr	r3, [pc, #8]	@ (800c4c0 <malloc+0xc>)
 800c4b6:	4601      	mov	r1, r0
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	f000 b825 	b.w	800c508 <_malloc_r>
 800c4be:	bf00      	nop
 800c4c0:	200001a4 	.word	0x200001a4

0800c4c4 <sbrk_aligned>:
 800c4c4:	b570      	push	{r4, r5, r6, lr}
 800c4c6:	4e0f      	ldr	r6, [pc, #60]	@ (800c504 <sbrk_aligned+0x40>)
 800c4c8:	460c      	mov	r4, r1
 800c4ca:	6831      	ldr	r1, [r6, #0]
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	b911      	cbnz	r1, 800c4d6 <sbrk_aligned+0x12>
 800c4d0:	f001 ff44 	bl	800e35c <_sbrk_r>
 800c4d4:	6030      	str	r0, [r6, #0]
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	4628      	mov	r0, r5
 800c4da:	f001 ff3f 	bl	800e35c <_sbrk_r>
 800c4de:	1c43      	adds	r3, r0, #1
 800c4e0:	d103      	bne.n	800c4ea <sbrk_aligned+0x26>
 800c4e2:	f04f 34ff 	mov.w	r4, #4294967295
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	bd70      	pop	{r4, r5, r6, pc}
 800c4ea:	1cc4      	adds	r4, r0, #3
 800c4ec:	f024 0403 	bic.w	r4, r4, #3
 800c4f0:	42a0      	cmp	r0, r4
 800c4f2:	d0f8      	beq.n	800c4e6 <sbrk_aligned+0x22>
 800c4f4:	1a21      	subs	r1, r4, r0
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f001 ff30 	bl	800e35c <_sbrk_r>
 800c4fc:	3001      	adds	r0, #1
 800c4fe:	d1f2      	bne.n	800c4e6 <sbrk_aligned+0x22>
 800c500:	e7ef      	b.n	800c4e2 <sbrk_aligned+0x1e>
 800c502:	bf00      	nop
 800c504:	2000127c 	.word	0x2000127c

0800c508 <_malloc_r>:
 800c508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c50c:	1ccd      	adds	r5, r1, #3
 800c50e:	f025 0503 	bic.w	r5, r5, #3
 800c512:	3508      	adds	r5, #8
 800c514:	2d0c      	cmp	r5, #12
 800c516:	bf38      	it	cc
 800c518:	250c      	movcc	r5, #12
 800c51a:	2d00      	cmp	r5, #0
 800c51c:	4606      	mov	r6, r0
 800c51e:	db01      	blt.n	800c524 <_malloc_r+0x1c>
 800c520:	42a9      	cmp	r1, r5
 800c522:	d904      	bls.n	800c52e <_malloc_r+0x26>
 800c524:	230c      	movs	r3, #12
 800c526:	6033      	str	r3, [r6, #0]
 800c528:	2000      	movs	r0, #0
 800c52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c52e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c604 <_malloc_r+0xfc>
 800c532:	f000 f869 	bl	800c608 <__malloc_lock>
 800c536:	f8d8 3000 	ldr.w	r3, [r8]
 800c53a:	461c      	mov	r4, r3
 800c53c:	bb44      	cbnz	r4, 800c590 <_malloc_r+0x88>
 800c53e:	4629      	mov	r1, r5
 800c540:	4630      	mov	r0, r6
 800c542:	f7ff ffbf 	bl	800c4c4 <sbrk_aligned>
 800c546:	1c43      	adds	r3, r0, #1
 800c548:	4604      	mov	r4, r0
 800c54a:	d158      	bne.n	800c5fe <_malloc_r+0xf6>
 800c54c:	f8d8 4000 	ldr.w	r4, [r8]
 800c550:	4627      	mov	r7, r4
 800c552:	2f00      	cmp	r7, #0
 800c554:	d143      	bne.n	800c5de <_malloc_r+0xd6>
 800c556:	2c00      	cmp	r4, #0
 800c558:	d04b      	beq.n	800c5f2 <_malloc_r+0xea>
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	4639      	mov	r1, r7
 800c55e:	4630      	mov	r0, r6
 800c560:	eb04 0903 	add.w	r9, r4, r3
 800c564:	f001 fefa 	bl	800e35c <_sbrk_r>
 800c568:	4581      	cmp	r9, r0
 800c56a:	d142      	bne.n	800c5f2 <_malloc_r+0xea>
 800c56c:	6821      	ldr	r1, [r4, #0]
 800c56e:	1a6d      	subs	r5, r5, r1
 800c570:	4629      	mov	r1, r5
 800c572:	4630      	mov	r0, r6
 800c574:	f7ff ffa6 	bl	800c4c4 <sbrk_aligned>
 800c578:	3001      	adds	r0, #1
 800c57a:	d03a      	beq.n	800c5f2 <_malloc_r+0xea>
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	442b      	add	r3, r5
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	f8d8 3000 	ldr.w	r3, [r8]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	bb62      	cbnz	r2, 800c5e4 <_malloc_r+0xdc>
 800c58a:	f8c8 7000 	str.w	r7, [r8]
 800c58e:	e00f      	b.n	800c5b0 <_malloc_r+0xa8>
 800c590:	6822      	ldr	r2, [r4, #0]
 800c592:	1b52      	subs	r2, r2, r5
 800c594:	d420      	bmi.n	800c5d8 <_malloc_r+0xd0>
 800c596:	2a0b      	cmp	r2, #11
 800c598:	d917      	bls.n	800c5ca <_malloc_r+0xc2>
 800c59a:	1961      	adds	r1, r4, r5
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	6025      	str	r5, [r4, #0]
 800c5a0:	bf18      	it	ne
 800c5a2:	6059      	strne	r1, [r3, #4]
 800c5a4:	6863      	ldr	r3, [r4, #4]
 800c5a6:	bf08      	it	eq
 800c5a8:	f8c8 1000 	streq.w	r1, [r8]
 800c5ac:	5162      	str	r2, [r4, r5]
 800c5ae:	604b      	str	r3, [r1, #4]
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f000 f82f 	bl	800c614 <__malloc_unlock>
 800c5b6:	f104 000b 	add.w	r0, r4, #11
 800c5ba:	1d23      	adds	r3, r4, #4
 800c5bc:	f020 0007 	bic.w	r0, r0, #7
 800c5c0:	1ac2      	subs	r2, r0, r3
 800c5c2:	bf1c      	itt	ne
 800c5c4:	1a1b      	subne	r3, r3, r0
 800c5c6:	50a3      	strne	r3, [r4, r2]
 800c5c8:	e7af      	b.n	800c52a <_malloc_r+0x22>
 800c5ca:	6862      	ldr	r2, [r4, #4]
 800c5cc:	42a3      	cmp	r3, r4
 800c5ce:	bf0c      	ite	eq
 800c5d0:	f8c8 2000 	streq.w	r2, [r8]
 800c5d4:	605a      	strne	r2, [r3, #4]
 800c5d6:	e7eb      	b.n	800c5b0 <_malloc_r+0xa8>
 800c5d8:	4623      	mov	r3, r4
 800c5da:	6864      	ldr	r4, [r4, #4]
 800c5dc:	e7ae      	b.n	800c53c <_malloc_r+0x34>
 800c5de:	463c      	mov	r4, r7
 800c5e0:	687f      	ldr	r7, [r7, #4]
 800c5e2:	e7b6      	b.n	800c552 <_malloc_r+0x4a>
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	42a3      	cmp	r3, r4
 800c5ea:	d1fb      	bne.n	800c5e4 <_malloc_r+0xdc>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	6053      	str	r3, [r2, #4]
 800c5f0:	e7de      	b.n	800c5b0 <_malloc_r+0xa8>
 800c5f2:	230c      	movs	r3, #12
 800c5f4:	6033      	str	r3, [r6, #0]
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	f000 f80c 	bl	800c614 <__malloc_unlock>
 800c5fc:	e794      	b.n	800c528 <_malloc_r+0x20>
 800c5fe:	6005      	str	r5, [r0, #0]
 800c600:	e7d6      	b.n	800c5b0 <_malloc_r+0xa8>
 800c602:	bf00      	nop
 800c604:	20001280 	.word	0x20001280

0800c608 <__malloc_lock>:
 800c608:	4801      	ldr	r0, [pc, #4]	@ (800c610 <__malloc_lock+0x8>)
 800c60a:	f001 bef4 	b.w	800e3f6 <__retarget_lock_acquire_recursive>
 800c60e:	bf00      	nop
 800c610:	200013c4 	.word	0x200013c4

0800c614 <__malloc_unlock>:
 800c614:	4801      	ldr	r0, [pc, #4]	@ (800c61c <__malloc_unlock+0x8>)
 800c616:	f001 beef 	b.w	800e3f8 <__retarget_lock_release_recursive>
 800c61a:	bf00      	nop
 800c61c:	200013c4 	.word	0x200013c4

0800c620 <sulp>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	4604      	mov	r4, r0
 800c624:	460d      	mov	r5, r1
 800c626:	ec45 4b10 	vmov	d0, r4, r5
 800c62a:	4616      	mov	r6, r2
 800c62c:	f003 fc76 	bl	800ff1c <__ulp>
 800c630:	ec51 0b10 	vmov	r0, r1, d0
 800c634:	b17e      	cbz	r6, 800c656 <sulp+0x36>
 800c636:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c63a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dd09      	ble.n	800c656 <sulp+0x36>
 800c642:	051b      	lsls	r3, r3, #20
 800c644:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c648:	2400      	movs	r4, #0
 800c64a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c64e:	4622      	mov	r2, r4
 800c650:	462b      	mov	r3, r5
 800c652:	f7f3 fff9 	bl	8000648 <__aeabi_dmul>
 800c656:	ec41 0b10 	vmov	d0, r0, r1
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	0000      	movs	r0, r0
	...

0800c660 <_strtod_l>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	b09f      	sub	sp, #124	@ 0x7c
 800c666:	460c      	mov	r4, r1
 800c668:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c66a:	2200      	movs	r2, #0
 800c66c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c66e:	9005      	str	r0, [sp, #20]
 800c670:	f04f 0a00 	mov.w	sl, #0
 800c674:	f04f 0b00 	mov.w	fp, #0
 800c678:	460a      	mov	r2, r1
 800c67a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c67c:	7811      	ldrb	r1, [r2, #0]
 800c67e:	292b      	cmp	r1, #43	@ 0x2b
 800c680:	d04a      	beq.n	800c718 <_strtod_l+0xb8>
 800c682:	d838      	bhi.n	800c6f6 <_strtod_l+0x96>
 800c684:	290d      	cmp	r1, #13
 800c686:	d832      	bhi.n	800c6ee <_strtod_l+0x8e>
 800c688:	2908      	cmp	r1, #8
 800c68a:	d832      	bhi.n	800c6f2 <_strtod_l+0x92>
 800c68c:	2900      	cmp	r1, #0
 800c68e:	d03b      	beq.n	800c708 <_strtod_l+0xa8>
 800c690:	2200      	movs	r2, #0
 800c692:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c694:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c696:	782a      	ldrb	r2, [r5, #0]
 800c698:	2a30      	cmp	r2, #48	@ 0x30
 800c69a:	f040 80b3 	bne.w	800c804 <_strtod_l+0x1a4>
 800c69e:	786a      	ldrb	r2, [r5, #1]
 800c6a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c6a4:	2a58      	cmp	r2, #88	@ 0x58
 800c6a6:	d16e      	bne.n	800c786 <_strtod_l+0x126>
 800c6a8:	9302      	str	r3, [sp, #8]
 800c6aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	4a8e      	ldr	r2, [pc, #568]	@ (800c8ec <_strtod_l+0x28c>)
 800c6b4:	9805      	ldr	r0, [sp, #20]
 800c6b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c6b8:	a919      	add	r1, sp, #100	@ 0x64
 800c6ba:	f002 fdd7 	bl	800f26c <__gethex>
 800c6be:	f010 060f 	ands.w	r6, r0, #15
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	d005      	beq.n	800c6d2 <_strtod_l+0x72>
 800c6c6:	2e06      	cmp	r6, #6
 800c6c8:	d128      	bne.n	800c71c <_strtod_l+0xbc>
 800c6ca:	3501      	adds	r5, #1
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800c6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f040 858e 	bne.w	800d1f6 <_strtod_l+0xb96>
 800c6da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6dc:	b1cb      	cbz	r3, 800c712 <_strtod_l+0xb2>
 800c6de:	4652      	mov	r2, sl
 800c6e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c6e4:	ec43 2b10 	vmov	d0, r2, r3
 800c6e8:	b01f      	add	sp, #124	@ 0x7c
 800c6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ee:	2920      	cmp	r1, #32
 800c6f0:	d1ce      	bne.n	800c690 <_strtod_l+0x30>
 800c6f2:	3201      	adds	r2, #1
 800c6f4:	e7c1      	b.n	800c67a <_strtod_l+0x1a>
 800c6f6:	292d      	cmp	r1, #45	@ 0x2d
 800c6f8:	d1ca      	bne.n	800c690 <_strtod_l+0x30>
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c6fe:	1c51      	adds	r1, r2, #1
 800c700:	9119      	str	r1, [sp, #100]	@ 0x64
 800c702:	7852      	ldrb	r2, [r2, #1]
 800c704:	2a00      	cmp	r2, #0
 800c706:	d1c5      	bne.n	800c694 <_strtod_l+0x34>
 800c708:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c70a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f040 8570 	bne.w	800d1f2 <_strtod_l+0xb92>
 800c712:	4652      	mov	r2, sl
 800c714:	465b      	mov	r3, fp
 800c716:	e7e5      	b.n	800c6e4 <_strtod_l+0x84>
 800c718:	2100      	movs	r1, #0
 800c71a:	e7ef      	b.n	800c6fc <_strtod_l+0x9c>
 800c71c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c71e:	b13a      	cbz	r2, 800c730 <_strtod_l+0xd0>
 800c720:	2135      	movs	r1, #53	@ 0x35
 800c722:	a81c      	add	r0, sp, #112	@ 0x70
 800c724:	f003 fcf4 	bl	8010110 <__copybits>
 800c728:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c72a:	9805      	ldr	r0, [sp, #20]
 800c72c:	f003 f8c2 	bl	800f8b4 <_Bfree>
 800c730:	3e01      	subs	r6, #1
 800c732:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c734:	2e04      	cmp	r6, #4
 800c736:	d806      	bhi.n	800c746 <_strtod_l+0xe6>
 800c738:	e8df f006 	tbb	[pc, r6]
 800c73c:	201d0314 	.word	0x201d0314
 800c740:	14          	.byte	0x14
 800c741:	00          	.byte	0x00
 800c742:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c746:	05e1      	lsls	r1, r4, #23
 800c748:	bf48      	it	mi
 800c74a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c74e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c752:	0d1b      	lsrs	r3, r3, #20
 800c754:	051b      	lsls	r3, r3, #20
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1bb      	bne.n	800c6d2 <_strtod_l+0x72>
 800c75a:	f001 fe21 	bl	800e3a0 <__errno>
 800c75e:	2322      	movs	r3, #34	@ 0x22
 800c760:	6003      	str	r3, [r0, #0]
 800c762:	e7b6      	b.n	800c6d2 <_strtod_l+0x72>
 800c764:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c768:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c76c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c770:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c774:	e7e7      	b.n	800c746 <_strtod_l+0xe6>
 800c776:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c8f4 <_strtod_l+0x294>
 800c77a:	e7e4      	b.n	800c746 <_strtod_l+0xe6>
 800c77c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c780:	f04f 3aff 	mov.w	sl, #4294967295
 800c784:	e7df      	b.n	800c746 <_strtod_l+0xe6>
 800c786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c788:	1c5a      	adds	r2, r3, #1
 800c78a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c78c:	785b      	ldrb	r3, [r3, #1]
 800c78e:	2b30      	cmp	r3, #48	@ 0x30
 800c790:	d0f9      	beq.n	800c786 <_strtod_l+0x126>
 800c792:	2b00      	cmp	r3, #0
 800c794:	d09d      	beq.n	800c6d2 <_strtod_l+0x72>
 800c796:	2301      	movs	r3, #1
 800c798:	9309      	str	r3, [sp, #36]	@ 0x24
 800c79a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c79c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9308      	str	r3, [sp, #32]
 800c7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7a4:	461f      	mov	r7, r3
 800c7a6:	220a      	movs	r2, #10
 800c7a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c7aa:	7805      	ldrb	r5, [r0, #0]
 800c7ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c7b0:	b2d9      	uxtb	r1, r3
 800c7b2:	2909      	cmp	r1, #9
 800c7b4:	d928      	bls.n	800c808 <_strtod_l+0x1a8>
 800c7b6:	494e      	ldr	r1, [pc, #312]	@ (800c8f0 <_strtod_l+0x290>)
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f001 fd84 	bl	800e2c6 <strncmp>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d032      	beq.n	800c828 <_strtod_l+0x1c8>
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	462a      	mov	r2, r5
 800c7c6:	4681      	mov	r9, r0
 800c7c8:	463d      	mov	r5, r7
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2a65      	cmp	r2, #101	@ 0x65
 800c7ce:	d001      	beq.n	800c7d4 <_strtod_l+0x174>
 800c7d0:	2a45      	cmp	r2, #69	@ 0x45
 800c7d2:	d114      	bne.n	800c7fe <_strtod_l+0x19e>
 800c7d4:	b91d      	cbnz	r5, 800c7de <_strtod_l+0x17e>
 800c7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7d8:	4302      	orrs	r2, r0
 800c7da:	d095      	beq.n	800c708 <_strtod_l+0xa8>
 800c7dc:	2500      	movs	r5, #0
 800c7de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c7e0:	1c62      	adds	r2, r4, #1
 800c7e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7e4:	7862      	ldrb	r2, [r4, #1]
 800c7e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c7e8:	d077      	beq.n	800c8da <_strtod_l+0x27a>
 800c7ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800c7ec:	d07b      	beq.n	800c8e6 <_strtod_l+0x286>
 800c7ee:	f04f 0c00 	mov.w	ip, #0
 800c7f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c7f6:	2909      	cmp	r1, #9
 800c7f8:	f240 8082 	bls.w	800c900 <_strtod_l+0x2a0>
 800c7fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800c7fe:	f04f 0800 	mov.w	r8, #0
 800c802:	e0a2      	b.n	800c94a <_strtod_l+0x2ea>
 800c804:	2300      	movs	r3, #0
 800c806:	e7c7      	b.n	800c798 <_strtod_l+0x138>
 800c808:	2f08      	cmp	r7, #8
 800c80a:	bfd5      	itete	le
 800c80c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c80e:	9908      	ldrgt	r1, [sp, #32]
 800c810:	fb02 3301 	mlale	r3, r2, r1, r3
 800c814:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c818:	f100 0001 	add.w	r0, r0, #1
 800c81c:	bfd4      	ite	le
 800c81e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c820:	9308      	strgt	r3, [sp, #32]
 800c822:	3701      	adds	r7, #1
 800c824:	9019      	str	r0, [sp, #100]	@ 0x64
 800c826:	e7bf      	b.n	800c7a8 <_strtod_l+0x148>
 800c828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c82a:	1c5a      	adds	r2, r3, #1
 800c82c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c82e:	785a      	ldrb	r2, [r3, #1]
 800c830:	b37f      	cbz	r7, 800c892 <_strtod_l+0x232>
 800c832:	4681      	mov	r9, r0
 800c834:	463d      	mov	r5, r7
 800c836:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c83a:	2b09      	cmp	r3, #9
 800c83c:	d912      	bls.n	800c864 <_strtod_l+0x204>
 800c83e:	2301      	movs	r3, #1
 800c840:	e7c4      	b.n	800c7cc <_strtod_l+0x16c>
 800c842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	9219      	str	r2, [sp, #100]	@ 0x64
 800c848:	785a      	ldrb	r2, [r3, #1]
 800c84a:	3001      	adds	r0, #1
 800c84c:	2a30      	cmp	r2, #48	@ 0x30
 800c84e:	d0f8      	beq.n	800c842 <_strtod_l+0x1e2>
 800c850:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c854:	2b08      	cmp	r3, #8
 800c856:	f200 84d3 	bhi.w	800d200 <_strtod_l+0xba0>
 800c85a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c85c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c85e:	4681      	mov	r9, r0
 800c860:	2000      	movs	r0, #0
 800c862:	4605      	mov	r5, r0
 800c864:	3a30      	subs	r2, #48	@ 0x30
 800c866:	f100 0301 	add.w	r3, r0, #1
 800c86a:	d02a      	beq.n	800c8c2 <_strtod_l+0x262>
 800c86c:	4499      	add	r9, r3
 800c86e:	eb00 0c05 	add.w	ip, r0, r5
 800c872:	462b      	mov	r3, r5
 800c874:	210a      	movs	r1, #10
 800c876:	4563      	cmp	r3, ip
 800c878:	d10d      	bne.n	800c896 <_strtod_l+0x236>
 800c87a:	1c69      	adds	r1, r5, #1
 800c87c:	4401      	add	r1, r0
 800c87e:	4428      	add	r0, r5
 800c880:	2808      	cmp	r0, #8
 800c882:	dc16      	bgt.n	800c8b2 <_strtod_l+0x252>
 800c884:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c886:	230a      	movs	r3, #10
 800c888:	fb03 2300 	mla	r3, r3, r0, r2
 800c88c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c88e:	2300      	movs	r3, #0
 800c890:	e018      	b.n	800c8c4 <_strtod_l+0x264>
 800c892:	4638      	mov	r0, r7
 800c894:	e7da      	b.n	800c84c <_strtod_l+0x1ec>
 800c896:	2b08      	cmp	r3, #8
 800c898:	f103 0301 	add.w	r3, r3, #1
 800c89c:	dc03      	bgt.n	800c8a6 <_strtod_l+0x246>
 800c89e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c8a0:	434e      	muls	r6, r1
 800c8a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800c8a4:	e7e7      	b.n	800c876 <_strtod_l+0x216>
 800c8a6:	2b10      	cmp	r3, #16
 800c8a8:	bfde      	ittt	le
 800c8aa:	9e08      	ldrle	r6, [sp, #32]
 800c8ac:	434e      	mulle	r6, r1
 800c8ae:	9608      	strle	r6, [sp, #32]
 800c8b0:	e7e1      	b.n	800c876 <_strtod_l+0x216>
 800c8b2:	280f      	cmp	r0, #15
 800c8b4:	dceb      	bgt.n	800c88e <_strtod_l+0x22e>
 800c8b6:	9808      	ldr	r0, [sp, #32]
 800c8b8:	230a      	movs	r3, #10
 800c8ba:	fb03 2300 	mla	r3, r3, r0, r2
 800c8be:	9308      	str	r3, [sp, #32]
 800c8c0:	e7e5      	b.n	800c88e <_strtod_l+0x22e>
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8c6:	1c50      	adds	r0, r2, #1
 800c8c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800c8ca:	7852      	ldrb	r2, [r2, #1]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	460d      	mov	r5, r1
 800c8d0:	e7b1      	b.n	800c836 <_strtod_l+0x1d6>
 800c8d2:	f04f 0900 	mov.w	r9, #0
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e77d      	b.n	800c7d6 <_strtod_l+0x176>
 800c8da:	f04f 0c00 	mov.w	ip, #0
 800c8de:	1ca2      	adds	r2, r4, #2
 800c8e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8e2:	78a2      	ldrb	r2, [r4, #2]
 800c8e4:	e785      	b.n	800c7f2 <_strtod_l+0x192>
 800c8e6:	f04f 0c01 	mov.w	ip, #1
 800c8ea:	e7f8      	b.n	800c8de <_strtod_l+0x27e>
 800c8ec:	08010d64 	.word	0x08010d64
 800c8f0:	08010d4c 	.word	0x08010d4c
 800c8f4:	7ff00000 	.word	0x7ff00000
 800c8f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8fa:	1c51      	adds	r1, r2, #1
 800c8fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800c8fe:	7852      	ldrb	r2, [r2, #1]
 800c900:	2a30      	cmp	r2, #48	@ 0x30
 800c902:	d0f9      	beq.n	800c8f8 <_strtod_l+0x298>
 800c904:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c908:	2908      	cmp	r1, #8
 800c90a:	f63f af78 	bhi.w	800c7fe <_strtod_l+0x19e>
 800c90e:	3a30      	subs	r2, #48	@ 0x30
 800c910:	920e      	str	r2, [sp, #56]	@ 0x38
 800c912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c914:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c916:	f04f 080a 	mov.w	r8, #10
 800c91a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c91c:	1c56      	adds	r6, r2, #1
 800c91e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c920:	7852      	ldrb	r2, [r2, #1]
 800c922:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c926:	f1be 0f09 	cmp.w	lr, #9
 800c92a:	d939      	bls.n	800c9a0 <_strtod_l+0x340>
 800c92c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c92e:	1a76      	subs	r6, r6, r1
 800c930:	2e08      	cmp	r6, #8
 800c932:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c936:	dc03      	bgt.n	800c940 <_strtod_l+0x2e0>
 800c938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c93a:	4588      	cmp	r8, r1
 800c93c:	bfa8      	it	ge
 800c93e:	4688      	movge	r8, r1
 800c940:	f1bc 0f00 	cmp.w	ip, #0
 800c944:	d001      	beq.n	800c94a <_strtod_l+0x2ea>
 800c946:	f1c8 0800 	rsb	r8, r8, #0
 800c94a:	2d00      	cmp	r5, #0
 800c94c:	d14e      	bne.n	800c9ec <_strtod_l+0x38c>
 800c94e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c950:	4308      	orrs	r0, r1
 800c952:	f47f aebe 	bne.w	800c6d2 <_strtod_l+0x72>
 800c956:	2b00      	cmp	r3, #0
 800c958:	f47f aed6 	bne.w	800c708 <_strtod_l+0xa8>
 800c95c:	2a69      	cmp	r2, #105	@ 0x69
 800c95e:	d028      	beq.n	800c9b2 <_strtod_l+0x352>
 800c960:	dc25      	bgt.n	800c9ae <_strtod_l+0x34e>
 800c962:	2a49      	cmp	r2, #73	@ 0x49
 800c964:	d025      	beq.n	800c9b2 <_strtod_l+0x352>
 800c966:	2a4e      	cmp	r2, #78	@ 0x4e
 800c968:	f47f aece 	bne.w	800c708 <_strtod_l+0xa8>
 800c96c:	499b      	ldr	r1, [pc, #620]	@ (800cbdc <_strtod_l+0x57c>)
 800c96e:	a819      	add	r0, sp, #100	@ 0x64
 800c970:	f002 fe9e 	bl	800f6b0 <__match>
 800c974:	2800      	cmp	r0, #0
 800c976:	f43f aec7 	beq.w	800c708 <_strtod_l+0xa8>
 800c97a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b28      	cmp	r3, #40	@ 0x28
 800c980:	d12e      	bne.n	800c9e0 <_strtod_l+0x380>
 800c982:	4997      	ldr	r1, [pc, #604]	@ (800cbe0 <_strtod_l+0x580>)
 800c984:	aa1c      	add	r2, sp, #112	@ 0x70
 800c986:	a819      	add	r0, sp, #100	@ 0x64
 800c988:	f002 fea6 	bl	800f6d8 <__hexnan>
 800c98c:	2805      	cmp	r0, #5
 800c98e:	d127      	bne.n	800c9e0 <_strtod_l+0x380>
 800c990:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c992:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c996:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c99a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c99e:	e698      	b.n	800c6d2 <_strtod_l+0x72>
 800c9a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c9a2:	fb08 2101 	mla	r1, r8, r1, r2
 800c9a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c9aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800c9ac:	e7b5      	b.n	800c91a <_strtod_l+0x2ba>
 800c9ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800c9b0:	e7da      	b.n	800c968 <_strtod_l+0x308>
 800c9b2:	498c      	ldr	r1, [pc, #560]	@ (800cbe4 <_strtod_l+0x584>)
 800c9b4:	a819      	add	r0, sp, #100	@ 0x64
 800c9b6:	f002 fe7b 	bl	800f6b0 <__match>
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	f43f aea4 	beq.w	800c708 <_strtod_l+0xa8>
 800c9c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9c2:	4989      	ldr	r1, [pc, #548]	@ (800cbe8 <_strtod_l+0x588>)
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	a819      	add	r0, sp, #100	@ 0x64
 800c9c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c9ca:	f002 fe71 	bl	800f6b0 <__match>
 800c9ce:	b910      	cbnz	r0, 800c9d6 <_strtod_l+0x376>
 800c9d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c9d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cbf8 <_strtod_l+0x598>
 800c9da:	f04f 0a00 	mov.w	sl, #0
 800c9de:	e678      	b.n	800c6d2 <_strtod_l+0x72>
 800c9e0:	4882      	ldr	r0, [pc, #520]	@ (800cbec <_strtod_l+0x58c>)
 800c9e2:	f001 fd19 	bl	800e418 <nan>
 800c9e6:	ec5b ab10 	vmov	sl, fp, d0
 800c9ea:	e672      	b.n	800c6d2 <_strtod_l+0x72>
 800c9ec:	eba8 0309 	sub.w	r3, r8, r9
 800c9f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9f4:	2f00      	cmp	r7, #0
 800c9f6:	bf08      	it	eq
 800c9f8:	462f      	moveq	r7, r5
 800c9fa:	2d10      	cmp	r5, #16
 800c9fc:	462c      	mov	r4, r5
 800c9fe:	bfa8      	it	ge
 800ca00:	2410      	movge	r4, #16
 800ca02:	f7f3 fda7 	bl	8000554 <__aeabi_ui2d>
 800ca06:	2d09      	cmp	r5, #9
 800ca08:	4682      	mov	sl, r0
 800ca0a:	468b      	mov	fp, r1
 800ca0c:	dc13      	bgt.n	800ca36 <_strtod_l+0x3d6>
 800ca0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f43f ae5e 	beq.w	800c6d2 <_strtod_l+0x72>
 800ca16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca18:	dd78      	ble.n	800cb0c <_strtod_l+0x4ac>
 800ca1a:	2b16      	cmp	r3, #22
 800ca1c:	dc5f      	bgt.n	800cade <_strtod_l+0x47e>
 800ca1e:	4974      	ldr	r1, [pc, #464]	@ (800cbf0 <_strtod_l+0x590>)
 800ca20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca28:	4652      	mov	r2, sl
 800ca2a:	465b      	mov	r3, fp
 800ca2c:	f7f3 fe0c 	bl	8000648 <__aeabi_dmul>
 800ca30:	4682      	mov	sl, r0
 800ca32:	468b      	mov	fp, r1
 800ca34:	e64d      	b.n	800c6d2 <_strtod_l+0x72>
 800ca36:	4b6e      	ldr	r3, [pc, #440]	@ (800cbf0 <_strtod_l+0x590>)
 800ca38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ca40:	f7f3 fe02 	bl	8000648 <__aeabi_dmul>
 800ca44:	4682      	mov	sl, r0
 800ca46:	9808      	ldr	r0, [sp, #32]
 800ca48:	468b      	mov	fp, r1
 800ca4a:	f7f3 fd83 	bl	8000554 <__aeabi_ui2d>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4650      	mov	r0, sl
 800ca54:	4659      	mov	r1, fp
 800ca56:	f7f3 fc41 	bl	80002dc <__adddf3>
 800ca5a:	2d0f      	cmp	r5, #15
 800ca5c:	4682      	mov	sl, r0
 800ca5e:	468b      	mov	fp, r1
 800ca60:	ddd5      	ble.n	800ca0e <_strtod_l+0x3ae>
 800ca62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca64:	1b2c      	subs	r4, r5, r4
 800ca66:	441c      	add	r4, r3
 800ca68:	2c00      	cmp	r4, #0
 800ca6a:	f340 8096 	ble.w	800cb9a <_strtod_l+0x53a>
 800ca6e:	f014 030f 	ands.w	r3, r4, #15
 800ca72:	d00a      	beq.n	800ca8a <_strtod_l+0x42a>
 800ca74:	495e      	ldr	r1, [pc, #376]	@ (800cbf0 <_strtod_l+0x590>)
 800ca76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca7a:	4652      	mov	r2, sl
 800ca7c:	465b      	mov	r3, fp
 800ca7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca82:	f7f3 fde1 	bl	8000648 <__aeabi_dmul>
 800ca86:	4682      	mov	sl, r0
 800ca88:	468b      	mov	fp, r1
 800ca8a:	f034 040f 	bics.w	r4, r4, #15
 800ca8e:	d073      	beq.n	800cb78 <_strtod_l+0x518>
 800ca90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ca94:	dd48      	ble.n	800cb28 <_strtod_l+0x4c8>
 800ca96:	2400      	movs	r4, #0
 800ca98:	46a0      	mov	r8, r4
 800ca9a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca9c:	46a1      	mov	r9, r4
 800ca9e:	9a05      	ldr	r2, [sp, #20]
 800caa0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cbf8 <_strtod_l+0x598>
 800caa4:	2322      	movs	r3, #34	@ 0x22
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	f04f 0a00 	mov.w	sl, #0
 800caac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f43f ae0f 	beq.w	800c6d2 <_strtod_l+0x72>
 800cab4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cab6:	9805      	ldr	r0, [sp, #20]
 800cab8:	f002 fefc 	bl	800f8b4 <_Bfree>
 800cabc:	9805      	ldr	r0, [sp, #20]
 800cabe:	4649      	mov	r1, r9
 800cac0:	f002 fef8 	bl	800f8b4 <_Bfree>
 800cac4:	9805      	ldr	r0, [sp, #20]
 800cac6:	4641      	mov	r1, r8
 800cac8:	f002 fef4 	bl	800f8b4 <_Bfree>
 800cacc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cace:	9805      	ldr	r0, [sp, #20]
 800cad0:	f002 fef0 	bl	800f8b4 <_Bfree>
 800cad4:	9805      	ldr	r0, [sp, #20]
 800cad6:	4621      	mov	r1, r4
 800cad8:	f002 feec 	bl	800f8b4 <_Bfree>
 800cadc:	e5f9      	b.n	800c6d2 <_strtod_l+0x72>
 800cade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cae0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cae4:	4293      	cmp	r3, r2
 800cae6:	dbbc      	blt.n	800ca62 <_strtod_l+0x402>
 800cae8:	4c41      	ldr	r4, [pc, #260]	@ (800cbf0 <_strtod_l+0x590>)
 800caea:	f1c5 050f 	rsb	r5, r5, #15
 800caee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800caf2:	4652      	mov	r2, sl
 800caf4:	465b      	mov	r3, fp
 800caf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cafa:	f7f3 fda5 	bl	8000648 <__aeabi_dmul>
 800cafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb00:	1b5d      	subs	r5, r3, r5
 800cb02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cb06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb0a:	e78f      	b.n	800ca2c <_strtod_l+0x3cc>
 800cb0c:	3316      	adds	r3, #22
 800cb0e:	dba8      	blt.n	800ca62 <_strtod_l+0x402>
 800cb10:	4b37      	ldr	r3, [pc, #220]	@ (800cbf0 <_strtod_l+0x590>)
 800cb12:	eba9 0808 	sub.w	r8, r9, r8
 800cb16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cb1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cb1e:	4650      	mov	r0, sl
 800cb20:	4659      	mov	r1, fp
 800cb22:	f7f3 febb 	bl	800089c <__aeabi_ddiv>
 800cb26:	e783      	b.n	800ca30 <_strtod_l+0x3d0>
 800cb28:	4b32      	ldr	r3, [pc, #200]	@ (800cbf4 <_strtod_l+0x594>)
 800cb2a:	9308      	str	r3, [sp, #32]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	1124      	asrs	r4, r4, #4
 800cb30:	4650      	mov	r0, sl
 800cb32:	4659      	mov	r1, fp
 800cb34:	461e      	mov	r6, r3
 800cb36:	2c01      	cmp	r4, #1
 800cb38:	dc21      	bgt.n	800cb7e <_strtod_l+0x51e>
 800cb3a:	b10b      	cbz	r3, 800cb40 <_strtod_l+0x4e0>
 800cb3c:	4682      	mov	sl, r0
 800cb3e:	468b      	mov	fp, r1
 800cb40:	492c      	ldr	r1, [pc, #176]	@ (800cbf4 <_strtod_l+0x594>)
 800cb42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cb46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cb4a:	4652      	mov	r2, sl
 800cb4c:	465b      	mov	r3, fp
 800cb4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb52:	f7f3 fd79 	bl	8000648 <__aeabi_dmul>
 800cb56:	4b28      	ldr	r3, [pc, #160]	@ (800cbf8 <_strtod_l+0x598>)
 800cb58:	460a      	mov	r2, r1
 800cb5a:	400b      	ands	r3, r1
 800cb5c:	4927      	ldr	r1, [pc, #156]	@ (800cbfc <_strtod_l+0x59c>)
 800cb5e:	428b      	cmp	r3, r1
 800cb60:	4682      	mov	sl, r0
 800cb62:	d898      	bhi.n	800ca96 <_strtod_l+0x436>
 800cb64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cb68:	428b      	cmp	r3, r1
 800cb6a:	bf86      	itte	hi
 800cb6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cc00 <_strtod_l+0x5a0>
 800cb70:	f04f 3aff 	movhi.w	sl, #4294967295
 800cb74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cb78:	2300      	movs	r3, #0
 800cb7a:	9308      	str	r3, [sp, #32]
 800cb7c:	e07a      	b.n	800cc74 <_strtod_l+0x614>
 800cb7e:	07e2      	lsls	r2, r4, #31
 800cb80:	d505      	bpl.n	800cb8e <_strtod_l+0x52e>
 800cb82:	9b08      	ldr	r3, [sp, #32]
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	f7f3 fd5e 	bl	8000648 <__aeabi_dmul>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	9a08      	ldr	r2, [sp, #32]
 800cb90:	3208      	adds	r2, #8
 800cb92:	3601      	adds	r6, #1
 800cb94:	1064      	asrs	r4, r4, #1
 800cb96:	9208      	str	r2, [sp, #32]
 800cb98:	e7cd      	b.n	800cb36 <_strtod_l+0x4d6>
 800cb9a:	d0ed      	beq.n	800cb78 <_strtod_l+0x518>
 800cb9c:	4264      	negs	r4, r4
 800cb9e:	f014 020f 	ands.w	r2, r4, #15
 800cba2:	d00a      	beq.n	800cbba <_strtod_l+0x55a>
 800cba4:	4b12      	ldr	r3, [pc, #72]	@ (800cbf0 <_strtod_l+0x590>)
 800cba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbaa:	4650      	mov	r0, sl
 800cbac:	4659      	mov	r1, fp
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fe73 	bl	800089c <__aeabi_ddiv>
 800cbb6:	4682      	mov	sl, r0
 800cbb8:	468b      	mov	fp, r1
 800cbba:	1124      	asrs	r4, r4, #4
 800cbbc:	d0dc      	beq.n	800cb78 <_strtod_l+0x518>
 800cbbe:	2c1f      	cmp	r4, #31
 800cbc0:	dd20      	ble.n	800cc04 <_strtod_l+0x5a4>
 800cbc2:	2400      	movs	r4, #0
 800cbc4:	46a0      	mov	r8, r4
 800cbc6:	940a      	str	r4, [sp, #40]	@ 0x28
 800cbc8:	46a1      	mov	r9, r4
 800cbca:	9a05      	ldr	r2, [sp, #20]
 800cbcc:	2322      	movs	r3, #34	@ 0x22
 800cbce:	f04f 0a00 	mov.w	sl, #0
 800cbd2:	f04f 0b00 	mov.w	fp, #0
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	e768      	b.n	800caac <_strtod_l+0x44c>
 800cbda:	bf00      	nop
 800cbdc:	08010eae 	.word	0x08010eae
 800cbe0:	08010d50 	.word	0x08010d50
 800cbe4:	08010ea6 	.word	0x08010ea6
 800cbe8:	08010f21 	.word	0x08010f21
 800cbec:	08010f1d 	.word	0x08010f1d
 800cbf0:	08011098 	.word	0x08011098
 800cbf4:	08011070 	.word	0x08011070
 800cbf8:	7ff00000 	.word	0x7ff00000
 800cbfc:	7ca00000 	.word	0x7ca00000
 800cc00:	7fefffff 	.word	0x7fefffff
 800cc04:	f014 0310 	ands.w	r3, r4, #16
 800cc08:	bf18      	it	ne
 800cc0a:	236a      	movne	r3, #106	@ 0x6a
 800cc0c:	4ea9      	ldr	r6, [pc, #676]	@ (800ceb4 <_strtod_l+0x854>)
 800cc0e:	9308      	str	r3, [sp, #32]
 800cc10:	4650      	mov	r0, sl
 800cc12:	4659      	mov	r1, fp
 800cc14:	2300      	movs	r3, #0
 800cc16:	07e2      	lsls	r2, r4, #31
 800cc18:	d504      	bpl.n	800cc24 <_strtod_l+0x5c4>
 800cc1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc1e:	f7f3 fd13 	bl	8000648 <__aeabi_dmul>
 800cc22:	2301      	movs	r3, #1
 800cc24:	1064      	asrs	r4, r4, #1
 800cc26:	f106 0608 	add.w	r6, r6, #8
 800cc2a:	d1f4      	bne.n	800cc16 <_strtod_l+0x5b6>
 800cc2c:	b10b      	cbz	r3, 800cc32 <_strtod_l+0x5d2>
 800cc2e:	4682      	mov	sl, r0
 800cc30:	468b      	mov	fp, r1
 800cc32:	9b08      	ldr	r3, [sp, #32]
 800cc34:	b1b3      	cbz	r3, 800cc64 <_strtod_l+0x604>
 800cc36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cc3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	4659      	mov	r1, fp
 800cc42:	dd0f      	ble.n	800cc64 <_strtod_l+0x604>
 800cc44:	2b1f      	cmp	r3, #31
 800cc46:	dd55      	ble.n	800ccf4 <_strtod_l+0x694>
 800cc48:	2b34      	cmp	r3, #52	@ 0x34
 800cc4a:	bfde      	ittt	le
 800cc4c:	f04f 33ff 	movle.w	r3, #4294967295
 800cc50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cc54:	4093      	lslle	r3, r2
 800cc56:	f04f 0a00 	mov.w	sl, #0
 800cc5a:	bfcc      	ite	gt
 800cc5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cc60:	ea03 0b01 	andle.w	fp, r3, r1
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	4650      	mov	r0, sl
 800cc6a:	4659      	mov	r1, fp
 800cc6c:	f7f3 ff54 	bl	8000b18 <__aeabi_dcmpeq>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d1a6      	bne.n	800cbc2 <_strtod_l+0x562>
 800cc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cc7a:	9805      	ldr	r0, [sp, #20]
 800cc7c:	462b      	mov	r3, r5
 800cc7e:	463a      	mov	r2, r7
 800cc80:	f002 fe80 	bl	800f984 <__s2b>
 800cc84:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc86:	2800      	cmp	r0, #0
 800cc88:	f43f af05 	beq.w	800ca96 <_strtod_l+0x436>
 800cc8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc8e:	2a00      	cmp	r2, #0
 800cc90:	eba9 0308 	sub.w	r3, r9, r8
 800cc94:	bfa8      	it	ge
 800cc96:	2300      	movge	r3, #0
 800cc98:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc9a:	2400      	movs	r4, #0
 800cc9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cca0:	9316      	str	r3, [sp, #88]	@ 0x58
 800cca2:	46a0      	mov	r8, r4
 800cca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cca6:	9805      	ldr	r0, [sp, #20]
 800cca8:	6859      	ldr	r1, [r3, #4]
 800ccaa:	f002 fdc3 	bl	800f834 <_Balloc>
 800ccae:	4681      	mov	r9, r0
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	f43f aef4 	beq.w	800ca9e <_strtod_l+0x43e>
 800ccb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccb8:	691a      	ldr	r2, [r3, #16]
 800ccba:	3202      	adds	r2, #2
 800ccbc:	f103 010c 	add.w	r1, r3, #12
 800ccc0:	0092      	lsls	r2, r2, #2
 800ccc2:	300c      	adds	r0, #12
 800ccc4:	f001 fb99 	bl	800e3fa <memcpy>
 800ccc8:	ec4b ab10 	vmov	d0, sl, fp
 800cccc:	9805      	ldr	r0, [sp, #20]
 800ccce:	aa1c      	add	r2, sp, #112	@ 0x70
 800ccd0:	a91b      	add	r1, sp, #108	@ 0x6c
 800ccd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ccd6:	f003 f991 	bl	800fffc <__d2b>
 800ccda:	901a      	str	r0, [sp, #104]	@ 0x68
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	f43f aede 	beq.w	800ca9e <_strtod_l+0x43e>
 800cce2:	9805      	ldr	r0, [sp, #20]
 800cce4:	2101      	movs	r1, #1
 800cce6:	f002 fee3 	bl	800fab0 <__i2b>
 800ccea:	4680      	mov	r8, r0
 800ccec:	b948      	cbnz	r0, 800cd02 <_strtod_l+0x6a2>
 800ccee:	f04f 0800 	mov.w	r8, #0
 800ccf2:	e6d4      	b.n	800ca9e <_strtod_l+0x43e>
 800ccf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ccfc:	ea03 0a0a 	and.w	sl, r3, sl
 800cd00:	e7b0      	b.n	800cc64 <_strtod_l+0x604>
 800cd02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cd04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cd06:	2d00      	cmp	r5, #0
 800cd08:	bfab      	itete	ge
 800cd0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cd0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cd0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cd10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cd12:	bfac      	ite	ge
 800cd14:	18ef      	addge	r7, r5, r3
 800cd16:	1b5e      	sublt	r6, r3, r5
 800cd18:	9b08      	ldr	r3, [sp, #32]
 800cd1a:	1aed      	subs	r5, r5, r3
 800cd1c:	4415      	add	r5, r2
 800cd1e:	4b66      	ldr	r3, [pc, #408]	@ (800ceb8 <_strtod_l+0x858>)
 800cd20:	3d01      	subs	r5, #1
 800cd22:	429d      	cmp	r5, r3
 800cd24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cd28:	da50      	bge.n	800cdcc <_strtod_l+0x76c>
 800cd2a:	1b5b      	subs	r3, r3, r5
 800cd2c:	2b1f      	cmp	r3, #31
 800cd2e:	eba2 0203 	sub.w	r2, r2, r3
 800cd32:	f04f 0101 	mov.w	r1, #1
 800cd36:	dc3d      	bgt.n	800cdb4 <_strtod_l+0x754>
 800cd38:	fa01 f303 	lsl.w	r3, r1, r3
 800cd3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd3e:	2300      	movs	r3, #0
 800cd40:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd42:	18bd      	adds	r5, r7, r2
 800cd44:	9b08      	ldr	r3, [sp, #32]
 800cd46:	42af      	cmp	r7, r5
 800cd48:	4416      	add	r6, r2
 800cd4a:	441e      	add	r6, r3
 800cd4c:	463b      	mov	r3, r7
 800cd4e:	bfa8      	it	ge
 800cd50:	462b      	movge	r3, r5
 800cd52:	42b3      	cmp	r3, r6
 800cd54:	bfa8      	it	ge
 800cd56:	4633      	movge	r3, r6
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfc2      	ittt	gt
 800cd5c:	1aed      	subgt	r5, r5, r3
 800cd5e:	1af6      	subgt	r6, r6, r3
 800cd60:	1aff      	subgt	r7, r7, r3
 800cd62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	dd16      	ble.n	800cd96 <_strtod_l+0x736>
 800cd68:	4641      	mov	r1, r8
 800cd6a:	9805      	ldr	r0, [sp, #20]
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	f002 ff5f 	bl	800fc30 <__pow5mult>
 800cd72:	4680      	mov	r8, r0
 800cd74:	2800      	cmp	r0, #0
 800cd76:	d0ba      	beq.n	800ccee <_strtod_l+0x68e>
 800cd78:	4601      	mov	r1, r0
 800cd7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cd7c:	9805      	ldr	r0, [sp, #20]
 800cd7e:	f002 fead 	bl	800fadc <__multiply>
 800cd82:	900e      	str	r0, [sp, #56]	@ 0x38
 800cd84:	2800      	cmp	r0, #0
 800cd86:	f43f ae8a 	beq.w	800ca9e <_strtod_l+0x43e>
 800cd8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd8c:	9805      	ldr	r0, [sp, #20]
 800cd8e:	f002 fd91 	bl	800f8b4 <_Bfree>
 800cd92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd94:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd96:	2d00      	cmp	r5, #0
 800cd98:	dc1d      	bgt.n	800cdd6 <_strtod_l+0x776>
 800cd9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	dd23      	ble.n	800cde8 <_strtod_l+0x788>
 800cda0:	4649      	mov	r1, r9
 800cda2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cda4:	9805      	ldr	r0, [sp, #20]
 800cda6:	f002 ff43 	bl	800fc30 <__pow5mult>
 800cdaa:	4681      	mov	r9, r0
 800cdac:	b9e0      	cbnz	r0, 800cde8 <_strtod_l+0x788>
 800cdae:	f04f 0900 	mov.w	r9, #0
 800cdb2:	e674      	b.n	800ca9e <_strtod_l+0x43e>
 800cdb4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cdb8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cdbc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cdc0:	35e2      	adds	r5, #226	@ 0xe2
 800cdc2:	fa01 f305 	lsl.w	r3, r1, r5
 800cdc6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cdca:	e7ba      	b.n	800cd42 <_strtod_l+0x6e2>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cdd4:	e7b5      	b.n	800cd42 <_strtod_l+0x6e2>
 800cdd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdd8:	9805      	ldr	r0, [sp, #20]
 800cdda:	462a      	mov	r2, r5
 800cddc:	f002 ff82 	bl	800fce4 <__lshift>
 800cde0:	901a      	str	r0, [sp, #104]	@ 0x68
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d1d9      	bne.n	800cd9a <_strtod_l+0x73a>
 800cde6:	e65a      	b.n	800ca9e <_strtod_l+0x43e>
 800cde8:	2e00      	cmp	r6, #0
 800cdea:	dd07      	ble.n	800cdfc <_strtod_l+0x79c>
 800cdec:	4649      	mov	r1, r9
 800cdee:	9805      	ldr	r0, [sp, #20]
 800cdf0:	4632      	mov	r2, r6
 800cdf2:	f002 ff77 	bl	800fce4 <__lshift>
 800cdf6:	4681      	mov	r9, r0
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d0d8      	beq.n	800cdae <_strtod_l+0x74e>
 800cdfc:	2f00      	cmp	r7, #0
 800cdfe:	dd08      	ble.n	800ce12 <_strtod_l+0x7b2>
 800ce00:	4641      	mov	r1, r8
 800ce02:	9805      	ldr	r0, [sp, #20]
 800ce04:	463a      	mov	r2, r7
 800ce06:	f002 ff6d 	bl	800fce4 <__lshift>
 800ce0a:	4680      	mov	r8, r0
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f43f ae46 	beq.w	800ca9e <_strtod_l+0x43e>
 800ce12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce14:	9805      	ldr	r0, [sp, #20]
 800ce16:	464a      	mov	r2, r9
 800ce18:	f002 ffec 	bl	800fdf4 <__mdiff>
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	f43f ae3d 	beq.w	800ca9e <_strtod_l+0x43e>
 800ce24:	68c3      	ldr	r3, [r0, #12]
 800ce26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce28:	2300      	movs	r3, #0
 800ce2a:	60c3      	str	r3, [r0, #12]
 800ce2c:	4641      	mov	r1, r8
 800ce2e:	f002 ffc5 	bl	800fdbc <__mcmp>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	da46      	bge.n	800cec4 <_strtod_l+0x864>
 800ce36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce38:	ea53 030a 	orrs.w	r3, r3, sl
 800ce3c:	d16c      	bne.n	800cf18 <_strtod_l+0x8b8>
 800ce3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d168      	bne.n	800cf18 <_strtod_l+0x8b8>
 800ce46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce4a:	0d1b      	lsrs	r3, r3, #20
 800ce4c:	051b      	lsls	r3, r3, #20
 800ce4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce52:	d961      	bls.n	800cf18 <_strtod_l+0x8b8>
 800ce54:	6963      	ldr	r3, [r4, #20]
 800ce56:	b913      	cbnz	r3, 800ce5e <_strtod_l+0x7fe>
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	dd5c      	ble.n	800cf18 <_strtod_l+0x8b8>
 800ce5e:	4621      	mov	r1, r4
 800ce60:	2201      	movs	r2, #1
 800ce62:	9805      	ldr	r0, [sp, #20]
 800ce64:	f002 ff3e 	bl	800fce4 <__lshift>
 800ce68:	4641      	mov	r1, r8
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	f002 ffa6 	bl	800fdbc <__mcmp>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	dd51      	ble.n	800cf18 <_strtod_l+0x8b8>
 800ce74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce78:	9a08      	ldr	r2, [sp, #32]
 800ce7a:	0d1b      	lsrs	r3, r3, #20
 800ce7c:	051b      	lsls	r3, r3, #20
 800ce7e:	2a00      	cmp	r2, #0
 800ce80:	d06b      	beq.n	800cf5a <_strtod_l+0x8fa>
 800ce82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce86:	d868      	bhi.n	800cf5a <_strtod_l+0x8fa>
 800ce88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ce8c:	f67f ae9d 	bls.w	800cbca <_strtod_l+0x56a>
 800ce90:	4b0a      	ldr	r3, [pc, #40]	@ (800cebc <_strtod_l+0x85c>)
 800ce92:	4650      	mov	r0, sl
 800ce94:	4659      	mov	r1, fp
 800ce96:	2200      	movs	r2, #0
 800ce98:	f7f3 fbd6 	bl	8000648 <__aeabi_dmul>
 800ce9c:	4b08      	ldr	r3, [pc, #32]	@ (800cec0 <_strtod_l+0x860>)
 800ce9e:	400b      	ands	r3, r1
 800cea0:	4682      	mov	sl, r0
 800cea2:	468b      	mov	fp, r1
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f47f ae05 	bne.w	800cab4 <_strtod_l+0x454>
 800ceaa:	9a05      	ldr	r2, [sp, #20]
 800ceac:	2322      	movs	r3, #34	@ 0x22
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	e600      	b.n	800cab4 <_strtod_l+0x454>
 800ceb2:	bf00      	nop
 800ceb4:	08010d78 	.word	0x08010d78
 800ceb8:	fffffc02 	.word	0xfffffc02
 800cebc:	39500000 	.word	0x39500000
 800cec0:	7ff00000 	.word	0x7ff00000
 800cec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cec8:	d165      	bne.n	800cf96 <_strtod_l+0x936>
 800ceca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ced0:	b35a      	cbz	r2, 800cf2a <_strtod_l+0x8ca>
 800ced2:	4a9f      	ldr	r2, [pc, #636]	@ (800d150 <_strtod_l+0xaf0>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d12b      	bne.n	800cf30 <_strtod_l+0x8d0>
 800ced8:	9b08      	ldr	r3, [sp, #32]
 800ceda:	4651      	mov	r1, sl
 800cedc:	b303      	cbz	r3, 800cf20 <_strtod_l+0x8c0>
 800cede:	4b9d      	ldr	r3, [pc, #628]	@ (800d154 <_strtod_l+0xaf4>)
 800cee0:	465a      	mov	r2, fp
 800cee2:	4013      	ands	r3, r2
 800cee4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cee8:	f04f 32ff 	mov.w	r2, #4294967295
 800ceec:	d81b      	bhi.n	800cf26 <_strtod_l+0x8c6>
 800ceee:	0d1b      	lsrs	r3, r3, #20
 800cef0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cef4:	fa02 f303 	lsl.w	r3, r2, r3
 800cef8:	4299      	cmp	r1, r3
 800cefa:	d119      	bne.n	800cf30 <_strtod_l+0x8d0>
 800cefc:	4b96      	ldr	r3, [pc, #600]	@ (800d158 <_strtod_l+0xaf8>)
 800cefe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d102      	bne.n	800cf0a <_strtod_l+0x8aa>
 800cf04:	3101      	adds	r1, #1
 800cf06:	f43f adca 	beq.w	800ca9e <_strtod_l+0x43e>
 800cf0a:	4b92      	ldr	r3, [pc, #584]	@ (800d154 <_strtod_l+0xaf4>)
 800cf0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf0e:	401a      	ands	r2, r3
 800cf10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cf14:	f04f 0a00 	mov.w	sl, #0
 800cf18:	9b08      	ldr	r3, [sp, #32]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1b8      	bne.n	800ce90 <_strtod_l+0x830>
 800cf1e:	e5c9      	b.n	800cab4 <_strtod_l+0x454>
 800cf20:	f04f 33ff 	mov.w	r3, #4294967295
 800cf24:	e7e8      	b.n	800cef8 <_strtod_l+0x898>
 800cf26:	4613      	mov	r3, r2
 800cf28:	e7e6      	b.n	800cef8 <_strtod_l+0x898>
 800cf2a:	ea53 030a 	orrs.w	r3, r3, sl
 800cf2e:	d0a1      	beq.n	800ce74 <_strtod_l+0x814>
 800cf30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cf32:	b1db      	cbz	r3, 800cf6c <_strtod_l+0x90c>
 800cf34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf36:	4213      	tst	r3, r2
 800cf38:	d0ee      	beq.n	800cf18 <_strtod_l+0x8b8>
 800cf3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf3c:	9a08      	ldr	r2, [sp, #32]
 800cf3e:	4650      	mov	r0, sl
 800cf40:	4659      	mov	r1, fp
 800cf42:	b1bb      	cbz	r3, 800cf74 <_strtod_l+0x914>
 800cf44:	f7ff fb6c 	bl	800c620 <sulp>
 800cf48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf4c:	ec53 2b10 	vmov	r2, r3, d0
 800cf50:	f7f3 f9c4 	bl	80002dc <__adddf3>
 800cf54:	4682      	mov	sl, r0
 800cf56:	468b      	mov	fp, r1
 800cf58:	e7de      	b.n	800cf18 <_strtod_l+0x8b8>
 800cf5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cf5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf66:	f04f 3aff 	mov.w	sl, #4294967295
 800cf6a:	e7d5      	b.n	800cf18 <_strtod_l+0x8b8>
 800cf6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf6e:	ea13 0f0a 	tst.w	r3, sl
 800cf72:	e7e1      	b.n	800cf38 <_strtod_l+0x8d8>
 800cf74:	f7ff fb54 	bl	800c620 <sulp>
 800cf78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf7c:	ec53 2b10 	vmov	r2, r3, d0
 800cf80:	f7f3 f9aa 	bl	80002d8 <__aeabi_dsub>
 800cf84:	2200      	movs	r2, #0
 800cf86:	2300      	movs	r3, #0
 800cf88:	4682      	mov	sl, r0
 800cf8a:	468b      	mov	fp, r1
 800cf8c:	f7f3 fdc4 	bl	8000b18 <__aeabi_dcmpeq>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d0c1      	beq.n	800cf18 <_strtod_l+0x8b8>
 800cf94:	e619      	b.n	800cbca <_strtod_l+0x56a>
 800cf96:	4641      	mov	r1, r8
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f003 f887 	bl	80100ac <__ratio>
 800cf9e:	ec57 6b10 	vmov	r6, r7, d0
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	4639      	mov	r1, r7
 800cfac:	f7f3 fdc8 	bl	8000b40 <__aeabi_dcmple>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d06f      	beq.n	800d094 <_strtod_l+0xa34>
 800cfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d17a      	bne.n	800d0b0 <_strtod_l+0xa50>
 800cfba:	f1ba 0f00 	cmp.w	sl, #0
 800cfbe:	d158      	bne.n	800d072 <_strtod_l+0xa12>
 800cfc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d15a      	bne.n	800d080 <_strtod_l+0xa20>
 800cfca:	4b64      	ldr	r3, [pc, #400]	@ (800d15c <_strtod_l+0xafc>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	4630      	mov	r0, r6
 800cfd0:	4639      	mov	r1, r7
 800cfd2:	f7f3 fdab 	bl	8000b2c <__aeabi_dcmplt>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d159      	bne.n	800d08e <_strtod_l+0xa2e>
 800cfda:	4630      	mov	r0, r6
 800cfdc:	4639      	mov	r1, r7
 800cfde:	4b60      	ldr	r3, [pc, #384]	@ (800d160 <_strtod_l+0xb00>)
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f7f3 fb31 	bl	8000648 <__aeabi_dmul>
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460f      	mov	r7, r1
 800cfea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cfee:	9606      	str	r6, [sp, #24]
 800cff0:	9307      	str	r3, [sp, #28]
 800cff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cff6:	4d57      	ldr	r5, [pc, #348]	@ (800d154 <_strtod_l+0xaf4>)
 800cff8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cffe:	401d      	ands	r5, r3
 800d000:	4b58      	ldr	r3, [pc, #352]	@ (800d164 <_strtod_l+0xb04>)
 800d002:	429d      	cmp	r5, r3
 800d004:	f040 80b2 	bne.w	800d16c <_strtod_l+0xb0c>
 800d008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d00a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d00e:	ec4b ab10 	vmov	d0, sl, fp
 800d012:	f002 ff83 	bl	800ff1c <__ulp>
 800d016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d01a:	ec51 0b10 	vmov	r0, r1, d0
 800d01e:	f7f3 fb13 	bl	8000648 <__aeabi_dmul>
 800d022:	4652      	mov	r2, sl
 800d024:	465b      	mov	r3, fp
 800d026:	f7f3 f959 	bl	80002dc <__adddf3>
 800d02a:	460b      	mov	r3, r1
 800d02c:	4949      	ldr	r1, [pc, #292]	@ (800d154 <_strtod_l+0xaf4>)
 800d02e:	4a4e      	ldr	r2, [pc, #312]	@ (800d168 <_strtod_l+0xb08>)
 800d030:	4019      	ands	r1, r3
 800d032:	4291      	cmp	r1, r2
 800d034:	4682      	mov	sl, r0
 800d036:	d942      	bls.n	800d0be <_strtod_l+0xa5e>
 800d038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d03a:	4b47      	ldr	r3, [pc, #284]	@ (800d158 <_strtod_l+0xaf8>)
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d103      	bne.n	800d048 <_strtod_l+0x9e8>
 800d040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d042:	3301      	adds	r3, #1
 800d044:	f43f ad2b 	beq.w	800ca9e <_strtod_l+0x43e>
 800d048:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d158 <_strtod_l+0xaf8>
 800d04c:	f04f 3aff 	mov.w	sl, #4294967295
 800d050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d052:	9805      	ldr	r0, [sp, #20]
 800d054:	f002 fc2e 	bl	800f8b4 <_Bfree>
 800d058:	9805      	ldr	r0, [sp, #20]
 800d05a:	4649      	mov	r1, r9
 800d05c:	f002 fc2a 	bl	800f8b4 <_Bfree>
 800d060:	9805      	ldr	r0, [sp, #20]
 800d062:	4641      	mov	r1, r8
 800d064:	f002 fc26 	bl	800f8b4 <_Bfree>
 800d068:	9805      	ldr	r0, [sp, #20]
 800d06a:	4621      	mov	r1, r4
 800d06c:	f002 fc22 	bl	800f8b4 <_Bfree>
 800d070:	e618      	b.n	800cca4 <_strtod_l+0x644>
 800d072:	f1ba 0f01 	cmp.w	sl, #1
 800d076:	d103      	bne.n	800d080 <_strtod_l+0xa20>
 800d078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f43f ada5 	beq.w	800cbca <_strtod_l+0x56a>
 800d080:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d130 <_strtod_l+0xad0>
 800d084:	4f35      	ldr	r7, [pc, #212]	@ (800d15c <_strtod_l+0xafc>)
 800d086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d08a:	2600      	movs	r6, #0
 800d08c:	e7b1      	b.n	800cff2 <_strtod_l+0x992>
 800d08e:	4f34      	ldr	r7, [pc, #208]	@ (800d160 <_strtod_l+0xb00>)
 800d090:	2600      	movs	r6, #0
 800d092:	e7aa      	b.n	800cfea <_strtod_l+0x98a>
 800d094:	4b32      	ldr	r3, [pc, #200]	@ (800d160 <_strtod_l+0xb00>)
 800d096:	4630      	mov	r0, r6
 800d098:	4639      	mov	r1, r7
 800d09a:	2200      	movs	r2, #0
 800d09c:	f7f3 fad4 	bl	8000648 <__aeabi_dmul>
 800d0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d09f      	beq.n	800cfea <_strtod_l+0x98a>
 800d0aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d0ae:	e7a0      	b.n	800cff2 <_strtod_l+0x992>
 800d0b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d138 <_strtod_l+0xad8>
 800d0b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d0b8:	ec57 6b17 	vmov	r6, r7, d7
 800d0bc:	e799      	b.n	800cff2 <_strtod_l+0x992>
 800d0be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d0c2:	9b08      	ldr	r3, [sp, #32]
 800d0c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1c1      	bne.n	800d050 <_strtod_l+0x9f0>
 800d0cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0d0:	0d1b      	lsrs	r3, r3, #20
 800d0d2:	051b      	lsls	r3, r3, #20
 800d0d4:	429d      	cmp	r5, r3
 800d0d6:	d1bb      	bne.n	800d050 <_strtod_l+0x9f0>
 800d0d8:	4630      	mov	r0, r6
 800d0da:	4639      	mov	r1, r7
 800d0dc:	f7f3 fe14 	bl	8000d08 <__aeabi_d2lz>
 800d0e0:	f7f3 fa84 	bl	80005ec <__aeabi_l2d>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	4639      	mov	r1, r7
 800d0ec:	f7f3 f8f4 	bl	80002d8 <__aeabi_dsub>
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d0f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0fe:	ea46 060a 	orr.w	r6, r6, sl
 800d102:	431e      	orrs	r6, r3
 800d104:	d06f      	beq.n	800d1e6 <_strtod_l+0xb86>
 800d106:	a30e      	add	r3, pc, #56	@ (adr r3, 800d140 <_strtod_l+0xae0>)
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	f7f3 fd0e 	bl	8000b2c <__aeabi_dcmplt>
 800d110:	2800      	cmp	r0, #0
 800d112:	f47f accf 	bne.w	800cab4 <_strtod_l+0x454>
 800d116:	a30c      	add	r3, pc, #48	@ (adr r3, 800d148 <_strtod_l+0xae8>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d120:	f7f3 fd22 	bl	8000b68 <__aeabi_dcmpgt>
 800d124:	2800      	cmp	r0, #0
 800d126:	d093      	beq.n	800d050 <_strtod_l+0x9f0>
 800d128:	e4c4      	b.n	800cab4 <_strtod_l+0x454>
 800d12a:	bf00      	nop
 800d12c:	f3af 8000 	nop.w
 800d130:	00000000 	.word	0x00000000
 800d134:	bff00000 	.word	0xbff00000
 800d138:	00000000 	.word	0x00000000
 800d13c:	3ff00000 	.word	0x3ff00000
 800d140:	94a03595 	.word	0x94a03595
 800d144:	3fdfffff 	.word	0x3fdfffff
 800d148:	35afe535 	.word	0x35afe535
 800d14c:	3fe00000 	.word	0x3fe00000
 800d150:	000fffff 	.word	0x000fffff
 800d154:	7ff00000 	.word	0x7ff00000
 800d158:	7fefffff 	.word	0x7fefffff
 800d15c:	3ff00000 	.word	0x3ff00000
 800d160:	3fe00000 	.word	0x3fe00000
 800d164:	7fe00000 	.word	0x7fe00000
 800d168:	7c9fffff 	.word	0x7c9fffff
 800d16c:	9b08      	ldr	r3, [sp, #32]
 800d16e:	b323      	cbz	r3, 800d1ba <_strtod_l+0xb5a>
 800d170:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d174:	d821      	bhi.n	800d1ba <_strtod_l+0xb5a>
 800d176:	a328      	add	r3, pc, #160	@ (adr r3, 800d218 <_strtod_l+0xbb8>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f7f3 fcde 	bl	8000b40 <__aeabi_dcmple>
 800d184:	b1a0      	cbz	r0, 800d1b0 <_strtod_l+0xb50>
 800d186:	4639      	mov	r1, r7
 800d188:	4630      	mov	r0, r6
 800d18a:	f7f3 fd35 	bl	8000bf8 <__aeabi_d2uiz>
 800d18e:	2801      	cmp	r0, #1
 800d190:	bf38      	it	cc
 800d192:	2001      	movcc	r0, #1
 800d194:	f7f3 f9de 	bl	8000554 <__aeabi_ui2d>
 800d198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d19a:	4606      	mov	r6, r0
 800d19c:	460f      	mov	r7, r1
 800d19e:	b9fb      	cbnz	r3, 800d1e0 <_strtod_l+0xb80>
 800d1a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d1a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d1a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d1ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d1b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d1b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d1b6:	1b5b      	subs	r3, r3, r5
 800d1b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d1ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d1be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d1c2:	f002 feab 	bl	800ff1c <__ulp>
 800d1c6:	4650      	mov	r0, sl
 800d1c8:	ec53 2b10 	vmov	r2, r3, d0
 800d1cc:	4659      	mov	r1, fp
 800d1ce:	f7f3 fa3b 	bl	8000648 <__aeabi_dmul>
 800d1d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d1d6:	f7f3 f881 	bl	80002dc <__adddf3>
 800d1da:	4682      	mov	sl, r0
 800d1dc:	468b      	mov	fp, r1
 800d1de:	e770      	b.n	800d0c2 <_strtod_l+0xa62>
 800d1e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d1e4:	e7e0      	b.n	800d1a8 <_strtod_l+0xb48>
 800d1e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d220 <_strtod_l+0xbc0>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	f7f3 fc9e 	bl	8000b2c <__aeabi_dcmplt>
 800d1f0:	e798      	b.n	800d124 <_strtod_l+0xac4>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d1f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1fa:	6013      	str	r3, [r2, #0]
 800d1fc:	f7ff ba6d 	b.w	800c6da <_strtod_l+0x7a>
 800d200:	2a65      	cmp	r2, #101	@ 0x65
 800d202:	f43f ab66 	beq.w	800c8d2 <_strtod_l+0x272>
 800d206:	2a45      	cmp	r2, #69	@ 0x45
 800d208:	f43f ab63 	beq.w	800c8d2 <_strtod_l+0x272>
 800d20c:	2301      	movs	r3, #1
 800d20e:	f7ff bb9e 	b.w	800c94e <_strtod_l+0x2ee>
 800d212:	bf00      	nop
 800d214:	f3af 8000 	nop.w
 800d218:	ffc00000 	.word	0xffc00000
 800d21c:	41dfffff 	.word	0x41dfffff
 800d220:	94a03595 	.word	0x94a03595
 800d224:	3fcfffff 	.word	0x3fcfffff

0800d228 <_strtod_r>:
 800d228:	4b01      	ldr	r3, [pc, #4]	@ (800d230 <_strtod_r+0x8>)
 800d22a:	f7ff ba19 	b.w	800c660 <_strtod_l>
 800d22e:	bf00      	nop
 800d230:	20000038 	.word	0x20000038

0800d234 <_strtol_l.constprop.0>:
 800d234:	2b24      	cmp	r3, #36	@ 0x24
 800d236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d23a:	4686      	mov	lr, r0
 800d23c:	4690      	mov	r8, r2
 800d23e:	d801      	bhi.n	800d244 <_strtol_l.constprop.0+0x10>
 800d240:	2b01      	cmp	r3, #1
 800d242:	d106      	bne.n	800d252 <_strtol_l.constprop.0+0x1e>
 800d244:	f001 f8ac 	bl	800e3a0 <__errno>
 800d248:	2316      	movs	r3, #22
 800d24a:	6003      	str	r3, [r0, #0]
 800d24c:	2000      	movs	r0, #0
 800d24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d252:	4834      	ldr	r0, [pc, #208]	@ (800d324 <_strtol_l.constprop.0+0xf0>)
 800d254:	460d      	mov	r5, r1
 800d256:	462a      	mov	r2, r5
 800d258:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d25c:	5d06      	ldrb	r6, [r0, r4]
 800d25e:	f016 0608 	ands.w	r6, r6, #8
 800d262:	d1f8      	bne.n	800d256 <_strtol_l.constprop.0+0x22>
 800d264:	2c2d      	cmp	r4, #45	@ 0x2d
 800d266:	d12d      	bne.n	800d2c4 <_strtol_l.constprop.0+0x90>
 800d268:	782c      	ldrb	r4, [r5, #0]
 800d26a:	2601      	movs	r6, #1
 800d26c:	1c95      	adds	r5, r2, #2
 800d26e:	f033 0210 	bics.w	r2, r3, #16
 800d272:	d109      	bne.n	800d288 <_strtol_l.constprop.0+0x54>
 800d274:	2c30      	cmp	r4, #48	@ 0x30
 800d276:	d12a      	bne.n	800d2ce <_strtol_l.constprop.0+0x9a>
 800d278:	782a      	ldrb	r2, [r5, #0]
 800d27a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d27e:	2a58      	cmp	r2, #88	@ 0x58
 800d280:	d125      	bne.n	800d2ce <_strtol_l.constprop.0+0x9a>
 800d282:	786c      	ldrb	r4, [r5, #1]
 800d284:	2310      	movs	r3, #16
 800d286:	3502      	adds	r5, #2
 800d288:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d28c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d290:	2200      	movs	r2, #0
 800d292:	fbbc f9f3 	udiv	r9, ip, r3
 800d296:	4610      	mov	r0, r2
 800d298:	fb03 ca19 	mls	sl, r3, r9, ip
 800d29c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d2a0:	2f09      	cmp	r7, #9
 800d2a2:	d81b      	bhi.n	800d2dc <_strtol_l.constprop.0+0xa8>
 800d2a4:	463c      	mov	r4, r7
 800d2a6:	42a3      	cmp	r3, r4
 800d2a8:	dd27      	ble.n	800d2fa <_strtol_l.constprop.0+0xc6>
 800d2aa:	1c57      	adds	r7, r2, #1
 800d2ac:	d007      	beq.n	800d2be <_strtol_l.constprop.0+0x8a>
 800d2ae:	4581      	cmp	r9, r0
 800d2b0:	d320      	bcc.n	800d2f4 <_strtol_l.constprop.0+0xc0>
 800d2b2:	d101      	bne.n	800d2b8 <_strtol_l.constprop.0+0x84>
 800d2b4:	45a2      	cmp	sl, r4
 800d2b6:	db1d      	blt.n	800d2f4 <_strtol_l.constprop.0+0xc0>
 800d2b8:	fb00 4003 	mla	r0, r0, r3, r4
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2c2:	e7eb      	b.n	800d29c <_strtol_l.constprop.0+0x68>
 800d2c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d2c6:	bf04      	itt	eq
 800d2c8:	782c      	ldrbeq	r4, [r5, #0]
 800d2ca:	1c95      	addeq	r5, r2, #2
 800d2cc:	e7cf      	b.n	800d26e <_strtol_l.constprop.0+0x3a>
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1da      	bne.n	800d288 <_strtol_l.constprop.0+0x54>
 800d2d2:	2c30      	cmp	r4, #48	@ 0x30
 800d2d4:	bf0c      	ite	eq
 800d2d6:	2308      	moveq	r3, #8
 800d2d8:	230a      	movne	r3, #10
 800d2da:	e7d5      	b.n	800d288 <_strtol_l.constprop.0+0x54>
 800d2dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d2e0:	2f19      	cmp	r7, #25
 800d2e2:	d801      	bhi.n	800d2e8 <_strtol_l.constprop.0+0xb4>
 800d2e4:	3c37      	subs	r4, #55	@ 0x37
 800d2e6:	e7de      	b.n	800d2a6 <_strtol_l.constprop.0+0x72>
 800d2e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d2ec:	2f19      	cmp	r7, #25
 800d2ee:	d804      	bhi.n	800d2fa <_strtol_l.constprop.0+0xc6>
 800d2f0:	3c57      	subs	r4, #87	@ 0x57
 800d2f2:	e7d8      	b.n	800d2a6 <_strtol_l.constprop.0+0x72>
 800d2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f8:	e7e1      	b.n	800d2be <_strtol_l.constprop.0+0x8a>
 800d2fa:	1c53      	adds	r3, r2, #1
 800d2fc:	d108      	bne.n	800d310 <_strtol_l.constprop.0+0xdc>
 800d2fe:	2322      	movs	r3, #34	@ 0x22
 800d300:	f8ce 3000 	str.w	r3, [lr]
 800d304:	4660      	mov	r0, ip
 800d306:	f1b8 0f00 	cmp.w	r8, #0
 800d30a:	d0a0      	beq.n	800d24e <_strtol_l.constprop.0+0x1a>
 800d30c:	1e69      	subs	r1, r5, #1
 800d30e:	e006      	b.n	800d31e <_strtol_l.constprop.0+0xea>
 800d310:	b106      	cbz	r6, 800d314 <_strtol_l.constprop.0+0xe0>
 800d312:	4240      	negs	r0, r0
 800d314:	f1b8 0f00 	cmp.w	r8, #0
 800d318:	d099      	beq.n	800d24e <_strtol_l.constprop.0+0x1a>
 800d31a:	2a00      	cmp	r2, #0
 800d31c:	d1f6      	bne.n	800d30c <_strtol_l.constprop.0+0xd8>
 800d31e:	f8c8 1000 	str.w	r1, [r8]
 800d322:	e794      	b.n	800d24e <_strtol_l.constprop.0+0x1a>
 800d324:	08010da1 	.word	0x08010da1

0800d328 <_strtol_r>:
 800d328:	f7ff bf84 	b.w	800d234 <_strtol_l.constprop.0>

0800d32c <__cvt>:
 800d32c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d330:	ec57 6b10 	vmov	r6, r7, d0
 800d334:	2f00      	cmp	r7, #0
 800d336:	460c      	mov	r4, r1
 800d338:	4619      	mov	r1, r3
 800d33a:	463b      	mov	r3, r7
 800d33c:	bfbb      	ittet	lt
 800d33e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d342:	461f      	movlt	r7, r3
 800d344:	2300      	movge	r3, #0
 800d346:	232d      	movlt	r3, #45	@ 0x2d
 800d348:	700b      	strb	r3, [r1, #0]
 800d34a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d34c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d350:	4691      	mov	r9, r2
 800d352:	f023 0820 	bic.w	r8, r3, #32
 800d356:	bfbc      	itt	lt
 800d358:	4632      	movlt	r2, r6
 800d35a:	4616      	movlt	r6, r2
 800d35c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d360:	d005      	beq.n	800d36e <__cvt+0x42>
 800d362:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d366:	d100      	bne.n	800d36a <__cvt+0x3e>
 800d368:	3401      	adds	r4, #1
 800d36a:	2102      	movs	r1, #2
 800d36c:	e000      	b.n	800d370 <__cvt+0x44>
 800d36e:	2103      	movs	r1, #3
 800d370:	ab03      	add	r3, sp, #12
 800d372:	9301      	str	r3, [sp, #4]
 800d374:	ab02      	add	r3, sp, #8
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	ec47 6b10 	vmov	d0, r6, r7
 800d37c:	4653      	mov	r3, sl
 800d37e:	4622      	mov	r2, r4
 800d380:	f001 f8fe 	bl	800e580 <_dtoa_r>
 800d384:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d388:	4605      	mov	r5, r0
 800d38a:	d119      	bne.n	800d3c0 <__cvt+0x94>
 800d38c:	f019 0f01 	tst.w	r9, #1
 800d390:	d00e      	beq.n	800d3b0 <__cvt+0x84>
 800d392:	eb00 0904 	add.w	r9, r0, r4
 800d396:	2200      	movs	r2, #0
 800d398:	2300      	movs	r3, #0
 800d39a:	4630      	mov	r0, r6
 800d39c:	4639      	mov	r1, r7
 800d39e:	f7f3 fbbb 	bl	8000b18 <__aeabi_dcmpeq>
 800d3a2:	b108      	cbz	r0, 800d3a8 <__cvt+0x7c>
 800d3a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d3a8:	2230      	movs	r2, #48	@ 0x30
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	454b      	cmp	r3, r9
 800d3ae:	d31e      	bcc.n	800d3ee <__cvt+0xc2>
 800d3b0:	9b03      	ldr	r3, [sp, #12]
 800d3b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3b4:	1b5b      	subs	r3, r3, r5
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	6013      	str	r3, [r2, #0]
 800d3ba:	b004      	add	sp, #16
 800d3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d3c4:	eb00 0904 	add.w	r9, r0, r4
 800d3c8:	d1e5      	bne.n	800d396 <__cvt+0x6a>
 800d3ca:	7803      	ldrb	r3, [r0, #0]
 800d3cc:	2b30      	cmp	r3, #48	@ 0x30
 800d3ce:	d10a      	bne.n	800d3e6 <__cvt+0xba>
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	4639      	mov	r1, r7
 800d3d8:	f7f3 fb9e 	bl	8000b18 <__aeabi_dcmpeq>
 800d3dc:	b918      	cbnz	r0, 800d3e6 <__cvt+0xba>
 800d3de:	f1c4 0401 	rsb	r4, r4, #1
 800d3e2:	f8ca 4000 	str.w	r4, [sl]
 800d3e6:	f8da 3000 	ldr.w	r3, [sl]
 800d3ea:	4499      	add	r9, r3
 800d3ec:	e7d3      	b.n	800d396 <__cvt+0x6a>
 800d3ee:	1c59      	adds	r1, r3, #1
 800d3f0:	9103      	str	r1, [sp, #12]
 800d3f2:	701a      	strb	r2, [r3, #0]
 800d3f4:	e7d9      	b.n	800d3aa <__cvt+0x7e>

0800d3f6 <__exponent>:
 800d3f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3f8:	2900      	cmp	r1, #0
 800d3fa:	bfba      	itte	lt
 800d3fc:	4249      	neglt	r1, r1
 800d3fe:	232d      	movlt	r3, #45	@ 0x2d
 800d400:	232b      	movge	r3, #43	@ 0x2b
 800d402:	2909      	cmp	r1, #9
 800d404:	7002      	strb	r2, [r0, #0]
 800d406:	7043      	strb	r3, [r0, #1]
 800d408:	dd29      	ble.n	800d45e <__exponent+0x68>
 800d40a:	f10d 0307 	add.w	r3, sp, #7
 800d40e:	461d      	mov	r5, r3
 800d410:	270a      	movs	r7, #10
 800d412:	461a      	mov	r2, r3
 800d414:	fbb1 f6f7 	udiv	r6, r1, r7
 800d418:	fb07 1416 	mls	r4, r7, r6, r1
 800d41c:	3430      	adds	r4, #48	@ 0x30
 800d41e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d422:	460c      	mov	r4, r1
 800d424:	2c63      	cmp	r4, #99	@ 0x63
 800d426:	f103 33ff 	add.w	r3, r3, #4294967295
 800d42a:	4631      	mov	r1, r6
 800d42c:	dcf1      	bgt.n	800d412 <__exponent+0x1c>
 800d42e:	3130      	adds	r1, #48	@ 0x30
 800d430:	1e94      	subs	r4, r2, #2
 800d432:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d436:	1c41      	adds	r1, r0, #1
 800d438:	4623      	mov	r3, r4
 800d43a:	42ab      	cmp	r3, r5
 800d43c:	d30a      	bcc.n	800d454 <__exponent+0x5e>
 800d43e:	f10d 0309 	add.w	r3, sp, #9
 800d442:	1a9b      	subs	r3, r3, r2
 800d444:	42ac      	cmp	r4, r5
 800d446:	bf88      	it	hi
 800d448:	2300      	movhi	r3, #0
 800d44a:	3302      	adds	r3, #2
 800d44c:	4403      	add	r3, r0
 800d44e:	1a18      	subs	r0, r3, r0
 800d450:	b003      	add	sp, #12
 800d452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d454:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d458:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d45c:	e7ed      	b.n	800d43a <__exponent+0x44>
 800d45e:	2330      	movs	r3, #48	@ 0x30
 800d460:	3130      	adds	r1, #48	@ 0x30
 800d462:	7083      	strb	r3, [r0, #2]
 800d464:	70c1      	strb	r1, [r0, #3]
 800d466:	1d03      	adds	r3, r0, #4
 800d468:	e7f1      	b.n	800d44e <__exponent+0x58>
	...

0800d46c <_printf_float>:
 800d46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d470:	b08d      	sub	sp, #52	@ 0x34
 800d472:	460c      	mov	r4, r1
 800d474:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d478:	4616      	mov	r6, r2
 800d47a:	461f      	mov	r7, r3
 800d47c:	4605      	mov	r5, r0
 800d47e:	f000 ff35 	bl	800e2ec <_localeconv_r>
 800d482:	6803      	ldr	r3, [r0, #0]
 800d484:	9304      	str	r3, [sp, #16]
 800d486:	4618      	mov	r0, r3
 800d488:	f7f2 ff1a 	bl	80002c0 <strlen>
 800d48c:	2300      	movs	r3, #0
 800d48e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d490:	f8d8 3000 	ldr.w	r3, [r8]
 800d494:	9005      	str	r0, [sp, #20]
 800d496:	3307      	adds	r3, #7
 800d498:	f023 0307 	bic.w	r3, r3, #7
 800d49c:	f103 0208 	add.w	r2, r3, #8
 800d4a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d4a4:	f8d4 b000 	ldr.w	fp, [r4]
 800d4a8:	f8c8 2000 	str.w	r2, [r8]
 800d4ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d4b4:	9307      	str	r3, [sp, #28]
 800d4b6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d4ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d4be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4c2:	4b9c      	ldr	r3, [pc, #624]	@ (800d734 <_printf_float+0x2c8>)
 800d4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c8:	f7f3 fb58 	bl	8000b7c <__aeabi_dcmpun>
 800d4cc:	bb70      	cbnz	r0, 800d52c <_printf_float+0xc0>
 800d4ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4d2:	4b98      	ldr	r3, [pc, #608]	@ (800d734 <_printf_float+0x2c8>)
 800d4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d8:	f7f3 fb32 	bl	8000b40 <__aeabi_dcmple>
 800d4dc:	bb30      	cbnz	r0, 800d52c <_printf_float+0xc0>
 800d4de:	2200      	movs	r2, #0
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	4649      	mov	r1, r9
 800d4e6:	f7f3 fb21 	bl	8000b2c <__aeabi_dcmplt>
 800d4ea:	b110      	cbz	r0, 800d4f2 <_printf_float+0x86>
 800d4ec:	232d      	movs	r3, #45	@ 0x2d
 800d4ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4f2:	4a91      	ldr	r2, [pc, #580]	@ (800d738 <_printf_float+0x2cc>)
 800d4f4:	4b91      	ldr	r3, [pc, #580]	@ (800d73c <_printf_float+0x2d0>)
 800d4f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d4fa:	bf94      	ite	ls
 800d4fc:	4690      	movls	r8, r2
 800d4fe:	4698      	movhi	r8, r3
 800d500:	2303      	movs	r3, #3
 800d502:	6123      	str	r3, [r4, #16]
 800d504:	f02b 0304 	bic.w	r3, fp, #4
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	f04f 0900 	mov.w	r9, #0
 800d50e:	9700      	str	r7, [sp, #0]
 800d510:	4633      	mov	r3, r6
 800d512:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d514:	4621      	mov	r1, r4
 800d516:	4628      	mov	r0, r5
 800d518:	f000 f9d2 	bl	800d8c0 <_printf_common>
 800d51c:	3001      	adds	r0, #1
 800d51e:	f040 808d 	bne.w	800d63c <_printf_float+0x1d0>
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	b00d      	add	sp, #52	@ 0x34
 800d528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52c:	4642      	mov	r2, r8
 800d52e:	464b      	mov	r3, r9
 800d530:	4640      	mov	r0, r8
 800d532:	4649      	mov	r1, r9
 800d534:	f7f3 fb22 	bl	8000b7c <__aeabi_dcmpun>
 800d538:	b140      	cbz	r0, 800d54c <_printf_float+0xe0>
 800d53a:	464b      	mov	r3, r9
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	bfbc      	itt	lt
 800d540:	232d      	movlt	r3, #45	@ 0x2d
 800d542:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d546:	4a7e      	ldr	r2, [pc, #504]	@ (800d740 <_printf_float+0x2d4>)
 800d548:	4b7e      	ldr	r3, [pc, #504]	@ (800d744 <_printf_float+0x2d8>)
 800d54a:	e7d4      	b.n	800d4f6 <_printf_float+0x8a>
 800d54c:	6863      	ldr	r3, [r4, #4]
 800d54e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d552:	9206      	str	r2, [sp, #24]
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	d13b      	bne.n	800d5d0 <_printf_float+0x164>
 800d558:	2306      	movs	r3, #6
 800d55a:	6063      	str	r3, [r4, #4]
 800d55c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d560:	2300      	movs	r3, #0
 800d562:	6022      	str	r2, [r4, #0]
 800d564:	9303      	str	r3, [sp, #12]
 800d566:	ab0a      	add	r3, sp, #40	@ 0x28
 800d568:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d56c:	ab09      	add	r3, sp, #36	@ 0x24
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	6861      	ldr	r1, [r4, #4]
 800d572:	ec49 8b10 	vmov	d0, r8, r9
 800d576:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d57a:	4628      	mov	r0, r5
 800d57c:	f7ff fed6 	bl	800d32c <__cvt>
 800d580:	9b06      	ldr	r3, [sp, #24]
 800d582:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d584:	2b47      	cmp	r3, #71	@ 0x47
 800d586:	4680      	mov	r8, r0
 800d588:	d129      	bne.n	800d5de <_printf_float+0x172>
 800d58a:	1cc8      	adds	r0, r1, #3
 800d58c:	db02      	blt.n	800d594 <_printf_float+0x128>
 800d58e:	6863      	ldr	r3, [r4, #4]
 800d590:	4299      	cmp	r1, r3
 800d592:	dd41      	ble.n	800d618 <_printf_float+0x1ac>
 800d594:	f1aa 0a02 	sub.w	sl, sl, #2
 800d598:	fa5f fa8a 	uxtb.w	sl, sl
 800d59c:	3901      	subs	r1, #1
 800d59e:	4652      	mov	r2, sl
 800d5a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d5a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d5a6:	f7ff ff26 	bl	800d3f6 <__exponent>
 800d5aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5ac:	1813      	adds	r3, r2, r0
 800d5ae:	2a01      	cmp	r2, #1
 800d5b0:	4681      	mov	r9, r0
 800d5b2:	6123      	str	r3, [r4, #16]
 800d5b4:	dc02      	bgt.n	800d5bc <_printf_float+0x150>
 800d5b6:	6822      	ldr	r2, [r4, #0]
 800d5b8:	07d2      	lsls	r2, r2, #31
 800d5ba:	d501      	bpl.n	800d5c0 <_printf_float+0x154>
 800d5bc:	3301      	adds	r3, #1
 800d5be:	6123      	str	r3, [r4, #16]
 800d5c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d0a2      	beq.n	800d50e <_printf_float+0xa2>
 800d5c8:	232d      	movs	r3, #45	@ 0x2d
 800d5ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ce:	e79e      	b.n	800d50e <_printf_float+0xa2>
 800d5d0:	9a06      	ldr	r2, [sp, #24]
 800d5d2:	2a47      	cmp	r2, #71	@ 0x47
 800d5d4:	d1c2      	bne.n	800d55c <_printf_float+0xf0>
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1c0      	bne.n	800d55c <_printf_float+0xf0>
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e7bd      	b.n	800d55a <_printf_float+0xee>
 800d5de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d5e2:	d9db      	bls.n	800d59c <_printf_float+0x130>
 800d5e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d5e8:	d118      	bne.n	800d61c <_printf_float+0x1b0>
 800d5ea:	2900      	cmp	r1, #0
 800d5ec:	6863      	ldr	r3, [r4, #4]
 800d5ee:	dd0b      	ble.n	800d608 <_printf_float+0x19c>
 800d5f0:	6121      	str	r1, [r4, #16]
 800d5f2:	b913      	cbnz	r3, 800d5fa <_printf_float+0x18e>
 800d5f4:	6822      	ldr	r2, [r4, #0]
 800d5f6:	07d0      	lsls	r0, r2, #31
 800d5f8:	d502      	bpl.n	800d600 <_printf_float+0x194>
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	440b      	add	r3, r1
 800d5fe:	6123      	str	r3, [r4, #16]
 800d600:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d602:	f04f 0900 	mov.w	r9, #0
 800d606:	e7db      	b.n	800d5c0 <_printf_float+0x154>
 800d608:	b913      	cbnz	r3, 800d610 <_printf_float+0x1a4>
 800d60a:	6822      	ldr	r2, [r4, #0]
 800d60c:	07d2      	lsls	r2, r2, #31
 800d60e:	d501      	bpl.n	800d614 <_printf_float+0x1a8>
 800d610:	3302      	adds	r3, #2
 800d612:	e7f4      	b.n	800d5fe <_printf_float+0x192>
 800d614:	2301      	movs	r3, #1
 800d616:	e7f2      	b.n	800d5fe <_printf_float+0x192>
 800d618:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d61c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d61e:	4299      	cmp	r1, r3
 800d620:	db05      	blt.n	800d62e <_printf_float+0x1c2>
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	6121      	str	r1, [r4, #16]
 800d626:	07d8      	lsls	r0, r3, #31
 800d628:	d5ea      	bpl.n	800d600 <_printf_float+0x194>
 800d62a:	1c4b      	adds	r3, r1, #1
 800d62c:	e7e7      	b.n	800d5fe <_printf_float+0x192>
 800d62e:	2900      	cmp	r1, #0
 800d630:	bfd4      	ite	le
 800d632:	f1c1 0202 	rsble	r2, r1, #2
 800d636:	2201      	movgt	r2, #1
 800d638:	4413      	add	r3, r2
 800d63a:	e7e0      	b.n	800d5fe <_printf_float+0x192>
 800d63c:	6823      	ldr	r3, [r4, #0]
 800d63e:	055a      	lsls	r2, r3, #21
 800d640:	d407      	bmi.n	800d652 <_printf_float+0x1e6>
 800d642:	6923      	ldr	r3, [r4, #16]
 800d644:	4642      	mov	r2, r8
 800d646:	4631      	mov	r1, r6
 800d648:	4628      	mov	r0, r5
 800d64a:	47b8      	blx	r7
 800d64c:	3001      	adds	r0, #1
 800d64e:	d12b      	bne.n	800d6a8 <_printf_float+0x23c>
 800d650:	e767      	b.n	800d522 <_printf_float+0xb6>
 800d652:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d656:	f240 80dd 	bls.w	800d814 <_printf_float+0x3a8>
 800d65a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d65e:	2200      	movs	r2, #0
 800d660:	2300      	movs	r3, #0
 800d662:	f7f3 fa59 	bl	8000b18 <__aeabi_dcmpeq>
 800d666:	2800      	cmp	r0, #0
 800d668:	d033      	beq.n	800d6d2 <_printf_float+0x266>
 800d66a:	4a37      	ldr	r2, [pc, #220]	@ (800d748 <_printf_float+0x2dc>)
 800d66c:	2301      	movs	r3, #1
 800d66e:	4631      	mov	r1, r6
 800d670:	4628      	mov	r0, r5
 800d672:	47b8      	blx	r7
 800d674:	3001      	adds	r0, #1
 800d676:	f43f af54 	beq.w	800d522 <_printf_float+0xb6>
 800d67a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d67e:	4543      	cmp	r3, r8
 800d680:	db02      	blt.n	800d688 <_printf_float+0x21c>
 800d682:	6823      	ldr	r3, [r4, #0]
 800d684:	07d8      	lsls	r0, r3, #31
 800d686:	d50f      	bpl.n	800d6a8 <_printf_float+0x23c>
 800d688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d68c:	4631      	mov	r1, r6
 800d68e:	4628      	mov	r0, r5
 800d690:	47b8      	blx	r7
 800d692:	3001      	adds	r0, #1
 800d694:	f43f af45 	beq.w	800d522 <_printf_float+0xb6>
 800d698:	f04f 0900 	mov.w	r9, #0
 800d69c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d6a0:	f104 0a1a 	add.w	sl, r4, #26
 800d6a4:	45c8      	cmp	r8, r9
 800d6a6:	dc09      	bgt.n	800d6bc <_printf_float+0x250>
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	079b      	lsls	r3, r3, #30
 800d6ac:	f100 8103 	bmi.w	800d8b6 <_printf_float+0x44a>
 800d6b0:	68e0      	ldr	r0, [r4, #12]
 800d6b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6b4:	4298      	cmp	r0, r3
 800d6b6:	bfb8      	it	lt
 800d6b8:	4618      	movlt	r0, r3
 800d6ba:	e734      	b.n	800d526 <_printf_float+0xba>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	4652      	mov	r2, sl
 800d6c0:	4631      	mov	r1, r6
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	47b8      	blx	r7
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	f43f af2b 	beq.w	800d522 <_printf_float+0xb6>
 800d6cc:	f109 0901 	add.w	r9, r9, #1
 800d6d0:	e7e8      	b.n	800d6a4 <_printf_float+0x238>
 800d6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	dc39      	bgt.n	800d74c <_printf_float+0x2e0>
 800d6d8:	4a1b      	ldr	r2, [pc, #108]	@ (800d748 <_printf_float+0x2dc>)
 800d6da:	2301      	movs	r3, #1
 800d6dc:	4631      	mov	r1, r6
 800d6de:	4628      	mov	r0, r5
 800d6e0:	47b8      	blx	r7
 800d6e2:	3001      	adds	r0, #1
 800d6e4:	f43f af1d 	beq.w	800d522 <_printf_float+0xb6>
 800d6e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d6ec:	ea59 0303 	orrs.w	r3, r9, r3
 800d6f0:	d102      	bne.n	800d6f8 <_printf_float+0x28c>
 800d6f2:	6823      	ldr	r3, [r4, #0]
 800d6f4:	07d9      	lsls	r1, r3, #31
 800d6f6:	d5d7      	bpl.n	800d6a8 <_printf_float+0x23c>
 800d6f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6fc:	4631      	mov	r1, r6
 800d6fe:	4628      	mov	r0, r5
 800d700:	47b8      	blx	r7
 800d702:	3001      	adds	r0, #1
 800d704:	f43f af0d 	beq.w	800d522 <_printf_float+0xb6>
 800d708:	f04f 0a00 	mov.w	sl, #0
 800d70c:	f104 0b1a 	add.w	fp, r4, #26
 800d710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d712:	425b      	negs	r3, r3
 800d714:	4553      	cmp	r3, sl
 800d716:	dc01      	bgt.n	800d71c <_printf_float+0x2b0>
 800d718:	464b      	mov	r3, r9
 800d71a:	e793      	b.n	800d644 <_printf_float+0x1d8>
 800d71c:	2301      	movs	r3, #1
 800d71e:	465a      	mov	r2, fp
 800d720:	4631      	mov	r1, r6
 800d722:	4628      	mov	r0, r5
 800d724:	47b8      	blx	r7
 800d726:	3001      	adds	r0, #1
 800d728:	f43f aefb 	beq.w	800d522 <_printf_float+0xb6>
 800d72c:	f10a 0a01 	add.w	sl, sl, #1
 800d730:	e7ee      	b.n	800d710 <_printf_float+0x2a4>
 800d732:	bf00      	nop
 800d734:	7fefffff 	.word	0x7fefffff
 800d738:	08010ea1 	.word	0x08010ea1
 800d73c:	08010ea5 	.word	0x08010ea5
 800d740:	08010ea9 	.word	0x08010ea9
 800d744:	08010ead 	.word	0x08010ead
 800d748:	08010eb1 	.word	0x08010eb1
 800d74c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d74e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d752:	4553      	cmp	r3, sl
 800d754:	bfa8      	it	ge
 800d756:	4653      	movge	r3, sl
 800d758:	2b00      	cmp	r3, #0
 800d75a:	4699      	mov	r9, r3
 800d75c:	dc36      	bgt.n	800d7cc <_printf_float+0x360>
 800d75e:	f04f 0b00 	mov.w	fp, #0
 800d762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d766:	f104 021a 	add.w	r2, r4, #26
 800d76a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d76c:	9306      	str	r3, [sp, #24]
 800d76e:	eba3 0309 	sub.w	r3, r3, r9
 800d772:	455b      	cmp	r3, fp
 800d774:	dc31      	bgt.n	800d7da <_printf_float+0x36e>
 800d776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d778:	459a      	cmp	sl, r3
 800d77a:	dc3a      	bgt.n	800d7f2 <_printf_float+0x386>
 800d77c:	6823      	ldr	r3, [r4, #0]
 800d77e:	07da      	lsls	r2, r3, #31
 800d780:	d437      	bmi.n	800d7f2 <_printf_float+0x386>
 800d782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d784:	ebaa 0903 	sub.w	r9, sl, r3
 800d788:	9b06      	ldr	r3, [sp, #24]
 800d78a:	ebaa 0303 	sub.w	r3, sl, r3
 800d78e:	4599      	cmp	r9, r3
 800d790:	bfa8      	it	ge
 800d792:	4699      	movge	r9, r3
 800d794:	f1b9 0f00 	cmp.w	r9, #0
 800d798:	dc33      	bgt.n	800d802 <_printf_float+0x396>
 800d79a:	f04f 0800 	mov.w	r8, #0
 800d79e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7a2:	f104 0b1a 	add.w	fp, r4, #26
 800d7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7a8:	ebaa 0303 	sub.w	r3, sl, r3
 800d7ac:	eba3 0309 	sub.w	r3, r3, r9
 800d7b0:	4543      	cmp	r3, r8
 800d7b2:	f77f af79 	ble.w	800d6a8 <_printf_float+0x23c>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	465a      	mov	r2, fp
 800d7ba:	4631      	mov	r1, r6
 800d7bc:	4628      	mov	r0, r5
 800d7be:	47b8      	blx	r7
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	f43f aeae 	beq.w	800d522 <_printf_float+0xb6>
 800d7c6:	f108 0801 	add.w	r8, r8, #1
 800d7ca:	e7ec      	b.n	800d7a6 <_printf_float+0x33a>
 800d7cc:	4642      	mov	r2, r8
 800d7ce:	4631      	mov	r1, r6
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	47b8      	blx	r7
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	d1c2      	bne.n	800d75e <_printf_float+0x2f2>
 800d7d8:	e6a3      	b.n	800d522 <_printf_float+0xb6>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	4631      	mov	r1, r6
 800d7de:	4628      	mov	r0, r5
 800d7e0:	9206      	str	r2, [sp, #24]
 800d7e2:	47b8      	blx	r7
 800d7e4:	3001      	adds	r0, #1
 800d7e6:	f43f ae9c 	beq.w	800d522 <_printf_float+0xb6>
 800d7ea:	9a06      	ldr	r2, [sp, #24]
 800d7ec:	f10b 0b01 	add.w	fp, fp, #1
 800d7f0:	e7bb      	b.n	800d76a <_printf_float+0x2fe>
 800d7f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	47b8      	blx	r7
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	d1c0      	bne.n	800d782 <_printf_float+0x316>
 800d800:	e68f      	b.n	800d522 <_printf_float+0xb6>
 800d802:	9a06      	ldr	r2, [sp, #24]
 800d804:	464b      	mov	r3, r9
 800d806:	4442      	add	r2, r8
 800d808:	4631      	mov	r1, r6
 800d80a:	4628      	mov	r0, r5
 800d80c:	47b8      	blx	r7
 800d80e:	3001      	adds	r0, #1
 800d810:	d1c3      	bne.n	800d79a <_printf_float+0x32e>
 800d812:	e686      	b.n	800d522 <_printf_float+0xb6>
 800d814:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d818:	f1ba 0f01 	cmp.w	sl, #1
 800d81c:	dc01      	bgt.n	800d822 <_printf_float+0x3b6>
 800d81e:	07db      	lsls	r3, r3, #31
 800d820:	d536      	bpl.n	800d890 <_printf_float+0x424>
 800d822:	2301      	movs	r3, #1
 800d824:	4642      	mov	r2, r8
 800d826:	4631      	mov	r1, r6
 800d828:	4628      	mov	r0, r5
 800d82a:	47b8      	blx	r7
 800d82c:	3001      	adds	r0, #1
 800d82e:	f43f ae78 	beq.w	800d522 <_printf_float+0xb6>
 800d832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d836:	4631      	mov	r1, r6
 800d838:	4628      	mov	r0, r5
 800d83a:	47b8      	blx	r7
 800d83c:	3001      	adds	r0, #1
 800d83e:	f43f ae70 	beq.w	800d522 <_printf_float+0xb6>
 800d842:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d846:	2200      	movs	r2, #0
 800d848:	2300      	movs	r3, #0
 800d84a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d84e:	f7f3 f963 	bl	8000b18 <__aeabi_dcmpeq>
 800d852:	b9c0      	cbnz	r0, 800d886 <_printf_float+0x41a>
 800d854:	4653      	mov	r3, sl
 800d856:	f108 0201 	add.w	r2, r8, #1
 800d85a:	4631      	mov	r1, r6
 800d85c:	4628      	mov	r0, r5
 800d85e:	47b8      	blx	r7
 800d860:	3001      	adds	r0, #1
 800d862:	d10c      	bne.n	800d87e <_printf_float+0x412>
 800d864:	e65d      	b.n	800d522 <_printf_float+0xb6>
 800d866:	2301      	movs	r3, #1
 800d868:	465a      	mov	r2, fp
 800d86a:	4631      	mov	r1, r6
 800d86c:	4628      	mov	r0, r5
 800d86e:	47b8      	blx	r7
 800d870:	3001      	adds	r0, #1
 800d872:	f43f ae56 	beq.w	800d522 <_printf_float+0xb6>
 800d876:	f108 0801 	add.w	r8, r8, #1
 800d87a:	45d0      	cmp	r8, sl
 800d87c:	dbf3      	blt.n	800d866 <_printf_float+0x3fa>
 800d87e:	464b      	mov	r3, r9
 800d880:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d884:	e6df      	b.n	800d646 <_printf_float+0x1da>
 800d886:	f04f 0800 	mov.w	r8, #0
 800d88a:	f104 0b1a 	add.w	fp, r4, #26
 800d88e:	e7f4      	b.n	800d87a <_printf_float+0x40e>
 800d890:	2301      	movs	r3, #1
 800d892:	4642      	mov	r2, r8
 800d894:	e7e1      	b.n	800d85a <_printf_float+0x3ee>
 800d896:	2301      	movs	r3, #1
 800d898:	464a      	mov	r2, r9
 800d89a:	4631      	mov	r1, r6
 800d89c:	4628      	mov	r0, r5
 800d89e:	47b8      	blx	r7
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	f43f ae3e 	beq.w	800d522 <_printf_float+0xb6>
 800d8a6:	f108 0801 	add.w	r8, r8, #1
 800d8aa:	68e3      	ldr	r3, [r4, #12]
 800d8ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d8ae:	1a5b      	subs	r3, r3, r1
 800d8b0:	4543      	cmp	r3, r8
 800d8b2:	dcf0      	bgt.n	800d896 <_printf_float+0x42a>
 800d8b4:	e6fc      	b.n	800d6b0 <_printf_float+0x244>
 800d8b6:	f04f 0800 	mov.w	r8, #0
 800d8ba:	f104 0919 	add.w	r9, r4, #25
 800d8be:	e7f4      	b.n	800d8aa <_printf_float+0x43e>

0800d8c0 <_printf_common>:
 800d8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c4:	4616      	mov	r6, r2
 800d8c6:	4698      	mov	r8, r3
 800d8c8:	688a      	ldr	r2, [r1, #8]
 800d8ca:	690b      	ldr	r3, [r1, #16]
 800d8cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	bfb8      	it	lt
 800d8d4:	4613      	movlt	r3, r2
 800d8d6:	6033      	str	r3, [r6, #0]
 800d8d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8dc:	4607      	mov	r7, r0
 800d8de:	460c      	mov	r4, r1
 800d8e0:	b10a      	cbz	r2, 800d8e6 <_printf_common+0x26>
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	6033      	str	r3, [r6, #0]
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	0699      	lsls	r1, r3, #26
 800d8ea:	bf42      	ittt	mi
 800d8ec:	6833      	ldrmi	r3, [r6, #0]
 800d8ee:	3302      	addmi	r3, #2
 800d8f0:	6033      	strmi	r3, [r6, #0]
 800d8f2:	6825      	ldr	r5, [r4, #0]
 800d8f4:	f015 0506 	ands.w	r5, r5, #6
 800d8f8:	d106      	bne.n	800d908 <_printf_common+0x48>
 800d8fa:	f104 0a19 	add.w	sl, r4, #25
 800d8fe:	68e3      	ldr	r3, [r4, #12]
 800d900:	6832      	ldr	r2, [r6, #0]
 800d902:	1a9b      	subs	r3, r3, r2
 800d904:	42ab      	cmp	r3, r5
 800d906:	dc26      	bgt.n	800d956 <_printf_common+0x96>
 800d908:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d90c:	6822      	ldr	r2, [r4, #0]
 800d90e:	3b00      	subs	r3, #0
 800d910:	bf18      	it	ne
 800d912:	2301      	movne	r3, #1
 800d914:	0692      	lsls	r2, r2, #26
 800d916:	d42b      	bmi.n	800d970 <_printf_common+0xb0>
 800d918:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d91c:	4641      	mov	r1, r8
 800d91e:	4638      	mov	r0, r7
 800d920:	47c8      	blx	r9
 800d922:	3001      	adds	r0, #1
 800d924:	d01e      	beq.n	800d964 <_printf_common+0xa4>
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	6922      	ldr	r2, [r4, #16]
 800d92a:	f003 0306 	and.w	r3, r3, #6
 800d92e:	2b04      	cmp	r3, #4
 800d930:	bf02      	ittt	eq
 800d932:	68e5      	ldreq	r5, [r4, #12]
 800d934:	6833      	ldreq	r3, [r6, #0]
 800d936:	1aed      	subeq	r5, r5, r3
 800d938:	68a3      	ldr	r3, [r4, #8]
 800d93a:	bf0c      	ite	eq
 800d93c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d940:	2500      	movne	r5, #0
 800d942:	4293      	cmp	r3, r2
 800d944:	bfc4      	itt	gt
 800d946:	1a9b      	subgt	r3, r3, r2
 800d948:	18ed      	addgt	r5, r5, r3
 800d94a:	2600      	movs	r6, #0
 800d94c:	341a      	adds	r4, #26
 800d94e:	42b5      	cmp	r5, r6
 800d950:	d11a      	bne.n	800d988 <_printf_common+0xc8>
 800d952:	2000      	movs	r0, #0
 800d954:	e008      	b.n	800d968 <_printf_common+0xa8>
 800d956:	2301      	movs	r3, #1
 800d958:	4652      	mov	r2, sl
 800d95a:	4641      	mov	r1, r8
 800d95c:	4638      	mov	r0, r7
 800d95e:	47c8      	blx	r9
 800d960:	3001      	adds	r0, #1
 800d962:	d103      	bne.n	800d96c <_printf_common+0xac>
 800d964:	f04f 30ff 	mov.w	r0, #4294967295
 800d968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d96c:	3501      	adds	r5, #1
 800d96e:	e7c6      	b.n	800d8fe <_printf_common+0x3e>
 800d970:	18e1      	adds	r1, r4, r3
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	2030      	movs	r0, #48	@ 0x30
 800d976:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d97a:	4422      	add	r2, r4
 800d97c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d980:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d984:	3302      	adds	r3, #2
 800d986:	e7c7      	b.n	800d918 <_printf_common+0x58>
 800d988:	2301      	movs	r3, #1
 800d98a:	4622      	mov	r2, r4
 800d98c:	4641      	mov	r1, r8
 800d98e:	4638      	mov	r0, r7
 800d990:	47c8      	blx	r9
 800d992:	3001      	adds	r0, #1
 800d994:	d0e6      	beq.n	800d964 <_printf_common+0xa4>
 800d996:	3601      	adds	r6, #1
 800d998:	e7d9      	b.n	800d94e <_printf_common+0x8e>
	...

0800d99c <_printf_i>:
 800d99c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a0:	7e0f      	ldrb	r7, [r1, #24]
 800d9a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d9a4:	2f78      	cmp	r7, #120	@ 0x78
 800d9a6:	4691      	mov	r9, r2
 800d9a8:	4680      	mov	r8, r0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	469a      	mov	sl, r3
 800d9ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d9b2:	d807      	bhi.n	800d9c4 <_printf_i+0x28>
 800d9b4:	2f62      	cmp	r7, #98	@ 0x62
 800d9b6:	d80a      	bhi.n	800d9ce <_printf_i+0x32>
 800d9b8:	2f00      	cmp	r7, #0
 800d9ba:	f000 80d2 	beq.w	800db62 <_printf_i+0x1c6>
 800d9be:	2f58      	cmp	r7, #88	@ 0x58
 800d9c0:	f000 80b9 	beq.w	800db36 <_printf_i+0x19a>
 800d9c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d9cc:	e03a      	b.n	800da44 <_printf_i+0xa8>
 800d9ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d9d2:	2b15      	cmp	r3, #21
 800d9d4:	d8f6      	bhi.n	800d9c4 <_printf_i+0x28>
 800d9d6:	a101      	add	r1, pc, #4	@ (adr r1, 800d9dc <_printf_i+0x40>)
 800d9d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9dc:	0800da35 	.word	0x0800da35
 800d9e0:	0800da49 	.word	0x0800da49
 800d9e4:	0800d9c5 	.word	0x0800d9c5
 800d9e8:	0800d9c5 	.word	0x0800d9c5
 800d9ec:	0800d9c5 	.word	0x0800d9c5
 800d9f0:	0800d9c5 	.word	0x0800d9c5
 800d9f4:	0800da49 	.word	0x0800da49
 800d9f8:	0800d9c5 	.word	0x0800d9c5
 800d9fc:	0800d9c5 	.word	0x0800d9c5
 800da00:	0800d9c5 	.word	0x0800d9c5
 800da04:	0800d9c5 	.word	0x0800d9c5
 800da08:	0800db49 	.word	0x0800db49
 800da0c:	0800da73 	.word	0x0800da73
 800da10:	0800db03 	.word	0x0800db03
 800da14:	0800d9c5 	.word	0x0800d9c5
 800da18:	0800d9c5 	.word	0x0800d9c5
 800da1c:	0800db6b 	.word	0x0800db6b
 800da20:	0800d9c5 	.word	0x0800d9c5
 800da24:	0800da73 	.word	0x0800da73
 800da28:	0800d9c5 	.word	0x0800d9c5
 800da2c:	0800d9c5 	.word	0x0800d9c5
 800da30:	0800db0b 	.word	0x0800db0b
 800da34:	6833      	ldr	r3, [r6, #0]
 800da36:	1d1a      	adds	r2, r3, #4
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6032      	str	r2, [r6, #0]
 800da3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da44:	2301      	movs	r3, #1
 800da46:	e09d      	b.n	800db84 <_printf_i+0x1e8>
 800da48:	6833      	ldr	r3, [r6, #0]
 800da4a:	6820      	ldr	r0, [r4, #0]
 800da4c:	1d19      	adds	r1, r3, #4
 800da4e:	6031      	str	r1, [r6, #0]
 800da50:	0606      	lsls	r6, r0, #24
 800da52:	d501      	bpl.n	800da58 <_printf_i+0xbc>
 800da54:	681d      	ldr	r5, [r3, #0]
 800da56:	e003      	b.n	800da60 <_printf_i+0xc4>
 800da58:	0645      	lsls	r5, r0, #25
 800da5a:	d5fb      	bpl.n	800da54 <_printf_i+0xb8>
 800da5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da60:	2d00      	cmp	r5, #0
 800da62:	da03      	bge.n	800da6c <_printf_i+0xd0>
 800da64:	232d      	movs	r3, #45	@ 0x2d
 800da66:	426d      	negs	r5, r5
 800da68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da6c:	4859      	ldr	r0, [pc, #356]	@ (800dbd4 <_printf_i+0x238>)
 800da6e:	230a      	movs	r3, #10
 800da70:	e011      	b.n	800da96 <_printf_i+0xfa>
 800da72:	6821      	ldr	r1, [r4, #0]
 800da74:	6833      	ldr	r3, [r6, #0]
 800da76:	0608      	lsls	r0, r1, #24
 800da78:	f853 5b04 	ldr.w	r5, [r3], #4
 800da7c:	d402      	bmi.n	800da84 <_printf_i+0xe8>
 800da7e:	0649      	lsls	r1, r1, #25
 800da80:	bf48      	it	mi
 800da82:	b2ad      	uxthmi	r5, r5
 800da84:	2f6f      	cmp	r7, #111	@ 0x6f
 800da86:	4853      	ldr	r0, [pc, #332]	@ (800dbd4 <_printf_i+0x238>)
 800da88:	6033      	str	r3, [r6, #0]
 800da8a:	bf14      	ite	ne
 800da8c:	230a      	movne	r3, #10
 800da8e:	2308      	moveq	r3, #8
 800da90:	2100      	movs	r1, #0
 800da92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da96:	6866      	ldr	r6, [r4, #4]
 800da98:	60a6      	str	r6, [r4, #8]
 800da9a:	2e00      	cmp	r6, #0
 800da9c:	bfa2      	ittt	ge
 800da9e:	6821      	ldrge	r1, [r4, #0]
 800daa0:	f021 0104 	bicge.w	r1, r1, #4
 800daa4:	6021      	strge	r1, [r4, #0]
 800daa6:	b90d      	cbnz	r5, 800daac <_printf_i+0x110>
 800daa8:	2e00      	cmp	r6, #0
 800daaa:	d04b      	beq.n	800db44 <_printf_i+0x1a8>
 800daac:	4616      	mov	r6, r2
 800daae:	fbb5 f1f3 	udiv	r1, r5, r3
 800dab2:	fb03 5711 	mls	r7, r3, r1, r5
 800dab6:	5dc7      	ldrb	r7, [r0, r7]
 800dab8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dabc:	462f      	mov	r7, r5
 800dabe:	42bb      	cmp	r3, r7
 800dac0:	460d      	mov	r5, r1
 800dac2:	d9f4      	bls.n	800daae <_printf_i+0x112>
 800dac4:	2b08      	cmp	r3, #8
 800dac6:	d10b      	bne.n	800dae0 <_printf_i+0x144>
 800dac8:	6823      	ldr	r3, [r4, #0]
 800daca:	07df      	lsls	r7, r3, #31
 800dacc:	d508      	bpl.n	800dae0 <_printf_i+0x144>
 800dace:	6923      	ldr	r3, [r4, #16]
 800dad0:	6861      	ldr	r1, [r4, #4]
 800dad2:	4299      	cmp	r1, r3
 800dad4:	bfde      	ittt	le
 800dad6:	2330      	movle	r3, #48	@ 0x30
 800dad8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dadc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dae0:	1b92      	subs	r2, r2, r6
 800dae2:	6122      	str	r2, [r4, #16]
 800dae4:	f8cd a000 	str.w	sl, [sp]
 800dae8:	464b      	mov	r3, r9
 800daea:	aa03      	add	r2, sp, #12
 800daec:	4621      	mov	r1, r4
 800daee:	4640      	mov	r0, r8
 800daf0:	f7ff fee6 	bl	800d8c0 <_printf_common>
 800daf4:	3001      	adds	r0, #1
 800daf6:	d14a      	bne.n	800db8e <_printf_i+0x1f2>
 800daf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dafc:	b004      	add	sp, #16
 800dafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db02:	6823      	ldr	r3, [r4, #0]
 800db04:	f043 0320 	orr.w	r3, r3, #32
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	4833      	ldr	r0, [pc, #204]	@ (800dbd8 <_printf_i+0x23c>)
 800db0c:	2778      	movs	r7, #120	@ 0x78
 800db0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	6831      	ldr	r1, [r6, #0]
 800db16:	061f      	lsls	r7, r3, #24
 800db18:	f851 5b04 	ldr.w	r5, [r1], #4
 800db1c:	d402      	bmi.n	800db24 <_printf_i+0x188>
 800db1e:	065f      	lsls	r7, r3, #25
 800db20:	bf48      	it	mi
 800db22:	b2ad      	uxthmi	r5, r5
 800db24:	6031      	str	r1, [r6, #0]
 800db26:	07d9      	lsls	r1, r3, #31
 800db28:	bf44      	itt	mi
 800db2a:	f043 0320 	orrmi.w	r3, r3, #32
 800db2e:	6023      	strmi	r3, [r4, #0]
 800db30:	b11d      	cbz	r5, 800db3a <_printf_i+0x19e>
 800db32:	2310      	movs	r3, #16
 800db34:	e7ac      	b.n	800da90 <_printf_i+0xf4>
 800db36:	4827      	ldr	r0, [pc, #156]	@ (800dbd4 <_printf_i+0x238>)
 800db38:	e7e9      	b.n	800db0e <_printf_i+0x172>
 800db3a:	6823      	ldr	r3, [r4, #0]
 800db3c:	f023 0320 	bic.w	r3, r3, #32
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	e7f6      	b.n	800db32 <_printf_i+0x196>
 800db44:	4616      	mov	r6, r2
 800db46:	e7bd      	b.n	800dac4 <_printf_i+0x128>
 800db48:	6833      	ldr	r3, [r6, #0]
 800db4a:	6825      	ldr	r5, [r4, #0]
 800db4c:	6961      	ldr	r1, [r4, #20]
 800db4e:	1d18      	adds	r0, r3, #4
 800db50:	6030      	str	r0, [r6, #0]
 800db52:	062e      	lsls	r6, r5, #24
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	d501      	bpl.n	800db5c <_printf_i+0x1c0>
 800db58:	6019      	str	r1, [r3, #0]
 800db5a:	e002      	b.n	800db62 <_printf_i+0x1c6>
 800db5c:	0668      	lsls	r0, r5, #25
 800db5e:	d5fb      	bpl.n	800db58 <_printf_i+0x1bc>
 800db60:	8019      	strh	r1, [r3, #0]
 800db62:	2300      	movs	r3, #0
 800db64:	6123      	str	r3, [r4, #16]
 800db66:	4616      	mov	r6, r2
 800db68:	e7bc      	b.n	800dae4 <_printf_i+0x148>
 800db6a:	6833      	ldr	r3, [r6, #0]
 800db6c:	1d1a      	adds	r2, r3, #4
 800db6e:	6032      	str	r2, [r6, #0]
 800db70:	681e      	ldr	r6, [r3, #0]
 800db72:	6862      	ldr	r2, [r4, #4]
 800db74:	2100      	movs	r1, #0
 800db76:	4630      	mov	r0, r6
 800db78:	f7f2 fb52 	bl	8000220 <memchr>
 800db7c:	b108      	cbz	r0, 800db82 <_printf_i+0x1e6>
 800db7e:	1b80      	subs	r0, r0, r6
 800db80:	6060      	str	r0, [r4, #4]
 800db82:	6863      	ldr	r3, [r4, #4]
 800db84:	6123      	str	r3, [r4, #16]
 800db86:	2300      	movs	r3, #0
 800db88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db8c:	e7aa      	b.n	800dae4 <_printf_i+0x148>
 800db8e:	6923      	ldr	r3, [r4, #16]
 800db90:	4632      	mov	r2, r6
 800db92:	4649      	mov	r1, r9
 800db94:	4640      	mov	r0, r8
 800db96:	47d0      	blx	sl
 800db98:	3001      	adds	r0, #1
 800db9a:	d0ad      	beq.n	800daf8 <_printf_i+0x15c>
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	079b      	lsls	r3, r3, #30
 800dba0:	d413      	bmi.n	800dbca <_printf_i+0x22e>
 800dba2:	68e0      	ldr	r0, [r4, #12]
 800dba4:	9b03      	ldr	r3, [sp, #12]
 800dba6:	4298      	cmp	r0, r3
 800dba8:	bfb8      	it	lt
 800dbaa:	4618      	movlt	r0, r3
 800dbac:	e7a6      	b.n	800dafc <_printf_i+0x160>
 800dbae:	2301      	movs	r3, #1
 800dbb0:	4632      	mov	r2, r6
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	4640      	mov	r0, r8
 800dbb6:	47d0      	blx	sl
 800dbb8:	3001      	adds	r0, #1
 800dbba:	d09d      	beq.n	800daf8 <_printf_i+0x15c>
 800dbbc:	3501      	adds	r5, #1
 800dbbe:	68e3      	ldr	r3, [r4, #12]
 800dbc0:	9903      	ldr	r1, [sp, #12]
 800dbc2:	1a5b      	subs	r3, r3, r1
 800dbc4:	42ab      	cmp	r3, r5
 800dbc6:	dcf2      	bgt.n	800dbae <_printf_i+0x212>
 800dbc8:	e7eb      	b.n	800dba2 <_printf_i+0x206>
 800dbca:	2500      	movs	r5, #0
 800dbcc:	f104 0619 	add.w	r6, r4, #25
 800dbd0:	e7f5      	b.n	800dbbe <_printf_i+0x222>
 800dbd2:	bf00      	nop
 800dbd4:	08010eb3 	.word	0x08010eb3
 800dbd8:	08010ec4 	.word	0x08010ec4

0800dbdc <_scanf_float>:
 800dbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe0:	b087      	sub	sp, #28
 800dbe2:	4617      	mov	r7, r2
 800dbe4:	9303      	str	r3, [sp, #12]
 800dbe6:	688b      	ldr	r3, [r1, #8]
 800dbe8:	1e5a      	subs	r2, r3, #1
 800dbea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dbee:	bf81      	itttt	hi
 800dbf0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dbf4:	eb03 0b05 	addhi.w	fp, r3, r5
 800dbf8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dbfc:	608b      	strhi	r3, [r1, #8]
 800dbfe:	680b      	ldr	r3, [r1, #0]
 800dc00:	460a      	mov	r2, r1
 800dc02:	f04f 0500 	mov.w	r5, #0
 800dc06:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dc0a:	f842 3b1c 	str.w	r3, [r2], #28
 800dc0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dc12:	4680      	mov	r8, r0
 800dc14:	460c      	mov	r4, r1
 800dc16:	bf98      	it	ls
 800dc18:	f04f 0b00 	movls.w	fp, #0
 800dc1c:	9201      	str	r2, [sp, #4]
 800dc1e:	4616      	mov	r6, r2
 800dc20:	46aa      	mov	sl, r5
 800dc22:	46a9      	mov	r9, r5
 800dc24:	9502      	str	r5, [sp, #8]
 800dc26:	68a2      	ldr	r2, [r4, #8]
 800dc28:	b152      	cbz	r2, 800dc40 <_scanf_float+0x64>
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	2b4e      	cmp	r3, #78	@ 0x4e
 800dc30:	d864      	bhi.n	800dcfc <_scanf_float+0x120>
 800dc32:	2b40      	cmp	r3, #64	@ 0x40
 800dc34:	d83c      	bhi.n	800dcb0 <_scanf_float+0xd4>
 800dc36:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dc3a:	b2c8      	uxtb	r0, r1
 800dc3c:	280e      	cmp	r0, #14
 800dc3e:	d93a      	bls.n	800dcb6 <_scanf_float+0xda>
 800dc40:	f1b9 0f00 	cmp.w	r9, #0
 800dc44:	d003      	beq.n	800dc4e <_scanf_float+0x72>
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc52:	f1ba 0f01 	cmp.w	sl, #1
 800dc56:	f200 8117 	bhi.w	800de88 <_scanf_float+0x2ac>
 800dc5a:	9b01      	ldr	r3, [sp, #4]
 800dc5c:	429e      	cmp	r6, r3
 800dc5e:	f200 8108 	bhi.w	800de72 <_scanf_float+0x296>
 800dc62:	2001      	movs	r0, #1
 800dc64:	b007      	add	sp, #28
 800dc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc6a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dc6e:	2a0d      	cmp	r2, #13
 800dc70:	d8e6      	bhi.n	800dc40 <_scanf_float+0x64>
 800dc72:	a101      	add	r1, pc, #4	@ (adr r1, 800dc78 <_scanf_float+0x9c>)
 800dc74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dc78:	0800ddbf 	.word	0x0800ddbf
 800dc7c:	0800dc41 	.word	0x0800dc41
 800dc80:	0800dc41 	.word	0x0800dc41
 800dc84:	0800dc41 	.word	0x0800dc41
 800dc88:	0800de1f 	.word	0x0800de1f
 800dc8c:	0800ddf7 	.word	0x0800ddf7
 800dc90:	0800dc41 	.word	0x0800dc41
 800dc94:	0800dc41 	.word	0x0800dc41
 800dc98:	0800ddcd 	.word	0x0800ddcd
 800dc9c:	0800dc41 	.word	0x0800dc41
 800dca0:	0800dc41 	.word	0x0800dc41
 800dca4:	0800dc41 	.word	0x0800dc41
 800dca8:	0800dc41 	.word	0x0800dc41
 800dcac:	0800dd85 	.word	0x0800dd85
 800dcb0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dcb4:	e7db      	b.n	800dc6e <_scanf_float+0x92>
 800dcb6:	290e      	cmp	r1, #14
 800dcb8:	d8c2      	bhi.n	800dc40 <_scanf_float+0x64>
 800dcba:	a001      	add	r0, pc, #4	@ (adr r0, 800dcc0 <_scanf_float+0xe4>)
 800dcbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dcc0:	0800dd75 	.word	0x0800dd75
 800dcc4:	0800dc41 	.word	0x0800dc41
 800dcc8:	0800dd75 	.word	0x0800dd75
 800dccc:	0800de0b 	.word	0x0800de0b
 800dcd0:	0800dc41 	.word	0x0800dc41
 800dcd4:	0800dd1d 	.word	0x0800dd1d
 800dcd8:	0800dd5b 	.word	0x0800dd5b
 800dcdc:	0800dd5b 	.word	0x0800dd5b
 800dce0:	0800dd5b 	.word	0x0800dd5b
 800dce4:	0800dd5b 	.word	0x0800dd5b
 800dce8:	0800dd5b 	.word	0x0800dd5b
 800dcec:	0800dd5b 	.word	0x0800dd5b
 800dcf0:	0800dd5b 	.word	0x0800dd5b
 800dcf4:	0800dd5b 	.word	0x0800dd5b
 800dcf8:	0800dd5b 	.word	0x0800dd5b
 800dcfc:	2b6e      	cmp	r3, #110	@ 0x6e
 800dcfe:	d809      	bhi.n	800dd14 <_scanf_float+0x138>
 800dd00:	2b60      	cmp	r3, #96	@ 0x60
 800dd02:	d8b2      	bhi.n	800dc6a <_scanf_float+0x8e>
 800dd04:	2b54      	cmp	r3, #84	@ 0x54
 800dd06:	d07b      	beq.n	800de00 <_scanf_float+0x224>
 800dd08:	2b59      	cmp	r3, #89	@ 0x59
 800dd0a:	d199      	bne.n	800dc40 <_scanf_float+0x64>
 800dd0c:	2d07      	cmp	r5, #7
 800dd0e:	d197      	bne.n	800dc40 <_scanf_float+0x64>
 800dd10:	2508      	movs	r5, #8
 800dd12:	e02c      	b.n	800dd6e <_scanf_float+0x192>
 800dd14:	2b74      	cmp	r3, #116	@ 0x74
 800dd16:	d073      	beq.n	800de00 <_scanf_float+0x224>
 800dd18:	2b79      	cmp	r3, #121	@ 0x79
 800dd1a:	e7f6      	b.n	800dd0a <_scanf_float+0x12e>
 800dd1c:	6821      	ldr	r1, [r4, #0]
 800dd1e:	05c8      	lsls	r0, r1, #23
 800dd20:	d51b      	bpl.n	800dd5a <_scanf_float+0x17e>
 800dd22:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800dd26:	6021      	str	r1, [r4, #0]
 800dd28:	f109 0901 	add.w	r9, r9, #1
 800dd2c:	f1bb 0f00 	cmp.w	fp, #0
 800dd30:	d003      	beq.n	800dd3a <_scanf_float+0x15e>
 800dd32:	3201      	adds	r2, #1
 800dd34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd38:	60a2      	str	r2, [r4, #8]
 800dd3a:	68a3      	ldr	r3, [r4, #8]
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	60a3      	str	r3, [r4, #8]
 800dd40:	6923      	ldr	r3, [r4, #16]
 800dd42:	3301      	adds	r3, #1
 800dd44:	6123      	str	r3, [r4, #16]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	607b      	str	r3, [r7, #4]
 800dd4e:	f340 8087 	ble.w	800de60 <_scanf_float+0x284>
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	3301      	adds	r3, #1
 800dd56:	603b      	str	r3, [r7, #0]
 800dd58:	e765      	b.n	800dc26 <_scanf_float+0x4a>
 800dd5a:	eb1a 0105 	adds.w	r1, sl, r5
 800dd5e:	f47f af6f 	bne.w	800dc40 <_scanf_float+0x64>
 800dd62:	6822      	ldr	r2, [r4, #0]
 800dd64:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800dd68:	6022      	str	r2, [r4, #0]
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	468a      	mov	sl, r1
 800dd6e:	f806 3b01 	strb.w	r3, [r6], #1
 800dd72:	e7e2      	b.n	800dd3a <_scanf_float+0x15e>
 800dd74:	6822      	ldr	r2, [r4, #0]
 800dd76:	0610      	lsls	r0, r2, #24
 800dd78:	f57f af62 	bpl.w	800dc40 <_scanf_float+0x64>
 800dd7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dd80:	6022      	str	r2, [r4, #0]
 800dd82:	e7f4      	b.n	800dd6e <_scanf_float+0x192>
 800dd84:	f1ba 0f00 	cmp.w	sl, #0
 800dd88:	d10e      	bne.n	800dda8 <_scanf_float+0x1cc>
 800dd8a:	f1b9 0f00 	cmp.w	r9, #0
 800dd8e:	d10e      	bne.n	800ddae <_scanf_float+0x1d2>
 800dd90:	6822      	ldr	r2, [r4, #0]
 800dd92:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dd96:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dd9a:	d108      	bne.n	800ddae <_scanf_float+0x1d2>
 800dd9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dda0:	6022      	str	r2, [r4, #0]
 800dda2:	f04f 0a01 	mov.w	sl, #1
 800dda6:	e7e2      	b.n	800dd6e <_scanf_float+0x192>
 800dda8:	f1ba 0f02 	cmp.w	sl, #2
 800ddac:	d055      	beq.n	800de5a <_scanf_float+0x27e>
 800ddae:	2d01      	cmp	r5, #1
 800ddb0:	d002      	beq.n	800ddb8 <_scanf_float+0x1dc>
 800ddb2:	2d04      	cmp	r5, #4
 800ddb4:	f47f af44 	bne.w	800dc40 <_scanf_float+0x64>
 800ddb8:	3501      	adds	r5, #1
 800ddba:	b2ed      	uxtb	r5, r5
 800ddbc:	e7d7      	b.n	800dd6e <_scanf_float+0x192>
 800ddbe:	f1ba 0f01 	cmp.w	sl, #1
 800ddc2:	f47f af3d 	bne.w	800dc40 <_scanf_float+0x64>
 800ddc6:	f04f 0a02 	mov.w	sl, #2
 800ddca:	e7d0      	b.n	800dd6e <_scanf_float+0x192>
 800ddcc:	b97d      	cbnz	r5, 800ddee <_scanf_float+0x212>
 800ddce:	f1b9 0f00 	cmp.w	r9, #0
 800ddd2:	f47f af38 	bne.w	800dc46 <_scanf_float+0x6a>
 800ddd6:	6822      	ldr	r2, [r4, #0]
 800ddd8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dddc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dde0:	f040 8108 	bne.w	800dff4 <_scanf_float+0x418>
 800dde4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dde8:	6022      	str	r2, [r4, #0]
 800ddea:	2501      	movs	r5, #1
 800ddec:	e7bf      	b.n	800dd6e <_scanf_float+0x192>
 800ddee:	2d03      	cmp	r5, #3
 800ddf0:	d0e2      	beq.n	800ddb8 <_scanf_float+0x1dc>
 800ddf2:	2d05      	cmp	r5, #5
 800ddf4:	e7de      	b.n	800ddb4 <_scanf_float+0x1d8>
 800ddf6:	2d02      	cmp	r5, #2
 800ddf8:	f47f af22 	bne.w	800dc40 <_scanf_float+0x64>
 800ddfc:	2503      	movs	r5, #3
 800ddfe:	e7b6      	b.n	800dd6e <_scanf_float+0x192>
 800de00:	2d06      	cmp	r5, #6
 800de02:	f47f af1d 	bne.w	800dc40 <_scanf_float+0x64>
 800de06:	2507      	movs	r5, #7
 800de08:	e7b1      	b.n	800dd6e <_scanf_float+0x192>
 800de0a:	6822      	ldr	r2, [r4, #0]
 800de0c:	0591      	lsls	r1, r2, #22
 800de0e:	f57f af17 	bpl.w	800dc40 <_scanf_float+0x64>
 800de12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800de16:	6022      	str	r2, [r4, #0]
 800de18:	f8cd 9008 	str.w	r9, [sp, #8]
 800de1c:	e7a7      	b.n	800dd6e <_scanf_float+0x192>
 800de1e:	6822      	ldr	r2, [r4, #0]
 800de20:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800de24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800de28:	d006      	beq.n	800de38 <_scanf_float+0x25c>
 800de2a:	0550      	lsls	r0, r2, #21
 800de2c:	f57f af08 	bpl.w	800dc40 <_scanf_float+0x64>
 800de30:	f1b9 0f00 	cmp.w	r9, #0
 800de34:	f000 80de 	beq.w	800dff4 <_scanf_float+0x418>
 800de38:	0591      	lsls	r1, r2, #22
 800de3a:	bf58      	it	pl
 800de3c:	9902      	ldrpl	r1, [sp, #8]
 800de3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de42:	bf58      	it	pl
 800de44:	eba9 0101 	subpl.w	r1, r9, r1
 800de48:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800de4c:	bf58      	it	pl
 800de4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800de52:	6022      	str	r2, [r4, #0]
 800de54:	f04f 0900 	mov.w	r9, #0
 800de58:	e789      	b.n	800dd6e <_scanf_float+0x192>
 800de5a:	f04f 0a03 	mov.w	sl, #3
 800de5e:	e786      	b.n	800dd6e <_scanf_float+0x192>
 800de60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800de64:	4639      	mov	r1, r7
 800de66:	4640      	mov	r0, r8
 800de68:	4798      	blx	r3
 800de6a:	2800      	cmp	r0, #0
 800de6c:	f43f aedb 	beq.w	800dc26 <_scanf_float+0x4a>
 800de70:	e6e6      	b.n	800dc40 <_scanf_float+0x64>
 800de72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800de76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de7a:	463a      	mov	r2, r7
 800de7c:	4640      	mov	r0, r8
 800de7e:	4798      	blx	r3
 800de80:	6923      	ldr	r3, [r4, #16]
 800de82:	3b01      	subs	r3, #1
 800de84:	6123      	str	r3, [r4, #16]
 800de86:	e6e8      	b.n	800dc5a <_scanf_float+0x7e>
 800de88:	1e6b      	subs	r3, r5, #1
 800de8a:	2b06      	cmp	r3, #6
 800de8c:	d824      	bhi.n	800ded8 <_scanf_float+0x2fc>
 800de8e:	2d02      	cmp	r5, #2
 800de90:	d836      	bhi.n	800df00 <_scanf_float+0x324>
 800de92:	9b01      	ldr	r3, [sp, #4]
 800de94:	429e      	cmp	r6, r3
 800de96:	f67f aee4 	bls.w	800dc62 <_scanf_float+0x86>
 800de9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800de9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dea2:	463a      	mov	r2, r7
 800dea4:	4640      	mov	r0, r8
 800dea6:	4798      	blx	r3
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	3b01      	subs	r3, #1
 800deac:	6123      	str	r3, [r4, #16]
 800deae:	e7f0      	b.n	800de92 <_scanf_float+0x2b6>
 800deb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800deb4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800deb8:	463a      	mov	r2, r7
 800deba:	4640      	mov	r0, r8
 800debc:	4798      	blx	r3
 800debe:	6923      	ldr	r3, [r4, #16]
 800dec0:	3b01      	subs	r3, #1
 800dec2:	6123      	str	r3, [r4, #16]
 800dec4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dec8:	fa5f fa8a 	uxtb.w	sl, sl
 800decc:	f1ba 0f02 	cmp.w	sl, #2
 800ded0:	d1ee      	bne.n	800deb0 <_scanf_float+0x2d4>
 800ded2:	3d03      	subs	r5, #3
 800ded4:	b2ed      	uxtb	r5, r5
 800ded6:	1b76      	subs	r6, r6, r5
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	05da      	lsls	r2, r3, #23
 800dedc:	d530      	bpl.n	800df40 <_scanf_float+0x364>
 800dede:	055b      	lsls	r3, r3, #21
 800dee0:	d511      	bpl.n	800df06 <_scanf_float+0x32a>
 800dee2:	9b01      	ldr	r3, [sp, #4]
 800dee4:	429e      	cmp	r6, r3
 800dee6:	f67f aebc 	bls.w	800dc62 <_scanf_float+0x86>
 800deea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800deee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800def2:	463a      	mov	r2, r7
 800def4:	4640      	mov	r0, r8
 800def6:	4798      	blx	r3
 800def8:	6923      	ldr	r3, [r4, #16]
 800defa:	3b01      	subs	r3, #1
 800defc:	6123      	str	r3, [r4, #16]
 800defe:	e7f0      	b.n	800dee2 <_scanf_float+0x306>
 800df00:	46aa      	mov	sl, r5
 800df02:	46b3      	mov	fp, r6
 800df04:	e7de      	b.n	800dec4 <_scanf_float+0x2e8>
 800df06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800df0a:	6923      	ldr	r3, [r4, #16]
 800df0c:	2965      	cmp	r1, #101	@ 0x65
 800df0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800df12:	f106 35ff 	add.w	r5, r6, #4294967295
 800df16:	6123      	str	r3, [r4, #16]
 800df18:	d00c      	beq.n	800df34 <_scanf_float+0x358>
 800df1a:	2945      	cmp	r1, #69	@ 0x45
 800df1c:	d00a      	beq.n	800df34 <_scanf_float+0x358>
 800df1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df22:	463a      	mov	r2, r7
 800df24:	4640      	mov	r0, r8
 800df26:	4798      	blx	r3
 800df28:	6923      	ldr	r3, [r4, #16]
 800df2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800df2e:	3b01      	subs	r3, #1
 800df30:	1eb5      	subs	r5, r6, #2
 800df32:	6123      	str	r3, [r4, #16]
 800df34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df38:	463a      	mov	r2, r7
 800df3a:	4640      	mov	r0, r8
 800df3c:	4798      	blx	r3
 800df3e:	462e      	mov	r6, r5
 800df40:	6822      	ldr	r2, [r4, #0]
 800df42:	f012 0210 	ands.w	r2, r2, #16
 800df46:	d001      	beq.n	800df4c <_scanf_float+0x370>
 800df48:	2000      	movs	r0, #0
 800df4a:	e68b      	b.n	800dc64 <_scanf_float+0x88>
 800df4c:	7032      	strb	r2, [r6, #0]
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800df54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df58:	d11c      	bne.n	800df94 <_scanf_float+0x3b8>
 800df5a:	9b02      	ldr	r3, [sp, #8]
 800df5c:	454b      	cmp	r3, r9
 800df5e:	eba3 0209 	sub.w	r2, r3, r9
 800df62:	d123      	bne.n	800dfac <_scanf_float+0x3d0>
 800df64:	9901      	ldr	r1, [sp, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	4640      	mov	r0, r8
 800df6a:	f7ff f95d 	bl	800d228 <_strtod_r>
 800df6e:	9b03      	ldr	r3, [sp, #12]
 800df70:	6821      	ldr	r1, [r4, #0]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f011 0f02 	tst.w	r1, #2
 800df78:	ec57 6b10 	vmov	r6, r7, d0
 800df7c:	f103 0204 	add.w	r2, r3, #4
 800df80:	d01f      	beq.n	800dfc2 <_scanf_float+0x3e6>
 800df82:	9903      	ldr	r1, [sp, #12]
 800df84:	600a      	str	r2, [r1, #0]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	e9c3 6700 	strd	r6, r7, [r3]
 800df8c:	68e3      	ldr	r3, [r4, #12]
 800df8e:	3301      	adds	r3, #1
 800df90:	60e3      	str	r3, [r4, #12]
 800df92:	e7d9      	b.n	800df48 <_scanf_float+0x36c>
 800df94:	9b04      	ldr	r3, [sp, #16]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d0e4      	beq.n	800df64 <_scanf_float+0x388>
 800df9a:	9905      	ldr	r1, [sp, #20]
 800df9c:	230a      	movs	r3, #10
 800df9e:	3101      	adds	r1, #1
 800dfa0:	4640      	mov	r0, r8
 800dfa2:	f7ff f9c1 	bl	800d328 <_strtol_r>
 800dfa6:	9b04      	ldr	r3, [sp, #16]
 800dfa8:	9e05      	ldr	r6, [sp, #20]
 800dfaa:	1ac2      	subs	r2, r0, r3
 800dfac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800dfb0:	429e      	cmp	r6, r3
 800dfb2:	bf28      	it	cs
 800dfb4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800dfb8:	4910      	ldr	r1, [pc, #64]	@ (800dffc <_scanf_float+0x420>)
 800dfba:	4630      	mov	r0, r6
 800dfbc:	f000 f918 	bl	800e1f0 <siprintf>
 800dfc0:	e7d0      	b.n	800df64 <_scanf_float+0x388>
 800dfc2:	f011 0f04 	tst.w	r1, #4
 800dfc6:	9903      	ldr	r1, [sp, #12]
 800dfc8:	600a      	str	r2, [r1, #0]
 800dfca:	d1dc      	bne.n	800df86 <_scanf_float+0x3aa>
 800dfcc:	681d      	ldr	r5, [r3, #0]
 800dfce:	4632      	mov	r2, r6
 800dfd0:	463b      	mov	r3, r7
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	f7f2 fdd1 	bl	8000b7c <__aeabi_dcmpun>
 800dfda:	b128      	cbz	r0, 800dfe8 <_scanf_float+0x40c>
 800dfdc:	4808      	ldr	r0, [pc, #32]	@ (800e000 <_scanf_float+0x424>)
 800dfde:	f000 fa23 	bl	800e428 <nanf>
 800dfe2:	ed85 0a00 	vstr	s0, [r5]
 800dfe6:	e7d1      	b.n	800df8c <_scanf_float+0x3b0>
 800dfe8:	4630      	mov	r0, r6
 800dfea:	4639      	mov	r1, r7
 800dfec:	f7f2 fe24 	bl	8000c38 <__aeabi_d2f>
 800dff0:	6028      	str	r0, [r5, #0]
 800dff2:	e7cb      	b.n	800df8c <_scanf_float+0x3b0>
 800dff4:	f04f 0900 	mov.w	r9, #0
 800dff8:	e629      	b.n	800dc4e <_scanf_float+0x72>
 800dffa:	bf00      	nop
 800dffc:	08010ed5 	.word	0x08010ed5
 800e000:	08010f1d 	.word	0x08010f1d

0800e004 <std>:
 800e004:	2300      	movs	r3, #0
 800e006:	b510      	push	{r4, lr}
 800e008:	4604      	mov	r4, r0
 800e00a:	e9c0 3300 	strd	r3, r3, [r0]
 800e00e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e012:	6083      	str	r3, [r0, #8]
 800e014:	8181      	strh	r1, [r0, #12]
 800e016:	6643      	str	r3, [r0, #100]	@ 0x64
 800e018:	81c2      	strh	r2, [r0, #14]
 800e01a:	6183      	str	r3, [r0, #24]
 800e01c:	4619      	mov	r1, r3
 800e01e:	2208      	movs	r2, #8
 800e020:	305c      	adds	r0, #92	@ 0x5c
 800e022:	f000 f948 	bl	800e2b6 <memset>
 800e026:	4b0d      	ldr	r3, [pc, #52]	@ (800e05c <std+0x58>)
 800e028:	6263      	str	r3, [r4, #36]	@ 0x24
 800e02a:	4b0d      	ldr	r3, [pc, #52]	@ (800e060 <std+0x5c>)
 800e02c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e02e:	4b0d      	ldr	r3, [pc, #52]	@ (800e064 <std+0x60>)
 800e030:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e032:	4b0d      	ldr	r3, [pc, #52]	@ (800e068 <std+0x64>)
 800e034:	6323      	str	r3, [r4, #48]	@ 0x30
 800e036:	4b0d      	ldr	r3, [pc, #52]	@ (800e06c <std+0x68>)
 800e038:	6224      	str	r4, [r4, #32]
 800e03a:	429c      	cmp	r4, r3
 800e03c:	d006      	beq.n	800e04c <std+0x48>
 800e03e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e042:	4294      	cmp	r4, r2
 800e044:	d002      	beq.n	800e04c <std+0x48>
 800e046:	33d0      	adds	r3, #208	@ 0xd0
 800e048:	429c      	cmp	r4, r3
 800e04a:	d105      	bne.n	800e058 <std+0x54>
 800e04c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e054:	f000 b9ce 	b.w	800e3f4 <__retarget_lock_init_recursive>
 800e058:	bd10      	pop	{r4, pc}
 800e05a:	bf00      	nop
 800e05c:	0800e231 	.word	0x0800e231
 800e060:	0800e253 	.word	0x0800e253
 800e064:	0800e28b 	.word	0x0800e28b
 800e068:	0800e2af 	.word	0x0800e2af
 800e06c:	20001284 	.word	0x20001284

0800e070 <stdio_exit_handler>:
 800e070:	4a02      	ldr	r2, [pc, #8]	@ (800e07c <stdio_exit_handler+0xc>)
 800e072:	4903      	ldr	r1, [pc, #12]	@ (800e080 <stdio_exit_handler+0x10>)
 800e074:	4803      	ldr	r0, [pc, #12]	@ (800e084 <stdio_exit_handler+0x14>)
 800e076:	f000 b869 	b.w	800e14c <_fwalk_sglue>
 800e07a:	bf00      	nop
 800e07c:	2000002c 	.word	0x2000002c
 800e080:	08010569 	.word	0x08010569
 800e084:	200001a8 	.word	0x200001a8

0800e088 <cleanup_stdio>:
 800e088:	6841      	ldr	r1, [r0, #4]
 800e08a:	4b0c      	ldr	r3, [pc, #48]	@ (800e0bc <cleanup_stdio+0x34>)
 800e08c:	4299      	cmp	r1, r3
 800e08e:	b510      	push	{r4, lr}
 800e090:	4604      	mov	r4, r0
 800e092:	d001      	beq.n	800e098 <cleanup_stdio+0x10>
 800e094:	f002 fa68 	bl	8010568 <_fflush_r>
 800e098:	68a1      	ldr	r1, [r4, #8]
 800e09a:	4b09      	ldr	r3, [pc, #36]	@ (800e0c0 <cleanup_stdio+0x38>)
 800e09c:	4299      	cmp	r1, r3
 800e09e:	d002      	beq.n	800e0a6 <cleanup_stdio+0x1e>
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f002 fa61 	bl	8010568 <_fflush_r>
 800e0a6:	68e1      	ldr	r1, [r4, #12]
 800e0a8:	4b06      	ldr	r3, [pc, #24]	@ (800e0c4 <cleanup_stdio+0x3c>)
 800e0aa:	4299      	cmp	r1, r3
 800e0ac:	d004      	beq.n	800e0b8 <cleanup_stdio+0x30>
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0b4:	f002 ba58 	b.w	8010568 <_fflush_r>
 800e0b8:	bd10      	pop	{r4, pc}
 800e0ba:	bf00      	nop
 800e0bc:	20001284 	.word	0x20001284
 800e0c0:	200012ec 	.word	0x200012ec
 800e0c4:	20001354 	.word	0x20001354

0800e0c8 <global_stdio_init.part.0>:
 800e0c8:	b510      	push	{r4, lr}
 800e0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e0f8 <global_stdio_init.part.0+0x30>)
 800e0cc:	4c0b      	ldr	r4, [pc, #44]	@ (800e0fc <global_stdio_init.part.0+0x34>)
 800e0ce:	4a0c      	ldr	r2, [pc, #48]	@ (800e100 <global_stdio_init.part.0+0x38>)
 800e0d0:	601a      	str	r2, [r3, #0]
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	2104      	movs	r1, #4
 800e0d8:	f7ff ff94 	bl	800e004 <std>
 800e0dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	2109      	movs	r1, #9
 800e0e4:	f7ff ff8e 	bl	800e004 <std>
 800e0e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e0ec:	2202      	movs	r2, #2
 800e0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0f2:	2112      	movs	r1, #18
 800e0f4:	f7ff bf86 	b.w	800e004 <std>
 800e0f8:	200013bc 	.word	0x200013bc
 800e0fc:	20001284 	.word	0x20001284
 800e100:	0800e071 	.word	0x0800e071

0800e104 <__sfp_lock_acquire>:
 800e104:	4801      	ldr	r0, [pc, #4]	@ (800e10c <__sfp_lock_acquire+0x8>)
 800e106:	f000 b976 	b.w	800e3f6 <__retarget_lock_acquire_recursive>
 800e10a:	bf00      	nop
 800e10c:	200013c5 	.word	0x200013c5

0800e110 <__sfp_lock_release>:
 800e110:	4801      	ldr	r0, [pc, #4]	@ (800e118 <__sfp_lock_release+0x8>)
 800e112:	f000 b971 	b.w	800e3f8 <__retarget_lock_release_recursive>
 800e116:	bf00      	nop
 800e118:	200013c5 	.word	0x200013c5

0800e11c <__sinit>:
 800e11c:	b510      	push	{r4, lr}
 800e11e:	4604      	mov	r4, r0
 800e120:	f7ff fff0 	bl	800e104 <__sfp_lock_acquire>
 800e124:	6a23      	ldr	r3, [r4, #32]
 800e126:	b11b      	cbz	r3, 800e130 <__sinit+0x14>
 800e128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e12c:	f7ff bff0 	b.w	800e110 <__sfp_lock_release>
 800e130:	4b04      	ldr	r3, [pc, #16]	@ (800e144 <__sinit+0x28>)
 800e132:	6223      	str	r3, [r4, #32]
 800e134:	4b04      	ldr	r3, [pc, #16]	@ (800e148 <__sinit+0x2c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1f5      	bne.n	800e128 <__sinit+0xc>
 800e13c:	f7ff ffc4 	bl	800e0c8 <global_stdio_init.part.0>
 800e140:	e7f2      	b.n	800e128 <__sinit+0xc>
 800e142:	bf00      	nop
 800e144:	0800e089 	.word	0x0800e089
 800e148:	200013bc 	.word	0x200013bc

0800e14c <_fwalk_sglue>:
 800e14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e150:	4607      	mov	r7, r0
 800e152:	4688      	mov	r8, r1
 800e154:	4614      	mov	r4, r2
 800e156:	2600      	movs	r6, #0
 800e158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e15c:	f1b9 0901 	subs.w	r9, r9, #1
 800e160:	d505      	bpl.n	800e16e <_fwalk_sglue+0x22>
 800e162:	6824      	ldr	r4, [r4, #0]
 800e164:	2c00      	cmp	r4, #0
 800e166:	d1f7      	bne.n	800e158 <_fwalk_sglue+0xc>
 800e168:	4630      	mov	r0, r6
 800e16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e16e:	89ab      	ldrh	r3, [r5, #12]
 800e170:	2b01      	cmp	r3, #1
 800e172:	d907      	bls.n	800e184 <_fwalk_sglue+0x38>
 800e174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e178:	3301      	adds	r3, #1
 800e17a:	d003      	beq.n	800e184 <_fwalk_sglue+0x38>
 800e17c:	4629      	mov	r1, r5
 800e17e:	4638      	mov	r0, r7
 800e180:	47c0      	blx	r8
 800e182:	4306      	orrs	r6, r0
 800e184:	3568      	adds	r5, #104	@ 0x68
 800e186:	e7e9      	b.n	800e15c <_fwalk_sglue+0x10>

0800e188 <sniprintf>:
 800e188:	b40c      	push	{r2, r3}
 800e18a:	b530      	push	{r4, r5, lr}
 800e18c:	4b17      	ldr	r3, [pc, #92]	@ (800e1ec <sniprintf+0x64>)
 800e18e:	1e0c      	subs	r4, r1, #0
 800e190:	681d      	ldr	r5, [r3, #0]
 800e192:	b09d      	sub	sp, #116	@ 0x74
 800e194:	da08      	bge.n	800e1a8 <sniprintf+0x20>
 800e196:	238b      	movs	r3, #139	@ 0x8b
 800e198:	602b      	str	r3, [r5, #0]
 800e19a:	f04f 30ff 	mov.w	r0, #4294967295
 800e19e:	b01d      	add	sp, #116	@ 0x74
 800e1a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1a4:	b002      	add	sp, #8
 800e1a6:	4770      	bx	lr
 800e1a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e1ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e1b0:	bf14      	ite	ne
 800e1b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e1b6:	4623      	moveq	r3, r4
 800e1b8:	9304      	str	r3, [sp, #16]
 800e1ba:	9307      	str	r3, [sp, #28]
 800e1bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e1c0:	9002      	str	r0, [sp, #8]
 800e1c2:	9006      	str	r0, [sp, #24]
 800e1c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e1c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e1ca:	ab21      	add	r3, sp, #132	@ 0x84
 800e1cc:	a902      	add	r1, sp, #8
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	f002 f849 	bl	8010268 <_svfiprintf_r>
 800e1d6:	1c43      	adds	r3, r0, #1
 800e1d8:	bfbc      	itt	lt
 800e1da:	238b      	movlt	r3, #139	@ 0x8b
 800e1dc:	602b      	strlt	r3, [r5, #0]
 800e1de:	2c00      	cmp	r4, #0
 800e1e0:	d0dd      	beq.n	800e19e <sniprintf+0x16>
 800e1e2:	9b02      	ldr	r3, [sp, #8]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	701a      	strb	r2, [r3, #0]
 800e1e8:	e7d9      	b.n	800e19e <sniprintf+0x16>
 800e1ea:	bf00      	nop
 800e1ec:	200001a4 	.word	0x200001a4

0800e1f0 <siprintf>:
 800e1f0:	b40e      	push	{r1, r2, r3}
 800e1f2:	b500      	push	{lr}
 800e1f4:	b09c      	sub	sp, #112	@ 0x70
 800e1f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e1f8:	9002      	str	r0, [sp, #8]
 800e1fa:	9006      	str	r0, [sp, #24]
 800e1fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e200:	4809      	ldr	r0, [pc, #36]	@ (800e228 <siprintf+0x38>)
 800e202:	9107      	str	r1, [sp, #28]
 800e204:	9104      	str	r1, [sp, #16]
 800e206:	4909      	ldr	r1, [pc, #36]	@ (800e22c <siprintf+0x3c>)
 800e208:	f853 2b04 	ldr.w	r2, [r3], #4
 800e20c:	9105      	str	r1, [sp, #20]
 800e20e:	6800      	ldr	r0, [r0, #0]
 800e210:	9301      	str	r3, [sp, #4]
 800e212:	a902      	add	r1, sp, #8
 800e214:	f002 f828 	bl	8010268 <_svfiprintf_r>
 800e218:	9b02      	ldr	r3, [sp, #8]
 800e21a:	2200      	movs	r2, #0
 800e21c:	701a      	strb	r2, [r3, #0]
 800e21e:	b01c      	add	sp, #112	@ 0x70
 800e220:	f85d eb04 	ldr.w	lr, [sp], #4
 800e224:	b003      	add	sp, #12
 800e226:	4770      	bx	lr
 800e228:	200001a4 	.word	0x200001a4
 800e22c:	ffff0208 	.word	0xffff0208

0800e230 <__sread>:
 800e230:	b510      	push	{r4, lr}
 800e232:	460c      	mov	r4, r1
 800e234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e238:	f000 f87e 	bl	800e338 <_read_r>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	bfab      	itete	ge
 800e240:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e242:	89a3      	ldrhlt	r3, [r4, #12]
 800e244:	181b      	addge	r3, r3, r0
 800e246:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e24a:	bfac      	ite	ge
 800e24c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e24e:	81a3      	strhlt	r3, [r4, #12]
 800e250:	bd10      	pop	{r4, pc}

0800e252 <__swrite>:
 800e252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e256:	461f      	mov	r7, r3
 800e258:	898b      	ldrh	r3, [r1, #12]
 800e25a:	05db      	lsls	r3, r3, #23
 800e25c:	4605      	mov	r5, r0
 800e25e:	460c      	mov	r4, r1
 800e260:	4616      	mov	r6, r2
 800e262:	d505      	bpl.n	800e270 <__swrite+0x1e>
 800e264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e268:	2302      	movs	r3, #2
 800e26a:	2200      	movs	r2, #0
 800e26c:	f000 f852 	bl	800e314 <_lseek_r>
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e27a:	81a3      	strh	r3, [r4, #12]
 800e27c:	4632      	mov	r2, r6
 800e27e:	463b      	mov	r3, r7
 800e280:	4628      	mov	r0, r5
 800e282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e286:	f000 b879 	b.w	800e37c <_write_r>

0800e28a <__sseek>:
 800e28a:	b510      	push	{r4, lr}
 800e28c:	460c      	mov	r4, r1
 800e28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e292:	f000 f83f 	bl	800e314 <_lseek_r>
 800e296:	1c43      	adds	r3, r0, #1
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	bf15      	itete	ne
 800e29c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e29e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e2a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e2a6:	81a3      	strheq	r3, [r4, #12]
 800e2a8:	bf18      	it	ne
 800e2aa:	81a3      	strhne	r3, [r4, #12]
 800e2ac:	bd10      	pop	{r4, pc}

0800e2ae <__sclose>:
 800e2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2b2:	f000 b81f 	b.w	800e2f4 <_close_r>

0800e2b6 <memset>:
 800e2b6:	4402      	add	r2, r0
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d100      	bne.n	800e2c0 <memset+0xa>
 800e2be:	4770      	bx	lr
 800e2c0:	f803 1b01 	strb.w	r1, [r3], #1
 800e2c4:	e7f9      	b.n	800e2ba <memset+0x4>

0800e2c6 <strncmp>:
 800e2c6:	b510      	push	{r4, lr}
 800e2c8:	b16a      	cbz	r2, 800e2e6 <strncmp+0x20>
 800e2ca:	3901      	subs	r1, #1
 800e2cc:	1884      	adds	r4, r0, r2
 800e2ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d103      	bne.n	800e2e2 <strncmp+0x1c>
 800e2da:	42a0      	cmp	r0, r4
 800e2dc:	d001      	beq.n	800e2e2 <strncmp+0x1c>
 800e2de:	2a00      	cmp	r2, #0
 800e2e0:	d1f5      	bne.n	800e2ce <strncmp+0x8>
 800e2e2:	1ad0      	subs	r0, r2, r3
 800e2e4:	bd10      	pop	{r4, pc}
 800e2e6:	4610      	mov	r0, r2
 800e2e8:	e7fc      	b.n	800e2e4 <strncmp+0x1e>
	...

0800e2ec <_localeconv_r>:
 800e2ec:	4800      	ldr	r0, [pc, #0]	@ (800e2f0 <_localeconv_r+0x4>)
 800e2ee:	4770      	bx	lr
 800e2f0:	20000128 	.word	0x20000128

0800e2f4 <_close_r>:
 800e2f4:	b538      	push	{r3, r4, r5, lr}
 800e2f6:	4d06      	ldr	r5, [pc, #24]	@ (800e310 <_close_r+0x1c>)
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	4608      	mov	r0, r1
 800e2fe:	602b      	str	r3, [r5, #0]
 800e300:	f7f4 f9f6 	bl	80026f0 <_close>
 800e304:	1c43      	adds	r3, r0, #1
 800e306:	d102      	bne.n	800e30e <_close_r+0x1a>
 800e308:	682b      	ldr	r3, [r5, #0]
 800e30a:	b103      	cbz	r3, 800e30e <_close_r+0x1a>
 800e30c:	6023      	str	r3, [r4, #0]
 800e30e:	bd38      	pop	{r3, r4, r5, pc}
 800e310:	200013c0 	.word	0x200013c0

0800e314 <_lseek_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d07      	ldr	r5, [pc, #28]	@ (800e334 <_lseek_r+0x20>)
 800e318:	4604      	mov	r4, r0
 800e31a:	4608      	mov	r0, r1
 800e31c:	4611      	mov	r1, r2
 800e31e:	2200      	movs	r2, #0
 800e320:	602a      	str	r2, [r5, #0]
 800e322:	461a      	mov	r2, r3
 800e324:	f7f4 fa0b 	bl	800273e <_lseek>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_lseek_r+0x1e>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_lseek_r+0x1e>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	200013c0 	.word	0x200013c0

0800e338 <_read_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	4d07      	ldr	r5, [pc, #28]	@ (800e358 <_read_r+0x20>)
 800e33c:	4604      	mov	r4, r0
 800e33e:	4608      	mov	r0, r1
 800e340:	4611      	mov	r1, r2
 800e342:	2200      	movs	r2, #0
 800e344:	602a      	str	r2, [r5, #0]
 800e346:	461a      	mov	r2, r3
 800e348:	f7f4 f999 	bl	800267e <_read>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d102      	bne.n	800e356 <_read_r+0x1e>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	b103      	cbz	r3, 800e356 <_read_r+0x1e>
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	200013c0 	.word	0x200013c0

0800e35c <_sbrk_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4d06      	ldr	r5, [pc, #24]	@ (800e378 <_sbrk_r+0x1c>)
 800e360:	2300      	movs	r3, #0
 800e362:	4604      	mov	r4, r0
 800e364:	4608      	mov	r0, r1
 800e366:	602b      	str	r3, [r5, #0]
 800e368:	f7f4 f9f6 	bl	8002758 <_sbrk>
 800e36c:	1c43      	adds	r3, r0, #1
 800e36e:	d102      	bne.n	800e376 <_sbrk_r+0x1a>
 800e370:	682b      	ldr	r3, [r5, #0]
 800e372:	b103      	cbz	r3, 800e376 <_sbrk_r+0x1a>
 800e374:	6023      	str	r3, [r4, #0]
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	200013c0 	.word	0x200013c0

0800e37c <_write_r>:
 800e37c:	b538      	push	{r3, r4, r5, lr}
 800e37e:	4d07      	ldr	r5, [pc, #28]	@ (800e39c <_write_r+0x20>)
 800e380:	4604      	mov	r4, r0
 800e382:	4608      	mov	r0, r1
 800e384:	4611      	mov	r1, r2
 800e386:	2200      	movs	r2, #0
 800e388:	602a      	str	r2, [r5, #0]
 800e38a:	461a      	mov	r2, r3
 800e38c:	f7f4 f994 	bl	80026b8 <_write>
 800e390:	1c43      	adds	r3, r0, #1
 800e392:	d102      	bne.n	800e39a <_write_r+0x1e>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	b103      	cbz	r3, 800e39a <_write_r+0x1e>
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	200013c0 	.word	0x200013c0

0800e3a0 <__errno>:
 800e3a0:	4b01      	ldr	r3, [pc, #4]	@ (800e3a8 <__errno+0x8>)
 800e3a2:	6818      	ldr	r0, [r3, #0]
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	200001a4 	.word	0x200001a4

0800e3ac <__libc_init_array>:
 800e3ac:	b570      	push	{r4, r5, r6, lr}
 800e3ae:	4d0d      	ldr	r5, [pc, #52]	@ (800e3e4 <__libc_init_array+0x38>)
 800e3b0:	4c0d      	ldr	r4, [pc, #52]	@ (800e3e8 <__libc_init_array+0x3c>)
 800e3b2:	1b64      	subs	r4, r4, r5
 800e3b4:	10a4      	asrs	r4, r4, #2
 800e3b6:	2600      	movs	r6, #0
 800e3b8:	42a6      	cmp	r6, r4
 800e3ba:	d109      	bne.n	800e3d0 <__libc_init_array+0x24>
 800e3bc:	4d0b      	ldr	r5, [pc, #44]	@ (800e3ec <__libc_init_array+0x40>)
 800e3be:	4c0c      	ldr	r4, [pc, #48]	@ (800e3f0 <__libc_init_array+0x44>)
 800e3c0:	f002 fc14 	bl	8010bec <_init>
 800e3c4:	1b64      	subs	r4, r4, r5
 800e3c6:	10a4      	asrs	r4, r4, #2
 800e3c8:	2600      	movs	r6, #0
 800e3ca:	42a6      	cmp	r6, r4
 800e3cc:	d105      	bne.n	800e3da <__libc_init_array+0x2e>
 800e3ce:	bd70      	pop	{r4, r5, r6, pc}
 800e3d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3d4:	4798      	blx	r3
 800e3d6:	3601      	adds	r6, #1
 800e3d8:	e7ee      	b.n	800e3b8 <__libc_init_array+0xc>
 800e3da:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3de:	4798      	blx	r3
 800e3e0:	3601      	adds	r6, #1
 800e3e2:	e7f2      	b.n	800e3ca <__libc_init_array+0x1e>
 800e3e4:	0801117c 	.word	0x0801117c
 800e3e8:	0801117c 	.word	0x0801117c
 800e3ec:	0801117c 	.word	0x0801117c
 800e3f0:	08011180 	.word	0x08011180

0800e3f4 <__retarget_lock_init_recursive>:
 800e3f4:	4770      	bx	lr

0800e3f6 <__retarget_lock_acquire_recursive>:
 800e3f6:	4770      	bx	lr

0800e3f8 <__retarget_lock_release_recursive>:
 800e3f8:	4770      	bx	lr

0800e3fa <memcpy>:
 800e3fa:	440a      	add	r2, r1
 800e3fc:	4291      	cmp	r1, r2
 800e3fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800e402:	d100      	bne.n	800e406 <memcpy+0xc>
 800e404:	4770      	bx	lr
 800e406:	b510      	push	{r4, lr}
 800e408:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e40c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e410:	4291      	cmp	r1, r2
 800e412:	d1f9      	bne.n	800e408 <memcpy+0xe>
 800e414:	bd10      	pop	{r4, pc}
	...

0800e418 <nan>:
 800e418:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e420 <nan+0x8>
 800e41c:	4770      	bx	lr
 800e41e:	bf00      	nop
 800e420:	00000000 	.word	0x00000000
 800e424:	7ff80000 	.word	0x7ff80000

0800e428 <nanf>:
 800e428:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e430 <nanf+0x8>
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	7fc00000 	.word	0x7fc00000

0800e434 <__assert_func>:
 800e434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e436:	4614      	mov	r4, r2
 800e438:	461a      	mov	r2, r3
 800e43a:	4b09      	ldr	r3, [pc, #36]	@ (800e460 <__assert_func+0x2c>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4605      	mov	r5, r0
 800e440:	68d8      	ldr	r0, [r3, #12]
 800e442:	b954      	cbnz	r4, 800e45a <__assert_func+0x26>
 800e444:	4b07      	ldr	r3, [pc, #28]	@ (800e464 <__assert_func+0x30>)
 800e446:	461c      	mov	r4, r3
 800e448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e44c:	9100      	str	r1, [sp, #0]
 800e44e:	462b      	mov	r3, r5
 800e450:	4905      	ldr	r1, [pc, #20]	@ (800e468 <__assert_func+0x34>)
 800e452:	f002 f8b1 	bl	80105b8 <fiprintf>
 800e456:	f002 f8db 	bl	8010610 <abort>
 800e45a:	4b04      	ldr	r3, [pc, #16]	@ (800e46c <__assert_func+0x38>)
 800e45c:	e7f4      	b.n	800e448 <__assert_func+0x14>
 800e45e:	bf00      	nop
 800e460:	200001a4 	.word	0x200001a4
 800e464:	08010f1d 	.word	0x08010f1d
 800e468:	08010eef 	.word	0x08010eef
 800e46c:	08010ee2 	.word	0x08010ee2

0800e470 <quorem>:
 800e470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e474:	6903      	ldr	r3, [r0, #16]
 800e476:	690c      	ldr	r4, [r1, #16]
 800e478:	42a3      	cmp	r3, r4
 800e47a:	4607      	mov	r7, r0
 800e47c:	db7e      	blt.n	800e57c <quorem+0x10c>
 800e47e:	3c01      	subs	r4, #1
 800e480:	f101 0814 	add.w	r8, r1, #20
 800e484:	00a3      	lsls	r3, r4, #2
 800e486:	f100 0514 	add.w	r5, r0, #20
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e490:	9301      	str	r3, [sp, #4]
 800e492:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e496:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e49a:	3301      	adds	r3, #1
 800e49c:	429a      	cmp	r2, r3
 800e49e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4a2:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4a6:	d32e      	bcc.n	800e506 <quorem+0x96>
 800e4a8:	f04f 0a00 	mov.w	sl, #0
 800e4ac:	46c4      	mov	ip, r8
 800e4ae:	46ae      	mov	lr, r5
 800e4b0:	46d3      	mov	fp, sl
 800e4b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4b6:	b298      	uxth	r0, r3
 800e4b8:	fb06 a000 	mla	r0, r6, r0, sl
 800e4bc:	0c02      	lsrs	r2, r0, #16
 800e4be:	0c1b      	lsrs	r3, r3, #16
 800e4c0:	fb06 2303 	mla	r3, r6, r3, r2
 800e4c4:	f8de 2000 	ldr.w	r2, [lr]
 800e4c8:	b280      	uxth	r0, r0
 800e4ca:	b292      	uxth	r2, r2
 800e4cc:	1a12      	subs	r2, r2, r0
 800e4ce:	445a      	add	r2, fp
 800e4d0:	f8de 0000 	ldr.w	r0, [lr]
 800e4d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e4de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e4e2:	b292      	uxth	r2, r2
 800e4e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4e8:	45e1      	cmp	r9, ip
 800e4ea:	f84e 2b04 	str.w	r2, [lr], #4
 800e4ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4f2:	d2de      	bcs.n	800e4b2 <quorem+0x42>
 800e4f4:	9b00      	ldr	r3, [sp, #0]
 800e4f6:	58eb      	ldr	r3, [r5, r3]
 800e4f8:	b92b      	cbnz	r3, 800e506 <quorem+0x96>
 800e4fa:	9b01      	ldr	r3, [sp, #4]
 800e4fc:	3b04      	subs	r3, #4
 800e4fe:	429d      	cmp	r5, r3
 800e500:	461a      	mov	r2, r3
 800e502:	d32f      	bcc.n	800e564 <quorem+0xf4>
 800e504:	613c      	str	r4, [r7, #16]
 800e506:	4638      	mov	r0, r7
 800e508:	f001 fc58 	bl	800fdbc <__mcmp>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	db25      	blt.n	800e55c <quorem+0xec>
 800e510:	4629      	mov	r1, r5
 800e512:	2000      	movs	r0, #0
 800e514:	f858 2b04 	ldr.w	r2, [r8], #4
 800e518:	f8d1 c000 	ldr.w	ip, [r1]
 800e51c:	fa1f fe82 	uxth.w	lr, r2
 800e520:	fa1f f38c 	uxth.w	r3, ip
 800e524:	eba3 030e 	sub.w	r3, r3, lr
 800e528:	4403      	add	r3, r0
 800e52a:	0c12      	lsrs	r2, r2, #16
 800e52c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e530:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e534:	b29b      	uxth	r3, r3
 800e536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e53a:	45c1      	cmp	r9, r8
 800e53c:	f841 3b04 	str.w	r3, [r1], #4
 800e540:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e544:	d2e6      	bcs.n	800e514 <quorem+0xa4>
 800e546:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e54a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e54e:	b922      	cbnz	r2, 800e55a <quorem+0xea>
 800e550:	3b04      	subs	r3, #4
 800e552:	429d      	cmp	r5, r3
 800e554:	461a      	mov	r2, r3
 800e556:	d30b      	bcc.n	800e570 <quorem+0x100>
 800e558:	613c      	str	r4, [r7, #16]
 800e55a:	3601      	adds	r6, #1
 800e55c:	4630      	mov	r0, r6
 800e55e:	b003      	add	sp, #12
 800e560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e564:	6812      	ldr	r2, [r2, #0]
 800e566:	3b04      	subs	r3, #4
 800e568:	2a00      	cmp	r2, #0
 800e56a:	d1cb      	bne.n	800e504 <quorem+0x94>
 800e56c:	3c01      	subs	r4, #1
 800e56e:	e7c6      	b.n	800e4fe <quorem+0x8e>
 800e570:	6812      	ldr	r2, [r2, #0]
 800e572:	3b04      	subs	r3, #4
 800e574:	2a00      	cmp	r2, #0
 800e576:	d1ef      	bne.n	800e558 <quorem+0xe8>
 800e578:	3c01      	subs	r4, #1
 800e57a:	e7ea      	b.n	800e552 <quorem+0xe2>
 800e57c:	2000      	movs	r0, #0
 800e57e:	e7ee      	b.n	800e55e <quorem+0xee>

0800e580 <_dtoa_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	69c7      	ldr	r7, [r0, #28]
 800e586:	b099      	sub	sp, #100	@ 0x64
 800e588:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e58c:	ec55 4b10 	vmov	r4, r5, d0
 800e590:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e592:	9109      	str	r1, [sp, #36]	@ 0x24
 800e594:	4683      	mov	fp, r0
 800e596:	920e      	str	r2, [sp, #56]	@ 0x38
 800e598:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e59a:	b97f      	cbnz	r7, 800e5bc <_dtoa_r+0x3c>
 800e59c:	2010      	movs	r0, #16
 800e59e:	f7fd ff89 	bl	800c4b4 <malloc>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e5a8:	b920      	cbnz	r0, 800e5b4 <_dtoa_r+0x34>
 800e5aa:	4ba7      	ldr	r3, [pc, #668]	@ (800e848 <_dtoa_r+0x2c8>)
 800e5ac:	21ef      	movs	r1, #239	@ 0xef
 800e5ae:	48a7      	ldr	r0, [pc, #668]	@ (800e84c <_dtoa_r+0x2cc>)
 800e5b0:	f7ff ff40 	bl	800e434 <__assert_func>
 800e5b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e5b8:	6007      	str	r7, [r0, #0]
 800e5ba:	60c7      	str	r7, [r0, #12]
 800e5bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5c0:	6819      	ldr	r1, [r3, #0]
 800e5c2:	b159      	cbz	r1, 800e5dc <_dtoa_r+0x5c>
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	604a      	str	r2, [r1, #4]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	4093      	lsls	r3, r2
 800e5cc:	608b      	str	r3, [r1, #8]
 800e5ce:	4658      	mov	r0, fp
 800e5d0:	f001 f970 	bl	800f8b4 <_Bfree>
 800e5d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	1e2b      	subs	r3, r5, #0
 800e5de:	bfb9      	ittee	lt
 800e5e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5e4:	9303      	strlt	r3, [sp, #12]
 800e5e6:	2300      	movge	r3, #0
 800e5e8:	6033      	strge	r3, [r6, #0]
 800e5ea:	9f03      	ldr	r7, [sp, #12]
 800e5ec:	4b98      	ldr	r3, [pc, #608]	@ (800e850 <_dtoa_r+0x2d0>)
 800e5ee:	bfbc      	itt	lt
 800e5f0:	2201      	movlt	r2, #1
 800e5f2:	6032      	strlt	r2, [r6, #0]
 800e5f4:	43bb      	bics	r3, r7
 800e5f6:	d112      	bne.n	800e61e <_dtoa_r+0x9e>
 800e5f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e5fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5fe:	6013      	str	r3, [r2, #0]
 800e600:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e604:	4323      	orrs	r3, r4
 800e606:	f000 854d 	beq.w	800f0a4 <_dtoa_r+0xb24>
 800e60a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e60c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e864 <_dtoa_r+0x2e4>
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 854f 	beq.w	800f0b4 <_dtoa_r+0xb34>
 800e616:	f10a 0303 	add.w	r3, sl, #3
 800e61a:	f000 bd49 	b.w	800f0b0 <_dtoa_r+0xb30>
 800e61e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e622:	2200      	movs	r2, #0
 800e624:	ec51 0b17 	vmov	r0, r1, d7
 800e628:	2300      	movs	r3, #0
 800e62a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e62e:	f7f2 fa73 	bl	8000b18 <__aeabi_dcmpeq>
 800e632:	4680      	mov	r8, r0
 800e634:	b158      	cbz	r0, 800e64e <_dtoa_r+0xce>
 800e636:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e638:	2301      	movs	r3, #1
 800e63a:	6013      	str	r3, [r2, #0]
 800e63c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e63e:	b113      	cbz	r3, 800e646 <_dtoa_r+0xc6>
 800e640:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e642:	4b84      	ldr	r3, [pc, #528]	@ (800e854 <_dtoa_r+0x2d4>)
 800e644:	6013      	str	r3, [r2, #0]
 800e646:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e868 <_dtoa_r+0x2e8>
 800e64a:	f000 bd33 	b.w	800f0b4 <_dtoa_r+0xb34>
 800e64e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e652:	aa16      	add	r2, sp, #88	@ 0x58
 800e654:	a917      	add	r1, sp, #92	@ 0x5c
 800e656:	4658      	mov	r0, fp
 800e658:	f001 fcd0 	bl	800fffc <__d2b>
 800e65c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e660:	4681      	mov	r9, r0
 800e662:	2e00      	cmp	r6, #0
 800e664:	d077      	beq.n	800e756 <_dtoa_r+0x1d6>
 800e666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e668:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e66c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e674:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e678:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e67c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e680:	4619      	mov	r1, r3
 800e682:	2200      	movs	r2, #0
 800e684:	4b74      	ldr	r3, [pc, #464]	@ (800e858 <_dtoa_r+0x2d8>)
 800e686:	f7f1 fe27 	bl	80002d8 <__aeabi_dsub>
 800e68a:	a369      	add	r3, pc, #420	@ (adr r3, 800e830 <_dtoa_r+0x2b0>)
 800e68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e690:	f7f1 ffda 	bl	8000648 <__aeabi_dmul>
 800e694:	a368      	add	r3, pc, #416	@ (adr r3, 800e838 <_dtoa_r+0x2b8>)
 800e696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69a:	f7f1 fe1f 	bl	80002dc <__adddf3>
 800e69e:	4604      	mov	r4, r0
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	f7f1 ff66 	bl	8000574 <__aeabi_i2d>
 800e6a8:	a365      	add	r3, pc, #404	@ (adr r3, 800e840 <_dtoa_r+0x2c0>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	f7f1 ffcb 	bl	8000648 <__aeabi_dmul>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	f7f1 fe0f 	bl	80002dc <__adddf3>
 800e6be:	4604      	mov	r4, r0
 800e6c0:	460d      	mov	r5, r1
 800e6c2:	f7f2 fa71 	bl	8000ba8 <__aeabi_d2iz>
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	4607      	mov	r7, r0
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	f7f2 fa2c 	bl	8000b2c <__aeabi_dcmplt>
 800e6d4:	b140      	cbz	r0, 800e6e8 <_dtoa_r+0x168>
 800e6d6:	4638      	mov	r0, r7
 800e6d8:	f7f1 ff4c 	bl	8000574 <__aeabi_i2d>
 800e6dc:	4622      	mov	r2, r4
 800e6de:	462b      	mov	r3, r5
 800e6e0:	f7f2 fa1a 	bl	8000b18 <__aeabi_dcmpeq>
 800e6e4:	b900      	cbnz	r0, 800e6e8 <_dtoa_r+0x168>
 800e6e6:	3f01      	subs	r7, #1
 800e6e8:	2f16      	cmp	r7, #22
 800e6ea:	d851      	bhi.n	800e790 <_dtoa_r+0x210>
 800e6ec:	4b5b      	ldr	r3, [pc, #364]	@ (800e85c <_dtoa_r+0x2dc>)
 800e6ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6fa:	f7f2 fa17 	bl	8000b2c <__aeabi_dcmplt>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d048      	beq.n	800e794 <_dtoa_r+0x214>
 800e702:	3f01      	subs	r7, #1
 800e704:	2300      	movs	r3, #0
 800e706:	9312      	str	r3, [sp, #72]	@ 0x48
 800e708:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e70a:	1b9b      	subs	r3, r3, r6
 800e70c:	1e5a      	subs	r2, r3, #1
 800e70e:	bf44      	itt	mi
 800e710:	f1c3 0801 	rsbmi	r8, r3, #1
 800e714:	2300      	movmi	r3, #0
 800e716:	9208      	str	r2, [sp, #32]
 800e718:	bf54      	ite	pl
 800e71a:	f04f 0800 	movpl.w	r8, #0
 800e71e:	9308      	strmi	r3, [sp, #32]
 800e720:	2f00      	cmp	r7, #0
 800e722:	db39      	blt.n	800e798 <_dtoa_r+0x218>
 800e724:	9b08      	ldr	r3, [sp, #32]
 800e726:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e728:	443b      	add	r3, r7
 800e72a:	9308      	str	r3, [sp, #32]
 800e72c:	2300      	movs	r3, #0
 800e72e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e732:	2b09      	cmp	r3, #9
 800e734:	d864      	bhi.n	800e800 <_dtoa_r+0x280>
 800e736:	2b05      	cmp	r3, #5
 800e738:	bfc4      	itt	gt
 800e73a:	3b04      	subgt	r3, #4
 800e73c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e740:	f1a3 0302 	sub.w	r3, r3, #2
 800e744:	bfcc      	ite	gt
 800e746:	2400      	movgt	r4, #0
 800e748:	2401      	movle	r4, #1
 800e74a:	2b03      	cmp	r3, #3
 800e74c:	d863      	bhi.n	800e816 <_dtoa_r+0x296>
 800e74e:	e8df f003 	tbb	[pc, r3]
 800e752:	372a      	.short	0x372a
 800e754:	5535      	.short	0x5535
 800e756:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e75a:	441e      	add	r6, r3
 800e75c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e760:	2b20      	cmp	r3, #32
 800e762:	bfc1      	itttt	gt
 800e764:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e768:	409f      	lslgt	r7, r3
 800e76a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e76e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e772:	bfd6      	itet	le
 800e774:	f1c3 0320 	rsble	r3, r3, #32
 800e778:	ea47 0003 	orrgt.w	r0, r7, r3
 800e77c:	fa04 f003 	lslle.w	r0, r4, r3
 800e780:	f7f1 fee8 	bl	8000554 <__aeabi_ui2d>
 800e784:	2201      	movs	r2, #1
 800e786:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e78a:	3e01      	subs	r6, #1
 800e78c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e78e:	e777      	b.n	800e680 <_dtoa_r+0x100>
 800e790:	2301      	movs	r3, #1
 800e792:	e7b8      	b.n	800e706 <_dtoa_r+0x186>
 800e794:	9012      	str	r0, [sp, #72]	@ 0x48
 800e796:	e7b7      	b.n	800e708 <_dtoa_r+0x188>
 800e798:	427b      	negs	r3, r7
 800e79a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e79c:	2300      	movs	r3, #0
 800e79e:	eba8 0807 	sub.w	r8, r8, r7
 800e7a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7a4:	e7c4      	b.n	800e730 <_dtoa_r+0x1b0>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	dc35      	bgt.n	800e81c <_dtoa_r+0x29c>
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	9307      	str	r3, [sp, #28]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7ba:	e00b      	b.n	800e7d4 <_dtoa_r+0x254>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e7f3      	b.n	800e7a8 <_dtoa_r+0x228>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7c6:	18fb      	adds	r3, r7, r3
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	9307      	str	r3, [sp, #28]
 800e7d0:	bfb8      	it	lt
 800e7d2:	2301      	movlt	r3, #1
 800e7d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e7d8:	2100      	movs	r1, #0
 800e7da:	2204      	movs	r2, #4
 800e7dc:	f102 0514 	add.w	r5, r2, #20
 800e7e0:	429d      	cmp	r5, r3
 800e7e2:	d91f      	bls.n	800e824 <_dtoa_r+0x2a4>
 800e7e4:	6041      	str	r1, [r0, #4]
 800e7e6:	4658      	mov	r0, fp
 800e7e8:	f001 f824 	bl	800f834 <_Balloc>
 800e7ec:	4682      	mov	sl, r0
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d13c      	bne.n	800e86c <_dtoa_r+0x2ec>
 800e7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800e860 <_dtoa_r+0x2e0>)
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e7fa:	e6d8      	b.n	800e5ae <_dtoa_r+0x2e>
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e7e0      	b.n	800e7c2 <_dtoa_r+0x242>
 800e800:	2401      	movs	r4, #1
 800e802:	2300      	movs	r3, #0
 800e804:	9309      	str	r3, [sp, #36]	@ 0x24
 800e806:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e808:	f04f 33ff 	mov.w	r3, #4294967295
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	9307      	str	r3, [sp, #28]
 800e810:	2200      	movs	r2, #0
 800e812:	2312      	movs	r3, #18
 800e814:	e7d0      	b.n	800e7b8 <_dtoa_r+0x238>
 800e816:	2301      	movs	r3, #1
 800e818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e81a:	e7f5      	b.n	800e808 <_dtoa_r+0x288>
 800e81c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	9307      	str	r3, [sp, #28]
 800e822:	e7d7      	b.n	800e7d4 <_dtoa_r+0x254>
 800e824:	3101      	adds	r1, #1
 800e826:	0052      	lsls	r2, r2, #1
 800e828:	e7d8      	b.n	800e7dc <_dtoa_r+0x25c>
 800e82a:	bf00      	nop
 800e82c:	f3af 8000 	nop.w
 800e830:	636f4361 	.word	0x636f4361
 800e834:	3fd287a7 	.word	0x3fd287a7
 800e838:	8b60c8b3 	.word	0x8b60c8b3
 800e83c:	3fc68a28 	.word	0x3fc68a28
 800e840:	509f79fb 	.word	0x509f79fb
 800e844:	3fd34413 	.word	0x3fd34413
 800e848:	08010f2b 	.word	0x08010f2b
 800e84c:	08010f42 	.word	0x08010f42
 800e850:	7ff00000 	.word	0x7ff00000
 800e854:	08010eb2 	.word	0x08010eb2
 800e858:	3ff80000 	.word	0x3ff80000
 800e85c:	08011098 	.word	0x08011098
 800e860:	08010f9a 	.word	0x08010f9a
 800e864:	08010f27 	.word	0x08010f27
 800e868:	08010eb1 	.word	0x08010eb1
 800e86c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e870:	6018      	str	r0, [r3, #0]
 800e872:	9b07      	ldr	r3, [sp, #28]
 800e874:	2b0e      	cmp	r3, #14
 800e876:	f200 80a4 	bhi.w	800e9c2 <_dtoa_r+0x442>
 800e87a:	2c00      	cmp	r4, #0
 800e87c:	f000 80a1 	beq.w	800e9c2 <_dtoa_r+0x442>
 800e880:	2f00      	cmp	r7, #0
 800e882:	dd33      	ble.n	800e8ec <_dtoa_r+0x36c>
 800e884:	4bad      	ldr	r3, [pc, #692]	@ (800eb3c <_dtoa_r+0x5bc>)
 800e886:	f007 020f 	and.w	r2, r7, #15
 800e88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e88e:	ed93 7b00 	vldr	d7, [r3]
 800e892:	05f8      	lsls	r0, r7, #23
 800e894:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e898:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e89c:	d516      	bpl.n	800e8cc <_dtoa_r+0x34c>
 800e89e:	4ba8      	ldr	r3, [pc, #672]	@ (800eb40 <_dtoa_r+0x5c0>)
 800e8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8a8:	f7f1 fff8 	bl	800089c <__aeabi_ddiv>
 800e8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8b0:	f004 040f 	and.w	r4, r4, #15
 800e8b4:	2603      	movs	r6, #3
 800e8b6:	4da2      	ldr	r5, [pc, #648]	@ (800eb40 <_dtoa_r+0x5c0>)
 800e8b8:	b954      	cbnz	r4, 800e8d0 <_dtoa_r+0x350>
 800e8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8c2:	f7f1 ffeb 	bl	800089c <__aeabi_ddiv>
 800e8c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ca:	e028      	b.n	800e91e <_dtoa_r+0x39e>
 800e8cc:	2602      	movs	r6, #2
 800e8ce:	e7f2      	b.n	800e8b6 <_dtoa_r+0x336>
 800e8d0:	07e1      	lsls	r1, r4, #31
 800e8d2:	d508      	bpl.n	800e8e6 <_dtoa_r+0x366>
 800e8d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8dc:	f7f1 feb4 	bl	8000648 <__aeabi_dmul>
 800e8e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8e4:	3601      	adds	r6, #1
 800e8e6:	1064      	asrs	r4, r4, #1
 800e8e8:	3508      	adds	r5, #8
 800e8ea:	e7e5      	b.n	800e8b8 <_dtoa_r+0x338>
 800e8ec:	f000 80d2 	beq.w	800ea94 <_dtoa_r+0x514>
 800e8f0:	427c      	negs	r4, r7
 800e8f2:	4b92      	ldr	r3, [pc, #584]	@ (800eb3c <_dtoa_r+0x5bc>)
 800e8f4:	4d92      	ldr	r5, [pc, #584]	@ (800eb40 <_dtoa_r+0x5c0>)
 800e8f6:	f004 020f 	and.w	r2, r4, #15
 800e8fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e902:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e906:	f7f1 fe9f 	bl	8000648 <__aeabi_dmul>
 800e90a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e90e:	1124      	asrs	r4, r4, #4
 800e910:	2300      	movs	r3, #0
 800e912:	2602      	movs	r6, #2
 800e914:	2c00      	cmp	r4, #0
 800e916:	f040 80b2 	bne.w	800ea7e <_dtoa_r+0x4fe>
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1d3      	bne.n	800e8c6 <_dtoa_r+0x346>
 800e91e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e920:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	f000 80b7 	beq.w	800ea98 <_dtoa_r+0x518>
 800e92a:	4b86      	ldr	r3, [pc, #536]	@ (800eb44 <_dtoa_r+0x5c4>)
 800e92c:	2200      	movs	r2, #0
 800e92e:	4620      	mov	r0, r4
 800e930:	4629      	mov	r1, r5
 800e932:	f7f2 f8fb 	bl	8000b2c <__aeabi_dcmplt>
 800e936:	2800      	cmp	r0, #0
 800e938:	f000 80ae 	beq.w	800ea98 <_dtoa_r+0x518>
 800e93c:	9b07      	ldr	r3, [sp, #28]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f000 80aa 	beq.w	800ea98 <_dtoa_r+0x518>
 800e944:	9b00      	ldr	r3, [sp, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	dd37      	ble.n	800e9ba <_dtoa_r+0x43a>
 800e94a:	1e7b      	subs	r3, r7, #1
 800e94c:	9304      	str	r3, [sp, #16]
 800e94e:	4620      	mov	r0, r4
 800e950:	4b7d      	ldr	r3, [pc, #500]	@ (800eb48 <_dtoa_r+0x5c8>)
 800e952:	2200      	movs	r2, #0
 800e954:	4629      	mov	r1, r5
 800e956:	f7f1 fe77 	bl	8000648 <__aeabi_dmul>
 800e95a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e95e:	9c00      	ldr	r4, [sp, #0]
 800e960:	3601      	adds	r6, #1
 800e962:	4630      	mov	r0, r6
 800e964:	f7f1 fe06 	bl	8000574 <__aeabi_i2d>
 800e968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e96c:	f7f1 fe6c 	bl	8000648 <__aeabi_dmul>
 800e970:	4b76      	ldr	r3, [pc, #472]	@ (800eb4c <_dtoa_r+0x5cc>)
 800e972:	2200      	movs	r2, #0
 800e974:	f7f1 fcb2 	bl	80002dc <__adddf3>
 800e978:	4605      	mov	r5, r0
 800e97a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e97e:	2c00      	cmp	r4, #0
 800e980:	f040 808d 	bne.w	800ea9e <_dtoa_r+0x51e>
 800e984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e988:	4b71      	ldr	r3, [pc, #452]	@ (800eb50 <_dtoa_r+0x5d0>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	f7f1 fca4 	bl	80002d8 <__aeabi_dsub>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e998:	462a      	mov	r2, r5
 800e99a:	4633      	mov	r3, r6
 800e99c:	f7f2 f8e4 	bl	8000b68 <__aeabi_dcmpgt>
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	f040 828b 	bne.w	800eebc <_dtoa_r+0x93c>
 800e9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9aa:	462a      	mov	r2, r5
 800e9ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e9b0:	f7f2 f8bc 	bl	8000b2c <__aeabi_dcmplt>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	f040 8128 	bne.w	800ec0a <_dtoa_r+0x68a>
 800e9ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e9be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e9c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	f2c0 815a 	blt.w	800ec7e <_dtoa_r+0x6fe>
 800e9ca:	2f0e      	cmp	r7, #14
 800e9cc:	f300 8157 	bgt.w	800ec7e <_dtoa_r+0x6fe>
 800e9d0:	4b5a      	ldr	r3, [pc, #360]	@ (800eb3c <_dtoa_r+0x5bc>)
 800e9d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9d6:	ed93 7b00 	vldr	d7, [r3]
 800e9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	ed8d 7b00 	vstr	d7, [sp]
 800e9e2:	da03      	bge.n	800e9ec <_dtoa_r+0x46c>
 800e9e4:	9b07      	ldr	r3, [sp, #28]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f340 8101 	ble.w	800ebee <_dtoa_r+0x66e>
 800e9ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e9f0:	4656      	mov	r6, sl
 800e9f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	f7f1 ff4f 	bl	800089c <__aeabi_ddiv>
 800e9fe:	f7f2 f8d3 	bl	8000ba8 <__aeabi_d2iz>
 800ea02:	4680      	mov	r8, r0
 800ea04:	f7f1 fdb6 	bl	8000574 <__aeabi_i2d>
 800ea08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea0c:	f7f1 fe1c 	bl	8000648 <__aeabi_dmul>
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	4620      	mov	r0, r4
 800ea16:	4629      	mov	r1, r5
 800ea18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea1c:	f7f1 fc5c 	bl	80002d8 <__aeabi_dsub>
 800ea20:	f806 4b01 	strb.w	r4, [r6], #1
 800ea24:	9d07      	ldr	r5, [sp, #28]
 800ea26:	eba6 040a 	sub.w	r4, r6, sl
 800ea2a:	42a5      	cmp	r5, r4
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	f040 8117 	bne.w	800ec62 <_dtoa_r+0x6e2>
 800ea34:	f7f1 fc52 	bl	80002dc <__adddf3>
 800ea38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	460d      	mov	r5, r1
 800ea40:	f7f2 f892 	bl	8000b68 <__aeabi_dcmpgt>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f040 80f9 	bne.w	800ec3c <_dtoa_r+0x6bc>
 800ea4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4629      	mov	r1, r5
 800ea52:	f7f2 f861 	bl	8000b18 <__aeabi_dcmpeq>
 800ea56:	b118      	cbz	r0, 800ea60 <_dtoa_r+0x4e0>
 800ea58:	f018 0f01 	tst.w	r8, #1
 800ea5c:	f040 80ee 	bne.w	800ec3c <_dtoa_r+0x6bc>
 800ea60:	4649      	mov	r1, r9
 800ea62:	4658      	mov	r0, fp
 800ea64:	f000 ff26 	bl	800f8b4 <_Bfree>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	7033      	strb	r3, [r6, #0]
 800ea6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea6e:	3701      	adds	r7, #1
 800ea70:	601f      	str	r7, [r3, #0]
 800ea72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 831d 	beq.w	800f0b4 <_dtoa_r+0xb34>
 800ea7a:	601e      	str	r6, [r3, #0]
 800ea7c:	e31a      	b.n	800f0b4 <_dtoa_r+0xb34>
 800ea7e:	07e2      	lsls	r2, r4, #31
 800ea80:	d505      	bpl.n	800ea8e <_dtoa_r+0x50e>
 800ea82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea86:	f7f1 fddf 	bl	8000648 <__aeabi_dmul>
 800ea8a:	3601      	adds	r6, #1
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	1064      	asrs	r4, r4, #1
 800ea90:	3508      	adds	r5, #8
 800ea92:	e73f      	b.n	800e914 <_dtoa_r+0x394>
 800ea94:	2602      	movs	r6, #2
 800ea96:	e742      	b.n	800e91e <_dtoa_r+0x39e>
 800ea98:	9c07      	ldr	r4, [sp, #28]
 800ea9a:	9704      	str	r7, [sp, #16]
 800ea9c:	e761      	b.n	800e962 <_dtoa_r+0x3e2>
 800ea9e:	4b27      	ldr	r3, [pc, #156]	@ (800eb3c <_dtoa_r+0x5bc>)
 800eaa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eaa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eaa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eaaa:	4454      	add	r4, sl
 800eaac:	2900      	cmp	r1, #0
 800eaae:	d053      	beq.n	800eb58 <_dtoa_r+0x5d8>
 800eab0:	4928      	ldr	r1, [pc, #160]	@ (800eb54 <_dtoa_r+0x5d4>)
 800eab2:	2000      	movs	r0, #0
 800eab4:	f7f1 fef2 	bl	800089c <__aeabi_ddiv>
 800eab8:	4633      	mov	r3, r6
 800eaba:	462a      	mov	r2, r5
 800eabc:	f7f1 fc0c 	bl	80002d8 <__aeabi_dsub>
 800eac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eac4:	4656      	mov	r6, sl
 800eac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaca:	f7f2 f86d 	bl	8000ba8 <__aeabi_d2iz>
 800eace:	4605      	mov	r5, r0
 800ead0:	f7f1 fd50 	bl	8000574 <__aeabi_i2d>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eadc:	f7f1 fbfc 	bl	80002d8 <__aeabi_dsub>
 800eae0:	3530      	adds	r5, #48	@ 0x30
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eaea:	f806 5b01 	strb.w	r5, [r6], #1
 800eaee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eaf2:	f7f2 f81b 	bl	8000b2c <__aeabi_dcmplt>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d171      	bne.n	800ebde <_dtoa_r+0x65e>
 800eafa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eafe:	4911      	ldr	r1, [pc, #68]	@ (800eb44 <_dtoa_r+0x5c4>)
 800eb00:	2000      	movs	r0, #0
 800eb02:	f7f1 fbe9 	bl	80002d8 <__aeabi_dsub>
 800eb06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb0a:	f7f2 f80f 	bl	8000b2c <__aeabi_dcmplt>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f040 8095 	bne.w	800ec3e <_dtoa_r+0x6be>
 800eb14:	42a6      	cmp	r6, r4
 800eb16:	f43f af50 	beq.w	800e9ba <_dtoa_r+0x43a>
 800eb1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb1e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb48 <_dtoa_r+0x5c8>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	f7f1 fd91 	bl	8000648 <__aeabi_dmul>
 800eb26:	4b08      	ldr	r3, [pc, #32]	@ (800eb48 <_dtoa_r+0x5c8>)
 800eb28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb32:	f7f1 fd89 	bl	8000648 <__aeabi_dmul>
 800eb36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb3a:	e7c4      	b.n	800eac6 <_dtoa_r+0x546>
 800eb3c:	08011098 	.word	0x08011098
 800eb40:	08011070 	.word	0x08011070
 800eb44:	3ff00000 	.word	0x3ff00000
 800eb48:	40240000 	.word	0x40240000
 800eb4c:	401c0000 	.word	0x401c0000
 800eb50:	40140000 	.word	0x40140000
 800eb54:	3fe00000 	.word	0x3fe00000
 800eb58:	4631      	mov	r1, r6
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f7f1 fd74 	bl	8000648 <__aeabi_dmul>
 800eb60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb64:	9415      	str	r4, [sp, #84]	@ 0x54
 800eb66:	4656      	mov	r6, sl
 800eb68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb6c:	f7f2 f81c 	bl	8000ba8 <__aeabi_d2iz>
 800eb70:	4605      	mov	r5, r0
 800eb72:	f7f1 fcff 	bl	8000574 <__aeabi_i2d>
 800eb76:	4602      	mov	r2, r0
 800eb78:	460b      	mov	r3, r1
 800eb7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb7e:	f7f1 fbab 	bl	80002d8 <__aeabi_dsub>
 800eb82:	3530      	adds	r5, #48	@ 0x30
 800eb84:	f806 5b01 	strb.w	r5, [r6], #1
 800eb88:	4602      	mov	r2, r0
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	42a6      	cmp	r6, r4
 800eb8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb92:	f04f 0200 	mov.w	r2, #0
 800eb96:	d124      	bne.n	800ebe2 <_dtoa_r+0x662>
 800eb98:	4bac      	ldr	r3, [pc, #688]	@ (800ee4c <_dtoa_r+0x8cc>)
 800eb9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb9e:	f7f1 fb9d 	bl	80002dc <__adddf3>
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebaa:	f7f1 ffdd 	bl	8000b68 <__aeabi_dcmpgt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d145      	bne.n	800ec3e <_dtoa_r+0x6be>
 800ebb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ebb6:	49a5      	ldr	r1, [pc, #660]	@ (800ee4c <_dtoa_r+0x8cc>)
 800ebb8:	2000      	movs	r0, #0
 800ebba:	f7f1 fb8d 	bl	80002d8 <__aeabi_dsub>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebc6:	f7f1 ffb1 	bl	8000b2c <__aeabi_dcmplt>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	f43f aef5 	beq.w	800e9ba <_dtoa_r+0x43a>
 800ebd0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ebd2:	1e73      	subs	r3, r6, #1
 800ebd4:	9315      	str	r3, [sp, #84]	@ 0x54
 800ebd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebda:	2b30      	cmp	r3, #48	@ 0x30
 800ebdc:	d0f8      	beq.n	800ebd0 <_dtoa_r+0x650>
 800ebde:	9f04      	ldr	r7, [sp, #16]
 800ebe0:	e73e      	b.n	800ea60 <_dtoa_r+0x4e0>
 800ebe2:	4b9b      	ldr	r3, [pc, #620]	@ (800ee50 <_dtoa_r+0x8d0>)
 800ebe4:	f7f1 fd30 	bl	8000648 <__aeabi_dmul>
 800ebe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebec:	e7bc      	b.n	800eb68 <_dtoa_r+0x5e8>
 800ebee:	d10c      	bne.n	800ec0a <_dtoa_r+0x68a>
 800ebf0:	4b98      	ldr	r3, [pc, #608]	@ (800ee54 <_dtoa_r+0x8d4>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebf8:	f7f1 fd26 	bl	8000648 <__aeabi_dmul>
 800ebfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec00:	f7f1 ffa8 	bl	8000b54 <__aeabi_dcmpge>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	f000 8157 	beq.w	800eeb8 <_dtoa_r+0x938>
 800ec0a:	2400      	movs	r4, #0
 800ec0c:	4625      	mov	r5, r4
 800ec0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec10:	43db      	mvns	r3, r3
 800ec12:	9304      	str	r3, [sp, #16]
 800ec14:	4656      	mov	r6, sl
 800ec16:	2700      	movs	r7, #0
 800ec18:	4621      	mov	r1, r4
 800ec1a:	4658      	mov	r0, fp
 800ec1c:	f000 fe4a 	bl	800f8b4 <_Bfree>
 800ec20:	2d00      	cmp	r5, #0
 800ec22:	d0dc      	beq.n	800ebde <_dtoa_r+0x65e>
 800ec24:	b12f      	cbz	r7, 800ec32 <_dtoa_r+0x6b2>
 800ec26:	42af      	cmp	r7, r5
 800ec28:	d003      	beq.n	800ec32 <_dtoa_r+0x6b2>
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	4658      	mov	r0, fp
 800ec2e:	f000 fe41 	bl	800f8b4 <_Bfree>
 800ec32:	4629      	mov	r1, r5
 800ec34:	4658      	mov	r0, fp
 800ec36:	f000 fe3d 	bl	800f8b4 <_Bfree>
 800ec3a:	e7d0      	b.n	800ebde <_dtoa_r+0x65e>
 800ec3c:	9704      	str	r7, [sp, #16]
 800ec3e:	4633      	mov	r3, r6
 800ec40:	461e      	mov	r6, r3
 800ec42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec46:	2a39      	cmp	r2, #57	@ 0x39
 800ec48:	d107      	bne.n	800ec5a <_dtoa_r+0x6da>
 800ec4a:	459a      	cmp	sl, r3
 800ec4c:	d1f8      	bne.n	800ec40 <_dtoa_r+0x6c0>
 800ec4e:	9a04      	ldr	r2, [sp, #16]
 800ec50:	3201      	adds	r2, #1
 800ec52:	9204      	str	r2, [sp, #16]
 800ec54:	2230      	movs	r2, #48	@ 0x30
 800ec56:	f88a 2000 	strb.w	r2, [sl]
 800ec5a:	781a      	ldrb	r2, [r3, #0]
 800ec5c:	3201      	adds	r2, #1
 800ec5e:	701a      	strb	r2, [r3, #0]
 800ec60:	e7bd      	b.n	800ebde <_dtoa_r+0x65e>
 800ec62:	4b7b      	ldr	r3, [pc, #492]	@ (800ee50 <_dtoa_r+0x8d0>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	f7f1 fcef 	bl	8000648 <__aeabi_dmul>
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	4604      	mov	r4, r0
 800ec70:	460d      	mov	r5, r1
 800ec72:	f7f1 ff51 	bl	8000b18 <__aeabi_dcmpeq>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f43f aebb 	beq.w	800e9f2 <_dtoa_r+0x472>
 800ec7c:	e6f0      	b.n	800ea60 <_dtoa_r+0x4e0>
 800ec7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec80:	2a00      	cmp	r2, #0
 800ec82:	f000 80db 	beq.w	800ee3c <_dtoa_r+0x8bc>
 800ec86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec88:	2a01      	cmp	r2, #1
 800ec8a:	f300 80bf 	bgt.w	800ee0c <_dtoa_r+0x88c>
 800ec8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec90:	2a00      	cmp	r2, #0
 800ec92:	f000 80b7 	beq.w	800ee04 <_dtoa_r+0x884>
 800ec96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ec9c:	4646      	mov	r6, r8
 800ec9e:	9a08      	ldr	r2, [sp, #32]
 800eca0:	2101      	movs	r1, #1
 800eca2:	441a      	add	r2, r3
 800eca4:	4658      	mov	r0, fp
 800eca6:	4498      	add	r8, r3
 800eca8:	9208      	str	r2, [sp, #32]
 800ecaa:	f000 ff01 	bl	800fab0 <__i2b>
 800ecae:	4605      	mov	r5, r0
 800ecb0:	b15e      	cbz	r6, 800ecca <_dtoa_r+0x74a>
 800ecb2:	9b08      	ldr	r3, [sp, #32]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	dd08      	ble.n	800ecca <_dtoa_r+0x74a>
 800ecb8:	42b3      	cmp	r3, r6
 800ecba:	9a08      	ldr	r2, [sp, #32]
 800ecbc:	bfa8      	it	ge
 800ecbe:	4633      	movge	r3, r6
 800ecc0:	eba8 0803 	sub.w	r8, r8, r3
 800ecc4:	1af6      	subs	r6, r6, r3
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	9308      	str	r3, [sp, #32]
 800ecca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eccc:	b1f3      	cbz	r3, 800ed0c <_dtoa_r+0x78c>
 800ecce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f000 80b7 	beq.w	800ee44 <_dtoa_r+0x8c4>
 800ecd6:	b18c      	cbz	r4, 800ecfc <_dtoa_r+0x77c>
 800ecd8:	4629      	mov	r1, r5
 800ecda:	4622      	mov	r2, r4
 800ecdc:	4658      	mov	r0, fp
 800ecde:	f000 ffa7 	bl	800fc30 <__pow5mult>
 800ece2:	464a      	mov	r2, r9
 800ece4:	4601      	mov	r1, r0
 800ece6:	4605      	mov	r5, r0
 800ece8:	4658      	mov	r0, fp
 800ecea:	f000 fef7 	bl	800fadc <__multiply>
 800ecee:	4649      	mov	r1, r9
 800ecf0:	9004      	str	r0, [sp, #16]
 800ecf2:	4658      	mov	r0, fp
 800ecf4:	f000 fdde 	bl	800f8b4 <_Bfree>
 800ecf8:	9b04      	ldr	r3, [sp, #16]
 800ecfa:	4699      	mov	r9, r3
 800ecfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecfe:	1b1a      	subs	r2, r3, r4
 800ed00:	d004      	beq.n	800ed0c <_dtoa_r+0x78c>
 800ed02:	4649      	mov	r1, r9
 800ed04:	4658      	mov	r0, fp
 800ed06:	f000 ff93 	bl	800fc30 <__pow5mult>
 800ed0a:	4681      	mov	r9, r0
 800ed0c:	2101      	movs	r1, #1
 800ed0e:	4658      	mov	r0, fp
 800ed10:	f000 fece 	bl	800fab0 <__i2b>
 800ed14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed16:	4604      	mov	r4, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f000 81cf 	beq.w	800f0bc <_dtoa_r+0xb3c>
 800ed1e:	461a      	mov	r2, r3
 800ed20:	4601      	mov	r1, r0
 800ed22:	4658      	mov	r0, fp
 800ed24:	f000 ff84 	bl	800fc30 <__pow5mult>
 800ed28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	f300 8095 	bgt.w	800ee5c <_dtoa_r+0x8dc>
 800ed32:	9b02      	ldr	r3, [sp, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f040 8087 	bne.w	800ee48 <_dtoa_r+0x8c8>
 800ed3a:	9b03      	ldr	r3, [sp, #12]
 800ed3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f040 8089 	bne.w	800ee58 <_dtoa_r+0x8d8>
 800ed46:	9b03      	ldr	r3, [sp, #12]
 800ed48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed4c:	0d1b      	lsrs	r3, r3, #20
 800ed4e:	051b      	lsls	r3, r3, #20
 800ed50:	b12b      	cbz	r3, 800ed5e <_dtoa_r+0x7de>
 800ed52:	9b08      	ldr	r3, [sp, #32]
 800ed54:	3301      	adds	r3, #1
 800ed56:	9308      	str	r3, [sp, #32]
 800ed58:	f108 0801 	add.w	r8, r8, #1
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 81b0 	beq.w	800f0c8 <_dtoa_r+0xb48>
 800ed68:	6923      	ldr	r3, [r4, #16]
 800ed6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed6e:	6918      	ldr	r0, [r3, #16]
 800ed70:	f000 fe52 	bl	800fa18 <__hi0bits>
 800ed74:	f1c0 0020 	rsb	r0, r0, #32
 800ed78:	9b08      	ldr	r3, [sp, #32]
 800ed7a:	4418      	add	r0, r3
 800ed7c:	f010 001f 	ands.w	r0, r0, #31
 800ed80:	d077      	beq.n	800ee72 <_dtoa_r+0x8f2>
 800ed82:	f1c0 0320 	rsb	r3, r0, #32
 800ed86:	2b04      	cmp	r3, #4
 800ed88:	dd6b      	ble.n	800ee62 <_dtoa_r+0x8e2>
 800ed8a:	9b08      	ldr	r3, [sp, #32]
 800ed8c:	f1c0 001c 	rsb	r0, r0, #28
 800ed90:	4403      	add	r3, r0
 800ed92:	4480      	add	r8, r0
 800ed94:	4406      	add	r6, r0
 800ed96:	9308      	str	r3, [sp, #32]
 800ed98:	f1b8 0f00 	cmp.w	r8, #0
 800ed9c:	dd05      	ble.n	800edaa <_dtoa_r+0x82a>
 800ed9e:	4649      	mov	r1, r9
 800eda0:	4642      	mov	r2, r8
 800eda2:	4658      	mov	r0, fp
 800eda4:	f000 ff9e 	bl	800fce4 <__lshift>
 800eda8:	4681      	mov	r9, r0
 800edaa:	9b08      	ldr	r3, [sp, #32]
 800edac:	2b00      	cmp	r3, #0
 800edae:	dd05      	ble.n	800edbc <_dtoa_r+0x83c>
 800edb0:	4621      	mov	r1, r4
 800edb2:	461a      	mov	r2, r3
 800edb4:	4658      	mov	r0, fp
 800edb6:	f000 ff95 	bl	800fce4 <__lshift>
 800edba:	4604      	mov	r4, r0
 800edbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d059      	beq.n	800ee76 <_dtoa_r+0x8f6>
 800edc2:	4621      	mov	r1, r4
 800edc4:	4648      	mov	r0, r9
 800edc6:	f000 fff9 	bl	800fdbc <__mcmp>
 800edca:	2800      	cmp	r0, #0
 800edcc:	da53      	bge.n	800ee76 <_dtoa_r+0x8f6>
 800edce:	1e7b      	subs	r3, r7, #1
 800edd0:	9304      	str	r3, [sp, #16]
 800edd2:	4649      	mov	r1, r9
 800edd4:	2300      	movs	r3, #0
 800edd6:	220a      	movs	r2, #10
 800edd8:	4658      	mov	r0, fp
 800edda:	f000 fd8d 	bl	800f8f8 <__multadd>
 800edde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ede0:	4681      	mov	r9, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f000 8172 	beq.w	800f0cc <_dtoa_r+0xb4c>
 800ede8:	2300      	movs	r3, #0
 800edea:	4629      	mov	r1, r5
 800edec:	220a      	movs	r2, #10
 800edee:	4658      	mov	r0, fp
 800edf0:	f000 fd82 	bl	800f8f8 <__multadd>
 800edf4:	9b00      	ldr	r3, [sp, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	4605      	mov	r5, r0
 800edfa:	dc67      	bgt.n	800eecc <_dtoa_r+0x94c>
 800edfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	dc41      	bgt.n	800ee86 <_dtoa_r+0x906>
 800ee02:	e063      	b.n	800eecc <_dtoa_r+0x94c>
 800ee04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ee06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee0a:	e746      	b.n	800ec9a <_dtoa_r+0x71a>
 800ee0c:	9b07      	ldr	r3, [sp, #28]
 800ee0e:	1e5c      	subs	r4, r3, #1
 800ee10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee12:	42a3      	cmp	r3, r4
 800ee14:	bfbf      	itttt	lt
 800ee16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ee18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ee1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ee1c:	1ae3      	sublt	r3, r4, r3
 800ee1e:	bfb4      	ite	lt
 800ee20:	18d2      	addlt	r2, r2, r3
 800ee22:	1b1c      	subge	r4, r3, r4
 800ee24:	9b07      	ldr	r3, [sp, #28]
 800ee26:	bfbc      	itt	lt
 800ee28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ee2a:	2400      	movlt	r4, #0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	bfb5      	itete	lt
 800ee30:	eba8 0603 	sublt.w	r6, r8, r3
 800ee34:	9b07      	ldrge	r3, [sp, #28]
 800ee36:	2300      	movlt	r3, #0
 800ee38:	4646      	movge	r6, r8
 800ee3a:	e730      	b.n	800ec9e <_dtoa_r+0x71e>
 800ee3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee40:	4646      	mov	r6, r8
 800ee42:	e735      	b.n	800ecb0 <_dtoa_r+0x730>
 800ee44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee46:	e75c      	b.n	800ed02 <_dtoa_r+0x782>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e788      	b.n	800ed5e <_dtoa_r+0x7de>
 800ee4c:	3fe00000 	.word	0x3fe00000
 800ee50:	40240000 	.word	0x40240000
 800ee54:	40140000 	.word	0x40140000
 800ee58:	9b02      	ldr	r3, [sp, #8]
 800ee5a:	e780      	b.n	800ed5e <_dtoa_r+0x7de>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee60:	e782      	b.n	800ed68 <_dtoa_r+0x7e8>
 800ee62:	d099      	beq.n	800ed98 <_dtoa_r+0x818>
 800ee64:	9a08      	ldr	r2, [sp, #32]
 800ee66:	331c      	adds	r3, #28
 800ee68:	441a      	add	r2, r3
 800ee6a:	4498      	add	r8, r3
 800ee6c:	441e      	add	r6, r3
 800ee6e:	9208      	str	r2, [sp, #32]
 800ee70:	e792      	b.n	800ed98 <_dtoa_r+0x818>
 800ee72:	4603      	mov	r3, r0
 800ee74:	e7f6      	b.n	800ee64 <_dtoa_r+0x8e4>
 800ee76:	9b07      	ldr	r3, [sp, #28]
 800ee78:	9704      	str	r7, [sp, #16]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	dc20      	bgt.n	800eec0 <_dtoa_r+0x940>
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee82:	2b02      	cmp	r3, #2
 800ee84:	dd1e      	ble.n	800eec4 <_dtoa_r+0x944>
 800ee86:	9b00      	ldr	r3, [sp, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f47f aec0 	bne.w	800ec0e <_dtoa_r+0x68e>
 800ee8e:	4621      	mov	r1, r4
 800ee90:	2205      	movs	r2, #5
 800ee92:	4658      	mov	r0, fp
 800ee94:	f000 fd30 	bl	800f8f8 <__multadd>
 800ee98:	4601      	mov	r1, r0
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	4648      	mov	r0, r9
 800ee9e:	f000 ff8d 	bl	800fdbc <__mcmp>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	f77f aeb3 	ble.w	800ec0e <_dtoa_r+0x68e>
 800eea8:	4656      	mov	r6, sl
 800eeaa:	2331      	movs	r3, #49	@ 0x31
 800eeac:	f806 3b01 	strb.w	r3, [r6], #1
 800eeb0:	9b04      	ldr	r3, [sp, #16]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	9304      	str	r3, [sp, #16]
 800eeb6:	e6ae      	b.n	800ec16 <_dtoa_r+0x696>
 800eeb8:	9c07      	ldr	r4, [sp, #28]
 800eeba:	9704      	str	r7, [sp, #16]
 800eebc:	4625      	mov	r5, r4
 800eebe:	e7f3      	b.n	800eea8 <_dtoa_r+0x928>
 800eec0:	9b07      	ldr	r3, [sp, #28]
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f000 8104 	beq.w	800f0d4 <_dtoa_r+0xb54>
 800eecc:	2e00      	cmp	r6, #0
 800eece:	dd05      	ble.n	800eedc <_dtoa_r+0x95c>
 800eed0:	4629      	mov	r1, r5
 800eed2:	4632      	mov	r2, r6
 800eed4:	4658      	mov	r0, fp
 800eed6:	f000 ff05 	bl	800fce4 <__lshift>
 800eeda:	4605      	mov	r5, r0
 800eedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d05a      	beq.n	800ef98 <_dtoa_r+0xa18>
 800eee2:	6869      	ldr	r1, [r5, #4]
 800eee4:	4658      	mov	r0, fp
 800eee6:	f000 fca5 	bl	800f834 <_Balloc>
 800eeea:	4606      	mov	r6, r0
 800eeec:	b928      	cbnz	r0, 800eefa <_dtoa_r+0x97a>
 800eeee:	4b84      	ldr	r3, [pc, #528]	@ (800f100 <_dtoa_r+0xb80>)
 800eef0:	4602      	mov	r2, r0
 800eef2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eef6:	f7ff bb5a 	b.w	800e5ae <_dtoa_r+0x2e>
 800eefa:	692a      	ldr	r2, [r5, #16]
 800eefc:	3202      	adds	r2, #2
 800eefe:	0092      	lsls	r2, r2, #2
 800ef00:	f105 010c 	add.w	r1, r5, #12
 800ef04:	300c      	adds	r0, #12
 800ef06:	f7ff fa78 	bl	800e3fa <memcpy>
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	4631      	mov	r1, r6
 800ef0e:	4658      	mov	r0, fp
 800ef10:	f000 fee8 	bl	800fce4 <__lshift>
 800ef14:	f10a 0301 	add.w	r3, sl, #1
 800ef18:	9307      	str	r3, [sp, #28]
 800ef1a:	9b00      	ldr	r3, [sp, #0]
 800ef1c:	4453      	add	r3, sl
 800ef1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef20:	9b02      	ldr	r3, [sp, #8]
 800ef22:	f003 0301 	and.w	r3, r3, #1
 800ef26:	462f      	mov	r7, r5
 800ef28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	9b07      	ldr	r3, [sp, #28]
 800ef2e:	4621      	mov	r1, r4
 800ef30:	3b01      	subs	r3, #1
 800ef32:	4648      	mov	r0, r9
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	f7ff fa9b 	bl	800e470 <quorem>
 800ef3a:	4639      	mov	r1, r7
 800ef3c:	9002      	str	r0, [sp, #8]
 800ef3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef42:	4648      	mov	r0, r9
 800ef44:	f000 ff3a 	bl	800fdbc <__mcmp>
 800ef48:	462a      	mov	r2, r5
 800ef4a:	9008      	str	r0, [sp, #32]
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	4658      	mov	r0, fp
 800ef50:	f000 ff50 	bl	800fdf4 <__mdiff>
 800ef54:	68c2      	ldr	r2, [r0, #12]
 800ef56:	4606      	mov	r6, r0
 800ef58:	bb02      	cbnz	r2, 800ef9c <_dtoa_r+0xa1c>
 800ef5a:	4601      	mov	r1, r0
 800ef5c:	4648      	mov	r0, r9
 800ef5e:	f000 ff2d 	bl	800fdbc <__mcmp>
 800ef62:	4602      	mov	r2, r0
 800ef64:	4631      	mov	r1, r6
 800ef66:	4658      	mov	r0, fp
 800ef68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef6a:	f000 fca3 	bl	800f8b4 <_Bfree>
 800ef6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef72:	9e07      	ldr	r6, [sp, #28]
 800ef74:	ea43 0102 	orr.w	r1, r3, r2
 800ef78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef7a:	4319      	orrs	r1, r3
 800ef7c:	d110      	bne.n	800efa0 <_dtoa_r+0xa20>
 800ef7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef82:	d029      	beq.n	800efd8 <_dtoa_r+0xa58>
 800ef84:	9b08      	ldr	r3, [sp, #32]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	dd02      	ble.n	800ef90 <_dtoa_r+0xa10>
 800ef8a:	9b02      	ldr	r3, [sp, #8]
 800ef8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ef90:	9b00      	ldr	r3, [sp, #0]
 800ef92:	f883 8000 	strb.w	r8, [r3]
 800ef96:	e63f      	b.n	800ec18 <_dtoa_r+0x698>
 800ef98:	4628      	mov	r0, r5
 800ef9a:	e7bb      	b.n	800ef14 <_dtoa_r+0x994>
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	e7e1      	b.n	800ef64 <_dtoa_r+0x9e4>
 800efa0:	9b08      	ldr	r3, [sp, #32]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	db04      	blt.n	800efb0 <_dtoa_r+0xa30>
 800efa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efa8:	430b      	orrs	r3, r1
 800efaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800efac:	430b      	orrs	r3, r1
 800efae:	d120      	bne.n	800eff2 <_dtoa_r+0xa72>
 800efb0:	2a00      	cmp	r2, #0
 800efb2:	dded      	ble.n	800ef90 <_dtoa_r+0xa10>
 800efb4:	4649      	mov	r1, r9
 800efb6:	2201      	movs	r2, #1
 800efb8:	4658      	mov	r0, fp
 800efba:	f000 fe93 	bl	800fce4 <__lshift>
 800efbe:	4621      	mov	r1, r4
 800efc0:	4681      	mov	r9, r0
 800efc2:	f000 fefb 	bl	800fdbc <__mcmp>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	dc03      	bgt.n	800efd2 <_dtoa_r+0xa52>
 800efca:	d1e1      	bne.n	800ef90 <_dtoa_r+0xa10>
 800efcc:	f018 0f01 	tst.w	r8, #1
 800efd0:	d0de      	beq.n	800ef90 <_dtoa_r+0xa10>
 800efd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800efd6:	d1d8      	bne.n	800ef8a <_dtoa_r+0xa0a>
 800efd8:	9a00      	ldr	r2, [sp, #0]
 800efda:	2339      	movs	r3, #57	@ 0x39
 800efdc:	7013      	strb	r3, [r2, #0]
 800efde:	4633      	mov	r3, r6
 800efe0:	461e      	mov	r6, r3
 800efe2:	3b01      	subs	r3, #1
 800efe4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800efe8:	2a39      	cmp	r2, #57	@ 0x39
 800efea:	d052      	beq.n	800f092 <_dtoa_r+0xb12>
 800efec:	3201      	adds	r2, #1
 800efee:	701a      	strb	r2, [r3, #0]
 800eff0:	e612      	b.n	800ec18 <_dtoa_r+0x698>
 800eff2:	2a00      	cmp	r2, #0
 800eff4:	dd07      	ble.n	800f006 <_dtoa_r+0xa86>
 800eff6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800effa:	d0ed      	beq.n	800efd8 <_dtoa_r+0xa58>
 800effc:	9a00      	ldr	r2, [sp, #0]
 800effe:	f108 0301 	add.w	r3, r8, #1
 800f002:	7013      	strb	r3, [r2, #0]
 800f004:	e608      	b.n	800ec18 <_dtoa_r+0x698>
 800f006:	9b07      	ldr	r3, [sp, #28]
 800f008:	9a07      	ldr	r2, [sp, #28]
 800f00a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f010:	4293      	cmp	r3, r2
 800f012:	d028      	beq.n	800f066 <_dtoa_r+0xae6>
 800f014:	4649      	mov	r1, r9
 800f016:	2300      	movs	r3, #0
 800f018:	220a      	movs	r2, #10
 800f01a:	4658      	mov	r0, fp
 800f01c:	f000 fc6c 	bl	800f8f8 <__multadd>
 800f020:	42af      	cmp	r7, r5
 800f022:	4681      	mov	r9, r0
 800f024:	f04f 0300 	mov.w	r3, #0
 800f028:	f04f 020a 	mov.w	r2, #10
 800f02c:	4639      	mov	r1, r7
 800f02e:	4658      	mov	r0, fp
 800f030:	d107      	bne.n	800f042 <_dtoa_r+0xac2>
 800f032:	f000 fc61 	bl	800f8f8 <__multadd>
 800f036:	4607      	mov	r7, r0
 800f038:	4605      	mov	r5, r0
 800f03a:	9b07      	ldr	r3, [sp, #28]
 800f03c:	3301      	adds	r3, #1
 800f03e:	9307      	str	r3, [sp, #28]
 800f040:	e774      	b.n	800ef2c <_dtoa_r+0x9ac>
 800f042:	f000 fc59 	bl	800f8f8 <__multadd>
 800f046:	4629      	mov	r1, r5
 800f048:	4607      	mov	r7, r0
 800f04a:	2300      	movs	r3, #0
 800f04c:	220a      	movs	r2, #10
 800f04e:	4658      	mov	r0, fp
 800f050:	f000 fc52 	bl	800f8f8 <__multadd>
 800f054:	4605      	mov	r5, r0
 800f056:	e7f0      	b.n	800f03a <_dtoa_r+0xaba>
 800f058:	9b00      	ldr	r3, [sp, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	bfcc      	ite	gt
 800f05e:	461e      	movgt	r6, r3
 800f060:	2601      	movle	r6, #1
 800f062:	4456      	add	r6, sl
 800f064:	2700      	movs	r7, #0
 800f066:	4649      	mov	r1, r9
 800f068:	2201      	movs	r2, #1
 800f06a:	4658      	mov	r0, fp
 800f06c:	f000 fe3a 	bl	800fce4 <__lshift>
 800f070:	4621      	mov	r1, r4
 800f072:	4681      	mov	r9, r0
 800f074:	f000 fea2 	bl	800fdbc <__mcmp>
 800f078:	2800      	cmp	r0, #0
 800f07a:	dcb0      	bgt.n	800efde <_dtoa_r+0xa5e>
 800f07c:	d102      	bne.n	800f084 <_dtoa_r+0xb04>
 800f07e:	f018 0f01 	tst.w	r8, #1
 800f082:	d1ac      	bne.n	800efde <_dtoa_r+0xa5e>
 800f084:	4633      	mov	r3, r6
 800f086:	461e      	mov	r6, r3
 800f088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f08c:	2a30      	cmp	r2, #48	@ 0x30
 800f08e:	d0fa      	beq.n	800f086 <_dtoa_r+0xb06>
 800f090:	e5c2      	b.n	800ec18 <_dtoa_r+0x698>
 800f092:	459a      	cmp	sl, r3
 800f094:	d1a4      	bne.n	800efe0 <_dtoa_r+0xa60>
 800f096:	9b04      	ldr	r3, [sp, #16]
 800f098:	3301      	adds	r3, #1
 800f09a:	9304      	str	r3, [sp, #16]
 800f09c:	2331      	movs	r3, #49	@ 0x31
 800f09e:	f88a 3000 	strb.w	r3, [sl]
 800f0a2:	e5b9      	b.n	800ec18 <_dtoa_r+0x698>
 800f0a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f104 <_dtoa_r+0xb84>
 800f0aa:	b11b      	cbz	r3, 800f0b4 <_dtoa_r+0xb34>
 800f0ac:	f10a 0308 	add.w	r3, sl, #8
 800f0b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0b2:	6013      	str	r3, [r2, #0]
 800f0b4:	4650      	mov	r0, sl
 800f0b6:	b019      	add	sp, #100	@ 0x64
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	f77f ae37 	ble.w	800ed32 <_dtoa_r+0x7b2>
 800f0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	e655      	b.n	800ed78 <_dtoa_r+0x7f8>
 800f0cc:	9b00      	ldr	r3, [sp, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f77f aed6 	ble.w	800ee80 <_dtoa_r+0x900>
 800f0d4:	4656      	mov	r6, sl
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4648      	mov	r0, r9
 800f0da:	f7ff f9c9 	bl	800e470 <quorem>
 800f0de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f0e2:	f806 8b01 	strb.w	r8, [r6], #1
 800f0e6:	9b00      	ldr	r3, [sp, #0]
 800f0e8:	eba6 020a 	sub.w	r2, r6, sl
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	ddb3      	ble.n	800f058 <_dtoa_r+0xad8>
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	220a      	movs	r2, #10
 800f0f6:	4658      	mov	r0, fp
 800f0f8:	f000 fbfe 	bl	800f8f8 <__multadd>
 800f0fc:	4681      	mov	r9, r0
 800f0fe:	e7ea      	b.n	800f0d6 <_dtoa_r+0xb56>
 800f100:	08010f9a 	.word	0x08010f9a
 800f104:	08010f1e 	.word	0x08010f1e

0800f108 <_free_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4605      	mov	r5, r0
 800f10c:	2900      	cmp	r1, #0
 800f10e:	d041      	beq.n	800f194 <_free_r+0x8c>
 800f110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f114:	1f0c      	subs	r4, r1, #4
 800f116:	2b00      	cmp	r3, #0
 800f118:	bfb8      	it	lt
 800f11a:	18e4      	addlt	r4, r4, r3
 800f11c:	f7fd fa74 	bl	800c608 <__malloc_lock>
 800f120:	4a1d      	ldr	r2, [pc, #116]	@ (800f198 <_free_r+0x90>)
 800f122:	6813      	ldr	r3, [r2, #0]
 800f124:	b933      	cbnz	r3, 800f134 <_free_r+0x2c>
 800f126:	6063      	str	r3, [r4, #4]
 800f128:	6014      	str	r4, [r2, #0]
 800f12a:	4628      	mov	r0, r5
 800f12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f130:	f7fd ba70 	b.w	800c614 <__malloc_unlock>
 800f134:	42a3      	cmp	r3, r4
 800f136:	d908      	bls.n	800f14a <_free_r+0x42>
 800f138:	6820      	ldr	r0, [r4, #0]
 800f13a:	1821      	adds	r1, r4, r0
 800f13c:	428b      	cmp	r3, r1
 800f13e:	bf01      	itttt	eq
 800f140:	6819      	ldreq	r1, [r3, #0]
 800f142:	685b      	ldreq	r3, [r3, #4]
 800f144:	1809      	addeq	r1, r1, r0
 800f146:	6021      	streq	r1, [r4, #0]
 800f148:	e7ed      	b.n	800f126 <_free_r+0x1e>
 800f14a:	461a      	mov	r2, r3
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	b10b      	cbz	r3, 800f154 <_free_r+0x4c>
 800f150:	42a3      	cmp	r3, r4
 800f152:	d9fa      	bls.n	800f14a <_free_r+0x42>
 800f154:	6811      	ldr	r1, [r2, #0]
 800f156:	1850      	adds	r0, r2, r1
 800f158:	42a0      	cmp	r0, r4
 800f15a:	d10b      	bne.n	800f174 <_free_r+0x6c>
 800f15c:	6820      	ldr	r0, [r4, #0]
 800f15e:	4401      	add	r1, r0
 800f160:	1850      	adds	r0, r2, r1
 800f162:	4283      	cmp	r3, r0
 800f164:	6011      	str	r1, [r2, #0]
 800f166:	d1e0      	bne.n	800f12a <_free_r+0x22>
 800f168:	6818      	ldr	r0, [r3, #0]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	6053      	str	r3, [r2, #4]
 800f16e:	4408      	add	r0, r1
 800f170:	6010      	str	r0, [r2, #0]
 800f172:	e7da      	b.n	800f12a <_free_r+0x22>
 800f174:	d902      	bls.n	800f17c <_free_r+0x74>
 800f176:	230c      	movs	r3, #12
 800f178:	602b      	str	r3, [r5, #0]
 800f17a:	e7d6      	b.n	800f12a <_free_r+0x22>
 800f17c:	6820      	ldr	r0, [r4, #0]
 800f17e:	1821      	adds	r1, r4, r0
 800f180:	428b      	cmp	r3, r1
 800f182:	bf04      	itt	eq
 800f184:	6819      	ldreq	r1, [r3, #0]
 800f186:	685b      	ldreq	r3, [r3, #4]
 800f188:	6063      	str	r3, [r4, #4]
 800f18a:	bf04      	itt	eq
 800f18c:	1809      	addeq	r1, r1, r0
 800f18e:	6021      	streq	r1, [r4, #0]
 800f190:	6054      	str	r4, [r2, #4]
 800f192:	e7ca      	b.n	800f12a <_free_r+0x22>
 800f194:	bd38      	pop	{r3, r4, r5, pc}
 800f196:	bf00      	nop
 800f198:	20001280 	.word	0x20001280

0800f19c <rshift>:
 800f19c:	6903      	ldr	r3, [r0, #16]
 800f19e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f1a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f1aa:	f100 0414 	add.w	r4, r0, #20
 800f1ae:	dd45      	ble.n	800f23c <rshift+0xa0>
 800f1b0:	f011 011f 	ands.w	r1, r1, #31
 800f1b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f1b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f1bc:	d10c      	bne.n	800f1d8 <rshift+0x3c>
 800f1be:	f100 0710 	add.w	r7, r0, #16
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	42b1      	cmp	r1, r6
 800f1c6:	d334      	bcc.n	800f232 <rshift+0x96>
 800f1c8:	1a9b      	subs	r3, r3, r2
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	1eea      	subs	r2, r5, #3
 800f1ce:	4296      	cmp	r6, r2
 800f1d0:	bf38      	it	cc
 800f1d2:	2300      	movcc	r3, #0
 800f1d4:	4423      	add	r3, r4
 800f1d6:	e015      	b.n	800f204 <rshift+0x68>
 800f1d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f1dc:	f1c1 0820 	rsb	r8, r1, #32
 800f1e0:	40cf      	lsrs	r7, r1
 800f1e2:	f105 0e04 	add.w	lr, r5, #4
 800f1e6:	46a1      	mov	r9, r4
 800f1e8:	4576      	cmp	r6, lr
 800f1ea:	46f4      	mov	ip, lr
 800f1ec:	d815      	bhi.n	800f21a <rshift+0x7e>
 800f1ee:	1a9a      	subs	r2, r3, r2
 800f1f0:	0092      	lsls	r2, r2, #2
 800f1f2:	3a04      	subs	r2, #4
 800f1f4:	3501      	adds	r5, #1
 800f1f6:	42ae      	cmp	r6, r5
 800f1f8:	bf38      	it	cc
 800f1fa:	2200      	movcc	r2, #0
 800f1fc:	18a3      	adds	r3, r4, r2
 800f1fe:	50a7      	str	r7, [r4, r2]
 800f200:	b107      	cbz	r7, 800f204 <rshift+0x68>
 800f202:	3304      	adds	r3, #4
 800f204:	1b1a      	subs	r2, r3, r4
 800f206:	42a3      	cmp	r3, r4
 800f208:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f20c:	bf08      	it	eq
 800f20e:	2300      	moveq	r3, #0
 800f210:	6102      	str	r2, [r0, #16]
 800f212:	bf08      	it	eq
 800f214:	6143      	streq	r3, [r0, #20]
 800f216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f21a:	f8dc c000 	ldr.w	ip, [ip]
 800f21e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f222:	ea4c 0707 	orr.w	r7, ip, r7
 800f226:	f849 7b04 	str.w	r7, [r9], #4
 800f22a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f22e:	40cf      	lsrs	r7, r1
 800f230:	e7da      	b.n	800f1e8 <rshift+0x4c>
 800f232:	f851 cb04 	ldr.w	ip, [r1], #4
 800f236:	f847 cf04 	str.w	ip, [r7, #4]!
 800f23a:	e7c3      	b.n	800f1c4 <rshift+0x28>
 800f23c:	4623      	mov	r3, r4
 800f23e:	e7e1      	b.n	800f204 <rshift+0x68>

0800f240 <__hexdig_fun>:
 800f240:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f244:	2b09      	cmp	r3, #9
 800f246:	d802      	bhi.n	800f24e <__hexdig_fun+0xe>
 800f248:	3820      	subs	r0, #32
 800f24a:	b2c0      	uxtb	r0, r0
 800f24c:	4770      	bx	lr
 800f24e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f252:	2b05      	cmp	r3, #5
 800f254:	d801      	bhi.n	800f25a <__hexdig_fun+0x1a>
 800f256:	3847      	subs	r0, #71	@ 0x47
 800f258:	e7f7      	b.n	800f24a <__hexdig_fun+0xa>
 800f25a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f25e:	2b05      	cmp	r3, #5
 800f260:	d801      	bhi.n	800f266 <__hexdig_fun+0x26>
 800f262:	3827      	subs	r0, #39	@ 0x27
 800f264:	e7f1      	b.n	800f24a <__hexdig_fun+0xa>
 800f266:	2000      	movs	r0, #0
 800f268:	4770      	bx	lr
	...

0800f26c <__gethex>:
 800f26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f270:	b085      	sub	sp, #20
 800f272:	468a      	mov	sl, r1
 800f274:	9302      	str	r3, [sp, #8]
 800f276:	680b      	ldr	r3, [r1, #0]
 800f278:	9001      	str	r0, [sp, #4]
 800f27a:	4690      	mov	r8, r2
 800f27c:	1c9c      	adds	r4, r3, #2
 800f27e:	46a1      	mov	r9, r4
 800f280:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f284:	2830      	cmp	r0, #48	@ 0x30
 800f286:	d0fa      	beq.n	800f27e <__gethex+0x12>
 800f288:	eba9 0303 	sub.w	r3, r9, r3
 800f28c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f290:	f7ff ffd6 	bl	800f240 <__hexdig_fun>
 800f294:	4605      	mov	r5, r0
 800f296:	2800      	cmp	r0, #0
 800f298:	d168      	bne.n	800f36c <__gethex+0x100>
 800f29a:	49a0      	ldr	r1, [pc, #640]	@ (800f51c <__gethex+0x2b0>)
 800f29c:	2201      	movs	r2, #1
 800f29e:	4648      	mov	r0, r9
 800f2a0:	f7ff f811 	bl	800e2c6 <strncmp>
 800f2a4:	4607      	mov	r7, r0
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d167      	bne.n	800f37a <__gethex+0x10e>
 800f2aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f2ae:	4626      	mov	r6, r4
 800f2b0:	f7ff ffc6 	bl	800f240 <__hexdig_fun>
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	d062      	beq.n	800f37e <__gethex+0x112>
 800f2b8:	4623      	mov	r3, r4
 800f2ba:	7818      	ldrb	r0, [r3, #0]
 800f2bc:	2830      	cmp	r0, #48	@ 0x30
 800f2be:	4699      	mov	r9, r3
 800f2c0:	f103 0301 	add.w	r3, r3, #1
 800f2c4:	d0f9      	beq.n	800f2ba <__gethex+0x4e>
 800f2c6:	f7ff ffbb 	bl	800f240 <__hexdig_fun>
 800f2ca:	fab0 f580 	clz	r5, r0
 800f2ce:	096d      	lsrs	r5, r5, #5
 800f2d0:	f04f 0b01 	mov.w	fp, #1
 800f2d4:	464a      	mov	r2, r9
 800f2d6:	4616      	mov	r6, r2
 800f2d8:	3201      	adds	r2, #1
 800f2da:	7830      	ldrb	r0, [r6, #0]
 800f2dc:	f7ff ffb0 	bl	800f240 <__hexdig_fun>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d1f8      	bne.n	800f2d6 <__gethex+0x6a>
 800f2e4:	498d      	ldr	r1, [pc, #564]	@ (800f51c <__gethex+0x2b0>)
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	f7fe ffec 	bl	800e2c6 <strncmp>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d13f      	bne.n	800f372 <__gethex+0x106>
 800f2f2:	b944      	cbnz	r4, 800f306 <__gethex+0x9a>
 800f2f4:	1c74      	adds	r4, r6, #1
 800f2f6:	4622      	mov	r2, r4
 800f2f8:	4616      	mov	r6, r2
 800f2fa:	3201      	adds	r2, #1
 800f2fc:	7830      	ldrb	r0, [r6, #0]
 800f2fe:	f7ff ff9f 	bl	800f240 <__hexdig_fun>
 800f302:	2800      	cmp	r0, #0
 800f304:	d1f8      	bne.n	800f2f8 <__gethex+0x8c>
 800f306:	1ba4      	subs	r4, r4, r6
 800f308:	00a7      	lsls	r7, r4, #2
 800f30a:	7833      	ldrb	r3, [r6, #0]
 800f30c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f310:	2b50      	cmp	r3, #80	@ 0x50
 800f312:	d13e      	bne.n	800f392 <__gethex+0x126>
 800f314:	7873      	ldrb	r3, [r6, #1]
 800f316:	2b2b      	cmp	r3, #43	@ 0x2b
 800f318:	d033      	beq.n	800f382 <__gethex+0x116>
 800f31a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f31c:	d034      	beq.n	800f388 <__gethex+0x11c>
 800f31e:	1c71      	adds	r1, r6, #1
 800f320:	2400      	movs	r4, #0
 800f322:	7808      	ldrb	r0, [r1, #0]
 800f324:	f7ff ff8c 	bl	800f240 <__hexdig_fun>
 800f328:	1e43      	subs	r3, r0, #1
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	2b18      	cmp	r3, #24
 800f32e:	d830      	bhi.n	800f392 <__gethex+0x126>
 800f330:	f1a0 0210 	sub.w	r2, r0, #16
 800f334:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f338:	f7ff ff82 	bl	800f240 <__hexdig_fun>
 800f33c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f340:	fa5f fc8c 	uxtb.w	ip, ip
 800f344:	f1bc 0f18 	cmp.w	ip, #24
 800f348:	f04f 030a 	mov.w	r3, #10
 800f34c:	d91e      	bls.n	800f38c <__gethex+0x120>
 800f34e:	b104      	cbz	r4, 800f352 <__gethex+0xe6>
 800f350:	4252      	negs	r2, r2
 800f352:	4417      	add	r7, r2
 800f354:	f8ca 1000 	str.w	r1, [sl]
 800f358:	b1ed      	cbz	r5, 800f396 <__gethex+0x12a>
 800f35a:	f1bb 0f00 	cmp.w	fp, #0
 800f35e:	bf0c      	ite	eq
 800f360:	2506      	moveq	r5, #6
 800f362:	2500      	movne	r5, #0
 800f364:	4628      	mov	r0, r5
 800f366:	b005      	add	sp, #20
 800f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36c:	2500      	movs	r5, #0
 800f36e:	462c      	mov	r4, r5
 800f370:	e7b0      	b.n	800f2d4 <__gethex+0x68>
 800f372:	2c00      	cmp	r4, #0
 800f374:	d1c7      	bne.n	800f306 <__gethex+0x9a>
 800f376:	4627      	mov	r7, r4
 800f378:	e7c7      	b.n	800f30a <__gethex+0x9e>
 800f37a:	464e      	mov	r6, r9
 800f37c:	462f      	mov	r7, r5
 800f37e:	2501      	movs	r5, #1
 800f380:	e7c3      	b.n	800f30a <__gethex+0x9e>
 800f382:	2400      	movs	r4, #0
 800f384:	1cb1      	adds	r1, r6, #2
 800f386:	e7cc      	b.n	800f322 <__gethex+0xb6>
 800f388:	2401      	movs	r4, #1
 800f38a:	e7fb      	b.n	800f384 <__gethex+0x118>
 800f38c:	fb03 0002 	mla	r0, r3, r2, r0
 800f390:	e7ce      	b.n	800f330 <__gethex+0xc4>
 800f392:	4631      	mov	r1, r6
 800f394:	e7de      	b.n	800f354 <__gethex+0xe8>
 800f396:	eba6 0309 	sub.w	r3, r6, r9
 800f39a:	3b01      	subs	r3, #1
 800f39c:	4629      	mov	r1, r5
 800f39e:	2b07      	cmp	r3, #7
 800f3a0:	dc0a      	bgt.n	800f3b8 <__gethex+0x14c>
 800f3a2:	9801      	ldr	r0, [sp, #4]
 800f3a4:	f000 fa46 	bl	800f834 <_Balloc>
 800f3a8:	4604      	mov	r4, r0
 800f3aa:	b940      	cbnz	r0, 800f3be <__gethex+0x152>
 800f3ac:	4b5c      	ldr	r3, [pc, #368]	@ (800f520 <__gethex+0x2b4>)
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	21e4      	movs	r1, #228	@ 0xe4
 800f3b2:	485c      	ldr	r0, [pc, #368]	@ (800f524 <__gethex+0x2b8>)
 800f3b4:	f7ff f83e 	bl	800e434 <__assert_func>
 800f3b8:	3101      	adds	r1, #1
 800f3ba:	105b      	asrs	r3, r3, #1
 800f3bc:	e7ef      	b.n	800f39e <__gethex+0x132>
 800f3be:	f100 0a14 	add.w	sl, r0, #20
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	4655      	mov	r5, sl
 800f3c6:	469b      	mov	fp, r3
 800f3c8:	45b1      	cmp	r9, r6
 800f3ca:	d337      	bcc.n	800f43c <__gethex+0x1d0>
 800f3cc:	f845 bb04 	str.w	fp, [r5], #4
 800f3d0:	eba5 050a 	sub.w	r5, r5, sl
 800f3d4:	10ad      	asrs	r5, r5, #2
 800f3d6:	6125      	str	r5, [r4, #16]
 800f3d8:	4658      	mov	r0, fp
 800f3da:	f000 fb1d 	bl	800fa18 <__hi0bits>
 800f3de:	016d      	lsls	r5, r5, #5
 800f3e0:	f8d8 6000 	ldr.w	r6, [r8]
 800f3e4:	1a2d      	subs	r5, r5, r0
 800f3e6:	42b5      	cmp	r5, r6
 800f3e8:	dd54      	ble.n	800f494 <__gethex+0x228>
 800f3ea:	1bad      	subs	r5, r5, r6
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f000 feb1 	bl	8010156 <__any_on>
 800f3f4:	4681      	mov	r9, r0
 800f3f6:	b178      	cbz	r0, 800f418 <__gethex+0x1ac>
 800f3f8:	1e6b      	subs	r3, r5, #1
 800f3fa:	1159      	asrs	r1, r3, #5
 800f3fc:	f003 021f 	and.w	r2, r3, #31
 800f400:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f404:	f04f 0901 	mov.w	r9, #1
 800f408:	fa09 f202 	lsl.w	r2, r9, r2
 800f40c:	420a      	tst	r2, r1
 800f40e:	d003      	beq.n	800f418 <__gethex+0x1ac>
 800f410:	454b      	cmp	r3, r9
 800f412:	dc36      	bgt.n	800f482 <__gethex+0x216>
 800f414:	f04f 0902 	mov.w	r9, #2
 800f418:	4629      	mov	r1, r5
 800f41a:	4620      	mov	r0, r4
 800f41c:	f7ff febe 	bl	800f19c <rshift>
 800f420:	442f      	add	r7, r5
 800f422:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f426:	42bb      	cmp	r3, r7
 800f428:	da42      	bge.n	800f4b0 <__gethex+0x244>
 800f42a:	9801      	ldr	r0, [sp, #4]
 800f42c:	4621      	mov	r1, r4
 800f42e:	f000 fa41 	bl	800f8b4 <_Bfree>
 800f432:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f434:	2300      	movs	r3, #0
 800f436:	6013      	str	r3, [r2, #0]
 800f438:	25a3      	movs	r5, #163	@ 0xa3
 800f43a:	e793      	b.n	800f364 <__gethex+0xf8>
 800f43c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f440:	2a2e      	cmp	r2, #46	@ 0x2e
 800f442:	d012      	beq.n	800f46a <__gethex+0x1fe>
 800f444:	2b20      	cmp	r3, #32
 800f446:	d104      	bne.n	800f452 <__gethex+0x1e6>
 800f448:	f845 bb04 	str.w	fp, [r5], #4
 800f44c:	f04f 0b00 	mov.w	fp, #0
 800f450:	465b      	mov	r3, fp
 800f452:	7830      	ldrb	r0, [r6, #0]
 800f454:	9303      	str	r3, [sp, #12]
 800f456:	f7ff fef3 	bl	800f240 <__hexdig_fun>
 800f45a:	9b03      	ldr	r3, [sp, #12]
 800f45c:	f000 000f 	and.w	r0, r0, #15
 800f460:	4098      	lsls	r0, r3
 800f462:	ea4b 0b00 	orr.w	fp, fp, r0
 800f466:	3304      	adds	r3, #4
 800f468:	e7ae      	b.n	800f3c8 <__gethex+0x15c>
 800f46a:	45b1      	cmp	r9, r6
 800f46c:	d8ea      	bhi.n	800f444 <__gethex+0x1d8>
 800f46e:	492b      	ldr	r1, [pc, #172]	@ (800f51c <__gethex+0x2b0>)
 800f470:	9303      	str	r3, [sp, #12]
 800f472:	2201      	movs	r2, #1
 800f474:	4630      	mov	r0, r6
 800f476:	f7fe ff26 	bl	800e2c6 <strncmp>
 800f47a:	9b03      	ldr	r3, [sp, #12]
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d1e1      	bne.n	800f444 <__gethex+0x1d8>
 800f480:	e7a2      	b.n	800f3c8 <__gethex+0x15c>
 800f482:	1ea9      	subs	r1, r5, #2
 800f484:	4620      	mov	r0, r4
 800f486:	f000 fe66 	bl	8010156 <__any_on>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d0c2      	beq.n	800f414 <__gethex+0x1a8>
 800f48e:	f04f 0903 	mov.w	r9, #3
 800f492:	e7c1      	b.n	800f418 <__gethex+0x1ac>
 800f494:	da09      	bge.n	800f4aa <__gethex+0x23e>
 800f496:	1b75      	subs	r5, r6, r5
 800f498:	4621      	mov	r1, r4
 800f49a:	9801      	ldr	r0, [sp, #4]
 800f49c:	462a      	mov	r2, r5
 800f49e:	f000 fc21 	bl	800fce4 <__lshift>
 800f4a2:	1b7f      	subs	r7, r7, r5
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	f100 0a14 	add.w	sl, r0, #20
 800f4aa:	f04f 0900 	mov.w	r9, #0
 800f4ae:	e7b8      	b.n	800f422 <__gethex+0x1b6>
 800f4b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f4b4:	42bd      	cmp	r5, r7
 800f4b6:	dd6f      	ble.n	800f598 <__gethex+0x32c>
 800f4b8:	1bed      	subs	r5, r5, r7
 800f4ba:	42ae      	cmp	r6, r5
 800f4bc:	dc34      	bgt.n	800f528 <__gethex+0x2bc>
 800f4be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4c2:	2b02      	cmp	r3, #2
 800f4c4:	d022      	beq.n	800f50c <__gethex+0x2a0>
 800f4c6:	2b03      	cmp	r3, #3
 800f4c8:	d024      	beq.n	800f514 <__gethex+0x2a8>
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d115      	bne.n	800f4fa <__gethex+0x28e>
 800f4ce:	42ae      	cmp	r6, r5
 800f4d0:	d113      	bne.n	800f4fa <__gethex+0x28e>
 800f4d2:	2e01      	cmp	r6, #1
 800f4d4:	d10b      	bne.n	800f4ee <__gethex+0x282>
 800f4d6:	9a02      	ldr	r2, [sp, #8]
 800f4d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f4dc:	6013      	str	r3, [r2, #0]
 800f4de:	2301      	movs	r3, #1
 800f4e0:	6123      	str	r3, [r4, #16]
 800f4e2:	f8ca 3000 	str.w	r3, [sl]
 800f4e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4e8:	2562      	movs	r5, #98	@ 0x62
 800f4ea:	601c      	str	r4, [r3, #0]
 800f4ec:	e73a      	b.n	800f364 <__gethex+0xf8>
 800f4ee:	1e71      	subs	r1, r6, #1
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f000 fe30 	bl	8010156 <__any_on>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d1ed      	bne.n	800f4d6 <__gethex+0x26a>
 800f4fa:	9801      	ldr	r0, [sp, #4]
 800f4fc:	4621      	mov	r1, r4
 800f4fe:	f000 f9d9 	bl	800f8b4 <_Bfree>
 800f502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f504:	2300      	movs	r3, #0
 800f506:	6013      	str	r3, [r2, #0]
 800f508:	2550      	movs	r5, #80	@ 0x50
 800f50a:	e72b      	b.n	800f364 <__gethex+0xf8>
 800f50c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1f3      	bne.n	800f4fa <__gethex+0x28e>
 800f512:	e7e0      	b.n	800f4d6 <__gethex+0x26a>
 800f514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f516:	2b00      	cmp	r3, #0
 800f518:	d1dd      	bne.n	800f4d6 <__gethex+0x26a>
 800f51a:	e7ee      	b.n	800f4fa <__gethex+0x28e>
 800f51c:	08010d4c 	.word	0x08010d4c
 800f520:	08010f9a 	.word	0x08010f9a
 800f524:	08010fab 	.word	0x08010fab
 800f528:	1e6f      	subs	r7, r5, #1
 800f52a:	f1b9 0f00 	cmp.w	r9, #0
 800f52e:	d130      	bne.n	800f592 <__gethex+0x326>
 800f530:	b127      	cbz	r7, 800f53c <__gethex+0x2d0>
 800f532:	4639      	mov	r1, r7
 800f534:	4620      	mov	r0, r4
 800f536:	f000 fe0e 	bl	8010156 <__any_on>
 800f53a:	4681      	mov	r9, r0
 800f53c:	117a      	asrs	r2, r7, #5
 800f53e:	2301      	movs	r3, #1
 800f540:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f544:	f007 071f 	and.w	r7, r7, #31
 800f548:	40bb      	lsls	r3, r7
 800f54a:	4213      	tst	r3, r2
 800f54c:	4629      	mov	r1, r5
 800f54e:	4620      	mov	r0, r4
 800f550:	bf18      	it	ne
 800f552:	f049 0902 	orrne.w	r9, r9, #2
 800f556:	f7ff fe21 	bl	800f19c <rshift>
 800f55a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f55e:	1b76      	subs	r6, r6, r5
 800f560:	2502      	movs	r5, #2
 800f562:	f1b9 0f00 	cmp.w	r9, #0
 800f566:	d047      	beq.n	800f5f8 <__gethex+0x38c>
 800f568:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	d015      	beq.n	800f59c <__gethex+0x330>
 800f570:	2b03      	cmp	r3, #3
 800f572:	d017      	beq.n	800f5a4 <__gethex+0x338>
 800f574:	2b01      	cmp	r3, #1
 800f576:	d109      	bne.n	800f58c <__gethex+0x320>
 800f578:	f019 0f02 	tst.w	r9, #2
 800f57c:	d006      	beq.n	800f58c <__gethex+0x320>
 800f57e:	f8da 3000 	ldr.w	r3, [sl]
 800f582:	ea49 0903 	orr.w	r9, r9, r3
 800f586:	f019 0f01 	tst.w	r9, #1
 800f58a:	d10e      	bne.n	800f5aa <__gethex+0x33e>
 800f58c:	f045 0510 	orr.w	r5, r5, #16
 800f590:	e032      	b.n	800f5f8 <__gethex+0x38c>
 800f592:	f04f 0901 	mov.w	r9, #1
 800f596:	e7d1      	b.n	800f53c <__gethex+0x2d0>
 800f598:	2501      	movs	r5, #1
 800f59a:	e7e2      	b.n	800f562 <__gethex+0x2f6>
 800f59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f59e:	f1c3 0301 	rsb	r3, r3, #1
 800f5a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d0f0      	beq.n	800f58c <__gethex+0x320>
 800f5aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f5ae:	f104 0314 	add.w	r3, r4, #20
 800f5b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f5b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f5ba:	f04f 0c00 	mov.w	ip, #0
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f5c8:	d01b      	beq.n	800f602 <__gethex+0x396>
 800f5ca:	3201      	adds	r2, #1
 800f5cc:	6002      	str	r2, [r0, #0]
 800f5ce:	2d02      	cmp	r5, #2
 800f5d0:	f104 0314 	add.w	r3, r4, #20
 800f5d4:	d13c      	bne.n	800f650 <__gethex+0x3e4>
 800f5d6:	f8d8 2000 	ldr.w	r2, [r8]
 800f5da:	3a01      	subs	r2, #1
 800f5dc:	42b2      	cmp	r2, r6
 800f5de:	d109      	bne.n	800f5f4 <__gethex+0x388>
 800f5e0:	1171      	asrs	r1, r6, #5
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5e8:	f006 061f 	and.w	r6, r6, #31
 800f5ec:	fa02 f606 	lsl.w	r6, r2, r6
 800f5f0:	421e      	tst	r6, r3
 800f5f2:	d13a      	bne.n	800f66a <__gethex+0x3fe>
 800f5f4:	f045 0520 	orr.w	r5, r5, #32
 800f5f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5fa:	601c      	str	r4, [r3, #0]
 800f5fc:	9b02      	ldr	r3, [sp, #8]
 800f5fe:	601f      	str	r7, [r3, #0]
 800f600:	e6b0      	b.n	800f364 <__gethex+0xf8>
 800f602:	4299      	cmp	r1, r3
 800f604:	f843 cc04 	str.w	ip, [r3, #-4]
 800f608:	d8d9      	bhi.n	800f5be <__gethex+0x352>
 800f60a:	68a3      	ldr	r3, [r4, #8]
 800f60c:	459b      	cmp	fp, r3
 800f60e:	db17      	blt.n	800f640 <__gethex+0x3d4>
 800f610:	6861      	ldr	r1, [r4, #4]
 800f612:	9801      	ldr	r0, [sp, #4]
 800f614:	3101      	adds	r1, #1
 800f616:	f000 f90d 	bl	800f834 <_Balloc>
 800f61a:	4681      	mov	r9, r0
 800f61c:	b918      	cbnz	r0, 800f626 <__gethex+0x3ba>
 800f61e:	4b1a      	ldr	r3, [pc, #104]	@ (800f688 <__gethex+0x41c>)
 800f620:	4602      	mov	r2, r0
 800f622:	2184      	movs	r1, #132	@ 0x84
 800f624:	e6c5      	b.n	800f3b2 <__gethex+0x146>
 800f626:	6922      	ldr	r2, [r4, #16]
 800f628:	3202      	adds	r2, #2
 800f62a:	f104 010c 	add.w	r1, r4, #12
 800f62e:	0092      	lsls	r2, r2, #2
 800f630:	300c      	adds	r0, #12
 800f632:	f7fe fee2 	bl	800e3fa <memcpy>
 800f636:	4621      	mov	r1, r4
 800f638:	9801      	ldr	r0, [sp, #4]
 800f63a:	f000 f93b 	bl	800f8b4 <_Bfree>
 800f63e:	464c      	mov	r4, r9
 800f640:	6923      	ldr	r3, [r4, #16]
 800f642:	1c5a      	adds	r2, r3, #1
 800f644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f648:	6122      	str	r2, [r4, #16]
 800f64a:	2201      	movs	r2, #1
 800f64c:	615a      	str	r2, [r3, #20]
 800f64e:	e7be      	b.n	800f5ce <__gethex+0x362>
 800f650:	6922      	ldr	r2, [r4, #16]
 800f652:	455a      	cmp	r2, fp
 800f654:	dd0b      	ble.n	800f66e <__gethex+0x402>
 800f656:	2101      	movs	r1, #1
 800f658:	4620      	mov	r0, r4
 800f65a:	f7ff fd9f 	bl	800f19c <rshift>
 800f65e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f662:	3701      	adds	r7, #1
 800f664:	42bb      	cmp	r3, r7
 800f666:	f6ff aee0 	blt.w	800f42a <__gethex+0x1be>
 800f66a:	2501      	movs	r5, #1
 800f66c:	e7c2      	b.n	800f5f4 <__gethex+0x388>
 800f66e:	f016 061f 	ands.w	r6, r6, #31
 800f672:	d0fa      	beq.n	800f66a <__gethex+0x3fe>
 800f674:	4453      	add	r3, sl
 800f676:	f1c6 0620 	rsb	r6, r6, #32
 800f67a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f67e:	f000 f9cb 	bl	800fa18 <__hi0bits>
 800f682:	42b0      	cmp	r0, r6
 800f684:	dbe7      	blt.n	800f656 <__gethex+0x3ea>
 800f686:	e7f0      	b.n	800f66a <__gethex+0x3fe>
 800f688:	08010f9a 	.word	0x08010f9a

0800f68c <L_shift>:
 800f68c:	f1c2 0208 	rsb	r2, r2, #8
 800f690:	0092      	lsls	r2, r2, #2
 800f692:	b570      	push	{r4, r5, r6, lr}
 800f694:	f1c2 0620 	rsb	r6, r2, #32
 800f698:	6843      	ldr	r3, [r0, #4]
 800f69a:	6804      	ldr	r4, [r0, #0]
 800f69c:	fa03 f506 	lsl.w	r5, r3, r6
 800f6a0:	432c      	orrs	r4, r5
 800f6a2:	40d3      	lsrs	r3, r2
 800f6a4:	6004      	str	r4, [r0, #0]
 800f6a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f6aa:	4288      	cmp	r0, r1
 800f6ac:	d3f4      	bcc.n	800f698 <L_shift+0xc>
 800f6ae:	bd70      	pop	{r4, r5, r6, pc}

0800f6b0 <__match>:
 800f6b0:	b530      	push	{r4, r5, lr}
 800f6b2:	6803      	ldr	r3, [r0, #0]
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6ba:	b914      	cbnz	r4, 800f6c2 <__match+0x12>
 800f6bc:	6003      	str	r3, [r0, #0]
 800f6be:	2001      	movs	r0, #1
 800f6c0:	bd30      	pop	{r4, r5, pc}
 800f6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f6ca:	2d19      	cmp	r5, #25
 800f6cc:	bf98      	it	ls
 800f6ce:	3220      	addls	r2, #32
 800f6d0:	42a2      	cmp	r2, r4
 800f6d2:	d0f0      	beq.n	800f6b6 <__match+0x6>
 800f6d4:	2000      	movs	r0, #0
 800f6d6:	e7f3      	b.n	800f6c0 <__match+0x10>

0800f6d8 <__hexnan>:
 800f6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6dc:	680b      	ldr	r3, [r1, #0]
 800f6de:	6801      	ldr	r1, [r0, #0]
 800f6e0:	115e      	asrs	r6, r3, #5
 800f6e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f6e6:	f013 031f 	ands.w	r3, r3, #31
 800f6ea:	b087      	sub	sp, #28
 800f6ec:	bf18      	it	ne
 800f6ee:	3604      	addne	r6, #4
 800f6f0:	2500      	movs	r5, #0
 800f6f2:	1f37      	subs	r7, r6, #4
 800f6f4:	4682      	mov	sl, r0
 800f6f6:	4690      	mov	r8, r2
 800f6f8:	9301      	str	r3, [sp, #4]
 800f6fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800f6fe:	46b9      	mov	r9, r7
 800f700:	463c      	mov	r4, r7
 800f702:	9502      	str	r5, [sp, #8]
 800f704:	46ab      	mov	fp, r5
 800f706:	784a      	ldrb	r2, [r1, #1]
 800f708:	1c4b      	adds	r3, r1, #1
 800f70a:	9303      	str	r3, [sp, #12]
 800f70c:	b342      	cbz	r2, 800f760 <__hexnan+0x88>
 800f70e:	4610      	mov	r0, r2
 800f710:	9105      	str	r1, [sp, #20]
 800f712:	9204      	str	r2, [sp, #16]
 800f714:	f7ff fd94 	bl	800f240 <__hexdig_fun>
 800f718:	2800      	cmp	r0, #0
 800f71a:	d151      	bne.n	800f7c0 <__hexnan+0xe8>
 800f71c:	9a04      	ldr	r2, [sp, #16]
 800f71e:	9905      	ldr	r1, [sp, #20]
 800f720:	2a20      	cmp	r2, #32
 800f722:	d818      	bhi.n	800f756 <__hexnan+0x7e>
 800f724:	9b02      	ldr	r3, [sp, #8]
 800f726:	459b      	cmp	fp, r3
 800f728:	dd13      	ble.n	800f752 <__hexnan+0x7a>
 800f72a:	454c      	cmp	r4, r9
 800f72c:	d206      	bcs.n	800f73c <__hexnan+0x64>
 800f72e:	2d07      	cmp	r5, #7
 800f730:	dc04      	bgt.n	800f73c <__hexnan+0x64>
 800f732:	462a      	mov	r2, r5
 800f734:	4649      	mov	r1, r9
 800f736:	4620      	mov	r0, r4
 800f738:	f7ff ffa8 	bl	800f68c <L_shift>
 800f73c:	4544      	cmp	r4, r8
 800f73e:	d952      	bls.n	800f7e6 <__hexnan+0x10e>
 800f740:	2300      	movs	r3, #0
 800f742:	f1a4 0904 	sub.w	r9, r4, #4
 800f746:	f844 3c04 	str.w	r3, [r4, #-4]
 800f74a:	f8cd b008 	str.w	fp, [sp, #8]
 800f74e:	464c      	mov	r4, r9
 800f750:	461d      	mov	r5, r3
 800f752:	9903      	ldr	r1, [sp, #12]
 800f754:	e7d7      	b.n	800f706 <__hexnan+0x2e>
 800f756:	2a29      	cmp	r2, #41	@ 0x29
 800f758:	d157      	bne.n	800f80a <__hexnan+0x132>
 800f75a:	3102      	adds	r1, #2
 800f75c:	f8ca 1000 	str.w	r1, [sl]
 800f760:	f1bb 0f00 	cmp.w	fp, #0
 800f764:	d051      	beq.n	800f80a <__hexnan+0x132>
 800f766:	454c      	cmp	r4, r9
 800f768:	d206      	bcs.n	800f778 <__hexnan+0xa0>
 800f76a:	2d07      	cmp	r5, #7
 800f76c:	dc04      	bgt.n	800f778 <__hexnan+0xa0>
 800f76e:	462a      	mov	r2, r5
 800f770:	4649      	mov	r1, r9
 800f772:	4620      	mov	r0, r4
 800f774:	f7ff ff8a 	bl	800f68c <L_shift>
 800f778:	4544      	cmp	r4, r8
 800f77a:	d936      	bls.n	800f7ea <__hexnan+0x112>
 800f77c:	f1a8 0204 	sub.w	r2, r8, #4
 800f780:	4623      	mov	r3, r4
 800f782:	f853 1b04 	ldr.w	r1, [r3], #4
 800f786:	f842 1f04 	str.w	r1, [r2, #4]!
 800f78a:	429f      	cmp	r7, r3
 800f78c:	d2f9      	bcs.n	800f782 <__hexnan+0xaa>
 800f78e:	1b3b      	subs	r3, r7, r4
 800f790:	f023 0303 	bic.w	r3, r3, #3
 800f794:	3304      	adds	r3, #4
 800f796:	3401      	adds	r4, #1
 800f798:	3e03      	subs	r6, #3
 800f79a:	42b4      	cmp	r4, r6
 800f79c:	bf88      	it	hi
 800f79e:	2304      	movhi	r3, #4
 800f7a0:	4443      	add	r3, r8
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f843 2b04 	str.w	r2, [r3], #4
 800f7a8:	429f      	cmp	r7, r3
 800f7aa:	d2fb      	bcs.n	800f7a4 <__hexnan+0xcc>
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	b91b      	cbnz	r3, 800f7b8 <__hexnan+0xe0>
 800f7b0:	4547      	cmp	r7, r8
 800f7b2:	d128      	bne.n	800f806 <__hexnan+0x12e>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	603b      	str	r3, [r7, #0]
 800f7b8:	2005      	movs	r0, #5
 800f7ba:	b007      	add	sp, #28
 800f7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c0:	3501      	adds	r5, #1
 800f7c2:	2d08      	cmp	r5, #8
 800f7c4:	f10b 0b01 	add.w	fp, fp, #1
 800f7c8:	dd06      	ble.n	800f7d8 <__hexnan+0x100>
 800f7ca:	4544      	cmp	r4, r8
 800f7cc:	d9c1      	bls.n	800f752 <__hexnan+0x7a>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7d4:	2501      	movs	r5, #1
 800f7d6:	3c04      	subs	r4, #4
 800f7d8:	6822      	ldr	r2, [r4, #0]
 800f7da:	f000 000f 	and.w	r0, r0, #15
 800f7de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f7e2:	6020      	str	r0, [r4, #0]
 800f7e4:	e7b5      	b.n	800f752 <__hexnan+0x7a>
 800f7e6:	2508      	movs	r5, #8
 800f7e8:	e7b3      	b.n	800f752 <__hexnan+0x7a>
 800f7ea:	9b01      	ldr	r3, [sp, #4]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d0dd      	beq.n	800f7ac <__hexnan+0xd4>
 800f7f0:	f1c3 0320 	rsb	r3, r3, #32
 800f7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f7f8:	40da      	lsrs	r2, r3
 800f7fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f7fe:	4013      	ands	r3, r2
 800f800:	f846 3c04 	str.w	r3, [r6, #-4]
 800f804:	e7d2      	b.n	800f7ac <__hexnan+0xd4>
 800f806:	3f04      	subs	r7, #4
 800f808:	e7d0      	b.n	800f7ac <__hexnan+0xd4>
 800f80a:	2004      	movs	r0, #4
 800f80c:	e7d5      	b.n	800f7ba <__hexnan+0xe2>

0800f80e <__ascii_mbtowc>:
 800f80e:	b082      	sub	sp, #8
 800f810:	b901      	cbnz	r1, 800f814 <__ascii_mbtowc+0x6>
 800f812:	a901      	add	r1, sp, #4
 800f814:	b142      	cbz	r2, 800f828 <__ascii_mbtowc+0x1a>
 800f816:	b14b      	cbz	r3, 800f82c <__ascii_mbtowc+0x1e>
 800f818:	7813      	ldrb	r3, [r2, #0]
 800f81a:	600b      	str	r3, [r1, #0]
 800f81c:	7812      	ldrb	r2, [r2, #0]
 800f81e:	1e10      	subs	r0, r2, #0
 800f820:	bf18      	it	ne
 800f822:	2001      	movne	r0, #1
 800f824:	b002      	add	sp, #8
 800f826:	4770      	bx	lr
 800f828:	4610      	mov	r0, r2
 800f82a:	e7fb      	b.n	800f824 <__ascii_mbtowc+0x16>
 800f82c:	f06f 0001 	mvn.w	r0, #1
 800f830:	e7f8      	b.n	800f824 <__ascii_mbtowc+0x16>
	...

0800f834 <_Balloc>:
 800f834:	b570      	push	{r4, r5, r6, lr}
 800f836:	69c6      	ldr	r6, [r0, #28]
 800f838:	4604      	mov	r4, r0
 800f83a:	460d      	mov	r5, r1
 800f83c:	b976      	cbnz	r6, 800f85c <_Balloc+0x28>
 800f83e:	2010      	movs	r0, #16
 800f840:	f7fc fe38 	bl	800c4b4 <malloc>
 800f844:	4602      	mov	r2, r0
 800f846:	61e0      	str	r0, [r4, #28]
 800f848:	b920      	cbnz	r0, 800f854 <_Balloc+0x20>
 800f84a:	4b18      	ldr	r3, [pc, #96]	@ (800f8ac <_Balloc+0x78>)
 800f84c:	4818      	ldr	r0, [pc, #96]	@ (800f8b0 <_Balloc+0x7c>)
 800f84e:	216b      	movs	r1, #107	@ 0x6b
 800f850:	f7fe fdf0 	bl	800e434 <__assert_func>
 800f854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f858:	6006      	str	r6, [r0, #0]
 800f85a:	60c6      	str	r6, [r0, #12]
 800f85c:	69e6      	ldr	r6, [r4, #28]
 800f85e:	68f3      	ldr	r3, [r6, #12]
 800f860:	b183      	cbz	r3, 800f884 <_Balloc+0x50>
 800f862:	69e3      	ldr	r3, [r4, #28]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f86a:	b9b8      	cbnz	r0, 800f89c <_Balloc+0x68>
 800f86c:	2101      	movs	r1, #1
 800f86e:	fa01 f605 	lsl.w	r6, r1, r5
 800f872:	1d72      	adds	r2, r6, #5
 800f874:	0092      	lsls	r2, r2, #2
 800f876:	4620      	mov	r0, r4
 800f878:	f000 fed1 	bl	801061e <_calloc_r>
 800f87c:	b160      	cbz	r0, 800f898 <_Balloc+0x64>
 800f87e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f882:	e00e      	b.n	800f8a2 <_Balloc+0x6e>
 800f884:	2221      	movs	r2, #33	@ 0x21
 800f886:	2104      	movs	r1, #4
 800f888:	4620      	mov	r0, r4
 800f88a:	f000 fec8 	bl	801061e <_calloc_r>
 800f88e:	69e3      	ldr	r3, [r4, #28]
 800f890:	60f0      	str	r0, [r6, #12]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1e4      	bne.n	800f862 <_Balloc+0x2e>
 800f898:	2000      	movs	r0, #0
 800f89a:	bd70      	pop	{r4, r5, r6, pc}
 800f89c:	6802      	ldr	r2, [r0, #0]
 800f89e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8a8:	e7f7      	b.n	800f89a <_Balloc+0x66>
 800f8aa:	bf00      	nop
 800f8ac:	08010f2b 	.word	0x08010f2b
 800f8b0:	0801100b 	.word	0x0801100b

0800f8b4 <_Bfree>:
 800f8b4:	b570      	push	{r4, r5, r6, lr}
 800f8b6:	69c6      	ldr	r6, [r0, #28]
 800f8b8:	4605      	mov	r5, r0
 800f8ba:	460c      	mov	r4, r1
 800f8bc:	b976      	cbnz	r6, 800f8dc <_Bfree+0x28>
 800f8be:	2010      	movs	r0, #16
 800f8c0:	f7fc fdf8 	bl	800c4b4 <malloc>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	61e8      	str	r0, [r5, #28]
 800f8c8:	b920      	cbnz	r0, 800f8d4 <_Bfree+0x20>
 800f8ca:	4b09      	ldr	r3, [pc, #36]	@ (800f8f0 <_Bfree+0x3c>)
 800f8cc:	4809      	ldr	r0, [pc, #36]	@ (800f8f4 <_Bfree+0x40>)
 800f8ce:	218f      	movs	r1, #143	@ 0x8f
 800f8d0:	f7fe fdb0 	bl	800e434 <__assert_func>
 800f8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8d8:	6006      	str	r6, [r0, #0]
 800f8da:	60c6      	str	r6, [r0, #12]
 800f8dc:	b13c      	cbz	r4, 800f8ee <_Bfree+0x3a>
 800f8de:	69eb      	ldr	r3, [r5, #28]
 800f8e0:	6862      	ldr	r2, [r4, #4]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8e8:	6021      	str	r1, [r4, #0]
 800f8ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8ee:	bd70      	pop	{r4, r5, r6, pc}
 800f8f0:	08010f2b 	.word	0x08010f2b
 800f8f4:	0801100b 	.word	0x0801100b

0800f8f8 <__multadd>:
 800f8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fc:	690d      	ldr	r5, [r1, #16]
 800f8fe:	4607      	mov	r7, r0
 800f900:	460c      	mov	r4, r1
 800f902:	461e      	mov	r6, r3
 800f904:	f101 0c14 	add.w	ip, r1, #20
 800f908:	2000      	movs	r0, #0
 800f90a:	f8dc 3000 	ldr.w	r3, [ip]
 800f90e:	b299      	uxth	r1, r3
 800f910:	fb02 6101 	mla	r1, r2, r1, r6
 800f914:	0c1e      	lsrs	r6, r3, #16
 800f916:	0c0b      	lsrs	r3, r1, #16
 800f918:	fb02 3306 	mla	r3, r2, r6, r3
 800f91c:	b289      	uxth	r1, r1
 800f91e:	3001      	adds	r0, #1
 800f920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f924:	4285      	cmp	r5, r0
 800f926:	f84c 1b04 	str.w	r1, [ip], #4
 800f92a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f92e:	dcec      	bgt.n	800f90a <__multadd+0x12>
 800f930:	b30e      	cbz	r6, 800f976 <__multadd+0x7e>
 800f932:	68a3      	ldr	r3, [r4, #8]
 800f934:	42ab      	cmp	r3, r5
 800f936:	dc19      	bgt.n	800f96c <__multadd+0x74>
 800f938:	6861      	ldr	r1, [r4, #4]
 800f93a:	4638      	mov	r0, r7
 800f93c:	3101      	adds	r1, #1
 800f93e:	f7ff ff79 	bl	800f834 <_Balloc>
 800f942:	4680      	mov	r8, r0
 800f944:	b928      	cbnz	r0, 800f952 <__multadd+0x5a>
 800f946:	4602      	mov	r2, r0
 800f948:	4b0c      	ldr	r3, [pc, #48]	@ (800f97c <__multadd+0x84>)
 800f94a:	480d      	ldr	r0, [pc, #52]	@ (800f980 <__multadd+0x88>)
 800f94c:	21ba      	movs	r1, #186	@ 0xba
 800f94e:	f7fe fd71 	bl	800e434 <__assert_func>
 800f952:	6922      	ldr	r2, [r4, #16]
 800f954:	3202      	adds	r2, #2
 800f956:	f104 010c 	add.w	r1, r4, #12
 800f95a:	0092      	lsls	r2, r2, #2
 800f95c:	300c      	adds	r0, #12
 800f95e:	f7fe fd4c 	bl	800e3fa <memcpy>
 800f962:	4621      	mov	r1, r4
 800f964:	4638      	mov	r0, r7
 800f966:	f7ff ffa5 	bl	800f8b4 <_Bfree>
 800f96a:	4644      	mov	r4, r8
 800f96c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f970:	3501      	adds	r5, #1
 800f972:	615e      	str	r6, [r3, #20]
 800f974:	6125      	str	r5, [r4, #16]
 800f976:	4620      	mov	r0, r4
 800f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f97c:	08010f9a 	.word	0x08010f9a
 800f980:	0801100b 	.word	0x0801100b

0800f984 <__s2b>:
 800f984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f988:	460c      	mov	r4, r1
 800f98a:	4615      	mov	r5, r2
 800f98c:	461f      	mov	r7, r3
 800f98e:	2209      	movs	r2, #9
 800f990:	3308      	adds	r3, #8
 800f992:	4606      	mov	r6, r0
 800f994:	fb93 f3f2 	sdiv	r3, r3, r2
 800f998:	2100      	movs	r1, #0
 800f99a:	2201      	movs	r2, #1
 800f99c:	429a      	cmp	r2, r3
 800f99e:	db09      	blt.n	800f9b4 <__s2b+0x30>
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	f7ff ff47 	bl	800f834 <_Balloc>
 800f9a6:	b940      	cbnz	r0, 800f9ba <__s2b+0x36>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	4b19      	ldr	r3, [pc, #100]	@ (800fa10 <__s2b+0x8c>)
 800f9ac:	4819      	ldr	r0, [pc, #100]	@ (800fa14 <__s2b+0x90>)
 800f9ae:	21d3      	movs	r1, #211	@ 0xd3
 800f9b0:	f7fe fd40 	bl	800e434 <__assert_func>
 800f9b4:	0052      	lsls	r2, r2, #1
 800f9b6:	3101      	adds	r1, #1
 800f9b8:	e7f0      	b.n	800f99c <__s2b+0x18>
 800f9ba:	9b08      	ldr	r3, [sp, #32]
 800f9bc:	6143      	str	r3, [r0, #20]
 800f9be:	2d09      	cmp	r5, #9
 800f9c0:	f04f 0301 	mov.w	r3, #1
 800f9c4:	6103      	str	r3, [r0, #16]
 800f9c6:	dd16      	ble.n	800f9f6 <__s2b+0x72>
 800f9c8:	f104 0909 	add.w	r9, r4, #9
 800f9cc:	46c8      	mov	r8, r9
 800f9ce:	442c      	add	r4, r5
 800f9d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f9d4:	4601      	mov	r1, r0
 800f9d6:	3b30      	subs	r3, #48	@ 0x30
 800f9d8:	220a      	movs	r2, #10
 800f9da:	4630      	mov	r0, r6
 800f9dc:	f7ff ff8c 	bl	800f8f8 <__multadd>
 800f9e0:	45a0      	cmp	r8, r4
 800f9e2:	d1f5      	bne.n	800f9d0 <__s2b+0x4c>
 800f9e4:	f1a5 0408 	sub.w	r4, r5, #8
 800f9e8:	444c      	add	r4, r9
 800f9ea:	1b2d      	subs	r5, r5, r4
 800f9ec:	1963      	adds	r3, r4, r5
 800f9ee:	42bb      	cmp	r3, r7
 800f9f0:	db04      	blt.n	800f9fc <__s2b+0x78>
 800f9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9f6:	340a      	adds	r4, #10
 800f9f8:	2509      	movs	r5, #9
 800f9fa:	e7f6      	b.n	800f9ea <__s2b+0x66>
 800f9fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa00:	4601      	mov	r1, r0
 800fa02:	3b30      	subs	r3, #48	@ 0x30
 800fa04:	220a      	movs	r2, #10
 800fa06:	4630      	mov	r0, r6
 800fa08:	f7ff ff76 	bl	800f8f8 <__multadd>
 800fa0c:	e7ee      	b.n	800f9ec <__s2b+0x68>
 800fa0e:	bf00      	nop
 800fa10:	08010f9a 	.word	0x08010f9a
 800fa14:	0801100b 	.word	0x0801100b

0800fa18 <__hi0bits>:
 800fa18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	bf36      	itet	cc
 800fa20:	0403      	lslcc	r3, r0, #16
 800fa22:	2000      	movcs	r0, #0
 800fa24:	2010      	movcc	r0, #16
 800fa26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fa2a:	bf3c      	itt	cc
 800fa2c:	021b      	lslcc	r3, r3, #8
 800fa2e:	3008      	addcc	r0, #8
 800fa30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa34:	bf3c      	itt	cc
 800fa36:	011b      	lslcc	r3, r3, #4
 800fa38:	3004      	addcc	r0, #4
 800fa3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa3e:	bf3c      	itt	cc
 800fa40:	009b      	lslcc	r3, r3, #2
 800fa42:	3002      	addcc	r0, #2
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	db05      	blt.n	800fa54 <__hi0bits+0x3c>
 800fa48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fa4c:	f100 0001 	add.w	r0, r0, #1
 800fa50:	bf08      	it	eq
 800fa52:	2020      	moveq	r0, #32
 800fa54:	4770      	bx	lr

0800fa56 <__lo0bits>:
 800fa56:	6803      	ldr	r3, [r0, #0]
 800fa58:	4602      	mov	r2, r0
 800fa5a:	f013 0007 	ands.w	r0, r3, #7
 800fa5e:	d00b      	beq.n	800fa78 <__lo0bits+0x22>
 800fa60:	07d9      	lsls	r1, r3, #31
 800fa62:	d421      	bmi.n	800faa8 <__lo0bits+0x52>
 800fa64:	0798      	lsls	r0, r3, #30
 800fa66:	bf49      	itett	mi
 800fa68:	085b      	lsrmi	r3, r3, #1
 800fa6a:	089b      	lsrpl	r3, r3, #2
 800fa6c:	2001      	movmi	r0, #1
 800fa6e:	6013      	strmi	r3, [r2, #0]
 800fa70:	bf5c      	itt	pl
 800fa72:	6013      	strpl	r3, [r2, #0]
 800fa74:	2002      	movpl	r0, #2
 800fa76:	4770      	bx	lr
 800fa78:	b299      	uxth	r1, r3
 800fa7a:	b909      	cbnz	r1, 800fa80 <__lo0bits+0x2a>
 800fa7c:	0c1b      	lsrs	r3, r3, #16
 800fa7e:	2010      	movs	r0, #16
 800fa80:	b2d9      	uxtb	r1, r3
 800fa82:	b909      	cbnz	r1, 800fa88 <__lo0bits+0x32>
 800fa84:	3008      	adds	r0, #8
 800fa86:	0a1b      	lsrs	r3, r3, #8
 800fa88:	0719      	lsls	r1, r3, #28
 800fa8a:	bf04      	itt	eq
 800fa8c:	091b      	lsreq	r3, r3, #4
 800fa8e:	3004      	addeq	r0, #4
 800fa90:	0799      	lsls	r1, r3, #30
 800fa92:	bf04      	itt	eq
 800fa94:	089b      	lsreq	r3, r3, #2
 800fa96:	3002      	addeq	r0, #2
 800fa98:	07d9      	lsls	r1, r3, #31
 800fa9a:	d403      	bmi.n	800faa4 <__lo0bits+0x4e>
 800fa9c:	085b      	lsrs	r3, r3, #1
 800fa9e:	f100 0001 	add.w	r0, r0, #1
 800faa2:	d003      	beq.n	800faac <__lo0bits+0x56>
 800faa4:	6013      	str	r3, [r2, #0]
 800faa6:	4770      	bx	lr
 800faa8:	2000      	movs	r0, #0
 800faaa:	4770      	bx	lr
 800faac:	2020      	movs	r0, #32
 800faae:	4770      	bx	lr

0800fab0 <__i2b>:
 800fab0:	b510      	push	{r4, lr}
 800fab2:	460c      	mov	r4, r1
 800fab4:	2101      	movs	r1, #1
 800fab6:	f7ff febd 	bl	800f834 <_Balloc>
 800faba:	4602      	mov	r2, r0
 800fabc:	b928      	cbnz	r0, 800faca <__i2b+0x1a>
 800fabe:	4b05      	ldr	r3, [pc, #20]	@ (800fad4 <__i2b+0x24>)
 800fac0:	4805      	ldr	r0, [pc, #20]	@ (800fad8 <__i2b+0x28>)
 800fac2:	f240 1145 	movw	r1, #325	@ 0x145
 800fac6:	f7fe fcb5 	bl	800e434 <__assert_func>
 800faca:	2301      	movs	r3, #1
 800facc:	6144      	str	r4, [r0, #20]
 800face:	6103      	str	r3, [r0, #16]
 800fad0:	bd10      	pop	{r4, pc}
 800fad2:	bf00      	nop
 800fad4:	08010f9a 	.word	0x08010f9a
 800fad8:	0801100b 	.word	0x0801100b

0800fadc <__multiply>:
 800fadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae0:	4614      	mov	r4, r2
 800fae2:	690a      	ldr	r2, [r1, #16]
 800fae4:	6923      	ldr	r3, [r4, #16]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	bfa8      	it	ge
 800faea:	4623      	movge	r3, r4
 800faec:	460f      	mov	r7, r1
 800faee:	bfa4      	itt	ge
 800faf0:	460c      	movge	r4, r1
 800faf2:	461f      	movge	r7, r3
 800faf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800faf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fafc:	68a3      	ldr	r3, [r4, #8]
 800fafe:	6861      	ldr	r1, [r4, #4]
 800fb00:	eb0a 0609 	add.w	r6, sl, r9
 800fb04:	42b3      	cmp	r3, r6
 800fb06:	b085      	sub	sp, #20
 800fb08:	bfb8      	it	lt
 800fb0a:	3101      	addlt	r1, #1
 800fb0c:	f7ff fe92 	bl	800f834 <_Balloc>
 800fb10:	b930      	cbnz	r0, 800fb20 <__multiply+0x44>
 800fb12:	4602      	mov	r2, r0
 800fb14:	4b44      	ldr	r3, [pc, #272]	@ (800fc28 <__multiply+0x14c>)
 800fb16:	4845      	ldr	r0, [pc, #276]	@ (800fc2c <__multiply+0x150>)
 800fb18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fb1c:	f7fe fc8a 	bl	800e434 <__assert_func>
 800fb20:	f100 0514 	add.w	r5, r0, #20
 800fb24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb28:	462b      	mov	r3, r5
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	4543      	cmp	r3, r8
 800fb2e:	d321      	bcc.n	800fb74 <__multiply+0x98>
 800fb30:	f107 0114 	add.w	r1, r7, #20
 800fb34:	f104 0214 	add.w	r2, r4, #20
 800fb38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fb3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fb40:	9302      	str	r3, [sp, #8]
 800fb42:	1b13      	subs	r3, r2, r4
 800fb44:	3b15      	subs	r3, #21
 800fb46:	f023 0303 	bic.w	r3, r3, #3
 800fb4a:	3304      	adds	r3, #4
 800fb4c:	f104 0715 	add.w	r7, r4, #21
 800fb50:	42ba      	cmp	r2, r7
 800fb52:	bf38      	it	cc
 800fb54:	2304      	movcc	r3, #4
 800fb56:	9301      	str	r3, [sp, #4]
 800fb58:	9b02      	ldr	r3, [sp, #8]
 800fb5a:	9103      	str	r1, [sp, #12]
 800fb5c:	428b      	cmp	r3, r1
 800fb5e:	d80c      	bhi.n	800fb7a <__multiply+0x9e>
 800fb60:	2e00      	cmp	r6, #0
 800fb62:	dd03      	ble.n	800fb6c <__multiply+0x90>
 800fb64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d05b      	beq.n	800fc24 <__multiply+0x148>
 800fb6c:	6106      	str	r6, [r0, #16]
 800fb6e:	b005      	add	sp, #20
 800fb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb74:	f843 2b04 	str.w	r2, [r3], #4
 800fb78:	e7d8      	b.n	800fb2c <__multiply+0x50>
 800fb7a:	f8b1 a000 	ldrh.w	sl, [r1]
 800fb7e:	f1ba 0f00 	cmp.w	sl, #0
 800fb82:	d024      	beq.n	800fbce <__multiply+0xf2>
 800fb84:	f104 0e14 	add.w	lr, r4, #20
 800fb88:	46a9      	mov	r9, r5
 800fb8a:	f04f 0c00 	mov.w	ip, #0
 800fb8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb92:	f8d9 3000 	ldr.w	r3, [r9]
 800fb96:	fa1f fb87 	uxth.w	fp, r7
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800fba0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fba4:	f8d9 7000 	ldr.w	r7, [r9]
 800fba8:	4463      	add	r3, ip
 800fbaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fbae:	fb0a c70b 	mla	r7, sl, fp, ip
 800fbb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fbbc:	4572      	cmp	r2, lr
 800fbbe:	f849 3b04 	str.w	r3, [r9], #4
 800fbc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fbc6:	d8e2      	bhi.n	800fb8e <__multiply+0xb2>
 800fbc8:	9b01      	ldr	r3, [sp, #4]
 800fbca:	f845 c003 	str.w	ip, [r5, r3]
 800fbce:	9b03      	ldr	r3, [sp, #12]
 800fbd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fbd4:	3104      	adds	r1, #4
 800fbd6:	f1b9 0f00 	cmp.w	r9, #0
 800fbda:	d021      	beq.n	800fc20 <__multiply+0x144>
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	f104 0c14 	add.w	ip, r4, #20
 800fbe2:	46ae      	mov	lr, r5
 800fbe4:	f04f 0a00 	mov.w	sl, #0
 800fbe8:	f8bc b000 	ldrh.w	fp, [ip]
 800fbec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fbf0:	fb09 770b 	mla	r7, r9, fp, r7
 800fbf4:	4457      	add	r7, sl
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fbfc:	f84e 3b04 	str.w	r3, [lr], #4
 800fc00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fc04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc08:	f8be 3000 	ldrh.w	r3, [lr]
 800fc0c:	fb09 330a 	mla	r3, r9, sl, r3
 800fc10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fc14:	4562      	cmp	r2, ip
 800fc16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc1a:	d8e5      	bhi.n	800fbe8 <__multiply+0x10c>
 800fc1c:	9f01      	ldr	r7, [sp, #4]
 800fc1e:	51eb      	str	r3, [r5, r7]
 800fc20:	3504      	adds	r5, #4
 800fc22:	e799      	b.n	800fb58 <__multiply+0x7c>
 800fc24:	3e01      	subs	r6, #1
 800fc26:	e79b      	b.n	800fb60 <__multiply+0x84>
 800fc28:	08010f9a 	.word	0x08010f9a
 800fc2c:	0801100b 	.word	0x0801100b

0800fc30 <__pow5mult>:
 800fc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc34:	4615      	mov	r5, r2
 800fc36:	f012 0203 	ands.w	r2, r2, #3
 800fc3a:	4607      	mov	r7, r0
 800fc3c:	460e      	mov	r6, r1
 800fc3e:	d007      	beq.n	800fc50 <__pow5mult+0x20>
 800fc40:	4c25      	ldr	r4, [pc, #148]	@ (800fcd8 <__pow5mult+0xa8>)
 800fc42:	3a01      	subs	r2, #1
 800fc44:	2300      	movs	r3, #0
 800fc46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc4a:	f7ff fe55 	bl	800f8f8 <__multadd>
 800fc4e:	4606      	mov	r6, r0
 800fc50:	10ad      	asrs	r5, r5, #2
 800fc52:	d03d      	beq.n	800fcd0 <__pow5mult+0xa0>
 800fc54:	69fc      	ldr	r4, [r7, #28]
 800fc56:	b97c      	cbnz	r4, 800fc78 <__pow5mult+0x48>
 800fc58:	2010      	movs	r0, #16
 800fc5a:	f7fc fc2b 	bl	800c4b4 <malloc>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	61f8      	str	r0, [r7, #28]
 800fc62:	b928      	cbnz	r0, 800fc70 <__pow5mult+0x40>
 800fc64:	4b1d      	ldr	r3, [pc, #116]	@ (800fcdc <__pow5mult+0xac>)
 800fc66:	481e      	ldr	r0, [pc, #120]	@ (800fce0 <__pow5mult+0xb0>)
 800fc68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fc6c:	f7fe fbe2 	bl	800e434 <__assert_func>
 800fc70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc74:	6004      	str	r4, [r0, #0]
 800fc76:	60c4      	str	r4, [r0, #12]
 800fc78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fc7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc80:	b94c      	cbnz	r4, 800fc96 <__pow5mult+0x66>
 800fc82:	f240 2171 	movw	r1, #625	@ 0x271
 800fc86:	4638      	mov	r0, r7
 800fc88:	f7ff ff12 	bl	800fab0 <__i2b>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc92:	4604      	mov	r4, r0
 800fc94:	6003      	str	r3, [r0, #0]
 800fc96:	f04f 0900 	mov.w	r9, #0
 800fc9a:	07eb      	lsls	r3, r5, #31
 800fc9c:	d50a      	bpl.n	800fcb4 <__pow5mult+0x84>
 800fc9e:	4631      	mov	r1, r6
 800fca0:	4622      	mov	r2, r4
 800fca2:	4638      	mov	r0, r7
 800fca4:	f7ff ff1a 	bl	800fadc <__multiply>
 800fca8:	4631      	mov	r1, r6
 800fcaa:	4680      	mov	r8, r0
 800fcac:	4638      	mov	r0, r7
 800fcae:	f7ff fe01 	bl	800f8b4 <_Bfree>
 800fcb2:	4646      	mov	r6, r8
 800fcb4:	106d      	asrs	r5, r5, #1
 800fcb6:	d00b      	beq.n	800fcd0 <__pow5mult+0xa0>
 800fcb8:	6820      	ldr	r0, [r4, #0]
 800fcba:	b938      	cbnz	r0, 800fccc <__pow5mult+0x9c>
 800fcbc:	4622      	mov	r2, r4
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	4638      	mov	r0, r7
 800fcc2:	f7ff ff0b 	bl	800fadc <__multiply>
 800fcc6:	6020      	str	r0, [r4, #0]
 800fcc8:	f8c0 9000 	str.w	r9, [r0]
 800fccc:	4604      	mov	r4, r0
 800fcce:	e7e4      	b.n	800fc9a <__pow5mult+0x6a>
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcd6:	bf00      	nop
 800fcd8:	08011064 	.word	0x08011064
 800fcdc:	08010f2b 	.word	0x08010f2b
 800fce0:	0801100b 	.word	0x0801100b

0800fce4 <__lshift>:
 800fce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce8:	460c      	mov	r4, r1
 800fcea:	6849      	ldr	r1, [r1, #4]
 800fcec:	6923      	ldr	r3, [r4, #16]
 800fcee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fcf2:	68a3      	ldr	r3, [r4, #8]
 800fcf4:	4607      	mov	r7, r0
 800fcf6:	4691      	mov	r9, r2
 800fcf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fcfc:	f108 0601 	add.w	r6, r8, #1
 800fd00:	42b3      	cmp	r3, r6
 800fd02:	db0b      	blt.n	800fd1c <__lshift+0x38>
 800fd04:	4638      	mov	r0, r7
 800fd06:	f7ff fd95 	bl	800f834 <_Balloc>
 800fd0a:	4605      	mov	r5, r0
 800fd0c:	b948      	cbnz	r0, 800fd22 <__lshift+0x3e>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	4b28      	ldr	r3, [pc, #160]	@ (800fdb4 <__lshift+0xd0>)
 800fd12:	4829      	ldr	r0, [pc, #164]	@ (800fdb8 <__lshift+0xd4>)
 800fd14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fd18:	f7fe fb8c 	bl	800e434 <__assert_func>
 800fd1c:	3101      	adds	r1, #1
 800fd1e:	005b      	lsls	r3, r3, #1
 800fd20:	e7ee      	b.n	800fd00 <__lshift+0x1c>
 800fd22:	2300      	movs	r3, #0
 800fd24:	f100 0114 	add.w	r1, r0, #20
 800fd28:	f100 0210 	add.w	r2, r0, #16
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	4553      	cmp	r3, sl
 800fd30:	db33      	blt.n	800fd9a <__lshift+0xb6>
 800fd32:	6920      	ldr	r0, [r4, #16]
 800fd34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd38:	f104 0314 	add.w	r3, r4, #20
 800fd3c:	f019 091f 	ands.w	r9, r9, #31
 800fd40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd48:	d02b      	beq.n	800fda2 <__lshift+0xbe>
 800fd4a:	f1c9 0e20 	rsb	lr, r9, #32
 800fd4e:	468a      	mov	sl, r1
 800fd50:	2200      	movs	r2, #0
 800fd52:	6818      	ldr	r0, [r3, #0]
 800fd54:	fa00 f009 	lsl.w	r0, r0, r9
 800fd58:	4310      	orrs	r0, r2
 800fd5a:	f84a 0b04 	str.w	r0, [sl], #4
 800fd5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd62:	459c      	cmp	ip, r3
 800fd64:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd68:	d8f3      	bhi.n	800fd52 <__lshift+0x6e>
 800fd6a:	ebac 0304 	sub.w	r3, ip, r4
 800fd6e:	3b15      	subs	r3, #21
 800fd70:	f023 0303 	bic.w	r3, r3, #3
 800fd74:	3304      	adds	r3, #4
 800fd76:	f104 0015 	add.w	r0, r4, #21
 800fd7a:	4584      	cmp	ip, r0
 800fd7c:	bf38      	it	cc
 800fd7e:	2304      	movcc	r3, #4
 800fd80:	50ca      	str	r2, [r1, r3]
 800fd82:	b10a      	cbz	r2, 800fd88 <__lshift+0xa4>
 800fd84:	f108 0602 	add.w	r6, r8, #2
 800fd88:	3e01      	subs	r6, #1
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	612e      	str	r6, [r5, #16]
 800fd8e:	4621      	mov	r1, r4
 800fd90:	f7ff fd90 	bl	800f8b4 <_Bfree>
 800fd94:	4628      	mov	r0, r5
 800fd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd9e:	3301      	adds	r3, #1
 800fda0:	e7c5      	b.n	800fd2e <__lshift+0x4a>
 800fda2:	3904      	subs	r1, #4
 800fda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fda8:	f841 2f04 	str.w	r2, [r1, #4]!
 800fdac:	459c      	cmp	ip, r3
 800fdae:	d8f9      	bhi.n	800fda4 <__lshift+0xc0>
 800fdb0:	e7ea      	b.n	800fd88 <__lshift+0xa4>
 800fdb2:	bf00      	nop
 800fdb4:	08010f9a 	.word	0x08010f9a
 800fdb8:	0801100b 	.word	0x0801100b

0800fdbc <__mcmp>:
 800fdbc:	690a      	ldr	r2, [r1, #16]
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	6900      	ldr	r0, [r0, #16]
 800fdc2:	1a80      	subs	r0, r0, r2
 800fdc4:	b530      	push	{r4, r5, lr}
 800fdc6:	d10e      	bne.n	800fde6 <__mcmp+0x2a>
 800fdc8:	3314      	adds	r3, #20
 800fdca:	3114      	adds	r1, #20
 800fdcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fdd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fdd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fdd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fddc:	4295      	cmp	r5, r2
 800fdde:	d003      	beq.n	800fde8 <__mcmp+0x2c>
 800fde0:	d205      	bcs.n	800fdee <__mcmp+0x32>
 800fde2:	f04f 30ff 	mov.w	r0, #4294967295
 800fde6:	bd30      	pop	{r4, r5, pc}
 800fde8:	42a3      	cmp	r3, r4
 800fdea:	d3f3      	bcc.n	800fdd4 <__mcmp+0x18>
 800fdec:	e7fb      	b.n	800fde6 <__mcmp+0x2a>
 800fdee:	2001      	movs	r0, #1
 800fdf0:	e7f9      	b.n	800fde6 <__mcmp+0x2a>
	...

0800fdf4 <__mdiff>:
 800fdf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf8:	4689      	mov	r9, r1
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	4648      	mov	r0, r9
 800fe00:	4614      	mov	r4, r2
 800fe02:	f7ff ffdb 	bl	800fdbc <__mcmp>
 800fe06:	1e05      	subs	r5, r0, #0
 800fe08:	d112      	bne.n	800fe30 <__mdiff+0x3c>
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	f7ff fd11 	bl	800f834 <_Balloc>
 800fe12:	4602      	mov	r2, r0
 800fe14:	b928      	cbnz	r0, 800fe22 <__mdiff+0x2e>
 800fe16:	4b3f      	ldr	r3, [pc, #252]	@ (800ff14 <__mdiff+0x120>)
 800fe18:	f240 2137 	movw	r1, #567	@ 0x237
 800fe1c:	483e      	ldr	r0, [pc, #248]	@ (800ff18 <__mdiff+0x124>)
 800fe1e:	f7fe fb09 	bl	800e434 <__assert_func>
 800fe22:	2301      	movs	r3, #1
 800fe24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe28:	4610      	mov	r0, r2
 800fe2a:	b003      	add	sp, #12
 800fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe30:	bfbc      	itt	lt
 800fe32:	464b      	movlt	r3, r9
 800fe34:	46a1      	movlt	r9, r4
 800fe36:	4630      	mov	r0, r6
 800fe38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fe3c:	bfba      	itte	lt
 800fe3e:	461c      	movlt	r4, r3
 800fe40:	2501      	movlt	r5, #1
 800fe42:	2500      	movge	r5, #0
 800fe44:	f7ff fcf6 	bl	800f834 <_Balloc>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	b918      	cbnz	r0, 800fe54 <__mdiff+0x60>
 800fe4c:	4b31      	ldr	r3, [pc, #196]	@ (800ff14 <__mdiff+0x120>)
 800fe4e:	f240 2145 	movw	r1, #581	@ 0x245
 800fe52:	e7e3      	b.n	800fe1c <__mdiff+0x28>
 800fe54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fe58:	6926      	ldr	r6, [r4, #16]
 800fe5a:	60c5      	str	r5, [r0, #12]
 800fe5c:	f109 0310 	add.w	r3, r9, #16
 800fe60:	f109 0514 	add.w	r5, r9, #20
 800fe64:	f104 0e14 	add.w	lr, r4, #20
 800fe68:	f100 0b14 	add.w	fp, r0, #20
 800fe6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fe70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fe74:	9301      	str	r3, [sp, #4]
 800fe76:	46d9      	mov	r9, fp
 800fe78:	f04f 0c00 	mov.w	ip, #0
 800fe7c:	9b01      	ldr	r3, [sp, #4]
 800fe7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fe82:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fe86:	9301      	str	r3, [sp, #4]
 800fe88:	fa1f f38a 	uxth.w	r3, sl
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	b283      	uxth	r3, r0
 800fe90:	1acb      	subs	r3, r1, r3
 800fe92:	0c00      	lsrs	r0, r0, #16
 800fe94:	4463      	add	r3, ip
 800fe96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fe9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fea4:	4576      	cmp	r6, lr
 800fea6:	f849 3b04 	str.w	r3, [r9], #4
 800feaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800feae:	d8e5      	bhi.n	800fe7c <__mdiff+0x88>
 800feb0:	1b33      	subs	r3, r6, r4
 800feb2:	3b15      	subs	r3, #21
 800feb4:	f023 0303 	bic.w	r3, r3, #3
 800feb8:	3415      	adds	r4, #21
 800feba:	3304      	adds	r3, #4
 800febc:	42a6      	cmp	r6, r4
 800febe:	bf38      	it	cc
 800fec0:	2304      	movcc	r3, #4
 800fec2:	441d      	add	r5, r3
 800fec4:	445b      	add	r3, fp
 800fec6:	461e      	mov	r6, r3
 800fec8:	462c      	mov	r4, r5
 800feca:	4544      	cmp	r4, r8
 800fecc:	d30e      	bcc.n	800feec <__mdiff+0xf8>
 800fece:	f108 0103 	add.w	r1, r8, #3
 800fed2:	1b49      	subs	r1, r1, r5
 800fed4:	f021 0103 	bic.w	r1, r1, #3
 800fed8:	3d03      	subs	r5, #3
 800feda:	45a8      	cmp	r8, r5
 800fedc:	bf38      	it	cc
 800fede:	2100      	movcc	r1, #0
 800fee0:	440b      	add	r3, r1
 800fee2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fee6:	b191      	cbz	r1, 800ff0e <__mdiff+0x11a>
 800fee8:	6117      	str	r7, [r2, #16]
 800feea:	e79d      	b.n	800fe28 <__mdiff+0x34>
 800feec:	f854 1b04 	ldr.w	r1, [r4], #4
 800fef0:	46e6      	mov	lr, ip
 800fef2:	0c08      	lsrs	r0, r1, #16
 800fef4:	fa1c fc81 	uxtah	ip, ip, r1
 800fef8:	4471      	add	r1, lr
 800fefa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fefe:	b289      	uxth	r1, r1
 800ff00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ff04:	f846 1b04 	str.w	r1, [r6], #4
 800ff08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff0c:	e7dd      	b.n	800feca <__mdiff+0xd6>
 800ff0e:	3f01      	subs	r7, #1
 800ff10:	e7e7      	b.n	800fee2 <__mdiff+0xee>
 800ff12:	bf00      	nop
 800ff14:	08010f9a 	.word	0x08010f9a
 800ff18:	0801100b 	.word	0x0801100b

0800ff1c <__ulp>:
 800ff1c:	b082      	sub	sp, #8
 800ff1e:	ed8d 0b00 	vstr	d0, [sp]
 800ff22:	9a01      	ldr	r2, [sp, #4]
 800ff24:	4b0f      	ldr	r3, [pc, #60]	@ (800ff64 <__ulp+0x48>)
 800ff26:	4013      	ands	r3, r2
 800ff28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	dc08      	bgt.n	800ff42 <__ulp+0x26>
 800ff30:	425b      	negs	r3, r3
 800ff32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ff36:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff3a:	da04      	bge.n	800ff46 <__ulp+0x2a>
 800ff3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ff40:	4113      	asrs	r3, r2
 800ff42:	2200      	movs	r2, #0
 800ff44:	e008      	b.n	800ff58 <__ulp+0x3c>
 800ff46:	f1a2 0314 	sub.w	r3, r2, #20
 800ff4a:	2b1e      	cmp	r3, #30
 800ff4c:	bfda      	itte	le
 800ff4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ff52:	40da      	lsrle	r2, r3
 800ff54:	2201      	movgt	r2, #1
 800ff56:	2300      	movs	r3, #0
 800ff58:	4619      	mov	r1, r3
 800ff5a:	4610      	mov	r0, r2
 800ff5c:	ec41 0b10 	vmov	d0, r0, r1
 800ff60:	b002      	add	sp, #8
 800ff62:	4770      	bx	lr
 800ff64:	7ff00000 	.word	0x7ff00000

0800ff68 <__b2d>:
 800ff68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff6c:	6906      	ldr	r6, [r0, #16]
 800ff6e:	f100 0814 	add.w	r8, r0, #20
 800ff72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ff76:	1f37      	subs	r7, r6, #4
 800ff78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff7c:	4610      	mov	r0, r2
 800ff7e:	f7ff fd4b 	bl	800fa18 <__hi0bits>
 800ff82:	f1c0 0320 	rsb	r3, r0, #32
 800ff86:	280a      	cmp	r0, #10
 800ff88:	600b      	str	r3, [r1, #0]
 800ff8a:	491b      	ldr	r1, [pc, #108]	@ (800fff8 <__b2d+0x90>)
 800ff8c:	dc15      	bgt.n	800ffba <__b2d+0x52>
 800ff8e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ff92:	fa22 f30c 	lsr.w	r3, r2, ip
 800ff96:	45b8      	cmp	r8, r7
 800ff98:	ea43 0501 	orr.w	r5, r3, r1
 800ff9c:	bf34      	ite	cc
 800ff9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ffa2:	2300      	movcs	r3, #0
 800ffa4:	3015      	adds	r0, #21
 800ffa6:	fa02 f000 	lsl.w	r0, r2, r0
 800ffaa:	fa23 f30c 	lsr.w	r3, r3, ip
 800ffae:	4303      	orrs	r3, r0
 800ffb0:	461c      	mov	r4, r3
 800ffb2:	ec45 4b10 	vmov	d0, r4, r5
 800ffb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffba:	45b8      	cmp	r8, r7
 800ffbc:	bf3a      	itte	cc
 800ffbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ffc2:	f1a6 0708 	subcc.w	r7, r6, #8
 800ffc6:	2300      	movcs	r3, #0
 800ffc8:	380b      	subs	r0, #11
 800ffca:	d012      	beq.n	800fff2 <__b2d+0x8a>
 800ffcc:	f1c0 0120 	rsb	r1, r0, #32
 800ffd0:	fa23 f401 	lsr.w	r4, r3, r1
 800ffd4:	4082      	lsls	r2, r0
 800ffd6:	4322      	orrs	r2, r4
 800ffd8:	4547      	cmp	r7, r8
 800ffda:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ffde:	bf8c      	ite	hi
 800ffe0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ffe4:	2200      	movls	r2, #0
 800ffe6:	4083      	lsls	r3, r0
 800ffe8:	40ca      	lsrs	r2, r1
 800ffea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ffee:	4313      	orrs	r3, r2
 800fff0:	e7de      	b.n	800ffb0 <__b2d+0x48>
 800fff2:	ea42 0501 	orr.w	r5, r2, r1
 800fff6:	e7db      	b.n	800ffb0 <__b2d+0x48>
 800fff8:	3ff00000 	.word	0x3ff00000

0800fffc <__d2b>:
 800fffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010000:	460f      	mov	r7, r1
 8010002:	2101      	movs	r1, #1
 8010004:	ec59 8b10 	vmov	r8, r9, d0
 8010008:	4616      	mov	r6, r2
 801000a:	f7ff fc13 	bl	800f834 <_Balloc>
 801000e:	4604      	mov	r4, r0
 8010010:	b930      	cbnz	r0, 8010020 <__d2b+0x24>
 8010012:	4602      	mov	r2, r0
 8010014:	4b23      	ldr	r3, [pc, #140]	@ (80100a4 <__d2b+0xa8>)
 8010016:	4824      	ldr	r0, [pc, #144]	@ (80100a8 <__d2b+0xac>)
 8010018:	f240 310f 	movw	r1, #783	@ 0x30f
 801001c:	f7fe fa0a 	bl	800e434 <__assert_func>
 8010020:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010024:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010028:	b10d      	cbz	r5, 801002e <__d2b+0x32>
 801002a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801002e:	9301      	str	r3, [sp, #4]
 8010030:	f1b8 0300 	subs.w	r3, r8, #0
 8010034:	d023      	beq.n	801007e <__d2b+0x82>
 8010036:	4668      	mov	r0, sp
 8010038:	9300      	str	r3, [sp, #0]
 801003a:	f7ff fd0c 	bl	800fa56 <__lo0bits>
 801003e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010042:	b1d0      	cbz	r0, 801007a <__d2b+0x7e>
 8010044:	f1c0 0320 	rsb	r3, r0, #32
 8010048:	fa02 f303 	lsl.w	r3, r2, r3
 801004c:	430b      	orrs	r3, r1
 801004e:	40c2      	lsrs	r2, r0
 8010050:	6163      	str	r3, [r4, #20]
 8010052:	9201      	str	r2, [sp, #4]
 8010054:	9b01      	ldr	r3, [sp, #4]
 8010056:	61a3      	str	r3, [r4, #24]
 8010058:	2b00      	cmp	r3, #0
 801005a:	bf0c      	ite	eq
 801005c:	2201      	moveq	r2, #1
 801005e:	2202      	movne	r2, #2
 8010060:	6122      	str	r2, [r4, #16]
 8010062:	b1a5      	cbz	r5, 801008e <__d2b+0x92>
 8010064:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010068:	4405      	add	r5, r0
 801006a:	603d      	str	r5, [r7, #0]
 801006c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010070:	6030      	str	r0, [r6, #0]
 8010072:	4620      	mov	r0, r4
 8010074:	b003      	add	sp, #12
 8010076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801007a:	6161      	str	r1, [r4, #20]
 801007c:	e7ea      	b.n	8010054 <__d2b+0x58>
 801007e:	a801      	add	r0, sp, #4
 8010080:	f7ff fce9 	bl	800fa56 <__lo0bits>
 8010084:	9b01      	ldr	r3, [sp, #4]
 8010086:	6163      	str	r3, [r4, #20]
 8010088:	3020      	adds	r0, #32
 801008a:	2201      	movs	r2, #1
 801008c:	e7e8      	b.n	8010060 <__d2b+0x64>
 801008e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010092:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010096:	6038      	str	r0, [r7, #0]
 8010098:	6918      	ldr	r0, [r3, #16]
 801009a:	f7ff fcbd 	bl	800fa18 <__hi0bits>
 801009e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100a2:	e7e5      	b.n	8010070 <__d2b+0x74>
 80100a4:	08010f9a 	.word	0x08010f9a
 80100a8:	0801100b 	.word	0x0801100b

080100ac <__ratio>:
 80100ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b0:	b085      	sub	sp, #20
 80100b2:	e9cd 1000 	strd	r1, r0, [sp]
 80100b6:	a902      	add	r1, sp, #8
 80100b8:	f7ff ff56 	bl	800ff68 <__b2d>
 80100bc:	9800      	ldr	r0, [sp, #0]
 80100be:	a903      	add	r1, sp, #12
 80100c0:	ec55 4b10 	vmov	r4, r5, d0
 80100c4:	f7ff ff50 	bl	800ff68 <__b2d>
 80100c8:	9b01      	ldr	r3, [sp, #4]
 80100ca:	6919      	ldr	r1, [r3, #16]
 80100cc:	9b00      	ldr	r3, [sp, #0]
 80100ce:	691b      	ldr	r3, [r3, #16]
 80100d0:	1ac9      	subs	r1, r1, r3
 80100d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80100d6:	1a9b      	subs	r3, r3, r2
 80100d8:	ec5b ab10 	vmov	sl, fp, d0
 80100dc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	bfce      	itee	gt
 80100e4:	462a      	movgt	r2, r5
 80100e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80100ea:	465a      	movle	r2, fp
 80100ec:	462f      	mov	r7, r5
 80100ee:	46d9      	mov	r9, fp
 80100f0:	bfcc      	ite	gt
 80100f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80100f6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80100fa:	464b      	mov	r3, r9
 80100fc:	4652      	mov	r2, sl
 80100fe:	4620      	mov	r0, r4
 8010100:	4639      	mov	r1, r7
 8010102:	f7f0 fbcb 	bl	800089c <__aeabi_ddiv>
 8010106:	ec41 0b10 	vmov	d0, r0, r1
 801010a:	b005      	add	sp, #20
 801010c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010110 <__copybits>:
 8010110:	3901      	subs	r1, #1
 8010112:	b570      	push	{r4, r5, r6, lr}
 8010114:	1149      	asrs	r1, r1, #5
 8010116:	6914      	ldr	r4, [r2, #16]
 8010118:	3101      	adds	r1, #1
 801011a:	f102 0314 	add.w	r3, r2, #20
 801011e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010122:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010126:	1f05      	subs	r5, r0, #4
 8010128:	42a3      	cmp	r3, r4
 801012a:	d30c      	bcc.n	8010146 <__copybits+0x36>
 801012c:	1aa3      	subs	r3, r4, r2
 801012e:	3b11      	subs	r3, #17
 8010130:	f023 0303 	bic.w	r3, r3, #3
 8010134:	3211      	adds	r2, #17
 8010136:	42a2      	cmp	r2, r4
 8010138:	bf88      	it	hi
 801013a:	2300      	movhi	r3, #0
 801013c:	4418      	add	r0, r3
 801013e:	2300      	movs	r3, #0
 8010140:	4288      	cmp	r0, r1
 8010142:	d305      	bcc.n	8010150 <__copybits+0x40>
 8010144:	bd70      	pop	{r4, r5, r6, pc}
 8010146:	f853 6b04 	ldr.w	r6, [r3], #4
 801014a:	f845 6f04 	str.w	r6, [r5, #4]!
 801014e:	e7eb      	b.n	8010128 <__copybits+0x18>
 8010150:	f840 3b04 	str.w	r3, [r0], #4
 8010154:	e7f4      	b.n	8010140 <__copybits+0x30>

08010156 <__any_on>:
 8010156:	f100 0214 	add.w	r2, r0, #20
 801015a:	6900      	ldr	r0, [r0, #16]
 801015c:	114b      	asrs	r3, r1, #5
 801015e:	4298      	cmp	r0, r3
 8010160:	b510      	push	{r4, lr}
 8010162:	db11      	blt.n	8010188 <__any_on+0x32>
 8010164:	dd0a      	ble.n	801017c <__any_on+0x26>
 8010166:	f011 011f 	ands.w	r1, r1, #31
 801016a:	d007      	beq.n	801017c <__any_on+0x26>
 801016c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010170:	fa24 f001 	lsr.w	r0, r4, r1
 8010174:	fa00 f101 	lsl.w	r1, r0, r1
 8010178:	428c      	cmp	r4, r1
 801017a:	d10b      	bne.n	8010194 <__any_on+0x3e>
 801017c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010180:	4293      	cmp	r3, r2
 8010182:	d803      	bhi.n	801018c <__any_on+0x36>
 8010184:	2000      	movs	r0, #0
 8010186:	bd10      	pop	{r4, pc}
 8010188:	4603      	mov	r3, r0
 801018a:	e7f7      	b.n	801017c <__any_on+0x26>
 801018c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010190:	2900      	cmp	r1, #0
 8010192:	d0f5      	beq.n	8010180 <__any_on+0x2a>
 8010194:	2001      	movs	r0, #1
 8010196:	e7f6      	b.n	8010186 <__any_on+0x30>

08010198 <__ascii_wctomb>:
 8010198:	4603      	mov	r3, r0
 801019a:	4608      	mov	r0, r1
 801019c:	b141      	cbz	r1, 80101b0 <__ascii_wctomb+0x18>
 801019e:	2aff      	cmp	r2, #255	@ 0xff
 80101a0:	d904      	bls.n	80101ac <__ascii_wctomb+0x14>
 80101a2:	228a      	movs	r2, #138	@ 0x8a
 80101a4:	601a      	str	r2, [r3, #0]
 80101a6:	f04f 30ff 	mov.w	r0, #4294967295
 80101aa:	4770      	bx	lr
 80101ac:	700a      	strb	r2, [r1, #0]
 80101ae:	2001      	movs	r0, #1
 80101b0:	4770      	bx	lr

080101b2 <__ssputs_r>:
 80101b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b6:	688e      	ldr	r6, [r1, #8]
 80101b8:	461f      	mov	r7, r3
 80101ba:	42be      	cmp	r6, r7
 80101bc:	680b      	ldr	r3, [r1, #0]
 80101be:	4682      	mov	sl, r0
 80101c0:	460c      	mov	r4, r1
 80101c2:	4690      	mov	r8, r2
 80101c4:	d82d      	bhi.n	8010222 <__ssputs_r+0x70>
 80101c6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101ca:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80101ce:	d026      	beq.n	801021e <__ssputs_r+0x6c>
 80101d0:	6965      	ldr	r5, [r4, #20]
 80101d2:	6909      	ldr	r1, [r1, #16]
 80101d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101d8:	eba3 0901 	sub.w	r9, r3, r1
 80101dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101e0:	1c7b      	adds	r3, r7, #1
 80101e2:	444b      	add	r3, r9
 80101e4:	106d      	asrs	r5, r5, #1
 80101e6:	429d      	cmp	r5, r3
 80101e8:	bf38      	it	cc
 80101ea:	461d      	movcc	r5, r3
 80101ec:	0553      	lsls	r3, r2, #21
 80101ee:	d527      	bpl.n	8010240 <__ssputs_r+0x8e>
 80101f0:	4629      	mov	r1, r5
 80101f2:	f7fc f989 	bl	800c508 <_malloc_r>
 80101f6:	4606      	mov	r6, r0
 80101f8:	b360      	cbz	r0, 8010254 <__ssputs_r+0xa2>
 80101fa:	6921      	ldr	r1, [r4, #16]
 80101fc:	464a      	mov	r2, r9
 80101fe:	f7fe f8fc 	bl	800e3fa <memcpy>
 8010202:	89a3      	ldrh	r3, [r4, #12]
 8010204:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801020c:	81a3      	strh	r3, [r4, #12]
 801020e:	6126      	str	r6, [r4, #16]
 8010210:	6165      	str	r5, [r4, #20]
 8010212:	444e      	add	r6, r9
 8010214:	eba5 0509 	sub.w	r5, r5, r9
 8010218:	6026      	str	r6, [r4, #0]
 801021a:	60a5      	str	r5, [r4, #8]
 801021c:	463e      	mov	r6, r7
 801021e:	42be      	cmp	r6, r7
 8010220:	d900      	bls.n	8010224 <__ssputs_r+0x72>
 8010222:	463e      	mov	r6, r7
 8010224:	6820      	ldr	r0, [r4, #0]
 8010226:	4632      	mov	r2, r6
 8010228:	4641      	mov	r1, r8
 801022a:	f000 f9d7 	bl	80105dc <memmove>
 801022e:	68a3      	ldr	r3, [r4, #8]
 8010230:	1b9b      	subs	r3, r3, r6
 8010232:	60a3      	str	r3, [r4, #8]
 8010234:	6823      	ldr	r3, [r4, #0]
 8010236:	4433      	add	r3, r6
 8010238:	6023      	str	r3, [r4, #0]
 801023a:	2000      	movs	r0, #0
 801023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010240:	462a      	mov	r2, r5
 8010242:	f000 fa00 	bl	8010646 <_realloc_r>
 8010246:	4606      	mov	r6, r0
 8010248:	2800      	cmp	r0, #0
 801024a:	d1e0      	bne.n	801020e <__ssputs_r+0x5c>
 801024c:	6921      	ldr	r1, [r4, #16]
 801024e:	4650      	mov	r0, sl
 8010250:	f7fe ff5a 	bl	800f108 <_free_r>
 8010254:	230c      	movs	r3, #12
 8010256:	f8ca 3000 	str.w	r3, [sl]
 801025a:	89a3      	ldrh	r3, [r4, #12]
 801025c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010260:	81a3      	strh	r3, [r4, #12]
 8010262:	f04f 30ff 	mov.w	r0, #4294967295
 8010266:	e7e9      	b.n	801023c <__ssputs_r+0x8a>

08010268 <_svfiprintf_r>:
 8010268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026c:	4698      	mov	r8, r3
 801026e:	898b      	ldrh	r3, [r1, #12]
 8010270:	061b      	lsls	r3, r3, #24
 8010272:	b09d      	sub	sp, #116	@ 0x74
 8010274:	4607      	mov	r7, r0
 8010276:	460d      	mov	r5, r1
 8010278:	4614      	mov	r4, r2
 801027a:	d510      	bpl.n	801029e <_svfiprintf_r+0x36>
 801027c:	690b      	ldr	r3, [r1, #16]
 801027e:	b973      	cbnz	r3, 801029e <_svfiprintf_r+0x36>
 8010280:	2140      	movs	r1, #64	@ 0x40
 8010282:	f7fc f941 	bl	800c508 <_malloc_r>
 8010286:	6028      	str	r0, [r5, #0]
 8010288:	6128      	str	r0, [r5, #16]
 801028a:	b930      	cbnz	r0, 801029a <_svfiprintf_r+0x32>
 801028c:	230c      	movs	r3, #12
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	f04f 30ff 	mov.w	r0, #4294967295
 8010294:	b01d      	add	sp, #116	@ 0x74
 8010296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801029a:	2340      	movs	r3, #64	@ 0x40
 801029c:	616b      	str	r3, [r5, #20]
 801029e:	2300      	movs	r3, #0
 80102a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80102a2:	2320      	movs	r3, #32
 80102a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80102ac:	2330      	movs	r3, #48	@ 0x30
 80102ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801044c <_svfiprintf_r+0x1e4>
 80102b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102b6:	f04f 0901 	mov.w	r9, #1
 80102ba:	4623      	mov	r3, r4
 80102bc:	469a      	mov	sl, r3
 80102be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102c2:	b10a      	cbz	r2, 80102c8 <_svfiprintf_r+0x60>
 80102c4:	2a25      	cmp	r2, #37	@ 0x25
 80102c6:	d1f9      	bne.n	80102bc <_svfiprintf_r+0x54>
 80102c8:	ebba 0b04 	subs.w	fp, sl, r4
 80102cc:	d00b      	beq.n	80102e6 <_svfiprintf_r+0x7e>
 80102ce:	465b      	mov	r3, fp
 80102d0:	4622      	mov	r2, r4
 80102d2:	4629      	mov	r1, r5
 80102d4:	4638      	mov	r0, r7
 80102d6:	f7ff ff6c 	bl	80101b2 <__ssputs_r>
 80102da:	3001      	adds	r0, #1
 80102dc:	f000 80a7 	beq.w	801042e <_svfiprintf_r+0x1c6>
 80102e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102e2:	445a      	add	r2, fp
 80102e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80102e6:	f89a 3000 	ldrb.w	r3, [sl]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f000 809f 	beq.w	801042e <_svfiprintf_r+0x1c6>
 80102f0:	2300      	movs	r3, #0
 80102f2:	f04f 32ff 	mov.w	r2, #4294967295
 80102f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102fa:	f10a 0a01 	add.w	sl, sl, #1
 80102fe:	9304      	str	r3, [sp, #16]
 8010300:	9307      	str	r3, [sp, #28]
 8010302:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010306:	931a      	str	r3, [sp, #104]	@ 0x68
 8010308:	4654      	mov	r4, sl
 801030a:	2205      	movs	r2, #5
 801030c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010310:	484e      	ldr	r0, [pc, #312]	@ (801044c <_svfiprintf_r+0x1e4>)
 8010312:	f7ef ff85 	bl	8000220 <memchr>
 8010316:	9a04      	ldr	r2, [sp, #16]
 8010318:	b9d8      	cbnz	r0, 8010352 <_svfiprintf_r+0xea>
 801031a:	06d0      	lsls	r0, r2, #27
 801031c:	bf44      	itt	mi
 801031e:	2320      	movmi	r3, #32
 8010320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010324:	0711      	lsls	r1, r2, #28
 8010326:	bf44      	itt	mi
 8010328:	232b      	movmi	r3, #43	@ 0x2b
 801032a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801032e:	f89a 3000 	ldrb.w	r3, [sl]
 8010332:	2b2a      	cmp	r3, #42	@ 0x2a
 8010334:	d015      	beq.n	8010362 <_svfiprintf_r+0xfa>
 8010336:	9a07      	ldr	r2, [sp, #28]
 8010338:	4654      	mov	r4, sl
 801033a:	2000      	movs	r0, #0
 801033c:	f04f 0c0a 	mov.w	ip, #10
 8010340:	4621      	mov	r1, r4
 8010342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010346:	3b30      	subs	r3, #48	@ 0x30
 8010348:	2b09      	cmp	r3, #9
 801034a:	d94b      	bls.n	80103e4 <_svfiprintf_r+0x17c>
 801034c:	b1b0      	cbz	r0, 801037c <_svfiprintf_r+0x114>
 801034e:	9207      	str	r2, [sp, #28]
 8010350:	e014      	b.n	801037c <_svfiprintf_r+0x114>
 8010352:	eba0 0308 	sub.w	r3, r0, r8
 8010356:	fa09 f303 	lsl.w	r3, r9, r3
 801035a:	4313      	orrs	r3, r2
 801035c:	9304      	str	r3, [sp, #16]
 801035e:	46a2      	mov	sl, r4
 8010360:	e7d2      	b.n	8010308 <_svfiprintf_r+0xa0>
 8010362:	9b03      	ldr	r3, [sp, #12]
 8010364:	1d19      	adds	r1, r3, #4
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	9103      	str	r1, [sp, #12]
 801036a:	2b00      	cmp	r3, #0
 801036c:	bfbb      	ittet	lt
 801036e:	425b      	neglt	r3, r3
 8010370:	f042 0202 	orrlt.w	r2, r2, #2
 8010374:	9307      	strge	r3, [sp, #28]
 8010376:	9307      	strlt	r3, [sp, #28]
 8010378:	bfb8      	it	lt
 801037a:	9204      	strlt	r2, [sp, #16]
 801037c:	7823      	ldrb	r3, [r4, #0]
 801037e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010380:	d10a      	bne.n	8010398 <_svfiprintf_r+0x130>
 8010382:	7863      	ldrb	r3, [r4, #1]
 8010384:	2b2a      	cmp	r3, #42	@ 0x2a
 8010386:	d132      	bne.n	80103ee <_svfiprintf_r+0x186>
 8010388:	9b03      	ldr	r3, [sp, #12]
 801038a:	1d1a      	adds	r2, r3, #4
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	9203      	str	r2, [sp, #12]
 8010390:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010394:	3402      	adds	r4, #2
 8010396:	9305      	str	r3, [sp, #20]
 8010398:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801045c <_svfiprintf_r+0x1f4>
 801039c:	7821      	ldrb	r1, [r4, #0]
 801039e:	2203      	movs	r2, #3
 80103a0:	4650      	mov	r0, sl
 80103a2:	f7ef ff3d 	bl	8000220 <memchr>
 80103a6:	b138      	cbz	r0, 80103b8 <_svfiprintf_r+0x150>
 80103a8:	9b04      	ldr	r3, [sp, #16]
 80103aa:	eba0 000a 	sub.w	r0, r0, sl
 80103ae:	2240      	movs	r2, #64	@ 0x40
 80103b0:	4082      	lsls	r2, r0
 80103b2:	4313      	orrs	r3, r2
 80103b4:	3401      	adds	r4, #1
 80103b6:	9304      	str	r3, [sp, #16]
 80103b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103bc:	4824      	ldr	r0, [pc, #144]	@ (8010450 <_svfiprintf_r+0x1e8>)
 80103be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103c2:	2206      	movs	r2, #6
 80103c4:	f7ef ff2c 	bl	8000220 <memchr>
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d036      	beq.n	801043a <_svfiprintf_r+0x1d2>
 80103cc:	4b21      	ldr	r3, [pc, #132]	@ (8010454 <_svfiprintf_r+0x1ec>)
 80103ce:	bb1b      	cbnz	r3, 8010418 <_svfiprintf_r+0x1b0>
 80103d0:	9b03      	ldr	r3, [sp, #12]
 80103d2:	3307      	adds	r3, #7
 80103d4:	f023 0307 	bic.w	r3, r3, #7
 80103d8:	3308      	adds	r3, #8
 80103da:	9303      	str	r3, [sp, #12]
 80103dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103de:	4433      	add	r3, r6
 80103e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80103e2:	e76a      	b.n	80102ba <_svfiprintf_r+0x52>
 80103e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80103e8:	460c      	mov	r4, r1
 80103ea:	2001      	movs	r0, #1
 80103ec:	e7a8      	b.n	8010340 <_svfiprintf_r+0xd8>
 80103ee:	2300      	movs	r3, #0
 80103f0:	3401      	adds	r4, #1
 80103f2:	9305      	str	r3, [sp, #20]
 80103f4:	4619      	mov	r1, r3
 80103f6:	f04f 0c0a 	mov.w	ip, #10
 80103fa:	4620      	mov	r0, r4
 80103fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010400:	3a30      	subs	r2, #48	@ 0x30
 8010402:	2a09      	cmp	r2, #9
 8010404:	d903      	bls.n	801040e <_svfiprintf_r+0x1a6>
 8010406:	2b00      	cmp	r3, #0
 8010408:	d0c6      	beq.n	8010398 <_svfiprintf_r+0x130>
 801040a:	9105      	str	r1, [sp, #20]
 801040c:	e7c4      	b.n	8010398 <_svfiprintf_r+0x130>
 801040e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010412:	4604      	mov	r4, r0
 8010414:	2301      	movs	r3, #1
 8010416:	e7f0      	b.n	80103fa <_svfiprintf_r+0x192>
 8010418:	ab03      	add	r3, sp, #12
 801041a:	9300      	str	r3, [sp, #0]
 801041c:	462a      	mov	r2, r5
 801041e:	4b0e      	ldr	r3, [pc, #56]	@ (8010458 <_svfiprintf_r+0x1f0>)
 8010420:	a904      	add	r1, sp, #16
 8010422:	4638      	mov	r0, r7
 8010424:	f7fd f822 	bl	800d46c <_printf_float>
 8010428:	1c42      	adds	r2, r0, #1
 801042a:	4606      	mov	r6, r0
 801042c:	d1d6      	bne.n	80103dc <_svfiprintf_r+0x174>
 801042e:	89ab      	ldrh	r3, [r5, #12]
 8010430:	065b      	lsls	r3, r3, #25
 8010432:	f53f af2d 	bmi.w	8010290 <_svfiprintf_r+0x28>
 8010436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010438:	e72c      	b.n	8010294 <_svfiprintf_r+0x2c>
 801043a:	ab03      	add	r3, sp, #12
 801043c:	9300      	str	r3, [sp, #0]
 801043e:	462a      	mov	r2, r5
 8010440:	4b05      	ldr	r3, [pc, #20]	@ (8010458 <_svfiprintf_r+0x1f0>)
 8010442:	a904      	add	r1, sp, #16
 8010444:	4638      	mov	r0, r7
 8010446:	f7fd faa9 	bl	800d99c <_printf_i>
 801044a:	e7ed      	b.n	8010428 <_svfiprintf_r+0x1c0>
 801044c:	08011160 	.word	0x08011160
 8010450:	0801116a 	.word	0x0801116a
 8010454:	0800d46d 	.word	0x0800d46d
 8010458:	080101b3 	.word	0x080101b3
 801045c:	08011166 	.word	0x08011166

08010460 <__sflush_r>:
 8010460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010468:	0716      	lsls	r6, r2, #28
 801046a:	4605      	mov	r5, r0
 801046c:	460c      	mov	r4, r1
 801046e:	d454      	bmi.n	801051a <__sflush_r+0xba>
 8010470:	684b      	ldr	r3, [r1, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	dc02      	bgt.n	801047c <__sflush_r+0x1c>
 8010476:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010478:	2b00      	cmp	r3, #0
 801047a:	dd48      	ble.n	801050e <__sflush_r+0xae>
 801047c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801047e:	2e00      	cmp	r6, #0
 8010480:	d045      	beq.n	801050e <__sflush_r+0xae>
 8010482:	2300      	movs	r3, #0
 8010484:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010488:	682f      	ldr	r7, [r5, #0]
 801048a:	6a21      	ldr	r1, [r4, #32]
 801048c:	602b      	str	r3, [r5, #0]
 801048e:	d030      	beq.n	80104f2 <__sflush_r+0x92>
 8010490:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010492:	89a3      	ldrh	r3, [r4, #12]
 8010494:	0759      	lsls	r1, r3, #29
 8010496:	d505      	bpl.n	80104a4 <__sflush_r+0x44>
 8010498:	6863      	ldr	r3, [r4, #4]
 801049a:	1ad2      	subs	r2, r2, r3
 801049c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801049e:	b10b      	cbz	r3, 80104a4 <__sflush_r+0x44>
 80104a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80104a2:	1ad2      	subs	r2, r2, r3
 80104a4:	2300      	movs	r3, #0
 80104a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104a8:	6a21      	ldr	r1, [r4, #32]
 80104aa:	4628      	mov	r0, r5
 80104ac:	47b0      	blx	r6
 80104ae:	1c43      	adds	r3, r0, #1
 80104b0:	89a3      	ldrh	r3, [r4, #12]
 80104b2:	d106      	bne.n	80104c2 <__sflush_r+0x62>
 80104b4:	6829      	ldr	r1, [r5, #0]
 80104b6:	291d      	cmp	r1, #29
 80104b8:	d82b      	bhi.n	8010512 <__sflush_r+0xb2>
 80104ba:	4a2a      	ldr	r2, [pc, #168]	@ (8010564 <__sflush_r+0x104>)
 80104bc:	410a      	asrs	r2, r1
 80104be:	07d6      	lsls	r6, r2, #31
 80104c0:	d427      	bmi.n	8010512 <__sflush_r+0xb2>
 80104c2:	2200      	movs	r2, #0
 80104c4:	6062      	str	r2, [r4, #4]
 80104c6:	04d9      	lsls	r1, r3, #19
 80104c8:	6922      	ldr	r2, [r4, #16]
 80104ca:	6022      	str	r2, [r4, #0]
 80104cc:	d504      	bpl.n	80104d8 <__sflush_r+0x78>
 80104ce:	1c42      	adds	r2, r0, #1
 80104d0:	d101      	bne.n	80104d6 <__sflush_r+0x76>
 80104d2:	682b      	ldr	r3, [r5, #0]
 80104d4:	b903      	cbnz	r3, 80104d8 <__sflush_r+0x78>
 80104d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80104d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80104da:	602f      	str	r7, [r5, #0]
 80104dc:	b1b9      	cbz	r1, 801050e <__sflush_r+0xae>
 80104de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80104e2:	4299      	cmp	r1, r3
 80104e4:	d002      	beq.n	80104ec <__sflush_r+0x8c>
 80104e6:	4628      	mov	r0, r5
 80104e8:	f7fe fe0e 	bl	800f108 <_free_r>
 80104ec:	2300      	movs	r3, #0
 80104ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80104f0:	e00d      	b.n	801050e <__sflush_r+0xae>
 80104f2:	2301      	movs	r3, #1
 80104f4:	4628      	mov	r0, r5
 80104f6:	47b0      	blx	r6
 80104f8:	4602      	mov	r2, r0
 80104fa:	1c50      	adds	r0, r2, #1
 80104fc:	d1c9      	bne.n	8010492 <__sflush_r+0x32>
 80104fe:	682b      	ldr	r3, [r5, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d0c6      	beq.n	8010492 <__sflush_r+0x32>
 8010504:	2b1d      	cmp	r3, #29
 8010506:	d001      	beq.n	801050c <__sflush_r+0xac>
 8010508:	2b16      	cmp	r3, #22
 801050a:	d11e      	bne.n	801054a <__sflush_r+0xea>
 801050c:	602f      	str	r7, [r5, #0]
 801050e:	2000      	movs	r0, #0
 8010510:	e022      	b.n	8010558 <__sflush_r+0xf8>
 8010512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010516:	b21b      	sxth	r3, r3
 8010518:	e01b      	b.n	8010552 <__sflush_r+0xf2>
 801051a:	690f      	ldr	r7, [r1, #16]
 801051c:	2f00      	cmp	r7, #0
 801051e:	d0f6      	beq.n	801050e <__sflush_r+0xae>
 8010520:	0793      	lsls	r3, r2, #30
 8010522:	680e      	ldr	r6, [r1, #0]
 8010524:	bf08      	it	eq
 8010526:	694b      	ldreq	r3, [r1, #20]
 8010528:	600f      	str	r7, [r1, #0]
 801052a:	bf18      	it	ne
 801052c:	2300      	movne	r3, #0
 801052e:	eba6 0807 	sub.w	r8, r6, r7
 8010532:	608b      	str	r3, [r1, #8]
 8010534:	f1b8 0f00 	cmp.w	r8, #0
 8010538:	dde9      	ble.n	801050e <__sflush_r+0xae>
 801053a:	6a21      	ldr	r1, [r4, #32]
 801053c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801053e:	4643      	mov	r3, r8
 8010540:	463a      	mov	r2, r7
 8010542:	4628      	mov	r0, r5
 8010544:	47b0      	blx	r6
 8010546:	2800      	cmp	r0, #0
 8010548:	dc08      	bgt.n	801055c <__sflush_r+0xfc>
 801054a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801054e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010552:	81a3      	strh	r3, [r4, #12]
 8010554:	f04f 30ff 	mov.w	r0, #4294967295
 8010558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801055c:	4407      	add	r7, r0
 801055e:	eba8 0800 	sub.w	r8, r8, r0
 8010562:	e7e7      	b.n	8010534 <__sflush_r+0xd4>
 8010564:	dfbffffe 	.word	0xdfbffffe

08010568 <_fflush_r>:
 8010568:	b538      	push	{r3, r4, r5, lr}
 801056a:	690b      	ldr	r3, [r1, #16]
 801056c:	4605      	mov	r5, r0
 801056e:	460c      	mov	r4, r1
 8010570:	b913      	cbnz	r3, 8010578 <_fflush_r+0x10>
 8010572:	2500      	movs	r5, #0
 8010574:	4628      	mov	r0, r5
 8010576:	bd38      	pop	{r3, r4, r5, pc}
 8010578:	b118      	cbz	r0, 8010582 <_fflush_r+0x1a>
 801057a:	6a03      	ldr	r3, [r0, #32]
 801057c:	b90b      	cbnz	r3, 8010582 <_fflush_r+0x1a>
 801057e:	f7fd fdcd 	bl	800e11c <__sinit>
 8010582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d0f3      	beq.n	8010572 <_fflush_r+0xa>
 801058a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801058c:	07d0      	lsls	r0, r2, #31
 801058e:	d404      	bmi.n	801059a <_fflush_r+0x32>
 8010590:	0599      	lsls	r1, r3, #22
 8010592:	d402      	bmi.n	801059a <_fflush_r+0x32>
 8010594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010596:	f7fd ff2e 	bl	800e3f6 <__retarget_lock_acquire_recursive>
 801059a:	4628      	mov	r0, r5
 801059c:	4621      	mov	r1, r4
 801059e:	f7ff ff5f 	bl	8010460 <__sflush_r>
 80105a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80105a4:	07da      	lsls	r2, r3, #31
 80105a6:	4605      	mov	r5, r0
 80105a8:	d4e4      	bmi.n	8010574 <_fflush_r+0xc>
 80105aa:	89a3      	ldrh	r3, [r4, #12]
 80105ac:	059b      	lsls	r3, r3, #22
 80105ae:	d4e1      	bmi.n	8010574 <_fflush_r+0xc>
 80105b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105b2:	f7fd ff21 	bl	800e3f8 <__retarget_lock_release_recursive>
 80105b6:	e7dd      	b.n	8010574 <_fflush_r+0xc>

080105b8 <fiprintf>:
 80105b8:	b40e      	push	{r1, r2, r3}
 80105ba:	b503      	push	{r0, r1, lr}
 80105bc:	4601      	mov	r1, r0
 80105be:	ab03      	add	r3, sp, #12
 80105c0:	4805      	ldr	r0, [pc, #20]	@ (80105d8 <fiprintf+0x20>)
 80105c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105c6:	6800      	ldr	r0, [r0, #0]
 80105c8:	9301      	str	r3, [sp, #4]
 80105ca:	f000 f893 	bl	80106f4 <_vfiprintf_r>
 80105ce:	b002      	add	sp, #8
 80105d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80105d4:	b003      	add	sp, #12
 80105d6:	4770      	bx	lr
 80105d8:	200001a4 	.word	0x200001a4

080105dc <memmove>:
 80105dc:	4288      	cmp	r0, r1
 80105de:	b510      	push	{r4, lr}
 80105e0:	eb01 0402 	add.w	r4, r1, r2
 80105e4:	d902      	bls.n	80105ec <memmove+0x10>
 80105e6:	4284      	cmp	r4, r0
 80105e8:	4623      	mov	r3, r4
 80105ea:	d807      	bhi.n	80105fc <memmove+0x20>
 80105ec:	1e43      	subs	r3, r0, #1
 80105ee:	42a1      	cmp	r1, r4
 80105f0:	d008      	beq.n	8010604 <memmove+0x28>
 80105f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105fa:	e7f8      	b.n	80105ee <memmove+0x12>
 80105fc:	4402      	add	r2, r0
 80105fe:	4601      	mov	r1, r0
 8010600:	428a      	cmp	r2, r1
 8010602:	d100      	bne.n	8010606 <memmove+0x2a>
 8010604:	bd10      	pop	{r4, pc}
 8010606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801060a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801060e:	e7f7      	b.n	8010600 <memmove+0x24>

08010610 <abort>:
 8010610:	b508      	push	{r3, lr}
 8010612:	2006      	movs	r0, #6
 8010614:	f000 fa42 	bl	8010a9c <raise>
 8010618:	2001      	movs	r0, #1
 801061a:	f7f2 f825 	bl	8002668 <_exit>

0801061e <_calloc_r>:
 801061e:	b570      	push	{r4, r5, r6, lr}
 8010620:	fba1 5402 	umull	r5, r4, r1, r2
 8010624:	b93c      	cbnz	r4, 8010636 <_calloc_r+0x18>
 8010626:	4629      	mov	r1, r5
 8010628:	f7fb ff6e 	bl	800c508 <_malloc_r>
 801062c:	4606      	mov	r6, r0
 801062e:	b928      	cbnz	r0, 801063c <_calloc_r+0x1e>
 8010630:	2600      	movs	r6, #0
 8010632:	4630      	mov	r0, r6
 8010634:	bd70      	pop	{r4, r5, r6, pc}
 8010636:	220c      	movs	r2, #12
 8010638:	6002      	str	r2, [r0, #0]
 801063a:	e7f9      	b.n	8010630 <_calloc_r+0x12>
 801063c:	462a      	mov	r2, r5
 801063e:	4621      	mov	r1, r4
 8010640:	f7fd fe39 	bl	800e2b6 <memset>
 8010644:	e7f5      	b.n	8010632 <_calloc_r+0x14>

08010646 <_realloc_r>:
 8010646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801064a:	4680      	mov	r8, r0
 801064c:	4615      	mov	r5, r2
 801064e:	460c      	mov	r4, r1
 8010650:	b921      	cbnz	r1, 801065c <_realloc_r+0x16>
 8010652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010656:	4611      	mov	r1, r2
 8010658:	f7fb bf56 	b.w	800c508 <_malloc_r>
 801065c:	b92a      	cbnz	r2, 801066a <_realloc_r+0x24>
 801065e:	f7fe fd53 	bl	800f108 <_free_r>
 8010662:	2400      	movs	r4, #0
 8010664:	4620      	mov	r0, r4
 8010666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801066a:	f000 fa33 	bl	8010ad4 <_malloc_usable_size_r>
 801066e:	4285      	cmp	r5, r0
 8010670:	4606      	mov	r6, r0
 8010672:	d802      	bhi.n	801067a <_realloc_r+0x34>
 8010674:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010678:	d8f4      	bhi.n	8010664 <_realloc_r+0x1e>
 801067a:	4629      	mov	r1, r5
 801067c:	4640      	mov	r0, r8
 801067e:	f7fb ff43 	bl	800c508 <_malloc_r>
 8010682:	4607      	mov	r7, r0
 8010684:	2800      	cmp	r0, #0
 8010686:	d0ec      	beq.n	8010662 <_realloc_r+0x1c>
 8010688:	42b5      	cmp	r5, r6
 801068a:	462a      	mov	r2, r5
 801068c:	4621      	mov	r1, r4
 801068e:	bf28      	it	cs
 8010690:	4632      	movcs	r2, r6
 8010692:	f7fd feb2 	bl	800e3fa <memcpy>
 8010696:	4621      	mov	r1, r4
 8010698:	4640      	mov	r0, r8
 801069a:	f7fe fd35 	bl	800f108 <_free_r>
 801069e:	463c      	mov	r4, r7
 80106a0:	e7e0      	b.n	8010664 <_realloc_r+0x1e>

080106a2 <__sfputc_r>:
 80106a2:	6893      	ldr	r3, [r2, #8]
 80106a4:	3b01      	subs	r3, #1
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	b410      	push	{r4}
 80106aa:	6093      	str	r3, [r2, #8]
 80106ac:	da08      	bge.n	80106c0 <__sfputc_r+0x1e>
 80106ae:	6994      	ldr	r4, [r2, #24]
 80106b0:	42a3      	cmp	r3, r4
 80106b2:	db01      	blt.n	80106b8 <__sfputc_r+0x16>
 80106b4:	290a      	cmp	r1, #10
 80106b6:	d103      	bne.n	80106c0 <__sfputc_r+0x1e>
 80106b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106bc:	f000 b932 	b.w	8010924 <__swbuf_r>
 80106c0:	6813      	ldr	r3, [r2, #0]
 80106c2:	1c58      	adds	r0, r3, #1
 80106c4:	6010      	str	r0, [r2, #0]
 80106c6:	7019      	strb	r1, [r3, #0]
 80106c8:	4608      	mov	r0, r1
 80106ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <__sfputs_r>:
 80106d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106d2:	4606      	mov	r6, r0
 80106d4:	460f      	mov	r7, r1
 80106d6:	4614      	mov	r4, r2
 80106d8:	18d5      	adds	r5, r2, r3
 80106da:	42ac      	cmp	r4, r5
 80106dc:	d101      	bne.n	80106e2 <__sfputs_r+0x12>
 80106de:	2000      	movs	r0, #0
 80106e0:	e007      	b.n	80106f2 <__sfputs_r+0x22>
 80106e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106e6:	463a      	mov	r2, r7
 80106e8:	4630      	mov	r0, r6
 80106ea:	f7ff ffda 	bl	80106a2 <__sfputc_r>
 80106ee:	1c43      	adds	r3, r0, #1
 80106f0:	d1f3      	bne.n	80106da <__sfputs_r+0xa>
 80106f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080106f4 <_vfiprintf_r>:
 80106f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f8:	460d      	mov	r5, r1
 80106fa:	b09d      	sub	sp, #116	@ 0x74
 80106fc:	4614      	mov	r4, r2
 80106fe:	4698      	mov	r8, r3
 8010700:	4606      	mov	r6, r0
 8010702:	b118      	cbz	r0, 801070c <_vfiprintf_r+0x18>
 8010704:	6a03      	ldr	r3, [r0, #32]
 8010706:	b90b      	cbnz	r3, 801070c <_vfiprintf_r+0x18>
 8010708:	f7fd fd08 	bl	800e11c <__sinit>
 801070c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801070e:	07d9      	lsls	r1, r3, #31
 8010710:	d405      	bmi.n	801071e <_vfiprintf_r+0x2a>
 8010712:	89ab      	ldrh	r3, [r5, #12]
 8010714:	059a      	lsls	r2, r3, #22
 8010716:	d402      	bmi.n	801071e <_vfiprintf_r+0x2a>
 8010718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801071a:	f7fd fe6c 	bl	800e3f6 <__retarget_lock_acquire_recursive>
 801071e:	89ab      	ldrh	r3, [r5, #12]
 8010720:	071b      	lsls	r3, r3, #28
 8010722:	d501      	bpl.n	8010728 <_vfiprintf_r+0x34>
 8010724:	692b      	ldr	r3, [r5, #16]
 8010726:	b99b      	cbnz	r3, 8010750 <_vfiprintf_r+0x5c>
 8010728:	4629      	mov	r1, r5
 801072a:	4630      	mov	r0, r6
 801072c:	f000 f938 	bl	80109a0 <__swsetup_r>
 8010730:	b170      	cbz	r0, 8010750 <_vfiprintf_r+0x5c>
 8010732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010734:	07dc      	lsls	r4, r3, #31
 8010736:	d504      	bpl.n	8010742 <_vfiprintf_r+0x4e>
 8010738:	f04f 30ff 	mov.w	r0, #4294967295
 801073c:	b01d      	add	sp, #116	@ 0x74
 801073e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010742:	89ab      	ldrh	r3, [r5, #12]
 8010744:	0598      	lsls	r0, r3, #22
 8010746:	d4f7      	bmi.n	8010738 <_vfiprintf_r+0x44>
 8010748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801074a:	f7fd fe55 	bl	800e3f8 <__retarget_lock_release_recursive>
 801074e:	e7f3      	b.n	8010738 <_vfiprintf_r+0x44>
 8010750:	2300      	movs	r3, #0
 8010752:	9309      	str	r3, [sp, #36]	@ 0x24
 8010754:	2320      	movs	r3, #32
 8010756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801075a:	f8cd 800c 	str.w	r8, [sp, #12]
 801075e:	2330      	movs	r3, #48	@ 0x30
 8010760:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010910 <_vfiprintf_r+0x21c>
 8010764:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010768:	f04f 0901 	mov.w	r9, #1
 801076c:	4623      	mov	r3, r4
 801076e:	469a      	mov	sl, r3
 8010770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010774:	b10a      	cbz	r2, 801077a <_vfiprintf_r+0x86>
 8010776:	2a25      	cmp	r2, #37	@ 0x25
 8010778:	d1f9      	bne.n	801076e <_vfiprintf_r+0x7a>
 801077a:	ebba 0b04 	subs.w	fp, sl, r4
 801077e:	d00b      	beq.n	8010798 <_vfiprintf_r+0xa4>
 8010780:	465b      	mov	r3, fp
 8010782:	4622      	mov	r2, r4
 8010784:	4629      	mov	r1, r5
 8010786:	4630      	mov	r0, r6
 8010788:	f7ff ffa2 	bl	80106d0 <__sfputs_r>
 801078c:	3001      	adds	r0, #1
 801078e:	f000 80a7 	beq.w	80108e0 <_vfiprintf_r+0x1ec>
 8010792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010794:	445a      	add	r2, fp
 8010796:	9209      	str	r2, [sp, #36]	@ 0x24
 8010798:	f89a 3000 	ldrb.w	r3, [sl]
 801079c:	2b00      	cmp	r3, #0
 801079e:	f000 809f 	beq.w	80108e0 <_vfiprintf_r+0x1ec>
 80107a2:	2300      	movs	r3, #0
 80107a4:	f04f 32ff 	mov.w	r2, #4294967295
 80107a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107ac:	f10a 0a01 	add.w	sl, sl, #1
 80107b0:	9304      	str	r3, [sp, #16]
 80107b2:	9307      	str	r3, [sp, #28]
 80107b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80107b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80107ba:	4654      	mov	r4, sl
 80107bc:	2205      	movs	r2, #5
 80107be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107c2:	4853      	ldr	r0, [pc, #332]	@ (8010910 <_vfiprintf_r+0x21c>)
 80107c4:	f7ef fd2c 	bl	8000220 <memchr>
 80107c8:	9a04      	ldr	r2, [sp, #16]
 80107ca:	b9d8      	cbnz	r0, 8010804 <_vfiprintf_r+0x110>
 80107cc:	06d1      	lsls	r1, r2, #27
 80107ce:	bf44      	itt	mi
 80107d0:	2320      	movmi	r3, #32
 80107d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107d6:	0713      	lsls	r3, r2, #28
 80107d8:	bf44      	itt	mi
 80107da:	232b      	movmi	r3, #43	@ 0x2b
 80107dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107e0:	f89a 3000 	ldrb.w	r3, [sl]
 80107e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80107e6:	d015      	beq.n	8010814 <_vfiprintf_r+0x120>
 80107e8:	9a07      	ldr	r2, [sp, #28]
 80107ea:	4654      	mov	r4, sl
 80107ec:	2000      	movs	r0, #0
 80107ee:	f04f 0c0a 	mov.w	ip, #10
 80107f2:	4621      	mov	r1, r4
 80107f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107f8:	3b30      	subs	r3, #48	@ 0x30
 80107fa:	2b09      	cmp	r3, #9
 80107fc:	d94b      	bls.n	8010896 <_vfiprintf_r+0x1a2>
 80107fe:	b1b0      	cbz	r0, 801082e <_vfiprintf_r+0x13a>
 8010800:	9207      	str	r2, [sp, #28]
 8010802:	e014      	b.n	801082e <_vfiprintf_r+0x13a>
 8010804:	eba0 0308 	sub.w	r3, r0, r8
 8010808:	fa09 f303 	lsl.w	r3, r9, r3
 801080c:	4313      	orrs	r3, r2
 801080e:	9304      	str	r3, [sp, #16]
 8010810:	46a2      	mov	sl, r4
 8010812:	e7d2      	b.n	80107ba <_vfiprintf_r+0xc6>
 8010814:	9b03      	ldr	r3, [sp, #12]
 8010816:	1d19      	adds	r1, r3, #4
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	9103      	str	r1, [sp, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	bfbb      	ittet	lt
 8010820:	425b      	neglt	r3, r3
 8010822:	f042 0202 	orrlt.w	r2, r2, #2
 8010826:	9307      	strge	r3, [sp, #28]
 8010828:	9307      	strlt	r3, [sp, #28]
 801082a:	bfb8      	it	lt
 801082c:	9204      	strlt	r2, [sp, #16]
 801082e:	7823      	ldrb	r3, [r4, #0]
 8010830:	2b2e      	cmp	r3, #46	@ 0x2e
 8010832:	d10a      	bne.n	801084a <_vfiprintf_r+0x156>
 8010834:	7863      	ldrb	r3, [r4, #1]
 8010836:	2b2a      	cmp	r3, #42	@ 0x2a
 8010838:	d132      	bne.n	80108a0 <_vfiprintf_r+0x1ac>
 801083a:	9b03      	ldr	r3, [sp, #12]
 801083c:	1d1a      	adds	r2, r3, #4
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	9203      	str	r2, [sp, #12]
 8010842:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010846:	3402      	adds	r4, #2
 8010848:	9305      	str	r3, [sp, #20]
 801084a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010920 <_vfiprintf_r+0x22c>
 801084e:	7821      	ldrb	r1, [r4, #0]
 8010850:	2203      	movs	r2, #3
 8010852:	4650      	mov	r0, sl
 8010854:	f7ef fce4 	bl	8000220 <memchr>
 8010858:	b138      	cbz	r0, 801086a <_vfiprintf_r+0x176>
 801085a:	9b04      	ldr	r3, [sp, #16]
 801085c:	eba0 000a 	sub.w	r0, r0, sl
 8010860:	2240      	movs	r2, #64	@ 0x40
 8010862:	4082      	lsls	r2, r0
 8010864:	4313      	orrs	r3, r2
 8010866:	3401      	adds	r4, #1
 8010868:	9304      	str	r3, [sp, #16]
 801086a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801086e:	4829      	ldr	r0, [pc, #164]	@ (8010914 <_vfiprintf_r+0x220>)
 8010870:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010874:	2206      	movs	r2, #6
 8010876:	f7ef fcd3 	bl	8000220 <memchr>
 801087a:	2800      	cmp	r0, #0
 801087c:	d03f      	beq.n	80108fe <_vfiprintf_r+0x20a>
 801087e:	4b26      	ldr	r3, [pc, #152]	@ (8010918 <_vfiprintf_r+0x224>)
 8010880:	bb1b      	cbnz	r3, 80108ca <_vfiprintf_r+0x1d6>
 8010882:	9b03      	ldr	r3, [sp, #12]
 8010884:	3307      	adds	r3, #7
 8010886:	f023 0307 	bic.w	r3, r3, #7
 801088a:	3308      	adds	r3, #8
 801088c:	9303      	str	r3, [sp, #12]
 801088e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010890:	443b      	add	r3, r7
 8010892:	9309      	str	r3, [sp, #36]	@ 0x24
 8010894:	e76a      	b.n	801076c <_vfiprintf_r+0x78>
 8010896:	fb0c 3202 	mla	r2, ip, r2, r3
 801089a:	460c      	mov	r4, r1
 801089c:	2001      	movs	r0, #1
 801089e:	e7a8      	b.n	80107f2 <_vfiprintf_r+0xfe>
 80108a0:	2300      	movs	r3, #0
 80108a2:	3401      	adds	r4, #1
 80108a4:	9305      	str	r3, [sp, #20]
 80108a6:	4619      	mov	r1, r3
 80108a8:	f04f 0c0a 	mov.w	ip, #10
 80108ac:	4620      	mov	r0, r4
 80108ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108b2:	3a30      	subs	r2, #48	@ 0x30
 80108b4:	2a09      	cmp	r2, #9
 80108b6:	d903      	bls.n	80108c0 <_vfiprintf_r+0x1cc>
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d0c6      	beq.n	801084a <_vfiprintf_r+0x156>
 80108bc:	9105      	str	r1, [sp, #20]
 80108be:	e7c4      	b.n	801084a <_vfiprintf_r+0x156>
 80108c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80108c4:	4604      	mov	r4, r0
 80108c6:	2301      	movs	r3, #1
 80108c8:	e7f0      	b.n	80108ac <_vfiprintf_r+0x1b8>
 80108ca:	ab03      	add	r3, sp, #12
 80108cc:	9300      	str	r3, [sp, #0]
 80108ce:	462a      	mov	r2, r5
 80108d0:	4b12      	ldr	r3, [pc, #72]	@ (801091c <_vfiprintf_r+0x228>)
 80108d2:	a904      	add	r1, sp, #16
 80108d4:	4630      	mov	r0, r6
 80108d6:	f7fc fdc9 	bl	800d46c <_printf_float>
 80108da:	4607      	mov	r7, r0
 80108dc:	1c78      	adds	r0, r7, #1
 80108de:	d1d6      	bne.n	801088e <_vfiprintf_r+0x19a>
 80108e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108e2:	07d9      	lsls	r1, r3, #31
 80108e4:	d405      	bmi.n	80108f2 <_vfiprintf_r+0x1fe>
 80108e6:	89ab      	ldrh	r3, [r5, #12]
 80108e8:	059a      	lsls	r2, r3, #22
 80108ea:	d402      	bmi.n	80108f2 <_vfiprintf_r+0x1fe>
 80108ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108ee:	f7fd fd83 	bl	800e3f8 <__retarget_lock_release_recursive>
 80108f2:	89ab      	ldrh	r3, [r5, #12]
 80108f4:	065b      	lsls	r3, r3, #25
 80108f6:	f53f af1f 	bmi.w	8010738 <_vfiprintf_r+0x44>
 80108fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108fc:	e71e      	b.n	801073c <_vfiprintf_r+0x48>
 80108fe:	ab03      	add	r3, sp, #12
 8010900:	9300      	str	r3, [sp, #0]
 8010902:	462a      	mov	r2, r5
 8010904:	4b05      	ldr	r3, [pc, #20]	@ (801091c <_vfiprintf_r+0x228>)
 8010906:	a904      	add	r1, sp, #16
 8010908:	4630      	mov	r0, r6
 801090a:	f7fd f847 	bl	800d99c <_printf_i>
 801090e:	e7e4      	b.n	80108da <_vfiprintf_r+0x1e6>
 8010910:	08011160 	.word	0x08011160
 8010914:	0801116a 	.word	0x0801116a
 8010918:	0800d46d 	.word	0x0800d46d
 801091c:	080106d1 	.word	0x080106d1
 8010920:	08011166 	.word	0x08011166

08010924 <__swbuf_r>:
 8010924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010926:	460e      	mov	r6, r1
 8010928:	4614      	mov	r4, r2
 801092a:	4605      	mov	r5, r0
 801092c:	b118      	cbz	r0, 8010936 <__swbuf_r+0x12>
 801092e:	6a03      	ldr	r3, [r0, #32]
 8010930:	b90b      	cbnz	r3, 8010936 <__swbuf_r+0x12>
 8010932:	f7fd fbf3 	bl	800e11c <__sinit>
 8010936:	69a3      	ldr	r3, [r4, #24]
 8010938:	60a3      	str	r3, [r4, #8]
 801093a:	89a3      	ldrh	r3, [r4, #12]
 801093c:	071a      	lsls	r2, r3, #28
 801093e:	d501      	bpl.n	8010944 <__swbuf_r+0x20>
 8010940:	6923      	ldr	r3, [r4, #16]
 8010942:	b943      	cbnz	r3, 8010956 <__swbuf_r+0x32>
 8010944:	4621      	mov	r1, r4
 8010946:	4628      	mov	r0, r5
 8010948:	f000 f82a 	bl	80109a0 <__swsetup_r>
 801094c:	b118      	cbz	r0, 8010956 <__swbuf_r+0x32>
 801094e:	f04f 37ff 	mov.w	r7, #4294967295
 8010952:	4638      	mov	r0, r7
 8010954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010956:	6823      	ldr	r3, [r4, #0]
 8010958:	6922      	ldr	r2, [r4, #16]
 801095a:	1a98      	subs	r0, r3, r2
 801095c:	6963      	ldr	r3, [r4, #20]
 801095e:	b2f6      	uxtb	r6, r6
 8010960:	4283      	cmp	r3, r0
 8010962:	4637      	mov	r7, r6
 8010964:	dc05      	bgt.n	8010972 <__swbuf_r+0x4e>
 8010966:	4621      	mov	r1, r4
 8010968:	4628      	mov	r0, r5
 801096a:	f7ff fdfd 	bl	8010568 <_fflush_r>
 801096e:	2800      	cmp	r0, #0
 8010970:	d1ed      	bne.n	801094e <__swbuf_r+0x2a>
 8010972:	68a3      	ldr	r3, [r4, #8]
 8010974:	3b01      	subs	r3, #1
 8010976:	60a3      	str	r3, [r4, #8]
 8010978:	6823      	ldr	r3, [r4, #0]
 801097a:	1c5a      	adds	r2, r3, #1
 801097c:	6022      	str	r2, [r4, #0]
 801097e:	701e      	strb	r6, [r3, #0]
 8010980:	6962      	ldr	r2, [r4, #20]
 8010982:	1c43      	adds	r3, r0, #1
 8010984:	429a      	cmp	r2, r3
 8010986:	d004      	beq.n	8010992 <__swbuf_r+0x6e>
 8010988:	89a3      	ldrh	r3, [r4, #12]
 801098a:	07db      	lsls	r3, r3, #31
 801098c:	d5e1      	bpl.n	8010952 <__swbuf_r+0x2e>
 801098e:	2e0a      	cmp	r6, #10
 8010990:	d1df      	bne.n	8010952 <__swbuf_r+0x2e>
 8010992:	4621      	mov	r1, r4
 8010994:	4628      	mov	r0, r5
 8010996:	f7ff fde7 	bl	8010568 <_fflush_r>
 801099a:	2800      	cmp	r0, #0
 801099c:	d0d9      	beq.n	8010952 <__swbuf_r+0x2e>
 801099e:	e7d6      	b.n	801094e <__swbuf_r+0x2a>

080109a0 <__swsetup_r>:
 80109a0:	b538      	push	{r3, r4, r5, lr}
 80109a2:	4b29      	ldr	r3, [pc, #164]	@ (8010a48 <__swsetup_r+0xa8>)
 80109a4:	4605      	mov	r5, r0
 80109a6:	6818      	ldr	r0, [r3, #0]
 80109a8:	460c      	mov	r4, r1
 80109aa:	b118      	cbz	r0, 80109b4 <__swsetup_r+0x14>
 80109ac:	6a03      	ldr	r3, [r0, #32]
 80109ae:	b90b      	cbnz	r3, 80109b4 <__swsetup_r+0x14>
 80109b0:	f7fd fbb4 	bl	800e11c <__sinit>
 80109b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109b8:	0719      	lsls	r1, r3, #28
 80109ba:	d422      	bmi.n	8010a02 <__swsetup_r+0x62>
 80109bc:	06da      	lsls	r2, r3, #27
 80109be:	d407      	bmi.n	80109d0 <__swsetup_r+0x30>
 80109c0:	2209      	movs	r2, #9
 80109c2:	602a      	str	r2, [r5, #0]
 80109c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109c8:	81a3      	strh	r3, [r4, #12]
 80109ca:	f04f 30ff 	mov.w	r0, #4294967295
 80109ce:	e033      	b.n	8010a38 <__swsetup_r+0x98>
 80109d0:	0758      	lsls	r0, r3, #29
 80109d2:	d512      	bpl.n	80109fa <__swsetup_r+0x5a>
 80109d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109d6:	b141      	cbz	r1, 80109ea <__swsetup_r+0x4a>
 80109d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109dc:	4299      	cmp	r1, r3
 80109de:	d002      	beq.n	80109e6 <__swsetup_r+0x46>
 80109e0:	4628      	mov	r0, r5
 80109e2:	f7fe fb91 	bl	800f108 <_free_r>
 80109e6:	2300      	movs	r3, #0
 80109e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80109ea:	89a3      	ldrh	r3, [r4, #12]
 80109ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80109f0:	81a3      	strh	r3, [r4, #12]
 80109f2:	2300      	movs	r3, #0
 80109f4:	6063      	str	r3, [r4, #4]
 80109f6:	6923      	ldr	r3, [r4, #16]
 80109f8:	6023      	str	r3, [r4, #0]
 80109fa:	89a3      	ldrh	r3, [r4, #12]
 80109fc:	f043 0308 	orr.w	r3, r3, #8
 8010a00:	81a3      	strh	r3, [r4, #12]
 8010a02:	6923      	ldr	r3, [r4, #16]
 8010a04:	b94b      	cbnz	r3, 8010a1a <__swsetup_r+0x7a>
 8010a06:	89a3      	ldrh	r3, [r4, #12]
 8010a08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a10:	d003      	beq.n	8010a1a <__swsetup_r+0x7a>
 8010a12:	4621      	mov	r1, r4
 8010a14:	4628      	mov	r0, r5
 8010a16:	f000 f88b 	bl	8010b30 <__smakebuf_r>
 8010a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a1e:	f013 0201 	ands.w	r2, r3, #1
 8010a22:	d00a      	beq.n	8010a3a <__swsetup_r+0x9a>
 8010a24:	2200      	movs	r2, #0
 8010a26:	60a2      	str	r2, [r4, #8]
 8010a28:	6962      	ldr	r2, [r4, #20]
 8010a2a:	4252      	negs	r2, r2
 8010a2c:	61a2      	str	r2, [r4, #24]
 8010a2e:	6922      	ldr	r2, [r4, #16]
 8010a30:	b942      	cbnz	r2, 8010a44 <__swsetup_r+0xa4>
 8010a32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010a36:	d1c5      	bne.n	80109c4 <__swsetup_r+0x24>
 8010a38:	bd38      	pop	{r3, r4, r5, pc}
 8010a3a:	0799      	lsls	r1, r3, #30
 8010a3c:	bf58      	it	pl
 8010a3e:	6962      	ldrpl	r2, [r4, #20]
 8010a40:	60a2      	str	r2, [r4, #8]
 8010a42:	e7f4      	b.n	8010a2e <__swsetup_r+0x8e>
 8010a44:	2000      	movs	r0, #0
 8010a46:	e7f7      	b.n	8010a38 <__swsetup_r+0x98>
 8010a48:	200001a4 	.word	0x200001a4

08010a4c <_raise_r>:
 8010a4c:	291f      	cmp	r1, #31
 8010a4e:	b538      	push	{r3, r4, r5, lr}
 8010a50:	4605      	mov	r5, r0
 8010a52:	460c      	mov	r4, r1
 8010a54:	d904      	bls.n	8010a60 <_raise_r+0x14>
 8010a56:	2316      	movs	r3, #22
 8010a58:	6003      	str	r3, [r0, #0]
 8010a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a5e:	bd38      	pop	{r3, r4, r5, pc}
 8010a60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010a62:	b112      	cbz	r2, 8010a6a <_raise_r+0x1e>
 8010a64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a68:	b94b      	cbnz	r3, 8010a7e <_raise_r+0x32>
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	f000 f830 	bl	8010ad0 <_getpid_r>
 8010a70:	4622      	mov	r2, r4
 8010a72:	4601      	mov	r1, r0
 8010a74:	4628      	mov	r0, r5
 8010a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a7a:	f000 b817 	b.w	8010aac <_kill_r>
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d00a      	beq.n	8010a98 <_raise_r+0x4c>
 8010a82:	1c59      	adds	r1, r3, #1
 8010a84:	d103      	bne.n	8010a8e <_raise_r+0x42>
 8010a86:	2316      	movs	r3, #22
 8010a88:	6003      	str	r3, [r0, #0]
 8010a8a:	2001      	movs	r0, #1
 8010a8c:	e7e7      	b.n	8010a5e <_raise_r+0x12>
 8010a8e:	2100      	movs	r1, #0
 8010a90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010a94:	4620      	mov	r0, r4
 8010a96:	4798      	blx	r3
 8010a98:	2000      	movs	r0, #0
 8010a9a:	e7e0      	b.n	8010a5e <_raise_r+0x12>

08010a9c <raise>:
 8010a9c:	4b02      	ldr	r3, [pc, #8]	@ (8010aa8 <raise+0xc>)
 8010a9e:	4601      	mov	r1, r0
 8010aa0:	6818      	ldr	r0, [r3, #0]
 8010aa2:	f7ff bfd3 	b.w	8010a4c <_raise_r>
 8010aa6:	bf00      	nop
 8010aa8:	200001a4 	.word	0x200001a4

08010aac <_kill_r>:
 8010aac:	b538      	push	{r3, r4, r5, lr}
 8010aae:	4d07      	ldr	r5, [pc, #28]	@ (8010acc <_kill_r+0x20>)
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	4608      	mov	r0, r1
 8010ab6:	4611      	mov	r1, r2
 8010ab8:	602b      	str	r3, [r5, #0]
 8010aba:	f7f1 fdc5 	bl	8002648 <_kill>
 8010abe:	1c43      	adds	r3, r0, #1
 8010ac0:	d102      	bne.n	8010ac8 <_kill_r+0x1c>
 8010ac2:	682b      	ldr	r3, [r5, #0]
 8010ac4:	b103      	cbz	r3, 8010ac8 <_kill_r+0x1c>
 8010ac6:	6023      	str	r3, [r4, #0]
 8010ac8:	bd38      	pop	{r3, r4, r5, pc}
 8010aca:	bf00      	nop
 8010acc:	200013c0 	.word	0x200013c0

08010ad0 <_getpid_r>:
 8010ad0:	f7f1 bdb2 	b.w	8002638 <_getpid>

08010ad4 <_malloc_usable_size_r>:
 8010ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ad8:	1f18      	subs	r0, r3, #4
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	bfbc      	itt	lt
 8010ade:	580b      	ldrlt	r3, [r1, r0]
 8010ae0:	18c0      	addlt	r0, r0, r3
 8010ae2:	4770      	bx	lr

08010ae4 <__swhatbuf_r>:
 8010ae4:	b570      	push	{r4, r5, r6, lr}
 8010ae6:	460c      	mov	r4, r1
 8010ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aec:	2900      	cmp	r1, #0
 8010aee:	b096      	sub	sp, #88	@ 0x58
 8010af0:	4615      	mov	r5, r2
 8010af2:	461e      	mov	r6, r3
 8010af4:	da0d      	bge.n	8010b12 <__swhatbuf_r+0x2e>
 8010af6:	89a3      	ldrh	r3, [r4, #12]
 8010af8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010afc:	f04f 0100 	mov.w	r1, #0
 8010b00:	bf14      	ite	ne
 8010b02:	2340      	movne	r3, #64	@ 0x40
 8010b04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b08:	2000      	movs	r0, #0
 8010b0a:	6031      	str	r1, [r6, #0]
 8010b0c:	602b      	str	r3, [r5, #0]
 8010b0e:	b016      	add	sp, #88	@ 0x58
 8010b10:	bd70      	pop	{r4, r5, r6, pc}
 8010b12:	466a      	mov	r2, sp
 8010b14:	f000 f848 	bl	8010ba8 <_fstat_r>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	dbec      	blt.n	8010af6 <__swhatbuf_r+0x12>
 8010b1c:	9901      	ldr	r1, [sp, #4]
 8010b1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b26:	4259      	negs	r1, r3
 8010b28:	4159      	adcs	r1, r3
 8010b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b2e:	e7eb      	b.n	8010b08 <__swhatbuf_r+0x24>

08010b30 <__smakebuf_r>:
 8010b30:	898b      	ldrh	r3, [r1, #12]
 8010b32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b34:	079d      	lsls	r5, r3, #30
 8010b36:	4606      	mov	r6, r0
 8010b38:	460c      	mov	r4, r1
 8010b3a:	d507      	bpl.n	8010b4c <__smakebuf_r+0x1c>
 8010b3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b40:	6023      	str	r3, [r4, #0]
 8010b42:	6123      	str	r3, [r4, #16]
 8010b44:	2301      	movs	r3, #1
 8010b46:	6163      	str	r3, [r4, #20]
 8010b48:	b003      	add	sp, #12
 8010b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b4c:	ab01      	add	r3, sp, #4
 8010b4e:	466a      	mov	r2, sp
 8010b50:	f7ff ffc8 	bl	8010ae4 <__swhatbuf_r>
 8010b54:	9f00      	ldr	r7, [sp, #0]
 8010b56:	4605      	mov	r5, r0
 8010b58:	4639      	mov	r1, r7
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	f7fb fcd4 	bl	800c508 <_malloc_r>
 8010b60:	b948      	cbnz	r0, 8010b76 <__smakebuf_r+0x46>
 8010b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b66:	059a      	lsls	r2, r3, #22
 8010b68:	d4ee      	bmi.n	8010b48 <__smakebuf_r+0x18>
 8010b6a:	f023 0303 	bic.w	r3, r3, #3
 8010b6e:	f043 0302 	orr.w	r3, r3, #2
 8010b72:	81a3      	strh	r3, [r4, #12]
 8010b74:	e7e2      	b.n	8010b3c <__smakebuf_r+0xc>
 8010b76:	89a3      	ldrh	r3, [r4, #12]
 8010b78:	6020      	str	r0, [r4, #0]
 8010b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b7e:	81a3      	strh	r3, [r4, #12]
 8010b80:	9b01      	ldr	r3, [sp, #4]
 8010b82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010b86:	b15b      	cbz	r3, 8010ba0 <__smakebuf_r+0x70>
 8010b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f000 f81d 	bl	8010bcc <_isatty_r>
 8010b92:	b128      	cbz	r0, 8010ba0 <__smakebuf_r+0x70>
 8010b94:	89a3      	ldrh	r3, [r4, #12]
 8010b96:	f023 0303 	bic.w	r3, r3, #3
 8010b9a:	f043 0301 	orr.w	r3, r3, #1
 8010b9e:	81a3      	strh	r3, [r4, #12]
 8010ba0:	89a3      	ldrh	r3, [r4, #12]
 8010ba2:	431d      	orrs	r5, r3
 8010ba4:	81a5      	strh	r5, [r4, #12]
 8010ba6:	e7cf      	b.n	8010b48 <__smakebuf_r+0x18>

08010ba8 <_fstat_r>:
 8010ba8:	b538      	push	{r3, r4, r5, lr}
 8010baa:	4d07      	ldr	r5, [pc, #28]	@ (8010bc8 <_fstat_r+0x20>)
 8010bac:	2300      	movs	r3, #0
 8010bae:	4604      	mov	r4, r0
 8010bb0:	4608      	mov	r0, r1
 8010bb2:	4611      	mov	r1, r2
 8010bb4:	602b      	str	r3, [r5, #0]
 8010bb6:	f7f1 fda7 	bl	8002708 <_fstat>
 8010bba:	1c43      	adds	r3, r0, #1
 8010bbc:	d102      	bne.n	8010bc4 <_fstat_r+0x1c>
 8010bbe:	682b      	ldr	r3, [r5, #0]
 8010bc0:	b103      	cbz	r3, 8010bc4 <_fstat_r+0x1c>
 8010bc2:	6023      	str	r3, [r4, #0]
 8010bc4:	bd38      	pop	{r3, r4, r5, pc}
 8010bc6:	bf00      	nop
 8010bc8:	200013c0 	.word	0x200013c0

08010bcc <_isatty_r>:
 8010bcc:	b538      	push	{r3, r4, r5, lr}
 8010bce:	4d06      	ldr	r5, [pc, #24]	@ (8010be8 <_isatty_r+0x1c>)
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	4608      	mov	r0, r1
 8010bd6:	602b      	str	r3, [r5, #0]
 8010bd8:	f7f1 fda6 	bl	8002728 <_isatty>
 8010bdc:	1c43      	adds	r3, r0, #1
 8010bde:	d102      	bne.n	8010be6 <_isatty_r+0x1a>
 8010be0:	682b      	ldr	r3, [r5, #0]
 8010be2:	b103      	cbz	r3, 8010be6 <_isatty_r+0x1a>
 8010be4:	6023      	str	r3, [r4, #0]
 8010be6:	bd38      	pop	{r3, r4, r5, pc}
 8010be8:	200013c0 	.word	0x200013c0

08010bec <_init>:
 8010bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bee:	bf00      	nop
 8010bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bf2:	bc08      	pop	{r3}
 8010bf4:	469e      	mov	lr, r3
 8010bf6:	4770      	bx	lr

08010bf8 <_fini>:
 8010bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfa:	bf00      	nop
 8010bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bfe:	bc08      	pop	{r3}
 8010c00:	469e      	mov	lr, r3
 8010c02:	4770      	bx	lr
