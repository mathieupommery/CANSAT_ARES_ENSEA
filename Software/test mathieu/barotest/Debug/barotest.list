
barotest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004978  08004978  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004980  08004980  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  2000000c  08004994  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08004994  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d315  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220b  00000000  00000000  0002d394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002f5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f1  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025810  00000000  00000000  00030801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e626  00000000  00000000  00056011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7d05  00000000  00000000  00064637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029b0  00000000  00000000  0014c33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0014ecec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048f0 	.word	0x080048f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080048f0 	.word	0x080048f0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2uiz>:
 8000540:	004a      	lsls	r2, r1, #1
 8000542:	d211      	bcs.n	8000568 <__aeabi_d2uiz+0x28>
 8000544:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000548:	d211      	bcs.n	800056e <__aeabi_d2uiz+0x2e>
 800054a:	d50d      	bpl.n	8000568 <__aeabi_d2uiz+0x28>
 800054c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000550:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000554:	d40e      	bmi.n	8000574 <__aeabi_d2uiz+0x34>
 8000556:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800055a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800055e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000562:	fa23 f002 	lsr.w	r0, r3, r2
 8000566:	4770      	bx	lr
 8000568:	f04f 0000 	mov.w	r0, #0
 800056c:	4770      	bx	lr
 800056e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000572:	d102      	bne.n	800057a <__aeabi_d2uiz+0x3a>
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	4770      	bx	lr
 800057a:	f04f 0000 	mov.w	r0, #0
 800057e:	4770      	bx	lr

08000580 <__aeabi_uldivmod>:
 8000580:	b953      	cbnz	r3, 8000598 <__aeabi_uldivmod+0x18>
 8000582:	b94a      	cbnz	r2, 8000598 <__aeabi_uldivmod+0x18>
 8000584:	2900      	cmp	r1, #0
 8000586:	bf08      	it	eq
 8000588:	2800      	cmpeq	r0, #0
 800058a:	bf1c      	itt	ne
 800058c:	f04f 31ff 	movne.w	r1, #4294967295
 8000590:	f04f 30ff 	movne.w	r0, #4294967295
 8000594:	f000 b970 	b.w	8000878 <__aeabi_idiv0>
 8000598:	f1ad 0c08 	sub.w	ip, sp, #8
 800059c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005a0:	f000 f806 	bl	80005b0 <__udivmoddi4>
 80005a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ac:	b004      	add	sp, #16
 80005ae:	4770      	bx	lr

080005b0 <__udivmoddi4>:
 80005b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005b4:	9e08      	ldr	r6, [sp, #32]
 80005b6:	460d      	mov	r5, r1
 80005b8:	4604      	mov	r4, r0
 80005ba:	460f      	mov	r7, r1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d14a      	bne.n	8000656 <__udivmoddi4+0xa6>
 80005c0:	428a      	cmp	r2, r1
 80005c2:	4694      	mov	ip, r2
 80005c4:	d965      	bls.n	8000692 <__udivmoddi4+0xe2>
 80005c6:	fab2 f382 	clz	r3, r2
 80005ca:	b143      	cbz	r3, 80005de <__udivmoddi4+0x2e>
 80005cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d0:	f1c3 0220 	rsb	r2, r3, #32
 80005d4:	409f      	lsls	r7, r3
 80005d6:	fa20 f202 	lsr.w	r2, r0, r2
 80005da:	4317      	orrs	r7, r2
 80005dc:	409c      	lsls	r4, r3
 80005de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80005e2:	fa1f f58c 	uxth.w	r5, ip
 80005e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80005ea:	0c22      	lsrs	r2, r4, #16
 80005ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80005f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80005f4:	fb01 f005 	mul.w	r0, r1, r5
 80005f8:	4290      	cmp	r0, r2
 80005fa:	d90a      	bls.n	8000612 <__udivmoddi4+0x62>
 80005fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000600:	f101 37ff 	add.w	r7, r1, #4294967295
 8000604:	f080 811c 	bcs.w	8000840 <__udivmoddi4+0x290>
 8000608:	4290      	cmp	r0, r2
 800060a:	f240 8119 	bls.w	8000840 <__udivmoddi4+0x290>
 800060e:	3902      	subs	r1, #2
 8000610:	4462      	add	r2, ip
 8000612:	1a12      	subs	r2, r2, r0
 8000614:	b2a4      	uxth	r4, r4
 8000616:	fbb2 f0fe 	udiv	r0, r2, lr
 800061a:	fb0e 2210 	mls	r2, lr, r0, r2
 800061e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000622:	fb00 f505 	mul.w	r5, r0, r5
 8000626:	42a5      	cmp	r5, r4
 8000628:	d90a      	bls.n	8000640 <__udivmoddi4+0x90>
 800062a:	eb1c 0404 	adds.w	r4, ip, r4
 800062e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000632:	f080 8107 	bcs.w	8000844 <__udivmoddi4+0x294>
 8000636:	42a5      	cmp	r5, r4
 8000638:	f240 8104 	bls.w	8000844 <__udivmoddi4+0x294>
 800063c:	4464      	add	r4, ip
 800063e:	3802      	subs	r0, #2
 8000640:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000644:	1b64      	subs	r4, r4, r5
 8000646:	2100      	movs	r1, #0
 8000648:	b11e      	cbz	r6, 8000652 <__udivmoddi4+0xa2>
 800064a:	40dc      	lsrs	r4, r3
 800064c:	2300      	movs	r3, #0
 800064e:	e9c6 4300 	strd	r4, r3, [r6]
 8000652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000656:	428b      	cmp	r3, r1
 8000658:	d908      	bls.n	800066c <__udivmoddi4+0xbc>
 800065a:	2e00      	cmp	r6, #0
 800065c:	f000 80ed 	beq.w	800083a <__udivmoddi4+0x28a>
 8000660:	2100      	movs	r1, #0
 8000662:	e9c6 0500 	strd	r0, r5, [r6]
 8000666:	4608      	mov	r0, r1
 8000668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066c:	fab3 f183 	clz	r1, r3
 8000670:	2900      	cmp	r1, #0
 8000672:	d149      	bne.n	8000708 <__udivmoddi4+0x158>
 8000674:	42ab      	cmp	r3, r5
 8000676:	d302      	bcc.n	800067e <__udivmoddi4+0xce>
 8000678:	4282      	cmp	r2, r0
 800067a:	f200 80f8 	bhi.w	800086e <__udivmoddi4+0x2be>
 800067e:	1a84      	subs	r4, r0, r2
 8000680:	eb65 0203 	sbc.w	r2, r5, r3
 8000684:	2001      	movs	r0, #1
 8000686:	4617      	mov	r7, r2
 8000688:	2e00      	cmp	r6, #0
 800068a:	d0e2      	beq.n	8000652 <__udivmoddi4+0xa2>
 800068c:	e9c6 4700 	strd	r4, r7, [r6]
 8000690:	e7df      	b.n	8000652 <__udivmoddi4+0xa2>
 8000692:	b902      	cbnz	r2, 8000696 <__udivmoddi4+0xe6>
 8000694:	deff      	udf	#255	; 0xff
 8000696:	fab2 f382 	clz	r3, r2
 800069a:	2b00      	cmp	r3, #0
 800069c:	f040 8090 	bne.w	80007c0 <__udivmoddi4+0x210>
 80006a0:	1a8a      	subs	r2, r1, r2
 80006a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006a6:	fa1f fe8c 	uxth.w	lr, ip
 80006aa:	2101      	movs	r1, #1
 80006ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80006b0:	fb07 2015 	mls	r0, r7, r5, r2
 80006b4:	0c22      	lsrs	r2, r4, #16
 80006b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80006ba:	fb0e f005 	mul.w	r0, lr, r5
 80006be:	4290      	cmp	r0, r2
 80006c0:	d908      	bls.n	80006d4 <__udivmoddi4+0x124>
 80006c2:	eb1c 0202 	adds.w	r2, ip, r2
 80006c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80006ca:	d202      	bcs.n	80006d2 <__udivmoddi4+0x122>
 80006cc:	4290      	cmp	r0, r2
 80006ce:	f200 80cb 	bhi.w	8000868 <__udivmoddi4+0x2b8>
 80006d2:	4645      	mov	r5, r8
 80006d4:	1a12      	subs	r2, r2, r0
 80006d6:	b2a4      	uxth	r4, r4
 80006d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80006dc:	fb07 2210 	mls	r2, r7, r0, r2
 80006e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006e4:	fb0e fe00 	mul.w	lr, lr, r0
 80006e8:	45a6      	cmp	lr, r4
 80006ea:	d908      	bls.n	80006fe <__udivmoddi4+0x14e>
 80006ec:	eb1c 0404 	adds.w	r4, ip, r4
 80006f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80006f4:	d202      	bcs.n	80006fc <__udivmoddi4+0x14c>
 80006f6:	45a6      	cmp	lr, r4
 80006f8:	f200 80bb 	bhi.w	8000872 <__udivmoddi4+0x2c2>
 80006fc:	4610      	mov	r0, r2
 80006fe:	eba4 040e 	sub.w	r4, r4, lr
 8000702:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000706:	e79f      	b.n	8000648 <__udivmoddi4+0x98>
 8000708:	f1c1 0720 	rsb	r7, r1, #32
 800070c:	408b      	lsls	r3, r1
 800070e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000712:	ea4c 0c03 	orr.w	ip, ip, r3
 8000716:	fa05 f401 	lsl.w	r4, r5, r1
 800071a:	fa20 f307 	lsr.w	r3, r0, r7
 800071e:	40fd      	lsrs	r5, r7
 8000720:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000724:	4323      	orrs	r3, r4
 8000726:	fbb5 f8f9 	udiv	r8, r5, r9
 800072a:	fa1f fe8c 	uxth.w	lr, ip
 800072e:	fb09 5518 	mls	r5, r9, r8, r5
 8000732:	0c1c      	lsrs	r4, r3, #16
 8000734:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000738:	fb08 f50e 	mul.w	r5, r8, lr
 800073c:	42a5      	cmp	r5, r4
 800073e:	fa02 f201 	lsl.w	r2, r2, r1
 8000742:	fa00 f001 	lsl.w	r0, r0, r1
 8000746:	d90b      	bls.n	8000760 <__udivmoddi4+0x1b0>
 8000748:	eb1c 0404 	adds.w	r4, ip, r4
 800074c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000750:	f080 8088 	bcs.w	8000864 <__udivmoddi4+0x2b4>
 8000754:	42a5      	cmp	r5, r4
 8000756:	f240 8085 	bls.w	8000864 <__udivmoddi4+0x2b4>
 800075a:	f1a8 0802 	sub.w	r8, r8, #2
 800075e:	4464      	add	r4, ip
 8000760:	1b64      	subs	r4, r4, r5
 8000762:	b29d      	uxth	r5, r3
 8000764:	fbb4 f3f9 	udiv	r3, r4, r9
 8000768:	fb09 4413 	mls	r4, r9, r3, r4
 800076c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000770:	fb03 fe0e 	mul.w	lr, r3, lr
 8000774:	45a6      	cmp	lr, r4
 8000776:	d908      	bls.n	800078a <__udivmoddi4+0x1da>
 8000778:	eb1c 0404 	adds.w	r4, ip, r4
 800077c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000780:	d26c      	bcs.n	800085c <__udivmoddi4+0x2ac>
 8000782:	45a6      	cmp	lr, r4
 8000784:	d96a      	bls.n	800085c <__udivmoddi4+0x2ac>
 8000786:	3b02      	subs	r3, #2
 8000788:	4464      	add	r4, ip
 800078a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800078e:	fba3 9502 	umull	r9, r5, r3, r2
 8000792:	eba4 040e 	sub.w	r4, r4, lr
 8000796:	42ac      	cmp	r4, r5
 8000798:	46c8      	mov	r8, r9
 800079a:	46ae      	mov	lr, r5
 800079c:	d356      	bcc.n	800084c <__udivmoddi4+0x29c>
 800079e:	d053      	beq.n	8000848 <__udivmoddi4+0x298>
 80007a0:	b156      	cbz	r6, 80007b8 <__udivmoddi4+0x208>
 80007a2:	ebb0 0208 	subs.w	r2, r0, r8
 80007a6:	eb64 040e 	sbc.w	r4, r4, lr
 80007aa:	fa04 f707 	lsl.w	r7, r4, r7
 80007ae:	40ca      	lsrs	r2, r1
 80007b0:	40cc      	lsrs	r4, r1
 80007b2:	4317      	orrs	r7, r2
 80007b4:	e9c6 7400 	strd	r7, r4, [r6]
 80007b8:	4618      	mov	r0, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c0:	f1c3 0120 	rsb	r1, r3, #32
 80007c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007c8:	fa20 f201 	lsr.w	r2, r0, r1
 80007cc:	fa25 f101 	lsr.w	r1, r5, r1
 80007d0:	409d      	lsls	r5, r3
 80007d2:	432a      	orrs	r2, r5
 80007d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007d8:	fa1f fe8c 	uxth.w	lr, ip
 80007dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80007e0:	fb07 1510 	mls	r5, r7, r0, r1
 80007e4:	0c11      	lsrs	r1, r2, #16
 80007e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80007ea:	fb00 f50e 	mul.w	r5, r0, lr
 80007ee:	428d      	cmp	r5, r1
 80007f0:	fa04 f403 	lsl.w	r4, r4, r3
 80007f4:	d908      	bls.n	8000808 <__udivmoddi4+0x258>
 80007f6:	eb1c 0101 	adds.w	r1, ip, r1
 80007fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80007fe:	d22f      	bcs.n	8000860 <__udivmoddi4+0x2b0>
 8000800:	428d      	cmp	r5, r1
 8000802:	d92d      	bls.n	8000860 <__udivmoddi4+0x2b0>
 8000804:	3802      	subs	r0, #2
 8000806:	4461      	add	r1, ip
 8000808:	1b49      	subs	r1, r1, r5
 800080a:	b292      	uxth	r2, r2
 800080c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000810:	fb07 1115 	mls	r1, r7, r5, r1
 8000814:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000818:	fb05 f10e 	mul.w	r1, r5, lr
 800081c:	4291      	cmp	r1, r2
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x282>
 8000820:	eb1c 0202 	adds.w	r2, ip, r2
 8000824:	f105 38ff 	add.w	r8, r5, #4294967295
 8000828:	d216      	bcs.n	8000858 <__udivmoddi4+0x2a8>
 800082a:	4291      	cmp	r1, r2
 800082c:	d914      	bls.n	8000858 <__udivmoddi4+0x2a8>
 800082e:	3d02      	subs	r5, #2
 8000830:	4462      	add	r2, ip
 8000832:	1a52      	subs	r2, r2, r1
 8000834:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000838:	e738      	b.n	80006ac <__udivmoddi4+0xfc>
 800083a:	4631      	mov	r1, r6
 800083c:	4630      	mov	r0, r6
 800083e:	e708      	b.n	8000652 <__udivmoddi4+0xa2>
 8000840:	4639      	mov	r1, r7
 8000842:	e6e6      	b.n	8000612 <__udivmoddi4+0x62>
 8000844:	4610      	mov	r0, r2
 8000846:	e6fb      	b.n	8000640 <__udivmoddi4+0x90>
 8000848:	4548      	cmp	r0, r9
 800084a:	d2a9      	bcs.n	80007a0 <__udivmoddi4+0x1f0>
 800084c:	ebb9 0802 	subs.w	r8, r9, r2
 8000850:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000854:	3b01      	subs	r3, #1
 8000856:	e7a3      	b.n	80007a0 <__udivmoddi4+0x1f0>
 8000858:	4645      	mov	r5, r8
 800085a:	e7ea      	b.n	8000832 <__udivmoddi4+0x282>
 800085c:	462b      	mov	r3, r5
 800085e:	e794      	b.n	800078a <__udivmoddi4+0x1da>
 8000860:	4640      	mov	r0, r8
 8000862:	e7d1      	b.n	8000808 <__udivmoddi4+0x258>
 8000864:	46d0      	mov	r8, sl
 8000866:	e77b      	b.n	8000760 <__udivmoddi4+0x1b0>
 8000868:	3d02      	subs	r5, #2
 800086a:	4462      	add	r2, ip
 800086c:	e732      	b.n	80006d4 <__udivmoddi4+0x124>
 800086e:	4608      	mov	r0, r1
 8000870:	e70a      	b.n	8000688 <__udivmoddi4+0xd8>
 8000872:	4464      	add	r4, ip
 8000874:	3802      	subs	r0, #2
 8000876:	e742      	b.n	80006fe <__udivmoddi4+0x14e>

08000878 <__aeabi_idiv0>:
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DMA_Init+0x38>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <MX_DMA_Init+0x38>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6493      	str	r3, [r2, #72]	; 0x48
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DMA_Init+0x38>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2045      	movs	r0, #69	; 0x45
 80008a0:	f000 fd31 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80008a4:	2045      	movs	r0, #69	; 0x45
 80008a6:	f000 fd4a 	bl	800133e <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_GPIO_Init+0xc4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a2a      	ldr	r2, [pc, #168]	; (800097c <MX_GPIO_Init+0xc4>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_GPIO_Init+0xc4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a24      	ldr	r2, [pc, #144]	; (800097c <MX_GPIO_Init+0xc4>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_GPIO_Init+0xc4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <MX_GPIO_Init+0xc4>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_GPIO_Init+0xc4>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f001 f93d 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000940:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <MX_GPIO_Init+0xc8>)
 8000952:	f000 ff85 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000956:	2320      	movs	r3, #32
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f000 ff76 	bl	8001860 <HAL_GPIO_Init>

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021000 	.word	0x40021000
 8000980:	48000800 	.word	0x48000800

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f000 fb42 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f83e 	bl	8000a0c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f7ff ff92 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000994:	f7ff ff72 	bl	800087c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000998:	f000 f99c 	bl	8000cd4 <MX_USART2_UART_Init>
  MX_LPUART1_UART_Init();
 800099c:	f000 f96e 	bl	8000c7c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */


  memcpy((uint8_t*)commandgps,(uint8_t*)"$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0*",sizeof("$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0*"));
 80009a0:	2226      	movs	r2, #38	; 0x26
 80009a2:	4915      	ldr	r1, [pc, #84]	; (80009f8 <main+0x74>)
 80009a4:	4815      	ldr	r0, [pc, #84]	; (80009fc <main+0x78>)
 80009a6:	f003 ff95 	bl	80048d4 <memcpy>
  a=checksumcalculate((uint8_t*)commandgps);
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <main+0x78>)
 80009ac:	f000 f885 	bl	8000aba <checksumcalculate>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <main+0x7c>)
 80009b6:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)commandgps, sizeof((uint8_t*)commandgps),HAL_MAX_DELAY);
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	2204      	movs	r2, #4
 80009be:	490f      	ldr	r1, [pc, #60]	; (80009fc <main+0x78>)
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <main+0x80>)
 80009c2:	f002 fc7d 	bl	80032c0 <HAL_UART_Transmit>
  memset((uint8_t*)commandgps,'\0',64);
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	2100      	movs	r1, #0
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <main+0x78>)
 80009cc:	f003 ff56 	bl	800487c <memset>
  HAL_Delay(50);
 80009d0:	2032      	movs	r0, #50	; 0x32
 80009d2:	f000 fb99 	bl	8001108 <HAL_Delay>




//  a=PADS_continuous_init(&hi2c2);
  HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 80009d6:	2240      	movs	r2, #64	; 0x40
 80009d8:	490b      	ldr	r1, [pc, #44]	; (8000a08 <main+0x84>)
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <main+0x80>)
 80009dc:	f002 fcfa 	bl	80033d4 <HAL_UART_Receive_DMA>

  a=checksumcalculate((uint8_t*)commandgps);
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <main+0x78>)
 80009e2:	f000 f86a 	bl	8000aba <checksumcalculate>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <main+0x7c>)
 80009ec:	601a      	str	r2, [r3, #0]
  while (1)
  {

	  //nmea_parse(&myData,(uint8_t *)DataBuffer);
	  //HAL_UART_Transmit(&huart2, (uint8_t *) DataBuffer, sizeof((uint8_t *) DataBuffer), HAL_MAX_DELAY);
	  HAL_Delay(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f2:	f000 fb89 	bl	8001108 <HAL_Delay>
 80009f6:	e7fa      	b.n	80009ee <main+0x6a>
 80009f8:	08004908 	.word	0x08004908
 80009fc:	20000270 	.word	0x20000270
 8000a00:	20000028 	.word	0x20000028
 8000a04:	200002b0 	.word	0x200002b0
 8000a08:	20000030 	.word	0x20000030

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b096      	sub	sp, #88	; 0x58
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2244      	movs	r2, #68	; 0x44
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 ff2e 	bl	800487c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a32:	f001 f8e5 	bl	8001c00 <HAL_PWREx_ControlVoltageScaling>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a3c:	f000 f838 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a52:	2302      	movs	r3, #2
 8000a54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f91c 	bl	8001cac <HAL_RCC_OscConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a7a:	f000 f819 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7e:	230f      	movs	r3, #15
 8000a80:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a82:	2303      	movs	r3, #3
 8000a84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a8a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	2104      	movs	r1, #4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fce3 	bl	8002464 <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000aa4:	f000 f804 	bl	8000ab0 <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3758      	adds	r7, #88	; 0x58
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>

08000aba <checksumcalculate>:

	return distance;
}


uint16_t checksumcalculate(uint8_t * cmdbuffer){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	int index=0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
	uint16_t checksum=0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	817b      	strh	r3, [r7, #10]
	uint8_t checksum1=0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	727b      	strb	r3, [r7, #9]
	uint8_t checksum2=0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	723b      	strb	r3, [r7, #8]
	while(cmdbuffer[index]!='$'){
 8000ad2:	e002      	b.n	8000ada <checksumcalculate+0x20>
		index++;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
	while(cmdbuffer[index]!='$'){
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b24      	cmp	r3, #36	; 0x24
 8000ae4:	d1f6      	bne.n	8000ad4 <checksumcalculate+0x1a>
	}
	index++;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
	while(cmdbuffer[index]!='*'){
 8000aec:	e00a      	b.n	8000b04 <checksumcalculate+0x4a>
		checksum^=cmdbuffer[index];
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	897b      	ldrh	r3, [r7, #10]
 8000afa:	4053      	eors	r3, r2
 8000afc:	817b      	strh	r3, [r7, #10]
		index++;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
	while(cmdbuffer[index]!='*'){
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8000b0e:	d1ee      	bne.n	8000aee <checksumcalculate+0x34>
	}
	index++;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
	checksum1=(uint8_t) floor(checksum/16);
 8000b16:	897b      	ldrh	r3, [r7, #10]
 8000b18:	091b      	lsrs	r3, r3, #4
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fca5 	bl	800046c <__aeabi_i2d>
 8000b22:	4602      	mov	r2, r0
 8000b24:	460b      	mov	r3, r1
 8000b26:	4610      	mov	r0, r2
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f7ff fd09 	bl	8000540 <__aeabi_d2uiz>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	727b      	strb	r3, [r7, #9]
	checksum2=(uint8_t) (checksum%16);
 8000b32:	897b      	ldrh	r3, [r7, #10]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	723b      	strb	r3, [r7, #8]

	if(checksum1==0){
 8000b3c:	7a7b      	ldrb	r3, [r7, #9]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d105      	bne.n	8000b4e <checksumcalculate+0x94>
		cmdbuffer[index]=checksum2;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	7a3a      	ldrb	r2, [r7, #8]
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e00c      	b.n	8000b68 <checksumcalculate+0xae>
	}
	else{
		cmdbuffer[index]=checksum1;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	7a7a      	ldrb	r2, [r7, #9]
 8000b56:	701a      	strb	r2, [r3, #0]
		index++;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
		cmdbuffer[index]=checksum2;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	7a3a      	ldrb	r2, [r7, #8]
 8000b66:	701a      	strb	r2, [r3, #0]
	}
	index++;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
	cmdbuffer[index]='\r';
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	220d      	movs	r2, #13
 8000b76:	701a      	strb	r2, [r3, #0]
	index++;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
	cmdbuffer[index]='\n';
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	220a      	movs	r2, #10
 8000b86:	701a      	strb	r2, [r3, #0]
	return checksum;
 8000b88:	897b      	ldrh	r3, [r7, #10]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_MspInit+0x44>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_MspInit+0x44>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_MspInit+0x44>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x44>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 fa4e 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <DMA2_Channel7_IRQHandler+0x10>)
 8000c36:	f000 fd34 	bl	80016a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200003c0 	.word	0x200003c0

08000c44 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <LPUART1_IRQHandler+0x10>)
 8000c4a:	f002 fc0f 	bl	800346c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200002b0 	.word	0x200002b0

08000c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <MX_LPUART1_UART_Init+0x54>)
 8000c84:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000c88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c8c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_LPUART1_UART_Init+0x50>)
 8000cba:	f002 fab3 	bl	8003224 <HAL_UART_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000cc4:	f7ff fef4 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200002b0 	.word	0x200002b0
 8000cd0:	40008000 	.word	0x40008000

08000cd4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_USART2_UART_Init+0x5c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d18:	f002 fa84 	bl	8003224 <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d22:	f7ff fec5 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000338 	.word	0x20000338
 8000d30:	40004400 	.word	0x40004400

08000d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0ae      	sub	sp, #184	; 0xb8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2288      	movs	r2, #136	; 0x88
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 fd91 	bl	800487c <memset>
  if(uartHandle->Instance==LPUART1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a5b      	ldr	r2, [pc, #364]	; (8000ecc <HAL_UART_MspInit+0x198>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d16d      	bne.n	8000e40 <HAL_UART_MspInit+0x10c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d64:	2320      	movs	r3, #32
 8000d66:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fd9b 	bl	80028ac <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d7c:	f7ff fe98 	bl	8000ab0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d80:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d84:	4a52      	ldr	r2, [pc, #328]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d8c:	4b50      	ldr	r3, [pc, #320]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da4:	4b4a      	ldr	r3, [pc, #296]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000db0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	483f      	ldr	r0, [pc, #252]	; (8000ed4 <HAL_UART_MspInit+0x1a0>)
 8000dd8:	f000 fd42 	bl	8001860 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000dde:	4a3f      	ldr	r2, [pc, #252]	; (8000edc <HAL_UART_MspInit+0x1a8>)
 8000de0:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8000de2:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de8:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dee:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df4:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfa:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e00:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_CIRCULAR;
 8000e06:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000e08:	2220      	movs	r2, #32
 8000e0a:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0c:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8000e12:	4831      	ldr	r0, [pc, #196]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000e14:	f000 faae 	bl	8001374 <HAL_DMA_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000e1e:	f7ff fe47 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a2c      	ldr	r2, [pc, #176]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000e26:	675a      	str	r2, [r3, #116]	; 0x74
 8000e28:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <HAL_UART_MspInit+0x1a4>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2046      	movs	r0, #70	; 0x46
 8000e34:	f000 fa67 	bl	8001306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e38:	2046      	movs	r0, #70	; 0x46
 8000e3a:	f000 fa80 	bl	800133e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e3e:	e040      	b.n	8000ec2 <HAL_UART_MspInit+0x18e>
  else if(uartHandle->Instance==USART2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_UART_MspInit+0x1ac>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d13b      	bne.n	8000ec2 <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fd28 	bl	80028ac <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8000e62:	f7ff fe25 	bl	8000ab0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0x19c>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e96:	230c      	movs	r3, #12
 8000e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f000 fccf 	bl	8001860 <HAL_GPIO_Init>
}
 8000ec2:	bf00      	nop
 8000ec4:	37b8      	adds	r7, #184	; 0xb8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40008000 	.word	0x40008000
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000400 	.word	0x48000400
 8000ed8:	200003c0 	.word	0x200003c0
 8000edc:	40020480 	.word	0x40020480
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_UART_RxCpltCallback+0xc0>)
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <HAL_UART_RxCpltCallback+0xc4>)
 8000ef2:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <HAL_UART_RxCpltCallback+0xc4>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000efc:	d922      	bls.n	8000f44 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_UART_RxCpltCallback+0xc4>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000f06:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <HAL_UART_RxCpltCallback+0xc4>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <HAL_UART_RxCpltCallback+0xc8>)
 8000f10:	4413      	add	r3, r2
 8000f12:	89fa      	ldrh	r2, [r7, #14]
 8000f14:	4926      	ldr	r1, [pc, #152]	; (8000fb0 <HAL_UART_RxCpltCallback+0xcc>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fcdc 	bl	80048d4 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <HAL_UART_RxCpltCallback+0xc4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8000f22:	89fb      	ldrh	r3, [r7, #14]
 8000f24:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <HAL_UART_RxCpltCallback+0xcc>)
 8000f26:	1899      	adds	r1, r3, r2
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f2e:	461a      	mov	r2, r3
 8000f30:	481e      	ldr	r0, [pc, #120]	; (8000fac <HAL_UART_RxCpltCallback+0xc8>)
 8000f32:	f003 fccf 	bl	80048d4 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8000f36:	89fb      	ldrh	r3, [r7, #14]
 8000f38:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_UART_RxCpltCallback+0xc0>)
 8000f40:	801a      	strh	r2, [r3, #0]
 8000f42:	e01e      	b.n	8000f82 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_UART_RxCpltCallback+0xc4>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_UART_RxCpltCallback+0xc8>)
 8000f4c:	441a      	add	r2, r3
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_UART_RxCpltCallback+0xcc>)
 8000f50:	4610      	mov	r0, r2
 8000f52:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000f56:	4602      	mov	r2, r0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f8d1 c000 	ldr.w	ip, [r1]
 8000f5e:	684e      	ldr	r6, [r1, #4]
 8000f60:	688d      	ldr	r5, [r1, #8]
 8000f62:	68c9      	ldr	r1, [r1, #12]
 8000f64:	f8c2 c000 	str.w	ip, [r2]
 8000f68:	6056      	str	r6, [r2, #4]
 8000f6a:	6095      	str	r5, [r2, #8]
 8000f6c:	60d1      	str	r1, [r2, #12]
 8000f6e:	3310      	adds	r3, #16
 8000f70:	3010      	adds	r0, #16
 8000f72:	42a3      	cmp	r3, r4
 8000f74:	d1ef      	bne.n	8000f56 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_UART_RxCpltCallback+0xc4>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	3340      	adds	r3, #64	; 0x40
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_UART_RxCpltCallback+0xc0>)
 8000f80:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8000f82:	2240      	movs	r2, #64	; 0x40
 8000f84:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <HAL_UART_RxCpltCallback+0xcc>)
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <HAL_UART_RxCpltCallback+0xd0>)
 8000f88:	f002 fa24 	bl	80033d4 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_UART_RxCpltCallback+0xd4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_UART_RxCpltCallback+0xd4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0204 	bic.w	r2, r2, #4
 8000f9a:	601a      	str	r2, [r3, #0]

	//HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa4:	2000002e 	.word	0x2000002e
 8000fa8:	2000002c 	.word	0x2000002c
 8000fac:	20000070 	.word	0x20000070
 8000fb0:	20000030 	.word	0x20000030
 8000fb4:	200002b0 	.word	0x200002b0
 8000fb8:	200003c0 	.word	0x200003c0

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff fe4a 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f003 fc4f 	bl	800488c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fcc9 	bl	8000984 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001000:	08004988 	.word	0x08004988
  ldr r2, =_sbss
 8001004:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001008:	2000040c 	.word	0x2000040c

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>
	...

08001010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_Init+0x3c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_Init+0x3c>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 f962 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102c:	2000      	movs	r0, #0
 800102e:	f000 f80f 	bl	8001050 <HAL_InitTick>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	e001      	b.n	8001042 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103e:	f7ff fda9 	bl	8000b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001042:	79fb      	ldrb	r3, [r7, #7]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d023      	beq.n	80010ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_InitTick+0x70>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_InitTick+0x6c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f96d 	bl	800135a <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10f      	bne.n	80010a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d809      	bhi.n	80010a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f937 	bl	8001306 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_InitTick+0x74>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e007      	b.n	80010b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e004      	b.n	80010b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e001      	b.n	80010b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000408 	.word	0x20000408

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000408 	.word	0x20000408

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	; (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f7ff ff8e 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff29 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff3e 	bl	8001198 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff8e 	bl	8001244 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5d 	bl	80011f0 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff31 	bl	80011b4 <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa2 	bl	80012ac <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e098      	b.n	80014b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <HAL_DMA_Init+0x150>)
 800138e:	429a      	cmp	r2, r3
 8001390:	d80f      	bhi.n	80013b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <HAL_DMA_Init+0x154>)
 800139a:	4413      	add	r3, r2
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_DMA_Init+0x158>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	009a      	lsls	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a48      	ldr	r2, [pc, #288]	; (80014d0 <HAL_DMA_Init+0x15c>)
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
 80013b0:	e00e      	b.n	80013d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <HAL_DMA_Init+0x160>)
 80013ba:	4413      	add	r3, r2
 80013bc:	4a43      	ldr	r2, [pc, #268]	; (80014cc <HAL_DMA_Init+0x158>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	009a      	lsls	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a42      	ldr	r2, [pc, #264]	; (80014d8 <HAL_DMA_Init+0x164>)
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800142a:	d039      	beq.n	80014a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <HAL_DMA_Init+0x15c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d11a      	bne.n	800146c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_DMA_Init+0x168>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f003 031c 	and.w	r3, r3, #28
 8001442:	210f      	movs	r1, #15
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	4924      	ldr	r1, [pc, #144]	; (80014dc <HAL_DMA_Init+0x168>)
 800144c:	4013      	ands	r3, r2
 800144e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_DMA_Init+0x168>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	f003 031c 	and.w	r3, r3, #28
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	491d      	ldr	r1, [pc, #116]	; (80014dc <HAL_DMA_Init+0x168>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	e019      	b.n	80014a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_DMA_Init+0x16c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f003 031c 	and.w	r3, r3, #28
 8001478:	210f      	movs	r1, #15
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	4917      	ldr	r1, [pc, #92]	; (80014e0 <HAL_DMA_Init+0x16c>)
 8001482:	4013      	ands	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_DMA_Init+0x16c>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f003 031c 	and.w	r3, r3, #28
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	4911      	ldr	r1, [pc, #68]	; (80014e0 <HAL_DMA_Init+0x16c>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40020407 	.word	0x40020407
 80014c8:	bffdfff8 	.word	0xbffdfff8
 80014cc:	cccccccd 	.word	0xcccccccd
 80014d0:	40020000 	.word	0x40020000
 80014d4:	bffdfbf8 	.word	0xbffdfbf8
 80014d8:	40020400 	.word	0x40020400
 80014dc:	400200a8 	.word	0x400200a8
 80014e0:	400204a8 	.word	0x400204a8

080014e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_DMA_Start_IT+0x20>
 8001500:	2302      	movs	r3, #2
 8001502:	e04b      	b.n	800159c <HAL_DMA_Start_IT+0xb8>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d13a      	bne.n	800158e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f95f 	bl	8001800 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 020e 	orr.w	r2, r2, #14
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e00f      	b.n	800157c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0204 	bic.w	r2, r2, #4
 800156a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 020a 	orr.w	r2, r2, #10
 800157a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e005      	b.n	800159a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001596:	2302      	movs	r3, #2
 8001598:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800159a:	7dfb      	ldrb	r3, [r7, #23]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d008      	beq.n	80015ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2204      	movs	r2, #4
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e022      	b.n	8001614 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 020e 	bic.w	r2, r2, #14
 80015dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0201 	bic.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 021c 	and.w	r2, r3, #28
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d005      	beq.n	8001644 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2204      	movs	r2, #4
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e029      	b.n	8001698 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020e 	bic.w	r2, r2, #14
 8001652:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 021c 	and.w	r2, r3, #28
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
    }
  }
  return status;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f003 031c 	and.w	r3, r3, #28
 80016c2:	2204      	movs	r2, #4
 80016c4:	409a      	lsls	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d026      	beq.n	800171c <HAL_DMA_IRQHandler+0x7a>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d021      	beq.n	800171c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d107      	bne.n	80016f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0204 	bic.w	r2, r2, #4
 80016f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f003 021c 	and.w	r2, r3, #28
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2104      	movs	r1, #4
 8001704:	fa01 f202 	lsl.w	r2, r1, r2
 8001708:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	2b00      	cmp	r3, #0
 8001710:	d071      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800171a:	e06c      	b.n	80017f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f003 031c 	and.w	r3, r3, #28
 8001724:	2202      	movs	r2, #2
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02e      	beq.n	800178e <HAL_DMA_IRQHandler+0xec>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d029      	beq.n	800178e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 020a 	bic.w	r2, r2, #10
 8001756:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f003 021c 	and.w	r2, r3, #28
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	2102      	movs	r1, #2
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d038      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800178c:	e033      	b.n	80017f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f003 031c 	and.w	r3, r3, #28
 8001796:	2208      	movs	r2, #8
 8001798:	409a      	lsls	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d02a      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x156>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d025      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 020e 	bic.w	r2, r2, #14
 80017ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c0:	f003 021c 	and.w	r2, r3, #28
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
}
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f003 021c 	and.w	r2, r3, #28
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f202 	lsl.w	r2, r1, r2
 8001820:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b10      	cmp	r3, #16
 8001830:	d108      	bne.n	8001844 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001842:	e007      	b.n	8001854 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186e:	e17f      	b.n	8001b70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8171 	beq.w	8001b6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d005      	beq.n	80018a0 <HAL_GPIO_Init+0x40>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d130      	bne.n	8001902 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018d6:	2201      	movs	r2, #1
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	f003 0201 	and.w	r2, r3, #1
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b03      	cmp	r3, #3
 800190c:	d118      	bne.n	8001940 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	6939      	ldr	r1, [r7, #16]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80ac 	beq.w	8001b6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	4a5e      	ldr	r2, [pc, #376]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a1e:	4b5c      	ldr	r3, [pc, #368]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2a:	4a5a      	ldr	r2, [pc, #360]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a54:	d025      	beq.n	8001aa2 <HAL_GPIO_Init+0x242>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4f      	ldr	r2, [pc, #316]	; (8001b98 <HAL_GPIO_Init+0x338>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01f      	beq.n	8001a9e <HAL_GPIO_Init+0x23e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_GPIO_Init+0x33c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x23a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4d      	ldr	r2, [pc, #308]	; (8001ba0 <HAL_GPIO_Init+0x340>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x236>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	; (8001ba4 <HAL_GPIO_Init+0x344>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x232>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <HAL_GPIO_Init+0x348>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x22e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_GPIO_Init+0x34c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x22a>
 8001a86:	2306      	movs	r3, #6
 8001a88:	e00c      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	e00a      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a8e:	2305      	movs	r3, #5
 8001a90:	e008      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a92:	2304      	movs	r3, #4
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	f002 0203 	and.w	r2, r2, #3
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4093      	lsls	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ab4:	4937      	ldr	r1, [pc, #220]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f47f ae78 	bne.w	8001870 <HAL_GPIO_Init+0x10>
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	48000800 	.word	0x48000800
 8001ba0:	48000c00 	.word	0x48000c00
 8001ba4:	48001000 	.word	0x48001000
 8001ba8:	48001400 	.word	0x48001400
 8001bac:	48001800 	.word	0x48001800
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40007000 	.word	0x40007000

08001c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0e:	d130      	bne.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c1c:	d038      	beq.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c26:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2232      	movs	r2, #50	; 0x32
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0c9b      	lsrs	r3, r3, #18
 8001c40:	3301      	adds	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c44:	e002      	b.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c58:	d102      	bne.n	8001c60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f2      	bne.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6c:	d110      	bne.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e00f      	b.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7e:	d007      	beq.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c88:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	431bde83 	.word	0x431bde83

08001cac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e3ca      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbe:	4b97      	ldr	r3, [pc, #604]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc8:	4b94      	ldr	r3, [pc, #592]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 80e4 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x4a>
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	f040 808b 	bne.w	8001e04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	f040 8087 	bne.w	8001e04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cf6:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x62>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e3a2      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1a      	ldr	r2, [r3, #32]
 8001d12:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <HAL_RCC_OscConfig+0x7c>
 8001d1e:	4b7f      	ldr	r3, [pc, #508]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d26:	e005      	b.n	8001d34 <HAL_RCC_OscConfig+0x88>
 8001d28:	4b7c      	ldr	r3, [pc, #496]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d223      	bcs.n	8001d80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fd55 	bl	80027ec <RCC_SetFlashLatencyFromMSIRange>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e383      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d4c:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a72      	ldr	r2, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d52:	f043 0308 	orr.w	r3, r3, #8
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b70      	ldr	r3, [pc, #448]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	496d      	ldr	r1, [pc, #436]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d6a:	4b6c      	ldr	r3, [pc, #432]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	4968      	ldr	r1, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
 8001d7e:	e025      	b.n	8001dcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d80:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a65      	ldr	r2, [pc, #404]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4960      	ldr	r1, [pc, #384]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9e:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	495b      	ldr	r1, [pc, #364]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 fd15 	bl	80027ec <RCC_SetFlashLatencyFromMSIRange>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e343      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dcc:	f000 fc4a 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b52      	ldr	r3, [pc, #328]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	4950      	ldr	r1, [pc, #320]	; (8001f20 <HAL_RCC_OscConfig+0x274>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_RCC_OscConfig+0x278>)
 8001dea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dec:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f92d 	bl	8001050 <HAL_InitTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d052      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	e327      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d032      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e0c:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a42      	ldr	r2, [pc, #264]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e18:	f7ff f96a 	bl	80010f0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e20:	f7ff f966 	bl	80010f0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e310      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e3e:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a36      	ldr	r2, [pc, #216]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4931      	ldr	r1, [pc, #196]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	492c      	ldr	r1, [pc, #176]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e01a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f937 	bl	80010f0 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e86:	f7ff f933 	bl	80010f0 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e2dd      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f0      	bne.n	8001e86 <HAL_RCC_OscConfig+0x1da>
 8001ea4:	e000      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ea6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d074      	beq.n	8001f9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x21a>
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d10e      	bne.n	8001ede <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d10b      	bne.n	8001ede <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d064      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2f0>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d160      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e2ba      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x24a>
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e026      	b.n	8001f44 <HAL_RCC_OscConfig+0x298>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efe:	d115      	bne.n	8001f2c <HAL_RCC_OscConfig+0x280>
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a02      	ldr	r2, [pc, #8]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	e014      	b.n	8001f44 <HAL_RCC_OscConfig+0x298>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08004930 	.word	0x08004930
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000004 	.word	0x20000004
 8001f2c:	4ba0      	ldr	r3, [pc, #640]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a9f      	ldr	r2, [pc, #636]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b9d      	ldr	r3, [pc, #628]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a9c      	ldr	r2, [pc, #624]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f8d0 	bl	80010f0 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff f8cc 	bl	80010f0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e276      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f66:	4b92      	ldr	r3, [pc, #584]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x2a8>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f8bc 	bl	80010f0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f8b8 	bl	80010f0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e262      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8e:	4b88      	ldr	r3, [pc, #544]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x2d0>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d060      	beq.n	800206c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_OscConfig+0x310>
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d119      	bne.n	8001fea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d116      	bne.n	8001fea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fbc:	4b7c      	ldr	r3, [pc, #496]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x328>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e23f      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	061b      	lsls	r3, r3, #24
 8001fe2:	4973      	ldr	r1, [pc, #460]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe8:	e040      	b.n	800206c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d023      	beq.n	800203a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff2:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f877 	bl	80010f0 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff f873 	bl	80010f0 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e21d      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002018:	4b65      	ldr	r3, [pc, #404]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	4b62      	ldr	r3, [pc, #392]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	495f      	ldr	r1, [pc, #380]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
 8002038:	e018      	b.n	800206c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b5d      	ldr	r3, [pc, #372]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a5c      	ldr	r2, [pc, #368]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff f853 	bl	80010f0 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff f84f 	bl	80010f0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1f9      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d03c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01c      	beq.n	80020ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002080:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002086:	4a4a      	ldr	r2, [pc, #296]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f82e 	bl	80010f0 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff f82a 	bl	80010f0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1d4      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 80020ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ef      	beq.n	8002098 <HAL_RCC_OscConfig+0x3ec>
 80020b8:	e01b      	b.n	80020f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 80020bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c0:	4a3b      	ldr	r2, [pc, #236]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7ff f811 	bl	80010f0 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d2:	f7ff f80d 	bl	80010f0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1b7      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e4:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ef      	bne.n	80020d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80a6 	beq.w	800224c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10d      	bne.n	800212c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211a:	6593      	str	r3, [r2, #88]	; 0x58
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002128:	2301      	movs	r3, #1
 800212a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_OscConfig+0x508>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d118      	bne.n	800216a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002138:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_RCC_OscConfig+0x508>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x508>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002144:	f7fe ffd4 	bl	80010f0 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe ffd0 	bl	80010f0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e17a      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_RCC_OscConfig+0x508>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d108      	bne.n	8002184 <HAL_RCC_OscConfig+0x4d8>
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002182:	e029      	b.n	80021d8 <HAL_RCC_OscConfig+0x52c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d115      	bne.n	80021b8 <HAL_RCC_OscConfig+0x50c>
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	4a03      	ldr	r2, [pc, #12]	; (80021b0 <HAL_RCC_OscConfig+0x504>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ac:	e014      	b.n	80021d8 <HAL_RCC_OscConfig+0x52c>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
 80021b8:	4b9c      	ldr	r3, [pc, #624]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	4a9b      	ldr	r2, [pc, #620]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c8:	4b98      	ldr	r3, [pc, #608]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	4a97      	ldr	r2, [pc, #604]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d016      	beq.n	800220e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e0:	f7fe ff86 	bl	80010f0 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7fe ff82 	bl	80010f0 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e12a      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fe:	4b8b      	ldr	r3, [pc, #556]	; (800242c <HAL_RCC_OscConfig+0x780>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ed      	beq.n	80021e8 <HAL_RCC_OscConfig+0x53c>
 800220c:	e015      	b.n	800223a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe ff6f 	bl	80010f0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe ff6b 	bl	80010f0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e113      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800222c:	4b7f      	ldr	r3, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x780>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ed      	bne.n	8002216 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223a:	7ffb      	ldrb	r3, [r7, #31]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002240:	4b7a      	ldr	r3, [pc, #488]	; (800242c <HAL_RCC_OscConfig+0x780>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a79      	ldr	r2, [pc, #484]	; (800242c <HAL_RCC_OscConfig+0x780>)
 8002246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80fe 	beq.w	8002452 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	2b02      	cmp	r3, #2
 800225c:	f040 80d0 	bne.w	8002400 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002260:	4b72      	ldr	r3, [pc, #456]	; (800242c <HAL_RCC_OscConfig+0x780>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	429a      	cmp	r2, r3
 8002272:	d130      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	3b01      	subs	r3, #1
 8002280:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d127      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002290:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d11f      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a0:	2a07      	cmp	r2, #7
 80022a2:	bf14      	ite	ne
 80022a4:	2201      	movne	r2, #1
 80022a6:	2200      	moveq	r2, #0
 80022a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d06e      	beq.n	80023b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b0c      	cmp	r3, #12
 80022da:	d069      	beq.n	80023b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022dc:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022e8:	4b50      	ldr	r3, [pc, #320]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0ad      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a4b      	ldr	r2, [pc, #300]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80022fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002302:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002304:	f7fe fef4 	bl	80010f0 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe fef0 	bl	80010f0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e09a      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231e:	4b43      	ldr	r3, [pc, #268]	; (800242c <HAL_RCC_OscConfig+0x780>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232a:	4b40      	ldr	r3, [pc, #256]	; (800242c <HAL_RCC_OscConfig+0x780>)
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b40      	ldr	r3, [pc, #256]	; (8002430 <HAL_RCC_OscConfig+0x784>)
 8002330:	4013      	ands	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800233a:	3a01      	subs	r2, #1
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	4311      	orrs	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002344:	0212      	lsls	r2, r2, #8
 8002346:	4311      	orrs	r1, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800234c:	0852      	lsrs	r2, r2, #1
 800234e:	3a01      	subs	r2, #1
 8002350:	0552      	lsls	r2, r2, #21
 8002352:	4311      	orrs	r1, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002358:	0852      	lsrs	r2, r2, #1
 800235a:	3a01      	subs	r2, #1
 800235c:	0652      	lsls	r2, r2, #25
 800235e:	4311      	orrs	r1, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002364:	0912      	lsrs	r2, r2, #4
 8002366:	0452      	lsls	r2, r2, #17
 8002368:	430a      	orrs	r2, r1
 800236a:	4930      	ldr	r1, [pc, #192]	; (800242c <HAL_RCC_OscConfig+0x780>)
 800236c:	4313      	orrs	r3, r2
 800236e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <HAL_RCC_OscConfig+0x780>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2d      	ldr	r2, [pc, #180]	; (800242c <HAL_RCC_OscConfig+0x780>)
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_RCC_OscConfig+0x780>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a2a      	ldr	r2, [pc, #168]	; (800242c <HAL_RCC_OscConfig+0x780>)
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002386:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002388:	f7fe feb2 	bl	80010f0 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe feae 	bl	80010f0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e058      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ae:	e050      	b.n	8002452 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e04f      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d148      	bne.n	8002452 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a19      	ldr	r2, [pc, #100]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80023c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80023d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023d8:	f7fe fe8a 	bl	80010f0 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fe86 	bl	80010f0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e030      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_RCC_OscConfig+0x780>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x734>
 80023fe:	e028      	b.n	8002452 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d023      	beq.n	800244e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_OscConfig+0x780>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <HAL_RCC_OscConfig+0x780>)
 800240c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fe6d 	bl	80010f0 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002418:	e00c      	b.n	8002434 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fe69 	bl	80010f0 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d905      	bls.n	8002434 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e013      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
 800242c:	40021000 	.word	0x40021000
 8002430:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_OscConfig+0x7b0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ec      	bne.n	800241a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_OscConfig+0x7b0>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	4905      	ldr	r1, [pc, #20]	; (800245c <HAL_RCC_OscConfig+0x7b0>)
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_OscConfig+0x7b4>)
 8002448:	4013      	ands	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
 800244c:	e001      	b.n	8002452 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	feeefffc 	.word	0xfeeefffc

08002464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0e7      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b75      	ldr	r3, [pc, #468]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d910      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b72      	ldr	r3, [pc, #456]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4970      	ldr	r1, [pc, #448]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b6e      	ldr	r3, [pc, #440]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0cf      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b66      	ldr	r3, [pc, #408]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d908      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c4:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4960      	ldr	r1, [pc, #384]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d04c      	beq.n	800257c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d121      	bne.n	800253a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0a6      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002502:	4b54      	ldr	r3, [pc, #336]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d115      	bne.n	800253a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e09a      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800251a:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e08e      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252a:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e086      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4943      	ldr	r1, [pc, #268]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe fdd0 	bl	80010f0 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fdcc 	bl	80010f0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e06e      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002594:	429a      	cmp	r2, r3
 8002596:	d208      	bcs.n	80025aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	492b      	ldr	r1, [pc, #172]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d210      	bcs.n	80025da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 0207 	bic.w	r2, r3, #7
 80025c0:	4923      	ldr	r1, [pc, #140]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e036      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	4918      	ldr	r1, [pc, #96]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d009      	beq.n	8002618 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4910      	ldr	r1, [pc, #64]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002618:	f000 f824 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	490b      	ldr	r1, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1f4>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x1f8>)
 8002636:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1fc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fd07 	bl	8001050 <HAL_InitTick>
 8002642:	4603      	mov	r3, r0
 8002644:	72fb      	strb	r3, [r7, #11]

  return status;
 8002646:	7afb      	ldrb	r3, [r7, #11]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40022000 	.word	0x40022000
 8002654:	40021000 	.word	0x40021000
 8002658:	08004930 	.word	0x08004930
 800265c:	20000000 	.word	0x20000000
 8002660:	20000004 	.word	0x20000004

08002664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800267c:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x34>
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d121      	bne.n	80026d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d11e      	bne.n	80026d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002698:	4b34      	ldr	r3, [pc, #208]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026a4:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 80026a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e005      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026c0:	4a2b      	ldr	r2, [pc, #172]	; (8002770 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10d      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_RCC_GetSysClockFreq+0x110>)
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	e004      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d134      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d003      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0xa6>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d003      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0xac>
 8002708:	e005      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_RCC_GetSysClockFreq+0x110>)
 800270c:	617b      	str	r3, [r7, #20]
      break;
 800270e:	e005      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_GetSysClockFreq+0x114>)
 8002712:	617b      	str	r3, [r7, #20]
      break;
 8002714:	e002      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	617b      	str	r3, [r7, #20]
      break;
 800271a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	3301      	adds	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	fb03 f202 	mul.w	r2, r3, r2
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	0e5b      	lsrs	r3, r3, #25
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	3301      	adds	r3, #1
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800275c:	69bb      	ldr	r3, [r7, #24]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	08004948 	.word	0x08004948
 8002774:	00f42400 	.word	0x00f42400
 8002778:	007a1200 	.word	0x007a1200

0800277c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_RCC_GetHCLKFreq+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000000 	.word	0x20000000

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002798:	f7ff fff0 	bl	800277c <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4904      	ldr	r1, [pc, #16]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08004940 	.word	0x08004940

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027c4:	f7ff ffda 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0adb      	lsrs	r3, r3, #11
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4904      	ldr	r1, [pc, #16]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08004940 	.word	0x08004940

080027ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027f8:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002804:	f7ff f9ee 	bl	8001be4 <HAL_PWREx_GetVoltageRange>
 8002808:	6178      	str	r0, [r7, #20]
 800280a:	e014      	b.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	4a24      	ldr	r2, [pc, #144]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	6593      	str	r3, [r2, #88]	; 0x58
 8002818:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002824:	f7ff f9de 	bl	8001be4 <HAL_PWREx_GetVoltageRange>
 8002828:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002834:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283c:	d10b      	bne.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d919      	bls.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2ba0      	cmp	r3, #160	; 0xa0
 8002848:	d902      	bls.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800284a:	2302      	movs	r3, #2
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	e013      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002850:	2301      	movs	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	e010      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d902      	bls.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800285c:	2303      	movs	r3, #3
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	e00a      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d102      	bne.n	800286e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002868:	2302      	movs	r3, #2
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e004      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b70      	cmp	r3, #112	; 0x70
 8002872:	d101      	bne.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002874:	2301      	movs	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 0207 	bic.w	r2, r3, #7
 8002880:	4909      	ldr	r1, [pc, #36]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40022000 	.word	0x40022000

080028ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b4:	2300      	movs	r3, #0
 80028b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028b8:	2300      	movs	r3, #0
 80028ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d041      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028d0:	d02a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028d6:	d824      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028e2:	d81e      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ec:	d010      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ee:	e018      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028f0:	4b86      	ldr	r3, [pc, #536]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a85      	ldr	r2, [pc, #532]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028fc:	e015      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3304      	adds	r3, #4
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fabb 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800290e:	e00c      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3320      	adds	r3, #32
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fba6 	bl	8003068 <RCCEx_PLLSAI2_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002920:	e003      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	74fb      	strb	r3, [r7, #19]
      break;
 8002926:	e000      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002930:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800293e:	4973      	ldr	r1, [pc, #460]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002946:	e001      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d041      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002960:	d02a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002962:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002966:	d824      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800296c:	d008      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800296e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002972:	d81e      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800297c:	d010      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800297e:	e018      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002980:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a61      	ldr	r2, [pc, #388]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800298c:	e015      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fa73 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800299e:	e00c      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3320      	adds	r3, #32
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fb5e 	bl	8003068 <RCCEx_PLLSAI2_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029b0:	e003      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	74fb      	strb	r3, [r7, #19]
      break;
 80029b6:	e000      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029c0:	4b52      	ldr	r3, [pc, #328]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ce:	494f      	ldr	r1, [pc, #316]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029d6:	e001      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a0 	beq.w	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	4a40      	ldr	r2, [pc, #256]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a10:	4b3e      	ldr	r3, [pc, #248]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3a      	ldr	r2, [pc, #232]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe fb60 	bl	80010f0 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a32:	e009      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe fb5c 	bl	80010f0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	74fb      	strb	r3, [r7, #19]
        break;
 8002a46:	e005      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a48:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d15c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01f      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d019      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a78:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a84:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aa4:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fb1b 	bl	80010f0 <HAL_GetTick>
 8002aba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe fb17 	bl	80010f0 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d902      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ad4:	e006      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ec      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afa:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b02:	e009      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	74bb      	strb	r3, [r7, #18]
 8002b08:	e006      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b18:	7c7b      	ldrb	r3, [r7, #17]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b9e      	ldr	r3, [pc, #632]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	4a9d      	ldr	r2, [pc, #628]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b36:	4b98      	ldr	r3, [pc, #608]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f023 0203 	bic.w	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	4994      	ldr	r1, [pc, #592]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b58:	4b8f      	ldr	r3, [pc, #572]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 020c 	bic.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	498c      	ldr	r1, [pc, #560]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b7a:	4b87      	ldr	r3, [pc, #540]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	4983      	ldr	r1, [pc, #524]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b9c:	4b7e      	ldr	r3, [pc, #504]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	497b      	ldr	r1, [pc, #492]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bbe:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bcc:	4972      	ldr	r1, [pc, #456]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002be0:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	496a      	ldr	r1, [pc, #424]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c02:	4b65      	ldr	r3, [pc, #404]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	4961      	ldr	r1, [pc, #388]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c24:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	4959      	ldr	r1, [pc, #356]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c46:	4b54      	ldr	r3, [pc, #336]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	4950      	ldr	r1, [pc, #320]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c68:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	4948      	ldr	r1, [pc, #288]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c8a:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	493f      	ldr	r1, [pc, #252]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d028      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cac:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cba:	4937      	ldr	r1, [pc, #220]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cca:	d106      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a31      	ldr	r2, [pc, #196]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd6:	60d3      	str	r3, [r2, #12]
 8002cd8:	e011      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f8c8 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d028      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d0a:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	491f      	ldr	r1, [pc, #124]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4a1a      	ldr	r2, [pc, #104]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d34:	60d3      	str	r3, [r2, #12]
 8002d36:	e011      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f899 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02b      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d86:	d109      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a02      	ldr	r2, [pc, #8]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d92:	60d3      	str	r3, [r2, #12]
 8002d94:	e014      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f867 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02f      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dda:	4928      	ldr	r1, [pc, #160]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dea:	d10d      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f844 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d014      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	74bb      	strb	r3, [r7, #18]
 8002e06:	e011      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3320      	adds	r3, #32
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f925 	bl	8003068 <RCCEx_PLLSAI2_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e46:	490d      	ldr	r1, [pc, #52]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6a:	4904      	ldr	r1, [pc, #16]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e72:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000

08002e80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e8e:	4b75      	ldr	r3, [pc, #468]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d018      	beq.n	8002ecc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e9a:	4b72      	ldr	r3, [pc, #456]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0203 	and.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d10d      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
       ||
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eb2:	4b6c      	ldr	r3, [pc, #432]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d047      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	e044      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d018      	beq.n	8002f06 <RCCEx_PLLSAI1_Config+0x86>
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d825      	bhi.n	8002f24 <RCCEx_PLLSAI1_Config+0xa4>
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d002      	beq.n	8002ee2 <RCCEx_PLLSAI1_Config+0x62>
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d009      	beq.n	8002ef4 <RCCEx_PLLSAI1_Config+0x74>
 8002ee0:	e020      	b.n	8002f24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ee2:	4b60      	ldr	r3, [pc, #384]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11d      	bne.n	8002f2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef2:	e01a      	b.n	8002f2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ef4:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f04:	e013      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f06:	4b57      	ldr	r3, [pc, #348]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f12:	4b54      	ldr	r3, [pc, #336]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f22:	e006      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      break;
 8002f28:	e004      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e002      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10d      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	4944      	ldr	r1, [pc, #272]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d17d      	bne.n	8003058 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f5c:	4b41      	ldr	r3, [pc, #260]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a40      	ldr	r2, [pc, #256]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f68:	f7fe f8c2 	bl	80010f0 <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f6e:	e009      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f70:	f7fe f8be 	bl	80010f0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d902      	bls.n	8002f84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	73fb      	strb	r3, [r7, #15]
        break;
 8002f82:	e005      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f84:	4b37      	ldr	r3, [pc, #220]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ef      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d160      	bne.n	8003058 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d111      	bne.n	8002fc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f9c:	4b31      	ldr	r3, [pc, #196]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6892      	ldr	r2, [r2, #8]
 8002fac:	0211      	lsls	r1, r2, #8
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68d2      	ldr	r2, [r2, #12]
 8002fb2:	0912      	lsrs	r2, r2, #4
 8002fb4:	0452      	lsls	r2, r2, #17
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	492a      	ldr	r1, [pc, #168]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	610b      	str	r3, [r1, #16]
 8002fbe:	e027      	b.n	8003010 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d112      	bne.n	8002fec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc6:	4b27      	ldr	r3, [pc, #156]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6892      	ldr	r2, [r2, #8]
 8002fd6:	0211      	lsls	r1, r2, #8
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6912      	ldr	r2, [r2, #16]
 8002fdc:	0852      	lsrs	r2, r2, #1
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	0552      	lsls	r2, r2, #21
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	491f      	ldr	r1, [pc, #124]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	610b      	str	r3, [r1, #16]
 8002fea:	e011      	b.n	8003010 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ff4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6892      	ldr	r2, [r2, #8]
 8002ffc:	0211      	lsls	r1, r2, #8
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6952      	ldr	r2, [r2, #20]
 8003002:	0852      	lsrs	r2, r2, #1
 8003004:	3a01      	subs	r2, #1
 8003006:	0652      	lsls	r2, r2, #25
 8003008:	430a      	orrs	r2, r1
 800300a:	4916      	ldr	r1, [pc, #88]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003010:	4b14      	ldr	r3, [pc, #80]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a13      	ldr	r2, [pc, #76]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800301a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe f868 	bl	80010f0 <HAL_GetTick>
 8003020:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003022:	e009      	b.n	8003038 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003024:	f7fe f864 	bl	80010f0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d902      	bls.n	8003038 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	73fb      	strb	r3, [r7, #15]
          break;
 8003036:	e005      	b.n	8003044 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ef      	beq.n	8003024 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	4904      	ldr	r1, [pc, #16]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000

08003068 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003076:	4b6a      	ldr	r3, [pc, #424]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d018      	beq.n	80030b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003082:	4b67      	ldr	r3, [pc, #412]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0203 	and.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d10d      	bne.n	80030ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
       ||
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800309a:	4b61      	ldr	r3, [pc, #388]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
       ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d047      	beq.n	800313e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
 80030b2:	e044      	b.n	800313e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d018      	beq.n	80030ee <RCCEx_PLLSAI2_Config+0x86>
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d825      	bhi.n	800310c <RCCEx_PLLSAI2_Config+0xa4>
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d002      	beq.n	80030ca <RCCEx_PLLSAI2_Config+0x62>
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d009      	beq.n	80030dc <RCCEx_PLLSAI2_Config+0x74>
 80030c8:	e020      	b.n	800310c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ca:	4b55      	ldr	r3, [pc, #340]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11d      	bne.n	8003112 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030da:	e01a      	b.n	8003112 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030dc:	4b50      	ldr	r3, [pc, #320]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d116      	bne.n	8003116 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e013      	b.n	8003116 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ee:	4b4c      	ldr	r3, [pc, #304]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030fa:	4b49      	ldr	r3, [pc, #292]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800310a:	e006      	b.n	800311a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e004      	b.n	800311c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003112:	bf00      	nop
 8003114:	e002      	b.n	800311c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800311a:	bf00      	nop
    }

    if(status == HAL_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10d      	bne.n	800313e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003122:	4b3f      	ldr	r3, [pc, #252]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	430b      	orrs	r3, r1
 8003138:	4939      	ldr	r1, [pc, #228]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313a:	4313      	orrs	r3, r2
 800313c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d167      	bne.n	8003214 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003144:	4b36      	ldr	r3, [pc, #216]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a35      	ldr	r2, [pc, #212]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fd ffce 	bl	80010f0 <HAL_GetTick>
 8003154:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003156:	e009      	b.n	800316c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003158:	f7fd ffca 	bl	80010f0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d902      	bls.n	800316c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	73fb      	strb	r3, [r7, #15]
        break;
 800316a:	e005      	b.n	8003178 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800316c:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ef      	bne.n	8003158 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d14a      	bne.n	8003214 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d111      	bne.n	80031a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003184:	4b26      	ldr	r3, [pc, #152]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800318c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6892      	ldr	r2, [r2, #8]
 8003194:	0211      	lsls	r1, r2, #8
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68d2      	ldr	r2, [r2, #12]
 800319a:	0912      	lsrs	r2, r2, #4
 800319c:	0452      	lsls	r2, r2, #17
 800319e:	430a      	orrs	r2, r1
 80031a0:	491f      	ldr	r1, [pc, #124]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	614b      	str	r3, [r1, #20]
 80031a6:	e011      	b.n	80031cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6892      	ldr	r2, [r2, #8]
 80031b8:	0211      	lsls	r1, r2, #8
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6912      	ldr	r2, [r2, #16]
 80031be:	0852      	lsrs	r2, r2, #1
 80031c0:	3a01      	subs	r2, #1
 80031c2:	0652      	lsls	r2, r2, #25
 80031c4:	430a      	orrs	r2, r1
 80031c6:	4916      	ldr	r1, [pc, #88]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a13      	ldr	r2, [pc, #76]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fd ff8a 	bl	80010f0 <HAL_GetTick>
 80031dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031de:	e009      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031e0:	f7fd ff86 	bl	80010f0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d902      	bls.n	80031f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	73fb      	strb	r3, [r7, #15]
          break;
 80031f2:	e005      	b.n	8003200 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ef      	beq.n	80031e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4904      	ldr	r1, [pc, #16]	; (8003220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003210:	4313      	orrs	r3, r2
 8003212:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e040      	b.n	80032b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fd74 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fee6 	bl	800403c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fc2b 	bl	8003acc <UART_SetConfig>
 8003276:	4603      	mov	r3, r0
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e01b      	b.n	80032b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800328e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800329e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 ff65 	bl	8004180 <UART_CheckIdleState>
 80032b6:	4603      	mov	r3, r0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d178      	bne.n	80033ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_UART_Transmit+0x24>
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e071      	b.n	80033cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2221      	movs	r2, #33	; 0x21
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032f6:	f7fd fefb 	bl	80010f0 <HAL_GetTick>
 80032fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	88fa      	ldrh	r2, [r7, #6]
 8003300:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003314:	d108      	bne.n	8003328 <HAL_UART_Transmit+0x68>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e003      	b.n	8003330 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003330:	e030      	b.n	8003394 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 ffc7 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e03c      	b.n	80033cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10b      	bne.n	8003370 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003364:	b292      	uxth	r2, r2
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	3302      	adds	r3, #2
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e008      	b.n	8003382 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b292      	uxth	r2, r2
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	3301      	adds	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1c8      	bne.n	8003332 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2200      	movs	r2, #0
 80033a8:	2140      	movs	r1, #64	; 0x40
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 ff90 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e005      	b.n	80033cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e000      	b.n	80033cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80033ca:	2302      	movs	r3, #2
  }
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d137      	bne.n	800345c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_UART_Receive_DMA+0x24>
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e030      	b.n	800345e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_UART_Receive_DMA+0x94>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d01f      	beq.n	800344c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d018      	beq.n	800344c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	613b      	str	r3, [r7, #16]
   return(result);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	623b      	str	r3, [r7, #32]
 800343a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	69f9      	ldr	r1, [r7, #28]
 800343e:	6a3a      	ldr	r2, [r7, #32]
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	61bb      	str	r3, [r7, #24]
   return(result);
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e6      	bne.n	800341a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	461a      	mov	r2, r3
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 ffaa 	bl	80043ac <UART_Start_Receive_DMA>
 8003458:	4603      	mov	r3, r0
 800345a:	e000      	b.n	800345e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3728      	adds	r7, #40	; 0x28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40008000 	.word	0x40008000

0800346c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0ba      	sub	sp, #232	; 0xe8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003492:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003496:	f640 030f 	movw	r3, #2063	; 0x80f
 800349a:	4013      	ands	r3, r2
 800349c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80034a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d115      	bne.n	80034d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00f      	beq.n	80034d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 82ca 	beq.w	8003a5e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
      }
      return;
 80034d2:	e2c4      	b.n	8003a5e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80034d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8117 	beq.w	800370c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034ee:	4b85      	ldr	r3, [pc, #532]	; (8003704 <HAL_UART_IRQHandler+0x298>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 810a 	beq.w	800370c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d011      	beq.n	8003528 <HAL_UART_IRQHandler+0xbc>
 8003504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2201      	movs	r2, #1
 8003516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d011      	beq.n	8003558 <HAL_UART_IRQHandler+0xec>
 8003534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2202      	movs	r2, #2
 8003546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354e:	f043 0204 	orr.w	r2, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d011      	beq.n	8003588 <HAL_UART_IRQHandler+0x11c>
 8003564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2204      	movs	r2, #4
 8003576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d017      	beq.n	80035c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2208      	movs	r2, #8
 80035b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ba:	f043 0208 	orr.w	r2, r3, #8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d012      	beq.n	80035f6 <HAL_UART_IRQHandler+0x18a>
 80035d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00c      	beq.n	80035f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8230 	beq.w	8003a62 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800360e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003630:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d005      	beq.n	800364e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003646:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800364a:	2b00      	cmp	r3, #0
 800364c:	d04f      	beq.n	80036ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 ff72 	bl	8004538 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d141      	bne.n	80036e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3308      	adds	r3, #8
 8003668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800367c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800368e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800369a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1d9      	bne.n	8003662 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d013      	beq.n	80036de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <HAL_UART_IRQHandler+0x29c>)
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd ffac 	bl	8001620 <HAL_DMA_Abort_IT>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d017      	beq.n	80036fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036d8:	4610      	mov	r0, r2
 80036da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e00f      	b.n	80036fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9de 	bl	8003aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e00b      	b.n	80036fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f9da 	bl	8003aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e007      	b.n	80036fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9d6 	bl	8003aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80036fc:	e1b1      	b.n	8003a62 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fe:	bf00      	nop
    return;
 8003700:	e1af      	b.n	8003a62 <HAL_UART_IRQHandler+0x5f6>
 8003702:	bf00      	nop
 8003704:	04000120 	.word	0x04000120
 8003708:	080047e9 	.word	0x080047e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 816a 	bne.w	80039ea <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8163 	beq.w	80039ea <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 815c 	beq.w	80039ea <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2210      	movs	r2, #16
 8003738:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	f040 80d4 	bne.w	80038f2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003756:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80ad 	beq.w	80038ba <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800376a:	429a      	cmp	r2, r3
 800376c:	f080 80a5 	bcs.w	80038ba <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003776:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 8086 	bne.w	8003898 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1da      	bne.n	800378c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3308      	adds	r3, #8
 80037dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3308      	adds	r3, #8
 80037f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800380c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e1      	bne.n	80037d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003838:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800383c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e3      	bne.n	8003812 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003868:	f023 0310 	bic.w	r3, r3, #16
 800386c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800387a:	65bb      	str	r3, [r7, #88]	; 0x58
 800387c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e4      	bne.n	8003858 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fe86 	bl	80015a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	4619      	mov	r1, r3
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f8fe 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80038b8:	e0d5      	b.n	8003a66 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038c4:	429a      	cmp	r2, r3
 80038c6:	f040 80ce 	bne.w	8003a66 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	f040 80c5 	bne.w	8003a66 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8e2 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
      return;
 80038f0:	e0b9      	b.n	8003a66 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80ab 	beq.w	8003a6a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a6 	beq.w	8003a6a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003940:	647b      	str	r3, [r7, #68]	; 0x44
 8003942:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800394e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e4      	bne.n	800391e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	623b      	str	r3, [r7, #32]
   return(result);
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003978:	633a      	str	r2, [r7, #48]	; 0x30
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800397e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e3      	bne.n	8003954 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f023 0310 	bic.w	r3, r3, #16
 80039b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	617b      	str	r3, [r7, #20]
   return(result);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e4      	bne.n	80039a0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f866 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039e8:	e03f      	b.n	8003a6a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00e      	beq.n	8003a14 <HAL_UART_IRQHandler+0x5a8>
 80039f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 ff2b 	bl	8004868 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a12:	e02d      	b.n	8003a70 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01c      	beq.n	8003a6e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
    }
    return;
 8003a3c:	e017      	b.n	8003a6e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d012      	beq.n	8003a70 <HAL_UART_IRQHandler+0x604>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00c      	beq.n	8003a70 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fedc 	bl	8004814 <UART_EndTransmit_IT>
    return;
 8003a5c:	e008      	b.n	8003a70 <HAL_UART_IRQHandler+0x604>
      return;
 8003a5e:	bf00      	nop
 8003a60:	e006      	b.n	8003a70 <HAL_UART_IRQHandler+0x604>
    return;
 8003a62:	bf00      	nop
 8003a64:	e004      	b.n	8003a70 <HAL_UART_IRQHandler+0x604>
      return;
 8003a66:	bf00      	nop
 8003a68:	e002      	b.n	8003a70 <HAL_UART_IRQHandler+0x604>
      return;
 8003a6a:	bf00      	nop
 8003a6c:	e000      	b.n	8003a70 <HAL_UART_IRQHandler+0x604>
    return;
 8003a6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003a70:	37e8      	adds	r7, #232	; 0xe8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop

08003a78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad0:	b08a      	sub	sp, #40	; 0x28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4ba4      	ldr	r3, [pc, #656]	; (8003d8c <UART_SetConfig+0x2c0>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a99      	ldr	r2, [pc, #612]	; (8003d90 <UART_SetConfig+0x2c4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	4313      	orrs	r3, r2
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a90      	ldr	r2, [pc, #576]	; (8003d94 <UART_SetConfig+0x2c8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d126      	bne.n	8003ba4 <UART_SetConfig+0xd8>
 8003b56:	4b90      	ldr	r3, [pc, #576]	; (8003d98 <UART_SetConfig+0x2cc>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d81b      	bhi.n	8003b9c <UART_SetConfig+0xd0>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0xa0>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b8d 	.word	0x08003b8d
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b95 	.word	0x08003b95
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b82:	e116      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003b84:	2302      	movs	r3, #2
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e112      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e10e      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003b94:	2308      	movs	r3, #8
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	e10a      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e106      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a7c      	ldr	r2, [pc, #496]	; (8003d9c <UART_SetConfig+0x2d0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d138      	bne.n	8003c20 <UART_SetConfig+0x154>
 8003bae:	4b7a      	ldr	r3, [pc, #488]	; (8003d98 <UART_SetConfig+0x2cc>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d82d      	bhi.n	8003c18 <UART_SetConfig+0x14c>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0xf8>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003c19 	.word	0x08003c19
 8003bcc:	08003c19 	.word	0x08003c19
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c09 	.word	0x08003c09
 8003bd8:	08003c19 	.word	0x08003c19
 8003bdc:	08003c19 	.word	0x08003c19
 8003be0:	08003c19 	.word	0x08003c19
 8003be4:	08003c01 	.word	0x08003c01
 8003be8:	08003c19 	.word	0x08003c19
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c11 	.word	0x08003c11
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfe:	e0d8      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c00:	2302      	movs	r3, #2
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e0d4      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0e:	e0d0      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c10:	2308      	movs	r3, #8
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e0cc      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e0c8      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a5e      	ldr	r2, [pc, #376]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d125      	bne.n	8003c76 <UART_SetConfig+0x1aa>
 8003c2a:	4b5b      	ldr	r3, [pc, #364]	; (8003d98 <UART_SetConfig+0x2cc>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c34:	2b30      	cmp	r3, #48	; 0x30
 8003c36:	d016      	beq.n	8003c66 <UART_SetConfig+0x19a>
 8003c38:	2b30      	cmp	r3, #48	; 0x30
 8003c3a:	d818      	bhi.n	8003c6e <UART_SetConfig+0x1a2>
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d00a      	beq.n	8003c56 <UART_SetConfig+0x18a>
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d814      	bhi.n	8003c6e <UART_SetConfig+0x1a2>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <UART_SetConfig+0x182>
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d008      	beq.n	8003c5e <UART_SetConfig+0x192>
 8003c4c:	e00f      	b.n	8003c6e <UART_SetConfig+0x1a2>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c54:	e0ad      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c56:	2302      	movs	r3, #2
 8003c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5c:	e0a9      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c5e:	2304      	movs	r3, #4
 8003c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c64:	e0a5      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c66:	2308      	movs	r3, #8
 8003c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6c:	e0a1      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c6e:	2310      	movs	r3, #16
 8003c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c74:	e09d      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a4a      	ldr	r2, [pc, #296]	; (8003da4 <UART_SetConfig+0x2d8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d125      	bne.n	8003ccc <UART_SetConfig+0x200>
 8003c80:	4b45      	ldr	r3, [pc, #276]	; (8003d98 <UART_SetConfig+0x2cc>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c8c:	d016      	beq.n	8003cbc <UART_SetConfig+0x1f0>
 8003c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c90:	d818      	bhi.n	8003cc4 <UART_SetConfig+0x1f8>
 8003c92:	2b80      	cmp	r3, #128	; 0x80
 8003c94:	d00a      	beq.n	8003cac <UART_SetConfig+0x1e0>
 8003c96:	2b80      	cmp	r3, #128	; 0x80
 8003c98:	d814      	bhi.n	8003cc4 <UART_SetConfig+0x1f8>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <UART_SetConfig+0x1d8>
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d008      	beq.n	8003cb4 <UART_SetConfig+0x1e8>
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x1f8>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003caa:	e082      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb2:	e07e      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cba:	e07a      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc2:	e076      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cca:	e072      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a35      	ldr	r2, [pc, #212]	; (8003da8 <UART_SetConfig+0x2dc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d12a      	bne.n	8003d2c <UART_SetConfig+0x260>
 8003cd6:	4b30      	ldr	r3, [pc, #192]	; (8003d98 <UART_SetConfig+0x2cc>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ce4:	d01a      	beq.n	8003d1c <UART_SetConfig+0x250>
 8003ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cea:	d81b      	bhi.n	8003d24 <UART_SetConfig+0x258>
 8003cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf0:	d00c      	beq.n	8003d0c <UART_SetConfig+0x240>
 8003cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf6:	d815      	bhi.n	8003d24 <UART_SetConfig+0x258>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <UART_SetConfig+0x238>
 8003cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d00:	d008      	beq.n	8003d14 <UART_SetConfig+0x248>
 8003d02:	e00f      	b.n	8003d24 <UART_SetConfig+0x258>
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0a:	e052      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d12:	e04e      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d14:	2304      	movs	r3, #4
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e04a      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	e046      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d24:	2310      	movs	r3, #16
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2a:	e042      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a17      	ldr	r2, [pc, #92]	; (8003d90 <UART_SetConfig+0x2c4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d13a      	bne.n	8003dac <UART_SetConfig+0x2e0>
 8003d36:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <UART_SetConfig+0x2cc>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d44:	d01a      	beq.n	8003d7c <UART_SetConfig+0x2b0>
 8003d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d4a:	d81b      	bhi.n	8003d84 <UART_SetConfig+0x2b8>
 8003d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d50:	d00c      	beq.n	8003d6c <UART_SetConfig+0x2a0>
 8003d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d56:	d815      	bhi.n	8003d84 <UART_SetConfig+0x2b8>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <UART_SetConfig+0x298>
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d60:	d008      	beq.n	8003d74 <UART_SetConfig+0x2a8>
 8003d62:	e00f      	b.n	8003d84 <UART_SetConfig+0x2b8>
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6a:	e022      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e01e      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d74:	2304      	movs	r3, #4
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e01a      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e016      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d84:	2310      	movs	r3, #16
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e012      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d8c:	efff69f3 	.word	0xefff69f3
 8003d90:	40008000 	.word	0x40008000
 8003d94:	40013800 	.word	0x40013800
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40004400 	.word	0x40004400
 8003da0:	40004800 	.word	0x40004800
 8003da4:	40004c00 	.word	0x40004c00
 8003da8:	40005000 	.word	0x40005000
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a9f      	ldr	r2, [pc, #636]	; (8004034 <UART_SetConfig+0x568>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d17a      	bne.n	8003eb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d824      	bhi.n	8003e0e <UART_SetConfig+0x342>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0x300>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003e0f 	.word	0x08003e0f
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e0f 	.word	0x08003e0f
 8003ddc:	08003dff 	.word	0x08003dff
 8003de0:	08003e0f 	.word	0x08003e0f
 8003de4:	08003e0f 	.word	0x08003e0f
 8003de8:	08003e0f 	.word	0x08003e0f
 8003dec:	08003e07 	.word	0x08003e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7fe fcd0 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8003df4:	61f8      	str	r0, [r7, #28]
        break;
 8003df6:	e010      	b.n	8003e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df8:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <UART_SetConfig+0x56c>)
 8003dfa:	61fb      	str	r3, [r7, #28]
        break;
 8003dfc:	e00d      	b.n	8003e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfe:	f7fe fc31 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8003e02:	61f8      	str	r0, [r7, #28]
        break;
 8003e04:	e009      	b.n	8003e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e0a:	61fb      	str	r3, [r7, #28]
        break;
 8003e0c:	e005      	b.n	8003e1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80fb 	beq.w	8004018 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d305      	bcc.n	8003e3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d903      	bls.n	8003e46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e44:	e0e8      	b.n	8004018 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	022b      	lsls	r3, r5, #8
 8003e58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e5c:	0222      	lsls	r2, r4, #8
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	6849      	ldr	r1, [r1, #4]
 8003e62:	0849      	lsrs	r1, r1, #1
 8003e64:	2000      	movs	r0, #0
 8003e66:	4688      	mov	r8, r1
 8003e68:	4681      	mov	r9, r0
 8003e6a:	eb12 0a08 	adds.w	sl, r2, r8
 8003e6e:	eb43 0b09 	adc.w	fp, r3, r9
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e80:	4650      	mov	r0, sl
 8003e82:	4659      	mov	r1, fp
 8003e84:	f7fc fb7c 	bl	8000580 <__aeabi_uldivmod>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e96:	d308      	bcc.n	8003eaa <UART_SetConfig+0x3de>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e9e:	d204      	bcs.n	8003eaa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e0b6      	b.n	8004018 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003eb0:	e0b2      	b.n	8004018 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eba:	d15e      	bne.n	8003f7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d828      	bhi.n	8003f16 <UART_SetConfig+0x44a>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <UART_SetConfig+0x400>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ef9 	.word	0x08003ef9
 8003ed4:	08003f01 	.word	0x08003f01
 8003ed8:	08003f17 	.word	0x08003f17
 8003edc:	08003f07 	.word	0x08003f07
 8003ee0:	08003f17 	.word	0x08003f17
 8003ee4:	08003f17 	.word	0x08003f17
 8003ee8:	08003f17 	.word	0x08003f17
 8003eec:	08003f0f 	.word	0x08003f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7fe fc50 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	61f8      	str	r0, [r7, #28]
        break;
 8003ef6:	e014      	b.n	8003f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef8:	f7fe fc62 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8003efc:	61f8      	str	r0, [r7, #28]
        break;
 8003efe:	e010      	b.n	8003f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f00:	4b4d      	ldr	r3, [pc, #308]	; (8004038 <UART_SetConfig+0x56c>)
 8003f02:	61fb      	str	r3, [r7, #28]
        break;
 8003f04:	e00d      	b.n	8003f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f06:	f7fe fbad 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8003f0a:	61f8      	str	r0, [r7, #28]
        break;
 8003f0c:	e009      	b.n	8003f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f12:	61fb      	str	r3, [r7, #28]
        break;
 8003f14:	e005      	b.n	8003f22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d077      	beq.n	8004018 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	005a      	lsls	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b0f      	cmp	r3, #15
 8003f42:	d916      	bls.n	8003f72 <UART_SetConfig+0x4a6>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4a:	d212      	bcs.n	8003f72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f023 030f 	bic.w	r3, r3, #15
 8003f54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	8afb      	ldrh	r3, [r7, #22]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	8afa      	ldrh	r2, [r7, #22]
 8003f6e:	60da      	str	r2, [r3, #12]
 8003f70:	e052      	b.n	8004018 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f78:	e04e      	b.n	8004018 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d827      	bhi.n	8003fd2 <UART_SetConfig+0x506>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <UART_SetConfig+0x4bc>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003fb5 	.word	0x08003fb5
 8003f90:	08003fbd 	.word	0x08003fbd
 8003f94:	08003fd3 	.word	0x08003fd3
 8003f98:	08003fc3 	.word	0x08003fc3
 8003f9c:	08003fd3 	.word	0x08003fd3
 8003fa0:	08003fd3 	.word	0x08003fd3
 8003fa4:	08003fd3 	.word	0x08003fd3
 8003fa8:	08003fcb 	.word	0x08003fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7fe fbf2 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8003fb0:	61f8      	str	r0, [r7, #28]
        break;
 8003fb2:	e014      	b.n	8003fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb4:	f7fe fc04 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8003fb8:	61f8      	str	r0, [r7, #28]
        break;
 8003fba:	e010      	b.n	8003fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <UART_SetConfig+0x56c>)
 8003fbe:	61fb      	str	r3, [r7, #28]
        break;
 8003fc0:	e00d      	b.n	8003fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc2:	f7fe fb4f 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8003fc6:	61f8      	str	r0, [r7, #28]
        break;
 8003fc8:	e009      	b.n	8003fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fce:	61fb      	str	r3, [r7, #28]
        break;
 8003fd0:	e005      	b.n	8003fde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d019      	beq.n	8004018 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	085a      	lsrs	r2, r3, #1
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	441a      	add	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	d909      	bls.n	8004012 <UART_SetConfig+0x546>
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004004:	d205      	bcs.n	8004012 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	e002      	b.n	8004018 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004024:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004032:	bf00      	nop
 8004034:	40008000 	.word	0x40008000
 8004038:	00f42400 	.word	0x00f42400

0800403c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01a      	beq.n	8004152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413a:	d10a      	bne.n	8004152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b098      	sub	sp, #96	; 0x60
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004190:	f7fc ffae 	bl	80010f0 <HAL_GetTick>
 8004194:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d12e      	bne.n	8004202 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ac:	2200      	movs	r2, #0
 80041ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f88c 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d021      	beq.n	8004202 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d2:	653b      	str	r3, [r7, #80]	; 0x50
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041dc:	647b      	str	r3, [r7, #68]	; 0x44
 80041de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e6      	bne.n	80041be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e062      	b.n	80042c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b04      	cmp	r3, #4
 800420e:	d149      	bne.n	80042a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004218:	2200      	movs	r2, #0
 800421a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f856 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d03c      	beq.n	80042a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	623b      	str	r3, [r7, #32]
   return(result);
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
 800424a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800424e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60fb      	str	r3, [r7, #12]
   return(result);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	64bb      	str	r3, [r7, #72]	; 0x48
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800427c:	61fa      	str	r2, [r7, #28]
 800427e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	69b9      	ldr	r1, [r7, #24]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	617b      	str	r3, [r7, #20]
   return(result);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e011      	b.n	80042c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3758      	adds	r7, #88	; 0x58
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e0:	e04f      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d04b      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fc ff01 	bl	80010f0 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <UART_WaitOnFlagUntilTimeout+0x30>
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e04e      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d037      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b80      	cmp	r3, #128	; 0x80
 8004316:	d034      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d031      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b08      	cmp	r3, #8
 800432a:	d110      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2208      	movs	r2, #8
 8004332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f8ff 	bl	8004538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2208      	movs	r2, #8
 800433e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e029      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435c:	d111      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f8e5 	bl	8004538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e00f      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4013      	ands	r3, r2
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	429a      	cmp	r2, r3
 8004390:	bf0c      	ite	eq
 8004392:	2301      	moveq	r3, #1
 8004394:	2300      	movne	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	429a      	cmp	r2, r3
 800439e:	d0a0      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b096      	sub	sp, #88	; 0x58
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2222      	movs	r2, #34	; 0x22
 80043d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d028      	beq.n	8004432 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e4:	4a3e      	ldr	r2, [pc, #248]	; (80044e0 <UART_Start_Receive_DMA+0x134>)
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ec:	4a3d      	ldr	r2, [pc, #244]	; (80044e4 <UART_Start_Receive_DMA+0x138>)
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f4:	4a3c      	ldr	r2, [pc, #240]	; (80044e8 <UART_Start_Receive_DMA+0x13c>)
 80043f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fc:	2200      	movs	r2, #0
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3324      	adds	r3, #36	; 0x24
 800440a:	4619      	mov	r1, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	461a      	mov	r2, r3
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	f7fd f866 	bl	80014e4 <HAL_DMA_Start_IT>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2210      	movs	r2, #16
 8004422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e051      	b.n	80044d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	657b      	str	r3, [r7, #84]	; 0x54
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
 800445a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800445e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e6      	bne.n	800443a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3308      	adds	r3, #8
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	653b      	str	r3, [r7, #80]	; 0x50
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3308      	adds	r3, #8
 800448a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800448c:	637a      	str	r2, [r7, #52]	; 0x34
 800448e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e5      	bne.n	800446c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	613b      	str	r3, [r7, #16]
   return(result);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c0:	623a      	str	r2, [r7, #32]
 80044c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	69f9      	ldr	r1, [r7, #28]
 80044c6:	6a3a      	ldr	r2, [r7, #32]
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3758      	adds	r7, #88	; 0x58
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	08004601 	.word	0x08004601
 80044e4:	0800472d 	.word	0x0800472d
 80044e8:	0800476b 	.word	0x0800476b

080044ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	; 0x24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	60bb      	str	r3, [r7, #8]
   return(result);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6979      	ldr	r1, [r7, #20]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	613b      	str	r3, [r7, #16]
   return(result);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e6      	bne.n	80044f4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800452c:	bf00      	nop
 800452e:	3724      	adds	r7, #36	; 0x24
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004538:	b480      	push	{r7}
 800453a:	b095      	sub	sp, #84	; 0x54
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004554:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455e:	643b      	str	r3, [r7, #64]	; 0x40
 8004560:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e6      	bne.n	8004540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3308      	adds	r3, #8
 8004578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	61fb      	str	r3, [r7, #28]
   return(result);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	64bb      	str	r3, [r7, #72]	; 0x48
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e5      	bne.n	8004572 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d118      	bne.n	80045e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f023 0310 	bic.w	r3, r3, #16
 80045c2:	647b      	str	r3, [r7, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6979      	ldr	r1, [r7, #20]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	613b      	str	r3, [r7, #16]
   return(result);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e6      	bne.n	80045ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045f4:	bf00      	nop
 80045f6:	3754      	adds	r7, #84	; 0x54
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b09c      	sub	sp, #112	; 0x70
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d171      	bne.n	8004700 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800461c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461e:	2200      	movs	r2, #0
 8004620:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	66bb      	str	r3, [r7, #104]	; 0x68
 800463a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004642:	65bb      	str	r3, [r7, #88]	; 0x58
 8004644:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e6      	bne.n	8004624 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3308      	adds	r3, #8
 800465c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	667b      	str	r3, [r7, #100]	; 0x64
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3308      	adds	r3, #8
 8004674:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004676:	647a      	str	r2, [r7, #68]	; 0x44
 8004678:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800467c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e5      	bne.n	8004656 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3308      	adds	r3, #8
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	623b      	str	r3, [r7, #32]
   return(result);
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a0:	663b      	str	r3, [r7, #96]	; 0x60
 80046a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3308      	adds	r3, #8
 80046a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046aa:	633a      	str	r2, [r7, #48]	; 0x30
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e5      	bne.n	800468a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	2220      	movs	r2, #32
 80046c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d118      	bne.n	8004700 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	60fb      	str	r3, [r7, #12]
   return(result);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0310 	bic.w	r3, r3, #16
 80046e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	69b9      	ldr	r1, [r7, #24]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	617b      	str	r3, [r7, #20]
   return(result);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e6      	bne.n	80046ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004702:	2200      	movs	r2, #0
 8004704:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470a:	2b01      	cmp	r3, #1
 800470c:	d107      	bne.n	800471e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800470e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004710:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004714:	4619      	mov	r1, r3
 8004716:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004718:	f7ff f9cc 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800471c:	e002      	b.n	8004724 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800471e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004720:	f7fc fbe0 	bl	8000ee4 <HAL_UART_RxCpltCallback>
}
 8004724:	bf00      	nop
 8004726:	3770      	adds	r7, #112	; 0x70
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	2b01      	cmp	r3, #1
 8004746:	d109      	bne.n	800475c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	b29b      	uxth	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff f9ad 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800475a:	e002      	b.n	8004762 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff f995 	bl	8003a8c <HAL_UART_RxHalfCpltCallback>
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b086      	sub	sp, #24
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004784:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004790:	2b80      	cmp	r3, #128	; 0x80
 8004792:	d109      	bne.n	80047a8 <UART_DMAError+0x3e>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b21      	cmp	r3, #33	; 0x21
 8004798:	d106      	bne.n	80047a8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f7ff fea2 	bl	80044ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d109      	bne.n	80047ca <UART_DMAError+0x60>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b22      	cmp	r3, #34	; 0x22
 80047ba:	d106      	bne.n	80047ca <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80047c4:	6978      	ldr	r0, [r7, #20]
 80047c6:	f7ff feb7 	bl	8004538 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d0:	f043 0210 	orr.w	r2, r3, #16
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047da:	6978      	ldr	r0, [r7, #20]
 80047dc:	f7ff f960 	bl	8003aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e0:	bf00      	nop
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff f94a 	bl	8003aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	60bb      	str	r3, [r7, #8]
   return(result);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004830:	61fb      	str	r3, [r7, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6979      	ldr	r1, [r7, #20]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	613b      	str	r3, [r7, #16]
   return(result);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e6      	bne.n	800481c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff f90c 	bl	8003a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004860:	bf00      	nop
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <memset>:
 800487c:	4402      	add	r2, r0
 800487e:	4603      	mov	r3, r0
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <memset+0xa>
 8004884:	4770      	bx	lr
 8004886:	f803 1b01 	strb.w	r1, [r3], #1
 800488a:	e7f9      	b.n	8004880 <memset+0x4>

0800488c <__libc_init_array>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	4d0d      	ldr	r5, [pc, #52]	; (80048c4 <__libc_init_array+0x38>)
 8004890:	4c0d      	ldr	r4, [pc, #52]	; (80048c8 <__libc_init_array+0x3c>)
 8004892:	1b64      	subs	r4, r4, r5
 8004894:	10a4      	asrs	r4, r4, #2
 8004896:	2600      	movs	r6, #0
 8004898:	42a6      	cmp	r6, r4
 800489a:	d109      	bne.n	80048b0 <__libc_init_array+0x24>
 800489c:	4d0b      	ldr	r5, [pc, #44]	; (80048cc <__libc_init_array+0x40>)
 800489e:	4c0c      	ldr	r4, [pc, #48]	; (80048d0 <__libc_init_array+0x44>)
 80048a0:	f000 f826 	bl	80048f0 <_init>
 80048a4:	1b64      	subs	r4, r4, r5
 80048a6:	10a4      	asrs	r4, r4, #2
 80048a8:	2600      	movs	r6, #0
 80048aa:	42a6      	cmp	r6, r4
 80048ac:	d105      	bne.n	80048ba <__libc_init_array+0x2e>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b4:	4798      	blx	r3
 80048b6:	3601      	adds	r6, #1
 80048b8:	e7ee      	b.n	8004898 <__libc_init_array+0xc>
 80048ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80048be:	4798      	blx	r3
 80048c0:	3601      	adds	r6, #1
 80048c2:	e7f2      	b.n	80048aa <__libc_init_array+0x1e>
 80048c4:	08004980 	.word	0x08004980
 80048c8:	08004980 	.word	0x08004980
 80048cc:	08004980 	.word	0x08004980
 80048d0:	08004984 	.word	0x08004984

080048d4 <memcpy>:
 80048d4:	440a      	add	r2, r1
 80048d6:	4291      	cmp	r1, r2
 80048d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048dc:	d100      	bne.n	80048e0 <memcpy+0xc>
 80048de:	4770      	bx	lr
 80048e0:	b510      	push	{r4, lr}
 80048e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ea:	4291      	cmp	r1, r2
 80048ec:	d1f9      	bne.n	80048e2 <memcpy+0xe>
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <_init>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr

080048fc <_fini>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr
