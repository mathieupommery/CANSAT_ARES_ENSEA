
code_propre_cansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f584  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  0800f768  0800f768  00010768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010520  08010520  000121e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010520  08010520  00011520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010528  08010528  000121e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010528  08010528  00011528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801052c  0801052c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08010530  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000113c  200001e8  08010714  000121e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001324  08010714  00012324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e19  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d9f  00000000  00000000  0003602d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  0003add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ac  00000000  00000000  0003c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024686  00000000  00000000  0003df8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f0a  00000000  00000000  00062612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e21a4  00000000  00000000  0008751c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001696c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a80  00000000  00000000  00169704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00172184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f74c 	.word	0x0800f74c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800f74c 	.word	0x0800f74c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff33 	bl	8000b2c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fca9 	bl	8000648 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc2a 	bl	8000554 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fca0 	bl	8000648 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fae2 	bl	80002d8 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800102a:	2354      	movs	r3, #84	@ 0x54
 800102c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2210      	movs	r2, #16
 8001040:	21d6      	movs	r1, #214	@ 0xd6
 8001042:	4838      	ldr	r0, [pc, #224]	@ (8001124 <Init_HighPerf_Mode_6_axis+0x104>)
 8001044:	f005 fd38 	bl	8006ab8 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 8001048:	234c      	movs	r3, #76	@ 0x4c
 800104a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2211      	movs	r2, #17
 800105e:	21d6      	movs	r1, #214	@ 0xd6
 8001060:	4830      	ldr	r0, [pc, #192]	@ (8001124 <Init_HighPerf_Mode_6_axis+0x104>)
 8001062:	f005 fd29 	bl	8006ab8 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2301      	movs	r3, #1
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	2212      	movs	r2, #18
 800107c:	21d6      	movs	r1, #214	@ 0xd6
 800107e:	4829      	ldr	r0, [pc, #164]	@ (8001124 <Init_HighPerf_Mode_6_axis+0x104>)
 8001080:	f005 fd1a 	bl	8006ab8 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 8001084:	2300      	movs	r3, #0
 8001086:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	2215      	movs	r2, #21
 800109a:	21d6      	movs	r1, #214	@ 0xd6
 800109c:	4821      	ldr	r0, [pc, #132]	@ (8001124 <Init_HighPerf_Mode_6_axis+0x104>)
 800109e:	f005 fd0b 	bl	8006ab8 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2301      	movs	r3, #1
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	2216      	movs	r2, #22
 80010b8:	21d6      	movs	r1, #214	@ 0xd6
 80010ba:	481a      	ldr	r0, [pc, #104]	@ (8001124 <Init_HighPerf_Mode_6_axis+0x104>)
 80010bc:	f005 fcfc 	bl	8006ab8 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	2301      	movs	r3, #1
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2217      	movs	r2, #23
 80010d6:	21d6      	movs	r1, #214	@ 0xd6
 80010d8:	4812      	ldr	r0, [pc, #72]	@ (8001124 <Init_HighPerf_Mode_6_axis+0x104>)
 80010da:	f005 fced 	bl	8006ab8 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	1dbb      	adds	r3, r7, #6
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	221e      	movs	r2, #30
 80010f4:	21d6      	movs	r1, #214	@ 0xd6
 80010f6:	480b      	ldr	r0, [pc, #44]	@ (8001124 <Init_HighPerf_Mode_6_axis+0x104>)
 80010f8:	f005 fdf2 	bl	8006ce0 <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 8001106:	4808      	ldr	r0, [pc, #32]	@ (8001128 <Init_HighPerf_Mode_6_axis+0x108>)
 8001108:	f00c f85e 	bl	800d1c8 <puts>
        }
        if (status & 0x02) {
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <Init_HighPerf_Mode_6_axis+0x10c>)
 8001118:	f00c f856 	bl	800d1c8 <puts>
        }

}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000340 	.word	0x20000340
 8001128:	0800f7a4 	.word	0x0800f7a4
 800112c:	0800f7d8 	.word	0x0800f7d8

08001130 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	@ 0x38
 8001134:	af04      	add	r7, sp, #16
 8001136:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	2301      	movs	r3, #1
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f107 030b 	add.w	r3, r7, #11
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	221e      	movs	r2, #30
 800114c:	21d6      	movs	r1, #214	@ 0xd6
 800114e:	486e      	ldr	r0, [pc, #440]	@ (8001308 <Read_sensor_data+0x1d8>)
 8001150:	f005 fdc6 	bl	8006ce0 <HAL_I2C_Mem_Read>
 8001154:	4603      	mov	r3, r0
 8001156:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 8001158:	7ffb      	ldrb	r3, [r7, #31]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <Read_sensor_data+0x32>
 800115e:	7ffb      	ldrb	r3, [r7, #31]
 8001160:	e0ce      	b.n	8001300 <Read_sensor_data+0x1d0>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <Read_sensor_data+0x46>
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0c2      	b.n	8001300 <Read_sensor_data+0x1d0>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
 800117e:	e044      	b.n	800120a <Read_sensor_data+0xda>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	3311      	adds	r3, #17
 8001184:	b2db      	uxtb	r3, r3
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 800118a:	7f3b      	ldrb	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001190:	7f3b      	ldrb	r3, [r7, #28]
 8001192:	b29a      	uxth	r2, r3
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030a 	add.w	r3, r7, #10
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	21d6      	movs	r1, #214	@ 0xd6
 80011a8:	4857      	ldr	r0, [pc, #348]	@ (8001308 <Read_sensor_data+0x1d8>)
 80011aa:	f005 fd99 	bl	8006ce0 <HAL_I2C_Mem_Read>
 80011ae:	4603      	mov	r3, r0
 80011b0:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <Read_sensor_data+0x8c>
 80011b8:	7ffb      	ldrb	r3, [r7, #31]
 80011ba:	e0a1      	b.n	8001300 <Read_sensor_data+0x1d0>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80011bc:	7efb      	ldrb	r3, [r7, #27]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f107 0309 	add.w	r3, r7, #9
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	21d6      	movs	r1, #214	@ 0xd6
 80011d4:	484c      	ldr	r0, [pc, #304]	@ (8001308 <Read_sensor_data+0x1d8>)
 80011d6:	f005 fd83 	bl	8006ce0 <HAL_I2C_Mem_Read>
 80011da:	4603      	mov	r3, r0
 80011dc:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80011de:	7ffb      	ldrb	r3, [r7, #31]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <Read_sensor_data+0xb8>
 80011e4:	7ffb      	ldrb	r3, [r7, #31]
 80011e6:	e08b      	b.n	8001300 <Read_sensor_data+0x1d0>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80011e8:	7a7b      	ldrb	r3, [r7, #9]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	7abb      	ldrb	r3, [r7, #10]
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	3328      	adds	r3, #40	@ 0x28
 80011fe:	443b      	add	r3, r7
 8001200:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	3301      	adds	r3, #1
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	2b02      	cmp	r3, #2
 800120e:	ddb7      	ble.n	8001180 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
 8001214:	e044      	b.n	80012a0 <Read_sensor_data+0x170>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	3314      	adds	r3, #20
 800121a:	b2db      	uxtb	r3, r3
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001220:	7fbb      	ldrb	r3, [r7, #30]
 8001222:	3301      	adds	r3, #1
 8001224:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001226:	7fbb      	ldrb	r3, [r7, #30]
 8001228:	b29a      	uxth	r2, r3
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 030a 	add.w	r3, r7, #10
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	21d6      	movs	r1, #214	@ 0xd6
 800123e:	4832      	ldr	r0, [pc, #200]	@ (8001308 <Read_sensor_data+0x1d8>)
 8001240:	f005 fd4e 	bl	8006ce0 <HAL_I2C_Mem_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <Read_sensor_data+0x122>
 800124e:	7ffb      	ldrb	r3, [r7, #31]
 8001250:	e056      	b.n	8001300 <Read_sensor_data+0x1d0>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001252:	7f7b      	ldrb	r3, [r7, #29]
 8001254:	b29a      	uxth	r2, r3
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	2301      	movs	r3, #1
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	f107 0309 	add.w	r3, r7, #9
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	21d6      	movs	r1, #214	@ 0xd6
 800126a:	4827      	ldr	r0, [pc, #156]	@ (8001308 <Read_sensor_data+0x1d8>)
 800126c:	f005 fd38 	bl	8006ce0 <HAL_I2C_Mem_Read>
 8001270:	4603      	mov	r3, r0
 8001272:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <Read_sensor_data+0x14e>
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	e040      	b.n	8001300 <Read_sensor_data+0x1d0>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 800127e:	7a7b      	ldrb	r3, [r7, #9]
 8001280:	b21b      	sxth	r3, r3
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	7abb      	ldrb	r3, [r7, #10]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21a      	sxth	r2, r3
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	3328      	adds	r3, #40	@ 0x28
 8001294:	443b      	add	r3, r7
 8001296:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	3301      	adds	r3, #1
 800129e:	623b      	str	r3, [r7, #32]
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	ddb7      	ble.n	8001216 <Read_sensor_data+0xe6>
	}
	data->AccelX = accel_data[0];
 80012a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012aa:	461a      	mov	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	601a      	str	r2, [r3, #0]
	data->AccelY = accel_data[1];
 80012b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	605a      	str	r2, [r3, #4]
	data->AccelZ = accel_data[2];
 80012ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012be:	461a      	mov	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]
	data->GyroX = gyro_data[0];
 80012c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 80012ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 80012d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 80012e2:	f000 f815 	bl	8001310 <Read_temp>
 80012e6:	ec51 0b10 	vmov	r0, r1, d0
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b07      	ldr	r3, [pc, #28]	@ (800130c <Read_sensor_data+0x1dc>)
 80012f0:	f7fe fff2 	bl	80002d8 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000340 	.word	0x20000340
 800130c:	40210000 	.word	0x40210000

08001310 <Read_temp>:

double Read_temp() {
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	2301      	movs	r3, #1
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2301      	movs	r3, #1
 8001326:	2220      	movs	r2, #32
 8001328:	21d6      	movs	r1, #214	@ 0xd6
 800132a:	481f      	ldr	r0, [pc, #124]	@ (80013a8 <Read_temp+0x98>)
 800132c:	f005 fcd8 	bl	8006ce0 <HAL_I2C_Mem_Read>
 8001330:	4603      	mov	r3, r0
 8001332:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	1dbb      	adds	r3, r7, #6
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	2221      	movs	r2, #33	@ 0x21
 8001346:	21d6      	movs	r1, #214	@ 0xd6
 8001348:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <Read_temp+0x98>)
 800134a:	f005 fcc9 	bl	8006ce0 <HAL_I2C_Mem_Read>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	b21b      	sxth	r3, r3
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 8001362:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f904 	bl	8000574 <__aeabi_i2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <Read_temp+0x9c>)
 8001372:	f7ff fa93 	bl	800089c <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <Read_temp+0xa0>)
 8001384:	f7fe ffaa 	bl	80002dc <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 8001390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001394:	ec43 2b17 	vmov	d7, r2, r3
}
 8001398:	eeb0 0a47 	vmov.f32	s0, s14
 800139c:	eef0 0a67 	vmov.f32	s1, s15
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000340 	.word	0x20000340
 80013ac:	40700000 	.word	0x40700000
 80013b0:	40390000 	.word	0x40390000

080013b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	@ 0x30
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00c f811 	bl	800d3f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013d2:	4b40      	ldr	r3, [pc, #256]	@ (80014d4 <MX_ADC1_Init+0x120>)
 80013d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013da:	4b3e      	ldr	r3, [pc, #248]	@ (80014d4 <MX_ADC1_Init+0x120>)
 80013dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013e2:	4b3c      	ldr	r3, [pc, #240]	@ (80014d4 <MX_ADC1_Init+0x120>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e8:	4b3a      	ldr	r3, [pc, #232]	@ (80014d4 <MX_ADC1_Init+0x120>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80013ee:	4b39      	ldr	r3, [pc, #228]	@ (80014d4 <MX_ADC1_Init+0x120>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013f4:	4b37      	ldr	r3, [pc, #220]	@ (80014d4 <MX_ADC1_Init+0x120>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013fa:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <MX_ADC1_Init+0x120>)
 80013fc:	2208      	movs	r2, #8
 80013fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001400:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <MX_ADC1_Init+0x120>)
 8001402:	2200      	movs	r2, #0
 8001404:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001406:	4b33      	ldr	r3, [pc, #204]	@ (80014d4 <MX_ADC1_Init+0x120>)
 8001408:	2201      	movs	r2, #1
 800140a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800140c:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <MX_ADC1_Init+0x120>)
 800140e:	2203      	movs	r2, #3
 8001410:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001412:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <MX_ADC1_Init+0x120>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141a:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <MX_ADC1_Init+0x120>)
 800141c:	2200      	movs	r2, #0
 800141e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001420:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <MX_ADC1_Init+0x120>)
 8001422:	2200      	movs	r2, #0
 8001424:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001426:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <MX_ADC1_Init+0x120>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <MX_ADC1_Init+0x120>)
 8001430:	2200      	movs	r2, #0
 8001432:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <MX_ADC1_Init+0x120>)
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800143c:	4825      	ldr	r0, [pc, #148]	@ (80014d4 <MX_ADC1_Init+0x120>)
 800143e:	f003 fa27 	bl	8004890 <HAL_ADC_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001448:	f000 ffa4 	bl	8002394 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	481f      	ldr	r0, [pc, #124]	@ (80014d4 <MX_ADC1_Init+0x120>)
 8001458:	f004 fbec 	bl	8005c34 <HAL_ADCEx_MultiModeConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001462:	f000 ff97 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001466:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <MX_ADC1_Init+0x124>)
 8001468:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800146a:	2306      	movs	r3, #6
 800146c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800146e:	2307      	movs	r3, #7
 8001470:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001472:	237f      	movs	r3, #127	@ 0x7f
 8001474:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001476:	2304      	movs	r3, #4
 8001478:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4814      	ldr	r0, [pc, #80]	@ (80014d4 <MX_ADC1_Init+0x120>)
 8001484:	f003 fe74 	bl	8005170 <HAL_ADC_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800148e:	f000 ff81 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <MX_ADC1_Init+0x128>)
 8001494:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001496:	230c      	movs	r3, #12
 8001498:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <MX_ADC1_Init+0x120>)
 80014a0:	f003 fe66 	bl	8005170 <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80014aa:	f000 ff73 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_ADC1_Init+0x12c>)
 80014b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014b2:	2312      	movs	r3, #18
 80014b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <MX_ADC1_Init+0x120>)
 80014bc:	f003 fe58 	bl	8005170 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80014c6:	f000 ff65 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3730      	adds	r7, #48	@ 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000204 	.word	0x20000204
 80014d8:	cb840000 	.word	0xcb840000
 80014dc:	c3210000 	.word	0xc3210000
 80014e0:	0c900008 	.word	0x0c900008

080014e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b09a      	sub	sp, #104	@ 0x68
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	2244      	movs	r2, #68	@ 0x44
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f00b ff75 	bl	800d3f4 <memset>
  if(adcHandle->Instance==ADC1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001512:	d167      	bne.n	80015e4 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001514:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001518:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800151a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800151e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f006 fe31 	bl	800818c <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001530:	f000 ff30 	bl	8002394 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001534:	4b2d      	ldr	r3, [pc, #180]	@ (80015ec <HAL_ADC_MspInit+0x108>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	4a2c      	ldr	r2, [pc, #176]	@ (80015ec <HAL_ADC_MspInit+0x108>)
 800153a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800153e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001540:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <HAL_ADC_MspInit+0x108>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <HAL_ADC_MspInit+0x108>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	4a26      	ldr	r2, [pc, #152]	@ (80015ec <HAL_ADC_MspInit+0x108>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_ADC_MspInit+0x108>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001564:	2304      	movs	r3, #4
 8001566:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001568:	2303      	movs	r3, #3
 800156a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800157a:	f005 f84d 	bl	8006618 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 8001580:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <HAL_ADC_MspInit+0x110>)
 8001582:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001584:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 8001586:	2205      	movs	r2, #5
 8001588:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001596:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 8001598:	2280      	movs	r2, #128	@ 0x80
 800159a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 800159e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 80015a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 80015ae:	2220      	movs	r2, #32
 80015b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015b8:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 80015ba:	f004 fcef 	bl	8005f9c <HAL_DMA_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80015c4:	f000 fee6 	bl	8002394 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 80015cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80015ce:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <HAL_ADC_MspInit+0x10c>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2012      	movs	r0, #18
 80015da:	f004 fcaa 	bl	8005f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015de:	2012      	movs	r0, #18
 80015e0:	f004 fcc1 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015e4:	bf00      	nop
 80015e6:	3768      	adds	r7, #104	@ 0x68
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	20000270 	.word	0x20000270
 80015f4:	4002001c 	.word	0x4002001c

080015f8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80015f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800160a:	f040 8097 	bne.w	800173c <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 800160e:	4b52      	ldr	r3, [pc, #328]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x160>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffae 	bl	8000574 <__aeabi_i2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	a14a      	add	r1, pc, #296	@ (adr r1, 8001748 <HAL_ADC_ConvCpltCallback+0x150>)
 800161e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001622:	f7ff f93b 	bl	800089c <__aeabi_ddiv>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fadb 	bl	8000be8 <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	4a49      	ldr	r2, [pc, #292]	@ (800175c <HAL_ADC_ConvCpltCallback+0x164>)
 8001636:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001638:	4b49      	ldr	r3, [pc, #292]	@ (8001760 <HAL_ADC_ConvCpltCallback+0x168>)
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	4b49      	ldr	r3, [pc, #292]	@ (8001764 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001648:	ee17 0a90 	vmov	r0, s15
 800164c:	f7fe ffa4 	bl	8000598 <__aeabi_f2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	f04f 0000 	mov.w	r0, #0
 8001658:	4943      	ldr	r1, [pc, #268]	@ (8001768 <HAL_ADC_ConvCpltCallback+0x170>)
 800165a:	f7ff f91f 	bl	800089c <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4690      	mov	r8, r2
 8001664:	4699      	mov	r9, r3
 8001666:	4b3c      	ldr	r3, [pc, #240]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x160>)
 8001668:	885b      	ldrh	r3, [r3, #2]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff82 	bl	8000574 <__aeabi_i2d>
 8001670:	4604      	mov	r4, r0
 8001672:	460d      	mov	r5, r1
 8001674:	4b39      	ldr	r3, [pc, #228]	@ (800175c <HAL_ADC_ConvCpltCallback+0x164>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff8d 	bl	8000598 <__aeabi_f2d>
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b3a      	ldr	r3, [pc, #232]	@ (800176c <HAL_ADC_ConvCpltCallback+0x174>)
 8001684:	f7ff f90a 	bl	800089c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe ffda 	bl	8000648 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4614      	mov	r4, r2
 800169a:	461d      	mov	r5, r3
 800169c:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <HAL_ADC_ConvCpltCallback+0x16c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff79 	bl	8000598 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe fe13 	bl	80002d8 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4640      	mov	r0, r8
 80016b8:	4649      	mov	r1, r9
 80016ba:	f7fe ffc5 	bl	8000648 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff fa8f 	bl	8000be8 <__aeabi_d2f>
 80016ca:	ee07 0a10 	vmov	s14, r0
 80016ce:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 80016d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d6:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <HAL_ADC_ConvCpltCallback+0x178>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x160>)
 80016de:	88db      	ldrh	r3, [r3, #6]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff47 	bl	8000574 <__aeabi_i2d>
 80016e6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001750 <HAL_ADC_ConvCpltCallback+0x158>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f8d6 	bl	800089c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_ADC_ConvCpltCallback+0x174>)
 80016fe:	f7fe ffa3 	bl	8000648 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4614      	mov	r4, r2
 8001708:	461d      	mov	r5, r3
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_ADC_ConvCpltCallback+0x164>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff42 	bl	8000598 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4620      	mov	r0, r4
 800171a:	4629      	mov	r1, r5
 800171c:	f7fe ff94 	bl	8000648 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fa5e 	bl	8000be8 <__aeabi_d2f>
 800172c:	4603      	mov	r3, r0
 800172e:	4a11      	ldr	r2, [pc, #68]	@ (8001774 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001730:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 8001732:	2203      	movs	r2, #3
 8001734:	4908      	ldr	r1, [pc, #32]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x160>)
 8001736:	4810      	ldr	r0, [pc, #64]	@ (8001778 <HAL_ADC_ConvCpltCallback+0x180>)
 8001738:	f003 fa2e 	bl	8004b98 <HAL_ADC_Start_DMA>

	}

}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001746:	bf00      	nop
 8001748:	d70a3d70 	.word	0xd70a3d70
 800174c:	40b36323 	.word	0x40b36323
 8001750:	00000000 	.word	0x00000000
 8001754:	40affe00 	.word	0x40affe00
 8001758:	20000394 	.word	0x20000394
 800175c:	200003a0 	.word	0x200003a0
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004
 8001768:	40590000 	.word	0x40590000
 800176c:	40080000 	.word	0x40080000
 8001770:	2000039c 	.word	0x2000039c
 8001774:	200003a4 	.word	0x200003a4
 8001778:	20000204 	.word	0x20000204

0800177c <bmp581_init_precise_normal>:
extern float temp;
uint8_t odrcheck=0;

//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af04      	add	r7, sp, #16
 8001782:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 8001784:	237b      	movs	r3, #123	@ 0x7b
 8001786:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 8001788:	2369      	movs	r3, #105	@ 0x69
 800178a:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 800178c:	232b      	movs	r3, #43	@ 0x2b
 800178e:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 8001790:	2312      	movs	r3, #18
 8001792:	723b      	strb	r3, [r7, #8]
	int check=0;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8001798:	2364      	movs	r3, #100	@ 0x64
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2301      	movs	r3, #1
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	f107 030b 	add.w	r3, r7, #11
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2301      	movs	r3, #1
 80017a8:	2236      	movs	r2, #54	@ 0x36
 80017aa:	218e      	movs	r1, #142	@ 0x8e
 80017ac:	482a      	ldr	r0, [pc, #168]	@ (8001858 <bmp581_init_precise_normal+0xdc>)
 80017ae:	f005 f983 	bl	8006ab8 <HAL_I2C_Mem_Write>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <bmp581_init_precise_normal+0x40>
			check=1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 80017bc:	2364      	movs	r3, #100	@ 0x64
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030a 	add.w	r3, r7, #10
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	2237      	movs	r2, #55	@ 0x37
 80017ce:	218e      	movs	r1, #142	@ 0x8e
 80017d0:	4821      	ldr	r0, [pc, #132]	@ (8001858 <bmp581_init_precise_normal+0xdc>)
 80017d2:	f005 f971 	bl	8006ab8 <HAL_I2C_Mem_Write>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <bmp581_init_precise_normal+0x64>
					check=1;
 80017dc:	2301      	movs	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 80017e0:	2364      	movs	r3, #100	@ 0x64
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	2301      	movs	r3, #1
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	f107 0309 	add.w	r3, r7, #9
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2301      	movs	r3, #1
 80017f0:	2230      	movs	r2, #48	@ 0x30
 80017f2:	218e      	movs	r1, #142	@ 0x8e
 80017f4:	4818      	ldr	r0, [pc, #96]	@ (8001858 <bmp581_init_precise_normal+0xdc>)
 80017f6:	f005 f95f 	bl	8006ab8 <HAL_I2C_Mem_Write>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <bmp581_init_precise_normal+0x88>
				check=1;
 8001800:	2301      	movs	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 8001804:	2364      	movs	r3, #100	@ 0x64
 8001806:	9302      	str	r3, [sp, #8]
 8001808:	2301      	movs	r3, #1
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	2230      	movs	r2, #48	@ 0x30
 8001816:	218e      	movs	r1, #142	@ 0x8e
 8001818:	480f      	ldr	r0, [pc, #60]	@ (8001858 <bmp581_init_precise_normal+0xdc>)
 800181a:	f005 f94d 	bl	8006ab8 <HAL_I2C_Mem_Write>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <bmp581_init_precise_normal+0xac>
					check=1;
 8001824:	2301      	movs	r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
 8001828:	2364      	movs	r3, #100	@ 0x64
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	2301      	movs	r3, #1
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <bmp581_init_precise_normal+0xe0>)
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2301      	movs	r3, #1
 8001836:	2238      	movs	r2, #56	@ 0x38
 8001838:	218f      	movs	r1, #143	@ 0x8f
 800183a:	4807      	ldr	r0, [pc, #28]	@ (8001858 <bmp581_init_precise_normal+0xdc>)
 800183c:	f005 fa50 	bl	8006ce0 <HAL_I2C_Mem_Read>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <bmp581_init_precise_normal+0xce>
					check=1;
 8001846:	2301      	movs	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
				}


	return check;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	b2db      	uxtb	r3, r3

}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200002ec 	.word	0x200002ec
 800185c:	200002e8 	.word	0x200002e8

08001860 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b08e      	sub	sp, #56	@ 0x38
 8001864:	af04      	add	r7, sp, #16
 8001866:	6078      	str	r0, [r7, #4]
		int check=0;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
		int32_t intbufferpres=0;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]

		double tmoy=0;
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9c7 2304 	strd	r2, r3, [r7, #16]
//			check=1;
//		}
//		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_MSB, 1, &recarray[5], 1, 100)!=HAL_OK){
//			check=1;
//		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 8001880:	2364      	movs	r3, #100	@ 0x64
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2306      	movs	r3, #6
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2301      	movs	r3, #1
 8001890:	221d      	movs	r2, #29
 8001892:	218f      	movs	r1, #143	@ 0x8f
 8001894:	4866      	ldr	r0, [pc, #408]	@ (8001a30 <bmp581_read_precise_normal+0x1d0>)
 8001896:	f005 fa23 	bl	8006ce0 <HAL_I2C_Mem_Read>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <bmp581_read_precise_normal+0x44>
					check=1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
				}


		if(check==0){
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f040 80a1 	bne.w	80019ee <bmp581_read_precise_normal+0x18e>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 80018ac:	7abb      	ldrb	r3, [r7, #10]
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	7a7b      	ldrb	r3, [r7, #9]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	4313      	orrs	r3, r2
 80018b6:	7a3a      	ldrb	r2, [r7, #8]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	623b      	str	r3, [r7, #32]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 80018bc:	7b7b      	ldrb	r3, [r7, #13]
 80018be:	041a      	lsls	r2, r3, #16
 80018c0:	7b3b      	ldrb	r3, [r7, #12]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	4313      	orrs	r3, r2
 80018c6:	7afa      	ldrb	r2, [r7, #11]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61fb      	str	r3, [r7, #28]
		bmptemp=(double)intbuffertemp/65536.0;
 80018cc:	6a38      	ldr	r0, [r7, #32]
 80018ce:	f7fe fe51 	bl	8000574 <__aeabi_i2d>
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b57      	ldr	r3, [pc, #348]	@ (8001a34 <bmp581_read_precise_normal+0x1d4>)
 80018d8:	f7fe ffe0 	bl	800089c <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4955      	ldr	r1, [pc, #340]	@ (8001a38 <bmp581_read_precise_normal+0x1d8>)
 80018e2:	e9c1 2300 	strd	r2, r3, [r1]
		bmppress=(double) intbufferpres/64.0;
 80018e6:	69f8      	ldr	r0, [r7, #28]
 80018e8:	f7fe fe44 	bl	8000574 <__aeabi_i2d>
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b52      	ldr	r3, [pc, #328]	@ (8001a3c <bmp581_read_precise_normal+0x1dc>)
 80018f2:	f7fe ffd3 	bl	800089c <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4951      	ldr	r1, [pc, #324]	@ (8001a40 <bmp581_read_precise_normal+0x1e0>)
 80018fc:	e9c1 2300 	strd	r2, r3, [r1]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		bmpalt=(double) ((8.314*293.15)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 8001900:	4b4f      	ldr	r3, [pc, #316]	@ (8001a40 <bmp581_read_precise_normal+0x1e0>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	a13e      	add	r1, pc, #248	@ (adr r1, 8001a00 <bmp581_read_precise_normal+0x1a0>)
 8001908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800190c:	f7fe ffc6 	bl	800089c <__aeabi_ddiv>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	ec43 2b17 	vmov	d7, r2, r3
 8001918:	eeb0 0a47 	vmov.f32	s0, s14
 800191c:	eef0 0a67 	vmov.f32	s1, s15
 8001920:	f00d fd1e 	bl	800f360 <log>
 8001924:	ec51 0b10 	vmov	r0, r1, d0
 8001928:	a337      	add	r3, pc, #220	@ (adr r3, 8001a08 <bmp581_read_precise_normal+0x1a8>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fe8b 	bl	8000648 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4943      	ldr	r1, [pc, #268]	@ (8001a44 <bmp581_read_precise_normal+0x1e4>)
 8001938:	e9c1 2300 	strd	r2, r3, [r1]
		tmoy=(double) 293.15+bmptemp+(0.0065*bmpalt)/2;
 800193c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a38 <bmp581_read_precise_normal+0x1d8>)
 800193e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001942:	a333      	add	r3, pc, #204	@ (adr r3, 8001a10 <bmp581_read_precise_normal+0x1b0>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fcc8 	bl	80002dc <__adddf3>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4614      	mov	r4, r2
 8001952:	461d      	mov	r5, r3
 8001954:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <bmp581_read_precise_normal+0x1e4>)
 8001956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800195a:	a32f      	add	r3, pc, #188	@ (adr r3, 8001a18 <bmp581_read_precise_normal+0x1b8>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f7fe fe72 	bl	8000648 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001974:	f7fe ff92 	bl	800089c <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fcac 	bl	80002dc <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	e9c7 2304 	strd	r2, r3, [r7, #16]
		bmpalt=(double) ((8.314*tmoy)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 800198c:	a324      	add	r3, pc, #144	@ (adr r3, 8001a20 <bmp581_read_precise_normal+0x1c0>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001996:	f7fe fe57 	bl	8000648 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	a321      	add	r3, pc, #132	@ (adr r3, 8001a28 <bmp581_read_precise_normal+0x1c8>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe ff78 	bl	800089c <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4614      	mov	r4, r2
 80019b2:	461d      	mov	r5, r3
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <bmp581_read_precise_normal+0x1e0>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	a111      	add	r1, pc, #68	@ (adr r1, 8001a00 <bmp581_read_precise_normal+0x1a0>)
 80019bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019c0:	f7fe ff6c 	bl	800089c <__aeabi_ddiv>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ec43 2b17 	vmov	d7, r2, r3
 80019cc:	eeb0 0a47 	vmov.f32	s0, s14
 80019d0:	eef0 0a67 	vmov.f32	s1, s15
 80019d4:	f00d fcc4 	bl	800f360 <log>
 80019d8:	ec53 2b10 	vmov	r2, r3, d0
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fe32 	bl	8000648 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4916      	ldr	r1, [pc, #88]	@ (8001a44 <bmp581_read_precise_normal+0x1e4>)
 80019ea:	e9c1 2300 	strd	r2, r3, [r1]



		}

		return check;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	b2db      	uxtb	r3, r3
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3728      	adds	r7, #40	@ 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bdb0      	pop	{r4, r5, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	f3af 8000 	nop.w
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40f8bcd0 	.word	0x40f8bcd0
 8001a08:	81a9275b 	.word	0x81a9275b
 8001a0c:	40c0c254 	.word	0x40c0c254
 8001a10:	66666666 	.word	0x66666666
 8001a14:	40725266 	.word	0x40725266
 8001a18:	76c8b439 	.word	0x76c8b439
 8001a1c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001a20:	9ba5e354 	.word	0x9ba5e354
 8001a24:	4020a0c4 	.word	0x4020a0c4
 8001a28:	50527f89 	.word	0x50527f89
 8001a2c:	3fd22db5 	.word	0x3fd22db5
 8001a30:	200002ec 	.word	0x200002ec
 8001a34:	40f00000 	.word	0x40f00000
 8001a38:	200002d0 	.word	0x200002d0
 8001a3c:	40500000 	.word	0x40500000
 8001a40:	200002d8 	.word	0x200002d8
 8001a44:	200002e0 	.word	0x200002e0

08001a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <MX_DMA_Init+0x90>)
 8001a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a52:	4a21      	ldr	r2, [pc, #132]	@ (8001ad8 <MX_DMA_Init+0x90>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <MX_DMA_Init+0x90>)
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_DMA_Init+0x90>)
 8001a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad8 <MX_DMA_Init+0x90>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_DMA_Init+0x90>)
 8001a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	200b      	movs	r0, #11
 8001a84:	f004 fa55 	bl	8005f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a88:	200b      	movs	r0, #11
 8001a8a:	f004 fa6c 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	200c      	movs	r0, #12
 8001a94:	f004 fa4d 	bl	8005f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a98:	200c      	movs	r0, #12
 8001a9a:	f004 fa64 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	200d      	movs	r0, #13
 8001aa4:	f004 fa45 	bl	8005f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001aa8:	200d      	movs	r0, #13
 8001aaa:	f004 fa5c 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	200e      	movs	r0, #14
 8001ab4:	f004 fa3d 	bl	8005f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ab8:	200e      	movs	r0, #14
 8001aba:	f004 fa54 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f004 fa35 	bl	8005f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ac8:	200f      	movs	r0, #15
 8001aca:	f004 fa4c 	bl	8005f66 <HAL_NVIC_EnableIRQ>

}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <MX_GPIO_Init+0xc8>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba4 <MX_GPIO_Init+0xc8>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <MX_GPIO_Init+0xc8>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <MX_GPIO_Init+0xc8>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	4a25      	ldr	r2, [pc, #148]	@ (8001ba4 <MX_GPIO_Init+0xc8>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b16:	4b23      	ldr	r3, [pc, #140]	@ (8001ba4 <MX_GPIO_Init+0xc8>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <MX_GPIO_Init+0xc8>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba4 <MX_GPIO_Init+0xc8>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <MX_GPIO_Init+0xc8>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001b40:	4819      	ldr	r0, [pc, #100]	@ (8001ba8 <MX_GPIO_Init+0xcc>)
 8001b42:	f004 feeb 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b46:	2301      	movs	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b4a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5e:	f004 fd5b 	bl	8006618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b62:	2302      	movs	r3, #2
 8001b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	4619      	mov	r1, r3
 8001b76:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <MX_GPIO_Init+0xcc>)
 8001b78:	f004 fd4e 	bl	8006618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 8001b7c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	4619      	mov	r1, r3
 8001b94:	4804      	ldr	r0, [pc, #16]	@ (8001ba8 <MX_GPIO_Init+0xcc>)
 8001b96:	f004 fd3f 	bl	8006618 <HAL_GPIO_Init>

}
 8001b9a:	bf00      	nop
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000400 	.word	0x48000400

08001bac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <MX_I2C1_Init+0x78>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B182BE;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <MX_I2C1_Init+0x7c>)
 8001bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be6:	480e      	ldr	r0, [pc, #56]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001be8:	f004 feca 	bl	8006980 <HAL_I2C_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bf2:	f000 fbcf 	bl	8002394 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4809      	ldr	r0, [pc, #36]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bfa:	f005 fc4d 	bl	8007498 <HAL_I2CEx_ConfigAnalogFilter>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c04:	f000 fbc6 	bl	8002394 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001c0c:	f005 fc8f 	bl	800752e <HAL_I2CEx_ConfigDigitalFilter>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c16:	f000 fbbd 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200002ec 	.word	0x200002ec
 8001c24:	40005400 	.word	0x40005400
 8001c28:	20b182be 	.word	0x20b182be

08001c2c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <MX_I2C3_Init+0x78>)
 8001c34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B182BE;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca8 <MX_I2C3_Init+0x7c>)
 8001c3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c66:	480e      	ldr	r0, [pc, #56]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c68:	f004 fe8a 	bl	8006980 <HAL_I2C_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001c72:	f000 fb8f 	bl	8002394 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c76:	2100      	movs	r1, #0
 8001c78:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c7a:	f005 fc0d 	bl	8007498 <HAL_I2CEx_ConfigAnalogFilter>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001c84:	f000 fb86 	bl	8002394 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <MX_I2C3_Init+0x74>)
 8001c8c:	f005 fc4f 	bl	800752e <HAL_I2CEx_ConfigDigitalFilter>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001c96:	f000 fb7d 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000340 	.word	0x20000340
 8001ca4:	40007800 	.word	0x40007800
 8001ca8:	20b182be 	.word	0x20b182be

08001cac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b09e      	sub	sp, #120	@ 0x78
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	2244      	movs	r2, #68	@ 0x44
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f00b fb91 	bl	800d3f4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e48 <HAL_I2C_MspInit+0x19c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d155      	bne.n	8001d88 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cdc:	2340      	movs	r3, #64	@ 0x40
 8001cde:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f006 fa4f 	bl	800818c <HAL_RCCEx_PeriphCLKConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cf4:	f000 fb4e 	bl	8002394 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b54      	ldr	r3, [pc, #336]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfc:	4a53      	ldr	r2, [pc, #332]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d04:	4b51      	ldr	r3, [pc, #324]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	4b4e      	ldr	r3, [pc, #312]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d14:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2e:	2312      	movs	r3, #18
 8001d30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d42:	4619      	mov	r1, r3
 8001d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d48:	f004 fc66 	bl	8006618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d52:	2312      	movs	r3, #18
 8001d54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d66:	4619      	mov	r1, r3
 8001d68:	4839      	ldr	r0, [pc, #228]	@ (8001e50 <HAL_I2C_MspInit+0x1a4>)
 8001d6a:	f004 fc55 	bl	8006618 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d6e:	4b37      	ldr	r3, [pc, #220]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	4a36      	ldr	r2, [pc, #216]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001d74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d7a:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d86:	e05a      	b.n	8001e3e <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a31      	ldr	r2, [pc, #196]	@ (8001e54 <HAL_I2C_MspInit+0x1a8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d155      	bne.n	8001e3e <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4618      	mov	r0, r3
 8001da2:	f006 f9f3 	bl	800818c <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8001dac:	f000 faf2 	bl	8002394 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db4:	4a25      	ldr	r2, [pc, #148]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbc:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001de4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de6:	2312      	movs	r3, #18
 8001de8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001df2:	2302      	movs	r3, #2
 8001df4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e00:	f004 fc0a 	bl	8006618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0a:	2312      	movs	r3, #18
 8001e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001e16:	2308      	movs	r3, #8
 8001e18:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480d      	ldr	r0, [pc, #52]	@ (8001e58 <HAL_I2C_MspInit+0x1ac>)
 8001e22:	f004 fbf9 	bl	8006618 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	4a08      	ldr	r2, [pc, #32]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001e2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_I2C_MspInit+0x1a0>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
}
 8001e3e:	bf00      	nop
 8001e40:	3778      	adds	r7, #120	@ 0x78
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40005400 	.word	0x40005400
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	48000400 	.word	0x48000400
 8001e54:	40007800 	.word	0x40007800
 8001e58:	48000800 	.word	0x48000800

08001e5c <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8001e62:	480d      	ldr	r0, [pc, #52]	@ (8001e98 <LED_Init+0x3c>)
 8001e64:	f006 fc44 	bl	80086f0 <HAL_TIM_PWM_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	80fb      	strh	r3, [r7, #6]
 8001e70:	e006      	b.n	8001e80 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <LED_Init+0x40>)
 8001e76:	2100      	movs	r1, #0
 8001e78:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	80fb      	strh	r3, [r7, #6]
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8001e86:	d3f4      	bcc.n	8001e72 <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <LED_Init+0x44>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8001e8e:	797b      	ldrb	r3, [r7, #5]




}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000dfc 	.word	0x20000dfc
 8001e9c:	20000788 	.word	0x20000788
 8001ea0:	200008bc 	.word	0x200008bc

08001ea4 <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8001ea4:	b490      	push	{r4, r7}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4604      	mov	r4, r0
 8001eac:	4608      	mov	r0, r1
 8001eae:	4611      	mov	r1, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71bb      	strb	r3, [r7, #6]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	717b      	strb	r3, [r7, #5]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	83fb      	strh	r3, [r7, #30]
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=r;
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	733b      	strb	r3, [r7, #12]
	ledbuf[1]=g;
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	737b      	strb	r3, [r7, #13]
	ledbuf[2]=b;
 8001ece:	797b      	ldrb	r3, [r7, #5]
 8001ed0:	73bb      	strb	r3, [r7, #14]
	ledbuf[3]=r1;
 8001ed2:	793b      	ldrb	r3, [r7, #4]
 8001ed4:	73fb      	strb	r3, [r7, #15]
	ledbuf[4]=g1;
 8001ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001eda:	743b      	strb	r3, [r7, #16]
	ledbuf[5]=b1;
 8001edc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ee0:	747b      	strb	r3, [r7, #17]



	for(uint8_t i=0; i<LED_NUM;i++){
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	777b      	strb	r3, [r7, #29]
 8001ee6:	e032      	b.n	8001f4e <LED_Setcolour+0xaa>
		for(uint8_t j=0; j<3;j++){
 8001ee8:	2300      	movs	r3, #0
 8001eea:	773b      	strb	r3, [r7, #28]
 8001eec:	e029      	b.n	8001f42 <LED_Setcolour+0x9e>
			for(int k=0;k<8;k++){
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	e020      	b.n	8001f36 <LED_Setcolour+0x92>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8001ef4:	7f7a      	ldrb	r2, [r7, #29]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	441a      	add	r2, r3
 8001efc:	7f3b      	ldrb	r3, [r7, #28]
 8001efe:	4413      	add	r3, r2
 8001f00:	3320      	adds	r3, #32
 8001f02:	443b      	add	r3, r7
 8001f04:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	fa42 f303 	asr.w	r3, r2, r3
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <LED_Setcolour+0x7e>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8001f18:	8bfb      	ldrh	r3, [r7, #30]
 8001f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <LED_Setcolour+0xe0>)
 8001f1c:	211e      	movs	r1, #30
 8001f1e:	54d1      	strb	r1, [r2, r3]
 8001f20:	e003      	b.n	8001f2a <LED_Setcolour+0x86>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8001f22:	8bfb      	ldrh	r3, [r7, #30]
 8001f24:	4a17      	ldr	r2, [pc, #92]	@ (8001f84 <LED_Setcolour+0xe0>)
 8001f26:	215a      	movs	r1, #90	@ 0x5a
 8001f28:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8001f2a:	8bfb      	ldrh	r3, [r7, #30]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	83fb      	strh	r3, [r7, #30]
			for(int k=0;k<8;k++){
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	dddb      	ble.n	8001ef4 <LED_Setcolour+0x50>
		for(uint8_t j=0; j<3;j++){
 8001f3c:	7f3b      	ldrb	r3, [r7, #28]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	773b      	strb	r3, [r7, #28]
 8001f42:	7f3b      	ldrb	r3, [r7, #28]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d9d2      	bls.n	8001eee <LED_Setcolour+0x4a>
	for(uint8_t i=0; i<LED_NUM;i++){
 8001f48:	7f7b      	ldrb	r3, [r7, #29]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	777b      	strb	r3, [r7, #29]
 8001f4e:	7f7b      	ldrb	r3, [r7, #29]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d9c9      	bls.n	8001ee8 <LED_Setcolour+0x44>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00a      	b.n	8001f70 <LED_Setcolour+0xcc>
		LEDDMABUF[i]=0;
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <LED_Setcolour+0xe0>)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4413      	add	r3, r2
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
		dmabufindex++;
 8001f64:	8bfb      	ldrh	r3, [r7, #30]
 8001f66:	3301      	adds	r3, #1
 8001f68:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<RSTPERIOD;i++){
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f76:	dbf0      	blt.n	8001f5a <LED_Setcolour+0xb6>
	}

}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc90      	pop	{r4, r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000788 	.word	0x20000788

08001f88 <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8001f8e:	f44f 739a 	mov.w	r3, #308	@ 0x134
 8001f92:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <LED_Update+0x28>)
 8001f94:	210c      	movs	r1, #12
 8001f96:	4807      	ldr	r0, [pc, #28]	@ (8001fb4 <LED_Update+0x2c>)
 8001f98:	f006 fd0c 	bl	80089b4 <HAL_TIM_PWM_Start_DMA>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]

	if(halStatus=HAL_OK){
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	71fb      	strb	r3, [r7, #7]
		DMA_COMPLETE_FLAG=0;
	}


	return halStatus;
 8001fa4:	79fb      	ldrb	r3, [r7, #7]

}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000788 	.word	0x20000788
 8001fb4:	20000dfc 	.word	0x20000dfc

08001fb8 <LED_Callback>:



void LED_Callback(){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8001fbc:	210c      	movs	r1, #12
 8001fbe:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <LED_Callback+0x18>)
 8001fc0:	f006 ff10 	bl	8008de4 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <LED_Callback+0x1c>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]


}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000dfc 	.word	0x20000dfc
 8001fd4:	200008bc 	.word	0x200008bc

08001fd8 <HAL_TIM_PWM_PulseFinishedCallback>:




	}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8001fe0:	f7ff ffea 	bl	8001fb8 <LED_Callback>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff2:	f002 f97a 	bl	80042ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff6:	f000 f981 	bl	80022fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffa:	f7ff fd6f 	bl	8001adc <MX_GPIO_Init>
  MX_DMA_Init();
 8001ffe:	f7ff fd23 	bl	8001a48 <MX_DMA_Init>
  MX_TIM2_Init();
 8002002:	f001 fc77 	bl	80038f4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002006:	f7ff f9d5 	bl	80013b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800200a:	f7ff fdcf 	bl	8001bac <MX_I2C1_Init>
  MX_I2C3_Init();
 800200e:	f7ff fe0d 	bl	8001c2c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002012:	f001 fee3 	bl	8003ddc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002016:	f001 ff2b 	bl	8003e70 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800201a:	f001 fce1 	bl	80039e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800201e:	f001 fd57 	bl	8003ad0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8002022:	f001 fda3 	bl	8003b6c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8002026:	f000 fdd9 	bl	8002bdc <ssd1306_Init>
  ssd1306_Fill(Black);
 800202a:	2000      	movs	r0, #0
 800202c:	f000 fe40 	bl	8002cb0 <ssd1306_Fill>
  ssd1306_SetCursor(32, 40);
 8002030:	2128      	movs	r1, #40	@ 0x28
 8002032:	2020      	movs	r0, #32
 8002034:	f000 ff7e 	bl	8002f34 <ssd1306_SetCursor>
  ssd1306_WriteString("Init...", Font_7x10, White);
 8002038:	4a96      	ldr	r2, [pc, #600]	@ (8002294 <main+0x2a8>)
 800203a:	2301      	movs	r3, #1
 800203c:	ca06      	ldmia	r2, {r1, r2}
 800203e:	4896      	ldr	r0, [pc, #600]	@ (8002298 <main+0x2ac>)
 8002040:	f000 ff52 	bl	8002ee8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002044:	f000 fe4c 	bl	8002ce0 <ssd1306_UpdateScreen>

  if( HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK){
 8002048:	4894      	ldr	r0, [pc, #592]	@ (800229c <main+0x2b0>)
 800204a:	f006 fae7 	bl	800861c <HAL_TIM_Base_Start_IT>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d011      	beq.n	8002078 <main+0x8c>
	  ssd1306_Fill(Black);
 8002054:	2000      	movs	r0, #0
 8002056:	f000 fe2b 	bl	8002cb0 <ssd1306_Fill>
	  ssd1306_WriteString("tim4pbm", Font_7x10, White);
 800205a:	4a8e      	ldr	r2, [pc, #568]	@ (8002294 <main+0x2a8>)
 800205c:	2301      	movs	r3, #1
 800205e:	ca06      	ldmia	r2, {r1, r2}
 8002060:	488f      	ldr	r0, [pc, #572]	@ (80022a0 <main+0x2b4>)
 8002062:	f000 ff41 	bl	8002ee8 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8002066:	f000 fe3b 	bl	8002ce0 <ssd1306_UpdateScreen>
	  HAL_Delay(500);
 800206a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800206e:	f002 f9ad 	bl	80043cc <HAL_Delay>
	  pbmseeker=1;
 8002072:	4b8c      	ldr	r3, [pc, #560]	@ (80022a4 <main+0x2b8>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

  }



  if( Init_servo()!=HAL_OK){
 8002078:	f000 fd58 	bl	8002b2c <Init_servo>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d011      	beq.n	80020a6 <main+0xba>
 	  ssd1306_Fill(Black);
 8002082:	2000      	movs	r0, #0
 8002084:	f000 fe14 	bl	8002cb0 <ssd1306_Fill>
 	  ssd1306_WriteString("servopbm", Font_7x10, White);
 8002088:	4a82      	ldr	r2, [pc, #520]	@ (8002294 <main+0x2a8>)
 800208a:	2301      	movs	r3, #1
 800208c:	ca06      	ldmia	r2, {r1, r2}
 800208e:	4886      	ldr	r0, [pc, #536]	@ (80022a8 <main+0x2bc>)
 8002090:	f000 ff2a 	bl	8002ee8 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002094:	f000 fe24 	bl	8002ce0 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002098:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800209c:	f002 f996 	bl	80043cc <HAL_Delay>
 	 pbmseeker=1;
 80020a0:	4b80      	ldr	r3, [pc, #512]	@ (80022a4 <main+0x2b8>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

   }



  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 80020a6:	2203      	movs	r2, #3
 80020a8:	4980      	ldr	r1, [pc, #512]	@ (80022ac <main+0x2c0>)
 80020aa:	4881      	ldr	r0, [pc, #516]	@ (80022b0 <main+0x2c4>)
 80020ac:	f002 fd74 	bl	8004b98 <HAL_ADC_Start_DMA>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d011      	beq.n	80020da <main+0xee>
 	  ssd1306_Fill(Black);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f000 fdfa 	bl	8002cb0 <ssd1306_Fill>
 	  ssd1306_WriteString("adcpbm", Font_7x10, White);
 80020bc:	4a75      	ldr	r2, [pc, #468]	@ (8002294 <main+0x2a8>)
 80020be:	2301      	movs	r3, #1
 80020c0:	ca06      	ldmia	r2, {r1, r2}
 80020c2:	487c      	ldr	r0, [pc, #496]	@ (80022b4 <main+0x2c8>)
 80020c4:	f000 ff10 	bl	8002ee8 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 80020c8:	f000 fe0a 	bl	8002ce0 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 80020cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020d0:	f002 f97c 	bl	80043cc <HAL_Delay>
 	 pbmseeker=1;
 80020d4:	4b73      	ldr	r3, [pc, #460]	@ (80022a4 <main+0x2b8>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]


   }

   HAL_Delay(100);
 80020da:	2064      	movs	r0, #100	@ 0x64
 80020dc:	f002 f976 	bl	80043cc <HAL_Delay>
   HAL_UART_Abort(&huart1);
 80020e0:	4875      	ldr	r0, [pc, #468]	@ (80022b8 <main+0x2cc>)
 80020e2:	f008 faa9 	bl	800a638 <HAL_UART_Abort>

   if( HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize)!=HAL_OK){
 80020e6:	2240      	movs	r2, #64	@ 0x40
 80020e8:	4974      	ldr	r1, [pc, #464]	@ (80022bc <main+0x2d0>)
 80020ea:	4873      	ldr	r0, [pc, #460]	@ (80022b8 <main+0x2cc>)
 80020ec:	f008 fa58 	bl	800a5a0 <HAL_UART_Receive_DMA>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d011      	beq.n	800211a <main+0x12e>
  	  ssd1306_Fill(Black);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 fdda 	bl	8002cb0 <ssd1306_Fill>
  	  ssd1306_WriteString("gpspbm", Font_7x10, White);
 80020fc:	4a65      	ldr	r2, [pc, #404]	@ (8002294 <main+0x2a8>)
 80020fe:	2301      	movs	r3, #1
 8002100:	ca06      	ldmia	r2, {r1, r2}
 8002102:	486f      	ldr	r0, [pc, #444]	@ (80022c0 <main+0x2d4>)
 8002104:	f000 fef0 	bl	8002ee8 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8002108:	f000 fdea 	bl	8002ce0 <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 800210c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002110:	f002 f95c 	bl	80043cc <HAL_Delay>
  	pbmseeker=1;
 8002114:	4b63      	ldr	r3, [pc, #396]	@ (80022a4 <main+0x2b8>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]


    }

   HAL_Delay(100);
 800211a:	2064      	movs	r0, #100	@ 0x64
 800211c:	f002 f956 	bl	80043cc <HAL_Delay>
   HAL_UART_Abort(&hlpuart1);
 8002120:	4868      	ldr	r0, [pc, #416]	@ (80022c4 <main+0x2d8>)
 8002122:	f008 fa89 	bl	800a638 <HAL_UART_Abort>

   if(HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize)!=HAL_OK){
 8002126:	221e      	movs	r2, #30
 8002128:	4967      	ldr	r1, [pc, #412]	@ (80022c8 <main+0x2dc>)
 800212a:	4866      	ldr	r0, [pc, #408]	@ (80022c4 <main+0x2d8>)
 800212c:	f008 fa38 	bl	800a5a0 <HAL_UART_Receive_DMA>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d011      	beq.n	800215a <main+0x16e>
  	  ssd1306_Fill(Black);
 8002136:	2000      	movs	r0, #0
 8002138:	f000 fdba 	bl	8002cb0 <ssd1306_Fill>
  	  ssd1306_WriteString("tvsrxpbm", Font_7x10, White);
 800213c:	4a55      	ldr	r2, [pc, #340]	@ (8002294 <main+0x2a8>)
 800213e:	2301      	movs	r3, #1
 8002140:	ca06      	ldmia	r2, {r1, r2}
 8002142:	4862      	ldr	r0, [pc, #392]	@ (80022cc <main+0x2e0>)
 8002144:	f000 fed0 	bl	8002ee8 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8002148:	f000 fdca 	bl	8002ce0 <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 800214c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002150:	f002 f93c 	bl	80043cc <HAL_Delay>
  	pbmseeker=1;
 8002154:	4b53      	ldr	r3, [pc, #332]	@ (80022a4 <main+0x2b8>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]


    }


  if(  LED_Init()!=HAL_OK){
 800215a:	f7ff fe7f 	bl	8001e5c <LED_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d011      	beq.n	8002188 <main+0x19c>
 	  ssd1306_Fill(Black);
 8002164:	2000      	movs	r0, #0
 8002166:	f000 fda3 	bl	8002cb0 <ssd1306_Fill>
 	  ssd1306_WriteString("ledpbm", Font_7x10, White);
 800216a:	4a4a      	ldr	r2, [pc, #296]	@ (8002294 <main+0x2a8>)
 800216c:	2301      	movs	r3, #1
 800216e:	ca06      	ldmia	r2, {r1, r2}
 8002170:	4857      	ldr	r0, [pc, #348]	@ (80022d0 <main+0x2e4>)
 8002172:	f000 feb9 	bl	8002ee8 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002176:	f000 fdb3 	bl	8002ce0 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 800217a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800217e:	f002 f925 	bl	80043cc <HAL_Delay>
 	 pbmseeker=1;
 8002182:	4b48      	ldr	r3, [pc, #288]	@ (80022a4 <main+0x2b8>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]


   }
  Init_HighPerf_Mode_6_axis();
 8002188:	f7fe ff4a 	bl	8001020 <Init_HighPerf_Mode_6_axis>



  if(bmp581_init_precise_normal(&myDatabmp581)!=HAL_OK){
 800218c:	4851      	ldr	r0, [pc, #324]	@ (80022d4 <main+0x2e8>)
 800218e:	f7ff faf5 	bl	800177c <bmp581_init_precise_normal>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d011      	beq.n	80021bc <main+0x1d0>
 	  ssd1306_Fill(Black);
 8002198:	2000      	movs	r0, #0
 800219a:	f000 fd89 	bl	8002cb0 <ssd1306_Fill>
 	  ssd1306_WriteString("bmp pbm", Font_7x10, White);
 800219e:	4a3d      	ldr	r2, [pc, #244]	@ (8002294 <main+0x2a8>)
 80021a0:	2301      	movs	r3, #1
 80021a2:	ca06      	ldmia	r2, {r1, r2}
 80021a4:	484c      	ldr	r0, [pc, #304]	@ (80022d8 <main+0x2ec>)
 80021a6:	f000 fe9f 	bl	8002ee8 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 80021aa:	f000 fd99 	bl	8002ce0 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 80021ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021b2:	f002 f90b 	bl	80043cc <HAL_Delay>
 	 pbmseeker=1;
 80021b6:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <main+0x2b8>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]


   }

  //mon adresse est 1° et on envoit à 2°
  if( INIT_PERM_TARVOS(TOP_ADDR, GROUND_ADDR)!=HAL_OK){
 80021bc:	2101      	movs	r1, #1
 80021be:	2069      	movs	r0, #105	@ 0x69
 80021c0:	f001 fa0c 	bl	80035dc <INIT_PERM_TARVOS>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d011      	beq.n	80021ee <main+0x202>
 	  ssd1306_Fill(Black);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 fd70 	bl	8002cb0 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsaddrpbm", Font_7x10, White);
 80021d0:	4a30      	ldr	r2, [pc, #192]	@ (8002294 <main+0x2a8>)
 80021d2:	2301      	movs	r3, #1
 80021d4:	ca06      	ldmia	r2, {r1, r2}
 80021d6:	4841      	ldr	r0, [pc, #260]	@ (80022dc <main+0x2f0>)
 80021d8:	f000 fe86 	bl	8002ee8 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 80021dc:	f000 fd80 	bl	8002ce0 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 80021e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021e4:	f002 f8f2 	bl	80043cc <HAL_Delay>
 	 pbmseeker=1;
 80021e8:	4b2e      	ldr	r3, [pc, #184]	@ (80022a4 <main+0x2b8>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]


   }

  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 80021ee:	2201      	movs	r2, #1
 80021f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021f4:	483a      	ldr	r0, [pc, #232]	@ (80022e0 <main+0x2f4>)
 80021f6:	f004 fb91 	bl	800691c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002200:	4837      	ldr	r0, [pc, #220]	@ (80022e0 <main+0x2f4>)
 8002202:	f004 fb8b 	bl	800691c <HAL_GPIO_WritePin>

  if(pbmseeker==0){
 8002206:	4b27      	ldr	r3, [pc, #156]	@ (80022a4 <main+0x2b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10e      	bne.n	800222c <main+0x240>

	  ssd1306_Fill(Black);
 800220e:	2000      	movs	r0, #0
 8002210:	f000 fd4e 	bl	8002cb0 <ssd1306_Fill>
	  ssd1306_WriteString("done!", Font_7x10, White);
 8002214:	4a1f      	ldr	r2, [pc, #124]	@ (8002294 <main+0x2a8>)
 8002216:	2301      	movs	r3, #1
 8002218:	ca06      	ldmia	r2, {r1, r2}
 800221a:	4832      	ldr	r0, [pc, #200]	@ (80022e4 <main+0x2f8>)
 800221c:	f000 fe64 	bl	8002ee8 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8002220:	f000 fd5e 	bl	8002ce0 <ssd1306_UpdateScreen>
	  HAL_Delay(500);
 8002224:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002228:	f002 f8d0 	bl	80043cc <HAL_Delay>


  }
  if(pbmseeker==1){
 800222c:	4b1d      	ldr	r3, [pc, #116]	@ (80022a4 <main+0x2b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10e      	bne.n	8002252 <main+0x266>

	  ssd1306_Fill(Black);
 8002234:	2000      	movs	r0, #0
 8002236:	f000 fd3b 	bl	8002cb0 <ssd1306_Fill>
	  ssd1306_WriteString("PROBLEM", Font_7x10, White);
 800223a:	4a16      	ldr	r2, [pc, #88]	@ (8002294 <main+0x2a8>)
 800223c:	2301      	movs	r3, #1
 800223e:	ca06      	ldmia	r2, {r1, r2}
 8002240:	4829      	ldr	r0, [pc, #164]	@ (80022e8 <main+0x2fc>)
 8002242:	f000 fe51 	bl	8002ee8 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8002246:	f000 fd4b 	bl	8002ce0 <ssd1306_UpdateScreen>
	  HAL_Delay(2000);
 800224a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800224e:	f002 f8bd 	bl	80043cc <HAL_Delay>


  }

  LED_Setcolour(125, 0, 0,0, 255, 0);
 8002252:	2300      	movs	r3, #0
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	23ff      	movs	r3, #255	@ 0xff
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2300      	movs	r3, #0
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	207d      	movs	r0, #125	@ 0x7d
 8002262:	f7ff fe1f 	bl	8001ea4 <LED_Setcolour>
  LED_Update();
 8002266:	f7ff fe8f 	bl	8001f88 <LED_Update>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timestamp==1){
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <main+0x300>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d1fb      	bne.n	800226a <main+0x27e>

		  nmea_parse(&myDataGPS,(uint8_t*) GPS_RX_Buffer);
 8002272:	491f      	ldr	r1, [pc, #124]	@ (80022f0 <main+0x304>)
 8002274:	481f      	ldr	r0, [pc, #124]	@ (80022f4 <main+0x308>)
 8002276:	f000 fba9 	bl	80029cc <nmea_parse>
		  bmp581_read_precise_normal(&myDatabmp581);
 800227a:	4816      	ldr	r0, [pc, #88]	@ (80022d4 <main+0x2e8>)
 800227c:	f7ff faf0 	bl	8001860 <bmp581_read_precise_normal>
		  Read_sensor_data(&myData6AXIS);
 8002280:	481d      	ldr	r0, [pc, #116]	@ (80022f8 <main+0x30c>)
 8002282:	f7fe ff55 	bl	8001130 <Read_sensor_data>

		  statemachine();
 8002286:	f000 fe9f 	bl	8002fc8 <statemachine>
		  timestamp=0;
 800228a:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <main+0x300>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
	  if(timestamp==1){
 8002290:	e7eb      	b.n	800226a <main+0x27e>
 8002292:	bf00      	nop
 8002294:	20000008 	.word	0x20000008
 8002298:	0800f804 	.word	0x0800f804
 800229c:	20000e94 	.word	0x20000e94
 80022a0:	0800f80c 	.word	0x0800f80c
 80022a4:	200008cc 	.word	0x200008cc
 80022a8:	0800f814 	.word	0x0800f814
 80022ac:	20000394 	.word	0x20000394
 80022b0:	20000204 	.word	0x20000204
 80022b4:	0800f820 	.word	0x0800f820
 80022b8:	20001020 	.word	0x20001020
 80022bc:	200006c8 	.word	0x200006c8
 80022c0:	0800f828 	.word	0x0800f828
 80022c4:	20000f8c 	.word	0x20000f8c
 80022c8:	200004a8 	.word	0x200004a8
 80022cc:	0800f830 	.word	0x0800f830
 80022d0:	0800f83c 	.word	0x0800f83c
 80022d4:	20000770 	.word	0x20000770
 80022d8:	0800f844 	.word	0x0800f844
 80022dc:	0800f84c 	.word	0x0800f84c
 80022e0:	48000400 	.word	0x48000400
 80022e4:	0800f858 	.word	0x0800f858
 80022e8:	0800f860 	.word	0x0800f860
 80022ec:	200008bd 	.word	0x200008bd
 80022f0:	200004c8 	.word	0x200004c8
 80022f4:	20000710 	.word	0x20000710
 80022f8:	20000750 	.word	0x20000750

080022fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b094      	sub	sp, #80	@ 0x50
 8002300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002302:	f107 0318 	add.w	r3, r7, #24
 8002306:	2238      	movs	r2, #56	@ 0x38
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f00b f872 	bl	800d3f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800231e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002322:	f005 f951 	bl	80075c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002326:	2302      	movs	r3, #2
 8002328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800232a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002330:	2340      	movs	r3, #64	@ 0x40
 8002332:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002334:	2302      	movs	r3, #2
 8002336:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002338:	2302      	movs	r3, #2
 800233a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800233c:	2302      	movs	r3, #2
 800233e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002340:	2319      	movs	r3, #25
 8002342:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002344:	2302      	movs	r3, #2
 8002346:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002348:	2302      	movs	r3, #2
 800234a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800234c:	2302      	movs	r3, #2
 800234e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002350:	f107 0318 	add.w	r3, r7, #24
 8002354:	4618      	mov	r0, r3
 8002356:	f005 f9eb 	bl	8007730 <HAL_RCC_OscConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002360:	f000 f818 	bl	8002394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002364:	230f      	movs	r3, #15
 8002366:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002368:	2303      	movs	r3, #3
 800236a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	2103      	movs	r1, #3
 800237c:	4618      	mov	r0, r3
 800237e:	f005 fce9 	bl	8007d54 <HAL_RCC_ClockConfig>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002388:	f000 f804 	bl	8002394 <Error_Handler>
  }
}
 800238c:	bf00      	nop
 800238e:	3750      	adds	r7, #80	@ 0x50
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
}
 800239a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <Error_Handler+0x8>

080023a0 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7fd ff39 	bl	8000220 <strlen>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d801      	bhi.n	80023b8 <gps_checksum+0x18>
 80023b4:	2300      	movs	r3, #0
 80023b6:	e038      	b.n	800242a <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7fd ff31 	bl	8000220 <strlen>
 80023be:	4603      	mov	r3, r0
 80023c0:	3b04      	subs	r3, #4
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fd ff28 	bl	8000220 <strlen>
 80023d0:	4603      	mov	r3, r0
 80023d2:	3b03      	subs	r3, #3
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	e00a      	b.n	80023fc <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4053      	eors	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3301      	adds	r3, #1
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fd ff0f 	bl	8000220 <strlen>
 8002402:	4603      	mov	r3, r0
 8002404:	1f5a      	subs	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8ec      	bhi.n	80023e6 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800240c:	f107 0308 	add.w	r3, r7, #8
 8002410:	2210      	movs	r2, #16
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f00a fdb5 	bl	800cf84 <strtol>
 800241a:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	d101      	bne.n	8002428 <gps_checksum+0x88>
        return 1;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002428:	2300      	movs	r3, #0
    }
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b0b7      	sub	sp, #220	@ 0xdc
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002444:	f107 0320 	add.w	r3, r7, #32
 8002448:	2264      	movs	r2, #100	@ 0x64
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f00a ffd1 	bl	800d3f4 <memset>
    char *marker = strtok(inputString, ",");
 8002452:	49c2      	ldr	r1, [pc, #776]	@ (800275c <nmea_GPGGA+0x328>)
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	f00a ffe7 	bl	800d428 <strtok>
 800245a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800245e:	e027      	b.n	80024b0 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002460:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002464:	f7fd fedc 	bl	8000220 <strlen>
 8002468:	4603      	mov	r3, r0
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8002470:	1c63      	adds	r3, r4, #1
 8002472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002476:	4610      	mov	r0, r2
 8002478:	f009 fde4 	bl	800c044 <malloc>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	00a3      	lsls	r3, r4, #2
 8002482:	33d8      	adds	r3, #216	@ 0xd8
 8002484:	443b      	add	r3, r7
 8002486:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800248a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800248e:	3b01      	subs	r3, #1
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	33d8      	adds	r3, #216	@ 0xd8
 8002494:	443b      	add	r3, r7
 8002496:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800249a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800249e:	4618      	mov	r0, r3
 80024a0:	f00b f8b7 	bl	800d612 <strcpy>
        marker = strtok(NULL, ",");
 80024a4:	49ad      	ldr	r1, [pc, #692]	@ (800275c <nmea_GPGGA+0x328>)
 80024a6:	2000      	movs	r0, #0
 80024a8:	f00a ffbe 	bl	800d428 <strtok>
 80024ac:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80024b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1d3      	bne.n	8002460 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80024b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 80024c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	332c      	adds	r3, #44	@ 0x2c
 80024cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f00b f89e 	bl	800d612 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80024d6:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80024da:	2b53      	cmp	r3, #83	@ 0x53
 80024dc:	d004      	beq.n	80024e8 <nmea_GPGGA+0xb4>
 80024de:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80024e2:	2b4e      	cmp	r3, #78	@ 0x4e
 80024e4:	f040 8159 	bne.w	800279a <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024ee:	e010      	b.n	8002512 <nmea_GPGGA+0xde>
 80024f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024f6:	4413      	add	r3, r2
 80024f8:	7819      	ldrb	r1, [r3, #0]
 80024fa:	f107 021c 	add.w	r2, r7, #28
 80024fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002502:	4413      	add	r3, r2
 8002504:	460a      	mov	r2, r1
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800250c:	3301      	adds	r3, #1
 800250e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002516:	2b01      	cmp	r3, #1
 8002518:	ddea      	ble.n	80024f0 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002520:	e011      	b.n	8002546 <nmea_GPGGA+0x112>
 8002522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002528:	3302      	adds	r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	7819      	ldrb	r1, [r3, #0]
 800252e:	f107 0214 	add.w	r2, r7, #20
 8002532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002536:	4413      	add	r3, r2
 8002538:	460a      	mov	r2, r1
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002540:	3301      	adds	r3, #1
 8002542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800254a:	2b05      	cmp	r3, #5
 800254c:	dde9      	ble.n	8002522 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	220a      	movs	r2, #10
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f00a fd14 	bl	800cf84 <strtol>
 800255c:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f00a fc2e 	bl	800cdc8 <strtof>
 800256c:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257c:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8002580:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 8002760 <nmea_GPGGA+0x32c>
 8002584:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258c:	ee17 0a90 	vmov	r0, s15
 8002590:	f7fe f802 	bl	8000598 <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025a2:	e010      	b.n	80025c6 <nmea_GPGGA+0x192>
 80025a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025aa:	4413      	add	r3, r2
 80025ac:	7819      	ldrb	r1, [r3, #0]
 80025ae:	f107 0210 	add.w	r2, r7, #16
 80025b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025b6:	4413      	add	r3, r2
 80025b8:	460a      	mov	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025c0:	3301      	adds	r3, #1
 80025c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	ddea      	ble.n	80025a4 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025d4:	e011      	b.n	80025fa <nmea_GPGGA+0x1c6>
 80025d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025dc:	3303      	adds	r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	7819      	ldrb	r1, [r3, #0]
 80025e2:	f107 0208 	add.w	r2, r7, #8
 80025e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025ea:	4413      	add	r3, r2
 80025ec:	460a      	mov	r2, r1
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025f4:	3301      	adds	r3, #1
 80025f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025fe:	2b05      	cmp	r3, #5
 8002600:	dde9      	ble.n	80025d6 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	220a      	movs	r2, #10
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f00a fcba 	bl	800cf84 <strtol>
 8002610:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f00a fbd4 	bl	800cdc8 <strtof>
 8002620:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002624:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002628:	ee07 3a90 	vmov	s15, r3
 800262c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002630:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002634:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 8002760 <nmea_GPGGA+0x32c>
 8002638:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800263c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002640:	ee17 0a90 	vmov	r0, s15
 8002644:	f7fd ffa8 	bl	8000598 <__aeabi_f2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800265c:	f7fe fa5c 	bl	8000b18 <__aeabi_dcmpeq>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d176      	bne.n	8002754 <nmea_GPGGA+0x320>
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002672:	f7fe fa51 	bl	8000b18 <__aeabi_dcmpeq>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d16b      	bne.n	8002754 <nmea_GPGGA+0x320>
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4b38      	ldr	r3, [pc, #224]	@ (8002764 <nmea_GPGGA+0x330>)
 8002682:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002686:	f7fe fa51 	bl	8000b2c <__aeabi_dcmplt>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d061      	beq.n	8002754 <nmea_GPGGA+0x320>
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	4b34      	ldr	r3, [pc, #208]	@ (8002768 <nmea_GPGGA+0x334>)
 8002696:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800269a:	f7fe fa47 	bl	8000b2c <__aeabi_dcmplt>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d057      	beq.n	8002754 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80026aa:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 80026b4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80026bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80026c6:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80026c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00a fb7b 	bl	800cdc8 <strtof>
 80026d2:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80026d6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80026da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	d102      	bne.n	80026ea <nmea_GPGGA+0x2b6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	e001      	b.n	80026ee <nmea_GPGGA+0x2ba>
 80026ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80026f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f4:	220a      	movs	r2, #10
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00a fc43 	bl	800cf84 <strtol>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002706:	220a      	movs	r2, #10
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f00a fc3a 	bl	800cf84 <strtol>
 8002710:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002714:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002718:	2b00      	cmp	r3, #0
 800271a:	bfcc      	ite	gt
 800271c:	2301      	movgt	r3, #1
 800271e:	2300      	movle	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8002728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f00a fb4b 	bl	800cdc8 <strtof>
 8002732:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8002736:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800273a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	d102      	bne.n	800274a <nmea_GPGGA+0x316>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	e001      	b.n	800274e <nmea_GPGGA+0x31a>
 800274a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002752:	e022      	b.n	800279a <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800275a:	e016      	b.n	800278a <nmea_GPGGA+0x356>
 800275c:	0800f868 	.word	0x0800f868
 8002760:	42700000 	.word	0x42700000
 8002764:	40568000 	.word	0x40568000
 8002768:	40668000 	.word	0x40668000
 800276c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	33d8      	adds	r3, #216	@ 0xd8
 8002774:	443b      	add	r3, r7
 8002776:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800277a:	4618      	mov	r0, r3
 800277c:	f009 fc6a 	bl	800c054 <free>
 8002780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002784:	3301      	adds	r3, #1
 8002786:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800278a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800278e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002792:	429a      	cmp	r2, r3
 8002794:	dbea      	blt.n	800276c <nmea_GPGGA+0x338>
            return 0;
 8002796:	2300      	movs	r3, #0
 8002798:	e019      	b.n	80027ce <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027a0:	e00e      	b.n	80027c0 <nmea_GPGGA+0x38c>
 80027a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	33d8      	adds	r3, #216	@ 0xd8
 80027aa:	443b      	add	r3, r7
 80027ac:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f009 fc4f 	bl	800c054 <free>
 80027b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027ba:	3301      	adds	r3, #1
 80027bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80027c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027c8:	429a      	cmp	r2, r3
 80027ca:	dbea      	blt.n	80027a2 <nmea_GPGGA+0x36e>
    return 1;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	37dc      	adds	r7, #220	@ 0xdc
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	bf00      	nop

080027d8 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b0a3      	sub	sp, #140	@ 0x8c
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	2264      	movs	r2, #100	@ 0x64
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00a fdff 	bl	800d3f4 <memset>
    char *marker = strtok(inputString, ",");
 80027f6:	493b      	ldr	r1, [pc, #236]	@ (80028e4 <nmea_GPGSA+0x10c>)
 80027f8:	6838      	ldr	r0, [r7, #0]
 80027fa:	f00a fe15 	bl	800d428 <strtok>
 80027fe:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8002802:	e027      	b.n	8002854 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002804:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002808:	f7fd fd0a 	bl	8000220 <strlen>
 800280c:	4603      	mov	r3, r0
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8002814:	1c63      	adds	r3, r4, #1
 8002816:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800281a:	4610      	mov	r0, r2
 800281c:	f009 fc12 	bl	800c044 <malloc>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	00a3      	lsls	r3, r4, #2
 8002826:	3388      	adds	r3, #136	@ 0x88
 8002828:	443b      	add	r3, r7
 800282a:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800282e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002832:	3b01      	subs	r3, #1
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	3388      	adds	r3, #136	@ 0x88
 8002838:	443b      	add	r3, r7
 800283a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800283e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002842:	4618      	mov	r0, r3
 8002844:	f00a fee5 	bl	800d612 <strcpy>
        marker = strtok(NULL, ",");
 8002848:	4926      	ldr	r1, [pc, #152]	@ (80028e4 <nmea_GPGSA+0x10c>)
 800284a:	2000      	movs	r0, #0
 800284c:	f00a fdec 	bl	800d428 <strtok>
 8002850:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8002854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1d3      	bne.n	8002804 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	220a      	movs	r2, #10
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f00a fb8e 	bl	800cf84 <strtol>
 8002868:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 800286a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800286c:	2b01      	cmp	r3, #1
 800286e:	bfcc      	ite	gt
 8002870:	2301      	movgt	r3, #1
 8002872:	2300      	movle	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8002880:	2303      	movs	r3, #3
 8002882:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002884:	e00e      	b.n	80028a4 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8002886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	3388      	adds	r3, #136	@ 0x88
 800288c:	443b      	add	r3, r7
 800288e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <nmea_GPGSA+0xc6>
            satelliteCount++;
 8002898:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800289a:	3301      	adds	r3, #1
 800289c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 800289e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028a0:	3301      	adds	r3, #1
 80028a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028a6:	2b0e      	cmp	r3, #14
 80028a8:	dded      	ble.n	8002886 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 80028b0:	2300      	movs	r3, #0
 80028b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80028b4:	e00b      	b.n	80028ce <nmea_GPGSA+0xf6>
 80028b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	3388      	adds	r3, #136	@ 0x88
 80028bc:	443b      	add	r3, r7
 80028be:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f009 fbc6 	bl	800c054 <free>
 80028c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ca:	3301      	adds	r3, #1
 80028cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80028ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80028d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028d4:	429a      	cmp	r2, r3
 80028d6:	dbee      	blt.n	80028b6 <nmea_GPGSA+0xde>
    return 1;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	4618      	mov	r0, r3
 80028dc:	378c      	adds	r7, #140	@ 0x8c
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}
 80028e2:	bf00      	nop
 80028e4:	0800f868 	.word	0x0800f868

080028e8 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b0a1      	sub	sp, #132	@ 0x84
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 80028f6:	f107 030c 	add.w	r3, r7, #12
 80028fa:	2264      	movs	r2, #100	@ 0x64
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f00a fd78 	bl	800d3f4 <memset>
    char *marker = strtok(inputString, ",");
 8002904:	4930      	ldr	r1, [pc, #192]	@ (80029c8 <nmea_GNRMC+0xe0>)
 8002906:	6838      	ldr	r0, [r7, #0]
 8002908:	f00a fd8e 	bl	800d428 <strtok>
 800290c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800290e:	e021      	b.n	8002954 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002910:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002912:	f7fd fc85 	bl	8000220 <strlen>
 8002916:	4603      	mov	r3, r0
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800291c:	1c63      	adds	r3, r4, #1
 800291e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002920:	4610      	mov	r0, r2
 8002922:	f009 fb8f 	bl	800c044 <malloc>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	00a3      	lsls	r3, r4, #2
 800292c:	3380      	adds	r3, #128	@ 0x80
 800292e:	443b      	add	r3, r7
 8002930:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8002934:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002936:	3b01      	subs	r3, #1
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3380      	adds	r3, #128	@ 0x80
 800293c:	443b      	add	r3, r7
 800293e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002942:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002944:	4618      	mov	r0, r3
 8002946:	f00a fe64 	bl	800d612 <strcpy>
        marker = strtok(NULL, ",");
 800294a:	491f      	ldr	r1, [pc, #124]	@ (80029c8 <nmea_GNRMC+0xe0>)
 800294c:	2000      	movs	r0, #0
 800294e:	f00a fd6b 	bl	800d428 <strtok>
 8002952:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8002954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1da      	bne.n	8002910 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 800295a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f00a fa32 	bl	800cdc8 <strtof>
 8002964:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 8002968:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800296a:	f7fd fe15 	bl	8000598 <__aeabi_f2d>
 800296e:	a314      	add	r3, pc, #80	@ (adr r3, 80029c0 <nmea_GNRMC+0xd8>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd ff92 	bl	800089c <__aeabi_ddiv>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f7fe f932 	bl	8000be8 <__aeabi_d2f>
 8002984:	4602      	mov	r2, r0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 800298a:	2300      	movs	r3, #0
 800298c:	677b      	str	r3, [r7, #116]	@ 0x74
 800298e:	e00b      	b.n	80029a8 <nmea_GNRMC+0xc0>
 8002990:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	3380      	adds	r3, #128	@ 0x80
 8002996:	443b      	add	r3, r7
 8002998:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800299c:	4618      	mov	r0, r3
 800299e:	f009 fb59 	bl	800c054 <free>
 80029a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029a4:	3301      	adds	r3, #1
 80029a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80029a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80029aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbef      	blt.n	8002990 <nmea_GNRMC+0xa8>
    return 1;
 80029b0:	2301      	movs	r3, #1
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3784      	adds	r7, #132	@ 0x84
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd90      	pop	{r4, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	f3af 8000 	nop.w
 80029c0:	be76c8b4 	.word	0xbe76c8b4
 80029c4:	3fff1a9f 	.word	0x3fff1a9f
 80029c8:	0800f868 	.word	0x0800f868

080029cc <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 80029d6:	223c      	movs	r2, #60	@ 0x3c
 80029d8:	2100      	movs	r1, #0
 80029da:	484e      	ldr	r0, [pc, #312]	@ (8002b14 <nmea_parse+0x148>)
 80029dc:	f00a fd0a 	bl	800d3f4 <memset>
    char * token = strtok(buffer, "$");
 80029e0:	494d      	ldr	r1, [pc, #308]	@ (8002b18 <nmea_parse+0x14c>)
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	f00a fd20 	bl	800d428 <strtok>
 80029e8:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80029ee:	e01d      	b.n	8002a2c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80029f0:	6978      	ldr	r0, [r7, #20]
 80029f2:	f7fd fc15 	bl	8000220 <strlen>
 80029f6:	4603      	mov	r3, r0
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	693c      	ldr	r4, [r7, #16]
 80029fc:	1c63      	adds	r3, r4, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	4610      	mov	r0, r2
 8002a02:	f009 fb1f 	bl	800c044 <malloc>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b42      	ldr	r3, [pc, #264]	@ (8002b14 <nmea_parse+0x148>)
 8002a0c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	4a3f      	ldr	r2, [pc, #252]	@ (8002b14 <nmea_parse+0x148>)
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	6979      	ldr	r1, [r7, #20]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00a fdf8 	bl	800d612 <strcpy>
        token = strtok(NULL, "$");
 8002a22:	493d      	ldr	r1, [pc, #244]	@ (8002b18 <nmea_parse+0x14c>)
 8002a24:	2000      	movs	r0, #0
 8002a26:	f00a fcff 	bl	800d428 <strtok>
 8002a2a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1de      	bne.n	80029f0 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e052      	b.n	8002ade <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002a38:	4a36      	ldr	r2, [pc, #216]	@ (8002b14 <nmea_parse+0x148>)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a40:	4936      	ldr	r1, [pc, #216]	@ (8002b1c <nmea_parse+0x150>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00a fd4c 	bl	800d4e0 <strstr>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d044      	beq.n	8002ad8 <nmea_parse+0x10c>
 8002a4e:	4a31      	ldr	r2, [pc, #196]	@ (8002b14 <nmea_parse+0x148>)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fca2 	bl	80023a0 <gps_checksum>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d03a      	beq.n	8002ad8 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8002a62:	4a2c      	ldr	r2, [pc, #176]	@ (8002b14 <nmea_parse+0x148>)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6a:	492d      	ldr	r1, [pc, #180]	@ (8002b20 <nmea_parse+0x154>)
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00a fd37 	bl	800d4e0 <strstr>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8002a78:	4a26      	ldr	r2, [pc, #152]	@ (8002b14 <nmea_parse+0x148>)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ff30 	bl	80028e8 <nmea_GNRMC>
 8002a88:	e026      	b.n	8002ad8 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8002a8a:	4a22      	ldr	r2, [pc, #136]	@ (8002b14 <nmea_parse+0x148>)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a92:	4924      	ldr	r1, [pc, #144]	@ (8002b24 <nmea_parse+0x158>)
 8002a94:	4618      	mov	r0, r3
 8002a96:	f00a fd23 	bl	800d4e0 <strstr>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <nmea_parse+0x148>)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fe94 	bl	80027d8 <nmea_GPGSA>
 8002ab0:	e012      	b.n	8002ad8 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8002ab2:	4a18      	ldr	r2, [pc, #96]	@ (8002b14 <nmea_parse+0x148>)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	491b      	ldr	r1, [pc, #108]	@ (8002b28 <nmea_parse+0x15c>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f00a fd0f 	bl	800d4e0 <strstr>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002ac8:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <nmea_parse+0x148>)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fcae 	bl	8002434 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	dba8      	blt.n	8002a38 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	e009      	b.n	8002b00 <nmea_parse+0x134>
 8002aec:	4a09      	ldr	r2, [pc, #36]	@ (8002b14 <nmea_parse+0x148>)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f009 faad 	bl	800c054 <free>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3301      	adds	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbf1      	blt.n	8002aec <nmea_parse+0x120>


}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd90      	pop	{r4, r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200008d0 	.word	0x200008d0
 8002b18:	0800f86c 	.word	0x0800f86c
 8002b1c:	0800f870 	.word	0x0800f870
 8002b20:	0800f874 	.word	0x0800f874
 8002b24:	0800f87c 	.word	0x0800f87c
 8002b28:	0800f884 	.word	0x0800f884

08002b2c <Init_servo>:
#include "tim.h"




HAL_StatusTypeDef Init_servo(void){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <Init_servo+0x1c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8002b38:	635a      	str	r2, [r3, #52]	@ 0x34
	  return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4802      	ldr	r0, [pc, #8]	@ (8002b48 <Init_servo+0x1c>)
 8002b3e:	f005 fe39 	bl	80087b4 <HAL_TIM_PWM_Start>
 8002b42:	4603      	mov	r3, r0




}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000e48 	.word	0x20000e48

08002b4c <release_mecanism>:
void release_mecanism(void){
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <release_mecanism+0x18>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8002b58:	635a      	str	r2, [r3, #52]	@ 0x34


}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	20000e48 	.word	0x20000e48

08002b68 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af04      	add	r7, sp, #16
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	9302      	str	r3, [sp, #8]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2301      	movs	r3, #1
 8002b92:	2200      	movs	r2, #0
 8002b94:	2178      	movs	r1, #120	@ 0x78
 8002b96:	4803      	ldr	r0, [pc, #12]	@ (8002ba4 <ssd1306_WriteCommand+0x2c>)
 8002b98:	f003 ff8e 	bl	8006ab8 <HAL_I2C_Mem_Write>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000340 	.word	0x20000340

08002ba8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af04      	add	r7, sp, #16
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bba:	9202      	str	r2, [sp, #8]
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	2240      	movs	r2, #64	@ 0x40
 8002bc6:	2178      	movs	r1, #120	@ 0x78
 8002bc8:	4803      	ldr	r0, [pc, #12]	@ (8002bd8 <ssd1306_WriteData+0x30>)
 8002bca:	f003 ff75 	bl	8006ab8 <HAL_I2C_Mem_Write>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000340 	.word	0x20000340

08002bdc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002be0:	f7ff ffc2 	bl	8002b68 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002be4:	2064      	movs	r0, #100	@ 0x64
 8002be6:	f001 fbf1 	bl	80043cc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002bea:	2000      	movs	r0, #0
 8002bec:	f000 f9ce 	bl	8002f8c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002bf0:	2020      	movs	r0, #32
 8002bf2:	f7ff ffc1 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7ff ffbe 	bl	8002b78 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002bfc:	20b0      	movs	r0, #176	@ 0xb0
 8002bfe:	f7ff ffbb 	bl	8002b78 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002c02:	20c8      	movs	r0, #200	@ 0xc8
 8002c04:	f7ff ffb8 	bl	8002b78 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff ffb5 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002c0e:	2010      	movs	r0, #16
 8002c10:	f7ff ffb2 	bl	8002b78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002c14:	2040      	movs	r0, #64	@ 0x40
 8002c16:	f7ff ffaf 	bl	8002b78 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002c1a:	20ff      	movs	r0, #255	@ 0xff
 8002c1c:	f000 f9a2 	bl	8002f64 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002c20:	20a1      	movs	r0, #161	@ 0xa1
 8002c22:	f7ff ffa9 	bl	8002b78 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002c26:	20a6      	movs	r0, #166	@ 0xa6
 8002c28:	f7ff ffa6 	bl	8002b78 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002c2c:	20a8      	movs	r0, #168	@ 0xa8
 8002c2e:	f7ff ffa3 	bl	8002b78 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002c32:	203f      	movs	r0, #63	@ 0x3f
 8002c34:	f7ff ffa0 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002c38:	20a4      	movs	r0, #164	@ 0xa4
 8002c3a:	f7ff ff9d 	bl	8002b78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002c3e:	20d3      	movs	r0, #211	@ 0xd3
 8002c40:	f7ff ff9a 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7ff ff97 	bl	8002b78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002c4a:	20d5      	movs	r0, #213	@ 0xd5
 8002c4c:	f7ff ff94 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002c50:	20f0      	movs	r0, #240	@ 0xf0
 8002c52:	f7ff ff91 	bl	8002b78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002c56:	20d9      	movs	r0, #217	@ 0xd9
 8002c58:	f7ff ff8e 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002c5c:	2022      	movs	r0, #34	@ 0x22
 8002c5e:	f7ff ff8b 	bl	8002b78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002c62:	20da      	movs	r0, #218	@ 0xda
 8002c64:	f7ff ff88 	bl	8002b78 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002c68:	2012      	movs	r0, #18
 8002c6a:	f7ff ff85 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002c6e:	20db      	movs	r0, #219	@ 0xdb
 8002c70:	f7ff ff82 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002c74:	2020      	movs	r0, #32
 8002c76:	f7ff ff7f 	bl	8002b78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002c7a:	208d      	movs	r0, #141	@ 0x8d
 8002c7c:	f7ff ff7c 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002c80:	2014      	movs	r0, #20
 8002c82:	f7ff ff79 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002c86:	2001      	movs	r0, #1
 8002c88:	f000 f980 	bl	8002f8c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f000 f80f 	bl	8002cb0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002c92:	f000 f825 	bl	8002ce0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002c96:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <ssd1306_Init+0xd0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	@ (8002cac <ssd1306_Init+0xd0>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002ca2:	4b02      	ldr	r3, [pc, #8]	@ (8002cac <ssd1306_Init+0xd0>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	711a      	strb	r2, [r3, #4]
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000d0c 	.word	0x20000d0c

08002cb0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <ssd1306_Fill+0x14>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <ssd1306_Fill+0x16>
 8002cc4:	23ff      	movs	r3, #255	@ 0xff
 8002cc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4803      	ldr	r0, [pc, #12]	@ (8002cdc <ssd1306_Fill+0x2c>)
 8002cce:	f00a fb91 	bl	800d3f4 <memset>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000090c 	.word	0x2000090c

08002ce0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	71fb      	strb	r3, [r7, #7]
 8002cea:	e016      	b.n	8002d1a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	3b50      	subs	r3, #80	@ 0x50
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff40 	bl	8002b78 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff ff3d 	bl	8002b78 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002cfe:	2010      	movs	r0, #16
 8002d00:	f7ff ff3a 	bl	8002b78 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	01db      	lsls	r3, r3, #7
 8002d08:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <ssd1306_UpdateScreen+0x4c>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	2180      	movs	r1, #128	@ 0x80
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff4a 	bl	8002ba8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	3301      	adds	r3, #1
 8002d18:	71fb      	strb	r3, [r7, #7]
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	2b07      	cmp	r3, #7
 8002d1e:	d9e5      	bls.n	8002cec <ssd1306_UpdateScreen+0xc>
    }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	2000090c 	.word	0x2000090c

08002d30 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	71bb      	strb	r3, [r7, #6]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db3d      	blt.n	8002dc6 <ssd1306_DrawPixel+0x96>
 8002d4a:	79bb      	ldrb	r3, [r7, #6]
 8002d4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d4e:	d83a      	bhi.n	8002dc6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002d50:	797b      	ldrb	r3, [r7, #5]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d11a      	bne.n	8002d8c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	79bb      	ldrb	r3, [r7, #6]
 8002d5a:	08db      	lsrs	r3, r3, #3
 8002d5c:	b2d8      	uxtb	r0, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	01db      	lsls	r3, r3, #7
 8002d62:	4413      	add	r3, r2
 8002d64:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd4 <ssd1306_DrawPixel+0xa4>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	b25a      	sxtb	r2, r3
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	b259      	sxtb	r1, r3
 8002d7c:	79fa      	ldrb	r2, [r7, #7]
 8002d7e:	4603      	mov	r3, r0
 8002d80:	01db      	lsls	r3, r3, #7
 8002d82:	4413      	add	r3, r2
 8002d84:	b2c9      	uxtb	r1, r1
 8002d86:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <ssd1306_DrawPixel+0xa4>)
 8002d88:	54d1      	strb	r1, [r2, r3]
 8002d8a:	e01d      	b.n	8002dc8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	79bb      	ldrb	r3, [r7, #6]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	b2d8      	uxtb	r0, r3
 8002d94:	4603      	mov	r3, r0
 8002d96:	01db      	lsls	r3, r3, #7
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd4 <ssd1306_DrawPixel+0xa4>)
 8002d9c:	5cd3      	ldrb	r3, [r2, r3]
 8002d9e:	b25a      	sxtb	r2, r3
 8002da0:	79bb      	ldrb	r3, [r7, #6]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	4013      	ands	r3, r2
 8002db4:	b259      	sxtb	r1, r3
 8002db6:	79fa      	ldrb	r2, [r7, #7]
 8002db8:	4603      	mov	r3, r0
 8002dba:	01db      	lsls	r3, r3, #7
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b2c9      	uxtb	r1, r1
 8002dc0:	4a04      	ldr	r2, [pc, #16]	@ (8002dd4 <ssd1306_DrawPixel+0xa4>)
 8002dc2:	54d1      	strb	r1, [r2, r3]
 8002dc4:	e000      	b.n	8002dc8 <ssd1306_DrawPixel+0x98>
        return;
 8002dc6:	bf00      	nop
    }
}
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	2000090c 	.word	0x2000090c

08002dd8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b089      	sub	sp, #36	@ 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4604      	mov	r4, r0
 8002de0:	1d38      	adds	r0, r7, #4
 8002de2:	e880 0006 	stmia.w	r0, {r1, r2}
 8002de6:	461a      	mov	r2, r3
 8002de8:	4623      	mov	r3, r4
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	4613      	mov	r3, r2
 8002dee:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b1f      	cmp	r3, #31
 8002df4:	d902      	bls.n	8002dfc <ssd1306_WriteChar+0x24>
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b7e      	cmp	r3, #126	@ 0x7e
 8002dfa:	d901      	bls.n	8002e00 <ssd1306_WriteChar+0x28>
        return 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e06c      	b.n	8002eda <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002e00:	4b38      	ldr	r3, [pc, #224]	@ (8002ee4 <ssd1306_WriteChar+0x10c>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	793b      	ldrb	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	2b80      	cmp	r3, #128	@ 0x80
 8002e0c:	dc06      	bgt.n	8002e1c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002e0e:	4b35      	ldr	r3, [pc, #212]	@ (8002ee4 <ssd1306_WriteChar+0x10c>)
 8002e10:	885b      	ldrh	r3, [r3, #2]
 8002e12:	461a      	mov	r2, r3
 8002e14:	797b      	ldrb	r3, [r7, #5]
 8002e16:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002e18:	2b40      	cmp	r3, #64	@ 0x40
 8002e1a:	dd01      	ble.n	8002e20 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e05c      	b.n	8002eda <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	e04c      	b.n	8002ec0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	3b20      	subs	r3, #32
 8002e2c:	7979      	ldrb	r1, [r7, #5]
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4619      	mov	r1, r3
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	440b      	add	r3, r1
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	e034      	b.n	8002eb0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d012      	beq.n	8002e7c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002e56:	4b23      	ldr	r3, [pc, #140]	@ (8002ee4 <ssd1306_WriteChar+0x10c>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	b2d8      	uxtb	r0, r3
 8002e64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <ssd1306_WriteChar+0x10c>)
 8002e66:	885b      	ldrh	r3, [r3, #2]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	7bba      	ldrb	r2, [r7, #14]
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7ff ff5b 	bl	8002d30 <ssd1306_DrawPixel>
 8002e7a:	e016      	b.n	8002eaa <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002e7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ee4 <ssd1306_WriteChar+0x10c>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	b2d8      	uxtb	r0, r3
 8002e8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ee4 <ssd1306_WriteChar+0x10c>)
 8002e8c:	885b      	ldrh	r3, [r3, #2]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	b2d9      	uxtb	r1, r3
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f7ff ff43 	bl	8002d30 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	793b      	ldrb	r3, [r7, #4]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d3c5      	bcc.n	8002e46 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	797b      	ldrb	r3, [r7, #5]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d3ad      	bcc.n	8002e26 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <ssd1306_WriteChar+0x10c>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	793a      	ldrb	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <ssd1306_WriteChar+0x10c>)
 8002ed6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	@ 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000d0c 	.word	0x20000d0c

08002ee8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	1d38      	adds	r0, r7, #4
 8002ef2:	e880 0006 	stmia.w	r0, {r1, r2}
 8002ef6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002ef8:	e012      	b.n	8002f20 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	7818      	ldrb	r0, [r3, #0]
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	1d3a      	adds	r2, r7, #4
 8002f02:	ca06      	ldmia	r2, {r1, r2}
 8002f04:	f7ff ff68 	bl	8002dd8 <ssd1306_WriteChar>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d002      	beq.n	8002f1a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	e008      	b.n	8002f2c <ssd1306_WriteString+0x44>
        }
        str++;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e8      	bne.n	8002efa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	71fb      	strb	r3, [r7, #7]
 8002f40:	4613      	mov	r3, r2
 8002f42:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <ssd1306_SetCursor+0x2c>)
 8002f4a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002f4c:	79bb      	ldrb	r3, [r7, #6]
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <ssd1306_SetCursor+0x2c>)
 8002f52:	805a      	strh	r2, [r3, #2]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	20000d0c 	.word	0x20000d0c

08002f64 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002f6e:	2381      	movs	r3, #129	@ 0x81
 8002f70:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fdff 	bl	8002b78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fdfb 	bl	8002b78 <ssd1306_WriteCommand>
}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002f9c:	23af      	movs	r3, #175	@ 0xaf
 8002f9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002fa0:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <ssd1306_SetDisplayOn+0x38>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	715a      	strb	r2, [r3, #5]
 8002fa6:	e004      	b.n	8002fb2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002fa8:	23ae      	movs	r3, #174	@ 0xae
 8002faa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <ssd1306_SetDisplayOn+0x38>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fddf 	bl	8002b78 <ssd1306_WriteCommand>
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000d0c 	.word	0x20000d0c

08002fc8 <statemachine>:
extern int flag_drop;

int send_data_len=0;


void statemachine(void){
 8002fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af06      	add	r7, sp, #24

	switch(state){
 8002fd0:	4b94      	ldr	r3, [pc, #592]	@ (8003224 <statemachine+0x25c>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	f000 80fc 	beq.w	80031d2 <statemachine+0x20a>
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	f300 811d 	bgt.w	800321a <statemachine+0x252>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <statemachine+0x24>
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f000 8085 	beq.w	80030f4 <statemachine+0x12c>


	}


}
 8002fea:	e116      	b.n	800321a <statemachine+0x252>
			if (vbat <= 7){
 8002fec:	4b8e      	ldr	r3, [pc, #568]	@ (8003228 <statemachine+0x260>)
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8002ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	d81d      	bhi.n	800303c <statemachine+0x74>
				ssd1306_Fill(Black);
 8003000:	2000      	movs	r0, #0
 8003002:	f7ff fe55 	bl	8002cb0 <ssd1306_Fill>
				ssd1306_SetCursor(32, 40);
 8003006:	2128      	movs	r1, #40	@ 0x28
 8003008:	2020      	movs	r0, #32
 800300a:	f7ff ff93 	bl	8002f34 <ssd1306_SetCursor>
				ssd1306_WriteString("BAT LOW", Font_7x10, White);
 800300e:	4a87      	ldr	r2, [pc, #540]	@ (800322c <statemachine+0x264>)
 8003010:	2301      	movs	r3, #1
 8003012:	ca06      	ldmia	r2, {r1, r2}
 8003014:	4886      	ldr	r0, [pc, #536]	@ (8003230 <statemachine+0x268>)
 8003016:	f7ff ff67 	bl	8002ee8 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800301a:	f7ff fe61 	bl	8002ce0 <ssd1306_UpdateScreen>
				send_data_len=snprintf((char *) buffertosend,224,"$2,batterie faible#");
 800301e:	4a85      	ldr	r2, [pc, #532]	@ (8003234 <statemachine+0x26c>)
 8003020:	21e0      	movs	r1, #224	@ 0xe0
 8003022:	4885      	ldr	r0, [pc, #532]	@ (8003238 <statemachine+0x270>)
 8003024:	f00a f8d8 	bl	800d1d8 <sniprintf>
 8003028:	4603      	mov	r3, r0
 800302a:	4a84      	ldr	r2, [pc, #528]	@ (800323c <statemachine+0x274>)
 800302c:	6013      	str	r3, [r2, #0]
				SEND_DATA_NETW((uint8_t *) buffertosend, 0x82, GROUND_ADDR, send_data_len);
 800302e:	4b83      	ldr	r3, [pc, #524]	@ (800323c <statemachine+0x274>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2201      	movs	r2, #1
 8003034:	2182      	movs	r1, #130	@ 0x82
 8003036:	4880      	ldr	r0, [pc, #512]	@ (8003238 <statemachine+0x270>)
 8003038:	f000 fbea 	bl	8003810 <SEND_DATA_NETW>
			if(flag_calib==0){
 800303c:	4b80      	ldr	r3, [pc, #512]	@ (8003240 <statemachine+0x278>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d127      	bne.n	8003094 <statemachine+0xcc>
				ssd1306_Fill(Black);
 8003044:	2000      	movs	r0, #0
 8003046:	f7ff fe33 	bl	8002cb0 <ssd1306_Fill>
				ssd1306_SetCursor(32, 32);
 800304a:	2120      	movs	r1, #32
 800304c:	2020      	movs	r0, #32
 800304e:	f7ff ff71 	bl	8002f34 <ssd1306_SetCursor>
				ssd1306_WriteString("attention", Font_7x10, White);
 8003052:	4a76      	ldr	r2, [pc, #472]	@ (800322c <statemachine+0x264>)
 8003054:	2301      	movs	r3, #1
 8003056:	ca06      	ldmia	r2, {r1, r2}
 8003058:	487a      	ldr	r0, [pc, #488]	@ (8003244 <statemachine+0x27c>)
 800305a:	f7ff ff45 	bl	8002ee8 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 42);
 800305e:	212a      	movs	r1, #42	@ 0x2a
 8003060:	2020      	movs	r0, #32
 8003062:	f7ff ff67 	bl	8002f34 <ssd1306_SetCursor>
				ssd1306_WriteString("alt_calib", Font_7x10, White);
 8003066:	4a71      	ldr	r2, [pc, #452]	@ (800322c <statemachine+0x264>)
 8003068:	2301      	movs	r3, #1
 800306a:	ca06      	ldmia	r2, {r1, r2}
 800306c:	4876      	ldr	r0, [pc, #472]	@ (8003248 <statemachine+0x280>)
 800306e:	f7ff ff3b 	bl	8002ee8 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8003072:	f7ff fe35 	bl	8002ce0 <ssd1306_UpdateScreen>
				send_data_len=snprintf((char *) buffertosend,224,"$2,[top]altitude non calibre#");
 8003076:	4a75      	ldr	r2, [pc, #468]	@ (800324c <statemachine+0x284>)
 8003078:	21e0      	movs	r1, #224	@ 0xe0
 800307a:	486f      	ldr	r0, [pc, #444]	@ (8003238 <statemachine+0x270>)
 800307c:	f00a f8ac 	bl	800d1d8 <sniprintf>
 8003080:	4603      	mov	r3, r0
 8003082:	4a6e      	ldr	r2, [pc, #440]	@ (800323c <statemachine+0x274>)
 8003084:	6013      	str	r3, [r2, #0]
				SEND_DATA_NETW((uint8_t *) buffertosend, 0x82,  GROUND_ADDR, send_data_len);
 8003086:	4b6d      	ldr	r3, [pc, #436]	@ (800323c <statemachine+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	2182      	movs	r1, #130	@ 0x82
 800308e:	486a      	ldr	r0, [pc, #424]	@ (8003238 <statemachine+0x270>)
 8003090:	f000 fbbe 	bl	8003810 <SEND_DATA_NETW>
			if (myDataGPS.fix == 0){
 8003094:	4b6e      	ldr	r3, [pc, #440]	@ (8003250 <statemachine+0x288>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d11a      	bne.n	80030d2 <statemachine+0x10a>
					send_data_len=snprintf((char *) buffertosend,224,"$2,pas de GPS#");
 800309c:	4a6d      	ldr	r2, [pc, #436]	@ (8003254 <statemachine+0x28c>)
 800309e:	21e0      	movs	r1, #224	@ 0xe0
 80030a0:	4865      	ldr	r0, [pc, #404]	@ (8003238 <statemachine+0x270>)
 80030a2:	f00a f899 	bl	800d1d8 <sniprintf>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4a64      	ldr	r2, [pc, #400]	@ (800323c <statemachine+0x274>)
 80030aa:	6013      	str	r3, [r2, #0]
					SEND_DATA_NETW((uint8_t *) buffertosend, 0x82,  GROUND_ADDR, send_data_len);
 80030ac:	4b63      	ldr	r3, [pc, #396]	@ (800323c <statemachine+0x274>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	2182      	movs	r1, #130	@ 0x82
 80030b4:	4860      	ldr	r0, [pc, #384]	@ (8003238 <statemachine+0x270>)
 80030b6:	f000 fbab 	bl	8003810 <SEND_DATA_NETW>
					ssd1306_SetCursor(32, 52);
 80030ba:	2134      	movs	r1, #52	@ 0x34
 80030bc:	2020      	movs	r0, #32
 80030be:	f7ff ff39 	bl	8002f34 <ssd1306_SetCursor>
					ssd1306_WriteString("gps_fix", Font_7x10, White);
 80030c2:	4a5a      	ldr	r2, [pc, #360]	@ (800322c <statemachine+0x264>)
 80030c4:	2301      	movs	r3, #1
 80030c6:	ca06      	ldmia	r2, {r1, r2}
 80030c8:	4863      	ldr	r0, [pc, #396]	@ (8003258 <statemachine+0x290>)
 80030ca:	f7ff ff0d 	bl	8002ee8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 80030ce:	f7ff fe07 	bl	8002ce0 <ssd1306_UpdateScreen>
			if((flag_drop==1) && (flag_calib==1)){
 80030d2:	4b62      	ldr	r3, [pc, #392]	@ (800325c <statemachine+0x294>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	f040 809e 	bne.w	8003218 <statemachine+0x250>
 80030dc:	4b58      	ldr	r3, [pc, #352]	@ (8003240 <statemachine+0x278>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	f040 8099 	bne.w	8003218 <statemachine+0x250>
				state++;
 80030e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003224 <statemachine+0x25c>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003224 <statemachine+0x25c>)
 80030f0:	701a      	strb	r2, [r3, #0]
		break;
 80030f2:	e091      	b.n	8003218 <statemachine+0x250>
		send_data_len=snprintf((char *) buffertosend,224,"$3,0.7f,0.7f,0.2f#",myDataGPS.latitude,myDataGPS.longitude,myDatabmp581.altitude);
 80030f4:	4b56      	ldr	r3, [pc, #344]	@ (8003250 <statemachine+0x288>)
 80030f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030fa:	4b55      	ldr	r3, [pc, #340]	@ (8003250 <statemachine+0x288>)
 80030fc:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003100:	4b57      	ldr	r3, [pc, #348]	@ (8003260 <statemachine+0x298>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fa47 	bl	8000598 <__aeabi_f2d>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003112:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003116:	e9cd 4500 	strd	r4, r5, [sp]
 800311a:	4a52      	ldr	r2, [pc, #328]	@ (8003264 <statemachine+0x29c>)
 800311c:	21e0      	movs	r1, #224	@ 0xe0
 800311e:	4846      	ldr	r0, [pc, #280]	@ (8003238 <statemachine+0x270>)
 8003120:	f00a f85a 	bl	800d1d8 <sniprintf>
 8003124:	4603      	mov	r3, r0
 8003126:	4a45      	ldr	r2, [pc, #276]	@ (800323c <statemachine+0x274>)
 8003128:	6013      	str	r3, [r2, #0]
		SEND_DATA_NETW((uint8_t *) buffertosend, 0x82, GROUND_ADDR, send_data_len);
 800312a:	4b44      	ldr	r3, [pc, #272]	@ (800323c <statemachine+0x274>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2201      	movs	r2, #1
 8003130:	2182      	movs	r1, #130	@ 0x82
 8003132:	4841      	ldr	r0, [pc, #260]	@ (8003238 <statemachine+0x270>)
 8003134:	f000 fb6c 	bl	8003810 <SEND_DATA_NETW>
		if((myDatabmp581.altitude-hauteur_Initiale)<=60.0){
 8003138:	4b49      	ldr	r3, [pc, #292]	@ (8003260 <statemachine+0x298>)
 800313a:	ed93 7a05 	vldr	s14, [r3, #20]
 800313e:	4b4a      	ldr	r3, [pc, #296]	@ (8003268 <statemachine+0x2a0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800314a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800314e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800326c <statemachine+0x2a4>
 8003152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315a:	d900      	bls.n	800315e <statemachine+0x196>
		break;
 800315c:	e05d      	b.n	800321a <statemachine+0x252>
			state++;
 800315e:	4b31      	ldr	r3, [pc, #196]	@ (8003224 <statemachine+0x25c>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4b2f      	ldr	r3, [pc, #188]	@ (8003224 <statemachine+0x25c>)
 8003168:	701a      	strb	r2, [r3, #0]
			release_mecanism();
 800316a:	f7ff fcef 	bl	8002b4c <release_mecanism>
			send_data_len=snprintf((char *) buffertosend,224,"$1,separation#");
 800316e:	4a40      	ldr	r2, [pc, #256]	@ (8003270 <statemachine+0x2a8>)
 8003170:	21e0      	movs	r1, #224	@ 0xe0
 8003172:	4831      	ldr	r0, [pc, #196]	@ (8003238 <statemachine+0x270>)
 8003174:	f00a f830 	bl	800d1d8 <sniprintf>
 8003178:	4603      	mov	r3, r0
 800317a:	4a30      	ldr	r2, [pc, #192]	@ (800323c <statemachine+0x274>)
 800317c:	6013      	str	r3, [r2, #0]
			SEND_DATA_NETW((uint8_t *) buffertosend, 0x82, GROUND_ADDR, send_data_len);
 800317e:	4b2f      	ldr	r3, [pc, #188]	@ (800323c <statemachine+0x274>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2201      	movs	r2, #1
 8003184:	2182      	movs	r1, #130	@ 0x82
 8003186:	482c      	ldr	r0, [pc, #176]	@ (8003238 <statemachine+0x270>)
 8003188:	f000 fb42 	bl	8003810 <SEND_DATA_NETW>
			send_data_len=snprintf((char *) buffertosend,224,"$1,0.2f\n\r",(myDatabmp581.altitude-hauteur_Initiale));
 800318c:	4b34      	ldr	r3, [pc, #208]	@ (8003260 <statemachine+0x298>)
 800318e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003192:	4b35      	ldr	r3, [pc, #212]	@ (8003268 <statemachine+0x2a0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a2:	ee17 0a90 	vmov	r0, s15
 80031a6:	f7fd f9f7 	bl	8000598 <__aeabi_f2d>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	e9cd 2300 	strd	r2, r3, [sp]
 80031b2:	4a30      	ldr	r2, [pc, #192]	@ (8003274 <statemachine+0x2ac>)
 80031b4:	21e0      	movs	r1, #224	@ 0xe0
 80031b6:	4820      	ldr	r0, [pc, #128]	@ (8003238 <statemachine+0x270>)
 80031b8:	f00a f80e 	bl	800d1d8 <sniprintf>
 80031bc:	4603      	mov	r3, r0
 80031be:	4a1f      	ldr	r2, [pc, #124]	@ (800323c <statemachine+0x274>)
 80031c0:	6013      	str	r3, [r2, #0]
			SEND_DATA_NETW((uint8_t *) buffertosend, 0x82, BOTTOM_ADDR, send_data_len);
 80031c2:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <statemachine+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2268      	movs	r2, #104	@ 0x68
 80031c8:	2182      	movs	r1, #130	@ 0x82
 80031ca:	481b      	ldr	r0, [pc, #108]	@ (8003238 <statemachine+0x270>)
 80031cc:	f000 fb20 	bl	8003810 <SEND_DATA_NETW>
		break;
 80031d0:	e023      	b.n	800321a <statemachine+0x252>
		send_data_len=snprintf((char *) buffertosend,224,"$3,0.7f,0.7f,0.2f#",myDataGPS.latitude,myDataGPS.longitude,myDatabmp581.altitude);
 80031d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003250 <statemachine+0x288>)
 80031d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <statemachine+0x288>)
 80031da:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 80031de:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <statemachine+0x298>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f9d8 	bl	8000598 <__aeabi_f2d>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80031f4:	e9cd 4500 	strd	r4, r5, [sp]
 80031f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003264 <statemachine+0x29c>)
 80031fa:	21e0      	movs	r1, #224	@ 0xe0
 80031fc:	480e      	ldr	r0, [pc, #56]	@ (8003238 <statemachine+0x270>)
 80031fe:	f009 ffeb 	bl	800d1d8 <sniprintf>
 8003202:	4603      	mov	r3, r0
 8003204:	4a0d      	ldr	r2, [pc, #52]	@ (800323c <statemachine+0x274>)
 8003206:	6013      	str	r3, [r2, #0]
		SEND_DATA_NETW((uint8_t *) buffertosend, 0x82, BOTTOM_ADDR, send_data_len);
 8003208:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <statemachine+0x274>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2268      	movs	r2, #104	@ 0x68
 800320e:	2182      	movs	r1, #130	@ 0x82
 8003210:	4809      	ldr	r0, [pc, #36]	@ (8003238 <statemachine+0x270>)
 8003212:	f000 fafd 	bl	8003810 <SEND_DATA_NETW>
		break;
 8003216:	e000      	b.n	800321a <statemachine+0x252>
		break;
 8003218:	bf00      	nop
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003222:	bf00      	nop
 8003224:	200008be 	.word	0x200008be
 8003228:	200003a4 	.word	0x200003a4
 800322c:	20000008 	.word	0x20000008
 8003230:	0800f88c 	.word	0x0800f88c
 8003234:	0800f894 	.word	0x0800f894
 8003238:	20000d14 	.word	0x20000d14
 800323c:	20000df4 	.word	0x20000df4
 8003240:	200008c8 	.word	0x200008c8
 8003244:	0800f8a8 	.word	0x0800f8a8
 8003248:	0800f8b4 	.word	0x0800f8b4
 800324c:	0800f8c0 	.word	0x0800f8c0
 8003250:	20000710 	.word	0x20000710
 8003254:	0800f8e0 	.word	0x0800f8e0
 8003258:	0800f8f0 	.word	0x0800f8f0
 800325c:	200008c0 	.word	0x200008c0
 8003260:	20000770 	.word	0x20000770
 8003264:	0800f8f8 	.word	0x0800f8f8
 8003268:	200008c4 	.word	0x200008c4
 800326c:	42700000 	.word	0x42700000
 8003270:	0800f90c 	.word	0x0800f90c
 8003274:	0800f91c 	.word	0x0800f91c

08003278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <HAL_MspInit+0x44>)
 8003280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003282:	4a0e      	ldr	r2, [pc, #56]	@ (80032bc <HAL_MspInit+0x44>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6613      	str	r3, [r2, #96]	@ 0x60
 800328a:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <HAL_MspInit+0x44>)
 800328c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <HAL_MspInit+0x44>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329a:	4a08      	ldr	r2, [pc, #32]	@ (80032bc <HAL_MspInit+0x44>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_MspInit+0x44>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032ae:	f004 fa2f 	bl	8007710 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000

080032c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032c4:	bf00      	nop
 80032c6:	e7fd      	b.n	80032c4 <NMI_Handler+0x4>

080032c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032cc:	bf00      	nop
 80032ce:	e7fd      	b.n	80032cc <HardFault_Handler+0x4>

080032d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <MemManage_Handler+0x4>

080032d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <BusFault_Handler+0x4>

080032e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <UsageFault_Handler+0x4>

080032e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f6:	b480      	push	{r7}
 80032f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003316:	f001 f83b 	bl	8004390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8003324:	4802      	ldr	r0, [pc, #8]	@ (8003330 <DMA1_Channel1_IRQHandler+0x10>)
 8003326:	f003 f81c 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000f2c 	.word	0x20000f2c

08003334 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003338:	4802      	ldr	r0, [pc, #8]	@ (8003344 <DMA1_Channel2_IRQHandler+0x10>)
 800333a:	f003 f812 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000270 	.word	0x20000270

08003348 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800334c:	4802      	ldr	r0, [pc, #8]	@ (8003358 <DMA1_Channel3_IRQHandler+0x10>)
 800334e:	f003 f808 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200010b4 	.word	0x200010b4

0800335c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003360:	4802      	ldr	r0, [pc, #8]	@ (800336c <DMA1_Channel4_IRQHandler+0x10>)
 8003362:	f002 fffe 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20001114 	.word	0x20001114

08003370 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003374:	4802      	ldr	r0, [pc, #8]	@ (8003380 <DMA1_Channel5_IRQHandler+0x10>)
 8003376:	f002 fff4 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20001174 	.word	0x20001174

08003384 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003388:	4802      	ldr	r0, [pc, #8]	@ (8003394 <ADC1_2_IRQHandler+0x10>)
 800338a:	f001 fcb9 	bl	8004d00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000204 	.word	0x20000204

08003398 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800339c:	4802      	ldr	r0, [pc, #8]	@ (80033a8 <TIM2_IRQHandler+0x10>)
 800339e:	f005 fe19 	bl	8008fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000dfc 	.word	0x20000dfc

080033ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033b0:	4802      	ldr	r0, [pc, #8]	@ (80033bc <TIM3_IRQHandler+0x10>)
 80033b2:	f005 fe0f 	bl	8008fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000e48 	.word	0x20000e48

080033c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(timestamp==0){
 80033c4:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <TIM4_IRQHandler+0x1c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <TIM4_IRQHandler+0x12>
			timestamp=1;
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <TIM4_IRQHandler+0x1c>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033d2:	4803      	ldr	r0, [pc, #12]	@ (80033e0 <TIM4_IRQHandler+0x20>)
 80033d4:	f005 fdfe 	bl	8008fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200008bd 	.word	0x200008bd
 80033e0:	20000e94 	.word	0x20000e94

080033e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <USART1_IRQHandler+0x10>)
 80033ea:	f007 fa33 	bl	800a854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20001020 	.word	0x20001020

080033f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	HAL_GPIO_TogglePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin);
 80033fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003400:	4803      	ldr	r0, [pc, #12]	@ (8003410 <TIM6_DAC_IRQHandler+0x18>)
 8003402:	f003 faa3 	bl	800694c <HAL_GPIO_TogglePin>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003406:	4803      	ldr	r0, [pc, #12]	@ (8003414 <TIM6_DAC_IRQHandler+0x1c>)
 8003408:	f005 fde4 	bl	8008fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	48000400 	.word	0x48000400
 8003414:	20000ee0 	.word	0x20000ee0

08003418 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800341c:	4802      	ldr	r0, [pc, #8]	@ (8003428 <LPUART1_IRQHandler+0x10>)
 800341e:	f007 fa19 	bl	800a854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000f8c 	.word	0x20000f8c

0800342c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return 1;
 8003430:	2301      	movs	r3, #1
}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_kill>:

int _kill(int pid, int sig)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003446:	f00a f8b7 	bl	800d5b8 <__errno>
 800344a:	4603      	mov	r3, r0
 800344c:	2216      	movs	r2, #22
 800344e:	601a      	str	r2, [r3, #0]
  return -1;
 8003450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <_exit>:

void _exit (int status)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003464:	f04f 31ff 	mov.w	r1, #4294967295
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ffe7 	bl	800343c <_kill>
  while (1) {}    /* Make sure we hang here */
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <_exit+0x12>

08003472 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e00a      	b.n	800349a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003484:	f3af 8000 	nop.w
 8003488:	4601      	mov	r1, r0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	60ba      	str	r2, [r7, #8]
 8003490:	b2ca      	uxtb	r2, r1
 8003492:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3301      	adds	r3, #1
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	dbf0      	blt.n	8003484 <_read+0x12>
  }

  return len;
 80034a2:	687b      	ldr	r3, [r7, #4]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e009      	b.n	80034d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	60ba      	str	r2, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dbf1      	blt.n	80034be <_write+0x12>
  }
  return len;
 80034da:	687b      	ldr	r3, [r7, #4]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <_close>:

int _close(int file)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800350c:	605a      	str	r2, [r3, #4]
  return 0;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <_isatty>:

int _isatty(int file)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003524:	2301      	movs	r3, #1
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003554:	4a14      	ldr	r2, [pc, #80]	@ (80035a8 <_sbrk+0x5c>)
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <_sbrk+0x60>)
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003560:	4b13      	ldr	r3, [pc, #76]	@ (80035b0 <_sbrk+0x64>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <_sbrk+0x64>)
 800356a:	4a12      	ldr	r2, [pc, #72]	@ (80035b4 <_sbrk+0x68>)
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800356e:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <_sbrk+0x64>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	429a      	cmp	r2, r3
 800357a:	d207      	bcs.n	800358c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800357c:	f00a f81c 	bl	800d5b8 <__errno>
 8003580:	4603      	mov	r3, r0
 8003582:	220c      	movs	r2, #12
 8003584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	e009      	b.n	80035a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800358c:	4b08      	ldr	r3, [pc, #32]	@ (80035b0 <_sbrk+0x64>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003592:	4b07      	ldr	r3, [pc, #28]	@ (80035b0 <_sbrk+0x64>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	4a05      	ldr	r2, [pc, #20]	@ (80035b0 <_sbrk+0x64>)
 800359c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800359e:	68fb      	ldr	r3, [r7, #12]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20008000 	.word	0x20008000
 80035ac:	00000400 	.word	0x00000400
 80035b0:	20000df8 	.word	0x20000df8
 80035b4:	20001328 	.word	0x20001328

080035b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <SystemInit+0x20>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c2:	4a05      	ldr	r2, [pc, #20]	@ (80035d8 <SystemInit+0x20>)
 80035c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08e      	sub	sp, #56	@ 0x38
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	460a      	mov	r2, r1
 80035e6:	71fb      	strb	r3, [r7, #7]
 80035e8:	4613      	mov	r3, r2
 80035ea:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 80035ec:	2306      	movs	r3, #6
 80035ee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 80035f2:	2304      	movs	r3, #4
 80035f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 80035fe:	4a6f      	ldr	r2, [pc, #444]	@ (80037bc <INIT_PERM_TARVOS+0x1e0>)
 8003600:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003608:	6018      	str	r0, [r3, #0]
 800360a:	3304      	adds	r3, #4
 800360c:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 800360e:	4a6c      	ldr	r2, [pc, #432]	@ (80037c0 <INIT_PERM_TARVOS+0x1e4>)
 8003610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003618:	6018      	str	r0, [r3, #0]
 800361a:	3304      	adds	r3, #4
 800361c:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 800361e:	4a69      	ldr	r2, [pc, #420]	@ (80037c4 <INIT_PERM_TARVOS+0x1e8>)
 8003620:	f107 031c 	add.w	r3, r7, #28
 8003624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003628:	6018      	str	r0, [r3, #0]
 800362a:	3304      	adds	r3, #4
 800362c:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 800362e:	2302      	movs	r3, #2
 8003630:	753b      	strb	r3, [r7, #20]
 8003632:	2309      	movs	r3, #9
 8003634:	757b      	strb	r3, [r7, #21]
 8003636:	2302      	movs	r3, #2
 8003638:	75bb      	strb	r3, [r7, #22]
 800363a:	230b      	movs	r3, #11
 800363c:	75fb      	strb	r3, [r7, #23]
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	763b      	strb	r3, [r7, #24]
 8003642:	2300      	movs	r3, #0
 8003644:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8003646:	2302      	movs	r3, #2
 8003648:	733b      	strb	r3, [r7, #12]
 800364a:	2309      	movs	r3, #9
 800364c:	737b      	strb	r3, [r7, #13]
 800364e:	2302      	movs	r3, #2
 8003650:	73bb      	strb	r3, [r7, #14]
 8003652:	2308      	movs	r3, #8
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	79bb      	ldrb	r3, [r7, #6]
 8003658:	743b      	strb	r3, [r7, #16]
 800365a:	2300      	movs	r3, #0
 800365c:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 800365e:	4b5a      	ldr	r3, [pc, #360]	@ (80037c8 <INIT_PERM_TARVOS+0x1ec>)
 8003660:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 8003662:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f8ac 	bl	80037d0 <Get_CRC8>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 800367e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003682:	b29a      	uxth	r2, r3
 8003684:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003688:	2364      	movs	r3, #100	@ 0x64
 800368a:	4850      	ldr	r0, [pc, #320]	@ (80037cc <INIT_PERM_TARVOS+0x1f0>)
 800368c:	f006 fe7a 	bl	800a384 <HAL_UART_Transmit>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 800369c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f88f 	bl	80037d0 <Get_CRC8>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 80036b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80036bc:	b29a      	uxth	r2, r3
 80036be:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80036c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80036c6:	4841      	ldr	r0, [pc, #260]	@ (80037cc <INIT_PERM_TARVOS+0x1f0>)
 80036c8:	f006 fe5c 	bl	800a384 <HAL_UART_Transmit>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 80036d8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f871 	bl	80037d0 <Get_CRC8>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 80036f4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	f107 011c 	add.w	r1, r7, #28
 80036fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003702:	4832      	ldr	r0, [pc, #200]	@ (80037cc <INIT_PERM_TARVOS+0x1f0>)
 8003704:	f006 fe3e 	bl	800a384 <HAL_UART_Transmit>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 8003714:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f853 	bl	80037d0 <Get_CRC8>
 800372a:	4603      	mov	r3, r0
 800372c:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 800372e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003732:	b29a      	uxth	r2, r3
 8003734:	f107 0114 	add.w	r1, r7, #20
 8003738:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800373c:	4823      	ldr	r0, [pc, #140]	@ (80037cc <INIT_PERM_TARVOS+0x1f0>)
 800373e:	f006 fe21 	bl	800a384 <HAL_UART_Transmit>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 800374e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f836 	bl	80037d0 <Get_CRC8>
 8003764:	4603      	mov	r3, r0
 8003766:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8003768:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800376c:	b29a      	uxth	r2, r3
 800376e:	f107 010c 	add.w	r1, r7, #12
 8003772:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003776:	4815      	ldr	r0, [pc, #84]	@ (80037cc <INIT_PERM_TARVOS+0x1f0>)
 8003778:	f006 fe04 	bl	800a384 <HAL_UART_Transmit>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8003788:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800378c:	b29a      	uxth	r2, r3
 800378e:	f107 0108 	add.w	r1, r7, #8
 8003792:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003796:	480d      	ldr	r0, [pc, #52]	@ (80037cc <INIT_PERM_TARVOS+0x1f0>)
 8003798:	f006 fdf4 	bl	800a384 <HAL_UART_Transmit>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 80037a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037ac:	f000 fe0e 	bl	80043cc <HAL_Delay>
    return status;
 80037b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3738      	adds	r7, #56	@ 0x38
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	0800f94c 	.word	0x0800f94c
 80037c0:	0800f954 	.word	0x0800f954
 80037c4:	0800f95c 	.word	0x0800f95c
 80037c8:	07000502 	.word	0x07000502
 80037cc:	20000f8c 	.word	0x20000f8c

080037d0 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80037e0:	2300      	movs	r3, #0
 80037e2:	81bb      	strh	r3, [r7, #12]
 80037e4:	e009      	b.n	80037fa <Get_CRC8+0x2a>
		crc ^= bufP[i];
 80037e6:	89bb      	ldrh	r3, [r7, #12]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	4053      	eors	r3, r2
 80037f2:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80037f4:	89bb      	ldrh	r3, [r7, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	81bb      	strh	r3, [r7, #12]
 80037fa:	89ba      	ldrh	r2, [r7, #12]
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d3f1      	bcc.n	80037e6 <Get_CRC8+0x16>
	}
	return crc;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <SEND_DATA_NETW>:



int SEND_DATA_NETW(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	460b      	mov	r3, r1
 800381c:	72fb      	strb	r3, [r7, #11]
 800381e:	4613      	mov	r3, r2
 8003820:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef status=HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferindex=0;
 8003826:	2300      	movs	r3, #0
 8003828:	75bb      	strb	r3, [r7, #22]
	memset((uint8_t *) tarvos_TX_Buffer,256,'\0');

	if(length>=250){
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2bf9      	cmp	r3, #249	@ 0xf9
 800382e:	dd01      	ble.n	8003834 <SEND_DATA_NETW+0x24>
		return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e054      	b.n	80038de <SEND_DATA_NETW+0xce>
	}

    // Initialisation de l'en-tête

	tarvos_TX_Buffer[bufferindex]= 0x02;
 8003834:	7dbb      	ldrb	r3, [r7, #22]
 8003836:	4a2c      	ldr	r2, [pc, #176]	@ (80038e8 <SEND_DATA_NETW+0xd8>)
 8003838:	2102      	movs	r1, #2
 800383a:	54d1      	strb	r1, [r2, r3]
	bufferindex++;// Start byte
 800383c:	7dbb      	ldrb	r3, [r7, #22]
 800383e:	3301      	adds	r3, #1
 8003840:	75bb      	strb	r3, [r7, #22]
	tarvos_TX_Buffer[bufferindex]= 0x01;
 8003842:	7dbb      	ldrb	r3, [r7, #22]
 8003844:	4a28      	ldr	r2, [pc, #160]	@ (80038e8 <SEND_DATA_NETW+0xd8>)
 8003846:	2101      	movs	r1, #1
 8003848:	54d1      	strb	r1, [r2, r3]
	bufferindex++;// Command identifier
 800384a:	7dbb      	ldrb	r3, [r7, #22]
 800384c:	3301      	adds	r3, #1
 800384e:	75bb      	strb	r3, [r7, #22]
	tarvos_TX_Buffer[bufferindex]= length + 2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	7dbb      	ldrb	r3, [r7, #22]
 8003856:	3202      	adds	r2, #2
 8003858:	b2d1      	uxtb	r1, r2
 800385a:	4a23      	ldr	r2, [pc, #140]	@ (80038e8 <SEND_DATA_NETW+0xd8>)
 800385c:	54d1      	strb	r1, [r2, r3]
	bufferindex++;// Longueur totale (length + channel + dest_adress)
 800385e:	7dbb      	ldrb	r3, [r7, #22]
 8003860:	3301      	adds	r3, #1
 8003862:	75bb      	strb	r3, [r7, #22]
	tarvos_TX_Buffer[bufferindex]= channel;
 8003864:	7dbb      	ldrb	r3, [r7, #22]
 8003866:	4920      	ldr	r1, [pc, #128]	@ (80038e8 <SEND_DATA_NETW+0xd8>)
 8003868:	7afa      	ldrb	r2, [r7, #11]
 800386a:	54ca      	strb	r2, [r1, r3]
	bufferindex++;// Canal
 800386c:	7dbb      	ldrb	r3, [r7, #22]
 800386e:	3301      	adds	r3, #1
 8003870:	75bb      	strb	r3, [r7, #22]
	tarvos_TX_Buffer[bufferindex]= dest_adress; // Adresse de destination
 8003872:	7dbb      	ldrb	r3, [r7, #22]
 8003874:	491c      	ldr	r1, [pc, #112]	@ (80038e8 <SEND_DATA_NETW+0xd8>)
 8003876:	7aba      	ldrb	r2, [r7, #10]
 8003878:	54ca      	strb	r2, [r1, r3]

	bufferindex++;
 800387a:	7dbb      	ldrb	r3, [r7, #22]
 800387c:	3301      	adds	r3, #1
 800387e:	75bb      	strb	r3, [r7, #22]

    // Copie des données dans la trame
    for (int i = 0; i < length; i++) {
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	e00c      	b.n	80038a0 <SEND_DATA_NETW+0x90>
    	tarvos_TX_Buffer[bufferindex]=data[i];
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	441a      	add	r2, r3
 800388c:	7dbb      	ldrb	r3, [r7, #22]
 800388e:	7811      	ldrb	r1, [r2, #0]
 8003890:	4a15      	ldr	r2, [pc, #84]	@ (80038e8 <SEND_DATA_NETW+0xd8>)
 8003892:	54d1      	strb	r1, [r2, r3]
    	bufferindex++;
 8003894:	7dbb      	ldrb	r3, [r7, #22]
 8003896:	3301      	adds	r3, #1
 8003898:	75bb      	strb	r3, [r7, #22]
    for (int i = 0; i < length; i++) {
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	3301      	adds	r3, #1
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	dbee      	blt.n	8003886 <SEND_DATA_NETW+0x76>
    }



    // Calcul du CRC (sur tout sauf le CRC lui-même)
    tarvos_TX_Buffer[bufferindex]= Get_CRC8((uint8_t *)(tarvos_TX_Buffer+5), bufferindex-6);///////pas surrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr///
 80038a8:	4a10      	ldr	r2, [pc, #64]	@ (80038ec <SEND_DATA_NETW+0xdc>)
 80038aa:	7dbb      	ldrb	r3, [r7, #22]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b06      	subs	r3, #6
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	7dbc      	ldrb	r4, [r7, #22]
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f7ff ff8a 	bl	80037d0 <Get_CRC8>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <SEND_DATA_NETW+0xd8>)
 80038c2:	551a      	strb	r2, [r3, r4]


    if( HAL_UART_Transmit_DMA(&hlpuart1,(uint8_t * ) tarvos_TX_Buffer, bufferindex)!=HAL_OK){
 80038c4:	7dbb      	ldrb	r3, [r7, #22]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	4907      	ldr	r1, [pc, #28]	@ (80038e8 <SEND_DATA_NETW+0xd8>)
 80038cc:	4808      	ldr	r0, [pc, #32]	@ (80038f0 <SEND_DATA_NETW+0xe0>)
 80038ce:	f006 fde7 	bl	800a4a0 <HAL_UART_Transmit_DMA>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <SEND_DATA_NETW+0xcc>
    	status=HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 80038dc:	7dfb      	ldrb	r3, [r7, #23]

}
 80038de:	4618      	mov	r0, r3
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd90      	pop	{r4, r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200003a8 	.word	0x200003a8
 80038ec:	200003ad 	.word	0x200003ad
 80038f0:	20000f8c 	.word	0x20000f8c

080038f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08e      	sub	sp, #56	@ 0x38
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003908:	f107 031c 	add.w	r3, r7, #28
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003914:	463b      	mov	r3, r7
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	615a      	str	r2, [r3, #20]
 8003924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003926:	4b2d      	ldr	r3, [pc, #180]	@ (80039dc <MX_TIM2_Init+0xe8>)
 8003928:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800392c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800392e:	4b2b      	ldr	r3, [pc, #172]	@ (80039dc <MX_TIM2_Init+0xe8>)
 8003930:	2200      	movs	r2, #0
 8003932:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003934:	4b29      	ldr	r3, [pc, #164]	@ (80039dc <MX_TIM2_Init+0xe8>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 800393a:	4b28      	ldr	r3, [pc, #160]	@ (80039dc <MX_TIM2_Init+0xe8>)
 800393c:	227c      	movs	r2, #124	@ 0x7c
 800393e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003940:	4b26      	ldr	r3, [pc, #152]	@ (80039dc <MX_TIM2_Init+0xe8>)
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003946:	4b25      	ldr	r3, [pc, #148]	@ (80039dc <MX_TIM2_Init+0xe8>)
 8003948:	2280      	movs	r2, #128	@ 0x80
 800394a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800394c:	4823      	ldr	r0, [pc, #140]	@ (80039dc <MX_TIM2_Init+0xe8>)
 800394e:	f004 fe0d 	bl	800856c <HAL_TIM_Base_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003958:	f7fe fd1c 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800395c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003966:	4619      	mov	r1, r3
 8003968:	481c      	ldr	r0, [pc, #112]	@ (80039dc <MX_TIM2_Init+0xe8>)
 800396a:	f005 fd97 	bl	800949c <HAL_TIM_ConfigClockSource>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003974:	f7fe fd0e 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003978:	4818      	ldr	r0, [pc, #96]	@ (80039dc <MX_TIM2_Init+0xe8>)
 800397a:	f004 feb9 	bl	80086f0 <HAL_TIM_PWM_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003984:	f7fe fd06 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	4619      	mov	r1, r3
 8003996:	4811      	ldr	r0, [pc, #68]	@ (80039dc <MX_TIM2_Init+0xe8>)
 8003998:	f006 fbdc 	bl	800a154 <HAL_TIMEx_MasterConfigSynchronization>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80039a2:	f7fe fcf7 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039a6:	2360      	movs	r3, #96	@ 0x60
 80039a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039b6:	463b      	mov	r3, r7
 80039b8:	220c      	movs	r2, #12
 80039ba:	4619      	mov	r1, r3
 80039bc:	4807      	ldr	r0, [pc, #28]	@ (80039dc <MX_TIM2_Init+0xe8>)
 80039be:	f005 fc59 	bl	8009274 <HAL_TIM_PWM_ConfigChannel>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80039c8:	f7fe fce4 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80039cc:	4803      	ldr	r0, [pc, #12]	@ (80039dc <MX_TIM2_Init+0xe8>)
 80039ce:	f000 f9ab 	bl	8003d28 <HAL_TIM_MspPostInit>

}
 80039d2:	bf00      	nop
 80039d4:	3738      	adds	r7, #56	@ 0x38
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000dfc 	.word	0x20000dfc

080039e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	@ 0x38
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f4:	f107 031c 	add.w	r3, r7, #28
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a00:	463b      	mov	r3, r7
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	615a      	str	r2, [r3, #20]
 8003a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a12:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a14:	4a2d      	ldr	r2, [pc, #180]	@ (8003acc <MX_TIM3_Init+0xec>)
 8003a16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8003a18:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a1a:	2263      	movs	r2, #99	@ 0x63
 8003a1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003a24:	4b28      	ldr	r3, [pc, #160]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a26:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003a2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2c:	4b26      	ldr	r3, [pc, #152]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a32:	4b25      	ldr	r3, [pc, #148]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a34:	2280      	movs	r2, #128	@ 0x80
 8003a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a38:	4823      	ldr	r0, [pc, #140]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a3a:	f004 fd97 	bl	800856c <HAL_TIM_Base_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003a44:	f7fe fca6 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a52:	4619      	mov	r1, r3
 8003a54:	481c      	ldr	r0, [pc, #112]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a56:	f005 fd21 	bl	800949c <HAL_TIM_ConfigClockSource>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003a60:	f7fe fc98 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a64:	4818      	ldr	r0, [pc, #96]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a66:	f004 fe43 	bl	80086f0 <HAL_TIM_PWM_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003a70:	f7fe fc90 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a7c:	f107 031c 	add.w	r3, r7, #28
 8003a80:	4619      	mov	r1, r3
 8003a82:	4811      	ldr	r0, [pc, #68]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003a84:	f006 fb66 	bl	800a154 <HAL_TIMEx_MasterConfigSynchronization>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003a8e:	f7fe fc81 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a92:	2360      	movs	r3, #96	@ 0x60
 8003a94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4807      	ldr	r0, [pc, #28]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003aaa:	f005 fbe3 	bl	8009274 <HAL_TIM_PWM_ConfigChannel>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003ab4:	f7fe fc6e 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ab8:	4803      	ldr	r0, [pc, #12]	@ (8003ac8 <MX_TIM3_Init+0xe8>)
 8003aba:	f000 f935 	bl	8003d28 <HAL_TIM_MspPostInit>

}
 8003abe:	bf00      	nop
 8003ac0:	3738      	adds	r7, #56	@ 0x38
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000e48 	.word	0x20000e48
 8003acc:	40000400 	.word	0x40000400

08003ad0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ad6:	f107 0310 	add.w	r3, r7, #16
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	609a      	str	r2, [r3, #8]
 8003ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003aee:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <MX_TIM4_Init+0x94>)
 8003af0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b68 <MX_TIM4_Init+0x98>)
 8003af2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b64 <MX_TIM4_Init+0x94>)
 8003af6:	2263      	movs	r2, #99	@ 0x63
 8003af8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afa:	4b1a      	ldr	r3, [pc, #104]	@ (8003b64 <MX_TIM4_Init+0x94>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8003b00:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <MX_TIM4_Init+0x94>)
 8003b02:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003b06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b08:	4b16      	ldr	r3, [pc, #88]	@ (8003b64 <MX_TIM4_Init+0x94>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b0e:	4b15      	ldr	r3, [pc, #84]	@ (8003b64 <MX_TIM4_Init+0x94>)
 8003b10:	2280      	movs	r2, #128	@ 0x80
 8003b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b14:	4813      	ldr	r0, [pc, #76]	@ (8003b64 <MX_TIM4_Init+0x94>)
 8003b16:	f004 fd29 	bl	800856c <HAL_TIM_Base_Init>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003b20:	f7fe fc38 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003b2a:	f107 0310 	add.w	r3, r7, #16
 8003b2e:	4619      	mov	r1, r3
 8003b30:	480c      	ldr	r0, [pc, #48]	@ (8003b64 <MX_TIM4_Init+0x94>)
 8003b32:	f005 fcb3 	bl	800949c <HAL_TIM_ConfigClockSource>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003b3c:	f7fe fc2a 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b40:	2300      	movs	r3, #0
 8003b42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4805      	ldr	r0, [pc, #20]	@ (8003b64 <MX_TIM4_Init+0x94>)
 8003b4e:	f006 fb01 	bl	800a154 <HAL_TIMEx_MasterConfigSynchronization>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003b58:	f7fe fc1c 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b5c:	bf00      	nop
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000e94 	.word	0x20000e94
 8003b68:	40000800 	.word	0x40000800

08003b6c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b7c:	4b15      	ldr	r3, [pc, #84]	@ (8003bd4 <MX_TIM6_Init+0x68>)
 8003b7e:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <MX_TIM6_Init+0x6c>)
 8003b80:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000-1;
 8003b82:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <MX_TIM6_Init+0x68>)
 8003b84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b88:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b8a:	4b12      	ldr	r3, [pc, #72]	@ (8003bd4 <MX_TIM6_Init+0x68>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003b90:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <MX_TIM6_Init+0x68>)
 8003b92:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003b96:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b98:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <MX_TIM6_Init+0x68>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b9e:	480d      	ldr	r0, [pc, #52]	@ (8003bd4 <MX_TIM6_Init+0x68>)
 8003ba0:	f004 fce4 	bl	800856c <HAL_TIM_Base_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003baa:	f7fe fbf3 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003bb6:	1d3b      	adds	r3, r7, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4806      	ldr	r0, [pc, #24]	@ (8003bd4 <MX_TIM6_Init+0x68>)
 8003bbc:	f006 faca 	bl	800a154 <HAL_TIMEx_MasterConfigSynchronization>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003bc6:	f7fe fbe5 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000ee0 	.word	0x20000ee0
 8003bd8:	40001000 	.word	0x40001000

08003bdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d13e      	bne.n	8003c6c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bee:	4b48      	ldr	r3, [pc, #288]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf2:	4a47      	ldr	r2, [pc, #284]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfa:	4b45      	ldr	r3, [pc, #276]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel1;
 8003c06:	4b43      	ldr	r3, [pc, #268]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c08:	4a43      	ldr	r2, [pc, #268]	@ (8003d18 <HAL_TIM_Base_MspInit+0x13c>)
 8003c0a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_TIM2_CH4;
 8003c0c:	4b41      	ldr	r3, [pc, #260]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c0e:	223b      	movs	r2, #59	@ 0x3b
 8003c10:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c12:	4b40      	ldr	r3, [pc, #256]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c14:	2210      	movs	r2, #16
 8003c16:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c18:	4b3e      	ldr	r3, [pc, #248]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c24:	4b3b      	ldr	r3, [pc, #236]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c2a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c2c:	4b39      	ldr	r3, [pc, #228]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8003c32:	4b38      	ldr	r3, [pc, #224]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c34:	2220      	movs	r2, #32
 8003c36:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003c38:	4b36      	ldr	r3, [pc, #216]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8003c3e:	4835      	ldr	r0, [pc, #212]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c40:	f002 f9ac 	bl	8005f9c <HAL_DMA_Init>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8003c4a:	f7fe fba3 	bl	8002394 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a30      	ldr	r2, [pc, #192]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c54:	4a2f      	ldr	r2, [pc, #188]	@ (8003d14 <HAL_TIM_Base_MspInit+0x138>)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	201c      	movs	r0, #28
 8003c60:	f002 f967 	bl	8005f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c64:	201c      	movs	r0, #28
 8003c66:	f002 f97e 	bl	8005f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003c6a:	e04c      	b.n	8003d06 <HAL_TIM_Base_MspInit+0x12a>
  else if(tim_baseHandle->Instance==TIM3)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2a      	ldr	r2, [pc, #168]	@ (8003d1c <HAL_TIM_Base_MspInit+0x140>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d114      	bne.n	8003ca0 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c76:	4b26      	ldr	r3, [pc, #152]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7a:	4a25      	ldr	r2, [pc, #148]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c82:	4b23      	ldr	r3, [pc, #140]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2100      	movs	r1, #0
 8003c92:	201d      	movs	r0, #29
 8003c94:	f002 f94d 	bl	8005f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c98:	201d      	movs	r0, #29
 8003c9a:	f002 f964 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 8003c9e:	e032      	b.n	8003d06 <HAL_TIM_Base_MspInit+0x12a>
  else if(tim_baseHandle->Instance==TIM4)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <HAL_TIM_Base_MspInit+0x144>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d114      	bne.n	8003cd4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003caa:	4b19      	ldr	r3, [pc, #100]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cae:	4a18      	ldr	r2, [pc, #96]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb6:	4b16      	ldr	r3, [pc, #88]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	201e      	movs	r0, #30
 8003cc8:	f002 f933 	bl	8005f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ccc:	201e      	movs	r0, #30
 8003cce:	f002 f94a 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 8003cd2:	e018      	b.n	8003d06 <HAL_TIM_Base_MspInit+0x12a>
  else if(tim_baseHandle->Instance==TIM6)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a12      	ldr	r2, [pc, #72]	@ (8003d24 <HAL_TIM_Base_MspInit+0x148>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d113      	bne.n	8003d06 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003cde:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003ce4:	f043 0310 	orr.w	r3, r3, #16
 8003ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cea:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <HAL_TIM_Base_MspInit+0x134>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	2036      	movs	r0, #54	@ 0x36
 8003cfc:	f002 f919 	bl	8005f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d00:	2036      	movs	r0, #54	@ 0x36
 8003d02:	f002 f930 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	20000f2c 	.word	0x20000f2c
 8003d18:	40020008 	.word	0x40020008
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40001000 	.word	0x40001000

08003d28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	@ 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d48:	d11d      	bne.n	8003d86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4a:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <HAL_TIM_MspPostInit+0xa8>)
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4e:	4a20      	ldr	r2, [pc, #128]	@ (8003dd0 <HAL_TIM_MspPostInit+0xa8>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d56:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd0 <HAL_TIM_MspPostInit+0xa8>)
 8003d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d62:	2308      	movs	r3, #8
 8003d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	2302      	movs	r3, #2
 8003d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d72:	2301      	movs	r3, #1
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d76:	f107 0314 	add.w	r3, r7, #20
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d80:	f002 fc4a 	bl	8006618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003d84:	e020      	b.n	8003dc8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a12      	ldr	r2, [pc, #72]	@ (8003dd4 <HAL_TIM_MspPostInit+0xac>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <HAL_TIM_MspPostInit+0xa8>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d94:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd0 <HAL_TIM_MspPostInit+0xa8>)
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <HAL_TIM_MspPostInit+0xa8>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003da8:	2340      	movs	r3, #64	@ 0x40
 8003daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dac:	2302      	movs	r3, #2
 8003dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db4:	2300      	movs	r3, #0
 8003db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003db8:	2302      	movs	r3, #2
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dbc:	f107 0314 	add.w	r3, r7, #20
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4805      	ldr	r0, [pc, #20]	@ (8003dd8 <HAL_TIM_MspPostInit+0xb0>)
 8003dc4:	f002 fc28 	bl	8006618 <HAL_GPIO_Init>
}
 8003dc8:	bf00      	nop
 8003dca:	3728      	adds	r7, #40	@ 0x28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	48000800 	.word	0x48000800

08003ddc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003de0:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003de2:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <MX_LPUART1_UART_Init+0x90>)
 8003de4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003de6:	4b20      	ldr	r3, [pc, #128]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003dec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dee:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003df4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003e00:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003e02:	220c      	movs	r2, #12
 8003e04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e06:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e0c:	4b16      	ldr	r3, [pc, #88]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e12:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e18:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003e1e:	4812      	ldr	r0, [pc, #72]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003e20:	f006 fa60 	bl	800a2e4 <HAL_UART_Init>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003e2a:	f7fe fab3 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e2e:	2100      	movs	r1, #0
 8003e30:	480d      	ldr	r0, [pc, #52]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003e32:	f008 f83c 	bl	800beae <HAL_UARTEx_SetTxFifoThreshold>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003e3c:	f7fe faaa 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e40:	2100      	movs	r1, #0
 8003e42:	4809      	ldr	r0, [pc, #36]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003e44:	f008 f871 	bl	800bf2a <HAL_UARTEx_SetRxFifoThreshold>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003e4e:	f7fe faa1 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003e52:	4805      	ldr	r0, [pc, #20]	@ (8003e68 <MX_LPUART1_UART_Init+0x8c>)
 8003e54:	f007 fff2 	bl	800be3c <HAL_UARTEx_DisableFifoMode>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003e5e:	f7fe fa99 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000f8c 	.word	0x20000f8c
 8003e6c:	40008000 	.word	0x40008000

08003e70 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e74:	4b22      	ldr	r3, [pc, #136]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003e76:	4a23      	ldr	r2, [pc, #140]	@ (8003f04 <MX_USART1_UART_Init+0x94>)
 8003e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e7a:	4b21      	ldr	r3, [pc, #132]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e82:	4b1f      	ldr	r3, [pc, #124]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e94:	4b1a      	ldr	r3, [pc, #104]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003e96:	220c      	movs	r2, #12
 8003e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e9a:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ea0:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ea6:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003eac:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003eb2:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003eb8:	4811      	ldr	r0, [pc, #68]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003eba:	f006 fa13 	bl	800a2e4 <HAL_UART_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003ec4:	f7fe fa66 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ec8:	2100      	movs	r1, #0
 8003eca:	480d      	ldr	r0, [pc, #52]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003ecc:	f007 ffef 	bl	800beae <HAL_UARTEx_SetTxFifoThreshold>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003ed6:	f7fe fa5d 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003eda:	2100      	movs	r1, #0
 8003edc:	4808      	ldr	r0, [pc, #32]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003ede:	f008 f824 	bl	800bf2a <HAL_UARTEx_SetRxFifoThreshold>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003ee8:	f7fe fa54 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003eec:	4804      	ldr	r0, [pc, #16]	@ (8003f00 <MX_USART1_UART_Init+0x90>)
 8003eee:	f007 ffa5 	bl	800be3c <HAL_UARTEx_DisableFifoMode>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003ef8:	f7fe fa4c 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20001020 	.word	0x20001020
 8003f04:	40013800 	.word	0x40013800

08003f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b09c      	sub	sp, #112	@ 0x70
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f20:	f107 0318 	add.w	r3, r7, #24
 8003f24:	2244      	movs	r2, #68	@ 0x44
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f009 fa63 	bl	800d3f4 <memset>
  if(uartHandle->Instance==LPUART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a84      	ldr	r2, [pc, #528]	@ (8004144 <HAL_UART_MspInit+0x23c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	f040 8093 	bne.w	8004060 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f42:	f107 0318 	add.w	r3, r7, #24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 f920 	bl	800818c <HAL_RCCEx_PeriphCLKConfig>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003f52:	f7fe fa1f 	bl	8002394 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003f56:	4b7c      	ldr	r3, [pc, #496]	@ (8004148 <HAL_UART_MspInit+0x240>)
 8003f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5a:	4a7b      	ldr	r2, [pc, #492]	@ (8004148 <HAL_UART_MspInit+0x240>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003f62:	4b79      	ldr	r3, [pc, #484]	@ (8004148 <HAL_UART_MspInit+0x240>)
 8003f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6e:	4b76      	ldr	r3, [pc, #472]	@ (8004148 <HAL_UART_MspInit+0x240>)
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	4a75      	ldr	r2, [pc, #468]	@ (8004148 <HAL_UART_MspInit+0x240>)
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f7a:	4b73      	ldr	r3, [pc, #460]	@ (8004148 <HAL_UART_MspInit+0x240>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f94:	2300      	movs	r3, #0
 8003f96:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003f98:	2308      	movs	r3, #8
 8003f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	486a      	ldr	r0, [pc, #424]	@ (800414c <HAL_UART_MspInit+0x244>)
 8003fa4:	f002 fb38 	bl	8006618 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8003fa8:	4b69      	ldr	r3, [pc, #420]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003faa:	4a6a      	ldr	r2, [pc, #424]	@ (8004154 <HAL_UART_MspInit+0x24c>)
 8003fac:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003fae:	4b68      	ldr	r3, [pc, #416]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003fb0:	2222      	movs	r2, #34	@ 0x22
 8003fb2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fb4:	4b66      	ldr	r3, [pc, #408]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fba:	4b65      	ldr	r3, [pc, #404]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fc0:	4b63      	ldr	r3, [pc, #396]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003fc2:	2280      	movs	r2, #128	@ 0x80
 8003fc4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fc6:	4b62      	ldr	r3, [pc, #392]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fcc:	4b60      	ldr	r3, [pc, #384]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fd8:	4b5d      	ldr	r3, [pc, #372]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003fde:	485c      	ldr	r0, [pc, #368]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003fe0:	f001 ffdc 	bl	8005f9c <HAL_DMA_Init>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003fea:	f7fe f9d3 	bl	8002394 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a57      	ldr	r2, [pc, #348]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003ff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003ff6:	4a56      	ldr	r2, [pc, #344]	@ (8004150 <HAL_UART_MspInit+0x248>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8003ffc:	4b56      	ldr	r3, [pc, #344]	@ (8004158 <HAL_UART_MspInit+0x250>)
 8003ffe:	4a57      	ldr	r2, [pc, #348]	@ (800415c <HAL_UART_MspInit+0x254>)
 8004000:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8004002:	4b55      	ldr	r3, [pc, #340]	@ (8004158 <HAL_UART_MspInit+0x250>)
 8004004:	2223      	movs	r2, #35	@ 0x23
 8004006:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004008:	4b53      	ldr	r3, [pc, #332]	@ (8004158 <HAL_UART_MspInit+0x250>)
 800400a:	2210      	movs	r2, #16
 800400c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800400e:	4b52      	ldr	r3, [pc, #328]	@ (8004158 <HAL_UART_MspInit+0x250>)
 8004010:	2200      	movs	r2, #0
 8004012:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004014:	4b50      	ldr	r3, [pc, #320]	@ (8004158 <HAL_UART_MspInit+0x250>)
 8004016:	2280      	movs	r2, #128	@ 0x80
 8004018:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800401a:	4b4f      	ldr	r3, [pc, #316]	@ (8004158 <HAL_UART_MspInit+0x250>)
 800401c:	2200      	movs	r2, #0
 800401e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004020:	4b4d      	ldr	r3, [pc, #308]	@ (8004158 <HAL_UART_MspInit+0x250>)
 8004022:	2200      	movs	r2, #0
 8004024:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004026:	4b4c      	ldr	r3, [pc, #304]	@ (8004158 <HAL_UART_MspInit+0x250>)
 8004028:	2200      	movs	r2, #0
 800402a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800402c:	4b4a      	ldr	r3, [pc, #296]	@ (8004158 <HAL_UART_MspInit+0x250>)
 800402e:	2200      	movs	r2, #0
 8004030:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004032:	4849      	ldr	r0, [pc, #292]	@ (8004158 <HAL_UART_MspInit+0x250>)
 8004034:	f001 ffb2 	bl	8005f9c <HAL_DMA_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800403e:	f7fe f9a9 	bl	8002394 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a44      	ldr	r2, [pc, #272]	@ (8004158 <HAL_UART_MspInit+0x250>)
 8004046:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004048:	4a43      	ldr	r2, [pc, #268]	@ (8004158 <HAL_UART_MspInit+0x250>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	205b      	movs	r0, #91	@ 0x5b
 8004054:	f001 ff6d 	bl	8005f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004058:	205b      	movs	r0, #91	@ 0x5b
 800405a:	f001 ff84 	bl	8005f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800405e:	e06c      	b.n	800413a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3e      	ldr	r2, [pc, #248]	@ (8004160 <HAL_UART_MspInit+0x258>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d167      	bne.n	800413a <HAL_UART_MspInit+0x232>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800406a:	2301      	movs	r3, #1
 800406c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004072:	f107 0318 	add.w	r3, r7, #24
 8004076:	4618      	mov	r0, r3
 8004078:	f004 f888 	bl	800818c <HAL_RCCEx_PeriphCLKConfig>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8004082:	f7fe f987 	bl	8002394 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004086:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <HAL_UART_MspInit+0x240>)
 8004088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408a:	4a2f      	ldr	r2, [pc, #188]	@ (8004148 <HAL_UART_MspInit+0x240>)
 800408c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004090:	6613      	str	r3, [r2, #96]	@ 0x60
 8004092:	4b2d      	ldr	r3, [pc, #180]	@ (8004148 <HAL_UART_MspInit+0x240>)
 8004094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800409e:	4b2a      	ldr	r3, [pc, #168]	@ (8004148 <HAL_UART_MspInit+0x240>)
 80040a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a2:	4a29      	ldr	r2, [pc, #164]	@ (8004148 <HAL_UART_MspInit+0x240>)
 80040a4:	f043 0302 	orr.w	r3, r3, #2
 80040a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040aa:	4b27      	ldr	r3, [pc, #156]	@ (8004148 <HAL_UART_MspInit+0x240>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040b6:	23c0      	movs	r3, #192	@ 0xc0
 80040b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ba:	2302      	movs	r3, #2
 80040bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c2:	2300      	movs	r3, #0
 80040c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040c6:	2307      	movs	r3, #7
 80040c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80040ce:	4619      	mov	r1, r3
 80040d0:	481e      	ldr	r0, [pc, #120]	@ (800414c <HAL_UART_MspInit+0x244>)
 80040d2:	f002 faa1 	bl	8006618 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80040d6:	4b23      	ldr	r3, [pc, #140]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 80040d8:	4a23      	ldr	r2, [pc, #140]	@ (8004168 <HAL_UART_MspInit+0x260>)
 80040da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80040dc:	4b21      	ldr	r3, [pc, #132]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 80040de:	2218      	movs	r2, #24
 80040e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040e2:	4b20      	ldr	r3, [pc, #128]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 80040f0:	2280      	movs	r2, #128	@ 0x80
 80040f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004100:	4b18      	ldr	r3, [pc, #96]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 8004102:	2200      	movs	r2, #0
 8004104:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004106:	4b17      	ldr	r3, [pc, #92]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 8004108:	2200      	movs	r2, #0
 800410a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800410c:	4815      	ldr	r0, [pc, #84]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 800410e:	f001 ff45 	bl	8005f9c <HAL_DMA_Init>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_UART_MspInit+0x214>
      Error_Handler();
 8004118:	f7fe f93c 	bl	8002394 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a11      	ldr	r2, [pc, #68]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 8004120:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004124:	4a0f      	ldr	r2, [pc, #60]	@ (8004164 <HAL_UART_MspInit+0x25c>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800412a:	2200      	movs	r2, #0
 800412c:	2100      	movs	r1, #0
 800412e:	2025      	movs	r0, #37	@ 0x25
 8004130:	f001 feff 	bl	8005f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004134:	2025      	movs	r0, #37	@ 0x25
 8004136:	f001 ff16 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 800413a:	bf00      	nop
 800413c:	3770      	adds	r7, #112	@ 0x70
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40008000 	.word	0x40008000
 8004148:	40021000 	.word	0x40021000
 800414c:	48000400 	.word	0x48000400
 8004150:	200010b4 	.word	0x200010b4
 8004154:	40020030 	.word	0x40020030
 8004158:	20001114 	.word	0x20001114
 800415c:	40020044 	.word	0x40020044
 8004160:	40013800 	.word	0x40013800
 8004164:	20001174 	.word	0x20001174
 8004168:	40020058 	.word	0x40020058

0800416c <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800416c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3c      	ldr	r2, [pc, #240]	@ (800426c <HAL_UART_RxCpltCallback+0x100>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d15b      	bne.n	8004236 <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 800417e:	4b3c      	ldr	r3, [pc, #240]	@ (8004270 <HAL_UART_RxCpltCallback+0x104>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3c      	ldr	r2, [pc, #240]	@ (8004274 <HAL_UART_RxCpltCallback+0x108>)
 8004184:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8004186:	4b3b      	ldr	r3, [pc, #236]	@ (8004274 <HAL_UART_RxCpltCallback+0x108>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800418e:	dd22      	ble.n	80041d6 <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 8004190:	4b38      	ldr	r3, [pc, #224]	@ (8004274 <HAL_UART_RxCpltCallback+0x108>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800419a:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 800419c:	4b35      	ldr	r3, [pc, #212]	@ (8004274 <HAL_UART_RxCpltCallback+0x108>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b35      	ldr	r3, [pc, #212]	@ (8004278 <HAL_UART_RxCpltCallback+0x10c>)
 80041a4:	4413      	add	r3, r2
 80041a6:	89fa      	ldrh	r2, [r7, #14]
 80041a8:	4934      	ldr	r1, [pc, #208]	@ (800427c <HAL_UART_RxCpltCallback+0x110>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	f009 fa39 	bl	800d622 <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 80041b0:	4b30      	ldr	r3, [pc, #192]	@ (8004274 <HAL_UART_RxCpltCallback+0x108>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 80041b6:	89fb      	ldrh	r3, [r7, #14]
 80041b8:	4a30      	ldr	r2, [pc, #192]	@ (800427c <HAL_UART_RxCpltCallback+0x110>)
 80041ba:	1899      	adds	r1, r3, r2
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80041c2:	461a      	mov	r2, r3
 80041c4:	482c      	ldr	r0, [pc, #176]	@ (8004278 <HAL_UART_RxCpltCallback+0x10c>)
 80041c6:	f009 fa2c 	bl	800d622 <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 80041ca:	89fb      	ldrh	r3, [r7, #14]
 80041cc:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80041d0:	4a27      	ldr	r2, [pc, #156]	@ (8004270 <HAL_UART_RxCpltCallback+0x104>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	e01d      	b.n	8004212 <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 80041d6:	4b27      	ldr	r3, [pc, #156]	@ (8004274 <HAL_UART_RxCpltCallback+0x108>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	4b26      	ldr	r3, [pc, #152]	@ (8004278 <HAL_UART_RxCpltCallback+0x10c>)
 80041de:	441a      	add	r2, r3
 80041e0:	4b26      	ldr	r3, [pc, #152]	@ (800427c <HAL_UART_RxCpltCallback+0x110>)
 80041e2:	4610      	mov	r0, r2
 80041e4:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80041e8:	4602      	mov	r2, r0
 80041ea:	4619      	mov	r1, r3
 80041ec:	f8d1 c000 	ldr.w	ip, [r1]
 80041f0:	684e      	ldr	r6, [r1, #4]
 80041f2:	688d      	ldr	r5, [r1, #8]
 80041f4:	68c9      	ldr	r1, [r1, #12]
 80041f6:	f8c2 c000 	str.w	ip, [r2]
 80041fa:	6056      	str	r6, [r2, #4]
 80041fc:	6095      	str	r5, [r2, #8]
 80041fe:	60d1      	str	r1, [r2, #12]
 8004200:	3310      	adds	r3, #16
 8004202:	3010      	adds	r0, #16
 8004204:	42a3      	cmp	r3, r4
 8004206:	d1ef      	bne.n	80041e8 <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 8004208:	4b1a      	ldr	r3, [pc, #104]	@ (8004274 <HAL_UART_RxCpltCallback+0x108>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3340      	adds	r3, #64	@ 0x40
 800420e:	4a18      	ldr	r2, [pc, #96]	@ (8004270 <HAL_UART_RxCpltCallback+0x104>)
 8004210:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8004212:	2240      	movs	r2, #64	@ 0x40
 8004214:	4919      	ldr	r1, [pc, #100]	@ (800427c <HAL_UART_RxCpltCallback+0x110>)
 8004216:	481a      	ldr	r0, [pc, #104]	@ (8004280 <HAL_UART_RxCpltCallback+0x114>)
 8004218:	f006 f9c2 	bl	800a5a0 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800421c:	4b19      	ldr	r3, [pc, #100]	@ (8004284 <HAL_UART_RxCpltCallback+0x118>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b18      	ldr	r3, [pc, #96]	@ (8004284 <HAL_UART_RxCpltCallback+0x118>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0204 	bic.w	r2, r2, #4
 800422a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 800422c:	2240      	movs	r2, #64	@ 0x40
 800422e:	4913      	ldr	r1, [pc, #76]	@ (800427c <HAL_UART_RxCpltCallback+0x110>)
 8004230:	4813      	ldr	r0, [pc, #76]	@ (8004280 <HAL_UART_RxCpltCallback+0x114>)
 8004232:	f006 f9b5 	bl	800a5a0 <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a13      	ldr	r2, [pc, #76]	@ (8004288 <HAL_UART_RxCpltCallback+0x11c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10c      	bne.n	800425a <HAL_UART_RxCpltCallback+0xee>
//					buffer_servo[5]='\0';
//				}
//				position_servo = atoi(buffer_servo);
//				//break;
//			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8004240:	221e      	movs	r2, #30
 8004242:	4912      	ldr	r1, [pc, #72]	@ (800428c <HAL_UART_RxCpltCallback+0x120>)
 8004244:	4812      	ldr	r0, [pc, #72]	@ (8004290 <HAL_UART_RxCpltCallback+0x124>)
 8004246:	f006 f9ab 	bl	800a5a0 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 800424a:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <HAL_UART_RxCpltCallback+0x128>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b10      	ldr	r3, [pc, #64]	@ (8004294 <HAL_UART_RxCpltCallback+0x128>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0204 	bic.w	r2, r2, #4
 8004258:	601a      	str	r2, [r3, #0]
			}
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 800425a:	221e      	movs	r2, #30
 800425c:	490b      	ldr	r1, [pc, #44]	@ (800428c <HAL_UART_RxCpltCallback+0x120>)
 800425e:	480c      	ldr	r0, [pc, #48]	@ (8004290 <HAL_UART_RxCpltCallback+0x124>)
 8004260:	f006 f99e 	bl	800a5a0 <HAL_UART_Receive_DMA>

}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800426c:	40013800 	.word	0x40013800
 8004270:	2000070c 	.word	0x2000070c
 8004274:	20000708 	.word	0x20000708
 8004278:	200004c8 	.word	0x200004c8
 800427c:	200006c8 	.word	0x200006c8
 8004280:	20001020 	.word	0x20001020
 8004284:	20001174 	.word	0x20001174
 8004288:	40008000 	.word	0x40008000
 800428c:	200004a8 	.word	0x200004a8
 8004290:	20000f8c 	.word	0x20000f8c
 8004294:	200010b4 	.word	0x200010b4

08004298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004298:	480d      	ldr	r0, [pc, #52]	@ (80042d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800429a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800429c:	f7ff f98c 	bl	80035b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042a0:	480c      	ldr	r0, [pc, #48]	@ (80042d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80042a2:	490d      	ldr	r1, [pc, #52]	@ (80042d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042a4:	4a0d      	ldr	r2, [pc, #52]	@ (80042dc <LoopForever+0xe>)
  movs r3, #0
 80042a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80042a8:	e002      	b.n	80042b0 <LoopCopyDataInit>

080042aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ae:	3304      	adds	r3, #4

080042b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042b4:	d3f9      	bcc.n	80042aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042b6:	4a0a      	ldr	r2, [pc, #40]	@ (80042e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042b8:	4c0a      	ldr	r4, [pc, #40]	@ (80042e4 <LoopForever+0x16>)
  movs r3, #0
 80042ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042bc:	e001      	b.n	80042c2 <LoopFillZerobss>

080042be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042c0:	3204      	adds	r2, #4

080042c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042c4:	d3fb      	bcc.n	80042be <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80042c6:	f009 f97d 	bl	800d5c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042ca:	f7fd fe8f 	bl	8001fec <main>

080042ce <LoopForever>:

LoopForever:
    b LoopForever
 80042ce:	e7fe      	b.n	80042ce <LoopForever>
  ldr   r0, =_estack
 80042d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80042d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80042dc:	08010530 	.word	0x08010530
  ldr r2, =_sbss
 80042e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80042e4:	20001324 	.word	0x20001324

080042e8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042e8:	e7fe      	b.n	80042e8 <COMP1_2_3_IRQHandler>

080042ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f4:	2003      	movs	r0, #3
 80042f6:	f001 fe11 	bl	8005f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042fa:	200f      	movs	r0, #15
 80042fc:	f000 f80e 	bl	800431c <HAL_InitTick>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	71fb      	strb	r3, [r7, #7]
 800430a:	e001      	b.n	8004310 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800430c:	f7fe ffb4 	bl	8003278 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004310:	79fb      	ldrb	r3, [r7, #7]

}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004328:	4b16      	ldr	r3, [pc, #88]	@ (8004384 <HAL_InitTick+0x68>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d022      	beq.n	8004376 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004330:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <HAL_InitTick+0x6c>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b13      	ldr	r3, [pc, #76]	@ (8004384 <HAL_InitTick+0x68>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800433c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fe1c 	bl	8005f82 <HAL_SYSTICK_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10f      	bne.n	8004370 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b0f      	cmp	r3, #15
 8004354:	d809      	bhi.n	800436a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004356:	2200      	movs	r2, #0
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	f04f 30ff 	mov.w	r0, #4294967295
 800435e:	f001 fde8 	bl	8005f32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004362:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <HAL_InitTick+0x70>)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	e007      	b.n	800437a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
 800436e:	e004      	b.n	800437a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e001      	b.n	800437a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000018 	.word	0x20000018
 8004388:	20000010 	.word	0x20000010
 800438c:	20000014 	.word	0x20000014

08004390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004394:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <HAL_IncTick+0x1c>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <HAL_IncTick+0x20>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4413      	add	r3, r2
 800439e:	4a03      	ldr	r2, [pc, #12]	@ (80043ac <HAL_IncTick+0x1c>)
 80043a0:	6013      	str	r3, [r2, #0]
}
 80043a2:	bf00      	nop
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	200011d4 	.word	0x200011d4
 80043b0:	20000018 	.word	0x20000018

080043b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return uwTick;
 80043b8:	4b03      	ldr	r3, [pc, #12]	@ (80043c8 <HAL_GetTick+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	200011d4 	.word	0x200011d4

080043cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043d4:	f7ff ffee 	bl	80043b4 <HAL_GetTick>
 80043d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d004      	beq.n	80043f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80043e6:	4b09      	ldr	r3, [pc, #36]	@ (800440c <HAL_Delay+0x40>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043f0:	bf00      	nop
 80043f2:	f7ff ffdf 	bl	80043b4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d8f7      	bhi.n	80043f2 <HAL_Delay+0x26>
  {
  }
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000018 	.word	0x20000018

08004410 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	609a      	str	r2, [r3, #8]
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3360      	adds	r3, #96	@ 0x60
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <LL_ADC_SetOffset+0x44>)
 800449a:	4013      	ands	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80044b0:	bf00      	nop
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	03fff000 	.word	0x03fff000

080044c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3360      	adds	r3, #96	@ 0x60
 80044ce:	461a      	mov	r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3360      	adds	r3, #96	@ 0x60
 80044fc:	461a      	mov	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	431a      	orrs	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004522:	b480      	push	{r7}
 8004524:	b087      	sub	sp, #28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3360      	adds	r3, #96	@ 0x60
 8004532:	461a      	mov	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	431a      	orrs	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3360      	adds	r3, #96	@ 0x60
 8004568:	461a      	mov	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	431a      	orrs	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	615a      	str	r2, [r3, #20]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045da:	b480      	push	{r7}
 80045dc:	b087      	sub	sp, #28
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3330      	adds	r3, #48	@ 0x30
 80045ea:	461a      	mov	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	0a1b      	lsrs	r3, r3, #8
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	4413      	add	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	211f      	movs	r1, #31
 8004606:	fa01 f303 	lsl.w	r3, r1, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	401a      	ands	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0e9b      	lsrs	r3, r3, #26
 8004612:	f003 011f 	and.w	r1, r3, #31
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	431a      	orrs	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3314      	adds	r3, #20
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	0e5b      	lsrs	r3, r3, #25
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	4413      	add	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	0d1b      	lsrs	r3, r3, #20
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2107      	movs	r1, #7
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	401a      	ands	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	0d1b      	lsrs	r3, r3, #20
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	431a      	orrs	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c8:	43db      	mvns	r3, r3
 80046ca:	401a      	ands	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f003 0318 	and.w	r3, r3, #24
 80046d2:	4908      	ldr	r1, [pc, #32]	@ (80046f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80046d4:	40d9      	lsrs	r1, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	400b      	ands	r3, r1
 80046da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046de:	431a      	orrs	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	0007ffff 	.word	0x0007ffff

080046f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 031f 	and.w	r3, r3, #31
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004740:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6093      	str	r3, [r2, #8]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004768:	d101      	bne.n	800476e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800478c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004790:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047b8:	d101      	bne.n	80047be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047e0:	f043 0201 	orr.w	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <LL_ADC_IsEnabled+0x18>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <LL_ADC_IsEnabled+0x1a>
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800482a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800482e:	f043 0204 	orr.w	r2, r3, #4
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b04      	cmp	r3, #4
 8004854:	d101      	bne.n	800485a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b08      	cmp	r3, #8
 800487a:	d101      	bne.n	8004880 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b089      	sub	sp, #36	@ 0x24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e167      	b.n	8004b7a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fc fe13 	bl	80014e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff ff3f 	bl	8004754 <LL_ADC_IsDeepPowerDownEnabled>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff ff25 	bl	8004730 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff ff5a 	bl	80047a4 <LL_ADC_IsInternalRegulatorEnabled>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d115      	bne.n	8004922 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ff3e 	bl	800477c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004900:	4ba0      	ldr	r3, [pc, #640]	@ (8004b84 <HAL_ADC_Init+0x2f4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	099b      	lsrs	r3, r3, #6
 8004906:	4aa0      	ldr	r2, [pc, #640]	@ (8004b88 <HAL_ADC_Init+0x2f8>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	099b      	lsrs	r3, r3, #6
 800490e:	3301      	adds	r3, #1
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004914:	e002      	b.n	800491c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3b01      	subs	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f9      	bne.n	8004916 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff ff3c 	bl	80047a4 <LL_ADC_IsInternalRegulatorEnabled>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10d      	bne.n	800494e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004936:	f043 0210 	orr.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004942:	f043 0201 	orr.w	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff ff75 	bl	8004842 <LL_ADC_REG_IsConversionOngoing>
 8004958:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 8100 	bne.w	8004b68 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 80fc 	bne.w	8004b68 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004974:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004978:	f043 0202 	orr.w	r2, r3, #2
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ff35 	bl	80047f4 <LL_ADC_IsEnabled>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d111      	bne.n	80049b4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004990:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004994:	f7ff ff2e 	bl	80047f4 <LL_ADC_IsEnabled>
 8004998:	4604      	mov	r4, r0
 800499a:	487c      	ldr	r0, [pc, #496]	@ (8004b8c <HAL_ADC_Init+0x2fc>)
 800499c:	f7ff ff2a 	bl	80047f4 <LL_ADC_IsEnabled>
 80049a0:	4603      	mov	r3, r0
 80049a2:	4323      	orrs	r3, r4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4619      	mov	r1, r3
 80049ae:	4878      	ldr	r0, [pc, #480]	@ (8004b90 <HAL_ADC_Init+0x300>)
 80049b0:	f7ff fd2e 	bl	8004410 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	7f5b      	ldrb	r3, [r3, #29]
 80049b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80049c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80049ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d106      	bne.n	80049f0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	3b01      	subs	r3, #1
 80049e8:	045b      	lsls	r3, r3, #17
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	4b60      	ldr	r3, [pc, #384]	@ (8004b94 <HAL_ADC_Init+0x304>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	69b9      	ldr	r1, [r7, #24]
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff ff14 	bl	8004868 <LL_ADC_INJ_IsConversionOngoing>
 8004a40:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d16d      	bne.n	8004b24 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d16a      	bne.n	8004b24 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a52:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a5a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a6a:	f023 0302 	bic.w	r3, r3, #2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	69b9      	ldr	r1, [r7, #24]
 8004a74:	430b      	orrs	r3, r1
 8004a76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d017      	beq.n	8004ab0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004a8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004a98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6911      	ldr	r1, [r2, #16]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004aae:	e013      	b.n	8004ad8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004abe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ad0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ad4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d118      	bne.n	8004b14 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004aec:	f023 0304 	bic.w	r3, r3, #4
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004af8:	4311      	orrs	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b04:	430a      	orrs	r2, r1
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0201 	orr.w	r2, r2, #1
 8004b10:	611a      	str	r2, [r3, #16]
 8004b12:	e007      	b.n	8004b24 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d10c      	bne.n	8004b46 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	f023 010f 	bic.w	r1, r3, #15
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	1e5a      	subs	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b44:	e007      	b.n	8004b56 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 020f 	bic.w	r2, r2, #15
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5a:	f023 0303 	bic.w	r3, r3, #3
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b66:	e007      	b.n	8004b78 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6c:	f043 0210 	orr.w	r2, r3, #16
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3724      	adds	r7, #36	@ 0x24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd90      	pop	{r4, r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000010 	.word	0x20000010
 8004b88:	053e2d63 	.word	0x053e2d63
 8004b8c:	50000100 	.word	0x50000100
 8004b90:	50000300 	.word	0x50000300
 8004b94:	fff04007 	.word	0xfff04007

08004b98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ba4:	4851      	ldr	r0, [pc, #324]	@ (8004cec <HAL_ADC_Start_DMA+0x154>)
 8004ba6:	f7ff fda7 	bl	80046f8 <LL_ADC_GetMultimode>
 8004baa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fe46 	bl	8004842 <LL_ADC_REG_IsConversionOngoing>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 808f 	bne.w	8004cdc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_ADC_Start_DMA+0x34>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e08a      	b.n	8004ce2 <HAL_ADC_Start_DMA+0x14a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d002      	beq.n	8004be6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b09      	cmp	r3, #9
 8004be4:	d173      	bne.n	8004cce <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 feb2 	bl	8005950 <ADC_Enable>
 8004bec:	4603      	mov	r3, r0
 8004bee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d166      	bne.n	8004cc4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a38      	ldr	r2, [pc, #224]	@ (8004cf0 <HAL_ADC_Start_DMA+0x158>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d002      	beq.n	8004c1a <HAL_ADC_Start_DMA+0x82>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	e001      	b.n	8004c1e <HAL_ADC_Start_DMA+0x86>
 8004c1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d002      	beq.n	8004c2c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d006      	beq.n	8004c52 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c48:	f023 0206 	bic.w	r2, r3, #6
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c50:	e002      	b.n	8004c58 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5c:	4a25      	ldr	r2, [pc, #148]	@ (8004cf4 <HAL_ADC_Start_DMA+0x15c>)
 8004c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c64:	4a24      	ldr	r2, [pc, #144]	@ (8004cf8 <HAL_ADC_Start_DMA+0x160>)
 8004c66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6c:	4a23      	ldr	r2, [pc, #140]	@ (8004cfc <HAL_ADC_Start_DMA+0x164>)
 8004c6e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	221c      	movs	r2, #28
 8004c76:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0210 	orr.w	r2, r2, #16
 8004c8e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3340      	adds	r3, #64	@ 0x40
 8004caa:	4619      	mov	r1, r3
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f001 fa1c 	bl	80060ec <HAL_DMA_Start_IT>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fdac 	bl	800481a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004cc2:	e00d      	b.n	8004ce0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004ccc:	e008      	b.n	8004ce0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004cda:	e001      	b.n	8004ce0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	50000300 	.word	0x50000300
 8004cf0:	50000100 	.word	0x50000100
 8004cf4:	08005a5d 	.word	0x08005a5d
 8004cf8:	08005b35 	.word	0x08005b35
 8004cfc:	08005b51 	.word	0x08005b51

08004d00 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	@ 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004d08:	2300      	movs	r3, #0
 8004d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d1c:	4883      	ldr	r0, [pc, #524]	@ (8004f2c <HAL_ADC_IRQHandler+0x22c>)
 8004d1e:	f7ff fceb 	bl	80046f8 <LL_ADC_GetMultimode>
 8004d22:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d017      	beq.n	8004d5e <HAL_ADC_IRQHandler+0x5e>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d012      	beq.n	8004d5e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 ff65 	bl	8005c20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <HAL_ADC_IRQHandler+0x72>
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8085 	beq.w	8004e88 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d07f      	beq.n	8004e88 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fc05 	bl	80045b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d064      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f30 <HAL_ADC_IRQHandler+0x230>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d002      	beq.n	8004dc0 <HAL_ADC_IRQHandler+0xc0>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	e001      	b.n	8004dc4 <HAL_ADC_IRQHandler+0xc4>
 8004dc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d008      	beq.n	8004dde <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	d002      	beq.n	8004dde <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b09      	cmp	r3, #9
 8004ddc:	d104      	bne.n	8004de8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	623b      	str	r3, [r7, #32]
 8004de6:	e00d      	b.n	8004e04 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a50      	ldr	r2, [pc, #320]	@ (8004f30 <HAL_ADC_IRQHandler+0x230>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d002      	beq.n	8004df8 <HAL_ADC_IRQHandler+0xf8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	e001      	b.n	8004dfc <HAL_ADC_IRQHandler+0xfc>
 8004df8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004dfc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d135      	bne.n	8004e7a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d12e      	bne.n	8004e7a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fd0e 	bl	8004842 <LL_ADC_REG_IsConversionOngoing>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d11a      	bne.n	8004e62 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 020c 	bic.w	r2, r2, #12
 8004e3a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d112      	bne.n	8004e7a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e58:	f043 0201 	orr.w	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e60:	e00b      	b.n	8004e7a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	f043 0210 	orr.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fc fbbc 	bl	80015f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	220c      	movs	r2, #12
 8004e86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d004      	beq.n	8004e9c <HAL_ADC_IRQHandler+0x19c>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 809e 	beq.w	8004fe4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 8098 	beq.w	8004fe4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fbae 	bl	8004632 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004ed6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fb69 	bl	80045b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ee2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	@ (8004f30 <HAL_ADC_IRQHandler+0x230>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d002      	beq.n	8004ef4 <HAL_ADC_IRQHandler+0x1f4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	e001      	b.n	8004ef8 <HAL_ADC_IRQHandler+0x1f8>
 8004ef4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d008      	beq.n	8004f12 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b06      	cmp	r3, #6
 8004f0a:	d002      	beq.n	8004f12 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2b07      	cmp	r3, #7
 8004f10:	d104      	bne.n	8004f1c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	623b      	str	r3, [r7, #32]
 8004f1a:	e011      	b.n	8004f40 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a03      	ldr	r2, [pc, #12]	@ (8004f30 <HAL_ADC_IRQHandler+0x230>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d006      	beq.n	8004f34 <HAL_ADC_IRQHandler+0x234>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	e005      	b.n	8004f38 <HAL_ADC_IRQHandler+0x238>
 8004f2c:	50000300 	.word	0x50000300
 8004f30:	50000100 	.word	0x50000100
 8004f34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004f38:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d047      	beq.n	8004fd6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <HAL_ADC_IRQHandler+0x260>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d03f      	beq.n	8004fd6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d13a      	bne.n	8004fd6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6a:	2b40      	cmp	r3, #64	@ 0x40
 8004f6c:	d133      	bne.n	8004fd6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d12e      	bne.n	8004fd6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fc73 	bl	8004868 <LL_ADC_INJ_IsConversionOngoing>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11a      	bne.n	8004fbe <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f96:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d112      	bne.n	8004fd6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb4:	f043 0201 	orr.w	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fbc:	e00b      	b.n	8004fd6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc2:	f043 0210 	orr.w	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fce:	f043 0201 	orr.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fdfa 	bl	8005bd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2260      	movs	r2, #96	@ 0x60
 8004fe2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d011      	beq.n	8005012 <HAL_ADC_IRQHandler+0x312>
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f89f 	bl	8005148 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2280      	movs	r2, #128	@ 0x80
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d012      	beq.n	8005042 <HAL_ADC_IRQHandler+0x342>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fde0 	bl	8005bf8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005040:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005048:	2b00      	cmp	r3, #0
 800504a:	d012      	beq.n	8005072 <HAL_ADC_IRQHandler+0x372>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00d      	beq.n	8005072 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fdd2 	bl	8005c0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005070:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d036      	beq.n	80050ea <HAL_ADC_IRQHandler+0x3ea>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d031      	beq.n	80050ea <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800508e:	2301      	movs	r3, #1
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
 8005092:	e014      	b.n	80050be <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d008      	beq.n	80050ac <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800509a:	4825      	ldr	r0, [pc, #148]	@ (8005130 <HAL_ADC_IRQHandler+0x430>)
 800509c:	f7ff fb3a 	bl	8004714 <LL_ADC_GetMultiDMATransfer>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80050a6:	2301      	movs	r3, #1
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050aa:	e008      	b.n	80050be <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80050ba:	2301      	movs	r3, #1
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d10e      	bne.n	80050e2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d4:	f043 0202 	orr.w	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f83d 	bl	800515c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2210      	movs	r2, #16
 80050e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d018      	beq.n	8005126 <HAL_ADC_IRQHandler+0x426>
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d013      	beq.n	8005126 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005102:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800510e:	f043 0208 	orr.w	r2, r3, #8
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800511e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fd5f 	bl	8005be4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005126:	bf00      	nop
 8005128:	3728      	adds	r7, #40	@ 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	50000300 	.word	0x50000300

08005134 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b0b6      	sub	sp, #216	@ 0xd8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_ADC_ConfigChannel+0x22>
 800518e:	2302      	movs	r3, #2
 8005190:	e3c8      	b.n	8005924 <HAL_ADC_ConfigChannel+0x7b4>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fb4f 	bl	8004842 <LL_ADC_REG_IsConversionOngoing>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 83ad 	bne.w	8005906 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6859      	ldr	r1, [r3, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	f7ff fa0e 	bl	80045da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fb3d 	bl	8004842 <LL_ADC_REG_IsConversionOngoing>
 80051c8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fb49 	bl	8004868 <LL_ADC_INJ_IsConversionOngoing>
 80051d6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 81d9 	bne.w	8005596 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f040 81d4 	bne.w	8005596 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051f6:	d10f      	bne.n	8005218 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	4619      	mov	r1, r3
 8005204:	f7ff fa28 	bl	8004658 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff f9bc 	bl	800458e <LL_ADC_SetSamplingTimeCommonConfig>
 8005216:	e00e      	b.n	8005236 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	461a      	mov	r2, r3
 8005226:	f7ff fa17 	bl	8004658 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2100      	movs	r1, #0
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff f9ac 	bl	800458e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695a      	ldr	r2, [r3, #20]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	08db      	lsrs	r3, r3, #3
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b04      	cmp	r3, #4
 8005256:	d022      	beq.n	800529e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	6919      	ldr	r1, [r3, #16]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005268:	f7ff f906 	bl	8004478 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6919      	ldr	r1, [r3, #16]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	461a      	mov	r2, r3
 800527a:	f7ff f952 	bl	8004522 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800528a:	2b01      	cmp	r3, #1
 800528c:	d102      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x124>
 800528e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005292:	e000      	b.n	8005296 <HAL_ADC_ConfigChannel+0x126>
 8005294:	2300      	movs	r3, #0
 8005296:	461a      	mov	r2, r3
 8005298:	f7ff f95e 	bl	8004558 <LL_ADC_SetOffsetSaturation>
 800529c:	e17b      	b.n	8005596 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2100      	movs	r1, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff f90b 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x15a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff f900 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 80052c0:	4603      	mov	r3, r0
 80052c2:	0e9b      	lsrs	r3, r3, #26
 80052c4:	f003 021f 	and.w	r2, r3, #31
 80052c8:	e01e      	b.n	8005308 <HAL_ADC_ConfigChannel+0x198>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff f8f5 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052e0:	fa93 f3a3 	rbit	r3, r3
 80052e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80052f8:	2320      	movs	r3, #32
 80052fa:	e004      	b.n	8005306 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80052fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005300:	fab3 f383 	clz	r3, r3
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x1b0>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	0e9b      	lsrs	r3, r3, #26
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	e018      	b.n	8005352 <HAL_ADC_ConfigChannel+0x1e2>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005328:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800532c:	fa93 f3a3 	rbit	r3, r3
 8005330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800533c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005344:	2320      	movs	r3, #32
 8005346:	e004      	b.n	8005352 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8005348:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800534c:	fab3 f383 	clz	r3, r3
 8005350:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005352:	429a      	cmp	r2, r3
 8005354:	d106      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff f8c4 	bl	80044ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2101      	movs	r1, #1
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f8a8 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 8005370:	4603      	mov	r3, r0
 8005372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x220>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2101      	movs	r1, #1
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff f89d 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 8005386:	4603      	mov	r3, r0
 8005388:	0e9b      	lsrs	r3, r3, #26
 800538a:	f003 021f 	and.w	r2, r3, #31
 800538e:	e01e      	b.n	80053ce <HAL_ADC_ConfigChannel+0x25e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2101      	movs	r1, #1
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff f892 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 800539c:	4603      	mov	r3, r0
 800539e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80053ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80053b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80053be:	2320      	movs	r3, #32
 80053c0:	e004      	b.n	80053cc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80053c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <HAL_ADC_ConfigChannel+0x276>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	0e9b      	lsrs	r3, r3, #26
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	e018      	b.n	8005418 <HAL_ADC_ConfigChannel+0x2a8>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80053fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005402:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800540a:	2320      	movs	r3, #32
 800540c:	e004      	b.n	8005418 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800540e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005412:	fab3 f383 	clz	r3, r3
 8005416:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005418:	429a      	cmp	r2, r3
 800541a:	d106      	bne.n	800542a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2200      	movs	r2, #0
 8005422:	2101      	movs	r1, #1
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff f861 	bl	80044ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2102      	movs	r1, #2
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff f845 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 8005436:	4603      	mov	r3, r0
 8005438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <HAL_ADC_ConfigChannel+0x2e6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff f83a 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 800544c:	4603      	mov	r3, r0
 800544e:	0e9b      	lsrs	r3, r3, #26
 8005450:	f003 021f 	and.w	r2, r3, #31
 8005454:	e01e      	b.n	8005494 <HAL_ADC_ConfigChannel+0x324>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2102      	movs	r1, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff f82f 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 8005462:	4603      	mov	r3, r0
 8005464:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546c:	fa93 f3a3 	rbit	r3, r3
 8005470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005474:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005478:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800547c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005484:	2320      	movs	r3, #32
 8005486:	e004      	b.n	8005492 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005488:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800548c:	fab3 f383 	clz	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x33c>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	0e9b      	lsrs	r3, r3, #26
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	e016      	b.n	80054da <HAL_ADC_ConfigChannel+0x36a>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80054be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80054c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80054cc:	2320      	movs	r3, #32
 80054ce:	e004      	b.n	80054da <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80054d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054d4:	fab3 f383 	clz	r3, r3
 80054d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054da:	429a      	cmp	r2, r3
 80054dc:	d106      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2200      	movs	r2, #0
 80054e4:	2102      	movs	r1, #2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff f800 	bl	80044ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2103      	movs	r1, #3
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe ffe4 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x3a8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2103      	movs	r1, #3
 8005508:	4618      	mov	r0, r3
 800550a:	f7fe ffd9 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 800550e:	4603      	mov	r3, r0
 8005510:	0e9b      	lsrs	r3, r3, #26
 8005512:	f003 021f 	and.w	r2, r3, #31
 8005516:	e017      	b.n	8005548 <HAL_ADC_ConfigChannel+0x3d8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2103      	movs	r1, #3
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe ffce 	bl	80044c0 <LL_ADC_GetOffsetChannel>
 8005524:	4603      	mov	r3, r0
 8005526:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800552a:	fa93 f3a3 	rbit	r3, r3
 800552e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005532:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800553a:	2320      	movs	r3, #32
 800553c:	e003      	b.n	8005546 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800553e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005540:	fab3 f383 	clz	r3, r3
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <HAL_ADC_ConfigChannel+0x3f0>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	0e9b      	lsrs	r3, r3, #26
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	e011      	b.n	8005584 <HAL_ADC_ConfigChannel+0x414>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005568:	fa93 f3a3 	rbit	r3, r3
 800556c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800556e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005570:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005578:	2320      	movs	r3, #32
 800557a:	e003      	b.n	8005584 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800557c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800557e:	fab3 f383 	clz	r3, r3
 8005582:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005584:	429a      	cmp	r2, r3
 8005586:	d106      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2200      	movs	r2, #0
 800558e:	2103      	movs	r1, #3
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe ffab 	bl	80044ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff f92a 	bl	80047f4 <LL_ADC_IsEnabled>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 8140 	bne.w	8005828 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f7ff f87b 	bl	80046b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	4a8f      	ldr	r2, [pc, #572]	@ (80057fc <HAL_ADC_ConfigChannel+0x68c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	f040 8131 	bne.w	8005828 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x47e>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	0e9b      	lsrs	r3, r3, #26
 80055dc:	3301      	adds	r3, #1
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	bf94      	ite	ls
 80055e6:	2301      	movls	r3, #1
 80055e8:	2300      	movhi	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e019      	b.n	8005622 <HAL_ADC_ConfigChannel+0x4b2>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055f6:	fa93 f3a3 	rbit	r3, r3
 80055fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80055fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055fe:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005600:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8005606:	2320      	movs	r3, #32
 8005608:	e003      	b.n	8005612 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800560a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800560c:	fab3 f383 	clz	r3, r3
 8005610:	b2db      	uxtb	r3, r3
 8005612:	3301      	adds	r3, #1
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2b09      	cmp	r3, #9
 800561a:	bf94      	ite	ls
 800561c:	2301      	movls	r3, #1
 800561e:	2300      	movhi	r3, #0
 8005620:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005622:	2b00      	cmp	r3, #0
 8005624:	d079      	beq.n	800571a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562e:	2b00      	cmp	r3, #0
 8005630:	d107      	bne.n	8005642 <HAL_ADC_ConfigChannel+0x4d2>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	0e9b      	lsrs	r3, r3, #26
 8005638:	3301      	adds	r3, #1
 800563a:	069b      	lsls	r3, r3, #26
 800563c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005640:	e015      	b.n	800566e <HAL_ADC_ConfigChannel+0x4fe>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005652:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800565a:	2320      	movs	r3, #32
 800565c:	e003      	b.n	8005666 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800565e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005660:	fab3 f383 	clz	r3, r3
 8005664:	b2db      	uxtb	r3, r3
 8005666:	3301      	adds	r3, #1
 8005668:	069b      	lsls	r3, r3, #26
 800566a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <HAL_ADC_ConfigChannel+0x51e>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	0e9b      	lsrs	r3, r3, #26
 8005680:	3301      	adds	r3, #1
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	2101      	movs	r1, #1
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	e017      	b.n	80056be <HAL_ADC_ConfigChannel+0x54e>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005696:	fa93 f3a3 	rbit	r3, r3
 800569a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800569c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800569e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80056a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80056a6:	2320      	movs	r3, #32
 80056a8:	e003      	b.n	80056b2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80056aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ac:	fab3 f383 	clz	r3, r3
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	3301      	adds	r3, #1
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	2101      	movs	r1, #1
 80056ba:	fa01 f303 	lsl.w	r3, r1, r3
 80056be:	ea42 0103 	orr.w	r1, r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <HAL_ADC_ConfigChannel+0x574>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	0e9b      	lsrs	r3, r3, #26
 80056d4:	3301      	adds	r3, #1
 80056d6:	f003 021f 	and.w	r2, r3, #31
 80056da:	4613      	mov	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4413      	add	r3, r2
 80056e0:	051b      	lsls	r3, r3, #20
 80056e2:	e018      	b.n	8005716 <HAL_ADC_ConfigChannel+0x5a6>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ec:	fa93 f3a3 	rbit	r3, r3
 80056f0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80056f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80056f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80056fc:	2320      	movs	r3, #32
 80056fe:	e003      	b.n	8005708 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005702:	fab3 f383 	clz	r3, r3
 8005706:	b2db      	uxtb	r3, r3
 8005708:	3301      	adds	r3, #1
 800570a:	f003 021f 	and.w	r2, r3, #31
 800570e:	4613      	mov	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4413      	add	r3, r2
 8005714:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005716:	430b      	orrs	r3, r1
 8005718:	e081      	b.n	800581e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <HAL_ADC_ConfigChannel+0x5c6>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	0e9b      	lsrs	r3, r3, #26
 800572c:	3301      	adds	r3, #1
 800572e:	069b      	lsls	r3, r3, #26
 8005730:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005734:	e015      	b.n	8005762 <HAL_ADC_ConfigChannel+0x5f2>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	fa93 f3a3 	rbit	r3, r3
 8005742:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005746:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800574e:	2320      	movs	r3, #32
 8005750:	e003      	b.n	800575a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005754:	fab3 f383 	clz	r3, r3
 8005758:	b2db      	uxtb	r3, r3
 800575a:	3301      	adds	r3, #1
 800575c:	069b      	lsls	r3, r3, #26
 800575e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x612>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	0e9b      	lsrs	r3, r3, #26
 8005774:	3301      	adds	r3, #1
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2101      	movs	r1, #1
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	e017      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x642>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	fa93 f3a3 	rbit	r3, r3
 800578e:	61fb      	str	r3, [r7, #28]
  return result;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800579a:	2320      	movs	r3, #32
 800579c:	e003      	b.n	80057a6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	fab3 f383 	clz	r3, r3
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	3301      	adds	r3, #1
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	2101      	movs	r1, #1
 80057ae:	fa01 f303 	lsl.w	r3, r1, r3
 80057b2:	ea42 0103 	orr.w	r1, r2, r3
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10d      	bne.n	80057de <HAL_ADC_ConfigChannel+0x66e>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	0e9b      	lsrs	r3, r3, #26
 80057c8:	3301      	adds	r3, #1
 80057ca:	f003 021f 	and.w	r2, r3, #31
 80057ce:	4613      	mov	r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4413      	add	r3, r2
 80057d4:	3b1e      	subs	r3, #30
 80057d6:	051b      	lsls	r3, r3, #20
 80057d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057dc:	e01e      	b.n	800581c <HAL_ADC_ConfigChannel+0x6ac>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	fa93 f3a3 	rbit	r3, r3
 80057ea:	613b      	str	r3, [r7, #16]
  return result;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80057f6:	2320      	movs	r3, #32
 80057f8:	e006      	b.n	8005808 <HAL_ADC_ConfigChannel+0x698>
 80057fa:	bf00      	nop
 80057fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	3301      	adds	r3, #1
 800580a:	f003 021f 	and.w	r2, r3, #31
 800580e:	4613      	mov	r3, r2
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	4413      	add	r3, r2
 8005814:	3b1e      	subs	r3, #30
 8005816:	051b      	lsls	r3, r3, #20
 8005818:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800581c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005822:	4619      	mov	r1, r3
 8005824:	f7fe ff18 	bl	8004658 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b3f      	ldr	r3, [pc, #252]	@ (800592c <HAL_ADC_ConfigChannel+0x7bc>)
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d071      	beq.n	8005918 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005834:	483e      	ldr	r0, [pc, #248]	@ (8005930 <HAL_ADC_ConfigChannel+0x7c0>)
 8005836:	f7fe fe11 	bl	800445c <LL_ADC_GetCommonPathInternalCh>
 800583a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a3c      	ldr	r2, [pc, #240]	@ (8005934 <HAL_ADC_ConfigChannel+0x7c4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_ADC_ConfigChannel+0x6e2>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a3a      	ldr	r2, [pc, #232]	@ (8005938 <HAL_ADC_ConfigChannel+0x7c8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d127      	bne.n	80058a2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d121      	bne.n	80058a2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005866:	d157      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800586c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005870:	4619      	mov	r1, r3
 8005872:	482f      	ldr	r0, [pc, #188]	@ (8005930 <HAL_ADC_ConfigChannel+0x7c0>)
 8005874:	f7fe fddf 	bl	8004436 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005878:	4b30      	ldr	r3, [pc, #192]	@ (800593c <HAL_ADC_ConfigChannel+0x7cc>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	099b      	lsrs	r3, r3, #6
 800587e:	4a30      	ldr	r2, [pc, #192]	@ (8005940 <HAL_ADC_ConfigChannel+0x7d0>)
 8005880:	fba2 2303 	umull	r2, r3, r2, r3
 8005884:	099b      	lsrs	r3, r3, #6
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	4613      	mov	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005892:	e002      	b.n	800589a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3b01      	subs	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f9      	bne.n	8005894 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058a0:	e03a      	b.n	8005918 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a27      	ldr	r2, [pc, #156]	@ (8005944 <HAL_ADC_ConfigChannel+0x7d4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d113      	bne.n	80058d4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10d      	bne.n	80058d4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a22      	ldr	r2, [pc, #136]	@ (8005948 <HAL_ADC_ConfigChannel+0x7d8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d02a      	beq.n	8005918 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058ca:	4619      	mov	r1, r3
 80058cc:	4818      	ldr	r0, [pc, #96]	@ (8005930 <HAL_ADC_ConfigChannel+0x7c0>)
 80058ce:	f7fe fdb2 	bl	8004436 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058d2:	e021      	b.n	8005918 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1c      	ldr	r2, [pc, #112]	@ (800594c <HAL_ADC_ConfigChannel+0x7dc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d11c      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d116      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a16      	ldr	r2, [pc, #88]	@ (8005948 <HAL_ADC_ConfigChannel+0x7d8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d011      	beq.n	8005918 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058fc:	4619      	mov	r1, r3
 80058fe:	480c      	ldr	r0, [pc, #48]	@ (8005930 <HAL_ADC_ConfigChannel+0x7c0>)
 8005900:	f7fe fd99 	bl	8004436 <LL_ADC_SetCommonPathInternalCh>
 8005904:	e008      	b.n	8005918 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800590a:	f043 0220 	orr.w	r2, r3, #32
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005920:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005924:	4618      	mov	r0, r3
 8005926:	37d8      	adds	r7, #216	@ 0xd8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	80080000 	.word	0x80080000
 8005930:	50000300 	.word	0x50000300
 8005934:	c3210000 	.word	0xc3210000
 8005938:	90c00010 	.word	0x90c00010
 800593c:	20000010 	.word	0x20000010
 8005940:	053e2d63 	.word	0x053e2d63
 8005944:	c7520000 	.word	0xc7520000
 8005948:	50000100 	.word	0x50000100
 800594c:	cb840000 	.word	0xcb840000

08005950 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005958:	2300      	movs	r3, #0
 800595a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe ff47 	bl	80047f4 <LL_ADC_IsEnabled>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d169      	bne.n	8005a40 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	4b36      	ldr	r3, [pc, #216]	@ (8005a4c <ADC_Enable+0xfc>)
 8005974:	4013      	ands	r3, r2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597e:	f043 0210 	orr.w	r2, r3, #16
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e055      	b.n	8005a42 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe ff16 	bl	80047cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059a0:	482b      	ldr	r0, [pc, #172]	@ (8005a50 <ADC_Enable+0x100>)
 80059a2:	f7fe fd5b 	bl	800445c <LL_ADC_GetCommonPathInternalCh>
 80059a6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80059a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059b0:	4b28      	ldr	r3, [pc, #160]	@ (8005a54 <ADC_Enable+0x104>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	099b      	lsrs	r3, r3, #6
 80059b6:	4a28      	ldr	r2, [pc, #160]	@ (8005a58 <ADC_Enable+0x108>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	099b      	lsrs	r3, r3, #6
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	4613      	mov	r3, r2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80059ca:	e002      	b.n	80059d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f9      	bne.n	80059cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80059d8:	f7fe fcec 	bl	80043b4 <HAL_GetTick>
 80059dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059de:	e028      	b.n	8005a32 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fe ff05 	bl	80047f4 <LL_ADC_IsEnabled>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe fee9 	bl	80047cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80059fa:	f7fe fcdb 	bl	80043b4 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d914      	bls.n	8005a32 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d00d      	beq.n	8005a32 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1a:	f043 0210 	orr.w	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a26:	f043 0201 	orr.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e007      	b.n	8005a42 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d1cf      	bne.n	80059e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	8000003f 	.word	0x8000003f
 8005a50:	50000300 	.word	0x50000300
 8005a54:	20000010 	.word	0x20000010
 8005a58:	053e2d63 	.word	0x053e2d63

08005a5c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d14b      	bne.n	8005b0e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d021      	beq.n	8005ad4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe fd8d 	bl	80045b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d032      	beq.n	8005b06 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d12b      	bne.n	8005b06 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d11f      	bne.n	8005b06 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aca:	f043 0201 	orr.w	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ad2:	e018      	b.n	8005b06 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d111      	bne.n	8005b06 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d105      	bne.n	8005b06 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afe:	f043 0201 	orr.w	r2, r3, #1
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7fb fd76 	bl	80015f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b0c:	e00e      	b.n	8005b2c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff fb1e 	bl	800515c <HAL_ADC_ErrorCallback>
}
 8005b20:	e004      	b.n	8005b2c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff faf6 	bl	8005134 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6e:	f043 0204 	orr.w	r2, r3, #4
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff faf0 	bl	800515c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b7c:	bf00      	nop
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <LL_ADC_IsEnabled>:
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <LL_ADC_IsEnabled+0x18>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <LL_ADC_IsEnabled+0x1a>
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <LL_ADC_REG_IsConversionOngoing>:
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d101      	bne.n	8005bc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b0a1      	sub	sp, #132	@ 0x84
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e08b      	b.n	8005d6a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c6a:	d102      	bne.n	8005c72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005c6c:	4b41      	ldr	r3, [pc, #260]	@ (8005d74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005c6e:	60bb      	str	r3, [r7, #8]
 8005c70:	e001      	b.n	8005c76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c80:	f043 0220 	orr.w	r2, r3, #32
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e06a      	b.n	8005d6a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff ff87 	bl	8005baa <LL_ADC_REG_IsConversionOngoing>
 8005c9c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff ff81 	bl	8005baa <LL_ADC_REG_IsConversionOngoing>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d14c      	bne.n	8005d48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005cae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d149      	bne.n	8005d48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005cb4:	4b30      	ldr	r3, [pc, #192]	@ (8005d78 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005cb6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d028      	beq.n	8005d12 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005cc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6859      	ldr	r1, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005cd2:	035b      	lsls	r3, r3, #13
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cdc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005ce0:	f7ff ff50 	bl	8005b84 <LL_ADC_IsEnabled>
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	4823      	ldr	r0, [pc, #140]	@ (8005d74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005ce8:	f7ff ff4c 	bl	8005b84 <LL_ADC_IsEnabled>
 8005cec:	4603      	mov	r3, r0
 8005cee:	4323      	orrs	r3, r4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d133      	bne.n	8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005cfc:	f023 030f 	bic.w	r3, r3, #15
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	6811      	ldr	r1, [r2, #0]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	6892      	ldr	r2, [r2, #8]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d0e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d10:	e024      	b.n	8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d1e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005d22:	f7ff ff2f 	bl	8005b84 <LL_ADC_IsEnabled>
 8005d26:	4604      	mov	r4, r0
 8005d28:	4812      	ldr	r0, [pc, #72]	@ (8005d74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005d2a:	f7ff ff2b 	bl	8005b84 <LL_ADC_IsEnabled>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4323      	orrs	r3, r4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d112      	bne.n	8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005d36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005d3e:	f023 030f 	bic.w	r3, r3, #15
 8005d42:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005d44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d46:	e009      	b.n	8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4c:	f043 0220 	orr.w	r2, r3, #32
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005d5a:	e000      	b.n	8005d5e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3784      	adds	r7, #132	@ 0x84
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd90      	pop	{r4, r7, pc}
 8005d72:	bf00      	nop
 8005d74:	50000100 	.word	0x50000100
 8005d78:	50000300 	.word	0x50000300

08005d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dae:	4a04      	ldr	r2, [pc, #16]	@ (8005dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	60d3      	str	r3, [r2, #12]
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	e000ed00 	.word	0xe000ed00

08005dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dc8:	4b04      	ldr	r3, [pc, #16]	@ (8005ddc <__NVIC_GetPriorityGrouping+0x18>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	f003 0307 	and.w	r3, r3, #7
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	e000ed00 	.word	0xe000ed00

08005de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	db0b      	blt.n	8005e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	f003 021f 	and.w	r2, r3, #31
 8005df8:	4907      	ldr	r1, [pc, #28]	@ (8005e18 <__NVIC_EnableIRQ+0x38>)
 8005dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	2001      	movs	r0, #1
 8005e02:	fa00 f202 	lsl.w	r2, r0, r2
 8005e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	e000e100 	.word	0xe000e100

08005e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	db0a      	blt.n	8005e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	490c      	ldr	r1, [pc, #48]	@ (8005e68 <__NVIC_SetPriority+0x4c>)
 8005e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3a:	0112      	lsls	r2, r2, #4
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	440b      	add	r3, r1
 8005e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e44:	e00a      	b.n	8005e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4908      	ldr	r1, [pc, #32]	@ (8005e6c <__NVIC_SetPriority+0x50>)
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	3b04      	subs	r3, #4
 8005e54:	0112      	lsls	r2, r2, #4
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	440b      	add	r3, r1
 8005e5a:	761a      	strb	r2, [r3, #24]
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	e000e100 	.word	0xe000e100
 8005e6c:	e000ed00 	.word	0xe000ed00

08005e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b089      	sub	sp, #36	@ 0x24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f1c3 0307 	rsb	r3, r3, #7
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	bf28      	it	cs
 8005e8e:	2304      	movcs	r3, #4
 8005e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	3304      	adds	r3, #4
 8005e96:	2b06      	cmp	r3, #6
 8005e98:	d902      	bls.n	8005ea0 <NVIC_EncodePriority+0x30>
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	3b03      	subs	r3, #3
 8005e9e:	e000      	b.n	8005ea2 <NVIC_EncodePriority+0x32>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43da      	mvns	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec2:	43d9      	mvns	r1, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec8:	4313      	orrs	r3, r2
         );
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3724      	adds	r7, #36	@ 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ee8:	d301      	bcc.n	8005eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005eea:	2301      	movs	r3, #1
 8005eec:	e00f      	b.n	8005f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005eee:	4a0a      	ldr	r2, [pc, #40]	@ (8005f18 <SysTick_Config+0x40>)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ef6:	210f      	movs	r1, #15
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	f7ff ff8e 	bl	8005e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f00:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <SysTick_Config+0x40>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f06:	4b04      	ldr	r3, [pc, #16]	@ (8005f18 <SysTick_Config+0x40>)
 8005f08:	2207      	movs	r2, #7
 8005f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	e000e010 	.word	0xe000e010

08005f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff ff29 	bl	8005d7c <__NVIC_SetPriorityGrouping>
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b086      	sub	sp, #24
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	4603      	mov	r3, r0
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f40:	f7ff ff40 	bl	8005dc4 <__NVIC_GetPriorityGrouping>
 8005f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f7ff ff90 	bl	8005e70 <NVIC_EncodePriority>
 8005f50:	4602      	mov	r2, r0
 8005f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff ff5f 	bl	8005e1c <__NVIC_SetPriority>
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff33 	bl	8005de0 <__NVIC_EnableIRQ>
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ffa4 	bl	8005ed8 <SysTick_Config>
 8005f90:	4603      	mov	r3, r0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e08d      	b.n	80060ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4b47      	ldr	r3, [pc, #284]	@ (80060d4 <HAL_DMA_Init+0x138>)
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d80f      	bhi.n	8005fda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4b45      	ldr	r3, [pc, #276]	@ (80060d8 <HAL_DMA_Init+0x13c>)
 8005fc2:	4413      	add	r3, r2
 8005fc4:	4a45      	ldr	r2, [pc, #276]	@ (80060dc <HAL_DMA_Init+0x140>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	009a      	lsls	r2, r3, #2
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a42      	ldr	r2, [pc, #264]	@ (80060e0 <HAL_DMA_Init+0x144>)
 8005fd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fd8:	e00e      	b.n	8005ff8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4b40      	ldr	r3, [pc, #256]	@ (80060e4 <HAL_DMA_Init+0x148>)
 8005fe2:	4413      	add	r3, r2
 8005fe4:	4a3d      	ldr	r2, [pc, #244]	@ (80060dc <HAL_DMA_Init+0x140>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	009a      	lsls	r2, r3, #2
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80060e8 <HAL_DMA_Init+0x14c>)
 8005ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800600e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006012:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800601c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa82 	bl	8006554 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006058:	d102      	bne.n	8006060 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006074:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d010      	beq.n	80060a0 <HAL_DMA_Init+0x104>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d80c      	bhi.n	80060a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 faa2 	bl	80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800609c:	605a      	str	r2, [r3, #4]
 800609e:	e008      	b.n	80060b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40020407 	.word	0x40020407
 80060d8:	bffdfff8 	.word	0xbffdfff8
 80060dc:	cccccccd 	.word	0xcccccccd
 80060e0:	40020000 	.word	0x40020000
 80060e4:	bffdfbf8 	.word	0xbffdfbf8
 80060e8:	40020400 	.word	0x40020400

080060ec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_DMA_Start_IT+0x20>
 8006108:	2302      	movs	r3, #2
 800610a:	e066      	b.n	80061da <HAL_DMA_Start_IT+0xee>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b01      	cmp	r3, #1
 800611e:	d155      	bne.n	80061cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f9c7 	bl	80064d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 020e 	orr.w	r2, r2, #14
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e00f      	b.n	8006184 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0204 	bic.w	r2, r2, #4
 8006172:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 020a 	orr.w	r2, r2, #10
 8006182:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d007      	beq.n	80061a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800619c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0201 	orr.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e005      	b.n	80061d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
 80061d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d005      	beq.n	8006206 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2204      	movs	r2, #4
 80061fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
 8006204:	e037      	b.n	8006276 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 020e 	bic.w	r2, r2, #14
 8006214:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006220:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006224:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623a:	f003 021f 	and.w	r2, r3, #31
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	2101      	movs	r1, #1
 8006244:	fa01 f202 	lsl.w	r2, r1, r2
 8006248:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006252:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006266:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800626a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006274:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d00d      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2204      	movs	r2, #4
 80062b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e047      	b.n	8006358 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 020e 	bic.w	r2, r2, #14
 80062d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fc:	f003 021f 	and.w	r2, r3, #31
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006304:	2101      	movs	r1, #1
 8006306:	fa01 f202 	lsl.w	r2, r1, r2
 800630a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006314:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800632c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006336:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
    }
  }
  return status;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2204      	movs	r2, #4
 8006384:	409a      	lsls	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d026      	beq.n	80063dc <HAL_DMA_IRQHandler+0x7a>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d021      	beq.n	80063dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0204 	bic.w	r2, r2, #4
 80063b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f003 021f 	and.w	r2, r3, #31
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	2104      	movs	r1, #4
 80063c4:	fa01 f202 	lsl.w	r2, r1, r2
 80063c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d071      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80063da:	e06c      	b.n	80064b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	2202      	movs	r2, #2
 80063e6:	409a      	lsls	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d02e      	beq.n	800644e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d029      	beq.n	800644e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 020a 	bic.w	r2, r2, #10
 8006416:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006424:	f003 021f 	and.w	r2, r3, #31
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642c:	2102      	movs	r1, #2
 800642e:	fa01 f202 	lsl.w	r2, r1, r2
 8006432:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d038      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800644c:	e033      	b.n	80064b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	2208      	movs	r2, #8
 8006458:	409a      	lsls	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d02a      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d025      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 020e 	bic.w	r2, r2, #14
 800647a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006480:	f003 021f 	and.w	r2, r3, #31
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	2101      	movs	r1, #1
 800648a:	fa01 f202 	lsl.w	r2, r1, r2
 800648e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
}
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006500:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006506:	f003 021f 	and.w	r2, r3, #31
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650e:	2101      	movs	r1, #1
 8006510:	fa01 f202 	lsl.w	r2, r1, r2
 8006514:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b10      	cmp	r3, #16
 8006524:	d108      	bne.n	8006538 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006536:	e007      	b.n	8006548 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	60da      	str	r2, [r3, #12]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	4b16      	ldr	r3, [pc, #88]	@ (80065bc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006564:	429a      	cmp	r2, r3
 8006566:	d802      	bhi.n	800656e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006568:	4b15      	ldr	r3, [pc, #84]	@ (80065c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e001      	b.n	8006572 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800656e:	4b15      	ldr	r3, [pc, #84]	@ (80065c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006570:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	3b08      	subs	r3, #8
 800657e:	4a12      	ldr	r2, [pc, #72]	@ (80065c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658c:	089b      	lsrs	r3, r3, #2
 800658e:	009a      	lsls	r2, r3, #2
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4413      	add	r3, r2
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a0b      	ldr	r2, [pc, #44]	@ (80065cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800659e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	2201      	movs	r2, #1
 80065a8:	409a      	lsls	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	40020407 	.word	0x40020407
 80065c0:	40020800 	.word	0x40020800
 80065c4:	40020820 	.word	0x40020820
 80065c8:	cccccccd 	.word	0xcccccccd
 80065cc:	40020880 	.word	0x40020880

080065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	461a      	mov	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a08      	ldr	r2, [pc, #32]	@ (8006614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80065f2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	2201      	movs	r2, #1
 80065fe:	409a      	lsls	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006604:	bf00      	nop
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	1000823f 	.word	0x1000823f
 8006614:	40020940 	.word	0x40020940

08006618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006626:	e15a      	b.n	80068de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	2101      	movs	r1, #1
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	fa01 f303 	lsl.w	r3, r1, r3
 8006634:	4013      	ands	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 814c 	beq.w	80068d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	2b01      	cmp	r3, #1
 800664a:	d005      	beq.n	8006658 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006654:	2b02      	cmp	r3, #2
 8006656:	d130      	bne.n	80066ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	2203      	movs	r2, #3
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	43db      	mvns	r3, r3
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4013      	ands	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800668e:	2201      	movs	r2, #1
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	43db      	mvns	r3, r3
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4013      	ands	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	091b      	lsrs	r3, r3, #4
 80066a4:	f003 0201 	and.w	r2, r3, #1
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d017      	beq.n	80066f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	2203      	movs	r2, #3
 80066d2:	fa02 f303 	lsl.w	r3, r2, r3
 80066d6:	43db      	mvns	r3, r3
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4013      	ands	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d123      	bne.n	800674a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	08da      	lsrs	r2, r3, #3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3208      	adds	r2, #8
 800670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	220f      	movs	r2, #15
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	43db      	mvns	r3, r3
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4013      	ands	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	08da      	lsrs	r2, r3, #3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3208      	adds	r2, #8
 8006744:	6939      	ldr	r1, [r7, #16]
 8006746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	2203      	movs	r2, #3
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	43db      	mvns	r3, r3
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4013      	ands	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f003 0203 	and.w	r2, r3, #3
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80a6 	beq.w	80068d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800678c:	4b5b      	ldr	r3, [pc, #364]	@ (80068fc <HAL_GPIO_Init+0x2e4>)
 800678e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006790:	4a5a      	ldr	r2, [pc, #360]	@ (80068fc <HAL_GPIO_Init+0x2e4>)
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	6613      	str	r3, [r2, #96]	@ 0x60
 8006798:	4b58      	ldr	r3, [pc, #352]	@ (80068fc <HAL_GPIO_Init+0x2e4>)
 800679a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067a4:	4a56      	ldr	r2, [pc, #344]	@ (8006900 <HAL_GPIO_Init+0x2e8>)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	3302      	adds	r3, #2
 80067ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	220f      	movs	r2, #15
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	43db      	mvns	r3, r3
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4013      	ands	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80067ce:	d01f      	beq.n	8006810 <HAL_GPIO_Init+0x1f8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a4c      	ldr	r2, [pc, #304]	@ (8006904 <HAL_GPIO_Init+0x2ec>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d019      	beq.n	800680c <HAL_GPIO_Init+0x1f4>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a4b      	ldr	r2, [pc, #300]	@ (8006908 <HAL_GPIO_Init+0x2f0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <HAL_GPIO_Init+0x1f0>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a4a      	ldr	r2, [pc, #296]	@ (800690c <HAL_GPIO_Init+0x2f4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00d      	beq.n	8006804 <HAL_GPIO_Init+0x1ec>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a49      	ldr	r2, [pc, #292]	@ (8006910 <HAL_GPIO_Init+0x2f8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <HAL_GPIO_Init+0x1e8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a48      	ldr	r2, [pc, #288]	@ (8006914 <HAL_GPIO_Init+0x2fc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d101      	bne.n	80067fc <HAL_GPIO_Init+0x1e4>
 80067f8:	2305      	movs	r3, #5
 80067fa:	e00a      	b.n	8006812 <HAL_GPIO_Init+0x1fa>
 80067fc:	2306      	movs	r3, #6
 80067fe:	e008      	b.n	8006812 <HAL_GPIO_Init+0x1fa>
 8006800:	2304      	movs	r3, #4
 8006802:	e006      	b.n	8006812 <HAL_GPIO_Init+0x1fa>
 8006804:	2303      	movs	r3, #3
 8006806:	e004      	b.n	8006812 <HAL_GPIO_Init+0x1fa>
 8006808:	2302      	movs	r3, #2
 800680a:	e002      	b.n	8006812 <HAL_GPIO_Init+0x1fa>
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <HAL_GPIO_Init+0x1fa>
 8006810:	2300      	movs	r3, #0
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	f002 0203 	and.w	r2, r2, #3
 8006818:	0092      	lsls	r2, r2, #2
 800681a:	4093      	lsls	r3, r2
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006822:	4937      	ldr	r1, [pc, #220]	@ (8006900 <HAL_GPIO_Init+0x2e8>)
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	089b      	lsrs	r3, r3, #2
 8006828:	3302      	adds	r3, #2
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006830:	4b39      	ldr	r3, [pc, #228]	@ (8006918 <HAL_GPIO_Init+0x300>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	43db      	mvns	r3, r3
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4013      	ands	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006854:	4a30      	ldr	r2, [pc, #192]	@ (8006918 <HAL_GPIO_Init+0x300>)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800685a:	4b2f      	ldr	r3, [pc, #188]	@ (8006918 <HAL_GPIO_Init+0x300>)
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	43db      	mvns	r3, r3
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4013      	ands	r3, r2
 8006868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800687e:	4a26      	ldr	r2, [pc, #152]	@ (8006918 <HAL_GPIO_Init+0x300>)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006884:	4b24      	ldr	r3, [pc, #144]	@ (8006918 <HAL_GPIO_Init+0x300>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	43db      	mvns	r3, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4013      	ands	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <HAL_GPIO_Init+0x300>)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80068ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006918 <HAL_GPIO_Init+0x300>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	43db      	mvns	r3, r3
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4013      	ands	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068d2:	4a11      	ldr	r2, [pc, #68]	@ (8006918 <HAL_GPIO_Init+0x300>)
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	3301      	adds	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f47f ae9d 	bne.w	8006628 <HAL_GPIO_Init+0x10>
  }
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40021000 	.word	0x40021000
 8006900:	40010000 	.word	0x40010000
 8006904:	48000400 	.word	0x48000400
 8006908:	48000800 	.word	0x48000800
 800690c:	48000c00 	.word	0x48000c00
 8006910:	48001000 	.word	0x48001000
 8006914:	48001400 	.word	0x48001400
 8006918:	40010400 	.word	0x40010400

0800691c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	807b      	strh	r3, [r7, #2]
 8006928:	4613      	mov	r3, r2
 800692a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800692c:	787b      	ldrb	r3, [r7, #1]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006932:	887a      	ldrh	r2, [r7, #2]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006938:	e002      	b.n	8006940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800693a:	887a      	ldrh	r2, [r7, #2]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800695e:	887a      	ldrh	r2, [r7, #2]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4013      	ands	r3, r2
 8006964:	041a      	lsls	r2, r3, #16
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	43d9      	mvns	r1, r3
 800696a:	887b      	ldrh	r3, [r7, #2]
 800696c:	400b      	ands	r3, r1
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	619a      	str	r2, [r3, #24]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e08d      	b.n	8006aae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fb f980 	bl	8001cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2224      	movs	r2, #36	@ 0x24
 80069b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0201 	bic.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d107      	bne.n	80069fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069f6:	609a      	str	r2, [r3, #8]
 80069f8:	e006      	b.n	8006a08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006a06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d108      	bne.n	8006a22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a1e:	605a      	str	r2, [r3, #4]
 8006a20:	e007      	b.n	8006a32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69d9      	ldr	r1, [r3, #28]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	817b      	strh	r3, [r7, #10]
 8006aca:	460b      	mov	r3, r1
 8006acc:	813b      	strh	r3, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	f040 80f9 	bne.w	8006cd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_I2C_Mem_Write+0x34>
 8006ae6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d105      	bne.n	8006af8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006af2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e0ed      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_I2C_Mem_Write+0x4e>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e0e6      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b0e:	f7fd fc51 	bl	80043b4 <HAL_GetTick>
 8006b12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	2319      	movs	r3, #25
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fac3 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0d1      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2221      	movs	r2, #33	@ 0x21
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2240      	movs	r2, #64	@ 0x40
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a3a      	ldr	r2, [r7, #32]
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b58:	88f8      	ldrh	r0, [r7, #6]
 8006b5a:	893a      	ldrh	r2, [r7, #8]
 8006b5c:	8979      	ldrh	r1, [r7, #10]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	4603      	mov	r3, r0
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f9d3 	bl	8006f14 <I2C_RequestMemoryWrite>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0a9      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2bff      	cmp	r3, #255	@ 0xff
 8006b88:	d90e      	bls.n	8006ba8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	22ff      	movs	r2, #255	@ 0xff
 8006b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	8979      	ldrh	r1, [r7, #10]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fc47 	bl	8007434 <I2C_TransferConfig>
 8006ba6:	e00f      	b.n	8006bc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	8979      	ldrh	r1, [r7, #10]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fc36 	bl	8007434 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fac6 	bl	800715e <I2C_WaitOnTXISFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e07b      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d034      	beq.n	8006c80 <HAL_I2C_Mem_Write+0x1c8>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d130      	bne.n	8006c80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c24:	2200      	movs	r2, #0
 8006c26:	2180      	movs	r1, #128	@ 0x80
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fa3f 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e04d      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2bff      	cmp	r3, #255	@ 0xff
 8006c40:	d90e      	bls.n	8006c60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	22ff      	movs	r2, #255	@ 0xff
 8006c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	8979      	ldrh	r1, [r7, #10]
 8006c50:	2300      	movs	r3, #0
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fbeb 	bl	8007434 <I2C_TransferConfig>
 8006c5e:	e00f      	b.n	8006c80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	8979      	ldrh	r1, [r7, #10]
 8006c72:	2300      	movs	r3, #0
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fbda 	bl	8007434 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d19e      	bne.n	8006bc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 faac 	bl	80071ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e01a      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6859      	ldr	r1, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <HAL_I2C_Mem_Write+0x224>)
 8006cb2:	400b      	ands	r3, r1
 8006cb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006cd2:	2302      	movs	r3, #2
  }
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	fe00e800 	.word	0xfe00e800

08006ce0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	817b      	strh	r3, [r7, #10]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	813b      	strh	r3, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	f040 80fd 	bne.w	8006f02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_I2C_Mem_Read+0x34>
 8006d0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0f1      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_I2C_Mem_Read+0x4e>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e0ea      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d36:	f7fd fb3d 	bl	80043b4 <HAL_GetTick>
 8006d3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2319      	movs	r3, #25
 8006d42:	2201      	movs	r2, #1
 8006d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f9af 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e0d5      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2222      	movs	r2, #34	@ 0x22
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2240      	movs	r2, #64	@ 0x40
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d80:	88f8      	ldrh	r0, [r7, #6]
 8006d82:	893a      	ldrh	r2, [r7, #8]
 8006d84:	8979      	ldrh	r1, [r7, #10]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	4603      	mov	r3, r0
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f913 	bl	8006fbc <I2C_RequestMemoryRead>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0ad      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2bff      	cmp	r3, #255	@ 0xff
 8006db0:	d90e      	bls.n	8006dd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	22ff      	movs	r2, #255	@ 0xff
 8006db6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	8979      	ldrh	r1, [r7, #10]
 8006dc0:	4b52      	ldr	r3, [pc, #328]	@ (8006f0c <HAL_I2C_Mem_Read+0x22c>)
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 fb33 	bl	8007434 <I2C_TransferConfig>
 8006dce:	e00f      	b.n	8006df0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	8979      	ldrh	r1, [r7, #10]
 8006de2:	4b4a      	ldr	r3, [pc, #296]	@ (8006f0c <HAL_I2C_Mem_Read+0x22c>)
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fb22 	bl	8007434 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	2200      	movs	r2, #0
 8006df8:	2104      	movs	r1, #4
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f956 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e07c      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d034      	beq.n	8006eb0 <HAL_I2C_Mem_Read+0x1d0>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d130      	bne.n	8006eb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e54:	2200      	movs	r2, #0
 8006e56:	2180      	movs	r1, #128	@ 0x80
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f927 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e04d      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2bff      	cmp	r3, #255	@ 0xff
 8006e70:	d90e      	bls.n	8006e90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	22ff      	movs	r2, #255	@ 0xff
 8006e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	8979      	ldrh	r1, [r7, #10]
 8006e80:	2300      	movs	r3, #0
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fad3 	bl	8007434 <I2C_TransferConfig>
 8006e8e:	e00f      	b.n	8006eb0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	8979      	ldrh	r1, [r7, #10]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 fac2 	bl	8007434 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d19a      	bne.n	8006df0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f994 	bl	80071ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e01a      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6859      	ldr	r1, [r3, #4]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <HAL_I2C_Mem_Read+0x230>)
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e000      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
  }
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	80002400 	.word	0x80002400
 8006f10:	fe00e800 	.word	0xfe00e800

08006f14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4603      	mov	r3, r0
 8006f24:	817b      	strh	r3, [r7, #10]
 8006f26:	460b      	mov	r3, r1
 8006f28:	813b      	strh	r3, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	8979      	ldrh	r1, [r7, #10]
 8006f34:	4b20      	ldr	r3, [pc, #128]	@ (8006fb8 <I2C_RequestMemoryWrite+0xa4>)
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fa79 	bl	8007434 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	69b9      	ldr	r1, [r7, #24]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 f909 	bl	800715e <I2C_WaitOnTXISFlagUntilTimeout>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e02c      	b.n	8006fb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d105      	bne.n	8006f68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f5c:	893b      	ldrh	r3, [r7, #8]
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f66:	e015      	b.n	8006f94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f68:	893b      	ldrh	r3, [r7, #8]
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f8ef 	bl	800715e <I2C_WaitOnTXISFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e012      	b.n	8006fb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f8a:	893b      	ldrh	r3, [r7, #8]
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2180      	movs	r1, #128	@ 0x80
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f884 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	80002000 	.word	0x80002000

08006fbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	817b      	strh	r3, [r7, #10]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	813b      	strh	r3, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	8979      	ldrh	r1, [r7, #10]
 8006fdc:	4b20      	ldr	r3, [pc, #128]	@ (8007060 <I2C_RequestMemoryRead+0xa4>)
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 fa26 	bl	8007434 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	69b9      	ldr	r1, [r7, #24]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f8b6 	bl	800715e <I2C_WaitOnTXISFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e02c      	b.n	8007056 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d105      	bne.n	800700e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007002:	893b      	ldrh	r3, [r7, #8]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	629a      	str	r2, [r3, #40]	@ 0x28
 800700c:	e015      	b.n	800703a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800700e:	893b      	ldrh	r3, [r7, #8]
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	b29b      	uxth	r3, r3
 8007014:	b2da      	uxtb	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	69b9      	ldr	r1, [r7, #24]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f89c 	bl	800715e <I2C_WaitOnTXISFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e012      	b.n	8007056 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007030:	893b      	ldrh	r3, [r7, #8]
 8007032:	b2da      	uxtb	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2200      	movs	r2, #0
 8007042:	2140      	movs	r1, #64	@ 0x40
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f831 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	80002000 	.word	0x80002000

08007064 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d103      	bne.n	8007082 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b01      	cmp	r3, #1
 800708e:	d007      	beq.n	80070a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	619a      	str	r2, [r3, #24]
  }
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070bc:	e03b      	b.n	8007136 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f8d6 	bl	8007274 <I2C_IsErrorOccurred>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e041      	b.n	8007156 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d02d      	beq.n	8007136 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070da:	f7fd f96b 	bl	80043b4 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d302      	bcc.n	80070f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d122      	bne.n	8007136 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	4013      	ands	r3, r2
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	429a      	cmp	r2, r3
 800710c:	d113      	bne.n	8007136 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007112:	f043 0220 	orr.w	r2, r3, #32
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e00f      	b.n	8007156 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699a      	ldr	r2, [r3, #24]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4013      	ands	r3, r2
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	429a      	cmp	r2, r3
 8007144:	bf0c      	ite	eq
 8007146:	2301      	moveq	r3, #1
 8007148:	2300      	movne	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	429a      	cmp	r2, r3
 8007152:	d0b4      	beq.n	80070be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800716a:	e033      	b.n	80071d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 f87f 	bl	8007274 <I2C_IsErrorOccurred>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e031      	b.n	80071e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d025      	beq.n	80071d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007188:	f7fd f914 	bl	80043b4 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	429a      	cmp	r2, r3
 8007196:	d302      	bcc.n	800719e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d11a      	bne.n	80071d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d013      	beq.n	80071d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b0:	f043 0220 	orr.w	r2, r3, #32
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e007      	b.n	80071e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d1c4      	bne.n	800716c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071f8:	e02f      	b.n	800725a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f838 	bl	8007274 <I2C_IsErrorOccurred>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e02d      	b.n	800726a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720e:	f7fd f8d1 	bl	80043b4 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d11a      	bne.n	800725a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b20      	cmp	r3, #32
 8007230:	d013      	beq.n	800725a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007236:	f043 0220 	orr.w	r2, r3, #32
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e007      	b.n	800726a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f003 0320 	and.w	r3, r3, #32
 8007264:	2b20      	cmp	r3, #32
 8007266:	d1c8      	bne.n	80071fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	@ 0x28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f003 0310 	and.w	r3, r3, #16
 800729c:	2b00      	cmp	r3, #0
 800729e:	d068      	beq.n	8007372 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2210      	movs	r2, #16
 80072a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072a8:	e049      	b.n	800733e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b0:	d045      	beq.n	800733e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80072b2:	f7fd f87f 	bl	80043b4 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d302      	bcc.n	80072c8 <I2C_IsErrorOccurred+0x54>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d13a      	bne.n	800733e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ea:	d121      	bne.n	8007330 <I2C_IsErrorOccurred+0xbc>
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072f2:	d01d      	beq.n	8007330 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80072f4:	7cfb      	ldrb	r3, [r7, #19]
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d01a      	beq.n	8007330 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007308:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800730a:	f7fd f853 	bl	80043b4 <HAL_GetTick>
 800730e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007310:	e00e      	b.n	8007330 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007312:	f7fd f84f 	bl	80043b4 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b19      	cmp	r3, #25
 800731e:	d907      	bls.n	8007330 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	f043 0320 	orr.w	r3, r3, #32
 8007326:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800732e:	e006      	b.n	800733e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b20      	cmp	r3, #32
 800733c:	d1e9      	bne.n	8007312 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b20      	cmp	r3, #32
 800734a:	d003      	beq.n	8007354 <I2C_IsErrorOccurred+0xe0>
 800734c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0aa      	beq.n	80072aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007358:	2b00      	cmp	r3, #0
 800735a:	d103      	bne.n	8007364 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2220      	movs	r2, #32
 8007362:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	f043 0304 	orr.w	r3, r3, #4
 800736a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007394:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	f043 0308 	orr.w	r3, r3, #8
 80073ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80073b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	f043 0302 	orr.w	r3, r3, #2
 80073ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80073e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01c      	beq.n	8007422 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7ff fe3b 	bl	8007064 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6859      	ldr	r1, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007430 <I2C_IsErrorOccurred+0x1bc>)
 80073fa:	400b      	ands	r3, r1
 80073fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	431a      	orrs	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007426:	4618      	mov	r0, r3
 8007428:	3728      	adds	r7, #40	@ 0x28
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	fe00e800 	.word	0xfe00e800

08007434 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	607b      	str	r3, [r7, #4]
 800743e:	460b      	mov	r3, r1
 8007440:	817b      	strh	r3, [r7, #10]
 8007442:	4613      	mov	r3, r2
 8007444:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007446:	897b      	ldrh	r3, [r7, #10]
 8007448:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800744c:	7a7b      	ldrb	r3, [r7, #9]
 800744e:	041b      	lsls	r3, r3, #16
 8007450:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007454:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	4313      	orrs	r3, r2
 800745e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007462:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	0d5b      	lsrs	r3, r3, #21
 800746e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007472:	4b08      	ldr	r3, [pc, #32]	@ (8007494 <I2C_TransferConfig+0x60>)
 8007474:	430b      	orrs	r3, r1
 8007476:	43db      	mvns	r3, r3
 8007478:	ea02 0103 	and.w	r1, r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	430a      	orrs	r2, r1
 8007484:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	03ff63ff 	.word	0x03ff63ff

08007498 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d138      	bne.n	8007520 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e032      	b.n	8007522 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2224      	movs	r2, #36	@ 0x24
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80074ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6819      	ldr	r1, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0201 	orr.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2220      	movs	r2, #32
 8007510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	e000      	b.n	8007522 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007520:	2302      	movs	r3, #2
  }
}
 8007522:	4618      	mov	r0, r3
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b20      	cmp	r3, #32
 8007542:	d139      	bne.n	80075b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800754e:	2302      	movs	r3, #2
 8007550:	e033      	b.n	80075ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2224      	movs	r2, #36	@ 0x24
 800755e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0201 	bic.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007580:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	e000      	b.n	80075ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80075b8:	2302      	movs	r3, #2
  }
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d141      	bne.n	800765a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80075d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e2:	d131      	bne.n	8007648 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075e4:	4b47      	ldr	r3, [pc, #284]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ea:	4a46      	ldr	r2, [pc, #280]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075f4:	4b43      	ldr	r3, [pc, #268]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80075fc:	4a41      	ldr	r2, [pc, #260]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007602:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007604:	4b40      	ldr	r3, [pc, #256]	@ (8007708 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2232      	movs	r2, #50	@ 0x32
 800760a:	fb02 f303 	mul.w	r3, r2, r3
 800760e:	4a3f      	ldr	r2, [pc, #252]	@ (800770c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007610:	fba2 2303 	umull	r2, r3, r2, r3
 8007614:	0c9b      	lsrs	r3, r3, #18
 8007616:	3301      	adds	r3, #1
 8007618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800761a:	e002      	b.n	8007622 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3b01      	subs	r3, #1
 8007620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007622:	4b38      	ldr	r3, [pc, #224]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800762a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800762e:	d102      	bne.n	8007636 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f2      	bne.n	800761c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007636:	4b33      	ldr	r3, [pc, #204]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800763e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007642:	d158      	bne.n	80076f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e057      	b.n	80076f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007648:	4b2e      	ldr	r3, [pc, #184]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800764a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800764e:	4a2d      	ldr	r2, [pc, #180]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007658:	e04d      	b.n	80076f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007660:	d141      	bne.n	80076e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007662:	4b28      	ldr	r3, [pc, #160]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800766a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800766e:	d131      	bne.n	80076d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007670:	4b24      	ldr	r3, [pc, #144]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007676:	4a23      	ldr	r2, [pc, #140]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800767c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007680:	4b20      	ldr	r3, [pc, #128]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007688:	4a1e      	ldr	r2, [pc, #120]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800768a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800768e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007690:	4b1d      	ldr	r3, [pc, #116]	@ (8007708 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2232      	movs	r2, #50	@ 0x32
 8007696:	fb02 f303 	mul.w	r3, r2, r3
 800769a:	4a1c      	ldr	r2, [pc, #112]	@ (800770c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800769c:	fba2 2303 	umull	r2, r3, r2, r3
 80076a0:	0c9b      	lsrs	r3, r3, #18
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076a6:	e002      	b.n	80076ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076ae:	4b15      	ldr	r3, [pc, #84]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ba:	d102      	bne.n	80076c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1f2      	bne.n	80076a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076c2:	4b10      	ldr	r3, [pc, #64]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ce:	d112      	bne.n	80076f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e011      	b.n	80076f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076da:	4a0a      	ldr	r2, [pc, #40]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80076e4:	e007      	b.n	80076f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80076e6:	4b07      	ldr	r3, [pc, #28]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80076ee:	4a05      	ldr	r2, [pc, #20]	@ (8007704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40007000 	.word	0x40007000
 8007708:	20000010 	.word	0x20000010
 800770c:	431bde83 	.word	0x431bde83

08007710 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007714:	4b05      	ldr	r3, [pc, #20]	@ (800772c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	4a04      	ldr	r2, [pc, #16]	@ (800772c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800771a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800771e:	6093      	str	r3, [r2, #8]
}
 8007720:	bf00      	nop
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40007000 	.word	0x40007000

08007730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e2fe      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d075      	beq.n	800783a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800774e:	4b97      	ldr	r3, [pc, #604]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007758:	4b94      	ldr	r3, [pc, #592]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f003 0303 	and.w	r3, r3, #3
 8007760:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	2b0c      	cmp	r3, #12
 8007766:	d102      	bne.n	800776e <HAL_RCC_OscConfig+0x3e>
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b03      	cmp	r3, #3
 800776c:	d002      	beq.n	8007774 <HAL_RCC_OscConfig+0x44>
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b08      	cmp	r3, #8
 8007772:	d10b      	bne.n	800778c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007774:	4b8d      	ldr	r3, [pc, #564]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d05b      	beq.n	8007838 <HAL_RCC_OscConfig+0x108>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d157      	bne.n	8007838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e2d9      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007794:	d106      	bne.n	80077a4 <HAL_RCC_OscConfig+0x74>
 8007796:	4b85      	ldr	r3, [pc, #532]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a84      	ldr	r2, [pc, #528]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 800779c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	e01d      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077ac:	d10c      	bne.n	80077c8 <HAL_RCC_OscConfig+0x98>
 80077ae:	4b7f      	ldr	r3, [pc, #508]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a7e      	ldr	r2, [pc, #504]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80077b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	4b7c      	ldr	r3, [pc, #496]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a7b      	ldr	r2, [pc, #492]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e00b      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077c8:	4b78      	ldr	r3, [pc, #480]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a77      	ldr	r2, [pc, #476]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80077ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	4b75      	ldr	r3, [pc, #468]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a74      	ldr	r2, [pc, #464]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80077da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e8:	f7fc fde4 	bl	80043b4 <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077f0:	f7fc fde0 	bl	80043b4 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b64      	cmp	r3, #100	@ 0x64
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e29e      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007802:	4b6a      	ldr	r3, [pc, #424]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0xc0>
 800780e:	e014      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007810:	f7fc fdd0 	bl	80043b4 <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007818:	f7fc fdcc 	bl	80043b4 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b64      	cmp	r3, #100	@ 0x64
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e28a      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800782a:	4b60      	ldr	r3, [pc, #384]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0xe8>
 8007836:	e000      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d075      	beq.n	8007932 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007846:	4b59      	ldr	r3, [pc, #356]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
 800784e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007850:	4b56      	ldr	r3, [pc, #344]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b0c      	cmp	r3, #12
 800785e:	d102      	bne.n	8007866 <HAL_RCC_OscConfig+0x136>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b02      	cmp	r3, #2
 8007864:	d002      	beq.n	800786c <HAL_RCC_OscConfig+0x13c>
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	2b04      	cmp	r3, #4
 800786a:	d11f      	bne.n	80078ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800786c:	4b4f      	ldr	r3, [pc, #316]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <HAL_RCC_OscConfig+0x154>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e25d      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007884:	4b49      	ldr	r3, [pc, #292]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	061b      	lsls	r3, r3, #24
 8007892:	4946      	ldr	r1, [pc, #280]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007894:	4313      	orrs	r3, r2
 8007896:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007898:	4b45      	ldr	r3, [pc, #276]	@ (80079b0 <HAL_RCC_OscConfig+0x280>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f7fc fd3d 	bl	800431c <HAL_InitTick>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d043      	beq.n	8007930 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e249      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d023      	beq.n	80078fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078b4:	4b3d      	ldr	r3, [pc, #244]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a3c      	ldr	r2, [pc, #240]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80078ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c0:	f7fc fd78 	bl	80043b4 <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078c8:	f7fc fd74 	bl	80043b4 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e232      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078da:	4b34      	ldr	r3, [pc, #208]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e6:	4b31      	ldr	r3, [pc, #196]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	061b      	lsls	r3, r3, #24
 80078f4:	492d      	ldr	r1, [pc, #180]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	604b      	str	r3, [r1, #4]
 80078fa:	e01a      	b.n	8007932 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078fc:	4b2b      	ldr	r3, [pc, #172]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a2a      	ldr	r2, [pc, #168]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007902:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fc fd54 	bl	80043b4 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007910:	f7fc fd50 	bl	80043b4 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e20e      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007922:	4b22      	ldr	r3, [pc, #136]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0x1e0>
 800792e:	e000      	b.n	8007932 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007930:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d041      	beq.n	80079c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01c      	beq.n	8007980 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007946:	4b19      	ldr	r3, [pc, #100]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800794c:	4a17      	ldr	r2, [pc, #92]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007956:	f7fc fd2d 	bl	80043b4 <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800795c:	e008      	b.n	8007970 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800795e:	f7fc fd29 	bl	80043b4 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e1e7      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007970:	4b0e      	ldr	r3, [pc, #56]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0ef      	beq.n	800795e <HAL_RCC_OscConfig+0x22e>
 800797e:	e020      	b.n	80079c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007980:	4b0a      	ldr	r3, [pc, #40]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007986:	4a09      	ldr	r2, [pc, #36]	@ (80079ac <HAL_RCC_OscConfig+0x27c>)
 8007988:	f023 0301 	bic.w	r3, r3, #1
 800798c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007990:	f7fc fd10 	bl	80043b4 <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007996:	e00d      	b.n	80079b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007998:	f7fc fd0c 	bl	80043b4 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d906      	bls.n	80079b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e1ca      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
 80079aa:	bf00      	nop
 80079ac:	40021000 	.word	0x40021000
 80079b0:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079b4:	4b8c      	ldr	r3, [pc, #560]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 80079b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1ea      	bne.n	8007998 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 80a6 	beq.w	8007b1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079d0:	2300      	movs	r3, #0
 80079d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80079d4:	4b84      	ldr	r3, [pc, #528]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 80079d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <HAL_RCC_OscConfig+0x2b4>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e000      	b.n	80079e6 <HAL_RCC_OscConfig+0x2b6>
 80079e4:	2300      	movs	r3, #0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00d      	beq.n	8007a06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ea:	4b7f      	ldr	r3, [pc, #508]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 80079ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ee:	4a7e      	ldr	r2, [pc, #504]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 80079f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80079f6:	4b7c      	ldr	r3, [pc, #496]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 80079f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007a02:	2301      	movs	r3, #1
 8007a04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a06:	4b79      	ldr	r3, [pc, #484]	@ (8007bec <HAL_RCC_OscConfig+0x4bc>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d118      	bne.n	8007a44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a12:	4b76      	ldr	r3, [pc, #472]	@ (8007bec <HAL_RCC_OscConfig+0x4bc>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a75      	ldr	r2, [pc, #468]	@ (8007bec <HAL_RCC_OscConfig+0x4bc>)
 8007a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a1e:	f7fc fcc9 	bl	80043b4 <HAL_GetTick>
 8007a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a26:	f7fc fcc5 	bl	80043b4 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e183      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a38:	4b6c      	ldr	r3, [pc, #432]	@ (8007bec <HAL_RCC_OscConfig+0x4bc>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d0f0      	beq.n	8007a26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d108      	bne.n	8007a5e <HAL_RCC_OscConfig+0x32e>
 8007a4c:	4b66      	ldr	r3, [pc, #408]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a52:	4a65      	ldr	r2, [pc, #404]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a5c:	e024      	b.n	8007aa8 <HAL_RCC_OscConfig+0x378>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b05      	cmp	r3, #5
 8007a64:	d110      	bne.n	8007a88 <HAL_RCC_OscConfig+0x358>
 8007a66:	4b60      	ldr	r3, [pc, #384]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a6c:	4a5e      	ldr	r2, [pc, #376]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007a6e:	f043 0304 	orr.w	r3, r3, #4
 8007a72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a76:	4b5c      	ldr	r3, [pc, #368]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7c:	4a5a      	ldr	r2, [pc, #360]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007a7e:	f043 0301 	orr.w	r3, r3, #1
 8007a82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a86:	e00f      	b.n	8007aa8 <HAL_RCC_OscConfig+0x378>
 8007a88:	4b57      	ldr	r3, [pc, #348]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a8e:	4a56      	ldr	r2, [pc, #344]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007a90:	f023 0301 	bic.w	r3, r3, #1
 8007a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a98:	4b53      	ldr	r3, [pc, #332]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9e:	4a52      	ldr	r2, [pc, #328]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007aa0:	f023 0304 	bic.w	r3, r3, #4
 8007aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d016      	beq.n	8007ade <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab0:	f7fc fc80 	bl	80043b4 <HAL_GetTick>
 8007ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ab6:	e00a      	b.n	8007ace <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ab8:	f7fc fc7c 	bl	80043b4 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e138      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ace:	4b46      	ldr	r3, [pc, #280]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0ed      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x388>
 8007adc:	e015      	b.n	8007b0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ade:	f7fc fc69 	bl	80043b4 <HAL_GetTick>
 8007ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ae4:	e00a      	b.n	8007afc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae6:	f7fc fc65 	bl	80043b4 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e121      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007afc:	4b3a      	ldr	r3, [pc, #232]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1ed      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b0a:	7ffb      	ldrb	r3, [r7, #31]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d105      	bne.n	8007b1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b10:	4b35      	ldr	r3, [pc, #212]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b14:	4a34      	ldr	r2, [pc, #208]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b1a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d03c      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01c      	beq.n	8007b6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b30:	4b2d      	ldr	r3, [pc, #180]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b36:	4a2c      	ldr	r2, [pc, #176]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007b38:	f043 0301 	orr.w	r3, r3, #1
 8007b3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b40:	f7fc fc38 	bl	80043b4 <HAL_GetTick>
 8007b44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b46:	e008      	b.n	8007b5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b48:	f7fc fc34 	bl	80043b4 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d901      	bls.n	8007b5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e0f2      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b5a:	4b23      	ldr	r3, [pc, #140]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0ef      	beq.n	8007b48 <HAL_RCC_OscConfig+0x418>
 8007b68:	e01b      	b.n	8007ba2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b70:	4a1d      	ldr	r2, [pc, #116]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007b72:	f023 0301 	bic.w	r3, r3, #1
 8007b76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7a:	f7fc fc1b 	bl	80043b4 <HAL_GetTick>
 8007b7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b80:	e008      	b.n	8007b94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b82:	f7fc fc17 	bl	80043b4 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e0d5      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b94:	4b14      	ldr	r3, [pc, #80]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1ef      	bne.n	8007b82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80c9 	beq.w	8007d3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bac:	4b0e      	ldr	r3, [pc, #56]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 030c 	and.w	r3, r3, #12
 8007bb4:	2b0c      	cmp	r3, #12
 8007bb6:	f000 8083 	beq.w	8007cc0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d15e      	bne.n	8007c80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc2:	4b09      	ldr	r3, [pc, #36]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a08      	ldr	r2, [pc, #32]	@ (8007be8 <HAL_RCC_OscConfig+0x4b8>)
 8007bc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bce:	f7fc fbf1 	bl	80043b4 <HAL_GetTick>
 8007bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bd4:	e00c      	b.n	8007bf0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bd6:	f7fc fbed 	bl	80043b4 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d905      	bls.n	8007bf0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e0ab      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
 8007be8:	40021000 	.word	0x40021000
 8007bec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bf0:	4b55      	ldr	r3, [pc, #340]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1ec      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bfc:	4b52      	ldr	r3, [pc, #328]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	4b52      	ldr	r3, [pc, #328]	@ (8007d4c <HAL_RCC_OscConfig+0x61c>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6a11      	ldr	r1, [r2, #32]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007c0c:	3a01      	subs	r2, #1
 8007c0e:	0112      	lsls	r2, r2, #4
 8007c10:	4311      	orrs	r1, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007c16:	0212      	lsls	r2, r2, #8
 8007c18:	4311      	orrs	r1, r2
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007c1e:	0852      	lsrs	r2, r2, #1
 8007c20:	3a01      	subs	r2, #1
 8007c22:	0552      	lsls	r2, r2, #21
 8007c24:	4311      	orrs	r1, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007c2a:	0852      	lsrs	r2, r2, #1
 8007c2c:	3a01      	subs	r2, #1
 8007c2e:	0652      	lsls	r2, r2, #25
 8007c30:	4311      	orrs	r1, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007c36:	06d2      	lsls	r2, r2, #27
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	4943      	ldr	r1, [pc, #268]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c40:	4b41      	ldr	r3, [pc, #260]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a40      	ldr	r2, [pc, #256]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a3d      	ldr	r2, [pc, #244]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c58:	f7fc fbac 	bl	80043b4 <HAL_GetTick>
 8007c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c5e:	e008      	b.n	8007c72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c60:	f7fc fba8 	bl	80043b4 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e066      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c72:	4b35      	ldr	r3, [pc, #212]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0f0      	beq.n	8007c60 <HAL_RCC_OscConfig+0x530>
 8007c7e:	e05e      	b.n	8007d3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c80:	4b31      	ldr	r3, [pc, #196]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a30      	ldr	r2, [pc, #192]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8c:	f7fc fb92 	bl	80043b4 <HAL_GetTick>
 8007c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c92:	e008      	b.n	8007ca6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c94:	f7fc fb8e 	bl	80043b4 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e04c      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ca6:	4b28      	ldr	r3, [pc, #160]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1f0      	bne.n	8007c94 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007cb2:	4b25      	ldr	r3, [pc, #148]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	4924      	ldr	r1, [pc, #144]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007cb8:	4b25      	ldr	r3, [pc, #148]	@ (8007d50 <HAL_RCC_OscConfig+0x620>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	60cb      	str	r3, [r1, #12]
 8007cbe:	e03e      	b.n	8007d3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e039      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8007d48 <HAL_RCC_OscConfig+0x618>)
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f003 0203 	and.w	r2, r3, #3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d12c      	bne.n	8007d3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cea:	3b01      	subs	r3, #1
 8007cec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d123      	bne.n	8007d3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d11b      	bne.n	8007d3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d113      	bne.n	8007d3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d109      	bne.n	8007d3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d30:	085b      	lsrs	r3, r3, #1
 8007d32:	3b01      	subs	r3, #1
 8007d34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d001      	beq.n	8007d3e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3720      	adds	r7, #32
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40021000 	.word	0x40021000
 8007d4c:	019f800c 	.word	0x019f800c
 8007d50:	feeefffc 	.word	0xfeeefffc

08007d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e11e      	b.n	8007faa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d6c:	4b91      	ldr	r3, [pc, #580]	@ (8007fb4 <HAL_RCC_ClockConfig+0x260>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d910      	bls.n	8007d9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d7a:	4b8e      	ldr	r3, [pc, #568]	@ (8007fb4 <HAL_RCC_ClockConfig+0x260>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f023 020f 	bic.w	r2, r3, #15
 8007d82:	498c      	ldr	r1, [pc, #560]	@ (8007fb4 <HAL_RCC_ClockConfig+0x260>)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d8a:	4b8a      	ldr	r3, [pc, #552]	@ (8007fb4 <HAL_RCC_ClockConfig+0x260>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d001      	beq.n	8007d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e106      	b.n	8007faa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d073      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d129      	bne.n	8007e04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007db0:	4b81      	ldr	r3, [pc, #516]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e0f4      	b.n	8007faa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007dc0:	f000 f99e 	bl	8008100 <RCC_GetSysClockFreqFromPLLSource>
 8007dc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	4a7c      	ldr	r2, [pc, #496]	@ (8007fbc <HAL_RCC_ClockConfig+0x268>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d93f      	bls.n	8007e4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007dce:	4b7a      	ldr	r3, [pc, #488]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d033      	beq.n	8007e4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d12f      	bne.n	8007e4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007dee:	4b72      	ldr	r3, [pc, #456]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007df6:	4a70      	ldr	r2, [pc, #448]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007dfe:	2380      	movs	r3, #128	@ 0x80
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	e024      	b.n	8007e4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d107      	bne.n	8007e1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e0c6      	b.n	8007faa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e1c:	4b66      	ldr	r3, [pc, #408]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0be      	b.n	8007faa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007e2c:	f000 f8ce 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 8007e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	4a61      	ldr	r2, [pc, #388]	@ (8007fbc <HAL_RCC_ClockConfig+0x268>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d909      	bls.n	8007e4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e42:	4a5d      	ldr	r2, [pc, #372]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007e4a:	2380      	movs	r3, #128	@ 0x80
 8007e4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e4e:	4b5a      	ldr	r3, [pc, #360]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f023 0203 	bic.w	r2, r3, #3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4957      	ldr	r1, [pc, #348]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e60:	f7fc faa8 	bl	80043b4 <HAL_GetTick>
 8007e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e66:	e00a      	b.n	8007e7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e68:	f7fc faa4 	bl	80043b4 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e095      	b.n	8007faa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e7e:	4b4e      	ldr	r3, [pc, #312]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 020c 	and.w	r2, r3, #12
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d1eb      	bne.n	8007e68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d023      	beq.n	8007ee4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ea8:	4b43      	ldr	r3, [pc, #268]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	4a42      	ldr	r2, [pc, #264]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007eae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007eb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0308 	and.w	r3, r3, #8
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d007      	beq.n	8007ed0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007eca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007ece:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ed0:	4b39      	ldr	r3, [pc, #228]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4936      	ldr	r1, [pc, #216]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	608b      	str	r3, [r1, #8]
 8007ee2:	e008      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2b80      	cmp	r3, #128	@ 0x80
 8007ee8:	d105      	bne.n	8007ef6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007eea:	4b33      	ldr	r3, [pc, #204]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	4a32      	ldr	r2, [pc, #200]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007ef0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ef4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8007fb4 <HAL_RCC_ClockConfig+0x260>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d21d      	bcs.n	8007f40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f04:	4b2b      	ldr	r3, [pc, #172]	@ (8007fb4 <HAL_RCC_ClockConfig+0x260>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f023 020f 	bic.w	r2, r3, #15
 8007f0c:	4929      	ldr	r1, [pc, #164]	@ (8007fb4 <HAL_RCC_ClockConfig+0x260>)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007f14:	f7fc fa4e 	bl	80043b4 <HAL_GetTick>
 8007f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f1a:	e00a      	b.n	8007f32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f1c:	f7fc fa4a 	bl	80043b4 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e03b      	b.n	8007faa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f32:	4b20      	ldr	r3, [pc, #128]	@ (8007fb4 <HAL_RCC_ClockConfig+0x260>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d1ed      	bne.n	8007f1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d008      	beq.n	8007f5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	4917      	ldr	r1, [pc, #92]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0308 	and.w	r3, r3, #8
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f6a:	4b13      	ldr	r3, [pc, #76]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	490f      	ldr	r1, [pc, #60]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f7e:	f000 f825 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 8007f82:	4602      	mov	r2, r0
 8007f84:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb8 <HAL_RCC_ClockConfig+0x264>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	091b      	lsrs	r3, r3, #4
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	490c      	ldr	r1, [pc, #48]	@ (8007fc0 <HAL_RCC_ClockConfig+0x26c>)
 8007f90:	5ccb      	ldrb	r3, [r1, r3]
 8007f92:	f003 031f 	and.w	r3, r3, #31
 8007f96:	fa22 f303 	lsr.w	r3, r2, r3
 8007f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc4 <HAL_RCC_ClockConfig+0x270>)
 8007f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc8 <HAL_RCC_ClockConfig+0x274>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fc f9ba 	bl	800431c <HAL_InitTick>
 8007fa8:	4603      	mov	r3, r0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40022000 	.word	0x40022000
 8007fb8:	40021000 	.word	0x40021000
 8007fbc:	04c4b400 	.word	0x04c4b400
 8007fc0:	080100d0 	.word	0x080100d0
 8007fc4:	20000010 	.word	0x20000010
 8007fc8:	20000014 	.word	0x20000014

08007fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8008084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 030c 	and.w	r3, r3, #12
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d102      	bne.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007fde:	4b2a      	ldr	r3, [pc, #168]	@ (8008088 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	e047      	b.n	8008074 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007fe4:	4b27      	ldr	r3, [pc, #156]	@ (8008084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f003 030c 	and.w	r3, r3, #12
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d102      	bne.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ff0:	4b26      	ldr	r3, [pc, #152]	@ (800808c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	e03e      	b.n	8008074 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007ff6:	4b23      	ldr	r3, [pc, #140]	@ (8008084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 030c 	and.w	r3, r3, #12
 8007ffe:	2b0c      	cmp	r3, #12
 8008000:	d136      	bne.n	8008070 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008002:	4b20      	ldr	r3, [pc, #128]	@ (8008084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800800c:	4b1d      	ldr	r3, [pc, #116]	@ (8008084 <HAL_RCC_GetSysClockFreq+0xb8>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	091b      	lsrs	r3, r3, #4
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	3301      	adds	r3, #1
 8008018:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b03      	cmp	r3, #3
 800801e:	d10c      	bne.n	800803a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008020:	4a1a      	ldr	r2, [pc, #104]	@ (800808c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	fbb2 f3f3 	udiv	r3, r2, r3
 8008028:	4a16      	ldr	r2, [pc, #88]	@ (8008084 <HAL_RCC_GetSysClockFreq+0xb8>)
 800802a:	68d2      	ldr	r2, [r2, #12]
 800802c:	0a12      	lsrs	r2, r2, #8
 800802e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008032:	fb02 f303 	mul.w	r3, r2, r3
 8008036:	617b      	str	r3, [r7, #20]
      break;
 8008038:	e00c      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800803a:	4a13      	ldr	r2, [pc, #76]	@ (8008088 <HAL_RCC_GetSysClockFreq+0xbc>)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008042:	4a10      	ldr	r2, [pc, #64]	@ (8008084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008044:	68d2      	ldr	r2, [r2, #12]
 8008046:	0a12      	lsrs	r2, r2, #8
 8008048:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800804c:	fb02 f303 	mul.w	r3, r2, r3
 8008050:	617b      	str	r3, [r7, #20]
      break;
 8008052:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008054:	4b0b      	ldr	r3, [pc, #44]	@ (8008084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	0e5b      	lsrs	r3, r3, #25
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	3301      	adds	r3, #1
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	fbb2 f3f3 	udiv	r3, r2, r3
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	e001      	b.n	8008074 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008074:	693b      	ldr	r3, [r7, #16]
}
 8008076:	4618      	mov	r0, r3
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40021000 	.word	0x40021000
 8008088:	00f42400 	.word	0x00f42400
 800808c:	007a1200 	.word	0x007a1200

08008090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008090:	b480      	push	{r7}
 8008092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008094:	4b03      	ldr	r3, [pc, #12]	@ (80080a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008096:	681b      	ldr	r3, [r3, #0]
}
 8008098:	4618      	mov	r0, r3
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000010 	.word	0x20000010

080080a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80080ac:	f7ff fff0 	bl	8008090 <HAL_RCC_GetHCLKFreq>
 80080b0:	4602      	mov	r2, r0
 80080b2:	4b06      	ldr	r3, [pc, #24]	@ (80080cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	0a1b      	lsrs	r3, r3, #8
 80080b8:	f003 0307 	and.w	r3, r3, #7
 80080bc:	4904      	ldr	r1, [pc, #16]	@ (80080d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80080be:	5ccb      	ldrb	r3, [r1, r3]
 80080c0:	f003 031f 	and.w	r3, r3, #31
 80080c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	40021000 	.word	0x40021000
 80080d0:	080100e0 	.word	0x080100e0

080080d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80080d8:	f7ff ffda 	bl	8008090 <HAL_RCC_GetHCLKFreq>
 80080dc:	4602      	mov	r2, r0
 80080de:	4b06      	ldr	r3, [pc, #24]	@ (80080f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	0adb      	lsrs	r3, r3, #11
 80080e4:	f003 0307 	and.w	r3, r3, #7
 80080e8:	4904      	ldr	r1, [pc, #16]	@ (80080fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80080ea:	5ccb      	ldrb	r3, [r1, r3]
 80080ec:	f003 031f 	and.w	r3, r3, #31
 80080f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40021000 	.word	0x40021000
 80080fc:	080100e0 	.word	0x080100e0

08008100 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008106:	4b1e      	ldr	r3, [pc, #120]	@ (8008180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008110:	4b1b      	ldr	r3, [pc, #108]	@ (8008180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	091b      	lsrs	r3, r3, #4
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	3301      	adds	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b03      	cmp	r3, #3
 8008122:	d10c      	bne.n	800813e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008124:	4a17      	ldr	r2, [pc, #92]	@ (8008184 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	fbb2 f3f3 	udiv	r3, r2, r3
 800812c:	4a14      	ldr	r2, [pc, #80]	@ (8008180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800812e:	68d2      	ldr	r2, [r2, #12]
 8008130:	0a12      	lsrs	r2, r2, #8
 8008132:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008136:	fb02 f303 	mul.w	r3, r2, r3
 800813a:	617b      	str	r3, [r7, #20]
    break;
 800813c:	e00c      	b.n	8008158 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800813e:	4a12      	ldr	r2, [pc, #72]	@ (8008188 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	fbb2 f3f3 	udiv	r3, r2, r3
 8008146:	4a0e      	ldr	r2, [pc, #56]	@ (8008180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008148:	68d2      	ldr	r2, [r2, #12]
 800814a:	0a12      	lsrs	r2, r2, #8
 800814c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008150:	fb02 f303 	mul.w	r3, r2, r3
 8008154:	617b      	str	r3, [r7, #20]
    break;
 8008156:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008158:	4b09      	ldr	r3, [pc, #36]	@ (8008180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	0e5b      	lsrs	r3, r3, #25
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	3301      	adds	r3, #1
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008172:	687b      	ldr	r3, [r7, #4]
}
 8008174:	4618      	mov	r0, r3
 8008176:	371c      	adds	r7, #28
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	40021000 	.word	0x40021000
 8008184:	007a1200 	.word	0x007a1200
 8008188:	00f42400 	.word	0x00f42400

0800818c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008194:	2300      	movs	r3, #0
 8008196:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008198:	2300      	movs	r3, #0
 800819a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 8098 	beq.w	80082da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081aa:	2300      	movs	r3, #0
 80081ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081ae:	4b43      	ldr	r3, [pc, #268]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10d      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ba:	4b40      	ldr	r3, [pc, #256]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081be:	4a3f      	ldr	r2, [pc, #252]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80081c6:	4b3d      	ldr	r3, [pc, #244]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081ce:	60bb      	str	r3, [r7, #8]
 80081d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081d2:	2301      	movs	r3, #1
 80081d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081d6:	4b3a      	ldr	r3, [pc, #232]	@ (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a39      	ldr	r2, [pc, #228]	@ (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081e2:	f7fc f8e7 	bl	80043b4 <HAL_GetTick>
 80081e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081e8:	e009      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ea:	f7fc f8e3 	bl	80043b4 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d902      	bls.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	74fb      	strb	r3, [r7, #19]
        break;
 80081fc:	e005      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081fe:	4b30      	ldr	r3, [pc, #192]	@ (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0ef      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800820a:	7cfb      	ldrb	r3, [r7, #19]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d159      	bne.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008210:	4b2a      	ldr	r3, [pc, #168]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800821a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01e      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	429a      	cmp	r2, r3
 800822a:	d019      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800822c:	4b23      	ldr	r3, [pc, #140]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008236:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008238:	4b20      	ldr	r3, [pc, #128]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800823a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800823e:	4a1f      	ldr	r2, [pc, #124]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008248:	4b1c      	ldr	r3, [pc, #112]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800824a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800824e:	4a1b      	ldr	r2, [pc, #108]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008258:	4a18      	ldr	r2, [pc, #96]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d016      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826a:	f7fc f8a3 	bl	80043b4 <HAL_GetTick>
 800826e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008270:	e00b      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008272:	f7fc f89f 	bl	80043b4 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008280:	4293      	cmp	r3, r2
 8008282:	d902      	bls.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	74fb      	strb	r3, [r7, #19]
            break;
 8008288:	e006      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800828a:	4b0c      	ldr	r3, [pc, #48]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0ec      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008298:	7cfb      	ldrb	r3, [r7, #19]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10b      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800829e:	4b07      	ldr	r3, [pc, #28]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ac:	4903      	ldr	r1, [pc, #12]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80082b4:	e008      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082b6:	7cfb      	ldrb	r3, [r7, #19]
 80082b8:	74bb      	strb	r3, [r7, #18]
 80082ba:	e005      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80082bc:	40021000 	.word	0x40021000
 80082c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c4:	7cfb      	ldrb	r3, [r7, #19]
 80082c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082c8:	7c7b      	ldrb	r3, [r7, #17]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d105      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082ce:	4ba6      	ldr	r3, [pc, #664]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d2:	4aa5      	ldr	r2, [pc, #660]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082e6:	4ba0      	ldr	r3, [pc, #640]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ec:	f023 0203 	bic.w	r2, r3, #3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	499c      	ldr	r1, [pc, #624]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008308:	4b97      	ldr	r3, [pc, #604]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800830a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800830e:	f023 020c 	bic.w	r2, r3, #12
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	4994      	ldr	r1, [pc, #592]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008318:	4313      	orrs	r3, r2
 800831a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0304 	and.w	r3, r3, #4
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800832a:	4b8f      	ldr	r3, [pc, #572]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800832c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008330:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	498b      	ldr	r1, [pc, #556]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800833a:	4313      	orrs	r3, r2
 800833c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0308 	and.w	r3, r3, #8
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800834c:	4b86      	ldr	r3, [pc, #536]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800834e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008352:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	4983      	ldr	r1, [pc, #524]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800835c:	4313      	orrs	r3, r2
 800835e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800836e:	4b7e      	ldr	r3, [pc, #504]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008374:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	497a      	ldr	r1, [pc, #488]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00a      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008390:	4b75      	ldr	r3, [pc, #468]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008396:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	4972      	ldr	r1, [pc, #456]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00a      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80083b2:	4b6d      	ldr	r3, [pc, #436]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	4969      	ldr	r1, [pc, #420]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00a      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80083d4:	4b64      	ldr	r3, [pc, #400]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	4961      	ldr	r1, [pc, #388]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083f6:	4b5c      	ldr	r3, [pc, #368]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008404:	4958      	ldr	r1, [pc, #352]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008406:	4313      	orrs	r3, r2
 8008408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008414:	2b00      	cmp	r3, #0
 8008416:	d015      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008418:	4b53      	ldr	r3, [pc, #332]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800841a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800841e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008426:	4950      	ldr	r1, [pc, #320]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008428:	4313      	orrs	r3, r2
 800842a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008436:	d105      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008438:	4b4b      	ldr	r3, [pc, #300]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	4a4a      	ldr	r2, [pc, #296]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800843e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008442:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800844c:	2b00      	cmp	r3, #0
 800844e:	d015      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008450:	4b45      	ldr	r3, [pc, #276]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008456:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845e:	4942      	ldr	r1, [pc, #264]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800846e:	d105      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008470:	4b3d      	ldr	r3, [pc, #244]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	4a3c      	ldr	r2, [pc, #240]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800847a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d015      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008488:	4b37      	ldr	r3, [pc, #220]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800848a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800848e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008496:	4934      	ldr	r1, [pc, #208]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008498:	4313      	orrs	r3, r2
 800849a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084a6:	d105      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084a8:	4b2f      	ldr	r3, [pc, #188]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	4a2e      	ldr	r2, [pc, #184]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d015      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084c0:	4b29      	ldr	r3, [pc, #164]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ce:	4926      	ldr	r1, [pc, #152]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084de:	d105      	bne.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084e0:	4b21      	ldr	r3, [pc, #132]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	4a20      	ldr	r2, [pc, #128]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d015      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008506:	4918      	ldr	r1, [pc, #96]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008508:	4313      	orrs	r3, r2
 800850a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008516:	d105      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008518:	4b13      	ldr	r3, [pc, #76]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	4a12      	ldr	r2, [pc, #72]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800851e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008522:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d015      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008530:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008536:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800853e:	490a      	ldr	r1, [pc, #40]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008540:	4313      	orrs	r3, r2
 8008542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800854e:	d105      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008550:	4b05      	ldr	r3, [pc, #20]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	4a04      	ldr	r2, [pc, #16]	@ (8008568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800855a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800855c:	7cbb      	ldrb	r3, [r7, #18]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	40021000 	.word	0x40021000

0800856c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e049      	b.n	8008612 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d106      	bne.n	8008598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fb fb22 	bl	8003bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3304      	adds	r3, #4
 80085a8:	4619      	mov	r1, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	f001 f97e 	bl	80098ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b01      	cmp	r3, #1
 800862e:	d001      	beq.n	8008634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e04a      	b.n	80086ca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0201 	orr.w	r2, r2, #1
 800864a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a21      	ldr	r2, [pc, #132]	@ (80086d8 <HAL_TIM_Base_Start_IT+0xbc>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d018      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800865e:	d013      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1d      	ldr	r2, [pc, #116]	@ (80086dc <HAL_TIM_Base_Start_IT+0xc0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00e      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a1c      	ldr	r2, [pc, #112]	@ (80086e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a1a      	ldr	r2, [pc, #104]	@ (80086e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d004      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a19      	ldr	r2, [pc, #100]	@ (80086e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d115      	bne.n	80086b4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	4b17      	ldr	r3, [pc, #92]	@ (80086ec <HAL_TIM_Base_Start_IT+0xd0>)
 8008690:	4013      	ands	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b06      	cmp	r3, #6
 8008698:	d015      	beq.n	80086c6 <HAL_TIM_Base_Start_IT+0xaa>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086a0:	d011      	beq.n	80086c6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f042 0201 	orr.w	r2, r2, #1
 80086b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b2:	e008      	b.n	80086c6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0201 	orr.w	r2, r2, #1
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	e000      	b.n	80086c8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40012c00 	.word	0x40012c00
 80086dc:	40000400 	.word	0x40000400
 80086e0:	40000800 	.word	0x40000800
 80086e4:	40013400 	.word	0x40013400
 80086e8:	40014000 	.word	0x40014000
 80086ec:	00010007 	.word	0x00010007

080086f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e049      	b.n	8008796 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d106      	bne.n	800871c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f841 	bl	800879e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3304      	adds	r3, #4
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	f001 f8bc 	bl	80098ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
	...

080087b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d109      	bne.n	80087d8 <HAL_TIM_PWM_Start+0x24>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	bf14      	ite	ne
 80087d0:	2301      	movne	r3, #1
 80087d2:	2300      	moveq	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	e03c      	b.n	8008852 <HAL_TIM_PWM_Start+0x9e>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d109      	bne.n	80087f2 <HAL_TIM_PWM_Start+0x3e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	bf14      	ite	ne
 80087ea:	2301      	movne	r3, #1
 80087ec:	2300      	moveq	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	e02f      	b.n	8008852 <HAL_TIM_PWM_Start+0x9e>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d109      	bne.n	800880c <HAL_TIM_PWM_Start+0x58>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b01      	cmp	r3, #1
 8008802:	bf14      	ite	ne
 8008804:	2301      	movne	r3, #1
 8008806:	2300      	moveq	r3, #0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	e022      	b.n	8008852 <HAL_TIM_PWM_Start+0x9e>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2b0c      	cmp	r3, #12
 8008810:	d109      	bne.n	8008826 <HAL_TIM_PWM_Start+0x72>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b01      	cmp	r3, #1
 800881c:	bf14      	ite	ne
 800881e:	2301      	movne	r3, #1
 8008820:	2300      	moveq	r3, #0
 8008822:	b2db      	uxtb	r3, r3
 8008824:	e015      	b.n	8008852 <HAL_TIM_PWM_Start+0x9e>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b10      	cmp	r3, #16
 800882a:	d109      	bne.n	8008840 <HAL_TIM_PWM_Start+0x8c>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b01      	cmp	r3, #1
 8008836:	bf14      	ite	ne
 8008838:	2301      	movne	r3, #1
 800883a:	2300      	moveq	r3, #0
 800883c:	b2db      	uxtb	r3, r3
 800883e:	e008      	b.n	8008852 <HAL_TIM_PWM_Start+0x9e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b01      	cmp	r3, #1
 800884a:	bf14      	ite	ne
 800884c:	2301      	movne	r3, #1
 800884e:	2300      	moveq	r3, #0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e097      	b.n	800898a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <HAL_TIM_PWM_Start+0xb6>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008868:	e023      	b.n	80088b2 <HAL_TIM_PWM_Start+0xfe>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b04      	cmp	r3, #4
 800886e:	d104      	bne.n	800887a <HAL_TIM_PWM_Start+0xc6>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008878:	e01b      	b.n	80088b2 <HAL_TIM_PWM_Start+0xfe>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b08      	cmp	r3, #8
 800887e:	d104      	bne.n	800888a <HAL_TIM_PWM_Start+0xd6>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008888:	e013      	b.n	80088b2 <HAL_TIM_PWM_Start+0xfe>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b0c      	cmp	r3, #12
 800888e:	d104      	bne.n	800889a <HAL_TIM_PWM_Start+0xe6>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2202      	movs	r2, #2
 8008894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008898:	e00b      	b.n	80088b2 <HAL_TIM_PWM_Start+0xfe>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2b10      	cmp	r3, #16
 800889e:	d104      	bne.n	80088aa <HAL_TIM_PWM_Start+0xf6>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088a8:	e003      	b.n	80088b2 <HAL_TIM_PWM_Start+0xfe>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2202      	movs	r2, #2
 80088ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2201      	movs	r2, #1
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 fc24 	bl	800a108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a33      	ldr	r2, [pc, #204]	@ (8008994 <HAL_TIM_PWM_Start+0x1e0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d013      	beq.n	80088f2 <HAL_TIM_PWM_Start+0x13e>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a32      	ldr	r2, [pc, #200]	@ (8008998 <HAL_TIM_PWM_Start+0x1e4>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d00e      	beq.n	80088f2 <HAL_TIM_PWM_Start+0x13e>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a30      	ldr	r2, [pc, #192]	@ (800899c <HAL_TIM_PWM_Start+0x1e8>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d009      	beq.n	80088f2 <HAL_TIM_PWM_Start+0x13e>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a2f      	ldr	r2, [pc, #188]	@ (80089a0 <HAL_TIM_PWM_Start+0x1ec>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d004      	beq.n	80088f2 <HAL_TIM_PWM_Start+0x13e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a2d      	ldr	r2, [pc, #180]	@ (80089a4 <HAL_TIM_PWM_Start+0x1f0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d101      	bne.n	80088f6 <HAL_TIM_PWM_Start+0x142>
 80088f2:	2301      	movs	r3, #1
 80088f4:	e000      	b.n	80088f8 <HAL_TIM_PWM_Start+0x144>
 80088f6:	2300      	movs	r3, #0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800890a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a20      	ldr	r2, [pc, #128]	@ (8008994 <HAL_TIM_PWM_Start+0x1e0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d018      	beq.n	8008948 <HAL_TIM_PWM_Start+0x194>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800891e:	d013      	beq.n	8008948 <HAL_TIM_PWM_Start+0x194>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a20      	ldr	r2, [pc, #128]	@ (80089a8 <HAL_TIM_PWM_Start+0x1f4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d00e      	beq.n	8008948 <HAL_TIM_PWM_Start+0x194>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a1f      	ldr	r2, [pc, #124]	@ (80089ac <HAL_TIM_PWM_Start+0x1f8>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d009      	beq.n	8008948 <HAL_TIM_PWM_Start+0x194>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a17      	ldr	r2, [pc, #92]	@ (8008998 <HAL_TIM_PWM_Start+0x1e4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d004      	beq.n	8008948 <HAL_TIM_PWM_Start+0x194>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a16      	ldr	r2, [pc, #88]	@ (800899c <HAL_TIM_PWM_Start+0x1e8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d115      	bne.n	8008974 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	4b18      	ldr	r3, [pc, #96]	@ (80089b0 <HAL_TIM_PWM_Start+0x1fc>)
 8008950:	4013      	ands	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b06      	cmp	r3, #6
 8008958:	d015      	beq.n	8008986 <HAL_TIM_PWM_Start+0x1d2>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008960:	d011      	beq.n	8008986 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0201 	orr.w	r2, r2, #1
 8008970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008972:	e008      	b.n	8008986 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0201 	orr.w	r2, r2, #1
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e000      	b.n	8008988 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008986:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	40012c00 	.word	0x40012c00
 8008998:	40013400 	.word	0x40013400
 800899c:	40014000 	.word	0x40014000
 80089a0:	40014400 	.word	0x40014400
 80089a4:	40014800 	.word	0x40014800
 80089a8:	40000400 	.word	0x40000400
 80089ac:	40000800 	.word	0x40000800
 80089b0:	00010007 	.word	0x00010007

080089b4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d109      	bne.n	80089e0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	bf0c      	ite	eq
 80089d8:	2301      	moveq	r3, #1
 80089da:	2300      	movne	r3, #0
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	e03c      	b.n	8008a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d109      	bne.n	80089fa <HAL_TIM_PWM_Start_DMA+0x46>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	bf0c      	ite	eq
 80089f2:	2301      	moveq	r3, #1
 80089f4:	2300      	movne	r3, #0
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	e02f      	b.n	8008a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	d109      	bne.n	8008a14 <HAL_TIM_PWM_Start_DMA+0x60>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	bf0c      	ite	eq
 8008a0c:	2301      	moveq	r3, #1
 8008a0e:	2300      	movne	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	e022      	b.n	8008a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b0c      	cmp	r3, #12
 8008a18:	d109      	bne.n	8008a2e <HAL_TIM_PWM_Start_DMA+0x7a>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	bf0c      	ite	eq
 8008a26:	2301      	moveq	r3, #1
 8008a28:	2300      	movne	r3, #0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	e015      	b.n	8008a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2b10      	cmp	r3, #16
 8008a32:	d109      	bne.n	8008a48 <HAL_TIM_PWM_Start_DMA+0x94>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	bf0c      	ite	eq
 8008a40:	2301      	moveq	r3, #1
 8008a42:	2300      	movne	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	e008      	b.n	8008a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	bf0c      	ite	eq
 8008a54:	2301      	moveq	r3, #1
 8008a56:	2300      	movne	r3, #0
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	e1a6      	b.n	8008db0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d109      	bne.n	8008a7c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	bf0c      	ite	eq
 8008a74:	2301      	moveq	r3, #1
 8008a76:	2300      	movne	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	e03c      	b.n	8008af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d109      	bne.n	8008a96 <HAL_TIM_PWM_Start_DMA+0xe2>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	bf0c      	ite	eq
 8008a8e:	2301      	moveq	r3, #1
 8008a90:	2300      	movne	r3, #0
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	e02f      	b.n	8008af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d109      	bne.n	8008ab0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	bf0c      	ite	eq
 8008aa8:	2301      	moveq	r3, #1
 8008aaa:	2300      	movne	r3, #0
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	e022      	b.n	8008af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b0c      	cmp	r3, #12
 8008ab4:	d109      	bne.n	8008aca <HAL_TIM_PWM_Start_DMA+0x116>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	bf0c      	ite	eq
 8008ac2:	2301      	moveq	r3, #1
 8008ac4:	2300      	movne	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	e015      	b.n	8008af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	d109      	bne.n	8008ae4 <HAL_TIM_PWM_Start_DMA+0x130>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	bf0c      	ite	eq
 8008adc:	2301      	moveq	r3, #1
 8008ade:	2300      	movne	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	e008      	b.n	8008af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	bf0c      	ite	eq
 8008af0:	2301      	moveq	r3, #1
 8008af2:	2300      	movne	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d034      	beq.n	8008b64 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <HAL_TIM_PWM_Start_DMA+0x152>
 8008b00:	887b      	ldrh	r3, [r7, #2]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e152      	b.n	8008db0 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <HAL_TIM_PWM_Start_DMA+0x166>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b18:	e026      	b.n	8008b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d104      	bne.n	8008b2a <HAL_TIM_PWM_Start_DMA+0x176>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b28:	e01e      	b.n	8008b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d104      	bne.n	8008b3a <HAL_TIM_PWM_Start_DMA+0x186>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b38:	e016      	b.n	8008b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2b0c      	cmp	r3, #12
 8008b3e:	d104      	bne.n	8008b4a <HAL_TIM_PWM_Start_DMA+0x196>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b48:	e00e      	b.n	8008b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b10      	cmp	r3, #16
 8008b4e:	d104      	bne.n	8008b5a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b58:	e006      	b.n	8008b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b62:	e001      	b.n	8008b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e123      	b.n	8008db0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b0c      	cmp	r3, #12
 8008b6c:	f200 80ae 	bhi.w	8008ccc <HAL_TIM_PWM_Start_DMA+0x318>
 8008b70:	a201      	add	r2, pc, #4	@ (adr r2, 8008b78 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008bad 	.word	0x08008bad
 8008b7c:	08008ccd 	.word	0x08008ccd
 8008b80:	08008ccd 	.word	0x08008ccd
 8008b84:	08008ccd 	.word	0x08008ccd
 8008b88:	08008bf5 	.word	0x08008bf5
 8008b8c:	08008ccd 	.word	0x08008ccd
 8008b90:	08008ccd 	.word	0x08008ccd
 8008b94:	08008ccd 	.word	0x08008ccd
 8008b98:	08008c3d 	.word	0x08008c3d
 8008b9c:	08008ccd 	.word	0x08008ccd
 8008ba0:	08008ccd 	.word	0x08008ccd
 8008ba4:	08008ccd 	.word	0x08008ccd
 8008ba8:	08008c85 	.word	0x08008c85
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb0:	4a81      	ldr	r2, [pc, #516]	@ (8008db8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb8:	4a80      	ldr	r2, [pc, #512]	@ (8008dbc <HAL_TIM_PWM_Start_DMA+0x408>)
 8008bba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc0:	4a7f      	ldr	r2, [pc, #508]	@ (8008dc0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008bc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3334      	adds	r3, #52	@ 0x34
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	887b      	ldrh	r3, [r7, #2]
 8008bd4:	f7fd fa8a 	bl	80060ec <HAL_DMA_Start_IT>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e0e6      	b.n	8008db0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bf0:	60da      	str	r2, [r3, #12]
      break;
 8008bf2:	e06e      	b.n	8008cd2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	4a6f      	ldr	r2, [pc, #444]	@ (8008db8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c00:	4a6e      	ldr	r2, [pc, #440]	@ (8008dbc <HAL_TIM_PWM_Start_DMA+0x408>)
 8008c02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c08:	4a6d      	ldr	r2, [pc, #436]	@ (8008dc0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008c0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c10:	6879      	ldr	r1, [r7, #4]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3338      	adds	r3, #56	@ 0x38
 8008c18:	461a      	mov	r2, r3
 8008c1a:	887b      	ldrh	r3, [r7, #2]
 8008c1c:	f7fd fa66 	bl	80060ec <HAL_DMA_Start_IT>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e0c2      	b.n	8008db0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c38:	60da      	str	r2, [r3, #12]
      break;
 8008c3a:	e04a      	b.n	8008cd2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c40:	4a5d      	ldr	r2, [pc, #372]	@ (8008db8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008c42:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c48:	4a5c      	ldr	r2, [pc, #368]	@ (8008dbc <HAL_TIM_PWM_Start_DMA+0x408>)
 8008c4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c50:	4a5b      	ldr	r2, [pc, #364]	@ (8008dc0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008c52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	333c      	adds	r3, #60	@ 0x3c
 8008c60:	461a      	mov	r2, r3
 8008c62:	887b      	ldrh	r3, [r7, #2]
 8008c64:	f7fd fa42 	bl	80060ec <HAL_DMA_Start_IT>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e09e      	b.n	8008db0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c80:	60da      	str	r2, [r3, #12]
      break;
 8008c82:	e026      	b.n	8008cd2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c88:	4a4b      	ldr	r2, [pc, #300]	@ (8008db8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c90:	4a4a      	ldr	r2, [pc, #296]	@ (8008dbc <HAL_TIM_PWM_Start_DMA+0x408>)
 8008c92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c98:	4a49      	ldr	r2, [pc, #292]	@ (8008dc0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008c9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3340      	adds	r3, #64	@ 0x40
 8008ca8:	461a      	mov	r2, r3
 8008caa:	887b      	ldrh	r3, [r7, #2]
 8008cac:	f7fd fa1e 	bl	80060ec <HAL_DMA_Start_IT>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e07a      	b.n	8008db0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008cc8:	60da      	str	r2, [r3, #12]
      break;
 8008cca:	e002      	b.n	8008cd2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
      break;
 8008cd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d16a      	bne.n	8008dae <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	68b9      	ldr	r1, [r7, #8]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 fa11 	bl	800a108 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a36      	ldr	r2, [pc, #216]	@ (8008dc4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d013      	beq.n	8008d18 <HAL_TIM_PWM_Start_DMA+0x364>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a34      	ldr	r2, [pc, #208]	@ (8008dc8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00e      	beq.n	8008d18 <HAL_TIM_PWM_Start_DMA+0x364>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a33      	ldr	r2, [pc, #204]	@ (8008dcc <HAL_TIM_PWM_Start_DMA+0x418>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d009      	beq.n	8008d18 <HAL_TIM_PWM_Start_DMA+0x364>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a31      	ldr	r2, [pc, #196]	@ (8008dd0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d004      	beq.n	8008d18 <HAL_TIM_PWM_Start_DMA+0x364>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a30      	ldr	r2, [pc, #192]	@ (8008dd4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d101      	bne.n	8008d1c <HAL_TIM_PWM_Start_DMA+0x368>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <HAL_TIM_PWM_Start_DMA+0x36a>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d007      	beq.n	8008d32 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a23      	ldr	r2, [pc, #140]	@ (8008dc4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d018      	beq.n	8008d6e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d44:	d013      	beq.n	8008d6e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a23      	ldr	r2, [pc, #140]	@ (8008dd8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d00e      	beq.n	8008d6e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a21      	ldr	r2, [pc, #132]	@ (8008ddc <HAL_TIM_PWM_Start_DMA+0x428>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d009      	beq.n	8008d6e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d004      	beq.n	8008d6e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a18      	ldr	r2, [pc, #96]	@ (8008dcc <HAL_TIM_PWM_Start_DMA+0x418>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d115      	bne.n	8008d9a <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	4b1a      	ldr	r3, [pc, #104]	@ (8008de0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008d76:	4013      	ands	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b06      	cmp	r3, #6
 8008d7e:	d015      	beq.n	8008dac <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d86:	d011      	beq.n	8008dac <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d98:	e008      	b.n	8008dac <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f042 0201 	orr.w	r2, r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	e000      	b.n	8008dae <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	0800979b 	.word	0x0800979b
 8008dbc:	08009843 	.word	0x08009843
 8008dc0:	08009709 	.word	0x08009709
 8008dc4:	40012c00 	.word	0x40012c00
 8008dc8:	40013400 	.word	0x40013400
 8008dcc:	40014000 	.word	0x40014000
 8008dd0:	40014400 	.word	0x40014400
 8008dd4:	40014800 	.word	0x40014800
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	40000800 	.word	0x40000800
 8008de0:	00010007 	.word	0x00010007

08008de4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b0c      	cmp	r3, #12
 8008df6:	d855      	bhi.n	8008ea4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008df8:	a201      	add	r2, pc, #4	@ (adr r2, 8008e00 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfe:	bf00      	nop
 8008e00:	08008e35 	.word	0x08008e35
 8008e04:	08008ea5 	.word	0x08008ea5
 8008e08:	08008ea5 	.word	0x08008ea5
 8008e0c:	08008ea5 	.word	0x08008ea5
 8008e10:	08008e51 	.word	0x08008e51
 8008e14:	08008ea5 	.word	0x08008ea5
 8008e18:	08008ea5 	.word	0x08008ea5
 8008e1c:	08008ea5 	.word	0x08008ea5
 8008e20:	08008e6d 	.word	0x08008e6d
 8008e24:	08008ea5 	.word	0x08008ea5
 8008e28:	08008ea5 	.word	0x08008ea5
 8008e2c:	08008ea5 	.word	0x08008ea5
 8008e30:	08008e89 	.word	0x08008e89
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008e42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fd fa23 	bl	8006294 <HAL_DMA_Abort_IT>
      break;
 8008e4e:	e02c      	b.n	8008eaa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fd fa15 	bl	8006294 <HAL_DMA_Abort_IT>
      break;
 8008e6a:	e01e      	b.n	8008eaa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fd fa07 	bl	8006294 <HAL_DMA_Abort_IT>
      break;
 8008e86:	e010      	b.n	8008eaa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fd f9f9 	bl	8006294 <HAL_DMA_Abort_IT>
      break;
 8008ea2:	e002      	b.n	8008eaa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea8:	bf00      	nop
  }

  if (status == HAL_OK)
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f040 8081 	bne.w	8008fb4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f001 f924 	bl	800a108 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a3e      	ldr	r2, [pc, #248]	@ (8008fc0 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d013      	beq.n	8008ef2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a3d      	ldr	r2, [pc, #244]	@ (8008fc4 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d00e      	beq.n	8008ef2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a3b      	ldr	r2, [pc, #236]	@ (8008fc8 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d009      	beq.n	8008ef2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a3a      	ldr	r2, [pc, #232]	@ (8008fcc <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d004      	beq.n	8008ef2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a38      	ldr	r2, [pc, #224]	@ (8008fd0 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d101      	bne.n	8008ef6 <HAL_TIM_PWM_Stop_DMA+0x112>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e000      	b.n	8008ef8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d017      	beq.n	8008f2c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6a1a      	ldr	r2, [r3, #32]
 8008f02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f06:	4013      	ands	r3, r2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10f      	bne.n	8008f2c <HAL_TIM_PWM_Stop_DMA+0x148>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6a1a      	ldr	r2, [r3, #32]
 8008f12:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008f16:	4013      	ands	r3, r2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d107      	bne.n	8008f2c <HAL_TIM_PWM_Stop_DMA+0x148>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6a1a      	ldr	r2, [r3, #32]
 8008f32:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10f      	bne.n	8008f5c <HAL_TIM_PWM_Stop_DMA+0x178>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6a1a      	ldr	r2, [r3, #32]
 8008f42:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008f46:	4013      	ands	r3, r2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d107      	bne.n	8008f5c <HAL_TIM_PWM_Stop_DMA+0x178>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0201 	bic.w	r2, r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <HAL_TIM_PWM_Stop_DMA+0x188>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f6a:	e023      	b.n	8008fb4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d104      	bne.n	8008f7c <HAL_TIM_PWM_Stop_DMA+0x198>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f7a:	e01b      	b.n	8008fb4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b08      	cmp	r3, #8
 8008f80:	d104      	bne.n	8008f8c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f8a:	e013      	b.n	8008fb4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b0c      	cmp	r3, #12
 8008f90:	d104      	bne.n	8008f9c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f9a:	e00b      	b.n	8008fb4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b10      	cmp	r3, #16
 8008fa0:	d104      	bne.n	8008fac <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008faa:	e003      	b.n	8008fb4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	40012c00 	.word	0x40012c00
 8008fc4:	40013400 	.word	0x40013400
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	40014400 	.word	0x40014400
 8008fd0:	40014800 	.word	0x40014800

08008fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d020      	beq.n	8009038 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d01b      	beq.n	8009038 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f06f 0202 	mvn.w	r2, #2
 8009008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fb4a 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 8009024:	e005      	b.n	8009032 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fb3c 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7f8 ffd3 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f003 0304 	and.w	r3, r3, #4
 800903e:	2b00      	cmp	r3, #0
 8009040:	d020      	beq.n	8009084 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01b      	beq.n	8009084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f06f 0204 	mvn.w	r2, #4
 8009054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2202      	movs	r2, #2
 800905a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fb24 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 8009070:	e005      	b.n	800907e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fb16 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7f8 ffad 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f003 0308 	and.w	r3, r3, #8
 800908a:	2b00      	cmp	r3, #0
 800908c:	d020      	beq.n	80090d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b00      	cmp	r3, #0
 8009096:	d01b      	beq.n	80090d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f06f 0208 	mvn.w	r2, #8
 80090a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2204      	movs	r2, #4
 80090a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fafe 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 80090bc:	e005      	b.n	80090ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 faf0 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7f8 ff87 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f003 0310 	and.w	r3, r3, #16
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d020      	beq.n	800911c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f003 0310 	and.w	r3, r3, #16
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d01b      	beq.n	800911c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f06f 0210 	mvn.w	r2, #16
 80090ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2208      	movs	r2, #8
 80090f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fad8 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 8009108:	e005      	b.n	8009116 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 faca 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7f8 ff61 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00c      	beq.n	8009140 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	d007      	beq.n	8009140 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f06f 0201 	mvn.w	r2, #1
 8009138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 faa8 	bl	8009690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009146:	2b00      	cmp	r3, #0
 8009148:	d104      	bne.n	8009154 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00c      	beq.n	800916e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800915a:	2b00      	cmp	r3, #0
 800915c:	d007      	beq.n	800916e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 f87f 	bl	800a26c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800917e:	2b00      	cmp	r3, #0
 8009180:	d007      	beq.n	8009192 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800918a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 f877 	bl	800a280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00c      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d007      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fa95 	bl	80096e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f003 0320 	and.w	r3, r3, #32
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f06f 0220 	mvn.w	r2, #32
 80091d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 f83f 	bl	800a258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00c      	beq.n	80091fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80091f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 f84b 	bl	800a294 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00c      	beq.n	8009222 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800921a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f001 f843 	bl	800a2a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00c      	beq.n	8009246 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800923e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 f83b 	bl	800a2bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00c      	beq.n	800926a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 f833 	bl	800a2d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800928a:	2b01      	cmp	r3, #1
 800928c:	d101      	bne.n	8009292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800928e:	2302      	movs	r3, #2
 8009290:	e0ff      	b.n	8009492 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b14      	cmp	r3, #20
 800929e:	f200 80f0 	bhi.w	8009482 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80092a2:	a201      	add	r2, pc, #4	@ (adr r2, 80092a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092fd 	.word	0x080092fd
 80092ac:	08009483 	.word	0x08009483
 80092b0:	08009483 	.word	0x08009483
 80092b4:	08009483 	.word	0x08009483
 80092b8:	0800933d 	.word	0x0800933d
 80092bc:	08009483 	.word	0x08009483
 80092c0:	08009483 	.word	0x08009483
 80092c4:	08009483 	.word	0x08009483
 80092c8:	0800937f 	.word	0x0800937f
 80092cc:	08009483 	.word	0x08009483
 80092d0:	08009483 	.word	0x08009483
 80092d4:	08009483 	.word	0x08009483
 80092d8:	080093bf 	.word	0x080093bf
 80092dc:	08009483 	.word	0x08009483
 80092e0:	08009483 	.word	0x08009483
 80092e4:	08009483 	.word	0x08009483
 80092e8:	08009401 	.word	0x08009401
 80092ec:	08009483 	.word	0x08009483
 80092f0:	08009483 	.word	0x08009483
 80092f4:	08009483 	.word	0x08009483
 80092f8:	08009441 	.word	0x08009441
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fb6e 	bl	80099e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0208 	orr.w	r2, r2, #8
 8009316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699a      	ldr	r2, [r3, #24]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f022 0204 	bic.w	r2, r2, #4
 8009326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6999      	ldr	r1, [r3, #24]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	691a      	ldr	r2, [r3, #16]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	619a      	str	r2, [r3, #24]
      break;
 800933a:	e0a5      	b.n	8009488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fbde 	bl	8009b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699a      	ldr	r2, [r3, #24]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699a      	ldr	r2, [r3, #24]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6999      	ldr	r1, [r3, #24]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	021a      	lsls	r2, r3, #8
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	430a      	orrs	r2, r1
 800937a:	619a      	str	r2, [r3, #24]
      break;
 800937c:	e084      	b.n	8009488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68b9      	ldr	r1, [r7, #8]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fc47 	bl	8009c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	69da      	ldr	r2, [r3, #28]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f042 0208 	orr.w	r2, r2, #8
 8009398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69da      	ldr	r2, [r3, #28]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f022 0204 	bic.w	r2, r2, #4
 80093a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69d9      	ldr	r1, [r3, #28]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	691a      	ldr	r2, [r3, #16]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	61da      	str	r2, [r3, #28]
      break;
 80093bc:	e064      	b.n	8009488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fcaf 	bl	8009d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69da      	ldr	r2, [r3, #28]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69d9      	ldr	r1, [r3, #28]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	021a      	lsls	r2, r3, #8
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	61da      	str	r2, [r3, #28]
      break;
 80093fe:	e043      	b.n	8009488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fd18 	bl	8009e3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0208 	orr.w	r2, r2, #8
 800941a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0204 	bic.w	r2, r2, #4
 800942a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	691a      	ldr	r2, [r3, #16]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800943e:	e023      	b.n	8009488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fd5c 	bl	8009f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800945a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800946a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	021a      	lsls	r2, r3, #8
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009480:	e002      	b.n	8009488 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]
      break;
 8009486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop

0800949c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_TIM_ConfigClockSource+0x1c>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e0de      	b.n	8009676 <HAL_TIM_ConfigClockSource+0x1da>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80094d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80094da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a63      	ldr	r2, [pc, #396]	@ (8009680 <HAL_TIM_ConfigClockSource+0x1e4>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	f000 80a9 	beq.w	800964a <HAL_TIM_ConfigClockSource+0x1ae>
 80094f8:	4a61      	ldr	r2, [pc, #388]	@ (8009680 <HAL_TIM_ConfigClockSource+0x1e4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	f200 80ae 	bhi.w	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 8009500:	4a60      	ldr	r2, [pc, #384]	@ (8009684 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009502:	4293      	cmp	r3, r2
 8009504:	f000 80a1 	beq.w	800964a <HAL_TIM_ConfigClockSource+0x1ae>
 8009508:	4a5e      	ldr	r2, [pc, #376]	@ (8009684 <HAL_TIM_ConfigClockSource+0x1e8>)
 800950a:	4293      	cmp	r3, r2
 800950c:	f200 80a6 	bhi.w	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 8009510:	4a5d      	ldr	r2, [pc, #372]	@ (8009688 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009512:	4293      	cmp	r3, r2
 8009514:	f000 8099 	beq.w	800964a <HAL_TIM_ConfigClockSource+0x1ae>
 8009518:	4a5b      	ldr	r2, [pc, #364]	@ (8009688 <HAL_TIM_ConfigClockSource+0x1ec>)
 800951a:	4293      	cmp	r3, r2
 800951c:	f200 809e 	bhi.w	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 8009520:	4a5a      	ldr	r2, [pc, #360]	@ (800968c <HAL_TIM_ConfigClockSource+0x1f0>)
 8009522:	4293      	cmp	r3, r2
 8009524:	f000 8091 	beq.w	800964a <HAL_TIM_ConfigClockSource+0x1ae>
 8009528:	4a58      	ldr	r2, [pc, #352]	@ (800968c <HAL_TIM_ConfigClockSource+0x1f0>)
 800952a:	4293      	cmp	r3, r2
 800952c:	f200 8096 	bhi.w	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 8009530:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009534:	f000 8089 	beq.w	800964a <HAL_TIM_ConfigClockSource+0x1ae>
 8009538:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800953c:	f200 808e 	bhi.w	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 8009540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009544:	d03e      	beq.n	80095c4 <HAL_TIM_ConfigClockSource+0x128>
 8009546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800954a:	f200 8087 	bhi.w	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 800954e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009552:	f000 8086 	beq.w	8009662 <HAL_TIM_ConfigClockSource+0x1c6>
 8009556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800955a:	d87f      	bhi.n	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 800955c:	2b70      	cmp	r3, #112	@ 0x70
 800955e:	d01a      	beq.n	8009596 <HAL_TIM_ConfigClockSource+0xfa>
 8009560:	2b70      	cmp	r3, #112	@ 0x70
 8009562:	d87b      	bhi.n	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 8009564:	2b60      	cmp	r3, #96	@ 0x60
 8009566:	d050      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x16e>
 8009568:	2b60      	cmp	r3, #96	@ 0x60
 800956a:	d877      	bhi.n	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 800956c:	2b50      	cmp	r3, #80	@ 0x50
 800956e:	d03c      	beq.n	80095ea <HAL_TIM_ConfigClockSource+0x14e>
 8009570:	2b50      	cmp	r3, #80	@ 0x50
 8009572:	d873      	bhi.n	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 8009574:	2b40      	cmp	r3, #64	@ 0x40
 8009576:	d058      	beq.n	800962a <HAL_TIM_ConfigClockSource+0x18e>
 8009578:	2b40      	cmp	r3, #64	@ 0x40
 800957a:	d86f      	bhi.n	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 800957c:	2b30      	cmp	r3, #48	@ 0x30
 800957e:	d064      	beq.n	800964a <HAL_TIM_ConfigClockSource+0x1ae>
 8009580:	2b30      	cmp	r3, #48	@ 0x30
 8009582:	d86b      	bhi.n	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 8009584:	2b20      	cmp	r3, #32
 8009586:	d060      	beq.n	800964a <HAL_TIM_ConfigClockSource+0x1ae>
 8009588:	2b20      	cmp	r3, #32
 800958a:	d867      	bhi.n	800965c <HAL_TIM_ConfigClockSource+0x1c0>
 800958c:	2b00      	cmp	r3, #0
 800958e:	d05c      	beq.n	800964a <HAL_TIM_ConfigClockSource+0x1ae>
 8009590:	2b10      	cmp	r3, #16
 8009592:	d05a      	beq.n	800964a <HAL_TIM_ConfigClockSource+0x1ae>
 8009594:	e062      	b.n	800965c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095a6:	f000 fd8f 	bl	800a0c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80095b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	609a      	str	r2, [r3, #8]
      break;
 80095c2:	e04f      	b.n	8009664 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095d4:	f000 fd78 	bl	800a0c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095e6:	609a      	str	r2, [r3, #8]
      break;
 80095e8:	e03c      	b.n	8009664 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095f6:	461a      	mov	r2, r3
 80095f8:	f000 fcea 	bl	8009fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2150      	movs	r1, #80	@ 0x50
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fd43 	bl	800a08e <TIM_ITRx_SetConfig>
      break;
 8009608:	e02c      	b.n	8009664 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009616:	461a      	mov	r2, r3
 8009618:	f000 fd09 	bl	800a02e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2160      	movs	r1, #96	@ 0x60
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fd33 	bl	800a08e <TIM_ITRx_SetConfig>
      break;
 8009628:	e01c      	b.n	8009664 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009636:	461a      	mov	r2, r3
 8009638:	f000 fcca 	bl	8009fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2140      	movs	r1, #64	@ 0x40
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fd23 	bl	800a08e <TIM_ITRx_SetConfig>
      break;
 8009648:	e00c      	b.n	8009664 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f000 fd1a 	bl	800a08e <TIM_ITRx_SetConfig>
      break;
 800965a:	e003      	b.n	8009664 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	73fb      	strb	r3, [r7, #15]
      break;
 8009660:	e000      	b.n	8009664 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	00100070 	.word	0x00100070
 8009684:	00100040 	.word	0x00100040
 8009688:	00100030 	.word	0x00100030
 800968c:	00100020 	.word	0x00100020

08009690 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009714:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	429a      	cmp	r2, r3
 800971e:	d107      	bne.n	8009730 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2201      	movs	r2, #1
 8009724:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800972e:	e02a      	b.n	8009786 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	429a      	cmp	r2, r3
 8009738:	d107      	bne.n	800974a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2202      	movs	r2, #2
 800973e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009748:	e01d      	b.n	8009786 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d107      	bne.n	8009764 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2204      	movs	r2, #4
 8009758:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009762:	e010      	b.n	8009786 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	429a      	cmp	r2, r3
 800976c:	d107      	bne.n	800977e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2208      	movs	r2, #8
 8009772:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800977c:	e003      	b.n	8009786 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f7ff ffb4 	bl	80096f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	771a      	strb	r2, [r3, #28]
}
 8009792:	bf00      	nop
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d10b      	bne.n	80097ca <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2201      	movs	r2, #1
 80097b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d136      	bne.n	800982e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097c8:	e031      	b.n	800982e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d10b      	bne.n	80097ec <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2202      	movs	r2, #2
 80097d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d125      	bne.n	800982e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097ea:	e020      	b.n	800982e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d10b      	bne.n	800980e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2204      	movs	r2, #4
 80097fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d114      	bne.n	800982e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800980c:	e00f      	b.n	800982e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	429a      	cmp	r2, r3
 8009816:	d10a      	bne.n	800982e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2208      	movs	r2, #8
 800981c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d103      	bne.n	800982e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7f8 fbd2 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	771a      	strb	r2, [r3, #28]
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	429a      	cmp	r2, r3
 8009858:	d103      	bne.n	8009862 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	771a      	strb	r2, [r3, #28]
 8009860:	e019      	b.n	8009896 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	d103      	bne.n	8009874 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2202      	movs	r2, #2
 8009870:	771a      	strb	r2, [r3, #28]
 8009872:	e010      	b.n	8009896 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d103      	bne.n	8009886 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2204      	movs	r2, #4
 8009882:	771a      	strb	r2, [r3, #28]
 8009884:	e007      	b.n	8009896 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	d102      	bne.n	8009896 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2208      	movs	r2, #8
 8009894:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7ff ff18 	bl	80096cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	771a      	strb	r2, [r3, #28]
}
 80098a2:	bf00      	nop
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a42      	ldr	r2, [pc, #264]	@ (80099c8 <TIM_Base_SetConfig+0x11c>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d00f      	beq.n	80098e4 <TIM_Base_SetConfig+0x38>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ca:	d00b      	beq.n	80098e4 <TIM_Base_SetConfig+0x38>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a3f      	ldr	r2, [pc, #252]	@ (80099cc <TIM_Base_SetConfig+0x120>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d007      	beq.n	80098e4 <TIM_Base_SetConfig+0x38>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a3e      	ldr	r2, [pc, #248]	@ (80099d0 <TIM_Base_SetConfig+0x124>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d003      	beq.n	80098e4 <TIM_Base_SetConfig+0x38>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a3d      	ldr	r2, [pc, #244]	@ (80099d4 <TIM_Base_SetConfig+0x128>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d108      	bne.n	80098f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a33      	ldr	r2, [pc, #204]	@ (80099c8 <TIM_Base_SetConfig+0x11c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d01b      	beq.n	8009936 <TIM_Base_SetConfig+0x8a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009904:	d017      	beq.n	8009936 <TIM_Base_SetConfig+0x8a>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a30      	ldr	r2, [pc, #192]	@ (80099cc <TIM_Base_SetConfig+0x120>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d013      	beq.n	8009936 <TIM_Base_SetConfig+0x8a>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a2f      	ldr	r2, [pc, #188]	@ (80099d0 <TIM_Base_SetConfig+0x124>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d00f      	beq.n	8009936 <TIM_Base_SetConfig+0x8a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a2e      	ldr	r2, [pc, #184]	@ (80099d4 <TIM_Base_SetConfig+0x128>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d00b      	beq.n	8009936 <TIM_Base_SetConfig+0x8a>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a2d      	ldr	r2, [pc, #180]	@ (80099d8 <TIM_Base_SetConfig+0x12c>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d007      	beq.n	8009936 <TIM_Base_SetConfig+0x8a>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a2c      	ldr	r2, [pc, #176]	@ (80099dc <TIM_Base_SetConfig+0x130>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d003      	beq.n	8009936 <TIM_Base_SetConfig+0x8a>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a2b      	ldr	r2, [pc, #172]	@ (80099e0 <TIM_Base_SetConfig+0x134>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d108      	bne.n	8009948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800993c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	4313      	orrs	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	4313      	orrs	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	689a      	ldr	r2, [r3, #8]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a16      	ldr	r2, [pc, #88]	@ (80099c8 <TIM_Base_SetConfig+0x11c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00f      	beq.n	8009994 <TIM_Base_SetConfig+0xe8>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a17      	ldr	r2, [pc, #92]	@ (80099d4 <TIM_Base_SetConfig+0x128>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d00b      	beq.n	8009994 <TIM_Base_SetConfig+0xe8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a16      	ldr	r2, [pc, #88]	@ (80099d8 <TIM_Base_SetConfig+0x12c>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d007      	beq.n	8009994 <TIM_Base_SetConfig+0xe8>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a15      	ldr	r2, [pc, #84]	@ (80099dc <TIM_Base_SetConfig+0x130>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d003      	beq.n	8009994 <TIM_Base_SetConfig+0xe8>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a14      	ldr	r2, [pc, #80]	@ (80099e0 <TIM_Base_SetConfig+0x134>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d103      	bne.n	800999c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	691a      	ldr	r2, [r3, #16]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d105      	bne.n	80099ba <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f023 0201 	bic.w	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	611a      	str	r2, [r3, #16]
  }
}
 80099ba:	bf00      	nop
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	40012c00 	.word	0x40012c00
 80099cc:	40000400 	.word	0x40000400
 80099d0:	40000800 	.word	0x40000800
 80099d4:	40013400 	.word	0x40013400
 80099d8:	40014000 	.word	0x40014000
 80099dc:	40014400 	.word	0x40014400
 80099e0:	40014800 	.word	0x40014800

080099e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	f023 0201 	bic.w	r2, r3, #1
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0303 	bic.w	r3, r3, #3
 8009a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f023 0302 	bic.w	r3, r3, #2
 8009a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8009af0 <TIM_OC1_SetConfig+0x10c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d00f      	beq.n	8009a64 <TIM_OC1_SetConfig+0x80>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a2b      	ldr	r2, [pc, #172]	@ (8009af4 <TIM_OC1_SetConfig+0x110>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d00b      	beq.n	8009a64 <TIM_OC1_SetConfig+0x80>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8009af8 <TIM_OC1_SetConfig+0x114>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d007      	beq.n	8009a64 <TIM_OC1_SetConfig+0x80>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a29      	ldr	r2, [pc, #164]	@ (8009afc <TIM_OC1_SetConfig+0x118>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d003      	beq.n	8009a64 <TIM_OC1_SetConfig+0x80>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a28      	ldr	r2, [pc, #160]	@ (8009b00 <TIM_OC1_SetConfig+0x11c>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d10c      	bne.n	8009a7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f023 0308 	bic.w	r3, r3, #8
 8009a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f023 0304 	bic.w	r3, r3, #4
 8009a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a1b      	ldr	r2, [pc, #108]	@ (8009af0 <TIM_OC1_SetConfig+0x10c>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00f      	beq.n	8009aa6 <TIM_OC1_SetConfig+0xc2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a1a      	ldr	r2, [pc, #104]	@ (8009af4 <TIM_OC1_SetConfig+0x110>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d00b      	beq.n	8009aa6 <TIM_OC1_SetConfig+0xc2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a19      	ldr	r2, [pc, #100]	@ (8009af8 <TIM_OC1_SetConfig+0x114>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d007      	beq.n	8009aa6 <TIM_OC1_SetConfig+0xc2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a18      	ldr	r2, [pc, #96]	@ (8009afc <TIM_OC1_SetConfig+0x118>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d003      	beq.n	8009aa6 <TIM_OC1_SetConfig+0xc2>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a17      	ldr	r2, [pc, #92]	@ (8009b00 <TIM_OC1_SetConfig+0x11c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d111      	bne.n	8009aca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	621a      	str	r2, [r3, #32]
}
 8009ae4:	bf00      	nop
 8009ae6:	371c      	adds	r7, #28
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	40012c00 	.word	0x40012c00
 8009af4:	40013400 	.word	0x40013400
 8009af8:	40014000 	.word	0x40014000
 8009afc:	40014400 	.word	0x40014400
 8009b00:	40014800 	.word	0x40014800

08009b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	f023 0210 	bic.w	r2, r3, #16
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	021b      	lsls	r3, r3, #8
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f023 0320 	bic.w	r3, r3, #32
 8009b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	011b      	lsls	r3, r3, #4
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a28      	ldr	r2, [pc, #160]	@ (8009c04 <TIM_OC2_SetConfig+0x100>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d003      	beq.n	8009b70 <TIM_OC2_SetConfig+0x6c>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a27      	ldr	r2, [pc, #156]	@ (8009c08 <TIM_OC2_SetConfig+0x104>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d10d      	bne.n	8009b8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8009c04 <TIM_OC2_SetConfig+0x100>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d00f      	beq.n	8009bb4 <TIM_OC2_SetConfig+0xb0>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a1c      	ldr	r2, [pc, #112]	@ (8009c08 <TIM_OC2_SetConfig+0x104>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d00b      	beq.n	8009bb4 <TIM_OC2_SetConfig+0xb0>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8009c0c <TIM_OC2_SetConfig+0x108>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d007      	beq.n	8009bb4 <TIM_OC2_SetConfig+0xb0>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8009c10 <TIM_OC2_SetConfig+0x10c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d003      	beq.n	8009bb4 <TIM_OC2_SetConfig+0xb0>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a19      	ldr	r2, [pc, #100]	@ (8009c14 <TIM_OC2_SetConfig+0x110>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d113      	bne.n	8009bdc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	621a      	str	r2, [r3, #32]
}
 8009bf6:	bf00      	nop
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	40012c00 	.word	0x40012c00
 8009c08:	40013400 	.word	0x40013400
 8009c0c:	40014000 	.word	0x40014000
 8009c10:	40014400 	.word	0x40014400
 8009c14:	40014800 	.word	0x40014800

08009c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f023 0303 	bic.w	r3, r3, #3
 8009c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a27      	ldr	r2, [pc, #156]	@ (8009d14 <TIM_OC3_SetConfig+0xfc>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d003      	beq.n	8009c82 <TIM_OC3_SetConfig+0x6a>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a26      	ldr	r2, [pc, #152]	@ (8009d18 <TIM_OC3_SetConfig+0x100>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d10d      	bne.n	8009c9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	021b      	lsls	r3, r3, #8
 8009c90:	697a      	ldr	r2, [r7, #20]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8009d14 <TIM_OC3_SetConfig+0xfc>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00f      	beq.n	8009cc6 <TIM_OC3_SetConfig+0xae>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8009d18 <TIM_OC3_SetConfig+0x100>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d00b      	beq.n	8009cc6 <TIM_OC3_SetConfig+0xae>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8009d1c <TIM_OC3_SetConfig+0x104>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d007      	beq.n	8009cc6 <TIM_OC3_SetConfig+0xae>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a19      	ldr	r2, [pc, #100]	@ (8009d20 <TIM_OC3_SetConfig+0x108>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d003      	beq.n	8009cc6 <TIM_OC3_SetConfig+0xae>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a18      	ldr	r2, [pc, #96]	@ (8009d24 <TIM_OC3_SetConfig+0x10c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d113      	bne.n	8009cee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	011b      	lsls	r3, r3, #4
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	621a      	str	r2, [r3, #32]
}
 8009d08:	bf00      	nop
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	40012c00 	.word	0x40012c00
 8009d18:	40013400 	.word	0x40013400
 8009d1c:	40014000 	.word	0x40014000
 8009d20:	40014400 	.word	0x40014400
 8009d24:	40014800 	.word	0x40014800

08009d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	021b      	lsls	r3, r3, #8
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	031b      	lsls	r3, r3, #12
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a28      	ldr	r2, [pc, #160]	@ (8009e28 <TIM_OC4_SetConfig+0x100>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d003      	beq.n	8009d94 <TIM_OC4_SetConfig+0x6c>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a27      	ldr	r2, [pc, #156]	@ (8009e2c <TIM_OC4_SetConfig+0x104>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d10d      	bne.n	8009db0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	031b      	lsls	r3, r3, #12
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009dae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a1d      	ldr	r2, [pc, #116]	@ (8009e28 <TIM_OC4_SetConfig+0x100>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00f      	beq.n	8009dd8 <TIM_OC4_SetConfig+0xb0>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a1c      	ldr	r2, [pc, #112]	@ (8009e2c <TIM_OC4_SetConfig+0x104>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d00b      	beq.n	8009dd8 <TIM_OC4_SetConfig+0xb0>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8009e30 <TIM_OC4_SetConfig+0x108>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d007      	beq.n	8009dd8 <TIM_OC4_SetConfig+0xb0>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a1a      	ldr	r2, [pc, #104]	@ (8009e34 <TIM_OC4_SetConfig+0x10c>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d003      	beq.n	8009dd8 <TIM_OC4_SetConfig+0xb0>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a19      	ldr	r2, [pc, #100]	@ (8009e38 <TIM_OC4_SetConfig+0x110>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d113      	bne.n	8009e00 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009dde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009de6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	019b      	lsls	r3, r3, #6
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	019b      	lsls	r3, r3, #6
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	621a      	str	r2, [r3, #32]
}
 8009e1a:	bf00      	nop
 8009e1c:	371c      	adds	r7, #28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	40012c00 	.word	0x40012c00
 8009e2c:	40013400 	.word	0x40013400
 8009e30:	40014000 	.word	0x40014000
 8009e34:	40014400 	.word	0x40014400
 8009e38:	40014800 	.word	0x40014800

08009e3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	041b      	lsls	r3, r3, #16
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a17      	ldr	r2, [pc, #92]	@ (8009ef0 <TIM_OC5_SetConfig+0xb4>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d00f      	beq.n	8009eb6 <TIM_OC5_SetConfig+0x7a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a16      	ldr	r2, [pc, #88]	@ (8009ef4 <TIM_OC5_SetConfig+0xb8>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d00b      	beq.n	8009eb6 <TIM_OC5_SetConfig+0x7a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a15      	ldr	r2, [pc, #84]	@ (8009ef8 <TIM_OC5_SetConfig+0xbc>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d007      	beq.n	8009eb6 <TIM_OC5_SetConfig+0x7a>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a14      	ldr	r2, [pc, #80]	@ (8009efc <TIM_OC5_SetConfig+0xc0>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d003      	beq.n	8009eb6 <TIM_OC5_SetConfig+0x7a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a13      	ldr	r2, [pc, #76]	@ (8009f00 <TIM_OC5_SetConfig+0xc4>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d109      	bne.n	8009eca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	621a      	str	r2, [r3, #32]
}
 8009ee4:	bf00      	nop
 8009ee6:	371c      	adds	r7, #28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	40012c00 	.word	0x40012c00
 8009ef4:	40013400 	.word	0x40013400
 8009ef8:	40014000 	.word	0x40014000
 8009efc:	40014400 	.word	0x40014400
 8009f00:	40014800 	.word	0x40014800

08009f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	021b      	lsls	r3, r3, #8
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	051b      	lsls	r3, r3, #20
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a18      	ldr	r2, [pc, #96]	@ (8009fbc <TIM_OC6_SetConfig+0xb8>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d00f      	beq.n	8009f80 <TIM_OC6_SetConfig+0x7c>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a17      	ldr	r2, [pc, #92]	@ (8009fc0 <TIM_OC6_SetConfig+0xbc>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00b      	beq.n	8009f80 <TIM_OC6_SetConfig+0x7c>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a16      	ldr	r2, [pc, #88]	@ (8009fc4 <TIM_OC6_SetConfig+0xc0>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d007      	beq.n	8009f80 <TIM_OC6_SetConfig+0x7c>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a15      	ldr	r2, [pc, #84]	@ (8009fc8 <TIM_OC6_SetConfig+0xc4>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d003      	beq.n	8009f80 <TIM_OC6_SetConfig+0x7c>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a14      	ldr	r2, [pc, #80]	@ (8009fcc <TIM_OC6_SetConfig+0xc8>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d109      	bne.n	8009f94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	029b      	lsls	r3, r3, #10
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	621a      	str	r2, [r3, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	40012c00 	.word	0x40012c00
 8009fc0:	40013400 	.word	0x40013400
 8009fc4:	40014000 	.word	0x40014000
 8009fc8:	40014400 	.word	0x40014400
 8009fcc:	40014800 	.word	0x40014800

08009fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f023 0201 	bic.w	r2, r3, #1
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	011b      	lsls	r3, r3, #4
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	4313      	orrs	r3, r2
 800a004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f023 030a 	bic.w	r3, r3, #10
 800a00c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	4313      	orrs	r3, r2
 800a014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	621a      	str	r2, [r3, #32]
}
 800a022:	bf00      	nop
 800a024:	371c      	adds	r7, #28
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a02e:	b480      	push	{r7}
 800a030:	b087      	sub	sp, #28
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6a1b      	ldr	r3, [r3, #32]
 800a044:	f023 0210 	bic.w	r2, r3, #16
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a058:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	031b      	lsls	r3, r3, #12
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	4313      	orrs	r3, r2
 800a062:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a06a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	621a      	str	r2, [r3, #32]
}
 800a082:	bf00      	nop
 800a084:	371c      	adds	r7, #28
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a08e:	b480      	push	{r7}
 800a090:	b085      	sub	sp, #20
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a0a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f043 0307 	orr.w	r3, r3, #7
 800a0b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	609a      	str	r2, [r3, #8]
}
 800a0bc:	bf00      	nop
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	021a      	lsls	r2, r3, #8
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	609a      	str	r2, [r3, #8]
}
 800a0fc:	bf00      	nop
 800a0fe:	371c      	adds	r7, #28
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f003 031f 	and.w	r3, r3, #31
 800a11a:	2201      	movs	r2, #1
 800a11c:	fa02 f303 	lsl.w	r3, r2, r3
 800a120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a1a      	ldr	r2, [r3, #32]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	43db      	mvns	r3, r3
 800a12a:	401a      	ands	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a1a      	ldr	r2, [r3, #32]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f003 031f 	and.w	r3, r3, #31
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	fa01 f303 	lsl.w	r3, r1, r3
 800a140:	431a      	orrs	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	621a      	str	r2, [r3, #32]
}
 800a146:	bf00      	nop
 800a148:	371c      	adds	r7, #28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
	...

0800a154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a164:	2b01      	cmp	r3, #1
 800a166:	d101      	bne.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a168:	2302      	movs	r3, #2
 800a16a:	e065      	b.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a2c      	ldr	r2, [pc, #176]	@ (800a244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d004      	beq.n	800a1a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a2b      	ldr	r2, [pc, #172]	@ (800a248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d108      	bne.n	800a1b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a1a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a1b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a1b      	ldr	r2, [pc, #108]	@ (800a244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d018      	beq.n	800a20c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1e2:	d013      	beq.n	800a20c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a18      	ldr	r2, [pc, #96]	@ (800a24c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00e      	beq.n	800a20c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a17      	ldr	r2, [pc, #92]	@ (800a250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d009      	beq.n	800a20c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a12      	ldr	r2, [pc, #72]	@ (800a248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d004      	beq.n	800a20c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a13      	ldr	r2, [pc, #76]	@ (800a254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d10c      	bne.n	800a226 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a212:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	40012c00 	.word	0x40012c00
 800a248:	40013400 	.word	0x40013400
 800a24c:	40000400 	.word	0x40000400
 800a250:	40000800 	.word	0x40000800
 800a254:	40014000 	.word	0x40014000

0800a258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e042      	b.n	800a37c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d106      	bne.n	800a30e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7f9 fdfd 	bl	8003f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2224      	movs	r2, #36	@ 0x24
 800a312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f022 0201 	bic.w	r2, r2, #1
 800a324:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f001 f8d2 	bl	800b4d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fe03 	bl	800af40 <UART_SetConfig>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e01b      	b.n	800a37c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689a      	ldr	r2, [r3, #8]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f042 0201 	orr.w	r2, r2, #1
 800a372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f001 f951 	bl	800b61c <UART_CheckIdleState>
 800a37a:	4603      	mov	r3, r0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08a      	sub	sp, #40	@ 0x28
 800a388:	af02      	add	r7, sp, #8
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	603b      	str	r3, [r7, #0]
 800a390:	4613      	mov	r3, r2
 800a392:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a39a:	2b20      	cmp	r3, #32
 800a39c:	d17b      	bne.n	800a496 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <HAL_UART_Transmit+0x26>
 800a3a4:	88fb      	ldrh	r3, [r7, #6]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e074      	b.n	800a498 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2221      	movs	r2, #33	@ 0x21
 800a3ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3be:	f7f9 fff9 	bl	80043b4 <HAL_GetTick>
 800a3c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	88fa      	ldrh	r2, [r7, #6]
 800a3c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	88fa      	ldrh	r2, [r7, #6]
 800a3d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3dc:	d108      	bne.n	800a3f0 <HAL_UART_Transmit+0x6c>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d104      	bne.n	800a3f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	61bb      	str	r3, [r7, #24]
 800a3ee:	e003      	b.n	800a3f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a3f8:	e030      	b.n	800a45c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2200      	movs	r2, #0
 800a402:	2180      	movs	r1, #128	@ 0x80
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f001 f9b3 	bl	800b770 <UART_WaitOnFlagUntilTimeout>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d005      	beq.n	800a41c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2220      	movs	r2, #32
 800a414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e03d      	b.n	800a498 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10b      	bne.n	800a43a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a430:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	3302      	adds	r3, #2
 800a436:	61bb      	str	r3, [r7, #24]
 800a438:	e007      	b.n	800a44a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	781a      	ldrb	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	3301      	adds	r3, #1
 800a448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a450:	b29b      	uxth	r3, r3
 800a452:	3b01      	subs	r3, #1
 800a454:	b29a      	uxth	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a462:	b29b      	uxth	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1c8      	bne.n	800a3fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	2200      	movs	r2, #0
 800a470:	2140      	movs	r1, #64	@ 0x40
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f001 f97c 	bl	800b770 <UART_WaitOnFlagUntilTimeout>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2220      	movs	r2, #32
 800a482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e006      	b.n	800a498 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2220      	movs	r2, #32
 800a48e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	e000      	b.n	800a498 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a496:	2302      	movs	r3, #2
  }
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3720      	adds	r7, #32
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08a      	sub	sp, #40	@ 0x28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4b4:	2b20      	cmp	r3, #32
 800a4b6:	d167      	bne.n	800a588 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d002      	beq.n	800a4c4 <HAL_UART_Transmit_DMA+0x24>
 800a4be:	88fb      	ldrh	r3, [r7, #6]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e060      	b.n	800a58a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	88fa      	ldrh	r2, [r7, #6]
 800a4d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	88fa      	ldrh	r2, [r7, #6]
 800a4da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2221      	movs	r2, #33	@ 0x21
 800a4ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d028      	beq.n	800a548 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4fa:	4a26      	ldr	r2, [pc, #152]	@ (800a594 <HAL_UART_Transmit_DMA+0xf4>)
 800a4fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a502:	4a25      	ldr	r2, [pc, #148]	@ (800a598 <HAL_UART_Transmit_DMA+0xf8>)
 800a504:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a50a:	4a24      	ldr	r2, [pc, #144]	@ (800a59c <HAL_UART_Transmit_DMA+0xfc>)
 800a50c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a512:	2200      	movs	r2, #0
 800a514:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a51e:	4619      	mov	r1, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3328      	adds	r3, #40	@ 0x28
 800a526:	461a      	mov	r2, r3
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	f7fb fddf 	bl	80060ec <HAL_DMA_Start_IT>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d009      	beq.n	800a548 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2210      	movs	r2, #16
 800a538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e020      	b.n	800a58a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2240      	movs	r2, #64	@ 0x40
 800a54e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3308      	adds	r3, #8
 800a556:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	e853 3f00 	ldrex	r3, [r3]
 800a55e:	613b      	str	r3, [r7, #16]
   return(result);
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a566:	627b      	str	r3, [r7, #36]	@ 0x24
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3308      	adds	r3, #8
 800a56e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a570:	623a      	str	r2, [r7, #32]
 800a572:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a574:	69f9      	ldr	r1, [r7, #28]
 800a576:	6a3a      	ldr	r2, [r7, #32]
 800a578:	e841 2300 	strex	r3, r2, [r1]
 800a57c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e5      	bne.n	800a550 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	e000      	b.n	800a58a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a588:	2302      	movs	r3, #2
  }
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3728      	adds	r7, #40	@ 0x28
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	0800bae7 	.word	0x0800bae7
 800a598:	0800bb81 	.word	0x0800bb81
 800a59c:	0800bd07 	.word	0x0800bd07

0800a5a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	@ 0x28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	d137      	bne.n	800a628 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <HAL_UART_Receive_DMA+0x24>
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e030      	b.n	800a62a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a18      	ldr	r2, [pc, #96]	@ (800a634 <HAL_UART_Receive_DMA+0x94>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d01f      	beq.n	800a618 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d018      	beq.n	800a618 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a604:	623b      	str	r3, [r7, #32]
 800a606:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	69f9      	ldr	r1, [r7, #28]
 800a60a:	6a3a      	ldr	r2, [r7, #32]
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	61bb      	str	r3, [r7, #24]
   return(result);
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e6      	bne.n	800a5e6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a618:	88fb      	ldrh	r3, [r7, #6]
 800a61a:	461a      	mov	r2, r3
 800a61c:	68b9      	ldr	r1, [r7, #8]
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f001 f914 	bl	800b84c <UART_Start_Receive_DMA>
 800a624:	4603      	mov	r3, r0
 800a626:	e000      	b.n	800a62a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a628:	2302      	movs	r3, #2
  }
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3728      	adds	r7, #40	@ 0x28
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	40008000 	.word	0x40008000

0800a638 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b0a0      	sub	sp, #128	@ 0x80
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a64e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a650:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800a654:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a65e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a660:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a664:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a666:	e841 2300 	strex	r3, r2, [r1]
 800a66a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a66c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e6      	bne.n	800a640 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3308      	adds	r3, #8
 800a678:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a684:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800a688:	f023 0301 	bic.w	r3, r3, #1
 800a68c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3308      	adds	r3, #8
 800a694:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a696:	657a      	str	r2, [r7, #84]	@ 0x54
 800a698:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a69c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a69e:	e841 2300 	strex	r3, r2, [r1]
 800a6a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a6a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e3      	bne.n	800a672 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d118      	bne.n	800a6e4 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ba:	e853 3f00 	ldrex	r3, [r3]
 800a6be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c2:	f023 0310 	bic.w	r3, r3, #16
 800a6c6:	677b      	str	r3, [r7, #116]	@ 0x74
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e6      	bne.n	800a6b2 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ee:	2b80      	cmp	r3, #128	@ 0x80
 800a6f0:	d137      	bne.n	800a762 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	61fb      	str	r3, [r7, #28]
   return(result);
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a708:	673b      	str	r3, [r7, #112]	@ 0x70
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e5      	bne.n	800a6f2 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d019      	beq.n	800a762 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a732:	2200      	movs	r2, #0
 800a734:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fb fd51 	bl	80061e2 <HAL_DMA_Abort>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00d      	beq.n	800a762 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fb feb8 	bl	80064c0 <HAL_DMA_GetError>
 800a750:	4603      	mov	r3, r0
 800a752:	2b20      	cmp	r3, #32
 800a754:	d105      	bne.n	800a762 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2210      	movs	r2, #16
 800a75a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e073      	b.n	800a84a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a76c:	2b40      	cmp	r3, #64	@ 0x40
 800a76e:	d13b      	bne.n	800a7e8 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3308      	adds	r3, #8
 800a776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	e853 3f00 	ldrex	r3, [r3]
 800a77e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a786:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	3308      	adds	r3, #8
 800a78e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a790:	61ba      	str	r2, [r7, #24]
 800a792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a794:	6979      	ldr	r1, [r7, #20]
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	e841 2300 	strex	r3, r2, [r1]
 800a79c:	613b      	str	r3, [r7, #16]
   return(result);
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1e5      	bne.n	800a770 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d01c      	beq.n	800a7e8 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fb fd0f 	bl	80061e2 <HAL_DMA_Abort>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00e      	beq.n	800a7e8 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fb fe75 	bl	80064c0 <HAL_DMA_GetError>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b20      	cmp	r3, #32
 800a7da:	d105      	bne.n	800a7e8 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2210      	movs	r2, #16
 800a7e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	e030      	b.n	800a84a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	220f      	movs	r2, #15
 800a7fe:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a808:	d107      	bne.n	800a81a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	699a      	ldr	r2, [r3, #24]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f042 0210 	orr.w	r2, r2, #16
 800a818:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	699a      	ldr	r2, [r3, #24]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f042 0208 	orr.w	r2, r2, #8
 800a828:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2220      	movs	r2, #32
 800a836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3780      	adds	r7, #128	@ 0x80
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
	...

0800a854 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b0ba      	sub	sp, #232	@ 0xe8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a87a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a87e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a882:	4013      	ands	r3, r2
 800a884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d11b      	bne.n	800a8c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d015      	beq.n	800a8c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a89c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8a0:	f003 0320 	and.w	r3, r3, #32
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d105      	bne.n	800a8b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d009      	beq.n	800a8c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 8300 	beq.w	800aebe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	4798      	blx	r3
      }
      return;
 800a8c6:	e2fa      	b.n	800aebe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a8c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 8123 	beq.w	800ab18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a8d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a8d6:	4b8d      	ldr	r3, [pc, #564]	@ (800ab0c <HAL_UART_IRQHandler+0x2b8>)
 800a8d8:	4013      	ands	r3, r2
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d106      	bne.n	800a8ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a8de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a8e2:	4b8b      	ldr	r3, [pc, #556]	@ (800ab10 <HAL_UART_IRQHandler+0x2bc>)
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 8116 	beq.w	800ab18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d011      	beq.n	800a91c <HAL_UART_IRQHandler+0xc8>
 800a8f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2201      	movs	r2, #1
 800a90a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a912:	f043 0201 	orr.w	r2, r3, #1
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a920:	f003 0302 	and.w	r3, r3, #2
 800a924:	2b00      	cmp	r3, #0
 800a926:	d011      	beq.n	800a94c <HAL_UART_IRQHandler+0xf8>
 800a928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00b      	beq.n	800a94c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2202      	movs	r2, #2
 800a93a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a942:	f043 0204 	orr.w	r2, r3, #4
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d011      	beq.n	800a97c <HAL_UART_IRQHandler+0x128>
 800a958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00b      	beq.n	800a97c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2204      	movs	r2, #4
 800a96a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a972:	f043 0202 	orr.w	r2, r3, #2
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a97c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a980:	f003 0308 	and.w	r3, r3, #8
 800a984:	2b00      	cmp	r3, #0
 800a986:	d017      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a98c:	f003 0320 	and.w	r3, r3, #32
 800a990:	2b00      	cmp	r3, #0
 800a992:	d105      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a994:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a998:	4b5c      	ldr	r3, [pc, #368]	@ (800ab0c <HAL_UART_IRQHandler+0x2b8>)
 800a99a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00b      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2208      	movs	r2, #8
 800a9a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ae:	f043 0208 	orr.w	r2, r3, #8
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d012      	beq.n	800a9ea <HAL_UART_IRQHandler+0x196>
 800a9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00c      	beq.n	800a9ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9e0:	f043 0220 	orr.w	r2, r3, #32
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 8266 	beq.w	800aec2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9fa:	f003 0320 	and.w	r3, r3, #32
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d013      	beq.n	800aa2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d105      	bne.n	800aa1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d007      	beq.n	800aa2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa3e:	2b40      	cmp	r3, #64	@ 0x40
 800aa40:	d005      	beq.n	800aa4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d054      	beq.n	800aaf8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 ffe3 	bl	800ba1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa5e:	2b40      	cmp	r3, #64	@ 0x40
 800aa60:	d146      	bne.n	800aaf0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3308      	adds	r3, #8
 800aa68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa70:	e853 3f00 	ldrex	r3, [r3]
 800aa74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800aa78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aa7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3308      	adds	r3, #8
 800aa8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aa8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800aa92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aa9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aaa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1d9      	bne.n	800aa62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d017      	beq.n	800aae8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aabe:	4a15      	ldr	r2, [pc, #84]	@ (800ab14 <HAL_UART_IRQHandler+0x2c0>)
 800aac0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fb fbe3 	bl	8006294 <HAL_DMA_Abort_IT>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d019      	beq.n	800ab08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aae2:	4610      	mov	r0, r2
 800aae4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aae6:	e00f      	b.n	800ab08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fa13 	bl	800af14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaee:	e00b      	b.n	800ab08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fa0f 	bl	800af14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaf6:	e007      	b.n	800ab08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fa0b 	bl	800af14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ab06:	e1dc      	b.n	800aec2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab08:	bf00      	nop
    return;
 800ab0a:	e1da      	b.n	800aec2 <HAL_UART_IRQHandler+0x66e>
 800ab0c:	10000001 	.word	0x10000001
 800ab10:	04000120 	.word	0x04000120
 800ab14:	0800bd87 	.word	0x0800bd87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	f040 8170 	bne.w	800ae02 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab26:	f003 0310 	and.w	r3, r3, #16
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8169 	beq.w	800ae02 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab34:	f003 0310 	and.w	r3, r3, #16
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f000 8162 	beq.w	800ae02 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2210      	movs	r2, #16
 800ab44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab50:	2b40      	cmp	r3, #64	@ 0x40
 800ab52:	f040 80d8 	bne.w	800ad06 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 80af 	beq.w	800accc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	f080 80a7 	bcs.w	800accc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 0320 	and.w	r3, r3, #32
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f040 8087 	bne.w	800acaa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aba8:	e853 3f00 	ldrex	r3, [r3]
 800abac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800abb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800abb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800abc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800abd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800abd6:	e841 2300 	strex	r3, r2, [r1]
 800abda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800abde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1da      	bne.n	800ab9c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3308      	adds	r3, #8
 800abec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800abf0:	e853 3f00 	ldrex	r3, [r3]
 800abf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800abf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abf8:	f023 0301 	bic.w	r3, r3, #1
 800abfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	3308      	adds	r3, #8
 800ac06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ac0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ac0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ac12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ac1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e1      	bne.n	800abe6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3308      	adds	r3, #8
 800ac28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ac32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3308      	adds	r3, #8
 800ac42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ac46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ac48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ac4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac4e:	e841 2300 	strex	r3, r2, [r1]
 800ac52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ac54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1e3      	bne.n	800ac22 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac70:	e853 3f00 	ldrex	r3, [r3]
 800ac74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac78:	f023 0310 	bic.w	r3, r3, #16
 800ac7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac92:	e841 2300 	strex	r3, r2, [r1]
 800ac96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1e4      	bne.n	800ac68 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fb fa9c 	bl	80061e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2202      	movs	r2, #2
 800acae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	4619      	mov	r1, r3
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f92f 	bl	800af28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800acca:	e0fc      	b.n	800aec6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acd6:	429a      	cmp	r2, r3
 800acd8:	f040 80f5 	bne.w	800aec6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0320 	and.w	r3, r3, #32
 800acea:	2b20      	cmp	r3, #32
 800acec:	f040 80eb 	bne.w	800aec6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2202      	movs	r2, #2
 800acf4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f912 	bl	800af28 <HAL_UARTEx_RxEventCallback>
      return;
 800ad04:	e0df      	b.n	800aec6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 80d1 	beq.w	800aeca <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ad28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 80cc 	beq.w	800aeca <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3a:	e853 3f00 	ldrex	r3, [r3]
 800ad3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad54:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad5c:	e841 2300 	strex	r3, r2, [r1]
 800ad60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1e4      	bne.n	800ad32 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3308      	adds	r3, #8
 800ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	623b      	str	r3, [r7, #32]
   return(result);
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad7e:	f023 0301 	bic.w	r3, r3, #1
 800ad82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ad90:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad98:	e841 2300 	strex	r3, r2, [r1]
 800ad9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1e1      	bne.n	800ad68 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2220      	movs	r2, #32
 800ada8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f023 0310 	bic.w	r3, r3, #16
 800adcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	461a      	mov	r2, r3
 800add6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adda:	61fb      	str	r3, [r7, #28]
 800addc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adde:	69b9      	ldr	r1, [r7, #24]
 800ade0:	69fa      	ldr	r2, [r7, #28]
 800ade2:	e841 2300 	strex	r3, r2, [r1]
 800ade6:	617b      	str	r3, [r7, #20]
   return(result);
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1e4      	bne.n	800adb8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2202      	movs	r2, #2
 800adf2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f894 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae00:	e063      	b.n	800aeca <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00e      	beq.n	800ae2c <HAL_UART_IRQHandler+0x5d8>
 800ae0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d008      	beq.n	800ae2c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ae22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 ffeb 	bl	800be00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae2a:	e051      	b.n	800aed0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d014      	beq.n	800ae62 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d105      	bne.n	800ae50 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d008      	beq.n	800ae62 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d03a      	beq.n	800aece <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
    }
    return;
 800ae60:	e035      	b.n	800aece <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d009      	beq.n	800ae82 <HAL_UART_IRQHandler+0x62e>
 800ae6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 ff95 	bl	800bdaa <UART_EndTransmit_IT>
    return;
 800ae80:	e026      	b.n	800aed0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ae82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d009      	beq.n	800aea2 <HAL_UART_IRQHandler+0x64e>
 800ae8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae92:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 ffc4 	bl	800be28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aea0:	e016      	b.n	800aed0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aea6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d010      	beq.n	800aed0 <HAL_UART_IRQHandler+0x67c>
 800aeae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da0c      	bge.n	800aed0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 ffac 	bl	800be14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aebc:	e008      	b.n	800aed0 <HAL_UART_IRQHandler+0x67c>
      return;
 800aebe:	bf00      	nop
 800aec0:	e006      	b.n	800aed0 <HAL_UART_IRQHandler+0x67c>
    return;
 800aec2:	bf00      	nop
 800aec4:	e004      	b.n	800aed0 <HAL_UART_IRQHandler+0x67c>
      return;
 800aec6:	bf00      	nop
 800aec8:	e002      	b.n	800aed0 <HAL_UART_IRQHandler+0x67c>
      return;
 800aeca:	bf00      	nop
 800aecc:	e000      	b.n	800aed0 <HAL_UART_IRQHandler+0x67c>
    return;
 800aece:	bf00      	nop
  }
}
 800aed0:	37e8      	adds	r7, #232	@ 0xe8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop

0800aed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af44:	b08c      	sub	sp, #48	@ 0x30
 800af46:	af00      	add	r7, sp, #0
 800af48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	689a      	ldr	r2, [r3, #8]
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	431a      	orrs	r2, r3
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	431a      	orrs	r2, r3
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	69db      	ldr	r3, [r3, #28]
 800af64:	4313      	orrs	r3, r2
 800af66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	4bab      	ldr	r3, [pc, #684]	@ (800b21c <UART_SetConfig+0x2dc>)
 800af70:	4013      	ands	r3, r2
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	6812      	ldr	r2, [r2, #0]
 800af76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af78:	430b      	orrs	r3, r1
 800af7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	68da      	ldr	r2, [r3, #12]
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	430a      	orrs	r2, r1
 800af90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4aa0      	ldr	r2, [pc, #640]	@ (800b220 <UART_SetConfig+0x2e0>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d004      	beq.n	800afac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afa8:	4313      	orrs	r3, r2
 800afaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800afb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	6812      	ldr	r2, [r2, #0]
 800afbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afc0:	430b      	orrs	r3, r1
 800afc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afca:	f023 010f 	bic.w	r1, r3, #15
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	430a      	orrs	r2, r1
 800afd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a91      	ldr	r2, [pc, #580]	@ (800b224 <UART_SetConfig+0x2e4>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d125      	bne.n	800b030 <UART_SetConfig+0xf0>
 800afe4:	4b90      	ldr	r3, [pc, #576]	@ (800b228 <UART_SetConfig+0x2e8>)
 800afe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afea:	f003 0303 	and.w	r3, r3, #3
 800afee:	2b03      	cmp	r3, #3
 800aff0:	d81a      	bhi.n	800b028 <UART_SetConfig+0xe8>
 800aff2:	a201      	add	r2, pc, #4	@ (adr r2, 800aff8 <UART_SetConfig+0xb8>)
 800aff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff8:	0800b009 	.word	0x0800b009
 800affc:	0800b019 	.word	0x0800b019
 800b000:	0800b011 	.word	0x0800b011
 800b004:	0800b021 	.word	0x0800b021
 800b008:	2301      	movs	r3, #1
 800b00a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b00e:	e0d6      	b.n	800b1be <UART_SetConfig+0x27e>
 800b010:	2302      	movs	r3, #2
 800b012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b016:	e0d2      	b.n	800b1be <UART_SetConfig+0x27e>
 800b018:	2304      	movs	r3, #4
 800b01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b01e:	e0ce      	b.n	800b1be <UART_SetConfig+0x27e>
 800b020:	2308      	movs	r3, #8
 800b022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b026:	e0ca      	b.n	800b1be <UART_SetConfig+0x27e>
 800b028:	2310      	movs	r3, #16
 800b02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b02e:	e0c6      	b.n	800b1be <UART_SetConfig+0x27e>
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a7d      	ldr	r2, [pc, #500]	@ (800b22c <UART_SetConfig+0x2ec>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d138      	bne.n	800b0ac <UART_SetConfig+0x16c>
 800b03a:	4b7b      	ldr	r3, [pc, #492]	@ (800b228 <UART_SetConfig+0x2e8>)
 800b03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b040:	f003 030c 	and.w	r3, r3, #12
 800b044:	2b0c      	cmp	r3, #12
 800b046:	d82d      	bhi.n	800b0a4 <UART_SetConfig+0x164>
 800b048:	a201      	add	r2, pc, #4	@ (adr r2, 800b050 <UART_SetConfig+0x110>)
 800b04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04e:	bf00      	nop
 800b050:	0800b085 	.word	0x0800b085
 800b054:	0800b0a5 	.word	0x0800b0a5
 800b058:	0800b0a5 	.word	0x0800b0a5
 800b05c:	0800b0a5 	.word	0x0800b0a5
 800b060:	0800b095 	.word	0x0800b095
 800b064:	0800b0a5 	.word	0x0800b0a5
 800b068:	0800b0a5 	.word	0x0800b0a5
 800b06c:	0800b0a5 	.word	0x0800b0a5
 800b070:	0800b08d 	.word	0x0800b08d
 800b074:	0800b0a5 	.word	0x0800b0a5
 800b078:	0800b0a5 	.word	0x0800b0a5
 800b07c:	0800b0a5 	.word	0x0800b0a5
 800b080:	0800b09d 	.word	0x0800b09d
 800b084:	2300      	movs	r3, #0
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08a:	e098      	b.n	800b1be <UART_SetConfig+0x27e>
 800b08c:	2302      	movs	r3, #2
 800b08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b092:	e094      	b.n	800b1be <UART_SetConfig+0x27e>
 800b094:	2304      	movs	r3, #4
 800b096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b09a:	e090      	b.n	800b1be <UART_SetConfig+0x27e>
 800b09c:	2308      	movs	r3, #8
 800b09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0a2:	e08c      	b.n	800b1be <UART_SetConfig+0x27e>
 800b0a4:	2310      	movs	r3, #16
 800b0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0aa:	e088      	b.n	800b1be <UART_SetConfig+0x27e>
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a5f      	ldr	r2, [pc, #380]	@ (800b230 <UART_SetConfig+0x2f0>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d125      	bne.n	800b102 <UART_SetConfig+0x1c2>
 800b0b6:	4b5c      	ldr	r3, [pc, #368]	@ (800b228 <UART_SetConfig+0x2e8>)
 800b0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b0c0:	2b30      	cmp	r3, #48	@ 0x30
 800b0c2:	d016      	beq.n	800b0f2 <UART_SetConfig+0x1b2>
 800b0c4:	2b30      	cmp	r3, #48	@ 0x30
 800b0c6:	d818      	bhi.n	800b0fa <UART_SetConfig+0x1ba>
 800b0c8:	2b20      	cmp	r3, #32
 800b0ca:	d00a      	beq.n	800b0e2 <UART_SetConfig+0x1a2>
 800b0cc:	2b20      	cmp	r3, #32
 800b0ce:	d814      	bhi.n	800b0fa <UART_SetConfig+0x1ba>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <UART_SetConfig+0x19a>
 800b0d4:	2b10      	cmp	r3, #16
 800b0d6:	d008      	beq.n	800b0ea <UART_SetConfig+0x1aa>
 800b0d8:	e00f      	b.n	800b0fa <UART_SetConfig+0x1ba>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0e0:	e06d      	b.n	800b1be <UART_SetConfig+0x27e>
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0e8:	e069      	b.n	800b1be <UART_SetConfig+0x27e>
 800b0ea:	2304      	movs	r3, #4
 800b0ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0f0:	e065      	b.n	800b1be <UART_SetConfig+0x27e>
 800b0f2:	2308      	movs	r3, #8
 800b0f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0f8:	e061      	b.n	800b1be <UART_SetConfig+0x27e>
 800b0fa:	2310      	movs	r3, #16
 800b0fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b100:	e05d      	b.n	800b1be <UART_SetConfig+0x27e>
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a4b      	ldr	r2, [pc, #300]	@ (800b234 <UART_SetConfig+0x2f4>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d125      	bne.n	800b158 <UART_SetConfig+0x218>
 800b10c:	4b46      	ldr	r3, [pc, #280]	@ (800b228 <UART_SetConfig+0x2e8>)
 800b10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b112:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b116:	2bc0      	cmp	r3, #192	@ 0xc0
 800b118:	d016      	beq.n	800b148 <UART_SetConfig+0x208>
 800b11a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b11c:	d818      	bhi.n	800b150 <UART_SetConfig+0x210>
 800b11e:	2b80      	cmp	r3, #128	@ 0x80
 800b120:	d00a      	beq.n	800b138 <UART_SetConfig+0x1f8>
 800b122:	2b80      	cmp	r3, #128	@ 0x80
 800b124:	d814      	bhi.n	800b150 <UART_SetConfig+0x210>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <UART_SetConfig+0x1f0>
 800b12a:	2b40      	cmp	r3, #64	@ 0x40
 800b12c:	d008      	beq.n	800b140 <UART_SetConfig+0x200>
 800b12e:	e00f      	b.n	800b150 <UART_SetConfig+0x210>
 800b130:	2300      	movs	r3, #0
 800b132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b136:	e042      	b.n	800b1be <UART_SetConfig+0x27e>
 800b138:	2302      	movs	r3, #2
 800b13a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b13e:	e03e      	b.n	800b1be <UART_SetConfig+0x27e>
 800b140:	2304      	movs	r3, #4
 800b142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b146:	e03a      	b.n	800b1be <UART_SetConfig+0x27e>
 800b148:	2308      	movs	r3, #8
 800b14a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b14e:	e036      	b.n	800b1be <UART_SetConfig+0x27e>
 800b150:	2310      	movs	r3, #16
 800b152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b156:	e032      	b.n	800b1be <UART_SetConfig+0x27e>
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a30      	ldr	r2, [pc, #192]	@ (800b220 <UART_SetConfig+0x2e0>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d12a      	bne.n	800b1b8 <UART_SetConfig+0x278>
 800b162:	4b31      	ldr	r3, [pc, #196]	@ (800b228 <UART_SetConfig+0x2e8>)
 800b164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b168:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b16c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b170:	d01a      	beq.n	800b1a8 <UART_SetConfig+0x268>
 800b172:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b176:	d81b      	bhi.n	800b1b0 <UART_SetConfig+0x270>
 800b178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b17c:	d00c      	beq.n	800b198 <UART_SetConfig+0x258>
 800b17e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b182:	d815      	bhi.n	800b1b0 <UART_SetConfig+0x270>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d003      	beq.n	800b190 <UART_SetConfig+0x250>
 800b188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b18c:	d008      	beq.n	800b1a0 <UART_SetConfig+0x260>
 800b18e:	e00f      	b.n	800b1b0 <UART_SetConfig+0x270>
 800b190:	2300      	movs	r3, #0
 800b192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b196:	e012      	b.n	800b1be <UART_SetConfig+0x27e>
 800b198:	2302      	movs	r3, #2
 800b19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b19e:	e00e      	b.n	800b1be <UART_SetConfig+0x27e>
 800b1a0:	2304      	movs	r3, #4
 800b1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1a6:	e00a      	b.n	800b1be <UART_SetConfig+0x27e>
 800b1a8:	2308      	movs	r3, #8
 800b1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ae:	e006      	b.n	800b1be <UART_SetConfig+0x27e>
 800b1b0:	2310      	movs	r3, #16
 800b1b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1b6:	e002      	b.n	800b1be <UART_SetConfig+0x27e>
 800b1b8:	2310      	movs	r3, #16
 800b1ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a17      	ldr	r2, [pc, #92]	@ (800b220 <UART_SetConfig+0x2e0>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	f040 80a8 	bne.w	800b31a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1ce:	2b08      	cmp	r3, #8
 800b1d0:	d834      	bhi.n	800b23c <UART_SetConfig+0x2fc>
 800b1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d8 <UART_SetConfig+0x298>)
 800b1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d8:	0800b1fd 	.word	0x0800b1fd
 800b1dc:	0800b23d 	.word	0x0800b23d
 800b1e0:	0800b205 	.word	0x0800b205
 800b1e4:	0800b23d 	.word	0x0800b23d
 800b1e8:	0800b20b 	.word	0x0800b20b
 800b1ec:	0800b23d 	.word	0x0800b23d
 800b1f0:	0800b23d 	.word	0x0800b23d
 800b1f4:	0800b23d 	.word	0x0800b23d
 800b1f8:	0800b213 	.word	0x0800b213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1fc:	f7fc ff54 	bl	80080a8 <HAL_RCC_GetPCLK1Freq>
 800b200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b202:	e021      	b.n	800b248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b204:	4b0c      	ldr	r3, [pc, #48]	@ (800b238 <UART_SetConfig+0x2f8>)
 800b206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b208:	e01e      	b.n	800b248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b20a:	f7fc fedf 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 800b20e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b210:	e01a      	b.n	800b248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b218:	e016      	b.n	800b248 <UART_SetConfig+0x308>
 800b21a:	bf00      	nop
 800b21c:	cfff69f3 	.word	0xcfff69f3
 800b220:	40008000 	.word	0x40008000
 800b224:	40013800 	.word	0x40013800
 800b228:	40021000 	.word	0x40021000
 800b22c:	40004400 	.word	0x40004400
 800b230:	40004800 	.word	0x40004800
 800b234:	40004c00 	.word	0x40004c00
 800b238:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b246:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 812a 	beq.w	800b4a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b254:	4a9e      	ldr	r2, [pc, #632]	@ (800b4d0 <UART_SetConfig+0x590>)
 800b256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b25a:	461a      	mov	r2, r3
 800b25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b262:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	685a      	ldr	r2, [r3, #4]
 800b268:	4613      	mov	r3, r2
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	4413      	add	r3, r2
 800b26e:	69ba      	ldr	r2, [r7, #24]
 800b270:	429a      	cmp	r2, r3
 800b272:	d305      	bcc.n	800b280 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b27a:	69ba      	ldr	r2, [r7, #24]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d903      	bls.n	800b288 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b286:	e10d      	b.n	800b4a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28a:	2200      	movs	r2, #0
 800b28c:	60bb      	str	r3, [r7, #8]
 800b28e:	60fa      	str	r2, [r7, #12]
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b294:	4a8e      	ldr	r2, [pc, #568]	@ (800b4d0 <UART_SetConfig+0x590>)
 800b296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	2200      	movs	r2, #0
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	607a      	str	r2, [r7, #4]
 800b2a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b2aa:	f7f5 fced 	bl	8000c88 <__aeabi_uldivmod>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	f04f 0200 	mov.w	r2, #0
 800b2ba:	f04f 0300 	mov.w	r3, #0
 800b2be:	020b      	lsls	r3, r1, #8
 800b2c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2c4:	0202      	lsls	r2, r0, #8
 800b2c6:	6979      	ldr	r1, [r7, #20]
 800b2c8:	6849      	ldr	r1, [r1, #4]
 800b2ca:	0849      	lsrs	r1, r1, #1
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	eb12 0804 	adds.w	r8, r2, r4
 800b2d6:	eb43 0905 	adc.w	r9, r3, r5
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	469a      	mov	sl, r3
 800b2e2:	4693      	mov	fp, r2
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	465b      	mov	r3, fp
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	f7f5 fccc 	bl	8000c88 <__aeabi_uldivmod>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2f8:	6a3b      	ldr	r3, [r7, #32]
 800b2fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2fe:	d308      	bcc.n	800b312 <UART_SetConfig+0x3d2>
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b306:	d204      	bcs.n	800b312 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6a3a      	ldr	r2, [r7, #32]
 800b30e:	60da      	str	r2, [r3, #12]
 800b310:	e0c8      	b.n	800b4a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b318:	e0c4      	b.n	800b4a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	69db      	ldr	r3, [r3, #28]
 800b31e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b322:	d167      	bne.n	800b3f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b324:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b328:	2b08      	cmp	r3, #8
 800b32a:	d828      	bhi.n	800b37e <UART_SetConfig+0x43e>
 800b32c:	a201      	add	r2, pc, #4	@ (adr r2, 800b334 <UART_SetConfig+0x3f4>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b359 	.word	0x0800b359
 800b338:	0800b361 	.word	0x0800b361
 800b33c:	0800b369 	.word	0x0800b369
 800b340:	0800b37f 	.word	0x0800b37f
 800b344:	0800b36f 	.word	0x0800b36f
 800b348:	0800b37f 	.word	0x0800b37f
 800b34c:	0800b37f 	.word	0x0800b37f
 800b350:	0800b37f 	.word	0x0800b37f
 800b354:	0800b377 	.word	0x0800b377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b358:	f7fc fea6 	bl	80080a8 <HAL_RCC_GetPCLK1Freq>
 800b35c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b35e:	e014      	b.n	800b38a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b360:	f7fc feb8 	bl	80080d4 <HAL_RCC_GetPCLK2Freq>
 800b364:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b366:	e010      	b.n	800b38a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b368:	4b5a      	ldr	r3, [pc, #360]	@ (800b4d4 <UART_SetConfig+0x594>)
 800b36a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b36c:	e00d      	b.n	800b38a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b36e:	f7fc fe2d 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 800b372:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b374:	e009      	b.n	800b38a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b37a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b37c:	e005      	b.n	800b38a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 8089 	beq.w	800b4a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b396:	4a4e      	ldr	r2, [pc, #312]	@ (800b4d0 <UART_SetConfig+0x590>)
 800b398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b39c:	461a      	mov	r2, r3
 800b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3a4:	005a      	lsls	r2, r3, #1
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	085b      	lsrs	r3, r3, #1
 800b3ac:	441a      	add	r2, r3
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	2b0f      	cmp	r3, #15
 800b3bc:	d916      	bls.n	800b3ec <UART_SetConfig+0x4ac>
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3c4:	d212      	bcs.n	800b3ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	f023 030f 	bic.w	r3, r3, #15
 800b3ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	085b      	lsrs	r3, r3, #1
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	f003 0307 	and.w	r3, r3, #7
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	8bfb      	ldrh	r3, [r7, #30]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	8bfa      	ldrh	r2, [r7, #30]
 800b3e8:	60da      	str	r2, [r3, #12]
 800b3ea:	e05b      	b.n	800b4a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3f2:	e057      	b.n	800b4a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	d828      	bhi.n	800b44e <UART_SetConfig+0x50e>
 800b3fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b404 <UART_SetConfig+0x4c4>)
 800b3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b402:	bf00      	nop
 800b404:	0800b429 	.word	0x0800b429
 800b408:	0800b431 	.word	0x0800b431
 800b40c:	0800b439 	.word	0x0800b439
 800b410:	0800b44f 	.word	0x0800b44f
 800b414:	0800b43f 	.word	0x0800b43f
 800b418:	0800b44f 	.word	0x0800b44f
 800b41c:	0800b44f 	.word	0x0800b44f
 800b420:	0800b44f 	.word	0x0800b44f
 800b424:	0800b447 	.word	0x0800b447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b428:	f7fc fe3e 	bl	80080a8 <HAL_RCC_GetPCLK1Freq>
 800b42c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b42e:	e014      	b.n	800b45a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b430:	f7fc fe50 	bl	80080d4 <HAL_RCC_GetPCLK2Freq>
 800b434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b436:	e010      	b.n	800b45a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b438:	4b26      	ldr	r3, [pc, #152]	@ (800b4d4 <UART_SetConfig+0x594>)
 800b43a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b43c:	e00d      	b.n	800b45a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b43e:	f7fc fdc5 	bl	8007fcc <HAL_RCC_GetSysClockFreq>
 800b442:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b444:	e009      	b.n	800b45a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b44a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b44c:	e005      	b.n	800b45a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b44e:	2300      	movs	r3, #0
 800b450:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b458:	bf00      	nop
    }

    if (pclk != 0U)
 800b45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d021      	beq.n	800b4a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b464:	4a1a      	ldr	r2, [pc, #104]	@ (800b4d0 <UART_SetConfig+0x590>)
 800b466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b46a:	461a      	mov	r2, r3
 800b46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	085b      	lsrs	r3, r3, #1
 800b478:	441a      	add	r2, r3
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b482:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	2b0f      	cmp	r3, #15
 800b488:	d909      	bls.n	800b49e <UART_SetConfig+0x55e>
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b490:	d205      	bcs.n	800b49e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	b29a      	uxth	r2, r3
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	60da      	str	r2, [r3, #12]
 800b49c:	e002      	b.n	800b4a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b4c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3730      	adds	r7, #48	@ 0x30
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ce:	bf00      	nop
 800b4d0:	080100e8 	.word	0x080100e8
 800b4d4:	00f42400 	.word	0x00f42400

0800b4d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e4:	f003 0308 	and.w	r3, r3, #8
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00a      	beq.n	800b502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b528:	f003 0302 	and.w	r3, r3, #2
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00a      	beq.n	800b546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	430a      	orrs	r2, r1
 800b544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54a:	f003 0304 	and.w	r3, r3, #4
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	430a      	orrs	r2, r1
 800b566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00a      	beq.n	800b58a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	430a      	orrs	r2, r1
 800b5aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01a      	beq.n	800b5ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5d6:	d10a      	bne.n	800b5ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	605a      	str	r2, [r3, #4]
  }
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b098      	sub	sp, #96	@ 0x60
 800b620:	af02      	add	r7, sp, #8
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b62c:	f7f8 fec2 	bl	80043b4 <HAL_GetTick>
 800b630:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0308 	and.w	r3, r3, #8
 800b63c:	2b08      	cmp	r3, #8
 800b63e:	d12f      	bne.n	800b6a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b640:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b648:	2200      	movs	r2, #0
 800b64a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f88e 	bl	800b770 <UART_WaitOnFlagUntilTimeout>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d022      	beq.n	800b6a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b662:	e853 3f00 	ldrex	r3, [r3]
 800b666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b66a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b66e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	461a      	mov	r2, r3
 800b676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b678:	647b      	str	r3, [r7, #68]	@ 0x44
 800b67a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b67e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b680:	e841 2300 	strex	r3, r2, [r1]
 800b684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e6      	bne.n	800b65a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2220      	movs	r2, #32
 800b690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b69c:	2303      	movs	r3, #3
 800b69e:	e063      	b.n	800b768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f003 0304 	and.w	r3, r3, #4
 800b6aa:	2b04      	cmp	r3, #4
 800b6ac:	d149      	bne.n	800b742 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f857 	bl	800b770 <UART_WaitOnFlagUntilTimeout>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d03c      	beq.n	800b742 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d0:	e853 3f00 	ldrex	r3, [r3]
 800b6d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6ee:	e841 2300 	strex	r3, r2, [r1]
 800b6f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1e6      	bne.n	800b6c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3308      	adds	r3, #8
 800b700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	e853 3f00 	ldrex	r3, [r3]
 800b708:	60fb      	str	r3, [r7, #12]
   return(result);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f023 0301 	bic.w	r3, r3, #1
 800b710:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3308      	adds	r3, #8
 800b718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b71a:	61fa      	str	r2, [r7, #28]
 800b71c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71e:	69b9      	ldr	r1, [r7, #24]
 800b720:	69fa      	ldr	r2, [r7, #28]
 800b722:	e841 2300 	strex	r3, r2, [r1]
 800b726:	617b      	str	r3, [r7, #20]
   return(result);
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1e5      	bne.n	800b6fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2220      	movs	r2, #32
 800b732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	e012      	b.n	800b768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2220      	movs	r2, #32
 800b746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2220      	movs	r2, #32
 800b74e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3758      	adds	r7, #88	@ 0x58
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	603b      	str	r3, [r7, #0]
 800b77c:	4613      	mov	r3, r2
 800b77e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b780:	e04f      	b.n	800b822 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b788:	d04b      	beq.n	800b822 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b78a:	f7f8 fe13 	bl	80043b4 <HAL_GetTick>
 800b78e:	4602      	mov	r2, r0
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	429a      	cmp	r2, r3
 800b798:	d302      	bcc.n	800b7a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e04e      	b.n	800b842 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 0304 	and.w	r3, r3, #4
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d037      	beq.n	800b822 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b80      	cmp	r3, #128	@ 0x80
 800b7b6:	d034      	beq.n	800b822 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b40      	cmp	r3, #64	@ 0x40
 800b7bc:	d031      	beq.n	800b822 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	69db      	ldr	r3, [r3, #28]
 800b7c4:	f003 0308 	and.w	r3, r3, #8
 800b7c8:	2b08      	cmp	r3, #8
 800b7ca:	d110      	bne.n	800b7ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f000 f920 	bl	800ba1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2208      	movs	r2, #8
 800b7de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e029      	b.n	800b842 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	69db      	ldr	r3, [r3, #28]
 800b7f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7fc:	d111      	bne.n	800b822 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f906 	bl	800ba1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2220      	movs	r2, #32
 800b812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	e00f      	b.n	800b842 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	69da      	ldr	r2, [r3, #28]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	4013      	ands	r3, r2
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	429a      	cmp	r2, r3
 800b830:	bf0c      	ite	eq
 800b832:	2301      	moveq	r3, #1
 800b834:	2300      	movne	r3, #0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	461a      	mov	r2, r3
 800b83a:	79fb      	ldrb	r3, [r7, #7]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d0a0      	beq.n	800b782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
	...

0800b84c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b096      	sub	sp, #88	@ 0x58
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4613      	mov	r3, r2
 800b858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	88fa      	ldrh	r2, [r7, #6]
 800b864:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2222      	movs	r2, #34	@ 0x22
 800b874:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d02d      	beq.n	800b8de <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b888:	4a40      	ldr	r2, [pc, #256]	@ (800b98c <UART_Start_Receive_DMA+0x140>)
 800b88a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b892:	4a3f      	ldr	r2, [pc, #252]	@ (800b990 <UART_Start_Receive_DMA+0x144>)
 800b894:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b89c:	4a3d      	ldr	r2, [pc, #244]	@ (800b994 <UART_Start_Receive_DMA+0x148>)
 800b89e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3324      	adds	r3, #36	@ 0x24
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8bc:	461a      	mov	r2, r3
 800b8be:	88fb      	ldrh	r3, [r7, #6]
 800b8c0:	f7fa fc14 	bl	80060ec <HAL_DMA_Start_IT>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d009      	beq.n	800b8de <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2210      	movs	r2, #16
 800b8ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2220      	movs	r2, #32
 800b8d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e051      	b.n	800b982 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d018      	beq.n	800b918 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ee:	e853 3f00 	ldrex	r3, [r3]
 800b8f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
 800b902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b904:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b906:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b908:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b90a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b90c:	e841 2300 	strex	r3, r2, [r1]
 800b910:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1e6      	bne.n	800b8e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3308      	adds	r3, #8
 800b91e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b922:	e853 3f00 	ldrex	r3, [r3]
 800b926:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92a:	f043 0301 	orr.w	r3, r3, #1
 800b92e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3308      	adds	r3, #8
 800b936:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b938:	637a      	str	r2, [r7, #52]	@ 0x34
 800b93a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b93e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b940:	e841 2300 	strex	r3, r2, [r1]
 800b944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e5      	bne.n	800b918 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	3308      	adds	r3, #8
 800b952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	e853 3f00 	ldrex	r3, [r3]
 800b95a:	613b      	str	r3, [r7, #16]
   return(result);
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3308      	adds	r3, #8
 800b96a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b96c:	623a      	str	r2, [r7, #32]
 800b96e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b970:	69f9      	ldr	r1, [r7, #28]
 800b972:	6a3a      	ldr	r2, [r7, #32]
 800b974:	e841 2300 	strex	r3, r2, [r1]
 800b978:	61bb      	str	r3, [r7, #24]
   return(result);
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1e5      	bne.n	800b94c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3758      	adds	r7, #88	@ 0x58
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	0800bb9d 	.word	0x0800bb9d
 800b990:	0800bcc9 	.word	0x0800bcc9
 800b994:	0800bd07 	.word	0x0800bd07

0800b998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b998:	b480      	push	{r7}
 800b99a:	b08f      	sub	sp, #60	@ 0x3c
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a6:	6a3b      	ldr	r3, [r7, #32]
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b9b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e6      	bne.n	800b9a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3308      	adds	r3, #8
 800b9d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	e853 3f00 	ldrex	r3, [r3]
 800b9e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b9e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9f2:	61ba      	str	r2, [r7, #24]
 800b9f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f6:	6979      	ldr	r1, [r7, #20]
 800b9f8:	69ba      	ldr	r2, [r7, #24]
 800b9fa:	e841 2300 	strex	r3, r2, [r1]
 800b9fe:	613b      	str	r3, [r7, #16]
   return(result);
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1e5      	bne.n	800b9d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2220      	movs	r2, #32
 800ba0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ba0e:	bf00      	nop
 800ba10:	373c      	adds	r7, #60	@ 0x3c
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b095      	sub	sp, #84	@ 0x54
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2a:	e853 3f00 	ldrex	r3, [r3]
 800ba2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba40:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba48:	e841 2300 	strex	r3, r2, [r1]
 800ba4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1e6      	bne.n	800ba22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	3308      	adds	r3, #8
 800ba5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5c:	6a3b      	ldr	r3, [r7, #32]
 800ba5e:	e853 3f00 	ldrex	r3, [r3]
 800ba62:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba6a:	f023 0301 	bic.w	r3, r3, #1
 800ba6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3308      	adds	r3, #8
 800ba76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba80:	e841 2300 	strex	r3, r2, [r1]
 800ba84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1e3      	bne.n	800ba54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d118      	bne.n	800bac6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	e853 3f00 	ldrex	r3, [r3]
 800baa0:	60bb      	str	r3, [r7, #8]
   return(result);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	f023 0310 	bic.w	r3, r3, #16
 800baa8:	647b      	str	r3, [r7, #68]	@ 0x44
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	461a      	mov	r2, r3
 800bab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bab2:	61bb      	str	r3, [r7, #24]
 800bab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab6:	6979      	ldr	r1, [r7, #20]
 800bab8:	69ba      	ldr	r2, [r7, #24]
 800baba:	e841 2300 	strex	r3, r2, [r1]
 800babe:	613b      	str	r3, [r7, #16]
   return(result);
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1e6      	bne.n	800ba94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2220      	movs	r2, #32
 800baca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bada:	bf00      	nop
 800badc:	3754      	adds	r7, #84	@ 0x54
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b090      	sub	sp, #64	@ 0x40
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0320 	and.w	r3, r3, #32
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d137      	bne.n	800bb72 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bb02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb04:	2200      	movs	r2, #0
 800bb06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3308      	adds	r3, #8
 800bb10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb14:	e853 3f00 	ldrex	r3, [r3]
 800bb18:	623b      	str	r3, [r7, #32]
   return(result);
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb20:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3308      	adds	r3, #8
 800bb28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb2a:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb32:	e841 2300 	strex	r3, r2, [r1]
 800bb36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1e5      	bne.n	800bb0a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	e853 3f00 	ldrex	r3, [r3]
 800bb4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb52:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb5c:	61fb      	str	r3, [r7, #28]
 800bb5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb60:	69b9      	ldr	r1, [r7, #24]
 800bb62:	69fa      	ldr	r2, [r7, #28]
 800bb64:	e841 2300 	strex	r3, r2, [r1]
 800bb68:	617b      	str	r3, [r7, #20]
   return(result);
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1e6      	bne.n	800bb3e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb70:	e002      	b.n	800bb78 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bb72:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bb74:	f7ff f9b0 	bl	800aed8 <HAL_UART_TxCpltCallback>
}
 800bb78:	bf00      	nop
 800bb7a:	3740      	adds	r7, #64	@ 0x40
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7ff f9ac 	bl	800aeec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb94:	bf00      	nop
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b09c      	sub	sp, #112	@ 0x70
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bba8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0320 	and.w	r3, r3, #32
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d171      	bne.n	800bc9c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bbb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbc8:	e853 3f00 	ldrex	r3, [r3]
 800bbcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bbce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bbd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bbde:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbe0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bbe4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbe6:	e841 2300 	strex	r3, r2, [r1]
 800bbea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bbec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1e6      	bne.n	800bbc0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3308      	adds	r3, #8
 800bbf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfc:	e853 3f00 	ldrex	r3, [r3]
 800bc00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc04:	f023 0301 	bic.w	r3, r3, #1
 800bc08:	667b      	str	r3, [r7, #100]	@ 0x64
 800bc0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3308      	adds	r3, #8
 800bc10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bc12:	647a      	str	r2, [r7, #68]	@ 0x44
 800bc14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e5      	bne.n	800bbf2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc30:	e853 3f00 	ldrex	r3, [r3]
 800bc34:	623b      	str	r3, [r7, #32]
   return(result);
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc3c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3308      	adds	r3, #8
 800bc44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bc46:	633a      	str	r2, [r7, #48]	@ 0x30
 800bc48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc4e:	e841 2300 	strex	r3, r2, [r1]
 800bc52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e5      	bne.n	800bc26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc5c:	2220      	movs	r2, #32
 800bc5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d118      	bne.n	800bc9c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f023 0310 	bic.w	r3, r3, #16
 800bc7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	461a      	mov	r2, r3
 800bc86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc88:	61fb      	str	r3, [r7, #28]
 800bc8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	69b9      	ldr	r1, [r7, #24]
 800bc8e:	69fa      	ldr	r2, [r7, #28]
 800bc90:	e841 2300 	strex	r3, r2, [r1]
 800bc94:	617b      	str	r3, [r7, #20]
   return(result);
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e6      	bne.n	800bc6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc9e:	2200      	movs	r2, #0
 800bca0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d107      	bne.n	800bcba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bcb4:	f7ff f938 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcb8:	e002      	b.n	800bcc0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bcba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bcbc:	f7f8 fa56 	bl	800416c <HAL_UART_RxCpltCallback>
}
 800bcc0:	bf00      	nop
 800bcc2:	3770      	adds	r7, #112	@ 0x70
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d109      	bne.n	800bcf8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bcea:	085b      	lsrs	r3, r3, #1
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	4619      	mov	r1, r3
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f7ff f919 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcf6:	e002      	b.n	800bcfe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f7ff f901 	bl	800af00 <HAL_UART_RxHalfCpltCallback>
}
 800bcfe:	bf00      	nop
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b086      	sub	sp, #24
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd12:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd1a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd2e:	2b80      	cmp	r3, #128	@ 0x80
 800bd30:	d109      	bne.n	800bd46 <UART_DMAError+0x40>
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	2b21      	cmp	r3, #33	@ 0x21
 800bd36:	d106      	bne.n	800bd46 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bd40:	6978      	ldr	r0, [r7, #20]
 800bd42:	f7ff fe29 	bl	800b998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd50:	2b40      	cmp	r3, #64	@ 0x40
 800bd52:	d109      	bne.n	800bd68 <UART_DMAError+0x62>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b22      	cmp	r3, #34	@ 0x22
 800bd58:	d106      	bne.n	800bd68 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bd62:	6978      	ldr	r0, [r7, #20]
 800bd64:	f7ff fe59 	bl	800ba1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd6e:	f043 0210 	orr.w	r2, r3, #16
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd78:	6978      	ldr	r0, [r7, #20]
 800bd7a:	f7ff f8cb 	bl	800af14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd7e:	bf00      	nop
 800bd80:	3718      	adds	r7, #24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b084      	sub	sp, #16
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f7ff f8b9 	bl	800af14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bda2:	bf00      	nop
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b088      	sub	sp, #32
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdc6:	61fb      	str	r3, [r7, #28]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	61bb      	str	r3, [r7, #24]
 800bdd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	6979      	ldr	r1, [r7, #20]
 800bdd6:	69ba      	ldr	r2, [r7, #24]
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	613b      	str	r3, [r7, #16]
   return(result);
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e6      	bne.n	800bdb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2220      	movs	r2, #32
 800bde8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7ff f870 	bl	800aed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdf8:	bf00      	nop
 800bdfa:	3720      	adds	r7, #32
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be30:	bf00      	nop
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d101      	bne.n	800be52 <HAL_UARTEx_DisableFifoMode+0x16>
 800be4e:	2302      	movs	r3, #2
 800be50:	e027      	b.n	800bea2 <HAL_UARTEx_DisableFifoMode+0x66>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2224      	movs	r2, #36	@ 0x24
 800be5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f022 0201 	bic.w	r2, r2, #1
 800be78:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800be80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2220      	movs	r2, #32
 800be94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b084      	sub	sp, #16
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
 800beb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d101      	bne.n	800bec6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bec2:	2302      	movs	r3, #2
 800bec4:	e02d      	b.n	800bf22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2224      	movs	r2, #36	@ 0x24
 800bed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f022 0201 	bic.w	r2, r2, #1
 800beec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	430a      	orrs	r2, r1
 800bf00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 f850 	bl	800bfa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2220      	movs	r2, #32
 800bf14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d101      	bne.n	800bf42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf3e:	2302      	movs	r3, #2
 800bf40:	e02d      	b.n	800bf9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2201      	movs	r2, #1
 800bf46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2224      	movs	r2, #36	@ 0x24
 800bf4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f022 0201 	bic.w	r2, r2, #1
 800bf68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f812 	bl	800bfa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
	...

0800bfa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d108      	bne.n	800bfca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfc8:	e031      	b.n	800c02e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfca:	2308      	movs	r3, #8
 800bfcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfce:	2308      	movs	r3, #8
 800bfd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	0e5b      	lsrs	r3, r3, #25
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	f003 0307 	and.w	r3, r3, #7
 800bfe0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	0f5b      	lsrs	r3, r3, #29
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	f003 0307 	and.w	r3, r3, #7
 800bff0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
 800bff4:	7b3a      	ldrb	r2, [r7, #12]
 800bff6:	4911      	ldr	r1, [pc, #68]	@ (800c03c <UARTEx_SetNbDataToProcess+0x94>)
 800bff8:	5c8a      	ldrb	r2, [r1, r2]
 800bffa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bffe:	7b3a      	ldrb	r2, [r7, #12]
 800c000:	490f      	ldr	r1, [pc, #60]	@ (800c040 <UARTEx_SetNbDataToProcess+0x98>)
 800c002:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c004:	fb93 f3f2 	sdiv	r3, r3, r2
 800c008:	b29a      	uxth	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	7b7a      	ldrb	r2, [r7, #13]
 800c014:	4909      	ldr	r1, [pc, #36]	@ (800c03c <UARTEx_SetNbDataToProcess+0x94>)
 800c016:	5c8a      	ldrb	r2, [r1, r2]
 800c018:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c01c:	7b7a      	ldrb	r2, [r7, #13]
 800c01e:	4908      	ldr	r1, [pc, #32]	@ (800c040 <UARTEx_SetNbDataToProcess+0x98>)
 800c020:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c022:	fb93 f3f2 	sdiv	r3, r3, r2
 800c026:	b29a      	uxth	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c02e:	bf00      	nop
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	08010100 	.word	0x08010100
 800c040:	08010108 	.word	0x08010108

0800c044 <malloc>:
 800c044:	4b02      	ldr	r3, [pc, #8]	@ (800c050 <malloc+0xc>)
 800c046:	4601      	mov	r1, r0
 800c048:	6818      	ldr	r0, [r3, #0]
 800c04a:	f000 b82d 	b.w	800c0a8 <_malloc_r>
 800c04e:	bf00      	nop
 800c050:	20000194 	.word	0x20000194

0800c054 <free>:
 800c054:	4b02      	ldr	r3, [pc, #8]	@ (800c060 <free+0xc>)
 800c056:	4601      	mov	r1, r0
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	f001 bb1d 	b.w	800d698 <_free_r>
 800c05e:	bf00      	nop
 800c060:	20000194 	.word	0x20000194

0800c064 <sbrk_aligned>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	4e0f      	ldr	r6, [pc, #60]	@ (800c0a4 <sbrk_aligned+0x40>)
 800c068:	460c      	mov	r4, r1
 800c06a:	6831      	ldr	r1, [r6, #0]
 800c06c:	4605      	mov	r5, r0
 800c06e:	b911      	cbnz	r1, 800c076 <sbrk_aligned+0x12>
 800c070:	f001 fa80 	bl	800d574 <_sbrk_r>
 800c074:	6030      	str	r0, [r6, #0]
 800c076:	4621      	mov	r1, r4
 800c078:	4628      	mov	r0, r5
 800c07a:	f001 fa7b 	bl	800d574 <_sbrk_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	d103      	bne.n	800c08a <sbrk_aligned+0x26>
 800c082:	f04f 34ff 	mov.w	r4, #4294967295
 800c086:	4620      	mov	r0, r4
 800c088:	bd70      	pop	{r4, r5, r6, pc}
 800c08a:	1cc4      	adds	r4, r0, #3
 800c08c:	f024 0403 	bic.w	r4, r4, #3
 800c090:	42a0      	cmp	r0, r4
 800c092:	d0f8      	beq.n	800c086 <sbrk_aligned+0x22>
 800c094:	1a21      	subs	r1, r4, r0
 800c096:	4628      	mov	r0, r5
 800c098:	f001 fa6c 	bl	800d574 <_sbrk_r>
 800c09c:	3001      	adds	r0, #1
 800c09e:	d1f2      	bne.n	800c086 <sbrk_aligned+0x22>
 800c0a0:	e7ef      	b.n	800c082 <sbrk_aligned+0x1e>
 800c0a2:	bf00      	nop
 800c0a4:	200011d8 	.word	0x200011d8

0800c0a8 <_malloc_r>:
 800c0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ac:	1ccd      	adds	r5, r1, #3
 800c0ae:	f025 0503 	bic.w	r5, r5, #3
 800c0b2:	3508      	adds	r5, #8
 800c0b4:	2d0c      	cmp	r5, #12
 800c0b6:	bf38      	it	cc
 800c0b8:	250c      	movcc	r5, #12
 800c0ba:	2d00      	cmp	r5, #0
 800c0bc:	4606      	mov	r6, r0
 800c0be:	db01      	blt.n	800c0c4 <_malloc_r+0x1c>
 800c0c0:	42a9      	cmp	r1, r5
 800c0c2:	d904      	bls.n	800c0ce <_malloc_r+0x26>
 800c0c4:	230c      	movs	r3, #12
 800c0c6:	6033      	str	r3, [r6, #0]
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1a4 <_malloc_r+0xfc>
 800c0d2:	f000 f869 	bl	800c1a8 <__malloc_lock>
 800c0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0da:	461c      	mov	r4, r3
 800c0dc:	bb44      	cbnz	r4, 800c130 <_malloc_r+0x88>
 800c0de:	4629      	mov	r1, r5
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7ff ffbf 	bl	800c064 <sbrk_aligned>
 800c0e6:	1c43      	adds	r3, r0, #1
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	d158      	bne.n	800c19e <_malloc_r+0xf6>
 800c0ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c0f0:	4627      	mov	r7, r4
 800c0f2:	2f00      	cmp	r7, #0
 800c0f4:	d143      	bne.n	800c17e <_malloc_r+0xd6>
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	d04b      	beq.n	800c192 <_malloc_r+0xea>
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4630      	mov	r0, r6
 800c100:	eb04 0903 	add.w	r9, r4, r3
 800c104:	f001 fa36 	bl	800d574 <_sbrk_r>
 800c108:	4581      	cmp	r9, r0
 800c10a:	d142      	bne.n	800c192 <_malloc_r+0xea>
 800c10c:	6821      	ldr	r1, [r4, #0]
 800c10e:	1a6d      	subs	r5, r5, r1
 800c110:	4629      	mov	r1, r5
 800c112:	4630      	mov	r0, r6
 800c114:	f7ff ffa6 	bl	800c064 <sbrk_aligned>
 800c118:	3001      	adds	r0, #1
 800c11a:	d03a      	beq.n	800c192 <_malloc_r+0xea>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	442b      	add	r3, r5
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	f8d8 3000 	ldr.w	r3, [r8]
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	bb62      	cbnz	r2, 800c184 <_malloc_r+0xdc>
 800c12a:	f8c8 7000 	str.w	r7, [r8]
 800c12e:	e00f      	b.n	800c150 <_malloc_r+0xa8>
 800c130:	6822      	ldr	r2, [r4, #0]
 800c132:	1b52      	subs	r2, r2, r5
 800c134:	d420      	bmi.n	800c178 <_malloc_r+0xd0>
 800c136:	2a0b      	cmp	r2, #11
 800c138:	d917      	bls.n	800c16a <_malloc_r+0xc2>
 800c13a:	1961      	adds	r1, r4, r5
 800c13c:	42a3      	cmp	r3, r4
 800c13e:	6025      	str	r5, [r4, #0]
 800c140:	bf18      	it	ne
 800c142:	6059      	strne	r1, [r3, #4]
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	bf08      	it	eq
 800c148:	f8c8 1000 	streq.w	r1, [r8]
 800c14c:	5162      	str	r2, [r4, r5]
 800c14e:	604b      	str	r3, [r1, #4]
 800c150:	4630      	mov	r0, r6
 800c152:	f000 f82f 	bl	800c1b4 <__malloc_unlock>
 800c156:	f104 000b 	add.w	r0, r4, #11
 800c15a:	1d23      	adds	r3, r4, #4
 800c15c:	f020 0007 	bic.w	r0, r0, #7
 800c160:	1ac2      	subs	r2, r0, r3
 800c162:	bf1c      	itt	ne
 800c164:	1a1b      	subne	r3, r3, r0
 800c166:	50a3      	strne	r3, [r4, r2]
 800c168:	e7af      	b.n	800c0ca <_malloc_r+0x22>
 800c16a:	6862      	ldr	r2, [r4, #4]
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	bf0c      	ite	eq
 800c170:	f8c8 2000 	streq.w	r2, [r8]
 800c174:	605a      	strne	r2, [r3, #4]
 800c176:	e7eb      	b.n	800c150 <_malloc_r+0xa8>
 800c178:	4623      	mov	r3, r4
 800c17a:	6864      	ldr	r4, [r4, #4]
 800c17c:	e7ae      	b.n	800c0dc <_malloc_r+0x34>
 800c17e:	463c      	mov	r4, r7
 800c180:	687f      	ldr	r7, [r7, #4]
 800c182:	e7b6      	b.n	800c0f2 <_malloc_r+0x4a>
 800c184:	461a      	mov	r2, r3
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	42a3      	cmp	r3, r4
 800c18a:	d1fb      	bne.n	800c184 <_malloc_r+0xdc>
 800c18c:	2300      	movs	r3, #0
 800c18e:	6053      	str	r3, [r2, #4]
 800c190:	e7de      	b.n	800c150 <_malloc_r+0xa8>
 800c192:	230c      	movs	r3, #12
 800c194:	6033      	str	r3, [r6, #0]
 800c196:	4630      	mov	r0, r6
 800c198:	f000 f80c 	bl	800c1b4 <__malloc_unlock>
 800c19c:	e794      	b.n	800c0c8 <_malloc_r+0x20>
 800c19e:	6005      	str	r5, [r0, #0]
 800c1a0:	e7d6      	b.n	800c150 <_malloc_r+0xa8>
 800c1a2:	bf00      	nop
 800c1a4:	200011dc 	.word	0x200011dc

0800c1a8 <__malloc_lock>:
 800c1a8:	4801      	ldr	r0, [pc, #4]	@ (800c1b0 <__malloc_lock+0x8>)
 800c1aa:	f001 ba30 	b.w	800d60e <__retarget_lock_acquire_recursive>
 800c1ae:	bf00      	nop
 800c1b0:	20001320 	.word	0x20001320

0800c1b4 <__malloc_unlock>:
 800c1b4:	4801      	ldr	r0, [pc, #4]	@ (800c1bc <__malloc_unlock+0x8>)
 800c1b6:	f001 ba2b 	b.w	800d610 <__retarget_lock_release_recursive>
 800c1ba:	bf00      	nop
 800c1bc:	20001320 	.word	0x20001320

0800c1c0 <sulp>:
 800c1c0:	b570      	push	{r4, r5, r6, lr}
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	460d      	mov	r5, r1
 800c1c6:	ec45 4b10 	vmov	d0, r4, r5
 800c1ca:	4616      	mov	r6, r2
 800c1cc:	f002 f966 	bl	800e49c <__ulp>
 800c1d0:	ec51 0b10 	vmov	r0, r1, d0
 800c1d4:	b17e      	cbz	r6, 800c1f6 <sulp+0x36>
 800c1d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	dd09      	ble.n	800c1f6 <sulp+0x36>
 800c1e2:	051b      	lsls	r3, r3, #20
 800c1e4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c1e8:	2400      	movs	r4, #0
 800c1ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	462b      	mov	r3, r5
 800c1f2:	f7f4 fa29 	bl	8000648 <__aeabi_dmul>
 800c1f6:	ec41 0b10 	vmov	d0, r0, r1
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
 800c1fc:	0000      	movs	r0, r0
	...

0800c200 <_strtod_l>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	b09f      	sub	sp, #124	@ 0x7c
 800c206:	460c      	mov	r4, r1
 800c208:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c20a:	2200      	movs	r2, #0
 800c20c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c20e:	9005      	str	r0, [sp, #20]
 800c210:	f04f 0a00 	mov.w	sl, #0
 800c214:	f04f 0b00 	mov.w	fp, #0
 800c218:	460a      	mov	r2, r1
 800c21a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c21c:	7811      	ldrb	r1, [r2, #0]
 800c21e:	292b      	cmp	r1, #43	@ 0x2b
 800c220:	d04a      	beq.n	800c2b8 <_strtod_l+0xb8>
 800c222:	d838      	bhi.n	800c296 <_strtod_l+0x96>
 800c224:	290d      	cmp	r1, #13
 800c226:	d832      	bhi.n	800c28e <_strtod_l+0x8e>
 800c228:	2908      	cmp	r1, #8
 800c22a:	d832      	bhi.n	800c292 <_strtod_l+0x92>
 800c22c:	2900      	cmp	r1, #0
 800c22e:	d03b      	beq.n	800c2a8 <_strtod_l+0xa8>
 800c230:	2200      	movs	r2, #0
 800c232:	920e      	str	r2, [sp, #56]	@ 0x38
 800c234:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c236:	782a      	ldrb	r2, [r5, #0]
 800c238:	2a30      	cmp	r2, #48	@ 0x30
 800c23a:	f040 80b2 	bne.w	800c3a2 <_strtod_l+0x1a2>
 800c23e:	786a      	ldrb	r2, [r5, #1]
 800c240:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c244:	2a58      	cmp	r2, #88	@ 0x58
 800c246:	d16e      	bne.n	800c326 <_strtod_l+0x126>
 800c248:	9302      	str	r3, [sp, #8]
 800c24a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	4a8f      	ldr	r2, [pc, #572]	@ (800c490 <_strtod_l+0x290>)
 800c254:	9805      	ldr	r0, [sp, #20]
 800c256:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c258:	a919      	add	r1, sp, #100	@ 0x64
 800c25a:	f001 facf 	bl	800d7fc <__gethex>
 800c25e:	f010 060f 	ands.w	r6, r0, #15
 800c262:	4604      	mov	r4, r0
 800c264:	d005      	beq.n	800c272 <_strtod_l+0x72>
 800c266:	2e06      	cmp	r6, #6
 800c268:	d128      	bne.n	800c2bc <_strtod_l+0xbc>
 800c26a:	3501      	adds	r5, #1
 800c26c:	2300      	movs	r3, #0
 800c26e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c270:	930e      	str	r3, [sp, #56]	@ 0x38
 800c272:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c274:	2b00      	cmp	r3, #0
 800c276:	f040 858e 	bne.w	800cd96 <_strtod_l+0xb96>
 800c27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c27c:	b1cb      	cbz	r3, 800c2b2 <_strtod_l+0xb2>
 800c27e:	4652      	mov	r2, sl
 800c280:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c284:	ec43 2b10 	vmov	d0, r2, r3
 800c288:	b01f      	add	sp, #124	@ 0x7c
 800c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28e:	2920      	cmp	r1, #32
 800c290:	d1ce      	bne.n	800c230 <_strtod_l+0x30>
 800c292:	3201      	adds	r2, #1
 800c294:	e7c1      	b.n	800c21a <_strtod_l+0x1a>
 800c296:	292d      	cmp	r1, #45	@ 0x2d
 800c298:	d1ca      	bne.n	800c230 <_strtod_l+0x30>
 800c29a:	2101      	movs	r1, #1
 800c29c:	910e      	str	r1, [sp, #56]	@ 0x38
 800c29e:	1c51      	adds	r1, r2, #1
 800c2a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c2a2:	7852      	ldrb	r2, [r2, #1]
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	d1c5      	bne.n	800c234 <_strtod_l+0x34>
 800c2a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f040 8570 	bne.w	800cd92 <_strtod_l+0xb92>
 800c2b2:	4652      	mov	r2, sl
 800c2b4:	465b      	mov	r3, fp
 800c2b6:	e7e5      	b.n	800c284 <_strtod_l+0x84>
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	e7ef      	b.n	800c29c <_strtod_l+0x9c>
 800c2bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c2be:	b13a      	cbz	r2, 800c2d0 <_strtod_l+0xd0>
 800c2c0:	2135      	movs	r1, #53	@ 0x35
 800c2c2:	a81c      	add	r0, sp, #112	@ 0x70
 800c2c4:	f002 f9e4 	bl	800e690 <__copybits>
 800c2c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2ca:	9805      	ldr	r0, [sp, #20]
 800c2cc:	f001 fdba 	bl	800de44 <_Bfree>
 800c2d0:	3e01      	subs	r6, #1
 800c2d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c2d4:	2e04      	cmp	r6, #4
 800c2d6:	d806      	bhi.n	800c2e6 <_strtod_l+0xe6>
 800c2d8:	e8df f006 	tbb	[pc, r6]
 800c2dc:	201d0314 	.word	0x201d0314
 800c2e0:	14          	.byte	0x14
 800c2e1:	00          	.byte	0x00
 800c2e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c2e6:	05e1      	lsls	r1, r4, #23
 800c2e8:	bf48      	it	mi
 800c2ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c2ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2f2:	0d1b      	lsrs	r3, r3, #20
 800c2f4:	051b      	lsls	r3, r3, #20
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1bb      	bne.n	800c272 <_strtod_l+0x72>
 800c2fa:	f001 f95d 	bl	800d5b8 <__errno>
 800c2fe:	2322      	movs	r3, #34	@ 0x22
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	e7b6      	b.n	800c272 <_strtod_l+0x72>
 800c304:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c308:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c30c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c310:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c314:	e7e7      	b.n	800c2e6 <_strtod_l+0xe6>
 800c316:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c498 <_strtod_l+0x298>
 800c31a:	e7e4      	b.n	800c2e6 <_strtod_l+0xe6>
 800c31c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c320:	f04f 3aff 	mov.w	sl, #4294967295
 800c324:	e7df      	b.n	800c2e6 <_strtod_l+0xe6>
 800c326:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c32c:	785b      	ldrb	r3, [r3, #1]
 800c32e:	2b30      	cmp	r3, #48	@ 0x30
 800c330:	d0f9      	beq.n	800c326 <_strtod_l+0x126>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d09d      	beq.n	800c272 <_strtod_l+0x72>
 800c336:	2301      	movs	r3, #1
 800c338:	2700      	movs	r7, #0
 800c33a:	9308      	str	r3, [sp, #32]
 800c33c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c33e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c340:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c342:	46b9      	mov	r9, r7
 800c344:	220a      	movs	r2, #10
 800c346:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c348:	7805      	ldrb	r5, [r0, #0]
 800c34a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c34e:	b2d9      	uxtb	r1, r3
 800c350:	2909      	cmp	r1, #9
 800c352:	d928      	bls.n	800c3a6 <_strtod_l+0x1a6>
 800c354:	494f      	ldr	r1, [pc, #316]	@ (800c494 <_strtod_l+0x294>)
 800c356:	2201      	movs	r2, #1
 800c358:	f001 f854 	bl	800d404 <strncmp>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d032      	beq.n	800c3c6 <_strtod_l+0x1c6>
 800c360:	2000      	movs	r0, #0
 800c362:	462a      	mov	r2, r5
 800c364:	900a      	str	r0, [sp, #40]	@ 0x28
 800c366:	464d      	mov	r5, r9
 800c368:	4603      	mov	r3, r0
 800c36a:	2a65      	cmp	r2, #101	@ 0x65
 800c36c:	d001      	beq.n	800c372 <_strtod_l+0x172>
 800c36e:	2a45      	cmp	r2, #69	@ 0x45
 800c370:	d114      	bne.n	800c39c <_strtod_l+0x19c>
 800c372:	b91d      	cbnz	r5, 800c37c <_strtod_l+0x17c>
 800c374:	9a08      	ldr	r2, [sp, #32]
 800c376:	4302      	orrs	r2, r0
 800c378:	d096      	beq.n	800c2a8 <_strtod_l+0xa8>
 800c37a:	2500      	movs	r5, #0
 800c37c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c37e:	1c62      	adds	r2, r4, #1
 800c380:	9219      	str	r2, [sp, #100]	@ 0x64
 800c382:	7862      	ldrb	r2, [r4, #1]
 800c384:	2a2b      	cmp	r2, #43	@ 0x2b
 800c386:	d07a      	beq.n	800c47e <_strtod_l+0x27e>
 800c388:	2a2d      	cmp	r2, #45	@ 0x2d
 800c38a:	d07e      	beq.n	800c48a <_strtod_l+0x28a>
 800c38c:	f04f 0c00 	mov.w	ip, #0
 800c390:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c394:	2909      	cmp	r1, #9
 800c396:	f240 8085 	bls.w	800c4a4 <_strtod_l+0x2a4>
 800c39a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c39c:	f04f 0800 	mov.w	r8, #0
 800c3a0:	e0a5      	b.n	800c4ee <_strtod_l+0x2ee>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e7c8      	b.n	800c338 <_strtod_l+0x138>
 800c3a6:	f1b9 0f08 	cmp.w	r9, #8
 800c3aa:	bfd8      	it	le
 800c3ac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c3ae:	f100 0001 	add.w	r0, r0, #1
 800c3b2:	bfda      	itte	le
 800c3b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3b8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c3ba:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c3be:	f109 0901 	add.w	r9, r9, #1
 800c3c2:	9019      	str	r0, [sp, #100]	@ 0x64
 800c3c4:	e7bf      	b.n	800c346 <_strtod_l+0x146>
 800c3c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3c8:	1c5a      	adds	r2, r3, #1
 800c3ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3cc:	785a      	ldrb	r2, [r3, #1]
 800c3ce:	f1b9 0f00 	cmp.w	r9, #0
 800c3d2:	d03b      	beq.n	800c44c <_strtod_l+0x24c>
 800c3d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3d6:	464d      	mov	r5, r9
 800c3d8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c3dc:	2b09      	cmp	r3, #9
 800c3de:	d912      	bls.n	800c406 <_strtod_l+0x206>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e7c2      	b.n	800c36a <_strtod_l+0x16a>
 800c3e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3e6:	1c5a      	adds	r2, r3, #1
 800c3e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3ea:	785a      	ldrb	r2, [r3, #1]
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	2a30      	cmp	r2, #48	@ 0x30
 800c3f0:	d0f8      	beq.n	800c3e4 <_strtod_l+0x1e4>
 800c3f2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c3f6:	2b08      	cmp	r3, #8
 800c3f8:	f200 84d2 	bhi.w	800cda0 <_strtod_l+0xba0>
 800c3fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3fe:	900a      	str	r0, [sp, #40]	@ 0x28
 800c400:	2000      	movs	r0, #0
 800c402:	930c      	str	r3, [sp, #48]	@ 0x30
 800c404:	4605      	mov	r5, r0
 800c406:	3a30      	subs	r2, #48	@ 0x30
 800c408:	f100 0301 	add.w	r3, r0, #1
 800c40c:	d018      	beq.n	800c440 <_strtod_l+0x240>
 800c40e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c410:	4419      	add	r1, r3
 800c412:	910a      	str	r1, [sp, #40]	@ 0x28
 800c414:	462e      	mov	r6, r5
 800c416:	f04f 0e0a 	mov.w	lr, #10
 800c41a:	1c71      	adds	r1, r6, #1
 800c41c:	eba1 0c05 	sub.w	ip, r1, r5
 800c420:	4563      	cmp	r3, ip
 800c422:	dc15      	bgt.n	800c450 <_strtod_l+0x250>
 800c424:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c428:	182b      	adds	r3, r5, r0
 800c42a:	2b08      	cmp	r3, #8
 800c42c:	f105 0501 	add.w	r5, r5, #1
 800c430:	4405      	add	r5, r0
 800c432:	dc1a      	bgt.n	800c46a <_strtod_l+0x26a>
 800c434:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c436:	230a      	movs	r3, #10
 800c438:	fb03 2301 	mla	r3, r3, r1, r2
 800c43c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c43e:	2300      	movs	r3, #0
 800c440:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c442:	1c51      	adds	r1, r2, #1
 800c444:	9119      	str	r1, [sp, #100]	@ 0x64
 800c446:	7852      	ldrb	r2, [r2, #1]
 800c448:	4618      	mov	r0, r3
 800c44a:	e7c5      	b.n	800c3d8 <_strtod_l+0x1d8>
 800c44c:	4648      	mov	r0, r9
 800c44e:	e7ce      	b.n	800c3ee <_strtod_l+0x1ee>
 800c450:	2e08      	cmp	r6, #8
 800c452:	dc05      	bgt.n	800c460 <_strtod_l+0x260>
 800c454:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c456:	fb0e f606 	mul.w	r6, lr, r6
 800c45a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c45c:	460e      	mov	r6, r1
 800c45e:	e7dc      	b.n	800c41a <_strtod_l+0x21a>
 800c460:	2910      	cmp	r1, #16
 800c462:	bfd8      	it	le
 800c464:	fb0e f707 	mulle.w	r7, lr, r7
 800c468:	e7f8      	b.n	800c45c <_strtod_l+0x25c>
 800c46a:	2b0f      	cmp	r3, #15
 800c46c:	bfdc      	itt	le
 800c46e:	230a      	movle	r3, #10
 800c470:	fb03 2707 	mlale	r7, r3, r7, r2
 800c474:	e7e3      	b.n	800c43e <_strtod_l+0x23e>
 800c476:	2300      	movs	r3, #0
 800c478:	930a      	str	r3, [sp, #40]	@ 0x28
 800c47a:	2301      	movs	r3, #1
 800c47c:	e77a      	b.n	800c374 <_strtod_l+0x174>
 800c47e:	f04f 0c00 	mov.w	ip, #0
 800c482:	1ca2      	adds	r2, r4, #2
 800c484:	9219      	str	r2, [sp, #100]	@ 0x64
 800c486:	78a2      	ldrb	r2, [r4, #2]
 800c488:	e782      	b.n	800c390 <_strtod_l+0x190>
 800c48a:	f04f 0c01 	mov.w	ip, #1
 800c48e:	e7f8      	b.n	800c482 <_strtod_l+0x282>
 800c490:	080102e4 	.word	0x080102e4
 800c494:	08010110 	.word	0x08010110
 800c498:	7ff00000 	.word	0x7ff00000
 800c49c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c49e:	1c51      	adds	r1, r2, #1
 800c4a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4a2:	7852      	ldrb	r2, [r2, #1]
 800c4a4:	2a30      	cmp	r2, #48	@ 0x30
 800c4a6:	d0f9      	beq.n	800c49c <_strtod_l+0x29c>
 800c4a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c4ac:	2908      	cmp	r1, #8
 800c4ae:	f63f af75 	bhi.w	800c39c <_strtod_l+0x19c>
 800c4b2:	3a30      	subs	r2, #48	@ 0x30
 800c4b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4b8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c4ba:	f04f 080a 	mov.w	r8, #10
 800c4be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4c0:	1c56      	adds	r6, r2, #1
 800c4c2:	9619      	str	r6, [sp, #100]	@ 0x64
 800c4c4:	7852      	ldrb	r2, [r2, #1]
 800c4c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c4ca:	f1be 0f09 	cmp.w	lr, #9
 800c4ce:	d939      	bls.n	800c544 <_strtod_l+0x344>
 800c4d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c4d2:	1a76      	subs	r6, r6, r1
 800c4d4:	2e08      	cmp	r6, #8
 800c4d6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c4da:	dc03      	bgt.n	800c4e4 <_strtod_l+0x2e4>
 800c4dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4de:	4588      	cmp	r8, r1
 800c4e0:	bfa8      	it	ge
 800c4e2:	4688      	movge	r8, r1
 800c4e4:	f1bc 0f00 	cmp.w	ip, #0
 800c4e8:	d001      	beq.n	800c4ee <_strtod_l+0x2ee>
 800c4ea:	f1c8 0800 	rsb	r8, r8, #0
 800c4ee:	2d00      	cmp	r5, #0
 800c4f0:	d14e      	bne.n	800c590 <_strtod_l+0x390>
 800c4f2:	9908      	ldr	r1, [sp, #32]
 800c4f4:	4308      	orrs	r0, r1
 800c4f6:	f47f aebc 	bne.w	800c272 <_strtod_l+0x72>
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f47f aed4 	bne.w	800c2a8 <_strtod_l+0xa8>
 800c500:	2a69      	cmp	r2, #105	@ 0x69
 800c502:	d028      	beq.n	800c556 <_strtod_l+0x356>
 800c504:	dc25      	bgt.n	800c552 <_strtod_l+0x352>
 800c506:	2a49      	cmp	r2, #73	@ 0x49
 800c508:	d025      	beq.n	800c556 <_strtod_l+0x356>
 800c50a:	2a4e      	cmp	r2, #78	@ 0x4e
 800c50c:	f47f aecc 	bne.w	800c2a8 <_strtod_l+0xa8>
 800c510:	499a      	ldr	r1, [pc, #616]	@ (800c77c <_strtod_l+0x57c>)
 800c512:	a819      	add	r0, sp, #100	@ 0x64
 800c514:	f001 fb94 	bl	800dc40 <__match>
 800c518:	2800      	cmp	r0, #0
 800c51a:	f43f aec5 	beq.w	800c2a8 <_strtod_l+0xa8>
 800c51e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	2b28      	cmp	r3, #40	@ 0x28
 800c524:	d12e      	bne.n	800c584 <_strtod_l+0x384>
 800c526:	4996      	ldr	r1, [pc, #600]	@ (800c780 <_strtod_l+0x580>)
 800c528:	aa1c      	add	r2, sp, #112	@ 0x70
 800c52a:	a819      	add	r0, sp, #100	@ 0x64
 800c52c:	f001 fb9c 	bl	800dc68 <__hexnan>
 800c530:	2805      	cmp	r0, #5
 800c532:	d127      	bne.n	800c584 <_strtod_l+0x384>
 800c534:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c536:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c53a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c53e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c542:	e696      	b.n	800c272 <_strtod_l+0x72>
 800c544:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c546:	fb08 2101 	mla	r1, r8, r1, r2
 800c54a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c54e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c550:	e7b5      	b.n	800c4be <_strtod_l+0x2be>
 800c552:	2a6e      	cmp	r2, #110	@ 0x6e
 800c554:	e7da      	b.n	800c50c <_strtod_l+0x30c>
 800c556:	498b      	ldr	r1, [pc, #556]	@ (800c784 <_strtod_l+0x584>)
 800c558:	a819      	add	r0, sp, #100	@ 0x64
 800c55a:	f001 fb71 	bl	800dc40 <__match>
 800c55e:	2800      	cmp	r0, #0
 800c560:	f43f aea2 	beq.w	800c2a8 <_strtod_l+0xa8>
 800c564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c566:	4988      	ldr	r1, [pc, #544]	@ (800c788 <_strtod_l+0x588>)
 800c568:	3b01      	subs	r3, #1
 800c56a:	a819      	add	r0, sp, #100	@ 0x64
 800c56c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c56e:	f001 fb67 	bl	800dc40 <__match>
 800c572:	b910      	cbnz	r0, 800c57a <_strtod_l+0x37a>
 800c574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c576:	3301      	adds	r3, #1
 800c578:	9319      	str	r3, [sp, #100]	@ 0x64
 800c57a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c798 <_strtod_l+0x598>
 800c57e:	f04f 0a00 	mov.w	sl, #0
 800c582:	e676      	b.n	800c272 <_strtod_l+0x72>
 800c584:	4881      	ldr	r0, [pc, #516]	@ (800c78c <_strtod_l+0x58c>)
 800c586:	f001 f85b 	bl	800d640 <nan>
 800c58a:	ec5b ab10 	vmov	sl, fp, d0
 800c58e:	e670      	b.n	800c272 <_strtod_l+0x72>
 800c590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c592:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c594:	eba8 0303 	sub.w	r3, r8, r3
 800c598:	f1b9 0f00 	cmp.w	r9, #0
 800c59c:	bf08      	it	eq
 800c59e:	46a9      	moveq	r9, r5
 800c5a0:	2d10      	cmp	r5, #16
 800c5a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5a4:	462c      	mov	r4, r5
 800c5a6:	bfa8      	it	ge
 800c5a8:	2410      	movge	r4, #16
 800c5aa:	f7f3 ffd3 	bl	8000554 <__aeabi_ui2d>
 800c5ae:	2d09      	cmp	r5, #9
 800c5b0:	4682      	mov	sl, r0
 800c5b2:	468b      	mov	fp, r1
 800c5b4:	dc13      	bgt.n	800c5de <_strtod_l+0x3de>
 800c5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f43f ae5a 	beq.w	800c272 <_strtod_l+0x72>
 800c5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c0:	dd78      	ble.n	800c6b4 <_strtod_l+0x4b4>
 800c5c2:	2b16      	cmp	r3, #22
 800c5c4:	dc5f      	bgt.n	800c686 <_strtod_l+0x486>
 800c5c6:	4972      	ldr	r1, [pc, #456]	@ (800c790 <_strtod_l+0x590>)
 800c5c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5d0:	4652      	mov	r2, sl
 800c5d2:	465b      	mov	r3, fp
 800c5d4:	f7f4 f838 	bl	8000648 <__aeabi_dmul>
 800c5d8:	4682      	mov	sl, r0
 800c5da:	468b      	mov	fp, r1
 800c5dc:	e649      	b.n	800c272 <_strtod_l+0x72>
 800c5de:	4b6c      	ldr	r3, [pc, #432]	@ (800c790 <_strtod_l+0x590>)
 800c5e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c5e8:	f7f4 f82e 	bl	8000648 <__aeabi_dmul>
 800c5ec:	4682      	mov	sl, r0
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	468b      	mov	fp, r1
 800c5f2:	f7f3 ffaf 	bl	8000554 <__aeabi_ui2d>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	4650      	mov	r0, sl
 800c5fc:	4659      	mov	r1, fp
 800c5fe:	f7f3 fe6d 	bl	80002dc <__adddf3>
 800c602:	2d0f      	cmp	r5, #15
 800c604:	4682      	mov	sl, r0
 800c606:	468b      	mov	fp, r1
 800c608:	ddd5      	ble.n	800c5b6 <_strtod_l+0x3b6>
 800c60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c60c:	1b2c      	subs	r4, r5, r4
 800c60e:	441c      	add	r4, r3
 800c610:	2c00      	cmp	r4, #0
 800c612:	f340 8093 	ble.w	800c73c <_strtod_l+0x53c>
 800c616:	f014 030f 	ands.w	r3, r4, #15
 800c61a:	d00a      	beq.n	800c632 <_strtod_l+0x432>
 800c61c:	495c      	ldr	r1, [pc, #368]	@ (800c790 <_strtod_l+0x590>)
 800c61e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c622:	4652      	mov	r2, sl
 800c624:	465b      	mov	r3, fp
 800c626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c62a:	f7f4 f80d 	bl	8000648 <__aeabi_dmul>
 800c62e:	4682      	mov	sl, r0
 800c630:	468b      	mov	fp, r1
 800c632:	f034 040f 	bics.w	r4, r4, #15
 800c636:	d073      	beq.n	800c720 <_strtod_l+0x520>
 800c638:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c63c:	dd49      	ble.n	800c6d2 <_strtod_l+0x4d2>
 800c63e:	2400      	movs	r4, #0
 800c640:	46a0      	mov	r8, r4
 800c642:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c644:	46a1      	mov	r9, r4
 800c646:	9a05      	ldr	r2, [sp, #20]
 800c648:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c798 <_strtod_l+0x598>
 800c64c:	2322      	movs	r3, #34	@ 0x22
 800c64e:	6013      	str	r3, [r2, #0]
 800c650:	f04f 0a00 	mov.w	sl, #0
 800c654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c656:	2b00      	cmp	r3, #0
 800c658:	f43f ae0b 	beq.w	800c272 <_strtod_l+0x72>
 800c65c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c65e:	9805      	ldr	r0, [sp, #20]
 800c660:	f001 fbf0 	bl	800de44 <_Bfree>
 800c664:	9805      	ldr	r0, [sp, #20]
 800c666:	4649      	mov	r1, r9
 800c668:	f001 fbec 	bl	800de44 <_Bfree>
 800c66c:	9805      	ldr	r0, [sp, #20]
 800c66e:	4641      	mov	r1, r8
 800c670:	f001 fbe8 	bl	800de44 <_Bfree>
 800c674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c676:	9805      	ldr	r0, [sp, #20]
 800c678:	f001 fbe4 	bl	800de44 <_Bfree>
 800c67c:	9805      	ldr	r0, [sp, #20]
 800c67e:	4621      	mov	r1, r4
 800c680:	f001 fbe0 	bl	800de44 <_Bfree>
 800c684:	e5f5      	b.n	800c272 <_strtod_l+0x72>
 800c686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c688:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c68c:	4293      	cmp	r3, r2
 800c68e:	dbbc      	blt.n	800c60a <_strtod_l+0x40a>
 800c690:	4c3f      	ldr	r4, [pc, #252]	@ (800c790 <_strtod_l+0x590>)
 800c692:	f1c5 050f 	rsb	r5, r5, #15
 800c696:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c69a:	4652      	mov	r2, sl
 800c69c:	465b      	mov	r3, fp
 800c69e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6a2:	f7f3 ffd1 	bl	8000648 <__aeabi_dmul>
 800c6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a8:	1b5d      	subs	r5, r3, r5
 800c6aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c6ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c6b2:	e78f      	b.n	800c5d4 <_strtod_l+0x3d4>
 800c6b4:	3316      	adds	r3, #22
 800c6b6:	dba8      	blt.n	800c60a <_strtod_l+0x40a>
 800c6b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ba:	eba3 0808 	sub.w	r8, r3, r8
 800c6be:	4b34      	ldr	r3, [pc, #208]	@ (800c790 <_strtod_l+0x590>)
 800c6c0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c6c4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c6c8:	4650      	mov	r0, sl
 800c6ca:	4659      	mov	r1, fp
 800c6cc:	f7f4 f8e6 	bl	800089c <__aeabi_ddiv>
 800c6d0:	e782      	b.n	800c5d8 <_strtod_l+0x3d8>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	4f2f      	ldr	r7, [pc, #188]	@ (800c794 <_strtod_l+0x594>)
 800c6d6:	1124      	asrs	r4, r4, #4
 800c6d8:	4650      	mov	r0, sl
 800c6da:	4659      	mov	r1, fp
 800c6dc:	461e      	mov	r6, r3
 800c6de:	2c01      	cmp	r4, #1
 800c6e0:	dc21      	bgt.n	800c726 <_strtod_l+0x526>
 800c6e2:	b10b      	cbz	r3, 800c6e8 <_strtod_l+0x4e8>
 800c6e4:	4682      	mov	sl, r0
 800c6e6:	468b      	mov	fp, r1
 800c6e8:	492a      	ldr	r1, [pc, #168]	@ (800c794 <_strtod_l+0x594>)
 800c6ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c6ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c6f2:	4652      	mov	r2, sl
 800c6f4:	465b      	mov	r3, fp
 800c6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6fa:	f7f3 ffa5 	bl	8000648 <__aeabi_dmul>
 800c6fe:	4b26      	ldr	r3, [pc, #152]	@ (800c798 <_strtod_l+0x598>)
 800c700:	460a      	mov	r2, r1
 800c702:	400b      	ands	r3, r1
 800c704:	4925      	ldr	r1, [pc, #148]	@ (800c79c <_strtod_l+0x59c>)
 800c706:	428b      	cmp	r3, r1
 800c708:	4682      	mov	sl, r0
 800c70a:	d898      	bhi.n	800c63e <_strtod_l+0x43e>
 800c70c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c710:	428b      	cmp	r3, r1
 800c712:	bf86      	itte	hi
 800c714:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c7a0 <_strtod_l+0x5a0>
 800c718:	f04f 3aff 	movhi.w	sl, #4294967295
 800c71c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c720:	2300      	movs	r3, #0
 800c722:	9308      	str	r3, [sp, #32]
 800c724:	e076      	b.n	800c814 <_strtod_l+0x614>
 800c726:	07e2      	lsls	r2, r4, #31
 800c728:	d504      	bpl.n	800c734 <_strtod_l+0x534>
 800c72a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c72e:	f7f3 ff8b 	bl	8000648 <__aeabi_dmul>
 800c732:	2301      	movs	r3, #1
 800c734:	3601      	adds	r6, #1
 800c736:	1064      	asrs	r4, r4, #1
 800c738:	3708      	adds	r7, #8
 800c73a:	e7d0      	b.n	800c6de <_strtod_l+0x4de>
 800c73c:	d0f0      	beq.n	800c720 <_strtod_l+0x520>
 800c73e:	4264      	negs	r4, r4
 800c740:	f014 020f 	ands.w	r2, r4, #15
 800c744:	d00a      	beq.n	800c75c <_strtod_l+0x55c>
 800c746:	4b12      	ldr	r3, [pc, #72]	@ (800c790 <_strtod_l+0x590>)
 800c748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c74c:	4650      	mov	r0, sl
 800c74e:	4659      	mov	r1, fp
 800c750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c754:	f7f4 f8a2 	bl	800089c <__aeabi_ddiv>
 800c758:	4682      	mov	sl, r0
 800c75a:	468b      	mov	fp, r1
 800c75c:	1124      	asrs	r4, r4, #4
 800c75e:	d0df      	beq.n	800c720 <_strtod_l+0x520>
 800c760:	2c1f      	cmp	r4, #31
 800c762:	dd1f      	ble.n	800c7a4 <_strtod_l+0x5a4>
 800c764:	2400      	movs	r4, #0
 800c766:	46a0      	mov	r8, r4
 800c768:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c76a:	46a1      	mov	r9, r4
 800c76c:	9a05      	ldr	r2, [sp, #20]
 800c76e:	2322      	movs	r3, #34	@ 0x22
 800c770:	f04f 0a00 	mov.w	sl, #0
 800c774:	f04f 0b00 	mov.w	fp, #0
 800c778:	6013      	str	r3, [r2, #0]
 800c77a:	e76b      	b.n	800c654 <_strtod_l+0x454>
 800c77c:	0801011b 	.word	0x0801011b
 800c780:	080102d0 	.word	0x080102d0
 800c784:	08010112 	.word	0x08010112
 800c788:	08010115 	.word	0x08010115
 800c78c:	080101d2 	.word	0x080101d2
 800c790:	08010458 	.word	0x08010458
 800c794:	08010430 	.word	0x08010430
 800c798:	7ff00000 	.word	0x7ff00000
 800c79c:	7ca00000 	.word	0x7ca00000
 800c7a0:	7fefffff 	.word	0x7fefffff
 800c7a4:	f014 0310 	ands.w	r3, r4, #16
 800c7a8:	bf18      	it	ne
 800c7aa:	236a      	movne	r3, #106	@ 0x6a
 800c7ac:	4ea9      	ldr	r6, [pc, #676]	@ (800ca54 <_strtod_l+0x854>)
 800c7ae:	9308      	str	r3, [sp, #32]
 800c7b0:	4650      	mov	r0, sl
 800c7b2:	4659      	mov	r1, fp
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	07e7      	lsls	r7, r4, #31
 800c7b8:	d504      	bpl.n	800c7c4 <_strtod_l+0x5c4>
 800c7ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7be:	f7f3 ff43 	bl	8000648 <__aeabi_dmul>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	1064      	asrs	r4, r4, #1
 800c7c6:	f106 0608 	add.w	r6, r6, #8
 800c7ca:	d1f4      	bne.n	800c7b6 <_strtod_l+0x5b6>
 800c7cc:	b10b      	cbz	r3, 800c7d2 <_strtod_l+0x5d2>
 800c7ce:	4682      	mov	sl, r0
 800c7d0:	468b      	mov	fp, r1
 800c7d2:	9b08      	ldr	r3, [sp, #32]
 800c7d4:	b1b3      	cbz	r3, 800c804 <_strtod_l+0x604>
 800c7d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c7da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	4659      	mov	r1, fp
 800c7e2:	dd0f      	ble.n	800c804 <_strtod_l+0x604>
 800c7e4:	2b1f      	cmp	r3, #31
 800c7e6:	dd56      	ble.n	800c896 <_strtod_l+0x696>
 800c7e8:	2b34      	cmp	r3, #52	@ 0x34
 800c7ea:	bfde      	ittt	le
 800c7ec:	f04f 33ff 	movle.w	r3, #4294967295
 800c7f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c7f4:	4093      	lslle	r3, r2
 800c7f6:	f04f 0a00 	mov.w	sl, #0
 800c7fa:	bfcc      	ite	gt
 800c7fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c800:	ea03 0b01 	andle.w	fp, r3, r1
 800c804:	2200      	movs	r2, #0
 800c806:	2300      	movs	r3, #0
 800c808:	4650      	mov	r0, sl
 800c80a:	4659      	mov	r1, fp
 800c80c:	f7f4 f984 	bl	8000b18 <__aeabi_dcmpeq>
 800c810:	2800      	cmp	r0, #0
 800c812:	d1a7      	bne.n	800c764 <_strtod_l+0x564>
 800c814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c81a:	9805      	ldr	r0, [sp, #20]
 800c81c:	462b      	mov	r3, r5
 800c81e:	464a      	mov	r2, r9
 800c820:	f001 fb78 	bl	800df14 <__s2b>
 800c824:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c826:	2800      	cmp	r0, #0
 800c828:	f43f af09 	beq.w	800c63e <_strtod_l+0x43e>
 800c82c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c82e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c830:	2a00      	cmp	r2, #0
 800c832:	eba3 0308 	sub.w	r3, r3, r8
 800c836:	bfa8      	it	ge
 800c838:	2300      	movge	r3, #0
 800c83a:	9312      	str	r3, [sp, #72]	@ 0x48
 800c83c:	2400      	movs	r4, #0
 800c83e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c842:	9316      	str	r3, [sp, #88]	@ 0x58
 800c844:	46a0      	mov	r8, r4
 800c846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c848:	9805      	ldr	r0, [sp, #20]
 800c84a:	6859      	ldr	r1, [r3, #4]
 800c84c:	f001 faba 	bl	800ddc4 <_Balloc>
 800c850:	4681      	mov	r9, r0
 800c852:	2800      	cmp	r0, #0
 800c854:	f43f aef7 	beq.w	800c646 <_strtod_l+0x446>
 800c858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c85a:	691a      	ldr	r2, [r3, #16]
 800c85c:	3202      	adds	r2, #2
 800c85e:	f103 010c 	add.w	r1, r3, #12
 800c862:	0092      	lsls	r2, r2, #2
 800c864:	300c      	adds	r0, #12
 800c866:	f000 fedc 	bl	800d622 <memcpy>
 800c86a:	ec4b ab10 	vmov	d0, sl, fp
 800c86e:	9805      	ldr	r0, [sp, #20]
 800c870:	aa1c      	add	r2, sp, #112	@ 0x70
 800c872:	a91b      	add	r1, sp, #108	@ 0x6c
 800c874:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c878:	f001 fe80 	bl	800e57c <__d2b>
 800c87c:	901a      	str	r0, [sp, #104]	@ 0x68
 800c87e:	2800      	cmp	r0, #0
 800c880:	f43f aee1 	beq.w	800c646 <_strtod_l+0x446>
 800c884:	9805      	ldr	r0, [sp, #20]
 800c886:	2101      	movs	r1, #1
 800c888:	f001 fbda 	bl	800e040 <__i2b>
 800c88c:	4680      	mov	r8, r0
 800c88e:	b948      	cbnz	r0, 800c8a4 <_strtod_l+0x6a4>
 800c890:	f04f 0800 	mov.w	r8, #0
 800c894:	e6d7      	b.n	800c646 <_strtod_l+0x446>
 800c896:	f04f 32ff 	mov.w	r2, #4294967295
 800c89a:	fa02 f303 	lsl.w	r3, r2, r3
 800c89e:	ea03 0a0a 	and.w	sl, r3, sl
 800c8a2:	e7af      	b.n	800c804 <_strtod_l+0x604>
 800c8a4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c8a6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c8a8:	2d00      	cmp	r5, #0
 800c8aa:	bfab      	itete	ge
 800c8ac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c8ae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c8b0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c8b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c8b4:	bfac      	ite	ge
 800c8b6:	18ef      	addge	r7, r5, r3
 800c8b8:	1b5e      	sublt	r6, r3, r5
 800c8ba:	9b08      	ldr	r3, [sp, #32]
 800c8bc:	1aed      	subs	r5, r5, r3
 800c8be:	4415      	add	r5, r2
 800c8c0:	4b65      	ldr	r3, [pc, #404]	@ (800ca58 <_strtod_l+0x858>)
 800c8c2:	3d01      	subs	r5, #1
 800c8c4:	429d      	cmp	r5, r3
 800c8c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c8ca:	da50      	bge.n	800c96e <_strtod_l+0x76e>
 800c8cc:	1b5b      	subs	r3, r3, r5
 800c8ce:	2b1f      	cmp	r3, #31
 800c8d0:	eba2 0203 	sub.w	r2, r2, r3
 800c8d4:	f04f 0101 	mov.w	r1, #1
 800c8d8:	dc3d      	bgt.n	800c956 <_strtod_l+0x756>
 800c8da:	fa01 f303 	lsl.w	r3, r1, r3
 800c8de:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8e4:	18bd      	adds	r5, r7, r2
 800c8e6:	9b08      	ldr	r3, [sp, #32]
 800c8e8:	42af      	cmp	r7, r5
 800c8ea:	4416      	add	r6, r2
 800c8ec:	441e      	add	r6, r3
 800c8ee:	463b      	mov	r3, r7
 800c8f0:	bfa8      	it	ge
 800c8f2:	462b      	movge	r3, r5
 800c8f4:	42b3      	cmp	r3, r6
 800c8f6:	bfa8      	it	ge
 800c8f8:	4633      	movge	r3, r6
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	bfc2      	ittt	gt
 800c8fe:	1aed      	subgt	r5, r5, r3
 800c900:	1af6      	subgt	r6, r6, r3
 800c902:	1aff      	subgt	r7, r7, r3
 800c904:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c906:	2b00      	cmp	r3, #0
 800c908:	dd16      	ble.n	800c938 <_strtod_l+0x738>
 800c90a:	4641      	mov	r1, r8
 800c90c:	9805      	ldr	r0, [sp, #20]
 800c90e:	461a      	mov	r2, r3
 800c910:	f001 fc4e 	bl	800e1b0 <__pow5mult>
 800c914:	4680      	mov	r8, r0
 800c916:	2800      	cmp	r0, #0
 800c918:	d0ba      	beq.n	800c890 <_strtod_l+0x690>
 800c91a:	4601      	mov	r1, r0
 800c91c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c91e:	9805      	ldr	r0, [sp, #20]
 800c920:	f001 fba4 	bl	800e06c <__multiply>
 800c924:	900a      	str	r0, [sp, #40]	@ 0x28
 800c926:	2800      	cmp	r0, #0
 800c928:	f43f ae8d 	beq.w	800c646 <_strtod_l+0x446>
 800c92c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c92e:	9805      	ldr	r0, [sp, #20]
 800c930:	f001 fa88 	bl	800de44 <_Bfree>
 800c934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c936:	931a      	str	r3, [sp, #104]	@ 0x68
 800c938:	2d00      	cmp	r5, #0
 800c93a:	dc1d      	bgt.n	800c978 <_strtod_l+0x778>
 800c93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c93e:	2b00      	cmp	r3, #0
 800c940:	dd23      	ble.n	800c98a <_strtod_l+0x78a>
 800c942:	4649      	mov	r1, r9
 800c944:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c946:	9805      	ldr	r0, [sp, #20]
 800c948:	f001 fc32 	bl	800e1b0 <__pow5mult>
 800c94c:	4681      	mov	r9, r0
 800c94e:	b9e0      	cbnz	r0, 800c98a <_strtod_l+0x78a>
 800c950:	f04f 0900 	mov.w	r9, #0
 800c954:	e677      	b.n	800c646 <_strtod_l+0x446>
 800c956:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c95a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c95e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c962:	35e2      	adds	r5, #226	@ 0xe2
 800c964:	fa01 f305 	lsl.w	r3, r1, r5
 800c968:	9310      	str	r3, [sp, #64]	@ 0x40
 800c96a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c96c:	e7ba      	b.n	800c8e4 <_strtod_l+0x6e4>
 800c96e:	2300      	movs	r3, #0
 800c970:	9310      	str	r3, [sp, #64]	@ 0x40
 800c972:	2301      	movs	r3, #1
 800c974:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c976:	e7b5      	b.n	800c8e4 <_strtod_l+0x6e4>
 800c978:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c97a:	9805      	ldr	r0, [sp, #20]
 800c97c:	462a      	mov	r2, r5
 800c97e:	f001 fc71 	bl	800e264 <__lshift>
 800c982:	901a      	str	r0, [sp, #104]	@ 0x68
 800c984:	2800      	cmp	r0, #0
 800c986:	d1d9      	bne.n	800c93c <_strtod_l+0x73c>
 800c988:	e65d      	b.n	800c646 <_strtod_l+0x446>
 800c98a:	2e00      	cmp	r6, #0
 800c98c:	dd07      	ble.n	800c99e <_strtod_l+0x79e>
 800c98e:	4649      	mov	r1, r9
 800c990:	9805      	ldr	r0, [sp, #20]
 800c992:	4632      	mov	r2, r6
 800c994:	f001 fc66 	bl	800e264 <__lshift>
 800c998:	4681      	mov	r9, r0
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d0d8      	beq.n	800c950 <_strtod_l+0x750>
 800c99e:	2f00      	cmp	r7, #0
 800c9a0:	dd08      	ble.n	800c9b4 <_strtod_l+0x7b4>
 800c9a2:	4641      	mov	r1, r8
 800c9a4:	9805      	ldr	r0, [sp, #20]
 800c9a6:	463a      	mov	r2, r7
 800c9a8:	f001 fc5c 	bl	800e264 <__lshift>
 800c9ac:	4680      	mov	r8, r0
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f43f ae49 	beq.w	800c646 <_strtod_l+0x446>
 800c9b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9b6:	9805      	ldr	r0, [sp, #20]
 800c9b8:	464a      	mov	r2, r9
 800c9ba:	f001 fcdb 	bl	800e374 <__mdiff>
 800c9be:	4604      	mov	r4, r0
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	f43f ae40 	beq.w	800c646 <_strtod_l+0x446>
 800c9c6:	68c3      	ldr	r3, [r0, #12]
 800c9c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60c3      	str	r3, [r0, #12]
 800c9ce:	4641      	mov	r1, r8
 800c9d0:	f001 fcb4 	bl	800e33c <__mcmp>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	da45      	bge.n	800ca64 <_strtod_l+0x864>
 800c9d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9da:	ea53 030a 	orrs.w	r3, r3, sl
 800c9de:	d16b      	bne.n	800cab8 <_strtod_l+0x8b8>
 800c9e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d167      	bne.n	800cab8 <_strtod_l+0x8b8>
 800c9e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9ec:	0d1b      	lsrs	r3, r3, #20
 800c9ee:	051b      	lsls	r3, r3, #20
 800c9f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c9f4:	d960      	bls.n	800cab8 <_strtod_l+0x8b8>
 800c9f6:	6963      	ldr	r3, [r4, #20]
 800c9f8:	b913      	cbnz	r3, 800ca00 <_strtod_l+0x800>
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	dd5b      	ble.n	800cab8 <_strtod_l+0x8b8>
 800ca00:	4621      	mov	r1, r4
 800ca02:	2201      	movs	r2, #1
 800ca04:	9805      	ldr	r0, [sp, #20]
 800ca06:	f001 fc2d 	bl	800e264 <__lshift>
 800ca0a:	4641      	mov	r1, r8
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	f001 fc95 	bl	800e33c <__mcmp>
 800ca12:	2800      	cmp	r0, #0
 800ca14:	dd50      	ble.n	800cab8 <_strtod_l+0x8b8>
 800ca16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca1a:	9a08      	ldr	r2, [sp, #32]
 800ca1c:	0d1b      	lsrs	r3, r3, #20
 800ca1e:	051b      	lsls	r3, r3, #20
 800ca20:	2a00      	cmp	r2, #0
 800ca22:	d06a      	beq.n	800cafa <_strtod_l+0x8fa>
 800ca24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca28:	d867      	bhi.n	800cafa <_strtod_l+0x8fa>
 800ca2a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ca2e:	f67f ae9d 	bls.w	800c76c <_strtod_l+0x56c>
 800ca32:	4b0a      	ldr	r3, [pc, #40]	@ (800ca5c <_strtod_l+0x85c>)
 800ca34:	4650      	mov	r0, sl
 800ca36:	4659      	mov	r1, fp
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f7f3 fe05 	bl	8000648 <__aeabi_dmul>
 800ca3e:	4b08      	ldr	r3, [pc, #32]	@ (800ca60 <_strtod_l+0x860>)
 800ca40:	400b      	ands	r3, r1
 800ca42:	4682      	mov	sl, r0
 800ca44:	468b      	mov	fp, r1
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f47f ae08 	bne.w	800c65c <_strtod_l+0x45c>
 800ca4c:	9a05      	ldr	r2, [sp, #20]
 800ca4e:	2322      	movs	r3, #34	@ 0x22
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	e603      	b.n	800c65c <_strtod_l+0x45c>
 800ca54:	080102f8 	.word	0x080102f8
 800ca58:	fffffc02 	.word	0xfffffc02
 800ca5c:	39500000 	.word	0x39500000
 800ca60:	7ff00000 	.word	0x7ff00000
 800ca64:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ca68:	d165      	bne.n	800cb36 <_strtod_l+0x936>
 800ca6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca70:	b35a      	cbz	r2, 800caca <_strtod_l+0x8ca>
 800ca72:	4a9f      	ldr	r2, [pc, #636]	@ (800ccf0 <_strtod_l+0xaf0>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d12b      	bne.n	800cad0 <_strtod_l+0x8d0>
 800ca78:	9b08      	ldr	r3, [sp, #32]
 800ca7a:	4651      	mov	r1, sl
 800ca7c:	b303      	cbz	r3, 800cac0 <_strtod_l+0x8c0>
 800ca7e:	4b9d      	ldr	r3, [pc, #628]	@ (800ccf4 <_strtod_l+0xaf4>)
 800ca80:	465a      	mov	r2, fp
 800ca82:	4013      	ands	r3, r2
 800ca84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ca88:	f04f 32ff 	mov.w	r2, #4294967295
 800ca8c:	d81b      	bhi.n	800cac6 <_strtod_l+0x8c6>
 800ca8e:	0d1b      	lsrs	r3, r3, #20
 800ca90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca94:	fa02 f303 	lsl.w	r3, r2, r3
 800ca98:	4299      	cmp	r1, r3
 800ca9a:	d119      	bne.n	800cad0 <_strtod_l+0x8d0>
 800ca9c:	4b96      	ldr	r3, [pc, #600]	@ (800ccf8 <_strtod_l+0xaf8>)
 800ca9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d102      	bne.n	800caaa <_strtod_l+0x8aa>
 800caa4:	3101      	adds	r1, #1
 800caa6:	f43f adce 	beq.w	800c646 <_strtod_l+0x446>
 800caaa:	4b92      	ldr	r3, [pc, #584]	@ (800ccf4 <_strtod_l+0xaf4>)
 800caac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800caae:	401a      	ands	r2, r3
 800cab0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cab4:	f04f 0a00 	mov.w	sl, #0
 800cab8:	9b08      	ldr	r3, [sp, #32]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1b9      	bne.n	800ca32 <_strtod_l+0x832>
 800cabe:	e5cd      	b.n	800c65c <_strtod_l+0x45c>
 800cac0:	f04f 33ff 	mov.w	r3, #4294967295
 800cac4:	e7e8      	b.n	800ca98 <_strtod_l+0x898>
 800cac6:	4613      	mov	r3, r2
 800cac8:	e7e6      	b.n	800ca98 <_strtod_l+0x898>
 800caca:	ea53 030a 	orrs.w	r3, r3, sl
 800cace:	d0a2      	beq.n	800ca16 <_strtod_l+0x816>
 800cad0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cad2:	b1db      	cbz	r3, 800cb0c <_strtod_l+0x90c>
 800cad4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cad6:	4213      	tst	r3, r2
 800cad8:	d0ee      	beq.n	800cab8 <_strtod_l+0x8b8>
 800cada:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cadc:	9a08      	ldr	r2, [sp, #32]
 800cade:	4650      	mov	r0, sl
 800cae0:	4659      	mov	r1, fp
 800cae2:	b1bb      	cbz	r3, 800cb14 <_strtod_l+0x914>
 800cae4:	f7ff fb6c 	bl	800c1c0 <sulp>
 800cae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800caec:	ec53 2b10 	vmov	r2, r3, d0
 800caf0:	f7f3 fbf4 	bl	80002dc <__adddf3>
 800caf4:	4682      	mov	sl, r0
 800caf6:	468b      	mov	fp, r1
 800caf8:	e7de      	b.n	800cab8 <_strtod_l+0x8b8>
 800cafa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cafe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cb02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb06:	f04f 3aff 	mov.w	sl, #4294967295
 800cb0a:	e7d5      	b.n	800cab8 <_strtod_l+0x8b8>
 800cb0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb0e:	ea13 0f0a 	tst.w	r3, sl
 800cb12:	e7e1      	b.n	800cad8 <_strtod_l+0x8d8>
 800cb14:	f7ff fb54 	bl	800c1c0 <sulp>
 800cb18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb1c:	ec53 2b10 	vmov	r2, r3, d0
 800cb20:	f7f3 fbda 	bl	80002d8 <__aeabi_dsub>
 800cb24:	2200      	movs	r2, #0
 800cb26:	2300      	movs	r3, #0
 800cb28:	4682      	mov	sl, r0
 800cb2a:	468b      	mov	fp, r1
 800cb2c:	f7f3 fff4 	bl	8000b18 <__aeabi_dcmpeq>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d0c1      	beq.n	800cab8 <_strtod_l+0x8b8>
 800cb34:	e61a      	b.n	800c76c <_strtod_l+0x56c>
 800cb36:	4641      	mov	r1, r8
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f001 fd77 	bl	800e62c <__ratio>
 800cb3e:	ec57 6b10 	vmov	r6, r7, d0
 800cb42:	2200      	movs	r2, #0
 800cb44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb48:	4630      	mov	r0, r6
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	f7f3 fff8 	bl	8000b40 <__aeabi_dcmple>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d06f      	beq.n	800cc34 <_strtod_l+0xa34>
 800cb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d17a      	bne.n	800cc50 <_strtod_l+0xa50>
 800cb5a:	f1ba 0f00 	cmp.w	sl, #0
 800cb5e:	d158      	bne.n	800cc12 <_strtod_l+0xa12>
 800cb60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d15a      	bne.n	800cc20 <_strtod_l+0xa20>
 800cb6a:	4b64      	ldr	r3, [pc, #400]	@ (800ccfc <_strtod_l+0xafc>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	4630      	mov	r0, r6
 800cb70:	4639      	mov	r1, r7
 800cb72:	f7f3 ffdb 	bl	8000b2c <__aeabi_dcmplt>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d159      	bne.n	800cc2e <_strtod_l+0xa2e>
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	4b60      	ldr	r3, [pc, #384]	@ (800cd00 <_strtod_l+0xb00>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	f7f3 fd61 	bl	8000648 <__aeabi_dmul>
 800cb86:	4606      	mov	r6, r0
 800cb88:	460f      	mov	r7, r1
 800cb8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cb8e:	9606      	str	r6, [sp, #24]
 800cb90:	9307      	str	r3, [sp, #28]
 800cb92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb96:	4d57      	ldr	r5, [pc, #348]	@ (800ccf4 <_strtod_l+0xaf4>)
 800cb98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cb9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb9e:	401d      	ands	r5, r3
 800cba0:	4b58      	ldr	r3, [pc, #352]	@ (800cd04 <_strtod_l+0xb04>)
 800cba2:	429d      	cmp	r5, r3
 800cba4:	f040 80b2 	bne.w	800cd0c <_strtod_l+0xb0c>
 800cba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cbae:	ec4b ab10 	vmov	d0, sl, fp
 800cbb2:	f001 fc73 	bl	800e49c <__ulp>
 800cbb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbba:	ec51 0b10 	vmov	r0, r1, d0
 800cbbe:	f7f3 fd43 	bl	8000648 <__aeabi_dmul>
 800cbc2:	4652      	mov	r2, sl
 800cbc4:	465b      	mov	r3, fp
 800cbc6:	f7f3 fb89 	bl	80002dc <__adddf3>
 800cbca:	460b      	mov	r3, r1
 800cbcc:	4949      	ldr	r1, [pc, #292]	@ (800ccf4 <_strtod_l+0xaf4>)
 800cbce:	4a4e      	ldr	r2, [pc, #312]	@ (800cd08 <_strtod_l+0xb08>)
 800cbd0:	4019      	ands	r1, r3
 800cbd2:	4291      	cmp	r1, r2
 800cbd4:	4682      	mov	sl, r0
 800cbd6:	d942      	bls.n	800cc5e <_strtod_l+0xa5e>
 800cbd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cbda:	4b47      	ldr	r3, [pc, #284]	@ (800ccf8 <_strtod_l+0xaf8>)
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d103      	bne.n	800cbe8 <_strtod_l+0x9e8>
 800cbe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	f43f ad2f 	beq.w	800c646 <_strtod_l+0x446>
 800cbe8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ccf8 <_strtod_l+0xaf8>
 800cbec:	f04f 3aff 	mov.w	sl, #4294967295
 800cbf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbf2:	9805      	ldr	r0, [sp, #20]
 800cbf4:	f001 f926 	bl	800de44 <_Bfree>
 800cbf8:	9805      	ldr	r0, [sp, #20]
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	f001 f922 	bl	800de44 <_Bfree>
 800cc00:	9805      	ldr	r0, [sp, #20]
 800cc02:	4641      	mov	r1, r8
 800cc04:	f001 f91e 	bl	800de44 <_Bfree>
 800cc08:	9805      	ldr	r0, [sp, #20]
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	f001 f91a 	bl	800de44 <_Bfree>
 800cc10:	e619      	b.n	800c846 <_strtod_l+0x646>
 800cc12:	f1ba 0f01 	cmp.w	sl, #1
 800cc16:	d103      	bne.n	800cc20 <_strtod_l+0xa20>
 800cc18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f43f ada6 	beq.w	800c76c <_strtod_l+0x56c>
 800cc20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ccd0 <_strtod_l+0xad0>
 800cc24:	4f35      	ldr	r7, [pc, #212]	@ (800ccfc <_strtod_l+0xafc>)
 800cc26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc2a:	2600      	movs	r6, #0
 800cc2c:	e7b1      	b.n	800cb92 <_strtod_l+0x992>
 800cc2e:	4f34      	ldr	r7, [pc, #208]	@ (800cd00 <_strtod_l+0xb00>)
 800cc30:	2600      	movs	r6, #0
 800cc32:	e7aa      	b.n	800cb8a <_strtod_l+0x98a>
 800cc34:	4b32      	ldr	r3, [pc, #200]	@ (800cd00 <_strtod_l+0xb00>)
 800cc36:	4630      	mov	r0, r6
 800cc38:	4639      	mov	r1, r7
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f7f3 fd04 	bl	8000648 <__aeabi_dmul>
 800cc40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc42:	4606      	mov	r6, r0
 800cc44:	460f      	mov	r7, r1
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d09f      	beq.n	800cb8a <_strtod_l+0x98a>
 800cc4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc4e:	e7a0      	b.n	800cb92 <_strtod_l+0x992>
 800cc50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ccd8 <_strtod_l+0xad8>
 800cc54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc58:	ec57 6b17 	vmov	r6, r7, d7
 800cc5c:	e799      	b.n	800cb92 <_strtod_l+0x992>
 800cc5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cc62:	9b08      	ldr	r3, [sp, #32]
 800cc64:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1c1      	bne.n	800cbf0 <_strtod_l+0x9f0>
 800cc6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc70:	0d1b      	lsrs	r3, r3, #20
 800cc72:	051b      	lsls	r3, r3, #20
 800cc74:	429d      	cmp	r5, r3
 800cc76:	d1bb      	bne.n	800cbf0 <_strtod_l+0x9f0>
 800cc78:	4630      	mov	r0, r6
 800cc7a:	4639      	mov	r1, r7
 800cc7c:	f7f4 f81c 	bl	8000cb8 <__aeabi_d2lz>
 800cc80:	f7f3 fcb4 	bl	80005ec <__aeabi_l2d>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4630      	mov	r0, r6
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	f7f3 fb24 	bl	80002d8 <__aeabi_dsub>
 800cc90:	460b      	mov	r3, r1
 800cc92:	4602      	mov	r2, r0
 800cc94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cc98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cc9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc9e:	ea46 060a 	orr.w	r6, r6, sl
 800cca2:	431e      	orrs	r6, r3
 800cca4:	d06f      	beq.n	800cd86 <_strtod_l+0xb86>
 800cca6:	a30e      	add	r3, pc, #56	@ (adr r3, 800cce0 <_strtod_l+0xae0>)
 800cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccac:	f7f3 ff3e 	bl	8000b2c <__aeabi_dcmplt>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	f47f acd3 	bne.w	800c65c <_strtod_l+0x45c>
 800ccb6:	a30c      	add	r3, pc, #48	@ (adr r3, 800cce8 <_strtod_l+0xae8>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccc0:	f7f3 ff52 	bl	8000b68 <__aeabi_dcmpgt>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d093      	beq.n	800cbf0 <_strtod_l+0x9f0>
 800ccc8:	e4c8      	b.n	800c65c <_strtod_l+0x45c>
 800ccca:	bf00      	nop
 800cccc:	f3af 8000 	nop.w
 800ccd0:	00000000 	.word	0x00000000
 800ccd4:	bff00000 	.word	0xbff00000
 800ccd8:	00000000 	.word	0x00000000
 800ccdc:	3ff00000 	.word	0x3ff00000
 800cce0:	94a03595 	.word	0x94a03595
 800cce4:	3fdfffff 	.word	0x3fdfffff
 800cce8:	35afe535 	.word	0x35afe535
 800ccec:	3fe00000 	.word	0x3fe00000
 800ccf0:	000fffff 	.word	0x000fffff
 800ccf4:	7ff00000 	.word	0x7ff00000
 800ccf8:	7fefffff 	.word	0x7fefffff
 800ccfc:	3ff00000 	.word	0x3ff00000
 800cd00:	3fe00000 	.word	0x3fe00000
 800cd04:	7fe00000 	.word	0x7fe00000
 800cd08:	7c9fffff 	.word	0x7c9fffff
 800cd0c:	9b08      	ldr	r3, [sp, #32]
 800cd0e:	b323      	cbz	r3, 800cd5a <_strtod_l+0xb5a>
 800cd10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cd14:	d821      	bhi.n	800cd5a <_strtod_l+0xb5a>
 800cd16:	a328      	add	r3, pc, #160	@ (adr r3, 800cdb8 <_strtod_l+0xbb8>)
 800cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	4639      	mov	r1, r7
 800cd20:	f7f3 ff0e 	bl	8000b40 <__aeabi_dcmple>
 800cd24:	b1a0      	cbz	r0, 800cd50 <_strtod_l+0xb50>
 800cd26:	4639      	mov	r1, r7
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f7f3 ff3d 	bl	8000ba8 <__aeabi_d2uiz>
 800cd2e:	2801      	cmp	r0, #1
 800cd30:	bf38      	it	cc
 800cd32:	2001      	movcc	r0, #1
 800cd34:	f7f3 fc0e 	bl	8000554 <__aeabi_ui2d>
 800cd38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	460f      	mov	r7, r1
 800cd3e:	b9fb      	cbnz	r3, 800cd80 <_strtod_l+0xb80>
 800cd40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd44:	9014      	str	r0, [sp, #80]	@ 0x50
 800cd46:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cd4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cd56:	1b5b      	subs	r3, r3, r5
 800cd58:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cd62:	f001 fb9b 	bl	800e49c <__ulp>
 800cd66:	4650      	mov	r0, sl
 800cd68:	ec53 2b10 	vmov	r2, r3, d0
 800cd6c:	4659      	mov	r1, fp
 800cd6e:	f7f3 fc6b 	bl	8000648 <__aeabi_dmul>
 800cd72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cd76:	f7f3 fab1 	bl	80002dc <__adddf3>
 800cd7a:	4682      	mov	sl, r0
 800cd7c:	468b      	mov	fp, r1
 800cd7e:	e770      	b.n	800cc62 <_strtod_l+0xa62>
 800cd80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cd84:	e7e0      	b.n	800cd48 <_strtod_l+0xb48>
 800cd86:	a30e      	add	r3, pc, #56	@ (adr r3, 800cdc0 <_strtod_l+0xbc0>)
 800cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8c:	f7f3 fece 	bl	8000b2c <__aeabi_dcmplt>
 800cd90:	e798      	b.n	800ccc4 <_strtod_l+0xac4>
 800cd92:	2300      	movs	r3, #0
 800cd94:	930e      	str	r3, [sp, #56]	@ 0x38
 800cd96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cd98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	f7ff ba6d 	b.w	800c27a <_strtod_l+0x7a>
 800cda0:	2a65      	cmp	r2, #101	@ 0x65
 800cda2:	f43f ab68 	beq.w	800c476 <_strtod_l+0x276>
 800cda6:	2a45      	cmp	r2, #69	@ 0x45
 800cda8:	f43f ab65 	beq.w	800c476 <_strtod_l+0x276>
 800cdac:	2301      	movs	r3, #1
 800cdae:	f7ff bba0 	b.w	800c4f2 <_strtod_l+0x2f2>
 800cdb2:	bf00      	nop
 800cdb4:	f3af 8000 	nop.w
 800cdb8:	ffc00000 	.word	0xffc00000
 800cdbc:	41dfffff 	.word	0x41dfffff
 800cdc0:	94a03595 	.word	0x94a03595
 800cdc4:	3fcfffff 	.word	0x3fcfffff

0800cdc8 <strtof>:
 800cdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdcc:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800ce8c <strtof+0xc4>
 800cdd0:	4b29      	ldr	r3, [pc, #164]	@ (800ce78 <strtof+0xb0>)
 800cdd2:	460a      	mov	r2, r1
 800cdd4:	ed2d 8b02 	vpush	{d8}
 800cdd8:	4601      	mov	r1, r0
 800cdda:	f8d8 0000 	ldr.w	r0, [r8]
 800cdde:	f7ff fa0f 	bl	800c200 <_strtod_l>
 800cde2:	ec55 4b10 	vmov	r4, r5, d0
 800cde6:	4622      	mov	r2, r4
 800cde8:	462b      	mov	r3, r5
 800cdea:	4620      	mov	r0, r4
 800cdec:	4629      	mov	r1, r5
 800cdee:	f7f3 fec5 	bl	8000b7c <__aeabi_dcmpun>
 800cdf2:	b190      	cbz	r0, 800ce1a <strtof+0x52>
 800cdf4:	2d00      	cmp	r5, #0
 800cdf6:	4821      	ldr	r0, [pc, #132]	@ (800ce7c <strtof+0xb4>)
 800cdf8:	da09      	bge.n	800ce0e <strtof+0x46>
 800cdfa:	f000 fc29 	bl	800d650 <nanf>
 800cdfe:	eeb1 8a40 	vneg.f32	s16, s0
 800ce02:	eeb0 0a48 	vmov.f32	s0, s16
 800ce06:	ecbd 8b02 	vpop	{d8}
 800ce0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce0e:	ecbd 8b02 	vpop	{d8}
 800ce12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce16:	f000 bc1b 	b.w	800d650 <nanf>
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	f7f3 fee3 	bl	8000be8 <__aeabi_d2f>
 800ce22:	ee08 0a10 	vmov	s16, r0
 800ce26:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800ce80 <strtof+0xb8>
 800ce2a:	eeb0 7ac8 	vabs.f32	s14, s16
 800ce2e:	eeb4 7a67 	vcmp.f32	s14, s15
 800ce32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce36:	dd11      	ble.n	800ce5c <strtof+0x94>
 800ce38:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800ce3c:	4b11      	ldr	r3, [pc, #68]	@ (800ce84 <strtof+0xbc>)
 800ce3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce42:	4620      	mov	r0, r4
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 fe99 	bl	8000b7c <__aeabi_dcmpun>
 800ce4a:	b980      	cbnz	r0, 800ce6e <strtof+0xa6>
 800ce4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ce84 <strtof+0xbc>)
 800ce4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce52:	4620      	mov	r0, r4
 800ce54:	4639      	mov	r1, r7
 800ce56:	f7f3 fe73 	bl	8000b40 <__aeabi_dcmple>
 800ce5a:	b940      	cbnz	r0, 800ce6e <strtof+0xa6>
 800ce5c:	ee18 3a10 	vmov	r3, s16
 800ce60:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ce64:	d1cd      	bne.n	800ce02 <strtof+0x3a>
 800ce66:	4b08      	ldr	r3, [pc, #32]	@ (800ce88 <strtof+0xc0>)
 800ce68:	402b      	ands	r3, r5
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d0c9      	beq.n	800ce02 <strtof+0x3a>
 800ce6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce72:	2222      	movs	r2, #34	@ 0x22
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	e7c4      	b.n	800ce02 <strtof+0x3a>
 800ce78:	20000028 	.word	0x20000028
 800ce7c:	080101d2 	.word	0x080101d2
 800ce80:	7f7fffff 	.word	0x7f7fffff
 800ce84:	7fefffff 	.word	0x7fefffff
 800ce88:	7ff00000 	.word	0x7ff00000
 800ce8c:	20000194 	.word	0x20000194

0800ce90 <_strtol_l.isra.0>:
 800ce90:	2b24      	cmp	r3, #36	@ 0x24
 800ce92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce96:	4686      	mov	lr, r0
 800ce98:	4690      	mov	r8, r2
 800ce9a:	d801      	bhi.n	800cea0 <_strtol_l.isra.0+0x10>
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d106      	bne.n	800ceae <_strtol_l.isra.0+0x1e>
 800cea0:	f000 fb8a 	bl	800d5b8 <__errno>
 800cea4:	2316      	movs	r3, #22
 800cea6:	6003      	str	r3, [r0, #0]
 800cea8:	2000      	movs	r0, #0
 800ceaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceae:	4834      	ldr	r0, [pc, #208]	@ (800cf80 <_strtol_l.isra.0+0xf0>)
 800ceb0:	460d      	mov	r5, r1
 800ceb2:	462a      	mov	r2, r5
 800ceb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ceb8:	5d06      	ldrb	r6, [r0, r4]
 800ceba:	f016 0608 	ands.w	r6, r6, #8
 800cebe:	d1f8      	bne.n	800ceb2 <_strtol_l.isra.0+0x22>
 800cec0:	2c2d      	cmp	r4, #45	@ 0x2d
 800cec2:	d110      	bne.n	800cee6 <_strtol_l.isra.0+0x56>
 800cec4:	782c      	ldrb	r4, [r5, #0]
 800cec6:	2601      	movs	r6, #1
 800cec8:	1c95      	adds	r5, r2, #2
 800ceca:	f033 0210 	bics.w	r2, r3, #16
 800cece:	d115      	bne.n	800cefc <_strtol_l.isra.0+0x6c>
 800ced0:	2c30      	cmp	r4, #48	@ 0x30
 800ced2:	d10d      	bne.n	800cef0 <_strtol_l.isra.0+0x60>
 800ced4:	782a      	ldrb	r2, [r5, #0]
 800ced6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ceda:	2a58      	cmp	r2, #88	@ 0x58
 800cedc:	d108      	bne.n	800cef0 <_strtol_l.isra.0+0x60>
 800cede:	786c      	ldrb	r4, [r5, #1]
 800cee0:	3502      	adds	r5, #2
 800cee2:	2310      	movs	r3, #16
 800cee4:	e00a      	b.n	800cefc <_strtol_l.isra.0+0x6c>
 800cee6:	2c2b      	cmp	r4, #43	@ 0x2b
 800cee8:	bf04      	itt	eq
 800ceea:	782c      	ldrbeq	r4, [r5, #0]
 800ceec:	1c95      	addeq	r5, r2, #2
 800ceee:	e7ec      	b.n	800ceca <_strtol_l.isra.0+0x3a>
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1f6      	bne.n	800cee2 <_strtol_l.isra.0+0x52>
 800cef4:	2c30      	cmp	r4, #48	@ 0x30
 800cef6:	bf14      	ite	ne
 800cef8:	230a      	movne	r3, #10
 800cefa:	2308      	moveq	r3, #8
 800cefc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cf00:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cf04:	2200      	movs	r2, #0
 800cf06:	fbbc f9f3 	udiv	r9, ip, r3
 800cf0a:	4610      	mov	r0, r2
 800cf0c:	fb03 ca19 	mls	sl, r3, r9, ip
 800cf10:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cf14:	2f09      	cmp	r7, #9
 800cf16:	d80f      	bhi.n	800cf38 <_strtol_l.isra.0+0xa8>
 800cf18:	463c      	mov	r4, r7
 800cf1a:	42a3      	cmp	r3, r4
 800cf1c:	dd1b      	ble.n	800cf56 <_strtol_l.isra.0+0xc6>
 800cf1e:	1c57      	adds	r7, r2, #1
 800cf20:	d007      	beq.n	800cf32 <_strtol_l.isra.0+0xa2>
 800cf22:	4581      	cmp	r9, r0
 800cf24:	d314      	bcc.n	800cf50 <_strtol_l.isra.0+0xc0>
 800cf26:	d101      	bne.n	800cf2c <_strtol_l.isra.0+0x9c>
 800cf28:	45a2      	cmp	sl, r4
 800cf2a:	db11      	blt.n	800cf50 <_strtol_l.isra.0+0xc0>
 800cf2c:	fb00 4003 	mla	r0, r0, r3, r4
 800cf30:	2201      	movs	r2, #1
 800cf32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf36:	e7eb      	b.n	800cf10 <_strtol_l.isra.0+0x80>
 800cf38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cf3c:	2f19      	cmp	r7, #25
 800cf3e:	d801      	bhi.n	800cf44 <_strtol_l.isra.0+0xb4>
 800cf40:	3c37      	subs	r4, #55	@ 0x37
 800cf42:	e7ea      	b.n	800cf1a <_strtol_l.isra.0+0x8a>
 800cf44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cf48:	2f19      	cmp	r7, #25
 800cf4a:	d804      	bhi.n	800cf56 <_strtol_l.isra.0+0xc6>
 800cf4c:	3c57      	subs	r4, #87	@ 0x57
 800cf4e:	e7e4      	b.n	800cf1a <_strtol_l.isra.0+0x8a>
 800cf50:	f04f 32ff 	mov.w	r2, #4294967295
 800cf54:	e7ed      	b.n	800cf32 <_strtol_l.isra.0+0xa2>
 800cf56:	1c53      	adds	r3, r2, #1
 800cf58:	d108      	bne.n	800cf6c <_strtol_l.isra.0+0xdc>
 800cf5a:	2322      	movs	r3, #34	@ 0x22
 800cf5c:	f8ce 3000 	str.w	r3, [lr]
 800cf60:	4660      	mov	r0, ip
 800cf62:	f1b8 0f00 	cmp.w	r8, #0
 800cf66:	d0a0      	beq.n	800ceaa <_strtol_l.isra.0+0x1a>
 800cf68:	1e69      	subs	r1, r5, #1
 800cf6a:	e006      	b.n	800cf7a <_strtol_l.isra.0+0xea>
 800cf6c:	b106      	cbz	r6, 800cf70 <_strtol_l.isra.0+0xe0>
 800cf6e:	4240      	negs	r0, r0
 800cf70:	f1b8 0f00 	cmp.w	r8, #0
 800cf74:	d099      	beq.n	800ceaa <_strtol_l.isra.0+0x1a>
 800cf76:	2a00      	cmp	r2, #0
 800cf78:	d1f6      	bne.n	800cf68 <_strtol_l.isra.0+0xd8>
 800cf7a:	f8c8 1000 	str.w	r1, [r8]
 800cf7e:	e794      	b.n	800ceaa <_strtol_l.isra.0+0x1a>
 800cf80:	08010321 	.word	0x08010321

0800cf84 <strtol>:
 800cf84:	4613      	mov	r3, r2
 800cf86:	460a      	mov	r2, r1
 800cf88:	4601      	mov	r1, r0
 800cf8a:	4802      	ldr	r0, [pc, #8]	@ (800cf94 <strtol+0x10>)
 800cf8c:	6800      	ldr	r0, [r0, #0]
 800cf8e:	f7ff bf7f 	b.w	800ce90 <_strtol_l.isra.0>
 800cf92:	bf00      	nop
 800cf94:	20000194 	.word	0x20000194

0800cf98 <std>:
 800cf98:	2300      	movs	r3, #0
 800cf9a:	b510      	push	{r4, lr}
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	e9c0 3300 	strd	r3, r3, [r0]
 800cfa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfa6:	6083      	str	r3, [r0, #8]
 800cfa8:	8181      	strh	r1, [r0, #12]
 800cfaa:	6643      	str	r3, [r0, #100]	@ 0x64
 800cfac:	81c2      	strh	r2, [r0, #14]
 800cfae:	6183      	str	r3, [r0, #24]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	2208      	movs	r2, #8
 800cfb4:	305c      	adds	r0, #92	@ 0x5c
 800cfb6:	f000 fa1d 	bl	800d3f4 <memset>
 800cfba:	4b0d      	ldr	r3, [pc, #52]	@ (800cff0 <std+0x58>)
 800cfbc:	6263      	str	r3, [r4, #36]	@ 0x24
 800cfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800cff4 <std+0x5c>)
 800cfc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cfc2:	4b0d      	ldr	r3, [pc, #52]	@ (800cff8 <std+0x60>)
 800cfc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800cffc <std+0x64>)
 800cfc8:	6323      	str	r3, [r4, #48]	@ 0x30
 800cfca:	4b0d      	ldr	r3, [pc, #52]	@ (800d000 <std+0x68>)
 800cfcc:	6224      	str	r4, [r4, #32]
 800cfce:	429c      	cmp	r4, r3
 800cfd0:	d006      	beq.n	800cfe0 <std+0x48>
 800cfd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cfd6:	4294      	cmp	r4, r2
 800cfd8:	d002      	beq.n	800cfe0 <std+0x48>
 800cfda:	33d0      	adds	r3, #208	@ 0xd0
 800cfdc:	429c      	cmp	r4, r3
 800cfde:	d105      	bne.n	800cfec <std+0x54>
 800cfe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe8:	f000 bb10 	b.w	800d60c <__retarget_lock_init_recursive>
 800cfec:	bd10      	pop	{r4, pc}
 800cfee:	bf00      	nop
 800cff0:	0800d245 	.word	0x0800d245
 800cff4:	0800d267 	.word	0x0800d267
 800cff8:	0800d29f 	.word	0x0800d29f
 800cffc:	0800d2c3 	.word	0x0800d2c3
 800d000:	200011e0 	.word	0x200011e0

0800d004 <stdio_exit_handler>:
 800d004:	4a02      	ldr	r2, [pc, #8]	@ (800d010 <stdio_exit_handler+0xc>)
 800d006:	4903      	ldr	r1, [pc, #12]	@ (800d014 <stdio_exit_handler+0x10>)
 800d008:	4803      	ldr	r0, [pc, #12]	@ (800d018 <stdio_exit_handler+0x14>)
 800d00a:	f000 b869 	b.w	800d0e0 <_fwalk_sglue>
 800d00e:	bf00      	nop
 800d010:	2000001c 	.word	0x2000001c
 800d014:	0800ee01 	.word	0x0800ee01
 800d018:	20000198 	.word	0x20000198

0800d01c <cleanup_stdio>:
 800d01c:	6841      	ldr	r1, [r0, #4]
 800d01e:	4b0c      	ldr	r3, [pc, #48]	@ (800d050 <cleanup_stdio+0x34>)
 800d020:	4299      	cmp	r1, r3
 800d022:	b510      	push	{r4, lr}
 800d024:	4604      	mov	r4, r0
 800d026:	d001      	beq.n	800d02c <cleanup_stdio+0x10>
 800d028:	f001 feea 	bl	800ee00 <_fflush_r>
 800d02c:	68a1      	ldr	r1, [r4, #8]
 800d02e:	4b09      	ldr	r3, [pc, #36]	@ (800d054 <cleanup_stdio+0x38>)
 800d030:	4299      	cmp	r1, r3
 800d032:	d002      	beq.n	800d03a <cleanup_stdio+0x1e>
 800d034:	4620      	mov	r0, r4
 800d036:	f001 fee3 	bl	800ee00 <_fflush_r>
 800d03a:	68e1      	ldr	r1, [r4, #12]
 800d03c:	4b06      	ldr	r3, [pc, #24]	@ (800d058 <cleanup_stdio+0x3c>)
 800d03e:	4299      	cmp	r1, r3
 800d040:	d004      	beq.n	800d04c <cleanup_stdio+0x30>
 800d042:	4620      	mov	r0, r4
 800d044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d048:	f001 beda 	b.w	800ee00 <_fflush_r>
 800d04c:	bd10      	pop	{r4, pc}
 800d04e:	bf00      	nop
 800d050:	200011e0 	.word	0x200011e0
 800d054:	20001248 	.word	0x20001248
 800d058:	200012b0 	.word	0x200012b0

0800d05c <global_stdio_init.part.0>:
 800d05c:	b510      	push	{r4, lr}
 800d05e:	4b0b      	ldr	r3, [pc, #44]	@ (800d08c <global_stdio_init.part.0+0x30>)
 800d060:	4c0b      	ldr	r4, [pc, #44]	@ (800d090 <global_stdio_init.part.0+0x34>)
 800d062:	4a0c      	ldr	r2, [pc, #48]	@ (800d094 <global_stdio_init.part.0+0x38>)
 800d064:	601a      	str	r2, [r3, #0]
 800d066:	4620      	mov	r0, r4
 800d068:	2200      	movs	r2, #0
 800d06a:	2104      	movs	r1, #4
 800d06c:	f7ff ff94 	bl	800cf98 <std>
 800d070:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d074:	2201      	movs	r2, #1
 800d076:	2109      	movs	r1, #9
 800d078:	f7ff ff8e 	bl	800cf98 <std>
 800d07c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d080:	2202      	movs	r2, #2
 800d082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d086:	2112      	movs	r1, #18
 800d088:	f7ff bf86 	b.w	800cf98 <std>
 800d08c:	20001318 	.word	0x20001318
 800d090:	200011e0 	.word	0x200011e0
 800d094:	0800d005 	.word	0x0800d005

0800d098 <__sfp_lock_acquire>:
 800d098:	4801      	ldr	r0, [pc, #4]	@ (800d0a0 <__sfp_lock_acquire+0x8>)
 800d09a:	f000 bab8 	b.w	800d60e <__retarget_lock_acquire_recursive>
 800d09e:	bf00      	nop
 800d0a0:	20001321 	.word	0x20001321

0800d0a4 <__sfp_lock_release>:
 800d0a4:	4801      	ldr	r0, [pc, #4]	@ (800d0ac <__sfp_lock_release+0x8>)
 800d0a6:	f000 bab3 	b.w	800d610 <__retarget_lock_release_recursive>
 800d0aa:	bf00      	nop
 800d0ac:	20001321 	.word	0x20001321

0800d0b0 <__sinit>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	f7ff fff0 	bl	800d098 <__sfp_lock_acquire>
 800d0b8:	6a23      	ldr	r3, [r4, #32]
 800d0ba:	b11b      	cbz	r3, 800d0c4 <__sinit+0x14>
 800d0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0c0:	f7ff bff0 	b.w	800d0a4 <__sfp_lock_release>
 800d0c4:	4b04      	ldr	r3, [pc, #16]	@ (800d0d8 <__sinit+0x28>)
 800d0c6:	6223      	str	r3, [r4, #32]
 800d0c8:	4b04      	ldr	r3, [pc, #16]	@ (800d0dc <__sinit+0x2c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1f5      	bne.n	800d0bc <__sinit+0xc>
 800d0d0:	f7ff ffc4 	bl	800d05c <global_stdio_init.part.0>
 800d0d4:	e7f2      	b.n	800d0bc <__sinit+0xc>
 800d0d6:	bf00      	nop
 800d0d8:	0800d01d 	.word	0x0800d01d
 800d0dc:	20001318 	.word	0x20001318

0800d0e0 <_fwalk_sglue>:
 800d0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0e4:	4607      	mov	r7, r0
 800d0e6:	4688      	mov	r8, r1
 800d0e8:	4614      	mov	r4, r2
 800d0ea:	2600      	movs	r6, #0
 800d0ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0f0:	f1b9 0901 	subs.w	r9, r9, #1
 800d0f4:	d505      	bpl.n	800d102 <_fwalk_sglue+0x22>
 800d0f6:	6824      	ldr	r4, [r4, #0]
 800d0f8:	2c00      	cmp	r4, #0
 800d0fa:	d1f7      	bne.n	800d0ec <_fwalk_sglue+0xc>
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d102:	89ab      	ldrh	r3, [r5, #12]
 800d104:	2b01      	cmp	r3, #1
 800d106:	d907      	bls.n	800d118 <_fwalk_sglue+0x38>
 800d108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d10c:	3301      	adds	r3, #1
 800d10e:	d003      	beq.n	800d118 <_fwalk_sglue+0x38>
 800d110:	4629      	mov	r1, r5
 800d112:	4638      	mov	r0, r7
 800d114:	47c0      	blx	r8
 800d116:	4306      	orrs	r6, r0
 800d118:	3568      	adds	r5, #104	@ 0x68
 800d11a:	e7e9      	b.n	800d0f0 <_fwalk_sglue+0x10>

0800d11c <_puts_r>:
 800d11c:	6a03      	ldr	r3, [r0, #32]
 800d11e:	b570      	push	{r4, r5, r6, lr}
 800d120:	6884      	ldr	r4, [r0, #8]
 800d122:	4605      	mov	r5, r0
 800d124:	460e      	mov	r6, r1
 800d126:	b90b      	cbnz	r3, 800d12c <_puts_r+0x10>
 800d128:	f7ff ffc2 	bl	800d0b0 <__sinit>
 800d12c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d12e:	07db      	lsls	r3, r3, #31
 800d130:	d405      	bmi.n	800d13e <_puts_r+0x22>
 800d132:	89a3      	ldrh	r3, [r4, #12]
 800d134:	0598      	lsls	r0, r3, #22
 800d136:	d402      	bmi.n	800d13e <_puts_r+0x22>
 800d138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d13a:	f000 fa68 	bl	800d60e <__retarget_lock_acquire_recursive>
 800d13e:	89a3      	ldrh	r3, [r4, #12]
 800d140:	0719      	lsls	r1, r3, #28
 800d142:	d502      	bpl.n	800d14a <_puts_r+0x2e>
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d135      	bne.n	800d1b6 <_puts_r+0x9a>
 800d14a:	4621      	mov	r1, r4
 800d14c:	4628      	mov	r0, r5
 800d14e:	f000 f8fb 	bl	800d348 <__swsetup_r>
 800d152:	b380      	cbz	r0, 800d1b6 <_puts_r+0x9a>
 800d154:	f04f 35ff 	mov.w	r5, #4294967295
 800d158:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d15a:	07da      	lsls	r2, r3, #31
 800d15c:	d405      	bmi.n	800d16a <_puts_r+0x4e>
 800d15e:	89a3      	ldrh	r3, [r4, #12]
 800d160:	059b      	lsls	r3, r3, #22
 800d162:	d402      	bmi.n	800d16a <_puts_r+0x4e>
 800d164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d166:	f000 fa53 	bl	800d610 <__retarget_lock_release_recursive>
 800d16a:	4628      	mov	r0, r5
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
 800d16e:	2b00      	cmp	r3, #0
 800d170:	da04      	bge.n	800d17c <_puts_r+0x60>
 800d172:	69a2      	ldr	r2, [r4, #24]
 800d174:	429a      	cmp	r2, r3
 800d176:	dc17      	bgt.n	800d1a8 <_puts_r+0x8c>
 800d178:	290a      	cmp	r1, #10
 800d17a:	d015      	beq.n	800d1a8 <_puts_r+0x8c>
 800d17c:	6823      	ldr	r3, [r4, #0]
 800d17e:	1c5a      	adds	r2, r3, #1
 800d180:	6022      	str	r2, [r4, #0]
 800d182:	7019      	strb	r1, [r3, #0]
 800d184:	68a3      	ldr	r3, [r4, #8]
 800d186:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d18a:	3b01      	subs	r3, #1
 800d18c:	60a3      	str	r3, [r4, #8]
 800d18e:	2900      	cmp	r1, #0
 800d190:	d1ed      	bne.n	800d16e <_puts_r+0x52>
 800d192:	2b00      	cmp	r3, #0
 800d194:	da11      	bge.n	800d1ba <_puts_r+0x9e>
 800d196:	4622      	mov	r2, r4
 800d198:	210a      	movs	r1, #10
 800d19a:	4628      	mov	r0, r5
 800d19c:	f000 f895 	bl	800d2ca <__swbuf_r>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d0d7      	beq.n	800d154 <_puts_r+0x38>
 800d1a4:	250a      	movs	r5, #10
 800d1a6:	e7d7      	b.n	800d158 <_puts_r+0x3c>
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f000 f88d 	bl	800d2ca <__swbuf_r>
 800d1b0:	3001      	adds	r0, #1
 800d1b2:	d1e7      	bne.n	800d184 <_puts_r+0x68>
 800d1b4:	e7ce      	b.n	800d154 <_puts_r+0x38>
 800d1b6:	3e01      	subs	r6, #1
 800d1b8:	e7e4      	b.n	800d184 <_puts_r+0x68>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	1c5a      	adds	r2, r3, #1
 800d1be:	6022      	str	r2, [r4, #0]
 800d1c0:	220a      	movs	r2, #10
 800d1c2:	701a      	strb	r2, [r3, #0]
 800d1c4:	e7ee      	b.n	800d1a4 <_puts_r+0x88>
	...

0800d1c8 <puts>:
 800d1c8:	4b02      	ldr	r3, [pc, #8]	@ (800d1d4 <puts+0xc>)
 800d1ca:	4601      	mov	r1, r0
 800d1cc:	6818      	ldr	r0, [r3, #0]
 800d1ce:	f7ff bfa5 	b.w	800d11c <_puts_r>
 800d1d2:	bf00      	nop
 800d1d4:	20000194 	.word	0x20000194

0800d1d8 <sniprintf>:
 800d1d8:	b40c      	push	{r2, r3}
 800d1da:	b530      	push	{r4, r5, lr}
 800d1dc:	4b18      	ldr	r3, [pc, #96]	@ (800d240 <sniprintf+0x68>)
 800d1de:	1e0c      	subs	r4, r1, #0
 800d1e0:	681d      	ldr	r5, [r3, #0]
 800d1e2:	b09d      	sub	sp, #116	@ 0x74
 800d1e4:	da08      	bge.n	800d1f8 <sniprintf+0x20>
 800d1e6:	238b      	movs	r3, #139	@ 0x8b
 800d1e8:	602b      	str	r3, [r5, #0]
 800d1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ee:	b01d      	add	sp, #116	@ 0x74
 800d1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1f4:	b002      	add	sp, #8
 800d1f6:	4770      	bx	lr
 800d1f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d1fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d200:	f04f 0300 	mov.w	r3, #0
 800d204:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d206:	bf14      	ite	ne
 800d208:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d20c:	4623      	moveq	r3, r4
 800d20e:	9304      	str	r3, [sp, #16]
 800d210:	9307      	str	r3, [sp, #28]
 800d212:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d216:	9002      	str	r0, [sp, #8]
 800d218:	9006      	str	r0, [sp, #24]
 800d21a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d21e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d220:	ab21      	add	r3, sp, #132	@ 0x84
 800d222:	a902      	add	r1, sp, #8
 800d224:	4628      	mov	r0, r5
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	f001 fade 	bl	800e7e8 <_svfiprintf_r>
 800d22c:	1c43      	adds	r3, r0, #1
 800d22e:	bfbc      	itt	lt
 800d230:	238b      	movlt	r3, #139	@ 0x8b
 800d232:	602b      	strlt	r3, [r5, #0]
 800d234:	2c00      	cmp	r4, #0
 800d236:	d0da      	beq.n	800d1ee <sniprintf+0x16>
 800d238:	9b02      	ldr	r3, [sp, #8]
 800d23a:	2200      	movs	r2, #0
 800d23c:	701a      	strb	r2, [r3, #0]
 800d23e:	e7d6      	b.n	800d1ee <sniprintf+0x16>
 800d240:	20000194 	.word	0x20000194

0800d244 <__sread>:
 800d244:	b510      	push	{r4, lr}
 800d246:	460c      	mov	r4, r1
 800d248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d24c:	f000 f980 	bl	800d550 <_read_r>
 800d250:	2800      	cmp	r0, #0
 800d252:	bfab      	itete	ge
 800d254:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d256:	89a3      	ldrhlt	r3, [r4, #12]
 800d258:	181b      	addge	r3, r3, r0
 800d25a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d25e:	bfac      	ite	ge
 800d260:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d262:	81a3      	strhlt	r3, [r4, #12]
 800d264:	bd10      	pop	{r4, pc}

0800d266 <__swrite>:
 800d266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d26a:	461f      	mov	r7, r3
 800d26c:	898b      	ldrh	r3, [r1, #12]
 800d26e:	05db      	lsls	r3, r3, #23
 800d270:	4605      	mov	r5, r0
 800d272:	460c      	mov	r4, r1
 800d274:	4616      	mov	r6, r2
 800d276:	d505      	bpl.n	800d284 <__swrite+0x1e>
 800d278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d27c:	2302      	movs	r3, #2
 800d27e:	2200      	movs	r2, #0
 800d280:	f000 f954 	bl	800d52c <_lseek_r>
 800d284:	89a3      	ldrh	r3, [r4, #12]
 800d286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d28a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d28e:	81a3      	strh	r3, [r4, #12]
 800d290:	4632      	mov	r2, r6
 800d292:	463b      	mov	r3, r7
 800d294:	4628      	mov	r0, r5
 800d296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d29a:	f000 b97b 	b.w	800d594 <_write_r>

0800d29e <__sseek>:
 800d29e:	b510      	push	{r4, lr}
 800d2a0:	460c      	mov	r4, r1
 800d2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a6:	f000 f941 	bl	800d52c <_lseek_r>
 800d2aa:	1c43      	adds	r3, r0, #1
 800d2ac:	89a3      	ldrh	r3, [r4, #12]
 800d2ae:	bf15      	itete	ne
 800d2b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d2b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d2b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d2ba:	81a3      	strheq	r3, [r4, #12]
 800d2bc:	bf18      	it	ne
 800d2be:	81a3      	strhne	r3, [r4, #12]
 800d2c0:	bd10      	pop	{r4, pc}

0800d2c2 <__sclose>:
 800d2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c6:	f000 b921 	b.w	800d50c <_close_r>

0800d2ca <__swbuf_r>:
 800d2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2cc:	460e      	mov	r6, r1
 800d2ce:	4614      	mov	r4, r2
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	b118      	cbz	r0, 800d2dc <__swbuf_r+0x12>
 800d2d4:	6a03      	ldr	r3, [r0, #32]
 800d2d6:	b90b      	cbnz	r3, 800d2dc <__swbuf_r+0x12>
 800d2d8:	f7ff feea 	bl	800d0b0 <__sinit>
 800d2dc:	69a3      	ldr	r3, [r4, #24]
 800d2de:	60a3      	str	r3, [r4, #8]
 800d2e0:	89a3      	ldrh	r3, [r4, #12]
 800d2e2:	071a      	lsls	r2, r3, #28
 800d2e4:	d501      	bpl.n	800d2ea <__swbuf_r+0x20>
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	b943      	cbnz	r3, 800d2fc <__swbuf_r+0x32>
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	f000 f82b 	bl	800d348 <__swsetup_r>
 800d2f2:	b118      	cbz	r0, 800d2fc <__swbuf_r+0x32>
 800d2f4:	f04f 37ff 	mov.w	r7, #4294967295
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	6922      	ldr	r2, [r4, #16]
 800d300:	1a98      	subs	r0, r3, r2
 800d302:	6963      	ldr	r3, [r4, #20]
 800d304:	b2f6      	uxtb	r6, r6
 800d306:	4283      	cmp	r3, r0
 800d308:	4637      	mov	r7, r6
 800d30a:	dc05      	bgt.n	800d318 <__swbuf_r+0x4e>
 800d30c:	4621      	mov	r1, r4
 800d30e:	4628      	mov	r0, r5
 800d310:	f001 fd76 	bl	800ee00 <_fflush_r>
 800d314:	2800      	cmp	r0, #0
 800d316:	d1ed      	bne.n	800d2f4 <__swbuf_r+0x2a>
 800d318:	68a3      	ldr	r3, [r4, #8]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	60a3      	str	r3, [r4, #8]
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	1c5a      	adds	r2, r3, #1
 800d322:	6022      	str	r2, [r4, #0]
 800d324:	701e      	strb	r6, [r3, #0]
 800d326:	6962      	ldr	r2, [r4, #20]
 800d328:	1c43      	adds	r3, r0, #1
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d004      	beq.n	800d338 <__swbuf_r+0x6e>
 800d32e:	89a3      	ldrh	r3, [r4, #12]
 800d330:	07db      	lsls	r3, r3, #31
 800d332:	d5e1      	bpl.n	800d2f8 <__swbuf_r+0x2e>
 800d334:	2e0a      	cmp	r6, #10
 800d336:	d1df      	bne.n	800d2f8 <__swbuf_r+0x2e>
 800d338:	4621      	mov	r1, r4
 800d33a:	4628      	mov	r0, r5
 800d33c:	f001 fd60 	bl	800ee00 <_fflush_r>
 800d340:	2800      	cmp	r0, #0
 800d342:	d0d9      	beq.n	800d2f8 <__swbuf_r+0x2e>
 800d344:	e7d6      	b.n	800d2f4 <__swbuf_r+0x2a>
	...

0800d348 <__swsetup_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4b29      	ldr	r3, [pc, #164]	@ (800d3f0 <__swsetup_r+0xa8>)
 800d34c:	4605      	mov	r5, r0
 800d34e:	6818      	ldr	r0, [r3, #0]
 800d350:	460c      	mov	r4, r1
 800d352:	b118      	cbz	r0, 800d35c <__swsetup_r+0x14>
 800d354:	6a03      	ldr	r3, [r0, #32]
 800d356:	b90b      	cbnz	r3, 800d35c <__swsetup_r+0x14>
 800d358:	f7ff feaa 	bl	800d0b0 <__sinit>
 800d35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d360:	0719      	lsls	r1, r3, #28
 800d362:	d422      	bmi.n	800d3aa <__swsetup_r+0x62>
 800d364:	06da      	lsls	r2, r3, #27
 800d366:	d407      	bmi.n	800d378 <__swsetup_r+0x30>
 800d368:	2209      	movs	r2, #9
 800d36a:	602a      	str	r2, [r5, #0]
 800d36c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d370:	81a3      	strh	r3, [r4, #12]
 800d372:	f04f 30ff 	mov.w	r0, #4294967295
 800d376:	e033      	b.n	800d3e0 <__swsetup_r+0x98>
 800d378:	0758      	lsls	r0, r3, #29
 800d37a:	d512      	bpl.n	800d3a2 <__swsetup_r+0x5a>
 800d37c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d37e:	b141      	cbz	r1, 800d392 <__swsetup_r+0x4a>
 800d380:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d384:	4299      	cmp	r1, r3
 800d386:	d002      	beq.n	800d38e <__swsetup_r+0x46>
 800d388:	4628      	mov	r0, r5
 800d38a:	f000 f985 	bl	800d698 <_free_r>
 800d38e:	2300      	movs	r3, #0
 800d390:	6363      	str	r3, [r4, #52]	@ 0x34
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d398:	81a3      	strh	r3, [r4, #12]
 800d39a:	2300      	movs	r3, #0
 800d39c:	6063      	str	r3, [r4, #4]
 800d39e:	6923      	ldr	r3, [r4, #16]
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	f043 0308 	orr.w	r3, r3, #8
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	6923      	ldr	r3, [r4, #16]
 800d3ac:	b94b      	cbnz	r3, 800d3c2 <__swsetup_r+0x7a>
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d3b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3b8:	d003      	beq.n	800d3c2 <__swsetup_r+0x7a>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4628      	mov	r0, r5
 800d3be:	f001 fd7f 	bl	800eec0 <__smakebuf_r>
 800d3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3c6:	f013 0201 	ands.w	r2, r3, #1
 800d3ca:	d00a      	beq.n	800d3e2 <__swsetup_r+0x9a>
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	60a2      	str	r2, [r4, #8]
 800d3d0:	6962      	ldr	r2, [r4, #20]
 800d3d2:	4252      	negs	r2, r2
 800d3d4:	61a2      	str	r2, [r4, #24]
 800d3d6:	6922      	ldr	r2, [r4, #16]
 800d3d8:	b942      	cbnz	r2, 800d3ec <__swsetup_r+0xa4>
 800d3da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d3de:	d1c5      	bne.n	800d36c <__swsetup_r+0x24>
 800d3e0:	bd38      	pop	{r3, r4, r5, pc}
 800d3e2:	0799      	lsls	r1, r3, #30
 800d3e4:	bf58      	it	pl
 800d3e6:	6962      	ldrpl	r2, [r4, #20]
 800d3e8:	60a2      	str	r2, [r4, #8]
 800d3ea:	e7f4      	b.n	800d3d6 <__swsetup_r+0x8e>
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	e7f7      	b.n	800d3e0 <__swsetup_r+0x98>
 800d3f0:	20000194 	.word	0x20000194

0800d3f4 <memset>:
 800d3f4:	4402      	add	r2, r0
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d100      	bne.n	800d3fe <memset+0xa>
 800d3fc:	4770      	bx	lr
 800d3fe:	f803 1b01 	strb.w	r1, [r3], #1
 800d402:	e7f9      	b.n	800d3f8 <memset+0x4>

0800d404 <strncmp>:
 800d404:	b510      	push	{r4, lr}
 800d406:	b16a      	cbz	r2, 800d424 <strncmp+0x20>
 800d408:	3901      	subs	r1, #1
 800d40a:	1884      	adds	r4, r0, r2
 800d40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d410:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d414:	429a      	cmp	r2, r3
 800d416:	d103      	bne.n	800d420 <strncmp+0x1c>
 800d418:	42a0      	cmp	r0, r4
 800d41a:	d001      	beq.n	800d420 <strncmp+0x1c>
 800d41c:	2a00      	cmp	r2, #0
 800d41e:	d1f5      	bne.n	800d40c <strncmp+0x8>
 800d420:	1ad0      	subs	r0, r2, r3
 800d422:	bd10      	pop	{r4, pc}
 800d424:	4610      	mov	r0, r2
 800d426:	e7fc      	b.n	800d422 <strncmp+0x1e>

0800d428 <strtok>:
 800d428:	4b16      	ldr	r3, [pc, #88]	@ (800d484 <strtok+0x5c>)
 800d42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d42e:	681f      	ldr	r7, [r3, #0]
 800d430:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d432:	4605      	mov	r5, r0
 800d434:	460e      	mov	r6, r1
 800d436:	b9ec      	cbnz	r4, 800d474 <strtok+0x4c>
 800d438:	2050      	movs	r0, #80	@ 0x50
 800d43a:	f7fe fe03 	bl	800c044 <malloc>
 800d43e:	4602      	mov	r2, r0
 800d440:	6478      	str	r0, [r7, #68]	@ 0x44
 800d442:	b920      	cbnz	r0, 800d44e <strtok+0x26>
 800d444:	4b10      	ldr	r3, [pc, #64]	@ (800d488 <strtok+0x60>)
 800d446:	4811      	ldr	r0, [pc, #68]	@ (800d48c <strtok+0x64>)
 800d448:	215b      	movs	r1, #91	@ 0x5b
 800d44a:	f000 f907 	bl	800d65c <__assert_func>
 800d44e:	e9c0 4400 	strd	r4, r4, [r0]
 800d452:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d456:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d45a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d45e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d462:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d466:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d46a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d46e:	6184      	str	r4, [r0, #24]
 800d470:	7704      	strb	r4, [r0, #28]
 800d472:	6244      	str	r4, [r0, #36]	@ 0x24
 800d474:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d476:	4631      	mov	r1, r6
 800d478:	4628      	mov	r0, r5
 800d47a:	2301      	movs	r3, #1
 800d47c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d480:	f000 b806 	b.w	800d490 <__strtok_r>
 800d484:	20000194 	.word	0x20000194
 800d488:	0801011e 	.word	0x0801011e
 800d48c:	08010135 	.word	0x08010135

0800d490 <__strtok_r>:
 800d490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d492:	4604      	mov	r4, r0
 800d494:	b908      	cbnz	r0, 800d49a <__strtok_r+0xa>
 800d496:	6814      	ldr	r4, [r2, #0]
 800d498:	b144      	cbz	r4, 800d4ac <__strtok_r+0x1c>
 800d49a:	4620      	mov	r0, r4
 800d49c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d4a0:	460f      	mov	r7, r1
 800d4a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d4a6:	b91e      	cbnz	r6, 800d4b0 <__strtok_r+0x20>
 800d4a8:	b965      	cbnz	r5, 800d4c4 <__strtok_r+0x34>
 800d4aa:	6015      	str	r5, [r2, #0]
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e005      	b.n	800d4bc <__strtok_r+0x2c>
 800d4b0:	42b5      	cmp	r5, r6
 800d4b2:	d1f6      	bne.n	800d4a2 <__strtok_r+0x12>
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1f0      	bne.n	800d49a <__strtok_r+0xa>
 800d4b8:	6014      	str	r4, [r2, #0]
 800d4ba:	7003      	strb	r3, [r0, #0]
 800d4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4be:	461c      	mov	r4, r3
 800d4c0:	e00c      	b.n	800d4dc <__strtok_r+0x4c>
 800d4c2:	b91d      	cbnz	r5, 800d4cc <__strtok_r+0x3c>
 800d4c4:	4627      	mov	r7, r4
 800d4c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d4ca:	460e      	mov	r6, r1
 800d4cc:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d4d0:	42ab      	cmp	r3, r5
 800d4d2:	d1f6      	bne.n	800d4c2 <__strtok_r+0x32>
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d0f2      	beq.n	800d4be <__strtok_r+0x2e>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	703b      	strb	r3, [r7, #0]
 800d4dc:	6014      	str	r4, [r2, #0]
 800d4de:	e7ed      	b.n	800d4bc <__strtok_r+0x2c>

0800d4e0 <strstr>:
 800d4e0:	780a      	ldrb	r2, [r1, #0]
 800d4e2:	b570      	push	{r4, r5, r6, lr}
 800d4e4:	b96a      	cbnz	r2, 800d502 <strstr+0x22>
 800d4e6:	bd70      	pop	{r4, r5, r6, pc}
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d109      	bne.n	800d500 <strstr+0x20>
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	4605      	mov	r5, r0
 800d4f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d0f6      	beq.n	800d4e6 <strstr+0x6>
 800d4f8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d4fc:	429e      	cmp	r6, r3
 800d4fe:	d0f7      	beq.n	800d4f0 <strstr+0x10>
 800d500:	3001      	adds	r0, #1
 800d502:	7803      	ldrb	r3, [r0, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1ef      	bne.n	800d4e8 <strstr+0x8>
 800d508:	4618      	mov	r0, r3
 800d50a:	e7ec      	b.n	800d4e6 <strstr+0x6>

0800d50c <_close_r>:
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4d06      	ldr	r5, [pc, #24]	@ (800d528 <_close_r+0x1c>)
 800d510:	2300      	movs	r3, #0
 800d512:	4604      	mov	r4, r0
 800d514:	4608      	mov	r0, r1
 800d516:	602b      	str	r3, [r5, #0]
 800d518:	f7f5 ffe4 	bl	80034e4 <_close>
 800d51c:	1c43      	adds	r3, r0, #1
 800d51e:	d102      	bne.n	800d526 <_close_r+0x1a>
 800d520:	682b      	ldr	r3, [r5, #0]
 800d522:	b103      	cbz	r3, 800d526 <_close_r+0x1a>
 800d524:	6023      	str	r3, [r4, #0]
 800d526:	bd38      	pop	{r3, r4, r5, pc}
 800d528:	2000131c 	.word	0x2000131c

0800d52c <_lseek_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	4d07      	ldr	r5, [pc, #28]	@ (800d54c <_lseek_r+0x20>)
 800d530:	4604      	mov	r4, r0
 800d532:	4608      	mov	r0, r1
 800d534:	4611      	mov	r1, r2
 800d536:	2200      	movs	r2, #0
 800d538:	602a      	str	r2, [r5, #0]
 800d53a:	461a      	mov	r2, r3
 800d53c:	f7f5 fff9 	bl	8003532 <_lseek>
 800d540:	1c43      	adds	r3, r0, #1
 800d542:	d102      	bne.n	800d54a <_lseek_r+0x1e>
 800d544:	682b      	ldr	r3, [r5, #0]
 800d546:	b103      	cbz	r3, 800d54a <_lseek_r+0x1e>
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	bd38      	pop	{r3, r4, r5, pc}
 800d54c:	2000131c 	.word	0x2000131c

0800d550 <_read_r>:
 800d550:	b538      	push	{r3, r4, r5, lr}
 800d552:	4d07      	ldr	r5, [pc, #28]	@ (800d570 <_read_r+0x20>)
 800d554:	4604      	mov	r4, r0
 800d556:	4608      	mov	r0, r1
 800d558:	4611      	mov	r1, r2
 800d55a:	2200      	movs	r2, #0
 800d55c:	602a      	str	r2, [r5, #0]
 800d55e:	461a      	mov	r2, r3
 800d560:	f7f5 ff87 	bl	8003472 <_read>
 800d564:	1c43      	adds	r3, r0, #1
 800d566:	d102      	bne.n	800d56e <_read_r+0x1e>
 800d568:	682b      	ldr	r3, [r5, #0]
 800d56a:	b103      	cbz	r3, 800d56e <_read_r+0x1e>
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	bd38      	pop	{r3, r4, r5, pc}
 800d570:	2000131c 	.word	0x2000131c

0800d574 <_sbrk_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4d06      	ldr	r5, [pc, #24]	@ (800d590 <_sbrk_r+0x1c>)
 800d578:	2300      	movs	r3, #0
 800d57a:	4604      	mov	r4, r0
 800d57c:	4608      	mov	r0, r1
 800d57e:	602b      	str	r3, [r5, #0]
 800d580:	f7f5 ffe4 	bl	800354c <_sbrk>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d102      	bne.n	800d58e <_sbrk_r+0x1a>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	b103      	cbz	r3, 800d58e <_sbrk_r+0x1a>
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	2000131c 	.word	0x2000131c

0800d594 <_write_r>:
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	4d07      	ldr	r5, [pc, #28]	@ (800d5b4 <_write_r+0x20>)
 800d598:	4604      	mov	r4, r0
 800d59a:	4608      	mov	r0, r1
 800d59c:	4611      	mov	r1, r2
 800d59e:	2200      	movs	r2, #0
 800d5a0:	602a      	str	r2, [r5, #0]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	f7f5 ff82 	bl	80034ac <_write>
 800d5a8:	1c43      	adds	r3, r0, #1
 800d5aa:	d102      	bne.n	800d5b2 <_write_r+0x1e>
 800d5ac:	682b      	ldr	r3, [r5, #0]
 800d5ae:	b103      	cbz	r3, 800d5b2 <_write_r+0x1e>
 800d5b0:	6023      	str	r3, [r4, #0]
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}
 800d5b4:	2000131c 	.word	0x2000131c

0800d5b8 <__errno>:
 800d5b8:	4b01      	ldr	r3, [pc, #4]	@ (800d5c0 <__errno+0x8>)
 800d5ba:	6818      	ldr	r0, [r3, #0]
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	20000194 	.word	0x20000194

0800d5c4 <__libc_init_array>:
 800d5c4:	b570      	push	{r4, r5, r6, lr}
 800d5c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d5fc <__libc_init_array+0x38>)
 800d5c8:	4c0d      	ldr	r4, [pc, #52]	@ (800d600 <__libc_init_array+0x3c>)
 800d5ca:	1b64      	subs	r4, r4, r5
 800d5cc:	10a4      	asrs	r4, r4, #2
 800d5ce:	2600      	movs	r6, #0
 800d5d0:	42a6      	cmp	r6, r4
 800d5d2:	d109      	bne.n	800d5e8 <__libc_init_array+0x24>
 800d5d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d604 <__libc_init_array+0x40>)
 800d5d6:	4c0c      	ldr	r4, [pc, #48]	@ (800d608 <__libc_init_array+0x44>)
 800d5d8:	f002 f8b8 	bl	800f74c <_init>
 800d5dc:	1b64      	subs	r4, r4, r5
 800d5de:	10a4      	asrs	r4, r4, #2
 800d5e0:	2600      	movs	r6, #0
 800d5e2:	42a6      	cmp	r6, r4
 800d5e4:	d105      	bne.n	800d5f2 <__libc_init_array+0x2e>
 800d5e6:	bd70      	pop	{r4, r5, r6, pc}
 800d5e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5ec:	4798      	blx	r3
 800d5ee:	3601      	adds	r6, #1
 800d5f0:	e7ee      	b.n	800d5d0 <__libc_init_array+0xc>
 800d5f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5f6:	4798      	blx	r3
 800d5f8:	3601      	adds	r6, #1
 800d5fa:	e7f2      	b.n	800d5e2 <__libc_init_array+0x1e>
 800d5fc:	08010528 	.word	0x08010528
 800d600:	08010528 	.word	0x08010528
 800d604:	08010528 	.word	0x08010528
 800d608:	0801052c 	.word	0x0801052c

0800d60c <__retarget_lock_init_recursive>:
 800d60c:	4770      	bx	lr

0800d60e <__retarget_lock_acquire_recursive>:
 800d60e:	4770      	bx	lr

0800d610 <__retarget_lock_release_recursive>:
 800d610:	4770      	bx	lr

0800d612 <strcpy>:
 800d612:	4603      	mov	r3, r0
 800d614:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d618:	f803 2b01 	strb.w	r2, [r3], #1
 800d61c:	2a00      	cmp	r2, #0
 800d61e:	d1f9      	bne.n	800d614 <strcpy+0x2>
 800d620:	4770      	bx	lr

0800d622 <memcpy>:
 800d622:	440a      	add	r2, r1
 800d624:	4291      	cmp	r1, r2
 800d626:	f100 33ff 	add.w	r3, r0, #4294967295
 800d62a:	d100      	bne.n	800d62e <memcpy+0xc>
 800d62c:	4770      	bx	lr
 800d62e:	b510      	push	{r4, lr}
 800d630:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d634:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d638:	4291      	cmp	r1, r2
 800d63a:	d1f9      	bne.n	800d630 <memcpy+0xe>
 800d63c:	bd10      	pop	{r4, pc}
	...

0800d640 <nan>:
 800d640:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d648 <nan+0x8>
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	00000000 	.word	0x00000000
 800d64c:	7ff80000 	.word	0x7ff80000

0800d650 <nanf>:
 800d650:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d658 <nanf+0x8>
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	7fc00000 	.word	0x7fc00000

0800d65c <__assert_func>:
 800d65c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d65e:	4614      	mov	r4, r2
 800d660:	461a      	mov	r2, r3
 800d662:	4b09      	ldr	r3, [pc, #36]	@ (800d688 <__assert_func+0x2c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4605      	mov	r5, r0
 800d668:	68d8      	ldr	r0, [r3, #12]
 800d66a:	b14c      	cbz	r4, 800d680 <__assert_func+0x24>
 800d66c:	4b07      	ldr	r3, [pc, #28]	@ (800d68c <__assert_func+0x30>)
 800d66e:	9100      	str	r1, [sp, #0]
 800d670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d674:	4906      	ldr	r1, [pc, #24]	@ (800d690 <__assert_func+0x34>)
 800d676:	462b      	mov	r3, r5
 800d678:	f001 fbea 	bl	800ee50 <fiprintf>
 800d67c:	f001 fc98 	bl	800efb0 <abort>
 800d680:	4b04      	ldr	r3, [pc, #16]	@ (800d694 <__assert_func+0x38>)
 800d682:	461c      	mov	r4, r3
 800d684:	e7f3      	b.n	800d66e <__assert_func+0x12>
 800d686:	bf00      	nop
 800d688:	20000194 	.word	0x20000194
 800d68c:	08010197 	.word	0x08010197
 800d690:	080101a4 	.word	0x080101a4
 800d694:	080101d2 	.word	0x080101d2

0800d698 <_free_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4605      	mov	r5, r0
 800d69c:	2900      	cmp	r1, #0
 800d69e:	d041      	beq.n	800d724 <_free_r+0x8c>
 800d6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6a4:	1f0c      	subs	r4, r1, #4
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	bfb8      	it	lt
 800d6aa:	18e4      	addlt	r4, r4, r3
 800d6ac:	f7fe fd7c 	bl	800c1a8 <__malloc_lock>
 800d6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d728 <_free_r+0x90>)
 800d6b2:	6813      	ldr	r3, [r2, #0]
 800d6b4:	b933      	cbnz	r3, 800d6c4 <_free_r+0x2c>
 800d6b6:	6063      	str	r3, [r4, #4]
 800d6b8:	6014      	str	r4, [r2, #0]
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6c0:	f7fe bd78 	b.w	800c1b4 <__malloc_unlock>
 800d6c4:	42a3      	cmp	r3, r4
 800d6c6:	d908      	bls.n	800d6da <_free_r+0x42>
 800d6c8:	6820      	ldr	r0, [r4, #0]
 800d6ca:	1821      	adds	r1, r4, r0
 800d6cc:	428b      	cmp	r3, r1
 800d6ce:	bf01      	itttt	eq
 800d6d0:	6819      	ldreq	r1, [r3, #0]
 800d6d2:	685b      	ldreq	r3, [r3, #4]
 800d6d4:	1809      	addeq	r1, r1, r0
 800d6d6:	6021      	streq	r1, [r4, #0]
 800d6d8:	e7ed      	b.n	800d6b6 <_free_r+0x1e>
 800d6da:	461a      	mov	r2, r3
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	b10b      	cbz	r3, 800d6e4 <_free_r+0x4c>
 800d6e0:	42a3      	cmp	r3, r4
 800d6e2:	d9fa      	bls.n	800d6da <_free_r+0x42>
 800d6e4:	6811      	ldr	r1, [r2, #0]
 800d6e6:	1850      	adds	r0, r2, r1
 800d6e8:	42a0      	cmp	r0, r4
 800d6ea:	d10b      	bne.n	800d704 <_free_r+0x6c>
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	4401      	add	r1, r0
 800d6f0:	1850      	adds	r0, r2, r1
 800d6f2:	4283      	cmp	r3, r0
 800d6f4:	6011      	str	r1, [r2, #0]
 800d6f6:	d1e0      	bne.n	800d6ba <_free_r+0x22>
 800d6f8:	6818      	ldr	r0, [r3, #0]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	6053      	str	r3, [r2, #4]
 800d6fe:	4408      	add	r0, r1
 800d700:	6010      	str	r0, [r2, #0]
 800d702:	e7da      	b.n	800d6ba <_free_r+0x22>
 800d704:	d902      	bls.n	800d70c <_free_r+0x74>
 800d706:	230c      	movs	r3, #12
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	e7d6      	b.n	800d6ba <_free_r+0x22>
 800d70c:	6820      	ldr	r0, [r4, #0]
 800d70e:	1821      	adds	r1, r4, r0
 800d710:	428b      	cmp	r3, r1
 800d712:	bf04      	itt	eq
 800d714:	6819      	ldreq	r1, [r3, #0]
 800d716:	685b      	ldreq	r3, [r3, #4]
 800d718:	6063      	str	r3, [r4, #4]
 800d71a:	bf04      	itt	eq
 800d71c:	1809      	addeq	r1, r1, r0
 800d71e:	6021      	streq	r1, [r4, #0]
 800d720:	6054      	str	r4, [r2, #4]
 800d722:	e7ca      	b.n	800d6ba <_free_r+0x22>
 800d724:	bd38      	pop	{r3, r4, r5, pc}
 800d726:	bf00      	nop
 800d728:	200011dc 	.word	0x200011dc

0800d72c <rshift>:
 800d72c:	6903      	ldr	r3, [r0, #16]
 800d72e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d736:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d73a:	f100 0414 	add.w	r4, r0, #20
 800d73e:	dd45      	ble.n	800d7cc <rshift+0xa0>
 800d740:	f011 011f 	ands.w	r1, r1, #31
 800d744:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d748:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d74c:	d10c      	bne.n	800d768 <rshift+0x3c>
 800d74e:	f100 0710 	add.w	r7, r0, #16
 800d752:	4629      	mov	r1, r5
 800d754:	42b1      	cmp	r1, r6
 800d756:	d334      	bcc.n	800d7c2 <rshift+0x96>
 800d758:	1a9b      	subs	r3, r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	1eea      	subs	r2, r5, #3
 800d75e:	4296      	cmp	r6, r2
 800d760:	bf38      	it	cc
 800d762:	2300      	movcc	r3, #0
 800d764:	4423      	add	r3, r4
 800d766:	e015      	b.n	800d794 <rshift+0x68>
 800d768:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d76c:	f1c1 0820 	rsb	r8, r1, #32
 800d770:	40cf      	lsrs	r7, r1
 800d772:	f105 0e04 	add.w	lr, r5, #4
 800d776:	46a1      	mov	r9, r4
 800d778:	4576      	cmp	r6, lr
 800d77a:	46f4      	mov	ip, lr
 800d77c:	d815      	bhi.n	800d7aa <rshift+0x7e>
 800d77e:	1a9a      	subs	r2, r3, r2
 800d780:	0092      	lsls	r2, r2, #2
 800d782:	3a04      	subs	r2, #4
 800d784:	3501      	adds	r5, #1
 800d786:	42ae      	cmp	r6, r5
 800d788:	bf38      	it	cc
 800d78a:	2200      	movcc	r2, #0
 800d78c:	18a3      	adds	r3, r4, r2
 800d78e:	50a7      	str	r7, [r4, r2]
 800d790:	b107      	cbz	r7, 800d794 <rshift+0x68>
 800d792:	3304      	adds	r3, #4
 800d794:	1b1a      	subs	r2, r3, r4
 800d796:	42a3      	cmp	r3, r4
 800d798:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d79c:	bf08      	it	eq
 800d79e:	2300      	moveq	r3, #0
 800d7a0:	6102      	str	r2, [r0, #16]
 800d7a2:	bf08      	it	eq
 800d7a4:	6143      	streq	r3, [r0, #20]
 800d7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7aa:	f8dc c000 	ldr.w	ip, [ip]
 800d7ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7b2:	ea4c 0707 	orr.w	r7, ip, r7
 800d7b6:	f849 7b04 	str.w	r7, [r9], #4
 800d7ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7be:	40cf      	lsrs	r7, r1
 800d7c0:	e7da      	b.n	800d778 <rshift+0x4c>
 800d7c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7ca:	e7c3      	b.n	800d754 <rshift+0x28>
 800d7cc:	4623      	mov	r3, r4
 800d7ce:	e7e1      	b.n	800d794 <rshift+0x68>

0800d7d0 <__hexdig_fun>:
 800d7d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d7d4:	2b09      	cmp	r3, #9
 800d7d6:	d802      	bhi.n	800d7de <__hexdig_fun+0xe>
 800d7d8:	3820      	subs	r0, #32
 800d7da:	b2c0      	uxtb	r0, r0
 800d7dc:	4770      	bx	lr
 800d7de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d7e2:	2b05      	cmp	r3, #5
 800d7e4:	d801      	bhi.n	800d7ea <__hexdig_fun+0x1a>
 800d7e6:	3847      	subs	r0, #71	@ 0x47
 800d7e8:	e7f7      	b.n	800d7da <__hexdig_fun+0xa>
 800d7ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d7ee:	2b05      	cmp	r3, #5
 800d7f0:	d801      	bhi.n	800d7f6 <__hexdig_fun+0x26>
 800d7f2:	3827      	subs	r0, #39	@ 0x27
 800d7f4:	e7f1      	b.n	800d7da <__hexdig_fun+0xa>
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	4770      	bx	lr
	...

0800d7fc <__gethex>:
 800d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d800:	b085      	sub	sp, #20
 800d802:	468a      	mov	sl, r1
 800d804:	9302      	str	r3, [sp, #8]
 800d806:	680b      	ldr	r3, [r1, #0]
 800d808:	9001      	str	r0, [sp, #4]
 800d80a:	4690      	mov	r8, r2
 800d80c:	1c9c      	adds	r4, r3, #2
 800d80e:	46a1      	mov	r9, r4
 800d810:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d814:	2830      	cmp	r0, #48	@ 0x30
 800d816:	d0fa      	beq.n	800d80e <__gethex+0x12>
 800d818:	eba9 0303 	sub.w	r3, r9, r3
 800d81c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d820:	f7ff ffd6 	bl	800d7d0 <__hexdig_fun>
 800d824:	4605      	mov	r5, r0
 800d826:	2800      	cmp	r0, #0
 800d828:	d168      	bne.n	800d8fc <__gethex+0x100>
 800d82a:	49a0      	ldr	r1, [pc, #640]	@ (800daac <__gethex+0x2b0>)
 800d82c:	2201      	movs	r2, #1
 800d82e:	4648      	mov	r0, r9
 800d830:	f7ff fde8 	bl	800d404 <strncmp>
 800d834:	4607      	mov	r7, r0
 800d836:	2800      	cmp	r0, #0
 800d838:	d167      	bne.n	800d90a <__gethex+0x10e>
 800d83a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d83e:	4626      	mov	r6, r4
 800d840:	f7ff ffc6 	bl	800d7d0 <__hexdig_fun>
 800d844:	2800      	cmp	r0, #0
 800d846:	d062      	beq.n	800d90e <__gethex+0x112>
 800d848:	4623      	mov	r3, r4
 800d84a:	7818      	ldrb	r0, [r3, #0]
 800d84c:	2830      	cmp	r0, #48	@ 0x30
 800d84e:	4699      	mov	r9, r3
 800d850:	f103 0301 	add.w	r3, r3, #1
 800d854:	d0f9      	beq.n	800d84a <__gethex+0x4e>
 800d856:	f7ff ffbb 	bl	800d7d0 <__hexdig_fun>
 800d85a:	fab0 f580 	clz	r5, r0
 800d85e:	096d      	lsrs	r5, r5, #5
 800d860:	f04f 0b01 	mov.w	fp, #1
 800d864:	464a      	mov	r2, r9
 800d866:	4616      	mov	r6, r2
 800d868:	3201      	adds	r2, #1
 800d86a:	7830      	ldrb	r0, [r6, #0]
 800d86c:	f7ff ffb0 	bl	800d7d0 <__hexdig_fun>
 800d870:	2800      	cmp	r0, #0
 800d872:	d1f8      	bne.n	800d866 <__gethex+0x6a>
 800d874:	498d      	ldr	r1, [pc, #564]	@ (800daac <__gethex+0x2b0>)
 800d876:	2201      	movs	r2, #1
 800d878:	4630      	mov	r0, r6
 800d87a:	f7ff fdc3 	bl	800d404 <strncmp>
 800d87e:	2800      	cmp	r0, #0
 800d880:	d13f      	bne.n	800d902 <__gethex+0x106>
 800d882:	b944      	cbnz	r4, 800d896 <__gethex+0x9a>
 800d884:	1c74      	adds	r4, r6, #1
 800d886:	4622      	mov	r2, r4
 800d888:	4616      	mov	r6, r2
 800d88a:	3201      	adds	r2, #1
 800d88c:	7830      	ldrb	r0, [r6, #0]
 800d88e:	f7ff ff9f 	bl	800d7d0 <__hexdig_fun>
 800d892:	2800      	cmp	r0, #0
 800d894:	d1f8      	bne.n	800d888 <__gethex+0x8c>
 800d896:	1ba4      	subs	r4, r4, r6
 800d898:	00a7      	lsls	r7, r4, #2
 800d89a:	7833      	ldrb	r3, [r6, #0]
 800d89c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d8a0:	2b50      	cmp	r3, #80	@ 0x50
 800d8a2:	d13e      	bne.n	800d922 <__gethex+0x126>
 800d8a4:	7873      	ldrb	r3, [r6, #1]
 800d8a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d8a8:	d033      	beq.n	800d912 <__gethex+0x116>
 800d8aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800d8ac:	d034      	beq.n	800d918 <__gethex+0x11c>
 800d8ae:	1c71      	adds	r1, r6, #1
 800d8b0:	2400      	movs	r4, #0
 800d8b2:	7808      	ldrb	r0, [r1, #0]
 800d8b4:	f7ff ff8c 	bl	800d7d0 <__hexdig_fun>
 800d8b8:	1e43      	subs	r3, r0, #1
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	2b18      	cmp	r3, #24
 800d8be:	d830      	bhi.n	800d922 <__gethex+0x126>
 800d8c0:	f1a0 0210 	sub.w	r2, r0, #16
 800d8c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d8c8:	f7ff ff82 	bl	800d7d0 <__hexdig_fun>
 800d8cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800d8d0:	fa5f fc8c 	uxtb.w	ip, ip
 800d8d4:	f1bc 0f18 	cmp.w	ip, #24
 800d8d8:	f04f 030a 	mov.w	r3, #10
 800d8dc:	d91e      	bls.n	800d91c <__gethex+0x120>
 800d8de:	b104      	cbz	r4, 800d8e2 <__gethex+0xe6>
 800d8e0:	4252      	negs	r2, r2
 800d8e2:	4417      	add	r7, r2
 800d8e4:	f8ca 1000 	str.w	r1, [sl]
 800d8e8:	b1ed      	cbz	r5, 800d926 <__gethex+0x12a>
 800d8ea:	f1bb 0f00 	cmp.w	fp, #0
 800d8ee:	bf0c      	ite	eq
 800d8f0:	2506      	moveq	r5, #6
 800d8f2:	2500      	movne	r5, #0
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	b005      	add	sp, #20
 800d8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fc:	2500      	movs	r5, #0
 800d8fe:	462c      	mov	r4, r5
 800d900:	e7b0      	b.n	800d864 <__gethex+0x68>
 800d902:	2c00      	cmp	r4, #0
 800d904:	d1c7      	bne.n	800d896 <__gethex+0x9a>
 800d906:	4627      	mov	r7, r4
 800d908:	e7c7      	b.n	800d89a <__gethex+0x9e>
 800d90a:	464e      	mov	r6, r9
 800d90c:	462f      	mov	r7, r5
 800d90e:	2501      	movs	r5, #1
 800d910:	e7c3      	b.n	800d89a <__gethex+0x9e>
 800d912:	2400      	movs	r4, #0
 800d914:	1cb1      	adds	r1, r6, #2
 800d916:	e7cc      	b.n	800d8b2 <__gethex+0xb6>
 800d918:	2401      	movs	r4, #1
 800d91a:	e7fb      	b.n	800d914 <__gethex+0x118>
 800d91c:	fb03 0002 	mla	r0, r3, r2, r0
 800d920:	e7ce      	b.n	800d8c0 <__gethex+0xc4>
 800d922:	4631      	mov	r1, r6
 800d924:	e7de      	b.n	800d8e4 <__gethex+0xe8>
 800d926:	eba6 0309 	sub.w	r3, r6, r9
 800d92a:	3b01      	subs	r3, #1
 800d92c:	4629      	mov	r1, r5
 800d92e:	2b07      	cmp	r3, #7
 800d930:	dc0a      	bgt.n	800d948 <__gethex+0x14c>
 800d932:	9801      	ldr	r0, [sp, #4]
 800d934:	f000 fa46 	bl	800ddc4 <_Balloc>
 800d938:	4604      	mov	r4, r0
 800d93a:	b940      	cbnz	r0, 800d94e <__gethex+0x152>
 800d93c:	4b5c      	ldr	r3, [pc, #368]	@ (800dab0 <__gethex+0x2b4>)
 800d93e:	4602      	mov	r2, r0
 800d940:	21e4      	movs	r1, #228	@ 0xe4
 800d942:	485c      	ldr	r0, [pc, #368]	@ (800dab4 <__gethex+0x2b8>)
 800d944:	f7ff fe8a 	bl	800d65c <__assert_func>
 800d948:	3101      	adds	r1, #1
 800d94a:	105b      	asrs	r3, r3, #1
 800d94c:	e7ef      	b.n	800d92e <__gethex+0x132>
 800d94e:	f100 0a14 	add.w	sl, r0, #20
 800d952:	2300      	movs	r3, #0
 800d954:	4655      	mov	r5, sl
 800d956:	469b      	mov	fp, r3
 800d958:	45b1      	cmp	r9, r6
 800d95a:	d337      	bcc.n	800d9cc <__gethex+0x1d0>
 800d95c:	f845 bb04 	str.w	fp, [r5], #4
 800d960:	eba5 050a 	sub.w	r5, r5, sl
 800d964:	10ad      	asrs	r5, r5, #2
 800d966:	6125      	str	r5, [r4, #16]
 800d968:	4658      	mov	r0, fp
 800d96a:	f000 fb1d 	bl	800dfa8 <__hi0bits>
 800d96e:	016d      	lsls	r5, r5, #5
 800d970:	f8d8 6000 	ldr.w	r6, [r8]
 800d974:	1a2d      	subs	r5, r5, r0
 800d976:	42b5      	cmp	r5, r6
 800d978:	dd54      	ble.n	800da24 <__gethex+0x228>
 800d97a:	1bad      	subs	r5, r5, r6
 800d97c:	4629      	mov	r1, r5
 800d97e:	4620      	mov	r0, r4
 800d980:	f000 fea9 	bl	800e6d6 <__any_on>
 800d984:	4681      	mov	r9, r0
 800d986:	b178      	cbz	r0, 800d9a8 <__gethex+0x1ac>
 800d988:	1e6b      	subs	r3, r5, #1
 800d98a:	1159      	asrs	r1, r3, #5
 800d98c:	f003 021f 	and.w	r2, r3, #31
 800d990:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d994:	f04f 0901 	mov.w	r9, #1
 800d998:	fa09 f202 	lsl.w	r2, r9, r2
 800d99c:	420a      	tst	r2, r1
 800d99e:	d003      	beq.n	800d9a8 <__gethex+0x1ac>
 800d9a0:	454b      	cmp	r3, r9
 800d9a2:	dc36      	bgt.n	800da12 <__gethex+0x216>
 800d9a4:	f04f 0902 	mov.w	r9, #2
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f7ff febe 	bl	800d72c <rshift>
 800d9b0:	442f      	add	r7, r5
 800d9b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9b6:	42bb      	cmp	r3, r7
 800d9b8:	da42      	bge.n	800da40 <__gethex+0x244>
 800d9ba:	9801      	ldr	r0, [sp, #4]
 800d9bc:	4621      	mov	r1, r4
 800d9be:	f000 fa41 	bl	800de44 <_Bfree>
 800d9c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	6013      	str	r3, [r2, #0]
 800d9c8:	25a3      	movs	r5, #163	@ 0xa3
 800d9ca:	e793      	b.n	800d8f4 <__gethex+0xf8>
 800d9cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d9d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d9d2:	d012      	beq.n	800d9fa <__gethex+0x1fe>
 800d9d4:	2b20      	cmp	r3, #32
 800d9d6:	d104      	bne.n	800d9e2 <__gethex+0x1e6>
 800d9d8:	f845 bb04 	str.w	fp, [r5], #4
 800d9dc:	f04f 0b00 	mov.w	fp, #0
 800d9e0:	465b      	mov	r3, fp
 800d9e2:	7830      	ldrb	r0, [r6, #0]
 800d9e4:	9303      	str	r3, [sp, #12]
 800d9e6:	f7ff fef3 	bl	800d7d0 <__hexdig_fun>
 800d9ea:	9b03      	ldr	r3, [sp, #12]
 800d9ec:	f000 000f 	and.w	r0, r0, #15
 800d9f0:	4098      	lsls	r0, r3
 800d9f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	e7ae      	b.n	800d958 <__gethex+0x15c>
 800d9fa:	45b1      	cmp	r9, r6
 800d9fc:	d8ea      	bhi.n	800d9d4 <__gethex+0x1d8>
 800d9fe:	492b      	ldr	r1, [pc, #172]	@ (800daac <__gethex+0x2b0>)
 800da00:	9303      	str	r3, [sp, #12]
 800da02:	2201      	movs	r2, #1
 800da04:	4630      	mov	r0, r6
 800da06:	f7ff fcfd 	bl	800d404 <strncmp>
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d1e1      	bne.n	800d9d4 <__gethex+0x1d8>
 800da10:	e7a2      	b.n	800d958 <__gethex+0x15c>
 800da12:	1ea9      	subs	r1, r5, #2
 800da14:	4620      	mov	r0, r4
 800da16:	f000 fe5e 	bl	800e6d6 <__any_on>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d0c2      	beq.n	800d9a4 <__gethex+0x1a8>
 800da1e:	f04f 0903 	mov.w	r9, #3
 800da22:	e7c1      	b.n	800d9a8 <__gethex+0x1ac>
 800da24:	da09      	bge.n	800da3a <__gethex+0x23e>
 800da26:	1b75      	subs	r5, r6, r5
 800da28:	4621      	mov	r1, r4
 800da2a:	9801      	ldr	r0, [sp, #4]
 800da2c:	462a      	mov	r2, r5
 800da2e:	f000 fc19 	bl	800e264 <__lshift>
 800da32:	1b7f      	subs	r7, r7, r5
 800da34:	4604      	mov	r4, r0
 800da36:	f100 0a14 	add.w	sl, r0, #20
 800da3a:	f04f 0900 	mov.w	r9, #0
 800da3e:	e7b8      	b.n	800d9b2 <__gethex+0x1b6>
 800da40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800da44:	42bd      	cmp	r5, r7
 800da46:	dd6f      	ble.n	800db28 <__gethex+0x32c>
 800da48:	1bed      	subs	r5, r5, r7
 800da4a:	42ae      	cmp	r6, r5
 800da4c:	dc34      	bgt.n	800dab8 <__gethex+0x2bc>
 800da4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da52:	2b02      	cmp	r3, #2
 800da54:	d022      	beq.n	800da9c <__gethex+0x2a0>
 800da56:	2b03      	cmp	r3, #3
 800da58:	d024      	beq.n	800daa4 <__gethex+0x2a8>
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d115      	bne.n	800da8a <__gethex+0x28e>
 800da5e:	42ae      	cmp	r6, r5
 800da60:	d113      	bne.n	800da8a <__gethex+0x28e>
 800da62:	2e01      	cmp	r6, #1
 800da64:	d10b      	bne.n	800da7e <__gethex+0x282>
 800da66:	9a02      	ldr	r2, [sp, #8]
 800da68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da6c:	6013      	str	r3, [r2, #0]
 800da6e:	2301      	movs	r3, #1
 800da70:	6123      	str	r3, [r4, #16]
 800da72:	f8ca 3000 	str.w	r3, [sl]
 800da76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da78:	2562      	movs	r5, #98	@ 0x62
 800da7a:	601c      	str	r4, [r3, #0]
 800da7c:	e73a      	b.n	800d8f4 <__gethex+0xf8>
 800da7e:	1e71      	subs	r1, r6, #1
 800da80:	4620      	mov	r0, r4
 800da82:	f000 fe28 	bl	800e6d6 <__any_on>
 800da86:	2800      	cmp	r0, #0
 800da88:	d1ed      	bne.n	800da66 <__gethex+0x26a>
 800da8a:	9801      	ldr	r0, [sp, #4]
 800da8c:	4621      	mov	r1, r4
 800da8e:	f000 f9d9 	bl	800de44 <_Bfree>
 800da92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da94:	2300      	movs	r3, #0
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	2550      	movs	r5, #80	@ 0x50
 800da9a:	e72b      	b.n	800d8f4 <__gethex+0xf8>
 800da9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1f3      	bne.n	800da8a <__gethex+0x28e>
 800daa2:	e7e0      	b.n	800da66 <__gethex+0x26a>
 800daa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1dd      	bne.n	800da66 <__gethex+0x26a>
 800daaa:	e7ee      	b.n	800da8a <__gethex+0x28e>
 800daac:	08010110 	.word	0x08010110
 800dab0:	080101d3 	.word	0x080101d3
 800dab4:	080101e4 	.word	0x080101e4
 800dab8:	1e6f      	subs	r7, r5, #1
 800daba:	f1b9 0f00 	cmp.w	r9, #0
 800dabe:	d130      	bne.n	800db22 <__gethex+0x326>
 800dac0:	b127      	cbz	r7, 800dacc <__gethex+0x2d0>
 800dac2:	4639      	mov	r1, r7
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 fe06 	bl	800e6d6 <__any_on>
 800daca:	4681      	mov	r9, r0
 800dacc:	117a      	asrs	r2, r7, #5
 800dace:	2301      	movs	r3, #1
 800dad0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dad4:	f007 071f 	and.w	r7, r7, #31
 800dad8:	40bb      	lsls	r3, r7
 800dada:	4213      	tst	r3, r2
 800dadc:	4629      	mov	r1, r5
 800dade:	4620      	mov	r0, r4
 800dae0:	bf18      	it	ne
 800dae2:	f049 0902 	orrne.w	r9, r9, #2
 800dae6:	f7ff fe21 	bl	800d72c <rshift>
 800daea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800daee:	1b76      	subs	r6, r6, r5
 800daf0:	2502      	movs	r5, #2
 800daf2:	f1b9 0f00 	cmp.w	r9, #0
 800daf6:	d047      	beq.n	800db88 <__gethex+0x38c>
 800daf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d015      	beq.n	800db2c <__gethex+0x330>
 800db00:	2b03      	cmp	r3, #3
 800db02:	d017      	beq.n	800db34 <__gethex+0x338>
 800db04:	2b01      	cmp	r3, #1
 800db06:	d109      	bne.n	800db1c <__gethex+0x320>
 800db08:	f019 0f02 	tst.w	r9, #2
 800db0c:	d006      	beq.n	800db1c <__gethex+0x320>
 800db0e:	f8da 3000 	ldr.w	r3, [sl]
 800db12:	ea49 0903 	orr.w	r9, r9, r3
 800db16:	f019 0f01 	tst.w	r9, #1
 800db1a:	d10e      	bne.n	800db3a <__gethex+0x33e>
 800db1c:	f045 0510 	orr.w	r5, r5, #16
 800db20:	e032      	b.n	800db88 <__gethex+0x38c>
 800db22:	f04f 0901 	mov.w	r9, #1
 800db26:	e7d1      	b.n	800dacc <__gethex+0x2d0>
 800db28:	2501      	movs	r5, #1
 800db2a:	e7e2      	b.n	800daf2 <__gethex+0x2f6>
 800db2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db2e:	f1c3 0301 	rsb	r3, r3, #1
 800db32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db36:	2b00      	cmp	r3, #0
 800db38:	d0f0      	beq.n	800db1c <__gethex+0x320>
 800db3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800db3e:	f104 0314 	add.w	r3, r4, #20
 800db42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800db46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800db4a:	f04f 0c00 	mov.w	ip, #0
 800db4e:	4618      	mov	r0, r3
 800db50:	f853 2b04 	ldr.w	r2, [r3], #4
 800db54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800db58:	d01b      	beq.n	800db92 <__gethex+0x396>
 800db5a:	3201      	adds	r2, #1
 800db5c:	6002      	str	r2, [r0, #0]
 800db5e:	2d02      	cmp	r5, #2
 800db60:	f104 0314 	add.w	r3, r4, #20
 800db64:	d13c      	bne.n	800dbe0 <__gethex+0x3e4>
 800db66:	f8d8 2000 	ldr.w	r2, [r8]
 800db6a:	3a01      	subs	r2, #1
 800db6c:	42b2      	cmp	r2, r6
 800db6e:	d109      	bne.n	800db84 <__gethex+0x388>
 800db70:	1171      	asrs	r1, r6, #5
 800db72:	2201      	movs	r2, #1
 800db74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db78:	f006 061f 	and.w	r6, r6, #31
 800db7c:	fa02 f606 	lsl.w	r6, r2, r6
 800db80:	421e      	tst	r6, r3
 800db82:	d13a      	bne.n	800dbfa <__gethex+0x3fe>
 800db84:	f045 0520 	orr.w	r5, r5, #32
 800db88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db8a:	601c      	str	r4, [r3, #0]
 800db8c:	9b02      	ldr	r3, [sp, #8]
 800db8e:	601f      	str	r7, [r3, #0]
 800db90:	e6b0      	b.n	800d8f4 <__gethex+0xf8>
 800db92:	4299      	cmp	r1, r3
 800db94:	f843 cc04 	str.w	ip, [r3, #-4]
 800db98:	d8d9      	bhi.n	800db4e <__gethex+0x352>
 800db9a:	68a3      	ldr	r3, [r4, #8]
 800db9c:	459b      	cmp	fp, r3
 800db9e:	db17      	blt.n	800dbd0 <__gethex+0x3d4>
 800dba0:	6861      	ldr	r1, [r4, #4]
 800dba2:	9801      	ldr	r0, [sp, #4]
 800dba4:	3101      	adds	r1, #1
 800dba6:	f000 f90d 	bl	800ddc4 <_Balloc>
 800dbaa:	4681      	mov	r9, r0
 800dbac:	b918      	cbnz	r0, 800dbb6 <__gethex+0x3ba>
 800dbae:	4b1a      	ldr	r3, [pc, #104]	@ (800dc18 <__gethex+0x41c>)
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	2184      	movs	r1, #132	@ 0x84
 800dbb4:	e6c5      	b.n	800d942 <__gethex+0x146>
 800dbb6:	6922      	ldr	r2, [r4, #16]
 800dbb8:	3202      	adds	r2, #2
 800dbba:	f104 010c 	add.w	r1, r4, #12
 800dbbe:	0092      	lsls	r2, r2, #2
 800dbc0:	300c      	adds	r0, #12
 800dbc2:	f7ff fd2e 	bl	800d622 <memcpy>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	9801      	ldr	r0, [sp, #4]
 800dbca:	f000 f93b 	bl	800de44 <_Bfree>
 800dbce:	464c      	mov	r4, r9
 800dbd0:	6923      	ldr	r3, [r4, #16]
 800dbd2:	1c5a      	adds	r2, r3, #1
 800dbd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbd8:	6122      	str	r2, [r4, #16]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	615a      	str	r2, [r3, #20]
 800dbde:	e7be      	b.n	800db5e <__gethex+0x362>
 800dbe0:	6922      	ldr	r2, [r4, #16]
 800dbe2:	455a      	cmp	r2, fp
 800dbe4:	dd0b      	ble.n	800dbfe <__gethex+0x402>
 800dbe6:	2101      	movs	r1, #1
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f7ff fd9f 	bl	800d72c <rshift>
 800dbee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbf2:	3701      	adds	r7, #1
 800dbf4:	42bb      	cmp	r3, r7
 800dbf6:	f6ff aee0 	blt.w	800d9ba <__gethex+0x1be>
 800dbfa:	2501      	movs	r5, #1
 800dbfc:	e7c2      	b.n	800db84 <__gethex+0x388>
 800dbfe:	f016 061f 	ands.w	r6, r6, #31
 800dc02:	d0fa      	beq.n	800dbfa <__gethex+0x3fe>
 800dc04:	4453      	add	r3, sl
 800dc06:	f1c6 0620 	rsb	r6, r6, #32
 800dc0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dc0e:	f000 f9cb 	bl	800dfa8 <__hi0bits>
 800dc12:	42b0      	cmp	r0, r6
 800dc14:	dbe7      	blt.n	800dbe6 <__gethex+0x3ea>
 800dc16:	e7f0      	b.n	800dbfa <__gethex+0x3fe>
 800dc18:	080101d3 	.word	0x080101d3

0800dc1c <L_shift>:
 800dc1c:	f1c2 0208 	rsb	r2, r2, #8
 800dc20:	0092      	lsls	r2, r2, #2
 800dc22:	b570      	push	{r4, r5, r6, lr}
 800dc24:	f1c2 0620 	rsb	r6, r2, #32
 800dc28:	6843      	ldr	r3, [r0, #4]
 800dc2a:	6804      	ldr	r4, [r0, #0]
 800dc2c:	fa03 f506 	lsl.w	r5, r3, r6
 800dc30:	432c      	orrs	r4, r5
 800dc32:	40d3      	lsrs	r3, r2
 800dc34:	6004      	str	r4, [r0, #0]
 800dc36:	f840 3f04 	str.w	r3, [r0, #4]!
 800dc3a:	4288      	cmp	r0, r1
 800dc3c:	d3f4      	bcc.n	800dc28 <L_shift+0xc>
 800dc3e:	bd70      	pop	{r4, r5, r6, pc}

0800dc40 <__match>:
 800dc40:	b530      	push	{r4, r5, lr}
 800dc42:	6803      	ldr	r3, [r0, #0]
 800dc44:	3301      	adds	r3, #1
 800dc46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc4a:	b914      	cbnz	r4, 800dc52 <__match+0x12>
 800dc4c:	6003      	str	r3, [r0, #0]
 800dc4e:	2001      	movs	r0, #1
 800dc50:	bd30      	pop	{r4, r5, pc}
 800dc52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dc5a:	2d19      	cmp	r5, #25
 800dc5c:	bf98      	it	ls
 800dc5e:	3220      	addls	r2, #32
 800dc60:	42a2      	cmp	r2, r4
 800dc62:	d0f0      	beq.n	800dc46 <__match+0x6>
 800dc64:	2000      	movs	r0, #0
 800dc66:	e7f3      	b.n	800dc50 <__match+0x10>

0800dc68 <__hexnan>:
 800dc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6c:	680b      	ldr	r3, [r1, #0]
 800dc6e:	6801      	ldr	r1, [r0, #0]
 800dc70:	115e      	asrs	r6, r3, #5
 800dc72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc76:	f013 031f 	ands.w	r3, r3, #31
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	bf18      	it	ne
 800dc7e:	3604      	addne	r6, #4
 800dc80:	2500      	movs	r5, #0
 800dc82:	1f37      	subs	r7, r6, #4
 800dc84:	4682      	mov	sl, r0
 800dc86:	4690      	mov	r8, r2
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc8e:	46b9      	mov	r9, r7
 800dc90:	463c      	mov	r4, r7
 800dc92:	9502      	str	r5, [sp, #8]
 800dc94:	46ab      	mov	fp, r5
 800dc96:	784a      	ldrb	r2, [r1, #1]
 800dc98:	1c4b      	adds	r3, r1, #1
 800dc9a:	9303      	str	r3, [sp, #12]
 800dc9c:	b342      	cbz	r2, 800dcf0 <__hexnan+0x88>
 800dc9e:	4610      	mov	r0, r2
 800dca0:	9105      	str	r1, [sp, #20]
 800dca2:	9204      	str	r2, [sp, #16]
 800dca4:	f7ff fd94 	bl	800d7d0 <__hexdig_fun>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	d151      	bne.n	800dd50 <__hexnan+0xe8>
 800dcac:	9a04      	ldr	r2, [sp, #16]
 800dcae:	9905      	ldr	r1, [sp, #20]
 800dcb0:	2a20      	cmp	r2, #32
 800dcb2:	d818      	bhi.n	800dce6 <__hexnan+0x7e>
 800dcb4:	9b02      	ldr	r3, [sp, #8]
 800dcb6:	459b      	cmp	fp, r3
 800dcb8:	dd13      	ble.n	800dce2 <__hexnan+0x7a>
 800dcba:	454c      	cmp	r4, r9
 800dcbc:	d206      	bcs.n	800dccc <__hexnan+0x64>
 800dcbe:	2d07      	cmp	r5, #7
 800dcc0:	dc04      	bgt.n	800dccc <__hexnan+0x64>
 800dcc2:	462a      	mov	r2, r5
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f7ff ffa8 	bl	800dc1c <L_shift>
 800dccc:	4544      	cmp	r4, r8
 800dcce:	d952      	bls.n	800dd76 <__hexnan+0x10e>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	f1a4 0904 	sub.w	r9, r4, #4
 800dcd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcda:	f8cd b008 	str.w	fp, [sp, #8]
 800dcde:	464c      	mov	r4, r9
 800dce0:	461d      	mov	r5, r3
 800dce2:	9903      	ldr	r1, [sp, #12]
 800dce4:	e7d7      	b.n	800dc96 <__hexnan+0x2e>
 800dce6:	2a29      	cmp	r2, #41	@ 0x29
 800dce8:	d157      	bne.n	800dd9a <__hexnan+0x132>
 800dcea:	3102      	adds	r1, #2
 800dcec:	f8ca 1000 	str.w	r1, [sl]
 800dcf0:	f1bb 0f00 	cmp.w	fp, #0
 800dcf4:	d051      	beq.n	800dd9a <__hexnan+0x132>
 800dcf6:	454c      	cmp	r4, r9
 800dcf8:	d206      	bcs.n	800dd08 <__hexnan+0xa0>
 800dcfa:	2d07      	cmp	r5, #7
 800dcfc:	dc04      	bgt.n	800dd08 <__hexnan+0xa0>
 800dcfe:	462a      	mov	r2, r5
 800dd00:	4649      	mov	r1, r9
 800dd02:	4620      	mov	r0, r4
 800dd04:	f7ff ff8a 	bl	800dc1c <L_shift>
 800dd08:	4544      	cmp	r4, r8
 800dd0a:	d936      	bls.n	800dd7a <__hexnan+0x112>
 800dd0c:	f1a8 0204 	sub.w	r2, r8, #4
 800dd10:	4623      	mov	r3, r4
 800dd12:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd16:	f842 1f04 	str.w	r1, [r2, #4]!
 800dd1a:	429f      	cmp	r7, r3
 800dd1c:	d2f9      	bcs.n	800dd12 <__hexnan+0xaa>
 800dd1e:	1b3b      	subs	r3, r7, r4
 800dd20:	f023 0303 	bic.w	r3, r3, #3
 800dd24:	3304      	adds	r3, #4
 800dd26:	3401      	adds	r4, #1
 800dd28:	3e03      	subs	r6, #3
 800dd2a:	42b4      	cmp	r4, r6
 800dd2c:	bf88      	it	hi
 800dd2e:	2304      	movhi	r3, #4
 800dd30:	4443      	add	r3, r8
 800dd32:	2200      	movs	r2, #0
 800dd34:	f843 2b04 	str.w	r2, [r3], #4
 800dd38:	429f      	cmp	r7, r3
 800dd3a:	d2fb      	bcs.n	800dd34 <__hexnan+0xcc>
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	b91b      	cbnz	r3, 800dd48 <__hexnan+0xe0>
 800dd40:	4547      	cmp	r7, r8
 800dd42:	d128      	bne.n	800dd96 <__hexnan+0x12e>
 800dd44:	2301      	movs	r3, #1
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	2005      	movs	r0, #5
 800dd4a:	b007      	add	sp, #28
 800dd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd50:	3501      	adds	r5, #1
 800dd52:	2d08      	cmp	r5, #8
 800dd54:	f10b 0b01 	add.w	fp, fp, #1
 800dd58:	dd06      	ble.n	800dd68 <__hexnan+0x100>
 800dd5a:	4544      	cmp	r4, r8
 800dd5c:	d9c1      	bls.n	800dce2 <__hexnan+0x7a>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd64:	2501      	movs	r5, #1
 800dd66:	3c04      	subs	r4, #4
 800dd68:	6822      	ldr	r2, [r4, #0]
 800dd6a:	f000 000f 	and.w	r0, r0, #15
 800dd6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dd72:	6020      	str	r0, [r4, #0]
 800dd74:	e7b5      	b.n	800dce2 <__hexnan+0x7a>
 800dd76:	2508      	movs	r5, #8
 800dd78:	e7b3      	b.n	800dce2 <__hexnan+0x7a>
 800dd7a:	9b01      	ldr	r3, [sp, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d0dd      	beq.n	800dd3c <__hexnan+0xd4>
 800dd80:	f1c3 0320 	rsb	r3, r3, #32
 800dd84:	f04f 32ff 	mov.w	r2, #4294967295
 800dd88:	40da      	lsrs	r2, r3
 800dd8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd8e:	4013      	ands	r3, r2
 800dd90:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd94:	e7d2      	b.n	800dd3c <__hexnan+0xd4>
 800dd96:	3f04      	subs	r7, #4
 800dd98:	e7d0      	b.n	800dd3c <__hexnan+0xd4>
 800dd9a:	2004      	movs	r0, #4
 800dd9c:	e7d5      	b.n	800dd4a <__hexnan+0xe2>

0800dd9e <__ascii_mbtowc>:
 800dd9e:	b082      	sub	sp, #8
 800dda0:	b901      	cbnz	r1, 800dda4 <__ascii_mbtowc+0x6>
 800dda2:	a901      	add	r1, sp, #4
 800dda4:	b142      	cbz	r2, 800ddb8 <__ascii_mbtowc+0x1a>
 800dda6:	b14b      	cbz	r3, 800ddbc <__ascii_mbtowc+0x1e>
 800dda8:	7813      	ldrb	r3, [r2, #0]
 800ddaa:	600b      	str	r3, [r1, #0]
 800ddac:	7812      	ldrb	r2, [r2, #0]
 800ddae:	1e10      	subs	r0, r2, #0
 800ddb0:	bf18      	it	ne
 800ddb2:	2001      	movne	r0, #1
 800ddb4:	b002      	add	sp, #8
 800ddb6:	4770      	bx	lr
 800ddb8:	4610      	mov	r0, r2
 800ddba:	e7fb      	b.n	800ddb4 <__ascii_mbtowc+0x16>
 800ddbc:	f06f 0001 	mvn.w	r0, #1
 800ddc0:	e7f8      	b.n	800ddb4 <__ascii_mbtowc+0x16>
	...

0800ddc4 <_Balloc>:
 800ddc4:	b570      	push	{r4, r5, r6, lr}
 800ddc6:	69c6      	ldr	r6, [r0, #28]
 800ddc8:	4604      	mov	r4, r0
 800ddca:	460d      	mov	r5, r1
 800ddcc:	b976      	cbnz	r6, 800ddec <_Balloc+0x28>
 800ddce:	2010      	movs	r0, #16
 800ddd0:	f7fe f938 	bl	800c044 <malloc>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	61e0      	str	r0, [r4, #28]
 800ddd8:	b920      	cbnz	r0, 800dde4 <_Balloc+0x20>
 800ddda:	4b18      	ldr	r3, [pc, #96]	@ (800de3c <_Balloc+0x78>)
 800dddc:	4818      	ldr	r0, [pc, #96]	@ (800de40 <_Balloc+0x7c>)
 800ddde:	216b      	movs	r1, #107	@ 0x6b
 800dde0:	f7ff fc3c 	bl	800d65c <__assert_func>
 800dde4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dde8:	6006      	str	r6, [r0, #0]
 800ddea:	60c6      	str	r6, [r0, #12]
 800ddec:	69e6      	ldr	r6, [r4, #28]
 800ddee:	68f3      	ldr	r3, [r6, #12]
 800ddf0:	b183      	cbz	r3, 800de14 <_Balloc+0x50>
 800ddf2:	69e3      	ldr	r3, [r4, #28]
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddfa:	b9b8      	cbnz	r0, 800de2c <_Balloc+0x68>
 800ddfc:	2101      	movs	r1, #1
 800ddfe:	fa01 f605 	lsl.w	r6, r1, r5
 800de02:	1d72      	adds	r2, r6, #5
 800de04:	0092      	lsls	r2, r2, #2
 800de06:	4620      	mov	r0, r4
 800de08:	f001 f8d9 	bl	800efbe <_calloc_r>
 800de0c:	b160      	cbz	r0, 800de28 <_Balloc+0x64>
 800de0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de12:	e00e      	b.n	800de32 <_Balloc+0x6e>
 800de14:	2221      	movs	r2, #33	@ 0x21
 800de16:	2104      	movs	r1, #4
 800de18:	4620      	mov	r0, r4
 800de1a:	f001 f8d0 	bl	800efbe <_calloc_r>
 800de1e:	69e3      	ldr	r3, [r4, #28]
 800de20:	60f0      	str	r0, [r6, #12]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d1e4      	bne.n	800ddf2 <_Balloc+0x2e>
 800de28:	2000      	movs	r0, #0
 800de2a:	bd70      	pop	{r4, r5, r6, pc}
 800de2c:	6802      	ldr	r2, [r0, #0]
 800de2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de32:	2300      	movs	r3, #0
 800de34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de38:	e7f7      	b.n	800de2a <_Balloc+0x66>
 800de3a:	bf00      	nop
 800de3c:	0801011e 	.word	0x0801011e
 800de40:	08010244 	.word	0x08010244

0800de44 <_Bfree>:
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	69c6      	ldr	r6, [r0, #28]
 800de48:	4605      	mov	r5, r0
 800de4a:	460c      	mov	r4, r1
 800de4c:	b976      	cbnz	r6, 800de6c <_Bfree+0x28>
 800de4e:	2010      	movs	r0, #16
 800de50:	f7fe f8f8 	bl	800c044 <malloc>
 800de54:	4602      	mov	r2, r0
 800de56:	61e8      	str	r0, [r5, #28]
 800de58:	b920      	cbnz	r0, 800de64 <_Bfree+0x20>
 800de5a:	4b09      	ldr	r3, [pc, #36]	@ (800de80 <_Bfree+0x3c>)
 800de5c:	4809      	ldr	r0, [pc, #36]	@ (800de84 <_Bfree+0x40>)
 800de5e:	218f      	movs	r1, #143	@ 0x8f
 800de60:	f7ff fbfc 	bl	800d65c <__assert_func>
 800de64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de68:	6006      	str	r6, [r0, #0]
 800de6a:	60c6      	str	r6, [r0, #12]
 800de6c:	b13c      	cbz	r4, 800de7e <_Bfree+0x3a>
 800de6e:	69eb      	ldr	r3, [r5, #28]
 800de70:	6862      	ldr	r2, [r4, #4]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de78:	6021      	str	r1, [r4, #0]
 800de7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de7e:	bd70      	pop	{r4, r5, r6, pc}
 800de80:	0801011e 	.word	0x0801011e
 800de84:	08010244 	.word	0x08010244

0800de88 <__multadd>:
 800de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8c:	690d      	ldr	r5, [r1, #16]
 800de8e:	4607      	mov	r7, r0
 800de90:	460c      	mov	r4, r1
 800de92:	461e      	mov	r6, r3
 800de94:	f101 0c14 	add.w	ip, r1, #20
 800de98:	2000      	movs	r0, #0
 800de9a:	f8dc 3000 	ldr.w	r3, [ip]
 800de9e:	b299      	uxth	r1, r3
 800dea0:	fb02 6101 	mla	r1, r2, r1, r6
 800dea4:	0c1e      	lsrs	r6, r3, #16
 800dea6:	0c0b      	lsrs	r3, r1, #16
 800dea8:	fb02 3306 	mla	r3, r2, r6, r3
 800deac:	b289      	uxth	r1, r1
 800deae:	3001      	adds	r0, #1
 800deb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800deb4:	4285      	cmp	r5, r0
 800deb6:	f84c 1b04 	str.w	r1, [ip], #4
 800deba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800debe:	dcec      	bgt.n	800de9a <__multadd+0x12>
 800dec0:	b30e      	cbz	r6, 800df06 <__multadd+0x7e>
 800dec2:	68a3      	ldr	r3, [r4, #8]
 800dec4:	42ab      	cmp	r3, r5
 800dec6:	dc19      	bgt.n	800defc <__multadd+0x74>
 800dec8:	6861      	ldr	r1, [r4, #4]
 800deca:	4638      	mov	r0, r7
 800decc:	3101      	adds	r1, #1
 800dece:	f7ff ff79 	bl	800ddc4 <_Balloc>
 800ded2:	4680      	mov	r8, r0
 800ded4:	b928      	cbnz	r0, 800dee2 <__multadd+0x5a>
 800ded6:	4602      	mov	r2, r0
 800ded8:	4b0c      	ldr	r3, [pc, #48]	@ (800df0c <__multadd+0x84>)
 800deda:	480d      	ldr	r0, [pc, #52]	@ (800df10 <__multadd+0x88>)
 800dedc:	21ba      	movs	r1, #186	@ 0xba
 800dede:	f7ff fbbd 	bl	800d65c <__assert_func>
 800dee2:	6922      	ldr	r2, [r4, #16]
 800dee4:	3202      	adds	r2, #2
 800dee6:	f104 010c 	add.w	r1, r4, #12
 800deea:	0092      	lsls	r2, r2, #2
 800deec:	300c      	adds	r0, #12
 800deee:	f7ff fb98 	bl	800d622 <memcpy>
 800def2:	4621      	mov	r1, r4
 800def4:	4638      	mov	r0, r7
 800def6:	f7ff ffa5 	bl	800de44 <_Bfree>
 800defa:	4644      	mov	r4, r8
 800defc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df00:	3501      	adds	r5, #1
 800df02:	615e      	str	r6, [r3, #20]
 800df04:	6125      	str	r5, [r4, #16]
 800df06:	4620      	mov	r0, r4
 800df08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0c:	080101d3 	.word	0x080101d3
 800df10:	08010244 	.word	0x08010244

0800df14 <__s2b>:
 800df14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df18:	460c      	mov	r4, r1
 800df1a:	4615      	mov	r5, r2
 800df1c:	461f      	mov	r7, r3
 800df1e:	2209      	movs	r2, #9
 800df20:	3308      	adds	r3, #8
 800df22:	4606      	mov	r6, r0
 800df24:	fb93 f3f2 	sdiv	r3, r3, r2
 800df28:	2100      	movs	r1, #0
 800df2a:	2201      	movs	r2, #1
 800df2c:	429a      	cmp	r2, r3
 800df2e:	db09      	blt.n	800df44 <__s2b+0x30>
 800df30:	4630      	mov	r0, r6
 800df32:	f7ff ff47 	bl	800ddc4 <_Balloc>
 800df36:	b940      	cbnz	r0, 800df4a <__s2b+0x36>
 800df38:	4602      	mov	r2, r0
 800df3a:	4b19      	ldr	r3, [pc, #100]	@ (800dfa0 <__s2b+0x8c>)
 800df3c:	4819      	ldr	r0, [pc, #100]	@ (800dfa4 <__s2b+0x90>)
 800df3e:	21d3      	movs	r1, #211	@ 0xd3
 800df40:	f7ff fb8c 	bl	800d65c <__assert_func>
 800df44:	0052      	lsls	r2, r2, #1
 800df46:	3101      	adds	r1, #1
 800df48:	e7f0      	b.n	800df2c <__s2b+0x18>
 800df4a:	9b08      	ldr	r3, [sp, #32]
 800df4c:	6143      	str	r3, [r0, #20]
 800df4e:	2d09      	cmp	r5, #9
 800df50:	f04f 0301 	mov.w	r3, #1
 800df54:	6103      	str	r3, [r0, #16]
 800df56:	dd16      	ble.n	800df86 <__s2b+0x72>
 800df58:	f104 0909 	add.w	r9, r4, #9
 800df5c:	46c8      	mov	r8, r9
 800df5e:	442c      	add	r4, r5
 800df60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df64:	4601      	mov	r1, r0
 800df66:	3b30      	subs	r3, #48	@ 0x30
 800df68:	220a      	movs	r2, #10
 800df6a:	4630      	mov	r0, r6
 800df6c:	f7ff ff8c 	bl	800de88 <__multadd>
 800df70:	45a0      	cmp	r8, r4
 800df72:	d1f5      	bne.n	800df60 <__s2b+0x4c>
 800df74:	f1a5 0408 	sub.w	r4, r5, #8
 800df78:	444c      	add	r4, r9
 800df7a:	1b2d      	subs	r5, r5, r4
 800df7c:	1963      	adds	r3, r4, r5
 800df7e:	42bb      	cmp	r3, r7
 800df80:	db04      	blt.n	800df8c <__s2b+0x78>
 800df82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df86:	340a      	adds	r4, #10
 800df88:	2509      	movs	r5, #9
 800df8a:	e7f6      	b.n	800df7a <__s2b+0x66>
 800df8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df90:	4601      	mov	r1, r0
 800df92:	3b30      	subs	r3, #48	@ 0x30
 800df94:	220a      	movs	r2, #10
 800df96:	4630      	mov	r0, r6
 800df98:	f7ff ff76 	bl	800de88 <__multadd>
 800df9c:	e7ee      	b.n	800df7c <__s2b+0x68>
 800df9e:	bf00      	nop
 800dfa0:	080101d3 	.word	0x080101d3
 800dfa4:	08010244 	.word	0x08010244

0800dfa8 <__hi0bits>:
 800dfa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dfac:	4603      	mov	r3, r0
 800dfae:	bf36      	itet	cc
 800dfb0:	0403      	lslcc	r3, r0, #16
 800dfb2:	2000      	movcs	r0, #0
 800dfb4:	2010      	movcc	r0, #16
 800dfb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfba:	bf3c      	itt	cc
 800dfbc:	021b      	lslcc	r3, r3, #8
 800dfbe:	3008      	addcc	r0, #8
 800dfc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dfc4:	bf3c      	itt	cc
 800dfc6:	011b      	lslcc	r3, r3, #4
 800dfc8:	3004      	addcc	r0, #4
 800dfca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfce:	bf3c      	itt	cc
 800dfd0:	009b      	lslcc	r3, r3, #2
 800dfd2:	3002      	addcc	r0, #2
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	db05      	blt.n	800dfe4 <__hi0bits+0x3c>
 800dfd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dfdc:	f100 0001 	add.w	r0, r0, #1
 800dfe0:	bf08      	it	eq
 800dfe2:	2020      	moveq	r0, #32
 800dfe4:	4770      	bx	lr

0800dfe6 <__lo0bits>:
 800dfe6:	6803      	ldr	r3, [r0, #0]
 800dfe8:	4602      	mov	r2, r0
 800dfea:	f013 0007 	ands.w	r0, r3, #7
 800dfee:	d00b      	beq.n	800e008 <__lo0bits+0x22>
 800dff0:	07d9      	lsls	r1, r3, #31
 800dff2:	d421      	bmi.n	800e038 <__lo0bits+0x52>
 800dff4:	0798      	lsls	r0, r3, #30
 800dff6:	bf49      	itett	mi
 800dff8:	085b      	lsrmi	r3, r3, #1
 800dffa:	089b      	lsrpl	r3, r3, #2
 800dffc:	2001      	movmi	r0, #1
 800dffe:	6013      	strmi	r3, [r2, #0]
 800e000:	bf5c      	itt	pl
 800e002:	6013      	strpl	r3, [r2, #0]
 800e004:	2002      	movpl	r0, #2
 800e006:	4770      	bx	lr
 800e008:	b299      	uxth	r1, r3
 800e00a:	b909      	cbnz	r1, 800e010 <__lo0bits+0x2a>
 800e00c:	0c1b      	lsrs	r3, r3, #16
 800e00e:	2010      	movs	r0, #16
 800e010:	b2d9      	uxtb	r1, r3
 800e012:	b909      	cbnz	r1, 800e018 <__lo0bits+0x32>
 800e014:	3008      	adds	r0, #8
 800e016:	0a1b      	lsrs	r3, r3, #8
 800e018:	0719      	lsls	r1, r3, #28
 800e01a:	bf04      	itt	eq
 800e01c:	091b      	lsreq	r3, r3, #4
 800e01e:	3004      	addeq	r0, #4
 800e020:	0799      	lsls	r1, r3, #30
 800e022:	bf04      	itt	eq
 800e024:	089b      	lsreq	r3, r3, #2
 800e026:	3002      	addeq	r0, #2
 800e028:	07d9      	lsls	r1, r3, #31
 800e02a:	d403      	bmi.n	800e034 <__lo0bits+0x4e>
 800e02c:	085b      	lsrs	r3, r3, #1
 800e02e:	f100 0001 	add.w	r0, r0, #1
 800e032:	d003      	beq.n	800e03c <__lo0bits+0x56>
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	4770      	bx	lr
 800e038:	2000      	movs	r0, #0
 800e03a:	4770      	bx	lr
 800e03c:	2020      	movs	r0, #32
 800e03e:	4770      	bx	lr

0800e040 <__i2b>:
 800e040:	b510      	push	{r4, lr}
 800e042:	460c      	mov	r4, r1
 800e044:	2101      	movs	r1, #1
 800e046:	f7ff febd 	bl	800ddc4 <_Balloc>
 800e04a:	4602      	mov	r2, r0
 800e04c:	b928      	cbnz	r0, 800e05a <__i2b+0x1a>
 800e04e:	4b05      	ldr	r3, [pc, #20]	@ (800e064 <__i2b+0x24>)
 800e050:	4805      	ldr	r0, [pc, #20]	@ (800e068 <__i2b+0x28>)
 800e052:	f240 1145 	movw	r1, #325	@ 0x145
 800e056:	f7ff fb01 	bl	800d65c <__assert_func>
 800e05a:	2301      	movs	r3, #1
 800e05c:	6144      	str	r4, [r0, #20]
 800e05e:	6103      	str	r3, [r0, #16]
 800e060:	bd10      	pop	{r4, pc}
 800e062:	bf00      	nop
 800e064:	080101d3 	.word	0x080101d3
 800e068:	08010244 	.word	0x08010244

0800e06c <__multiply>:
 800e06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e070:	4617      	mov	r7, r2
 800e072:	690a      	ldr	r2, [r1, #16]
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	429a      	cmp	r2, r3
 800e078:	bfa8      	it	ge
 800e07a:	463b      	movge	r3, r7
 800e07c:	4689      	mov	r9, r1
 800e07e:	bfa4      	itt	ge
 800e080:	460f      	movge	r7, r1
 800e082:	4699      	movge	r9, r3
 800e084:	693d      	ldr	r5, [r7, #16]
 800e086:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	6879      	ldr	r1, [r7, #4]
 800e08e:	eb05 060a 	add.w	r6, r5, sl
 800e092:	42b3      	cmp	r3, r6
 800e094:	b085      	sub	sp, #20
 800e096:	bfb8      	it	lt
 800e098:	3101      	addlt	r1, #1
 800e09a:	f7ff fe93 	bl	800ddc4 <_Balloc>
 800e09e:	b930      	cbnz	r0, 800e0ae <__multiply+0x42>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	4b41      	ldr	r3, [pc, #260]	@ (800e1a8 <__multiply+0x13c>)
 800e0a4:	4841      	ldr	r0, [pc, #260]	@ (800e1ac <__multiply+0x140>)
 800e0a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e0aa:	f7ff fad7 	bl	800d65c <__assert_func>
 800e0ae:	f100 0414 	add.w	r4, r0, #20
 800e0b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e0b6:	4623      	mov	r3, r4
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	4573      	cmp	r3, lr
 800e0bc:	d320      	bcc.n	800e100 <__multiply+0x94>
 800e0be:	f107 0814 	add.w	r8, r7, #20
 800e0c2:	f109 0114 	add.w	r1, r9, #20
 800e0c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e0ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e0ce:	9302      	str	r3, [sp, #8]
 800e0d0:	1beb      	subs	r3, r5, r7
 800e0d2:	3b15      	subs	r3, #21
 800e0d4:	f023 0303 	bic.w	r3, r3, #3
 800e0d8:	3304      	adds	r3, #4
 800e0da:	3715      	adds	r7, #21
 800e0dc:	42bd      	cmp	r5, r7
 800e0de:	bf38      	it	cc
 800e0e0:	2304      	movcc	r3, #4
 800e0e2:	9301      	str	r3, [sp, #4]
 800e0e4:	9b02      	ldr	r3, [sp, #8]
 800e0e6:	9103      	str	r1, [sp, #12]
 800e0e8:	428b      	cmp	r3, r1
 800e0ea:	d80c      	bhi.n	800e106 <__multiply+0x9a>
 800e0ec:	2e00      	cmp	r6, #0
 800e0ee:	dd03      	ble.n	800e0f8 <__multiply+0x8c>
 800e0f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d055      	beq.n	800e1a4 <__multiply+0x138>
 800e0f8:	6106      	str	r6, [r0, #16]
 800e0fa:	b005      	add	sp, #20
 800e0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e100:	f843 2b04 	str.w	r2, [r3], #4
 800e104:	e7d9      	b.n	800e0ba <__multiply+0x4e>
 800e106:	f8b1 a000 	ldrh.w	sl, [r1]
 800e10a:	f1ba 0f00 	cmp.w	sl, #0
 800e10e:	d01f      	beq.n	800e150 <__multiply+0xe4>
 800e110:	46c4      	mov	ip, r8
 800e112:	46a1      	mov	r9, r4
 800e114:	2700      	movs	r7, #0
 800e116:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e11a:	f8d9 3000 	ldr.w	r3, [r9]
 800e11e:	fa1f fb82 	uxth.w	fp, r2
 800e122:	b29b      	uxth	r3, r3
 800e124:	fb0a 330b 	mla	r3, sl, fp, r3
 800e128:	443b      	add	r3, r7
 800e12a:	f8d9 7000 	ldr.w	r7, [r9]
 800e12e:	0c12      	lsrs	r2, r2, #16
 800e130:	0c3f      	lsrs	r7, r7, #16
 800e132:	fb0a 7202 	mla	r2, sl, r2, r7
 800e136:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e140:	4565      	cmp	r5, ip
 800e142:	f849 3b04 	str.w	r3, [r9], #4
 800e146:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e14a:	d8e4      	bhi.n	800e116 <__multiply+0xaa>
 800e14c:	9b01      	ldr	r3, [sp, #4]
 800e14e:	50e7      	str	r7, [r4, r3]
 800e150:	9b03      	ldr	r3, [sp, #12]
 800e152:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e156:	3104      	adds	r1, #4
 800e158:	f1b9 0f00 	cmp.w	r9, #0
 800e15c:	d020      	beq.n	800e1a0 <__multiply+0x134>
 800e15e:	6823      	ldr	r3, [r4, #0]
 800e160:	4647      	mov	r7, r8
 800e162:	46a4      	mov	ip, r4
 800e164:	f04f 0a00 	mov.w	sl, #0
 800e168:	f8b7 b000 	ldrh.w	fp, [r7]
 800e16c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e170:	fb09 220b 	mla	r2, r9, fp, r2
 800e174:	4452      	add	r2, sl
 800e176:	b29b      	uxth	r3, r3
 800e178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e17c:	f84c 3b04 	str.w	r3, [ip], #4
 800e180:	f857 3b04 	ldr.w	r3, [r7], #4
 800e184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e188:	f8bc 3000 	ldrh.w	r3, [ip]
 800e18c:	fb09 330a 	mla	r3, r9, sl, r3
 800e190:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e194:	42bd      	cmp	r5, r7
 800e196:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e19a:	d8e5      	bhi.n	800e168 <__multiply+0xfc>
 800e19c:	9a01      	ldr	r2, [sp, #4]
 800e19e:	50a3      	str	r3, [r4, r2]
 800e1a0:	3404      	adds	r4, #4
 800e1a2:	e79f      	b.n	800e0e4 <__multiply+0x78>
 800e1a4:	3e01      	subs	r6, #1
 800e1a6:	e7a1      	b.n	800e0ec <__multiply+0x80>
 800e1a8:	080101d3 	.word	0x080101d3
 800e1ac:	08010244 	.word	0x08010244

0800e1b0 <__pow5mult>:
 800e1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1b4:	4615      	mov	r5, r2
 800e1b6:	f012 0203 	ands.w	r2, r2, #3
 800e1ba:	4607      	mov	r7, r0
 800e1bc:	460e      	mov	r6, r1
 800e1be:	d007      	beq.n	800e1d0 <__pow5mult+0x20>
 800e1c0:	4c25      	ldr	r4, [pc, #148]	@ (800e258 <__pow5mult+0xa8>)
 800e1c2:	3a01      	subs	r2, #1
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1ca:	f7ff fe5d 	bl	800de88 <__multadd>
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	10ad      	asrs	r5, r5, #2
 800e1d2:	d03d      	beq.n	800e250 <__pow5mult+0xa0>
 800e1d4:	69fc      	ldr	r4, [r7, #28]
 800e1d6:	b97c      	cbnz	r4, 800e1f8 <__pow5mult+0x48>
 800e1d8:	2010      	movs	r0, #16
 800e1da:	f7fd ff33 	bl	800c044 <malloc>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	61f8      	str	r0, [r7, #28]
 800e1e2:	b928      	cbnz	r0, 800e1f0 <__pow5mult+0x40>
 800e1e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e25c <__pow5mult+0xac>)
 800e1e6:	481e      	ldr	r0, [pc, #120]	@ (800e260 <__pow5mult+0xb0>)
 800e1e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e1ec:	f7ff fa36 	bl	800d65c <__assert_func>
 800e1f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1f4:	6004      	str	r4, [r0, #0]
 800e1f6:	60c4      	str	r4, [r0, #12]
 800e1f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e1fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e200:	b94c      	cbnz	r4, 800e216 <__pow5mult+0x66>
 800e202:	f240 2171 	movw	r1, #625	@ 0x271
 800e206:	4638      	mov	r0, r7
 800e208:	f7ff ff1a 	bl	800e040 <__i2b>
 800e20c:	2300      	movs	r3, #0
 800e20e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e212:	4604      	mov	r4, r0
 800e214:	6003      	str	r3, [r0, #0]
 800e216:	f04f 0900 	mov.w	r9, #0
 800e21a:	07eb      	lsls	r3, r5, #31
 800e21c:	d50a      	bpl.n	800e234 <__pow5mult+0x84>
 800e21e:	4631      	mov	r1, r6
 800e220:	4622      	mov	r2, r4
 800e222:	4638      	mov	r0, r7
 800e224:	f7ff ff22 	bl	800e06c <__multiply>
 800e228:	4631      	mov	r1, r6
 800e22a:	4680      	mov	r8, r0
 800e22c:	4638      	mov	r0, r7
 800e22e:	f7ff fe09 	bl	800de44 <_Bfree>
 800e232:	4646      	mov	r6, r8
 800e234:	106d      	asrs	r5, r5, #1
 800e236:	d00b      	beq.n	800e250 <__pow5mult+0xa0>
 800e238:	6820      	ldr	r0, [r4, #0]
 800e23a:	b938      	cbnz	r0, 800e24c <__pow5mult+0x9c>
 800e23c:	4622      	mov	r2, r4
 800e23e:	4621      	mov	r1, r4
 800e240:	4638      	mov	r0, r7
 800e242:	f7ff ff13 	bl	800e06c <__multiply>
 800e246:	6020      	str	r0, [r4, #0]
 800e248:	f8c0 9000 	str.w	r9, [r0]
 800e24c:	4604      	mov	r4, r0
 800e24e:	e7e4      	b.n	800e21a <__pow5mult+0x6a>
 800e250:	4630      	mov	r0, r6
 800e252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e256:	bf00      	nop
 800e258:	08010424 	.word	0x08010424
 800e25c:	0801011e 	.word	0x0801011e
 800e260:	08010244 	.word	0x08010244

0800e264 <__lshift>:
 800e264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e268:	460c      	mov	r4, r1
 800e26a:	6849      	ldr	r1, [r1, #4]
 800e26c:	6923      	ldr	r3, [r4, #16]
 800e26e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e272:	68a3      	ldr	r3, [r4, #8]
 800e274:	4607      	mov	r7, r0
 800e276:	4691      	mov	r9, r2
 800e278:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e27c:	f108 0601 	add.w	r6, r8, #1
 800e280:	42b3      	cmp	r3, r6
 800e282:	db0b      	blt.n	800e29c <__lshift+0x38>
 800e284:	4638      	mov	r0, r7
 800e286:	f7ff fd9d 	bl	800ddc4 <_Balloc>
 800e28a:	4605      	mov	r5, r0
 800e28c:	b948      	cbnz	r0, 800e2a2 <__lshift+0x3e>
 800e28e:	4602      	mov	r2, r0
 800e290:	4b28      	ldr	r3, [pc, #160]	@ (800e334 <__lshift+0xd0>)
 800e292:	4829      	ldr	r0, [pc, #164]	@ (800e338 <__lshift+0xd4>)
 800e294:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e298:	f7ff f9e0 	bl	800d65c <__assert_func>
 800e29c:	3101      	adds	r1, #1
 800e29e:	005b      	lsls	r3, r3, #1
 800e2a0:	e7ee      	b.n	800e280 <__lshift+0x1c>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	f100 0114 	add.w	r1, r0, #20
 800e2a8:	f100 0210 	add.w	r2, r0, #16
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	4553      	cmp	r3, sl
 800e2b0:	db33      	blt.n	800e31a <__lshift+0xb6>
 800e2b2:	6920      	ldr	r0, [r4, #16]
 800e2b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2b8:	f104 0314 	add.w	r3, r4, #20
 800e2bc:	f019 091f 	ands.w	r9, r9, #31
 800e2c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2c8:	d02b      	beq.n	800e322 <__lshift+0xbe>
 800e2ca:	f1c9 0e20 	rsb	lr, r9, #32
 800e2ce:	468a      	mov	sl, r1
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	6818      	ldr	r0, [r3, #0]
 800e2d4:	fa00 f009 	lsl.w	r0, r0, r9
 800e2d8:	4310      	orrs	r0, r2
 800e2da:	f84a 0b04 	str.w	r0, [sl], #4
 800e2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2e2:	459c      	cmp	ip, r3
 800e2e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e2e8:	d8f3      	bhi.n	800e2d2 <__lshift+0x6e>
 800e2ea:	ebac 0304 	sub.w	r3, ip, r4
 800e2ee:	3b15      	subs	r3, #21
 800e2f0:	f023 0303 	bic.w	r3, r3, #3
 800e2f4:	3304      	adds	r3, #4
 800e2f6:	f104 0015 	add.w	r0, r4, #21
 800e2fa:	4560      	cmp	r0, ip
 800e2fc:	bf88      	it	hi
 800e2fe:	2304      	movhi	r3, #4
 800e300:	50ca      	str	r2, [r1, r3]
 800e302:	b10a      	cbz	r2, 800e308 <__lshift+0xa4>
 800e304:	f108 0602 	add.w	r6, r8, #2
 800e308:	3e01      	subs	r6, #1
 800e30a:	4638      	mov	r0, r7
 800e30c:	612e      	str	r6, [r5, #16]
 800e30e:	4621      	mov	r1, r4
 800e310:	f7ff fd98 	bl	800de44 <_Bfree>
 800e314:	4628      	mov	r0, r5
 800e316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e31a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e31e:	3301      	adds	r3, #1
 800e320:	e7c5      	b.n	800e2ae <__lshift+0x4a>
 800e322:	3904      	subs	r1, #4
 800e324:	f853 2b04 	ldr.w	r2, [r3], #4
 800e328:	f841 2f04 	str.w	r2, [r1, #4]!
 800e32c:	459c      	cmp	ip, r3
 800e32e:	d8f9      	bhi.n	800e324 <__lshift+0xc0>
 800e330:	e7ea      	b.n	800e308 <__lshift+0xa4>
 800e332:	bf00      	nop
 800e334:	080101d3 	.word	0x080101d3
 800e338:	08010244 	.word	0x08010244

0800e33c <__mcmp>:
 800e33c:	690a      	ldr	r2, [r1, #16]
 800e33e:	4603      	mov	r3, r0
 800e340:	6900      	ldr	r0, [r0, #16]
 800e342:	1a80      	subs	r0, r0, r2
 800e344:	b530      	push	{r4, r5, lr}
 800e346:	d10e      	bne.n	800e366 <__mcmp+0x2a>
 800e348:	3314      	adds	r3, #20
 800e34a:	3114      	adds	r1, #20
 800e34c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e350:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e354:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e358:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e35c:	4295      	cmp	r5, r2
 800e35e:	d003      	beq.n	800e368 <__mcmp+0x2c>
 800e360:	d205      	bcs.n	800e36e <__mcmp+0x32>
 800e362:	f04f 30ff 	mov.w	r0, #4294967295
 800e366:	bd30      	pop	{r4, r5, pc}
 800e368:	42a3      	cmp	r3, r4
 800e36a:	d3f3      	bcc.n	800e354 <__mcmp+0x18>
 800e36c:	e7fb      	b.n	800e366 <__mcmp+0x2a>
 800e36e:	2001      	movs	r0, #1
 800e370:	e7f9      	b.n	800e366 <__mcmp+0x2a>
	...

0800e374 <__mdiff>:
 800e374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e378:	4689      	mov	r9, r1
 800e37a:	4606      	mov	r6, r0
 800e37c:	4611      	mov	r1, r2
 800e37e:	4648      	mov	r0, r9
 800e380:	4614      	mov	r4, r2
 800e382:	f7ff ffdb 	bl	800e33c <__mcmp>
 800e386:	1e05      	subs	r5, r0, #0
 800e388:	d112      	bne.n	800e3b0 <__mdiff+0x3c>
 800e38a:	4629      	mov	r1, r5
 800e38c:	4630      	mov	r0, r6
 800e38e:	f7ff fd19 	bl	800ddc4 <_Balloc>
 800e392:	4602      	mov	r2, r0
 800e394:	b928      	cbnz	r0, 800e3a2 <__mdiff+0x2e>
 800e396:	4b3f      	ldr	r3, [pc, #252]	@ (800e494 <__mdiff+0x120>)
 800e398:	f240 2137 	movw	r1, #567	@ 0x237
 800e39c:	483e      	ldr	r0, [pc, #248]	@ (800e498 <__mdiff+0x124>)
 800e39e:	f7ff f95d 	bl	800d65c <__assert_func>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	b003      	add	sp, #12
 800e3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b0:	bfbc      	itt	lt
 800e3b2:	464b      	movlt	r3, r9
 800e3b4:	46a1      	movlt	r9, r4
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e3bc:	bfba      	itte	lt
 800e3be:	461c      	movlt	r4, r3
 800e3c0:	2501      	movlt	r5, #1
 800e3c2:	2500      	movge	r5, #0
 800e3c4:	f7ff fcfe 	bl	800ddc4 <_Balloc>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	b918      	cbnz	r0, 800e3d4 <__mdiff+0x60>
 800e3cc:	4b31      	ldr	r3, [pc, #196]	@ (800e494 <__mdiff+0x120>)
 800e3ce:	f240 2145 	movw	r1, #581	@ 0x245
 800e3d2:	e7e3      	b.n	800e39c <__mdiff+0x28>
 800e3d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e3d8:	6926      	ldr	r6, [r4, #16]
 800e3da:	60c5      	str	r5, [r0, #12]
 800e3dc:	f109 0310 	add.w	r3, r9, #16
 800e3e0:	f109 0514 	add.w	r5, r9, #20
 800e3e4:	f104 0e14 	add.w	lr, r4, #20
 800e3e8:	f100 0b14 	add.w	fp, r0, #20
 800e3ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e3f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e3f4:	9301      	str	r3, [sp, #4]
 800e3f6:	46d9      	mov	r9, fp
 800e3f8:	f04f 0c00 	mov.w	ip, #0
 800e3fc:	9b01      	ldr	r3, [sp, #4]
 800e3fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e402:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e406:	9301      	str	r3, [sp, #4]
 800e408:	fa1f f38a 	uxth.w	r3, sl
 800e40c:	4619      	mov	r1, r3
 800e40e:	b283      	uxth	r3, r0
 800e410:	1acb      	subs	r3, r1, r3
 800e412:	0c00      	lsrs	r0, r0, #16
 800e414:	4463      	add	r3, ip
 800e416:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e41a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e41e:	b29b      	uxth	r3, r3
 800e420:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e424:	4576      	cmp	r6, lr
 800e426:	f849 3b04 	str.w	r3, [r9], #4
 800e42a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e42e:	d8e5      	bhi.n	800e3fc <__mdiff+0x88>
 800e430:	1b33      	subs	r3, r6, r4
 800e432:	3b15      	subs	r3, #21
 800e434:	f023 0303 	bic.w	r3, r3, #3
 800e438:	3415      	adds	r4, #21
 800e43a:	3304      	adds	r3, #4
 800e43c:	42a6      	cmp	r6, r4
 800e43e:	bf38      	it	cc
 800e440:	2304      	movcc	r3, #4
 800e442:	441d      	add	r5, r3
 800e444:	445b      	add	r3, fp
 800e446:	461e      	mov	r6, r3
 800e448:	462c      	mov	r4, r5
 800e44a:	4544      	cmp	r4, r8
 800e44c:	d30e      	bcc.n	800e46c <__mdiff+0xf8>
 800e44e:	f108 0103 	add.w	r1, r8, #3
 800e452:	1b49      	subs	r1, r1, r5
 800e454:	f021 0103 	bic.w	r1, r1, #3
 800e458:	3d03      	subs	r5, #3
 800e45a:	45a8      	cmp	r8, r5
 800e45c:	bf38      	it	cc
 800e45e:	2100      	movcc	r1, #0
 800e460:	440b      	add	r3, r1
 800e462:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e466:	b191      	cbz	r1, 800e48e <__mdiff+0x11a>
 800e468:	6117      	str	r7, [r2, #16]
 800e46a:	e79d      	b.n	800e3a8 <__mdiff+0x34>
 800e46c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e470:	46e6      	mov	lr, ip
 800e472:	0c08      	lsrs	r0, r1, #16
 800e474:	fa1c fc81 	uxtah	ip, ip, r1
 800e478:	4471      	add	r1, lr
 800e47a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e47e:	b289      	uxth	r1, r1
 800e480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e484:	f846 1b04 	str.w	r1, [r6], #4
 800e488:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e48c:	e7dd      	b.n	800e44a <__mdiff+0xd6>
 800e48e:	3f01      	subs	r7, #1
 800e490:	e7e7      	b.n	800e462 <__mdiff+0xee>
 800e492:	bf00      	nop
 800e494:	080101d3 	.word	0x080101d3
 800e498:	08010244 	.word	0x08010244

0800e49c <__ulp>:
 800e49c:	b082      	sub	sp, #8
 800e49e:	ed8d 0b00 	vstr	d0, [sp]
 800e4a2:	9a01      	ldr	r2, [sp, #4]
 800e4a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e4e4 <__ulp+0x48>)
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	dc08      	bgt.n	800e4c2 <__ulp+0x26>
 800e4b0:	425b      	negs	r3, r3
 800e4b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e4b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e4ba:	da04      	bge.n	800e4c6 <__ulp+0x2a>
 800e4bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e4c0:	4113      	asrs	r3, r2
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	e008      	b.n	800e4d8 <__ulp+0x3c>
 800e4c6:	f1a2 0314 	sub.w	r3, r2, #20
 800e4ca:	2b1e      	cmp	r3, #30
 800e4cc:	bfda      	itte	le
 800e4ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e4d2:	40da      	lsrle	r2, r3
 800e4d4:	2201      	movgt	r2, #1
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	4619      	mov	r1, r3
 800e4da:	4610      	mov	r0, r2
 800e4dc:	ec41 0b10 	vmov	d0, r0, r1
 800e4e0:	b002      	add	sp, #8
 800e4e2:	4770      	bx	lr
 800e4e4:	7ff00000 	.word	0x7ff00000

0800e4e8 <__b2d>:
 800e4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ec:	6906      	ldr	r6, [r0, #16]
 800e4ee:	f100 0814 	add.w	r8, r0, #20
 800e4f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e4f6:	1f37      	subs	r7, r6, #4
 800e4f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	f7ff fd53 	bl	800dfa8 <__hi0bits>
 800e502:	f1c0 0320 	rsb	r3, r0, #32
 800e506:	280a      	cmp	r0, #10
 800e508:	600b      	str	r3, [r1, #0]
 800e50a:	491b      	ldr	r1, [pc, #108]	@ (800e578 <__b2d+0x90>)
 800e50c:	dc15      	bgt.n	800e53a <__b2d+0x52>
 800e50e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e512:	fa22 f30c 	lsr.w	r3, r2, ip
 800e516:	45b8      	cmp	r8, r7
 800e518:	ea43 0501 	orr.w	r5, r3, r1
 800e51c:	bf34      	ite	cc
 800e51e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e522:	2300      	movcs	r3, #0
 800e524:	3015      	adds	r0, #21
 800e526:	fa02 f000 	lsl.w	r0, r2, r0
 800e52a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e52e:	4303      	orrs	r3, r0
 800e530:	461c      	mov	r4, r3
 800e532:	ec45 4b10 	vmov	d0, r4, r5
 800e536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e53a:	45b8      	cmp	r8, r7
 800e53c:	bf3a      	itte	cc
 800e53e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e542:	f1a6 0708 	subcc.w	r7, r6, #8
 800e546:	2300      	movcs	r3, #0
 800e548:	380b      	subs	r0, #11
 800e54a:	d012      	beq.n	800e572 <__b2d+0x8a>
 800e54c:	f1c0 0120 	rsb	r1, r0, #32
 800e550:	fa23 f401 	lsr.w	r4, r3, r1
 800e554:	4082      	lsls	r2, r0
 800e556:	4322      	orrs	r2, r4
 800e558:	4547      	cmp	r7, r8
 800e55a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e55e:	bf8c      	ite	hi
 800e560:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e564:	2200      	movls	r2, #0
 800e566:	4083      	lsls	r3, r0
 800e568:	40ca      	lsrs	r2, r1
 800e56a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e56e:	4313      	orrs	r3, r2
 800e570:	e7de      	b.n	800e530 <__b2d+0x48>
 800e572:	ea42 0501 	orr.w	r5, r2, r1
 800e576:	e7db      	b.n	800e530 <__b2d+0x48>
 800e578:	3ff00000 	.word	0x3ff00000

0800e57c <__d2b>:
 800e57c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e580:	460f      	mov	r7, r1
 800e582:	2101      	movs	r1, #1
 800e584:	ec59 8b10 	vmov	r8, r9, d0
 800e588:	4616      	mov	r6, r2
 800e58a:	f7ff fc1b 	bl	800ddc4 <_Balloc>
 800e58e:	4604      	mov	r4, r0
 800e590:	b930      	cbnz	r0, 800e5a0 <__d2b+0x24>
 800e592:	4602      	mov	r2, r0
 800e594:	4b23      	ldr	r3, [pc, #140]	@ (800e624 <__d2b+0xa8>)
 800e596:	4824      	ldr	r0, [pc, #144]	@ (800e628 <__d2b+0xac>)
 800e598:	f240 310f 	movw	r1, #783	@ 0x30f
 800e59c:	f7ff f85e 	bl	800d65c <__assert_func>
 800e5a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5a8:	b10d      	cbz	r5, 800e5ae <__d2b+0x32>
 800e5aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5ae:	9301      	str	r3, [sp, #4]
 800e5b0:	f1b8 0300 	subs.w	r3, r8, #0
 800e5b4:	d023      	beq.n	800e5fe <__d2b+0x82>
 800e5b6:	4668      	mov	r0, sp
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	f7ff fd14 	bl	800dfe6 <__lo0bits>
 800e5be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5c2:	b1d0      	cbz	r0, 800e5fa <__d2b+0x7e>
 800e5c4:	f1c0 0320 	rsb	r3, r0, #32
 800e5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e5cc:	430b      	orrs	r3, r1
 800e5ce:	40c2      	lsrs	r2, r0
 800e5d0:	6163      	str	r3, [r4, #20]
 800e5d2:	9201      	str	r2, [sp, #4]
 800e5d4:	9b01      	ldr	r3, [sp, #4]
 800e5d6:	61a3      	str	r3, [r4, #24]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	bf0c      	ite	eq
 800e5dc:	2201      	moveq	r2, #1
 800e5de:	2202      	movne	r2, #2
 800e5e0:	6122      	str	r2, [r4, #16]
 800e5e2:	b1a5      	cbz	r5, 800e60e <__d2b+0x92>
 800e5e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e5e8:	4405      	add	r5, r0
 800e5ea:	603d      	str	r5, [r7, #0]
 800e5ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e5f0:	6030      	str	r0, [r6, #0]
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	b003      	add	sp, #12
 800e5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5fa:	6161      	str	r1, [r4, #20]
 800e5fc:	e7ea      	b.n	800e5d4 <__d2b+0x58>
 800e5fe:	a801      	add	r0, sp, #4
 800e600:	f7ff fcf1 	bl	800dfe6 <__lo0bits>
 800e604:	9b01      	ldr	r3, [sp, #4]
 800e606:	6163      	str	r3, [r4, #20]
 800e608:	3020      	adds	r0, #32
 800e60a:	2201      	movs	r2, #1
 800e60c:	e7e8      	b.n	800e5e0 <__d2b+0x64>
 800e60e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e612:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e616:	6038      	str	r0, [r7, #0]
 800e618:	6918      	ldr	r0, [r3, #16]
 800e61a:	f7ff fcc5 	bl	800dfa8 <__hi0bits>
 800e61e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e622:	e7e5      	b.n	800e5f0 <__d2b+0x74>
 800e624:	080101d3 	.word	0x080101d3
 800e628:	08010244 	.word	0x08010244

0800e62c <__ratio>:
 800e62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e630:	b085      	sub	sp, #20
 800e632:	e9cd 1000 	strd	r1, r0, [sp]
 800e636:	a902      	add	r1, sp, #8
 800e638:	f7ff ff56 	bl	800e4e8 <__b2d>
 800e63c:	9800      	ldr	r0, [sp, #0]
 800e63e:	a903      	add	r1, sp, #12
 800e640:	ec55 4b10 	vmov	r4, r5, d0
 800e644:	f7ff ff50 	bl	800e4e8 <__b2d>
 800e648:	9b01      	ldr	r3, [sp, #4]
 800e64a:	6919      	ldr	r1, [r3, #16]
 800e64c:	9b00      	ldr	r3, [sp, #0]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	1ac9      	subs	r1, r1, r3
 800e652:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e656:	1a9b      	subs	r3, r3, r2
 800e658:	ec5b ab10 	vmov	sl, fp, d0
 800e65c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e660:	2b00      	cmp	r3, #0
 800e662:	bfce      	itee	gt
 800e664:	462a      	movgt	r2, r5
 800e666:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e66a:	465a      	movle	r2, fp
 800e66c:	462f      	mov	r7, r5
 800e66e:	46d9      	mov	r9, fp
 800e670:	bfcc      	ite	gt
 800e672:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e676:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e67a:	464b      	mov	r3, r9
 800e67c:	4652      	mov	r2, sl
 800e67e:	4620      	mov	r0, r4
 800e680:	4639      	mov	r1, r7
 800e682:	f7f2 f90b 	bl	800089c <__aeabi_ddiv>
 800e686:	ec41 0b10 	vmov	d0, r0, r1
 800e68a:	b005      	add	sp, #20
 800e68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e690 <__copybits>:
 800e690:	3901      	subs	r1, #1
 800e692:	b570      	push	{r4, r5, r6, lr}
 800e694:	1149      	asrs	r1, r1, #5
 800e696:	6914      	ldr	r4, [r2, #16]
 800e698:	3101      	adds	r1, #1
 800e69a:	f102 0314 	add.w	r3, r2, #20
 800e69e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e6a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e6a6:	1f05      	subs	r5, r0, #4
 800e6a8:	42a3      	cmp	r3, r4
 800e6aa:	d30c      	bcc.n	800e6c6 <__copybits+0x36>
 800e6ac:	1aa3      	subs	r3, r4, r2
 800e6ae:	3b11      	subs	r3, #17
 800e6b0:	f023 0303 	bic.w	r3, r3, #3
 800e6b4:	3211      	adds	r2, #17
 800e6b6:	42a2      	cmp	r2, r4
 800e6b8:	bf88      	it	hi
 800e6ba:	2300      	movhi	r3, #0
 800e6bc:	4418      	add	r0, r3
 800e6be:	2300      	movs	r3, #0
 800e6c0:	4288      	cmp	r0, r1
 800e6c2:	d305      	bcc.n	800e6d0 <__copybits+0x40>
 800e6c4:	bd70      	pop	{r4, r5, r6, pc}
 800e6c6:	f853 6b04 	ldr.w	r6, [r3], #4
 800e6ca:	f845 6f04 	str.w	r6, [r5, #4]!
 800e6ce:	e7eb      	b.n	800e6a8 <__copybits+0x18>
 800e6d0:	f840 3b04 	str.w	r3, [r0], #4
 800e6d4:	e7f4      	b.n	800e6c0 <__copybits+0x30>

0800e6d6 <__any_on>:
 800e6d6:	f100 0214 	add.w	r2, r0, #20
 800e6da:	6900      	ldr	r0, [r0, #16]
 800e6dc:	114b      	asrs	r3, r1, #5
 800e6de:	4298      	cmp	r0, r3
 800e6e0:	b510      	push	{r4, lr}
 800e6e2:	db11      	blt.n	800e708 <__any_on+0x32>
 800e6e4:	dd0a      	ble.n	800e6fc <__any_on+0x26>
 800e6e6:	f011 011f 	ands.w	r1, r1, #31
 800e6ea:	d007      	beq.n	800e6fc <__any_on+0x26>
 800e6ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e6f0:	fa24 f001 	lsr.w	r0, r4, r1
 800e6f4:	fa00 f101 	lsl.w	r1, r0, r1
 800e6f8:	428c      	cmp	r4, r1
 800e6fa:	d10b      	bne.n	800e714 <__any_on+0x3e>
 800e6fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e700:	4293      	cmp	r3, r2
 800e702:	d803      	bhi.n	800e70c <__any_on+0x36>
 800e704:	2000      	movs	r0, #0
 800e706:	bd10      	pop	{r4, pc}
 800e708:	4603      	mov	r3, r0
 800e70a:	e7f7      	b.n	800e6fc <__any_on+0x26>
 800e70c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e710:	2900      	cmp	r1, #0
 800e712:	d0f5      	beq.n	800e700 <__any_on+0x2a>
 800e714:	2001      	movs	r0, #1
 800e716:	e7f6      	b.n	800e706 <__any_on+0x30>

0800e718 <__ascii_wctomb>:
 800e718:	4603      	mov	r3, r0
 800e71a:	4608      	mov	r0, r1
 800e71c:	b141      	cbz	r1, 800e730 <__ascii_wctomb+0x18>
 800e71e:	2aff      	cmp	r2, #255	@ 0xff
 800e720:	d904      	bls.n	800e72c <__ascii_wctomb+0x14>
 800e722:	228a      	movs	r2, #138	@ 0x8a
 800e724:	601a      	str	r2, [r3, #0]
 800e726:	f04f 30ff 	mov.w	r0, #4294967295
 800e72a:	4770      	bx	lr
 800e72c:	700a      	strb	r2, [r1, #0]
 800e72e:	2001      	movs	r0, #1
 800e730:	4770      	bx	lr

0800e732 <__ssputs_r>:
 800e732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e736:	688e      	ldr	r6, [r1, #8]
 800e738:	461f      	mov	r7, r3
 800e73a:	42be      	cmp	r6, r7
 800e73c:	680b      	ldr	r3, [r1, #0]
 800e73e:	4682      	mov	sl, r0
 800e740:	460c      	mov	r4, r1
 800e742:	4690      	mov	r8, r2
 800e744:	d82d      	bhi.n	800e7a2 <__ssputs_r+0x70>
 800e746:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e74a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e74e:	d026      	beq.n	800e79e <__ssputs_r+0x6c>
 800e750:	6965      	ldr	r5, [r4, #20]
 800e752:	6909      	ldr	r1, [r1, #16]
 800e754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e758:	eba3 0901 	sub.w	r9, r3, r1
 800e75c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e760:	1c7b      	adds	r3, r7, #1
 800e762:	444b      	add	r3, r9
 800e764:	106d      	asrs	r5, r5, #1
 800e766:	429d      	cmp	r5, r3
 800e768:	bf38      	it	cc
 800e76a:	461d      	movcc	r5, r3
 800e76c:	0553      	lsls	r3, r2, #21
 800e76e:	d527      	bpl.n	800e7c0 <__ssputs_r+0x8e>
 800e770:	4629      	mov	r1, r5
 800e772:	f7fd fc99 	bl	800c0a8 <_malloc_r>
 800e776:	4606      	mov	r6, r0
 800e778:	b360      	cbz	r0, 800e7d4 <__ssputs_r+0xa2>
 800e77a:	6921      	ldr	r1, [r4, #16]
 800e77c:	464a      	mov	r2, r9
 800e77e:	f7fe ff50 	bl	800d622 <memcpy>
 800e782:	89a3      	ldrh	r3, [r4, #12]
 800e784:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e78c:	81a3      	strh	r3, [r4, #12]
 800e78e:	6126      	str	r6, [r4, #16]
 800e790:	6165      	str	r5, [r4, #20]
 800e792:	444e      	add	r6, r9
 800e794:	eba5 0509 	sub.w	r5, r5, r9
 800e798:	6026      	str	r6, [r4, #0]
 800e79a:	60a5      	str	r5, [r4, #8]
 800e79c:	463e      	mov	r6, r7
 800e79e:	42be      	cmp	r6, r7
 800e7a0:	d900      	bls.n	800e7a4 <__ssputs_r+0x72>
 800e7a2:	463e      	mov	r6, r7
 800e7a4:	6820      	ldr	r0, [r4, #0]
 800e7a6:	4632      	mov	r2, r6
 800e7a8:	4641      	mov	r1, r8
 800e7aa:	f000 fbc5 	bl	800ef38 <memmove>
 800e7ae:	68a3      	ldr	r3, [r4, #8]
 800e7b0:	1b9b      	subs	r3, r3, r6
 800e7b2:	60a3      	str	r3, [r4, #8]
 800e7b4:	6823      	ldr	r3, [r4, #0]
 800e7b6:	4433      	add	r3, r6
 800e7b8:	6023      	str	r3, [r4, #0]
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c0:	462a      	mov	r2, r5
 800e7c2:	f000 fc10 	bl	800efe6 <_realloc_r>
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d1e0      	bne.n	800e78e <__ssputs_r+0x5c>
 800e7cc:	6921      	ldr	r1, [r4, #16]
 800e7ce:	4650      	mov	r0, sl
 800e7d0:	f7fe ff62 	bl	800d698 <_free_r>
 800e7d4:	230c      	movs	r3, #12
 800e7d6:	f8ca 3000 	str.w	r3, [sl]
 800e7da:	89a3      	ldrh	r3, [r4, #12]
 800e7dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7e0:	81a3      	strh	r3, [r4, #12]
 800e7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e6:	e7e9      	b.n	800e7bc <__ssputs_r+0x8a>

0800e7e8 <_svfiprintf_r>:
 800e7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ec:	4698      	mov	r8, r3
 800e7ee:	898b      	ldrh	r3, [r1, #12]
 800e7f0:	061b      	lsls	r3, r3, #24
 800e7f2:	b09d      	sub	sp, #116	@ 0x74
 800e7f4:	4607      	mov	r7, r0
 800e7f6:	460d      	mov	r5, r1
 800e7f8:	4614      	mov	r4, r2
 800e7fa:	d510      	bpl.n	800e81e <_svfiprintf_r+0x36>
 800e7fc:	690b      	ldr	r3, [r1, #16]
 800e7fe:	b973      	cbnz	r3, 800e81e <_svfiprintf_r+0x36>
 800e800:	2140      	movs	r1, #64	@ 0x40
 800e802:	f7fd fc51 	bl	800c0a8 <_malloc_r>
 800e806:	6028      	str	r0, [r5, #0]
 800e808:	6128      	str	r0, [r5, #16]
 800e80a:	b930      	cbnz	r0, 800e81a <_svfiprintf_r+0x32>
 800e80c:	230c      	movs	r3, #12
 800e80e:	603b      	str	r3, [r7, #0]
 800e810:	f04f 30ff 	mov.w	r0, #4294967295
 800e814:	b01d      	add	sp, #116	@ 0x74
 800e816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81a:	2340      	movs	r3, #64	@ 0x40
 800e81c:	616b      	str	r3, [r5, #20]
 800e81e:	2300      	movs	r3, #0
 800e820:	9309      	str	r3, [sp, #36]	@ 0x24
 800e822:	2320      	movs	r3, #32
 800e824:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e828:	f8cd 800c 	str.w	r8, [sp, #12]
 800e82c:	2330      	movs	r3, #48	@ 0x30
 800e82e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e9cc <_svfiprintf_r+0x1e4>
 800e832:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e836:	f04f 0901 	mov.w	r9, #1
 800e83a:	4623      	mov	r3, r4
 800e83c:	469a      	mov	sl, r3
 800e83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e842:	b10a      	cbz	r2, 800e848 <_svfiprintf_r+0x60>
 800e844:	2a25      	cmp	r2, #37	@ 0x25
 800e846:	d1f9      	bne.n	800e83c <_svfiprintf_r+0x54>
 800e848:	ebba 0b04 	subs.w	fp, sl, r4
 800e84c:	d00b      	beq.n	800e866 <_svfiprintf_r+0x7e>
 800e84e:	465b      	mov	r3, fp
 800e850:	4622      	mov	r2, r4
 800e852:	4629      	mov	r1, r5
 800e854:	4638      	mov	r0, r7
 800e856:	f7ff ff6c 	bl	800e732 <__ssputs_r>
 800e85a:	3001      	adds	r0, #1
 800e85c:	f000 80a7 	beq.w	800e9ae <_svfiprintf_r+0x1c6>
 800e860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e862:	445a      	add	r2, fp
 800e864:	9209      	str	r2, [sp, #36]	@ 0x24
 800e866:	f89a 3000 	ldrb.w	r3, [sl]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 809f 	beq.w	800e9ae <_svfiprintf_r+0x1c6>
 800e870:	2300      	movs	r3, #0
 800e872:	f04f 32ff 	mov.w	r2, #4294967295
 800e876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e87a:	f10a 0a01 	add.w	sl, sl, #1
 800e87e:	9304      	str	r3, [sp, #16]
 800e880:	9307      	str	r3, [sp, #28]
 800e882:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e886:	931a      	str	r3, [sp, #104]	@ 0x68
 800e888:	4654      	mov	r4, sl
 800e88a:	2205      	movs	r2, #5
 800e88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e890:	484e      	ldr	r0, [pc, #312]	@ (800e9cc <_svfiprintf_r+0x1e4>)
 800e892:	f7f1 fccd 	bl	8000230 <memchr>
 800e896:	9a04      	ldr	r2, [sp, #16]
 800e898:	b9d8      	cbnz	r0, 800e8d2 <_svfiprintf_r+0xea>
 800e89a:	06d0      	lsls	r0, r2, #27
 800e89c:	bf44      	itt	mi
 800e89e:	2320      	movmi	r3, #32
 800e8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8a4:	0711      	lsls	r1, r2, #28
 800e8a6:	bf44      	itt	mi
 800e8a8:	232b      	movmi	r3, #43	@ 0x2b
 800e8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800e8b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8b4:	d015      	beq.n	800e8e2 <_svfiprintf_r+0xfa>
 800e8b6:	9a07      	ldr	r2, [sp, #28]
 800e8b8:	4654      	mov	r4, sl
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	f04f 0c0a 	mov.w	ip, #10
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8c6:	3b30      	subs	r3, #48	@ 0x30
 800e8c8:	2b09      	cmp	r3, #9
 800e8ca:	d94b      	bls.n	800e964 <_svfiprintf_r+0x17c>
 800e8cc:	b1b0      	cbz	r0, 800e8fc <_svfiprintf_r+0x114>
 800e8ce:	9207      	str	r2, [sp, #28]
 800e8d0:	e014      	b.n	800e8fc <_svfiprintf_r+0x114>
 800e8d2:	eba0 0308 	sub.w	r3, r0, r8
 800e8d6:	fa09 f303 	lsl.w	r3, r9, r3
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	9304      	str	r3, [sp, #16]
 800e8de:	46a2      	mov	sl, r4
 800e8e0:	e7d2      	b.n	800e888 <_svfiprintf_r+0xa0>
 800e8e2:	9b03      	ldr	r3, [sp, #12]
 800e8e4:	1d19      	adds	r1, r3, #4
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	9103      	str	r1, [sp, #12]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	bfbb      	ittet	lt
 800e8ee:	425b      	neglt	r3, r3
 800e8f0:	f042 0202 	orrlt.w	r2, r2, #2
 800e8f4:	9307      	strge	r3, [sp, #28]
 800e8f6:	9307      	strlt	r3, [sp, #28]
 800e8f8:	bfb8      	it	lt
 800e8fa:	9204      	strlt	r2, [sp, #16]
 800e8fc:	7823      	ldrb	r3, [r4, #0]
 800e8fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800e900:	d10a      	bne.n	800e918 <_svfiprintf_r+0x130>
 800e902:	7863      	ldrb	r3, [r4, #1]
 800e904:	2b2a      	cmp	r3, #42	@ 0x2a
 800e906:	d132      	bne.n	800e96e <_svfiprintf_r+0x186>
 800e908:	9b03      	ldr	r3, [sp, #12]
 800e90a:	1d1a      	adds	r2, r3, #4
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	9203      	str	r2, [sp, #12]
 800e910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e914:	3402      	adds	r4, #2
 800e916:	9305      	str	r3, [sp, #20]
 800e918:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e9dc <_svfiprintf_r+0x1f4>
 800e91c:	7821      	ldrb	r1, [r4, #0]
 800e91e:	2203      	movs	r2, #3
 800e920:	4650      	mov	r0, sl
 800e922:	f7f1 fc85 	bl	8000230 <memchr>
 800e926:	b138      	cbz	r0, 800e938 <_svfiprintf_r+0x150>
 800e928:	9b04      	ldr	r3, [sp, #16]
 800e92a:	eba0 000a 	sub.w	r0, r0, sl
 800e92e:	2240      	movs	r2, #64	@ 0x40
 800e930:	4082      	lsls	r2, r0
 800e932:	4313      	orrs	r3, r2
 800e934:	3401      	adds	r4, #1
 800e936:	9304      	str	r3, [sp, #16]
 800e938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e93c:	4824      	ldr	r0, [pc, #144]	@ (800e9d0 <_svfiprintf_r+0x1e8>)
 800e93e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e942:	2206      	movs	r2, #6
 800e944:	f7f1 fc74 	bl	8000230 <memchr>
 800e948:	2800      	cmp	r0, #0
 800e94a:	d036      	beq.n	800e9ba <_svfiprintf_r+0x1d2>
 800e94c:	4b21      	ldr	r3, [pc, #132]	@ (800e9d4 <_svfiprintf_r+0x1ec>)
 800e94e:	bb1b      	cbnz	r3, 800e998 <_svfiprintf_r+0x1b0>
 800e950:	9b03      	ldr	r3, [sp, #12]
 800e952:	3307      	adds	r3, #7
 800e954:	f023 0307 	bic.w	r3, r3, #7
 800e958:	3308      	adds	r3, #8
 800e95a:	9303      	str	r3, [sp, #12]
 800e95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e95e:	4433      	add	r3, r6
 800e960:	9309      	str	r3, [sp, #36]	@ 0x24
 800e962:	e76a      	b.n	800e83a <_svfiprintf_r+0x52>
 800e964:	fb0c 3202 	mla	r2, ip, r2, r3
 800e968:	460c      	mov	r4, r1
 800e96a:	2001      	movs	r0, #1
 800e96c:	e7a8      	b.n	800e8c0 <_svfiprintf_r+0xd8>
 800e96e:	2300      	movs	r3, #0
 800e970:	3401      	adds	r4, #1
 800e972:	9305      	str	r3, [sp, #20]
 800e974:	4619      	mov	r1, r3
 800e976:	f04f 0c0a 	mov.w	ip, #10
 800e97a:	4620      	mov	r0, r4
 800e97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e980:	3a30      	subs	r2, #48	@ 0x30
 800e982:	2a09      	cmp	r2, #9
 800e984:	d903      	bls.n	800e98e <_svfiprintf_r+0x1a6>
 800e986:	2b00      	cmp	r3, #0
 800e988:	d0c6      	beq.n	800e918 <_svfiprintf_r+0x130>
 800e98a:	9105      	str	r1, [sp, #20]
 800e98c:	e7c4      	b.n	800e918 <_svfiprintf_r+0x130>
 800e98e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e992:	4604      	mov	r4, r0
 800e994:	2301      	movs	r3, #1
 800e996:	e7f0      	b.n	800e97a <_svfiprintf_r+0x192>
 800e998:	ab03      	add	r3, sp, #12
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	462a      	mov	r2, r5
 800e99e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9d8 <_svfiprintf_r+0x1f0>)
 800e9a0:	a904      	add	r1, sp, #16
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	f3af 8000 	nop.w
 800e9a8:	1c42      	adds	r2, r0, #1
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	d1d6      	bne.n	800e95c <_svfiprintf_r+0x174>
 800e9ae:	89ab      	ldrh	r3, [r5, #12]
 800e9b0:	065b      	lsls	r3, r3, #25
 800e9b2:	f53f af2d 	bmi.w	800e810 <_svfiprintf_r+0x28>
 800e9b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9b8:	e72c      	b.n	800e814 <_svfiprintf_r+0x2c>
 800e9ba:	ab03      	add	r3, sp, #12
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	462a      	mov	r2, r5
 800e9c0:	4b05      	ldr	r3, [pc, #20]	@ (800e9d8 <_svfiprintf_r+0x1f0>)
 800e9c2:	a904      	add	r1, sp, #16
 800e9c4:	4638      	mov	r0, r7
 800e9c6:	f000 f879 	bl	800eabc <_printf_i>
 800e9ca:	e7ed      	b.n	800e9a8 <_svfiprintf_r+0x1c0>
 800e9cc:	0801029d 	.word	0x0801029d
 800e9d0:	080102a7 	.word	0x080102a7
 800e9d4:	00000000 	.word	0x00000000
 800e9d8:	0800e733 	.word	0x0800e733
 800e9dc:	080102a3 	.word	0x080102a3

0800e9e0 <_printf_common>:
 800e9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e4:	4616      	mov	r6, r2
 800e9e6:	4698      	mov	r8, r3
 800e9e8:	688a      	ldr	r2, [r1, #8]
 800e9ea:	690b      	ldr	r3, [r1, #16]
 800e9ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	bfb8      	it	lt
 800e9f4:	4613      	movlt	r3, r2
 800e9f6:	6033      	str	r3, [r6, #0]
 800e9f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e9fc:	4607      	mov	r7, r0
 800e9fe:	460c      	mov	r4, r1
 800ea00:	b10a      	cbz	r2, 800ea06 <_printf_common+0x26>
 800ea02:	3301      	adds	r3, #1
 800ea04:	6033      	str	r3, [r6, #0]
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	0699      	lsls	r1, r3, #26
 800ea0a:	bf42      	ittt	mi
 800ea0c:	6833      	ldrmi	r3, [r6, #0]
 800ea0e:	3302      	addmi	r3, #2
 800ea10:	6033      	strmi	r3, [r6, #0]
 800ea12:	6825      	ldr	r5, [r4, #0]
 800ea14:	f015 0506 	ands.w	r5, r5, #6
 800ea18:	d106      	bne.n	800ea28 <_printf_common+0x48>
 800ea1a:	f104 0a19 	add.w	sl, r4, #25
 800ea1e:	68e3      	ldr	r3, [r4, #12]
 800ea20:	6832      	ldr	r2, [r6, #0]
 800ea22:	1a9b      	subs	r3, r3, r2
 800ea24:	42ab      	cmp	r3, r5
 800ea26:	dc26      	bgt.n	800ea76 <_printf_common+0x96>
 800ea28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea2c:	6822      	ldr	r2, [r4, #0]
 800ea2e:	3b00      	subs	r3, #0
 800ea30:	bf18      	it	ne
 800ea32:	2301      	movne	r3, #1
 800ea34:	0692      	lsls	r2, r2, #26
 800ea36:	d42b      	bmi.n	800ea90 <_printf_common+0xb0>
 800ea38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea3c:	4641      	mov	r1, r8
 800ea3e:	4638      	mov	r0, r7
 800ea40:	47c8      	blx	r9
 800ea42:	3001      	adds	r0, #1
 800ea44:	d01e      	beq.n	800ea84 <_printf_common+0xa4>
 800ea46:	6823      	ldr	r3, [r4, #0]
 800ea48:	6922      	ldr	r2, [r4, #16]
 800ea4a:	f003 0306 	and.w	r3, r3, #6
 800ea4e:	2b04      	cmp	r3, #4
 800ea50:	bf02      	ittt	eq
 800ea52:	68e5      	ldreq	r5, [r4, #12]
 800ea54:	6833      	ldreq	r3, [r6, #0]
 800ea56:	1aed      	subeq	r5, r5, r3
 800ea58:	68a3      	ldr	r3, [r4, #8]
 800ea5a:	bf0c      	ite	eq
 800ea5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea60:	2500      	movne	r5, #0
 800ea62:	4293      	cmp	r3, r2
 800ea64:	bfc4      	itt	gt
 800ea66:	1a9b      	subgt	r3, r3, r2
 800ea68:	18ed      	addgt	r5, r5, r3
 800ea6a:	2600      	movs	r6, #0
 800ea6c:	341a      	adds	r4, #26
 800ea6e:	42b5      	cmp	r5, r6
 800ea70:	d11a      	bne.n	800eaa8 <_printf_common+0xc8>
 800ea72:	2000      	movs	r0, #0
 800ea74:	e008      	b.n	800ea88 <_printf_common+0xa8>
 800ea76:	2301      	movs	r3, #1
 800ea78:	4652      	mov	r2, sl
 800ea7a:	4641      	mov	r1, r8
 800ea7c:	4638      	mov	r0, r7
 800ea7e:	47c8      	blx	r9
 800ea80:	3001      	adds	r0, #1
 800ea82:	d103      	bne.n	800ea8c <_printf_common+0xac>
 800ea84:	f04f 30ff 	mov.w	r0, #4294967295
 800ea88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea8c:	3501      	adds	r5, #1
 800ea8e:	e7c6      	b.n	800ea1e <_printf_common+0x3e>
 800ea90:	18e1      	adds	r1, r4, r3
 800ea92:	1c5a      	adds	r2, r3, #1
 800ea94:	2030      	movs	r0, #48	@ 0x30
 800ea96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea9a:	4422      	add	r2, r4
 800ea9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eaa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eaa4:	3302      	adds	r3, #2
 800eaa6:	e7c7      	b.n	800ea38 <_printf_common+0x58>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	4622      	mov	r2, r4
 800eaac:	4641      	mov	r1, r8
 800eaae:	4638      	mov	r0, r7
 800eab0:	47c8      	blx	r9
 800eab2:	3001      	adds	r0, #1
 800eab4:	d0e6      	beq.n	800ea84 <_printf_common+0xa4>
 800eab6:	3601      	adds	r6, #1
 800eab8:	e7d9      	b.n	800ea6e <_printf_common+0x8e>
	...

0800eabc <_printf_i>:
 800eabc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eac0:	7e0f      	ldrb	r7, [r1, #24]
 800eac2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eac4:	2f78      	cmp	r7, #120	@ 0x78
 800eac6:	4691      	mov	r9, r2
 800eac8:	4680      	mov	r8, r0
 800eaca:	460c      	mov	r4, r1
 800eacc:	469a      	mov	sl, r3
 800eace:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ead2:	d807      	bhi.n	800eae4 <_printf_i+0x28>
 800ead4:	2f62      	cmp	r7, #98	@ 0x62
 800ead6:	d80a      	bhi.n	800eaee <_printf_i+0x32>
 800ead8:	2f00      	cmp	r7, #0
 800eada:	f000 80d1 	beq.w	800ec80 <_printf_i+0x1c4>
 800eade:	2f58      	cmp	r7, #88	@ 0x58
 800eae0:	f000 80b8 	beq.w	800ec54 <_printf_i+0x198>
 800eae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eae8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eaec:	e03a      	b.n	800eb64 <_printf_i+0xa8>
 800eaee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eaf2:	2b15      	cmp	r3, #21
 800eaf4:	d8f6      	bhi.n	800eae4 <_printf_i+0x28>
 800eaf6:	a101      	add	r1, pc, #4	@ (adr r1, 800eafc <_printf_i+0x40>)
 800eaf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eafc:	0800eb55 	.word	0x0800eb55
 800eb00:	0800eb69 	.word	0x0800eb69
 800eb04:	0800eae5 	.word	0x0800eae5
 800eb08:	0800eae5 	.word	0x0800eae5
 800eb0c:	0800eae5 	.word	0x0800eae5
 800eb10:	0800eae5 	.word	0x0800eae5
 800eb14:	0800eb69 	.word	0x0800eb69
 800eb18:	0800eae5 	.word	0x0800eae5
 800eb1c:	0800eae5 	.word	0x0800eae5
 800eb20:	0800eae5 	.word	0x0800eae5
 800eb24:	0800eae5 	.word	0x0800eae5
 800eb28:	0800ec67 	.word	0x0800ec67
 800eb2c:	0800eb93 	.word	0x0800eb93
 800eb30:	0800ec21 	.word	0x0800ec21
 800eb34:	0800eae5 	.word	0x0800eae5
 800eb38:	0800eae5 	.word	0x0800eae5
 800eb3c:	0800ec89 	.word	0x0800ec89
 800eb40:	0800eae5 	.word	0x0800eae5
 800eb44:	0800eb93 	.word	0x0800eb93
 800eb48:	0800eae5 	.word	0x0800eae5
 800eb4c:	0800eae5 	.word	0x0800eae5
 800eb50:	0800ec29 	.word	0x0800ec29
 800eb54:	6833      	ldr	r3, [r6, #0]
 800eb56:	1d1a      	adds	r2, r3, #4
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	6032      	str	r2, [r6, #0]
 800eb5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb64:	2301      	movs	r3, #1
 800eb66:	e09c      	b.n	800eca2 <_printf_i+0x1e6>
 800eb68:	6833      	ldr	r3, [r6, #0]
 800eb6a:	6820      	ldr	r0, [r4, #0]
 800eb6c:	1d19      	adds	r1, r3, #4
 800eb6e:	6031      	str	r1, [r6, #0]
 800eb70:	0606      	lsls	r6, r0, #24
 800eb72:	d501      	bpl.n	800eb78 <_printf_i+0xbc>
 800eb74:	681d      	ldr	r5, [r3, #0]
 800eb76:	e003      	b.n	800eb80 <_printf_i+0xc4>
 800eb78:	0645      	lsls	r5, r0, #25
 800eb7a:	d5fb      	bpl.n	800eb74 <_printf_i+0xb8>
 800eb7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb80:	2d00      	cmp	r5, #0
 800eb82:	da03      	bge.n	800eb8c <_printf_i+0xd0>
 800eb84:	232d      	movs	r3, #45	@ 0x2d
 800eb86:	426d      	negs	r5, r5
 800eb88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb8c:	4858      	ldr	r0, [pc, #352]	@ (800ecf0 <_printf_i+0x234>)
 800eb8e:	230a      	movs	r3, #10
 800eb90:	e011      	b.n	800ebb6 <_printf_i+0xfa>
 800eb92:	6821      	ldr	r1, [r4, #0]
 800eb94:	6833      	ldr	r3, [r6, #0]
 800eb96:	0608      	lsls	r0, r1, #24
 800eb98:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb9c:	d402      	bmi.n	800eba4 <_printf_i+0xe8>
 800eb9e:	0649      	lsls	r1, r1, #25
 800eba0:	bf48      	it	mi
 800eba2:	b2ad      	uxthmi	r5, r5
 800eba4:	2f6f      	cmp	r7, #111	@ 0x6f
 800eba6:	4852      	ldr	r0, [pc, #328]	@ (800ecf0 <_printf_i+0x234>)
 800eba8:	6033      	str	r3, [r6, #0]
 800ebaa:	bf14      	ite	ne
 800ebac:	230a      	movne	r3, #10
 800ebae:	2308      	moveq	r3, #8
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ebb6:	6866      	ldr	r6, [r4, #4]
 800ebb8:	60a6      	str	r6, [r4, #8]
 800ebba:	2e00      	cmp	r6, #0
 800ebbc:	db05      	blt.n	800ebca <_printf_i+0x10e>
 800ebbe:	6821      	ldr	r1, [r4, #0]
 800ebc0:	432e      	orrs	r6, r5
 800ebc2:	f021 0104 	bic.w	r1, r1, #4
 800ebc6:	6021      	str	r1, [r4, #0]
 800ebc8:	d04b      	beq.n	800ec62 <_printf_i+0x1a6>
 800ebca:	4616      	mov	r6, r2
 800ebcc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ebd0:	fb03 5711 	mls	r7, r3, r1, r5
 800ebd4:	5dc7      	ldrb	r7, [r0, r7]
 800ebd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ebda:	462f      	mov	r7, r5
 800ebdc:	42bb      	cmp	r3, r7
 800ebde:	460d      	mov	r5, r1
 800ebe0:	d9f4      	bls.n	800ebcc <_printf_i+0x110>
 800ebe2:	2b08      	cmp	r3, #8
 800ebe4:	d10b      	bne.n	800ebfe <_printf_i+0x142>
 800ebe6:	6823      	ldr	r3, [r4, #0]
 800ebe8:	07df      	lsls	r7, r3, #31
 800ebea:	d508      	bpl.n	800ebfe <_printf_i+0x142>
 800ebec:	6923      	ldr	r3, [r4, #16]
 800ebee:	6861      	ldr	r1, [r4, #4]
 800ebf0:	4299      	cmp	r1, r3
 800ebf2:	bfde      	ittt	le
 800ebf4:	2330      	movle	r3, #48	@ 0x30
 800ebf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ebfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ebfe:	1b92      	subs	r2, r2, r6
 800ec00:	6122      	str	r2, [r4, #16]
 800ec02:	f8cd a000 	str.w	sl, [sp]
 800ec06:	464b      	mov	r3, r9
 800ec08:	aa03      	add	r2, sp, #12
 800ec0a:	4621      	mov	r1, r4
 800ec0c:	4640      	mov	r0, r8
 800ec0e:	f7ff fee7 	bl	800e9e0 <_printf_common>
 800ec12:	3001      	adds	r0, #1
 800ec14:	d14a      	bne.n	800ecac <_printf_i+0x1f0>
 800ec16:	f04f 30ff 	mov.w	r0, #4294967295
 800ec1a:	b004      	add	sp, #16
 800ec1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec20:	6823      	ldr	r3, [r4, #0]
 800ec22:	f043 0320 	orr.w	r3, r3, #32
 800ec26:	6023      	str	r3, [r4, #0]
 800ec28:	4832      	ldr	r0, [pc, #200]	@ (800ecf4 <_printf_i+0x238>)
 800ec2a:	2778      	movs	r7, #120	@ 0x78
 800ec2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec30:	6823      	ldr	r3, [r4, #0]
 800ec32:	6831      	ldr	r1, [r6, #0]
 800ec34:	061f      	lsls	r7, r3, #24
 800ec36:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec3a:	d402      	bmi.n	800ec42 <_printf_i+0x186>
 800ec3c:	065f      	lsls	r7, r3, #25
 800ec3e:	bf48      	it	mi
 800ec40:	b2ad      	uxthmi	r5, r5
 800ec42:	6031      	str	r1, [r6, #0]
 800ec44:	07d9      	lsls	r1, r3, #31
 800ec46:	bf44      	itt	mi
 800ec48:	f043 0320 	orrmi.w	r3, r3, #32
 800ec4c:	6023      	strmi	r3, [r4, #0]
 800ec4e:	b11d      	cbz	r5, 800ec58 <_printf_i+0x19c>
 800ec50:	2310      	movs	r3, #16
 800ec52:	e7ad      	b.n	800ebb0 <_printf_i+0xf4>
 800ec54:	4826      	ldr	r0, [pc, #152]	@ (800ecf0 <_printf_i+0x234>)
 800ec56:	e7e9      	b.n	800ec2c <_printf_i+0x170>
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	f023 0320 	bic.w	r3, r3, #32
 800ec5e:	6023      	str	r3, [r4, #0]
 800ec60:	e7f6      	b.n	800ec50 <_printf_i+0x194>
 800ec62:	4616      	mov	r6, r2
 800ec64:	e7bd      	b.n	800ebe2 <_printf_i+0x126>
 800ec66:	6833      	ldr	r3, [r6, #0]
 800ec68:	6825      	ldr	r5, [r4, #0]
 800ec6a:	6961      	ldr	r1, [r4, #20]
 800ec6c:	1d18      	adds	r0, r3, #4
 800ec6e:	6030      	str	r0, [r6, #0]
 800ec70:	062e      	lsls	r6, r5, #24
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	d501      	bpl.n	800ec7a <_printf_i+0x1be>
 800ec76:	6019      	str	r1, [r3, #0]
 800ec78:	e002      	b.n	800ec80 <_printf_i+0x1c4>
 800ec7a:	0668      	lsls	r0, r5, #25
 800ec7c:	d5fb      	bpl.n	800ec76 <_printf_i+0x1ba>
 800ec7e:	8019      	strh	r1, [r3, #0]
 800ec80:	2300      	movs	r3, #0
 800ec82:	6123      	str	r3, [r4, #16]
 800ec84:	4616      	mov	r6, r2
 800ec86:	e7bc      	b.n	800ec02 <_printf_i+0x146>
 800ec88:	6833      	ldr	r3, [r6, #0]
 800ec8a:	1d1a      	adds	r2, r3, #4
 800ec8c:	6032      	str	r2, [r6, #0]
 800ec8e:	681e      	ldr	r6, [r3, #0]
 800ec90:	6862      	ldr	r2, [r4, #4]
 800ec92:	2100      	movs	r1, #0
 800ec94:	4630      	mov	r0, r6
 800ec96:	f7f1 facb 	bl	8000230 <memchr>
 800ec9a:	b108      	cbz	r0, 800eca0 <_printf_i+0x1e4>
 800ec9c:	1b80      	subs	r0, r0, r6
 800ec9e:	6060      	str	r0, [r4, #4]
 800eca0:	6863      	ldr	r3, [r4, #4]
 800eca2:	6123      	str	r3, [r4, #16]
 800eca4:	2300      	movs	r3, #0
 800eca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecaa:	e7aa      	b.n	800ec02 <_printf_i+0x146>
 800ecac:	6923      	ldr	r3, [r4, #16]
 800ecae:	4632      	mov	r2, r6
 800ecb0:	4649      	mov	r1, r9
 800ecb2:	4640      	mov	r0, r8
 800ecb4:	47d0      	blx	sl
 800ecb6:	3001      	adds	r0, #1
 800ecb8:	d0ad      	beq.n	800ec16 <_printf_i+0x15a>
 800ecba:	6823      	ldr	r3, [r4, #0]
 800ecbc:	079b      	lsls	r3, r3, #30
 800ecbe:	d413      	bmi.n	800ece8 <_printf_i+0x22c>
 800ecc0:	68e0      	ldr	r0, [r4, #12]
 800ecc2:	9b03      	ldr	r3, [sp, #12]
 800ecc4:	4298      	cmp	r0, r3
 800ecc6:	bfb8      	it	lt
 800ecc8:	4618      	movlt	r0, r3
 800ecca:	e7a6      	b.n	800ec1a <_printf_i+0x15e>
 800eccc:	2301      	movs	r3, #1
 800ecce:	4632      	mov	r2, r6
 800ecd0:	4649      	mov	r1, r9
 800ecd2:	4640      	mov	r0, r8
 800ecd4:	47d0      	blx	sl
 800ecd6:	3001      	adds	r0, #1
 800ecd8:	d09d      	beq.n	800ec16 <_printf_i+0x15a>
 800ecda:	3501      	adds	r5, #1
 800ecdc:	68e3      	ldr	r3, [r4, #12]
 800ecde:	9903      	ldr	r1, [sp, #12]
 800ece0:	1a5b      	subs	r3, r3, r1
 800ece2:	42ab      	cmp	r3, r5
 800ece4:	dcf2      	bgt.n	800eccc <_printf_i+0x210>
 800ece6:	e7eb      	b.n	800ecc0 <_printf_i+0x204>
 800ece8:	2500      	movs	r5, #0
 800ecea:	f104 0619 	add.w	r6, r4, #25
 800ecee:	e7f5      	b.n	800ecdc <_printf_i+0x220>
 800ecf0:	080102ae 	.word	0x080102ae
 800ecf4:	080102bf 	.word	0x080102bf

0800ecf8 <__sflush_r>:
 800ecf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ecfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed00:	0716      	lsls	r6, r2, #28
 800ed02:	4605      	mov	r5, r0
 800ed04:	460c      	mov	r4, r1
 800ed06:	d454      	bmi.n	800edb2 <__sflush_r+0xba>
 800ed08:	684b      	ldr	r3, [r1, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	dc02      	bgt.n	800ed14 <__sflush_r+0x1c>
 800ed0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	dd48      	ble.n	800eda6 <__sflush_r+0xae>
 800ed14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed16:	2e00      	cmp	r6, #0
 800ed18:	d045      	beq.n	800eda6 <__sflush_r+0xae>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed20:	682f      	ldr	r7, [r5, #0]
 800ed22:	6a21      	ldr	r1, [r4, #32]
 800ed24:	602b      	str	r3, [r5, #0]
 800ed26:	d030      	beq.n	800ed8a <__sflush_r+0x92>
 800ed28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	0759      	lsls	r1, r3, #29
 800ed2e:	d505      	bpl.n	800ed3c <__sflush_r+0x44>
 800ed30:	6863      	ldr	r3, [r4, #4]
 800ed32:	1ad2      	subs	r2, r2, r3
 800ed34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed36:	b10b      	cbz	r3, 800ed3c <__sflush_r+0x44>
 800ed38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed3a:	1ad2      	subs	r2, r2, r3
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed40:	6a21      	ldr	r1, [r4, #32]
 800ed42:	4628      	mov	r0, r5
 800ed44:	47b0      	blx	r6
 800ed46:	1c43      	adds	r3, r0, #1
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	d106      	bne.n	800ed5a <__sflush_r+0x62>
 800ed4c:	6829      	ldr	r1, [r5, #0]
 800ed4e:	291d      	cmp	r1, #29
 800ed50:	d82b      	bhi.n	800edaa <__sflush_r+0xb2>
 800ed52:	4a2a      	ldr	r2, [pc, #168]	@ (800edfc <__sflush_r+0x104>)
 800ed54:	40ca      	lsrs	r2, r1
 800ed56:	07d6      	lsls	r6, r2, #31
 800ed58:	d527      	bpl.n	800edaa <__sflush_r+0xb2>
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	6062      	str	r2, [r4, #4]
 800ed5e:	04d9      	lsls	r1, r3, #19
 800ed60:	6922      	ldr	r2, [r4, #16]
 800ed62:	6022      	str	r2, [r4, #0]
 800ed64:	d504      	bpl.n	800ed70 <__sflush_r+0x78>
 800ed66:	1c42      	adds	r2, r0, #1
 800ed68:	d101      	bne.n	800ed6e <__sflush_r+0x76>
 800ed6a:	682b      	ldr	r3, [r5, #0]
 800ed6c:	b903      	cbnz	r3, 800ed70 <__sflush_r+0x78>
 800ed6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ed70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed72:	602f      	str	r7, [r5, #0]
 800ed74:	b1b9      	cbz	r1, 800eda6 <__sflush_r+0xae>
 800ed76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed7a:	4299      	cmp	r1, r3
 800ed7c:	d002      	beq.n	800ed84 <__sflush_r+0x8c>
 800ed7e:	4628      	mov	r0, r5
 800ed80:	f7fe fc8a 	bl	800d698 <_free_r>
 800ed84:	2300      	movs	r3, #0
 800ed86:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed88:	e00d      	b.n	800eda6 <__sflush_r+0xae>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	47b0      	blx	r6
 800ed90:	4602      	mov	r2, r0
 800ed92:	1c50      	adds	r0, r2, #1
 800ed94:	d1c9      	bne.n	800ed2a <__sflush_r+0x32>
 800ed96:	682b      	ldr	r3, [r5, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d0c6      	beq.n	800ed2a <__sflush_r+0x32>
 800ed9c:	2b1d      	cmp	r3, #29
 800ed9e:	d001      	beq.n	800eda4 <__sflush_r+0xac>
 800eda0:	2b16      	cmp	r3, #22
 800eda2:	d11e      	bne.n	800ede2 <__sflush_r+0xea>
 800eda4:	602f      	str	r7, [r5, #0]
 800eda6:	2000      	movs	r0, #0
 800eda8:	e022      	b.n	800edf0 <__sflush_r+0xf8>
 800edaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edae:	b21b      	sxth	r3, r3
 800edb0:	e01b      	b.n	800edea <__sflush_r+0xf2>
 800edb2:	690f      	ldr	r7, [r1, #16]
 800edb4:	2f00      	cmp	r7, #0
 800edb6:	d0f6      	beq.n	800eda6 <__sflush_r+0xae>
 800edb8:	0793      	lsls	r3, r2, #30
 800edba:	680e      	ldr	r6, [r1, #0]
 800edbc:	bf08      	it	eq
 800edbe:	694b      	ldreq	r3, [r1, #20]
 800edc0:	600f      	str	r7, [r1, #0]
 800edc2:	bf18      	it	ne
 800edc4:	2300      	movne	r3, #0
 800edc6:	eba6 0807 	sub.w	r8, r6, r7
 800edca:	608b      	str	r3, [r1, #8]
 800edcc:	f1b8 0f00 	cmp.w	r8, #0
 800edd0:	dde9      	ble.n	800eda6 <__sflush_r+0xae>
 800edd2:	6a21      	ldr	r1, [r4, #32]
 800edd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800edd6:	4643      	mov	r3, r8
 800edd8:	463a      	mov	r2, r7
 800edda:	4628      	mov	r0, r5
 800eddc:	47b0      	blx	r6
 800edde:	2800      	cmp	r0, #0
 800ede0:	dc08      	bgt.n	800edf4 <__sflush_r+0xfc>
 800ede2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ede6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edea:	81a3      	strh	r3, [r4, #12]
 800edec:	f04f 30ff 	mov.w	r0, #4294967295
 800edf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edf4:	4407      	add	r7, r0
 800edf6:	eba8 0800 	sub.w	r8, r8, r0
 800edfa:	e7e7      	b.n	800edcc <__sflush_r+0xd4>
 800edfc:	20400001 	.word	0x20400001

0800ee00 <_fflush_r>:
 800ee00:	b538      	push	{r3, r4, r5, lr}
 800ee02:	690b      	ldr	r3, [r1, #16]
 800ee04:	4605      	mov	r5, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	b913      	cbnz	r3, 800ee10 <_fflush_r+0x10>
 800ee0a:	2500      	movs	r5, #0
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	b118      	cbz	r0, 800ee1a <_fflush_r+0x1a>
 800ee12:	6a03      	ldr	r3, [r0, #32]
 800ee14:	b90b      	cbnz	r3, 800ee1a <_fflush_r+0x1a>
 800ee16:	f7fe f94b 	bl	800d0b0 <__sinit>
 800ee1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d0f3      	beq.n	800ee0a <_fflush_r+0xa>
 800ee22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee24:	07d0      	lsls	r0, r2, #31
 800ee26:	d404      	bmi.n	800ee32 <_fflush_r+0x32>
 800ee28:	0599      	lsls	r1, r3, #22
 800ee2a:	d402      	bmi.n	800ee32 <_fflush_r+0x32>
 800ee2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee2e:	f7fe fbee 	bl	800d60e <__retarget_lock_acquire_recursive>
 800ee32:	4628      	mov	r0, r5
 800ee34:	4621      	mov	r1, r4
 800ee36:	f7ff ff5f 	bl	800ecf8 <__sflush_r>
 800ee3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee3c:	07da      	lsls	r2, r3, #31
 800ee3e:	4605      	mov	r5, r0
 800ee40:	d4e4      	bmi.n	800ee0c <_fflush_r+0xc>
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	059b      	lsls	r3, r3, #22
 800ee46:	d4e1      	bmi.n	800ee0c <_fflush_r+0xc>
 800ee48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee4a:	f7fe fbe1 	bl	800d610 <__retarget_lock_release_recursive>
 800ee4e:	e7dd      	b.n	800ee0c <_fflush_r+0xc>

0800ee50 <fiprintf>:
 800ee50:	b40e      	push	{r1, r2, r3}
 800ee52:	b503      	push	{r0, r1, lr}
 800ee54:	4601      	mov	r1, r0
 800ee56:	ab03      	add	r3, sp, #12
 800ee58:	4805      	ldr	r0, [pc, #20]	@ (800ee70 <fiprintf+0x20>)
 800ee5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee5e:	6800      	ldr	r0, [r0, #0]
 800ee60:	9301      	str	r3, [sp, #4]
 800ee62:	f000 f917 	bl	800f094 <_vfiprintf_r>
 800ee66:	b002      	add	sp, #8
 800ee68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee6c:	b003      	add	sp, #12
 800ee6e:	4770      	bx	lr
 800ee70:	20000194 	.word	0x20000194

0800ee74 <__swhatbuf_r>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	460c      	mov	r4, r1
 800ee78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee7c:	2900      	cmp	r1, #0
 800ee7e:	b096      	sub	sp, #88	@ 0x58
 800ee80:	4615      	mov	r5, r2
 800ee82:	461e      	mov	r6, r3
 800ee84:	da0d      	bge.n	800eea2 <__swhatbuf_r+0x2e>
 800ee86:	89a3      	ldrh	r3, [r4, #12]
 800ee88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ee8c:	f04f 0100 	mov.w	r1, #0
 800ee90:	bf14      	ite	ne
 800ee92:	2340      	movne	r3, #64	@ 0x40
 800ee94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ee98:	2000      	movs	r0, #0
 800ee9a:	6031      	str	r1, [r6, #0]
 800ee9c:	602b      	str	r3, [r5, #0]
 800ee9e:	b016      	add	sp, #88	@ 0x58
 800eea0:	bd70      	pop	{r4, r5, r6, pc}
 800eea2:	466a      	mov	r2, sp
 800eea4:	f000 f862 	bl	800ef6c <_fstat_r>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	dbec      	blt.n	800ee86 <__swhatbuf_r+0x12>
 800eeac:	9901      	ldr	r1, [sp, #4]
 800eeae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eeb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eeb6:	4259      	negs	r1, r3
 800eeb8:	4159      	adcs	r1, r3
 800eeba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eebe:	e7eb      	b.n	800ee98 <__swhatbuf_r+0x24>

0800eec0 <__smakebuf_r>:
 800eec0:	898b      	ldrh	r3, [r1, #12]
 800eec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eec4:	079d      	lsls	r5, r3, #30
 800eec6:	4606      	mov	r6, r0
 800eec8:	460c      	mov	r4, r1
 800eeca:	d507      	bpl.n	800eedc <__smakebuf_r+0x1c>
 800eecc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eed0:	6023      	str	r3, [r4, #0]
 800eed2:	6123      	str	r3, [r4, #16]
 800eed4:	2301      	movs	r3, #1
 800eed6:	6163      	str	r3, [r4, #20]
 800eed8:	b003      	add	sp, #12
 800eeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eedc:	ab01      	add	r3, sp, #4
 800eede:	466a      	mov	r2, sp
 800eee0:	f7ff ffc8 	bl	800ee74 <__swhatbuf_r>
 800eee4:	9f00      	ldr	r7, [sp, #0]
 800eee6:	4605      	mov	r5, r0
 800eee8:	4639      	mov	r1, r7
 800eeea:	4630      	mov	r0, r6
 800eeec:	f7fd f8dc 	bl	800c0a8 <_malloc_r>
 800eef0:	b948      	cbnz	r0, 800ef06 <__smakebuf_r+0x46>
 800eef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eef6:	059a      	lsls	r2, r3, #22
 800eef8:	d4ee      	bmi.n	800eed8 <__smakebuf_r+0x18>
 800eefa:	f023 0303 	bic.w	r3, r3, #3
 800eefe:	f043 0302 	orr.w	r3, r3, #2
 800ef02:	81a3      	strh	r3, [r4, #12]
 800ef04:	e7e2      	b.n	800eecc <__smakebuf_r+0xc>
 800ef06:	89a3      	ldrh	r3, [r4, #12]
 800ef08:	6020      	str	r0, [r4, #0]
 800ef0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef0e:	81a3      	strh	r3, [r4, #12]
 800ef10:	9b01      	ldr	r3, [sp, #4]
 800ef12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ef16:	b15b      	cbz	r3, 800ef30 <__smakebuf_r+0x70>
 800ef18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f000 f837 	bl	800ef90 <_isatty_r>
 800ef22:	b128      	cbz	r0, 800ef30 <__smakebuf_r+0x70>
 800ef24:	89a3      	ldrh	r3, [r4, #12]
 800ef26:	f023 0303 	bic.w	r3, r3, #3
 800ef2a:	f043 0301 	orr.w	r3, r3, #1
 800ef2e:	81a3      	strh	r3, [r4, #12]
 800ef30:	89a3      	ldrh	r3, [r4, #12]
 800ef32:	431d      	orrs	r5, r3
 800ef34:	81a5      	strh	r5, [r4, #12]
 800ef36:	e7cf      	b.n	800eed8 <__smakebuf_r+0x18>

0800ef38 <memmove>:
 800ef38:	4288      	cmp	r0, r1
 800ef3a:	b510      	push	{r4, lr}
 800ef3c:	eb01 0402 	add.w	r4, r1, r2
 800ef40:	d902      	bls.n	800ef48 <memmove+0x10>
 800ef42:	4284      	cmp	r4, r0
 800ef44:	4623      	mov	r3, r4
 800ef46:	d807      	bhi.n	800ef58 <memmove+0x20>
 800ef48:	1e43      	subs	r3, r0, #1
 800ef4a:	42a1      	cmp	r1, r4
 800ef4c:	d008      	beq.n	800ef60 <memmove+0x28>
 800ef4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef56:	e7f8      	b.n	800ef4a <memmove+0x12>
 800ef58:	4402      	add	r2, r0
 800ef5a:	4601      	mov	r1, r0
 800ef5c:	428a      	cmp	r2, r1
 800ef5e:	d100      	bne.n	800ef62 <memmove+0x2a>
 800ef60:	bd10      	pop	{r4, pc}
 800ef62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef6a:	e7f7      	b.n	800ef5c <memmove+0x24>

0800ef6c <_fstat_r>:
 800ef6c:	b538      	push	{r3, r4, r5, lr}
 800ef6e:	4d07      	ldr	r5, [pc, #28]	@ (800ef8c <_fstat_r+0x20>)
 800ef70:	2300      	movs	r3, #0
 800ef72:	4604      	mov	r4, r0
 800ef74:	4608      	mov	r0, r1
 800ef76:	4611      	mov	r1, r2
 800ef78:	602b      	str	r3, [r5, #0]
 800ef7a:	f7f4 fabf 	bl	80034fc <_fstat>
 800ef7e:	1c43      	adds	r3, r0, #1
 800ef80:	d102      	bne.n	800ef88 <_fstat_r+0x1c>
 800ef82:	682b      	ldr	r3, [r5, #0]
 800ef84:	b103      	cbz	r3, 800ef88 <_fstat_r+0x1c>
 800ef86:	6023      	str	r3, [r4, #0]
 800ef88:	bd38      	pop	{r3, r4, r5, pc}
 800ef8a:	bf00      	nop
 800ef8c:	2000131c 	.word	0x2000131c

0800ef90 <_isatty_r>:
 800ef90:	b538      	push	{r3, r4, r5, lr}
 800ef92:	4d06      	ldr	r5, [pc, #24]	@ (800efac <_isatty_r+0x1c>)
 800ef94:	2300      	movs	r3, #0
 800ef96:	4604      	mov	r4, r0
 800ef98:	4608      	mov	r0, r1
 800ef9a:	602b      	str	r3, [r5, #0]
 800ef9c:	f7f4 fabe 	bl	800351c <_isatty>
 800efa0:	1c43      	adds	r3, r0, #1
 800efa2:	d102      	bne.n	800efaa <_isatty_r+0x1a>
 800efa4:	682b      	ldr	r3, [r5, #0]
 800efa6:	b103      	cbz	r3, 800efaa <_isatty_r+0x1a>
 800efa8:	6023      	str	r3, [r4, #0]
 800efaa:	bd38      	pop	{r3, r4, r5, pc}
 800efac:	2000131c 	.word	0x2000131c

0800efb0 <abort>:
 800efb0:	b508      	push	{r3, lr}
 800efb2:	2006      	movs	r0, #6
 800efb4:	f000 f9ae 	bl	800f314 <raise>
 800efb8:	2001      	movs	r0, #1
 800efba:	f7f4 fa4f 	bl	800345c <_exit>

0800efbe <_calloc_r>:
 800efbe:	b570      	push	{r4, r5, r6, lr}
 800efc0:	fba1 5402 	umull	r5, r4, r1, r2
 800efc4:	b934      	cbnz	r4, 800efd4 <_calloc_r+0x16>
 800efc6:	4629      	mov	r1, r5
 800efc8:	f7fd f86e 	bl	800c0a8 <_malloc_r>
 800efcc:	4606      	mov	r6, r0
 800efce:	b928      	cbnz	r0, 800efdc <_calloc_r+0x1e>
 800efd0:	4630      	mov	r0, r6
 800efd2:	bd70      	pop	{r4, r5, r6, pc}
 800efd4:	220c      	movs	r2, #12
 800efd6:	6002      	str	r2, [r0, #0]
 800efd8:	2600      	movs	r6, #0
 800efda:	e7f9      	b.n	800efd0 <_calloc_r+0x12>
 800efdc:	462a      	mov	r2, r5
 800efde:	4621      	mov	r1, r4
 800efe0:	f7fe fa08 	bl	800d3f4 <memset>
 800efe4:	e7f4      	b.n	800efd0 <_calloc_r+0x12>

0800efe6 <_realloc_r>:
 800efe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efea:	4607      	mov	r7, r0
 800efec:	4614      	mov	r4, r2
 800efee:	460d      	mov	r5, r1
 800eff0:	b921      	cbnz	r1, 800effc <_realloc_r+0x16>
 800eff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eff6:	4611      	mov	r1, r2
 800eff8:	f7fd b856 	b.w	800c0a8 <_malloc_r>
 800effc:	b92a      	cbnz	r2, 800f00a <_realloc_r+0x24>
 800effe:	f7fe fb4b 	bl	800d698 <_free_r>
 800f002:	4625      	mov	r5, r4
 800f004:	4628      	mov	r0, r5
 800f006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f00a:	f000 f99f 	bl	800f34c <_malloc_usable_size_r>
 800f00e:	4284      	cmp	r4, r0
 800f010:	4606      	mov	r6, r0
 800f012:	d802      	bhi.n	800f01a <_realloc_r+0x34>
 800f014:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f018:	d8f4      	bhi.n	800f004 <_realloc_r+0x1e>
 800f01a:	4621      	mov	r1, r4
 800f01c:	4638      	mov	r0, r7
 800f01e:	f7fd f843 	bl	800c0a8 <_malloc_r>
 800f022:	4680      	mov	r8, r0
 800f024:	b908      	cbnz	r0, 800f02a <_realloc_r+0x44>
 800f026:	4645      	mov	r5, r8
 800f028:	e7ec      	b.n	800f004 <_realloc_r+0x1e>
 800f02a:	42b4      	cmp	r4, r6
 800f02c:	4622      	mov	r2, r4
 800f02e:	4629      	mov	r1, r5
 800f030:	bf28      	it	cs
 800f032:	4632      	movcs	r2, r6
 800f034:	f7fe faf5 	bl	800d622 <memcpy>
 800f038:	4629      	mov	r1, r5
 800f03a:	4638      	mov	r0, r7
 800f03c:	f7fe fb2c 	bl	800d698 <_free_r>
 800f040:	e7f1      	b.n	800f026 <_realloc_r+0x40>

0800f042 <__sfputc_r>:
 800f042:	6893      	ldr	r3, [r2, #8]
 800f044:	3b01      	subs	r3, #1
 800f046:	2b00      	cmp	r3, #0
 800f048:	b410      	push	{r4}
 800f04a:	6093      	str	r3, [r2, #8]
 800f04c:	da08      	bge.n	800f060 <__sfputc_r+0x1e>
 800f04e:	6994      	ldr	r4, [r2, #24]
 800f050:	42a3      	cmp	r3, r4
 800f052:	db01      	blt.n	800f058 <__sfputc_r+0x16>
 800f054:	290a      	cmp	r1, #10
 800f056:	d103      	bne.n	800f060 <__sfputc_r+0x1e>
 800f058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f05c:	f7fe b935 	b.w	800d2ca <__swbuf_r>
 800f060:	6813      	ldr	r3, [r2, #0]
 800f062:	1c58      	adds	r0, r3, #1
 800f064:	6010      	str	r0, [r2, #0]
 800f066:	7019      	strb	r1, [r3, #0]
 800f068:	4608      	mov	r0, r1
 800f06a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <__sfputs_r>:
 800f070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f072:	4606      	mov	r6, r0
 800f074:	460f      	mov	r7, r1
 800f076:	4614      	mov	r4, r2
 800f078:	18d5      	adds	r5, r2, r3
 800f07a:	42ac      	cmp	r4, r5
 800f07c:	d101      	bne.n	800f082 <__sfputs_r+0x12>
 800f07e:	2000      	movs	r0, #0
 800f080:	e007      	b.n	800f092 <__sfputs_r+0x22>
 800f082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f086:	463a      	mov	r2, r7
 800f088:	4630      	mov	r0, r6
 800f08a:	f7ff ffda 	bl	800f042 <__sfputc_r>
 800f08e:	1c43      	adds	r3, r0, #1
 800f090:	d1f3      	bne.n	800f07a <__sfputs_r+0xa>
 800f092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f094 <_vfiprintf_r>:
 800f094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f098:	460d      	mov	r5, r1
 800f09a:	b09d      	sub	sp, #116	@ 0x74
 800f09c:	4614      	mov	r4, r2
 800f09e:	4698      	mov	r8, r3
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	b118      	cbz	r0, 800f0ac <_vfiprintf_r+0x18>
 800f0a4:	6a03      	ldr	r3, [r0, #32]
 800f0a6:	b90b      	cbnz	r3, 800f0ac <_vfiprintf_r+0x18>
 800f0a8:	f7fe f802 	bl	800d0b0 <__sinit>
 800f0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0ae:	07d9      	lsls	r1, r3, #31
 800f0b0:	d405      	bmi.n	800f0be <_vfiprintf_r+0x2a>
 800f0b2:	89ab      	ldrh	r3, [r5, #12]
 800f0b4:	059a      	lsls	r2, r3, #22
 800f0b6:	d402      	bmi.n	800f0be <_vfiprintf_r+0x2a>
 800f0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0ba:	f7fe faa8 	bl	800d60e <__retarget_lock_acquire_recursive>
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	071b      	lsls	r3, r3, #28
 800f0c2:	d501      	bpl.n	800f0c8 <_vfiprintf_r+0x34>
 800f0c4:	692b      	ldr	r3, [r5, #16]
 800f0c6:	b99b      	cbnz	r3, 800f0f0 <_vfiprintf_r+0x5c>
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f7fe f93c 	bl	800d348 <__swsetup_r>
 800f0d0:	b170      	cbz	r0, 800f0f0 <_vfiprintf_r+0x5c>
 800f0d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0d4:	07dc      	lsls	r4, r3, #31
 800f0d6:	d504      	bpl.n	800f0e2 <_vfiprintf_r+0x4e>
 800f0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0dc:	b01d      	add	sp, #116	@ 0x74
 800f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e2:	89ab      	ldrh	r3, [r5, #12]
 800f0e4:	0598      	lsls	r0, r3, #22
 800f0e6:	d4f7      	bmi.n	800f0d8 <_vfiprintf_r+0x44>
 800f0e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0ea:	f7fe fa91 	bl	800d610 <__retarget_lock_release_recursive>
 800f0ee:	e7f3      	b.n	800f0d8 <_vfiprintf_r+0x44>
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0f4:	2320      	movs	r3, #32
 800f0f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0fe:	2330      	movs	r3, #48	@ 0x30
 800f100:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f2b0 <_vfiprintf_r+0x21c>
 800f104:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f108:	f04f 0901 	mov.w	r9, #1
 800f10c:	4623      	mov	r3, r4
 800f10e:	469a      	mov	sl, r3
 800f110:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f114:	b10a      	cbz	r2, 800f11a <_vfiprintf_r+0x86>
 800f116:	2a25      	cmp	r2, #37	@ 0x25
 800f118:	d1f9      	bne.n	800f10e <_vfiprintf_r+0x7a>
 800f11a:	ebba 0b04 	subs.w	fp, sl, r4
 800f11e:	d00b      	beq.n	800f138 <_vfiprintf_r+0xa4>
 800f120:	465b      	mov	r3, fp
 800f122:	4622      	mov	r2, r4
 800f124:	4629      	mov	r1, r5
 800f126:	4630      	mov	r0, r6
 800f128:	f7ff ffa2 	bl	800f070 <__sfputs_r>
 800f12c:	3001      	adds	r0, #1
 800f12e:	f000 80a7 	beq.w	800f280 <_vfiprintf_r+0x1ec>
 800f132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f134:	445a      	add	r2, fp
 800f136:	9209      	str	r2, [sp, #36]	@ 0x24
 800f138:	f89a 3000 	ldrb.w	r3, [sl]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f000 809f 	beq.w	800f280 <_vfiprintf_r+0x1ec>
 800f142:	2300      	movs	r3, #0
 800f144:	f04f 32ff 	mov.w	r2, #4294967295
 800f148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f14c:	f10a 0a01 	add.w	sl, sl, #1
 800f150:	9304      	str	r3, [sp, #16]
 800f152:	9307      	str	r3, [sp, #28]
 800f154:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f158:	931a      	str	r3, [sp, #104]	@ 0x68
 800f15a:	4654      	mov	r4, sl
 800f15c:	2205      	movs	r2, #5
 800f15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f162:	4853      	ldr	r0, [pc, #332]	@ (800f2b0 <_vfiprintf_r+0x21c>)
 800f164:	f7f1 f864 	bl	8000230 <memchr>
 800f168:	9a04      	ldr	r2, [sp, #16]
 800f16a:	b9d8      	cbnz	r0, 800f1a4 <_vfiprintf_r+0x110>
 800f16c:	06d1      	lsls	r1, r2, #27
 800f16e:	bf44      	itt	mi
 800f170:	2320      	movmi	r3, #32
 800f172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f176:	0713      	lsls	r3, r2, #28
 800f178:	bf44      	itt	mi
 800f17a:	232b      	movmi	r3, #43	@ 0x2b
 800f17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f180:	f89a 3000 	ldrb.w	r3, [sl]
 800f184:	2b2a      	cmp	r3, #42	@ 0x2a
 800f186:	d015      	beq.n	800f1b4 <_vfiprintf_r+0x120>
 800f188:	9a07      	ldr	r2, [sp, #28]
 800f18a:	4654      	mov	r4, sl
 800f18c:	2000      	movs	r0, #0
 800f18e:	f04f 0c0a 	mov.w	ip, #10
 800f192:	4621      	mov	r1, r4
 800f194:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f198:	3b30      	subs	r3, #48	@ 0x30
 800f19a:	2b09      	cmp	r3, #9
 800f19c:	d94b      	bls.n	800f236 <_vfiprintf_r+0x1a2>
 800f19e:	b1b0      	cbz	r0, 800f1ce <_vfiprintf_r+0x13a>
 800f1a0:	9207      	str	r2, [sp, #28]
 800f1a2:	e014      	b.n	800f1ce <_vfiprintf_r+0x13a>
 800f1a4:	eba0 0308 	sub.w	r3, r0, r8
 800f1a8:	fa09 f303 	lsl.w	r3, r9, r3
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	9304      	str	r3, [sp, #16]
 800f1b0:	46a2      	mov	sl, r4
 800f1b2:	e7d2      	b.n	800f15a <_vfiprintf_r+0xc6>
 800f1b4:	9b03      	ldr	r3, [sp, #12]
 800f1b6:	1d19      	adds	r1, r3, #4
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	9103      	str	r1, [sp, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	bfbb      	ittet	lt
 800f1c0:	425b      	neglt	r3, r3
 800f1c2:	f042 0202 	orrlt.w	r2, r2, #2
 800f1c6:	9307      	strge	r3, [sp, #28]
 800f1c8:	9307      	strlt	r3, [sp, #28]
 800f1ca:	bfb8      	it	lt
 800f1cc:	9204      	strlt	r2, [sp, #16]
 800f1ce:	7823      	ldrb	r3, [r4, #0]
 800f1d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1d2:	d10a      	bne.n	800f1ea <_vfiprintf_r+0x156>
 800f1d4:	7863      	ldrb	r3, [r4, #1]
 800f1d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1d8:	d132      	bne.n	800f240 <_vfiprintf_r+0x1ac>
 800f1da:	9b03      	ldr	r3, [sp, #12]
 800f1dc:	1d1a      	adds	r2, r3, #4
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	9203      	str	r2, [sp, #12]
 800f1e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1e6:	3402      	adds	r4, #2
 800f1e8:	9305      	str	r3, [sp, #20]
 800f1ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f2c0 <_vfiprintf_r+0x22c>
 800f1ee:	7821      	ldrb	r1, [r4, #0]
 800f1f0:	2203      	movs	r2, #3
 800f1f2:	4650      	mov	r0, sl
 800f1f4:	f7f1 f81c 	bl	8000230 <memchr>
 800f1f8:	b138      	cbz	r0, 800f20a <_vfiprintf_r+0x176>
 800f1fa:	9b04      	ldr	r3, [sp, #16]
 800f1fc:	eba0 000a 	sub.w	r0, r0, sl
 800f200:	2240      	movs	r2, #64	@ 0x40
 800f202:	4082      	lsls	r2, r0
 800f204:	4313      	orrs	r3, r2
 800f206:	3401      	adds	r4, #1
 800f208:	9304      	str	r3, [sp, #16]
 800f20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f20e:	4829      	ldr	r0, [pc, #164]	@ (800f2b4 <_vfiprintf_r+0x220>)
 800f210:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f214:	2206      	movs	r2, #6
 800f216:	f7f1 f80b 	bl	8000230 <memchr>
 800f21a:	2800      	cmp	r0, #0
 800f21c:	d03f      	beq.n	800f29e <_vfiprintf_r+0x20a>
 800f21e:	4b26      	ldr	r3, [pc, #152]	@ (800f2b8 <_vfiprintf_r+0x224>)
 800f220:	bb1b      	cbnz	r3, 800f26a <_vfiprintf_r+0x1d6>
 800f222:	9b03      	ldr	r3, [sp, #12]
 800f224:	3307      	adds	r3, #7
 800f226:	f023 0307 	bic.w	r3, r3, #7
 800f22a:	3308      	adds	r3, #8
 800f22c:	9303      	str	r3, [sp, #12]
 800f22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f230:	443b      	add	r3, r7
 800f232:	9309      	str	r3, [sp, #36]	@ 0x24
 800f234:	e76a      	b.n	800f10c <_vfiprintf_r+0x78>
 800f236:	fb0c 3202 	mla	r2, ip, r2, r3
 800f23a:	460c      	mov	r4, r1
 800f23c:	2001      	movs	r0, #1
 800f23e:	e7a8      	b.n	800f192 <_vfiprintf_r+0xfe>
 800f240:	2300      	movs	r3, #0
 800f242:	3401      	adds	r4, #1
 800f244:	9305      	str	r3, [sp, #20]
 800f246:	4619      	mov	r1, r3
 800f248:	f04f 0c0a 	mov.w	ip, #10
 800f24c:	4620      	mov	r0, r4
 800f24e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f252:	3a30      	subs	r2, #48	@ 0x30
 800f254:	2a09      	cmp	r2, #9
 800f256:	d903      	bls.n	800f260 <_vfiprintf_r+0x1cc>
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d0c6      	beq.n	800f1ea <_vfiprintf_r+0x156>
 800f25c:	9105      	str	r1, [sp, #20]
 800f25e:	e7c4      	b.n	800f1ea <_vfiprintf_r+0x156>
 800f260:	fb0c 2101 	mla	r1, ip, r1, r2
 800f264:	4604      	mov	r4, r0
 800f266:	2301      	movs	r3, #1
 800f268:	e7f0      	b.n	800f24c <_vfiprintf_r+0x1b8>
 800f26a:	ab03      	add	r3, sp, #12
 800f26c:	9300      	str	r3, [sp, #0]
 800f26e:	462a      	mov	r2, r5
 800f270:	4b12      	ldr	r3, [pc, #72]	@ (800f2bc <_vfiprintf_r+0x228>)
 800f272:	a904      	add	r1, sp, #16
 800f274:	4630      	mov	r0, r6
 800f276:	f3af 8000 	nop.w
 800f27a:	4607      	mov	r7, r0
 800f27c:	1c78      	adds	r0, r7, #1
 800f27e:	d1d6      	bne.n	800f22e <_vfiprintf_r+0x19a>
 800f280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f282:	07d9      	lsls	r1, r3, #31
 800f284:	d405      	bmi.n	800f292 <_vfiprintf_r+0x1fe>
 800f286:	89ab      	ldrh	r3, [r5, #12]
 800f288:	059a      	lsls	r2, r3, #22
 800f28a:	d402      	bmi.n	800f292 <_vfiprintf_r+0x1fe>
 800f28c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f28e:	f7fe f9bf 	bl	800d610 <__retarget_lock_release_recursive>
 800f292:	89ab      	ldrh	r3, [r5, #12]
 800f294:	065b      	lsls	r3, r3, #25
 800f296:	f53f af1f 	bmi.w	800f0d8 <_vfiprintf_r+0x44>
 800f29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f29c:	e71e      	b.n	800f0dc <_vfiprintf_r+0x48>
 800f29e:	ab03      	add	r3, sp, #12
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	462a      	mov	r2, r5
 800f2a4:	4b05      	ldr	r3, [pc, #20]	@ (800f2bc <_vfiprintf_r+0x228>)
 800f2a6:	a904      	add	r1, sp, #16
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	f7ff fc07 	bl	800eabc <_printf_i>
 800f2ae:	e7e4      	b.n	800f27a <_vfiprintf_r+0x1e6>
 800f2b0:	0801029d 	.word	0x0801029d
 800f2b4:	080102a7 	.word	0x080102a7
 800f2b8:	00000000 	.word	0x00000000
 800f2bc:	0800f071 	.word	0x0800f071
 800f2c0:	080102a3 	.word	0x080102a3

0800f2c4 <_raise_r>:
 800f2c4:	291f      	cmp	r1, #31
 800f2c6:	b538      	push	{r3, r4, r5, lr}
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	d904      	bls.n	800f2d8 <_raise_r+0x14>
 800f2ce:	2316      	movs	r3, #22
 800f2d0:	6003      	str	r3, [r0, #0]
 800f2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f2da:	b112      	cbz	r2, 800f2e2 <_raise_r+0x1e>
 800f2dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2e0:	b94b      	cbnz	r3, 800f2f6 <_raise_r+0x32>
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	f000 f830 	bl	800f348 <_getpid_r>
 800f2e8:	4622      	mov	r2, r4
 800f2ea:	4601      	mov	r1, r0
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2f2:	f000 b817 	b.w	800f324 <_kill_r>
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d00a      	beq.n	800f310 <_raise_r+0x4c>
 800f2fa:	1c59      	adds	r1, r3, #1
 800f2fc:	d103      	bne.n	800f306 <_raise_r+0x42>
 800f2fe:	2316      	movs	r3, #22
 800f300:	6003      	str	r3, [r0, #0]
 800f302:	2001      	movs	r0, #1
 800f304:	e7e7      	b.n	800f2d6 <_raise_r+0x12>
 800f306:	2100      	movs	r1, #0
 800f308:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f30c:	4620      	mov	r0, r4
 800f30e:	4798      	blx	r3
 800f310:	2000      	movs	r0, #0
 800f312:	e7e0      	b.n	800f2d6 <_raise_r+0x12>

0800f314 <raise>:
 800f314:	4b02      	ldr	r3, [pc, #8]	@ (800f320 <raise+0xc>)
 800f316:	4601      	mov	r1, r0
 800f318:	6818      	ldr	r0, [r3, #0]
 800f31a:	f7ff bfd3 	b.w	800f2c4 <_raise_r>
 800f31e:	bf00      	nop
 800f320:	20000194 	.word	0x20000194

0800f324 <_kill_r>:
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	4d07      	ldr	r5, [pc, #28]	@ (800f344 <_kill_r+0x20>)
 800f328:	2300      	movs	r3, #0
 800f32a:	4604      	mov	r4, r0
 800f32c:	4608      	mov	r0, r1
 800f32e:	4611      	mov	r1, r2
 800f330:	602b      	str	r3, [r5, #0]
 800f332:	f7f4 f883 	bl	800343c <_kill>
 800f336:	1c43      	adds	r3, r0, #1
 800f338:	d102      	bne.n	800f340 <_kill_r+0x1c>
 800f33a:	682b      	ldr	r3, [r5, #0]
 800f33c:	b103      	cbz	r3, 800f340 <_kill_r+0x1c>
 800f33e:	6023      	str	r3, [r4, #0]
 800f340:	bd38      	pop	{r3, r4, r5, pc}
 800f342:	bf00      	nop
 800f344:	2000131c 	.word	0x2000131c

0800f348 <_getpid_r>:
 800f348:	f7f4 b870 	b.w	800342c <_getpid>

0800f34c <_malloc_usable_size_r>:
 800f34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f350:	1f18      	subs	r0, r3, #4
 800f352:	2b00      	cmp	r3, #0
 800f354:	bfbc      	itt	lt
 800f356:	580b      	ldrlt	r3, [r1, r0]
 800f358:	18c0      	addlt	r0, r0, r3
 800f35a:	4770      	bx	lr
 800f35c:	0000      	movs	r0, r0
	...

0800f360 <log>:
 800f360:	b538      	push	{r3, r4, r5, lr}
 800f362:	ed2d 8b02 	vpush	{d8}
 800f366:	ec55 4b10 	vmov	r4, r5, d0
 800f36a:	f000 f839 	bl	800f3e0 <__ieee754_log>
 800f36e:	4622      	mov	r2, r4
 800f370:	462b      	mov	r3, r5
 800f372:	4620      	mov	r0, r4
 800f374:	4629      	mov	r1, r5
 800f376:	eeb0 8a40 	vmov.f32	s16, s0
 800f37a:	eef0 8a60 	vmov.f32	s17, s1
 800f37e:	f7f1 fbfd 	bl	8000b7c <__aeabi_dcmpun>
 800f382:	b998      	cbnz	r0, 800f3ac <log+0x4c>
 800f384:	2200      	movs	r2, #0
 800f386:	2300      	movs	r3, #0
 800f388:	4620      	mov	r0, r4
 800f38a:	4629      	mov	r1, r5
 800f38c:	f7f1 fbec 	bl	8000b68 <__aeabi_dcmpgt>
 800f390:	b960      	cbnz	r0, 800f3ac <log+0x4c>
 800f392:	2200      	movs	r2, #0
 800f394:	2300      	movs	r3, #0
 800f396:	4620      	mov	r0, r4
 800f398:	4629      	mov	r1, r5
 800f39a:	f7f1 fbbd 	bl	8000b18 <__aeabi_dcmpeq>
 800f39e:	b160      	cbz	r0, 800f3ba <log+0x5a>
 800f3a0:	f7fe f90a 	bl	800d5b8 <__errno>
 800f3a4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800f3d0 <log+0x70>
 800f3a8:	2322      	movs	r3, #34	@ 0x22
 800f3aa:	6003      	str	r3, [r0, #0]
 800f3ac:	eeb0 0a48 	vmov.f32	s0, s16
 800f3b0:	eef0 0a68 	vmov.f32	s1, s17
 800f3b4:	ecbd 8b02 	vpop	{d8}
 800f3b8:	bd38      	pop	{r3, r4, r5, pc}
 800f3ba:	f7fe f8fd 	bl	800d5b8 <__errno>
 800f3be:	ecbd 8b02 	vpop	{d8}
 800f3c2:	2321      	movs	r3, #33	@ 0x21
 800f3c4:	6003      	str	r3, [r0, #0]
 800f3c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3ca:	4803      	ldr	r0, [pc, #12]	@ (800f3d8 <log+0x78>)
 800f3cc:	f7fe b938 	b.w	800d640 <nan>
 800f3d0:	00000000 	.word	0x00000000
 800f3d4:	fff00000 	.word	0xfff00000
 800f3d8:	080101d2 	.word	0x080101d2
 800f3dc:	00000000 	.word	0x00000000

0800f3e0 <__ieee754_log>:
 800f3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e4:	ec51 0b10 	vmov	r0, r1, d0
 800f3e8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800f3ec:	b087      	sub	sp, #28
 800f3ee:	460d      	mov	r5, r1
 800f3f0:	da26      	bge.n	800f440 <__ieee754_log+0x60>
 800f3f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f3f6:	4303      	orrs	r3, r0
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	d10a      	bne.n	800f412 <__ieee754_log+0x32>
 800f3fc:	49ce      	ldr	r1, [pc, #824]	@ (800f738 <__ieee754_log+0x358>)
 800f3fe:	2200      	movs	r2, #0
 800f400:	2300      	movs	r3, #0
 800f402:	2000      	movs	r0, #0
 800f404:	f7f1 fa4a 	bl	800089c <__aeabi_ddiv>
 800f408:	ec41 0b10 	vmov	d0, r0, r1
 800f40c:	b007      	add	sp, #28
 800f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f412:	2900      	cmp	r1, #0
 800f414:	da05      	bge.n	800f422 <__ieee754_log+0x42>
 800f416:	460b      	mov	r3, r1
 800f418:	f7f0 ff5e 	bl	80002d8 <__aeabi_dsub>
 800f41c:	2200      	movs	r2, #0
 800f41e:	2300      	movs	r3, #0
 800f420:	e7f0      	b.n	800f404 <__ieee754_log+0x24>
 800f422:	4bc6      	ldr	r3, [pc, #792]	@ (800f73c <__ieee754_log+0x35c>)
 800f424:	2200      	movs	r2, #0
 800f426:	f7f1 f90f 	bl	8000648 <__aeabi_dmul>
 800f42a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800f42e:	460d      	mov	r5, r1
 800f430:	4ac3      	ldr	r2, [pc, #780]	@ (800f740 <__ieee754_log+0x360>)
 800f432:	4295      	cmp	r5, r2
 800f434:	dd06      	ble.n	800f444 <__ieee754_log+0x64>
 800f436:	4602      	mov	r2, r0
 800f438:	460b      	mov	r3, r1
 800f43a:	f7f0 ff4f 	bl	80002dc <__adddf3>
 800f43e:	e7e3      	b.n	800f408 <__ieee754_log+0x28>
 800f440:	2300      	movs	r3, #0
 800f442:	e7f5      	b.n	800f430 <__ieee754_log+0x50>
 800f444:	152c      	asrs	r4, r5, #20
 800f446:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800f44a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f44e:	441c      	add	r4, r3
 800f450:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800f454:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800f458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f45c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800f460:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800f464:	ea42 0105 	orr.w	r1, r2, r5
 800f468:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f46c:	2200      	movs	r2, #0
 800f46e:	4bb5      	ldr	r3, [pc, #724]	@ (800f744 <__ieee754_log+0x364>)
 800f470:	f7f0 ff32 	bl	80002d8 <__aeabi_dsub>
 800f474:	1cab      	adds	r3, r5, #2
 800f476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f47a:	2b02      	cmp	r3, #2
 800f47c:	4682      	mov	sl, r0
 800f47e:	468b      	mov	fp, r1
 800f480:	f04f 0200 	mov.w	r2, #0
 800f484:	dc53      	bgt.n	800f52e <__ieee754_log+0x14e>
 800f486:	2300      	movs	r3, #0
 800f488:	f7f1 fb46 	bl	8000b18 <__aeabi_dcmpeq>
 800f48c:	b1d0      	cbz	r0, 800f4c4 <__ieee754_log+0xe4>
 800f48e:	2c00      	cmp	r4, #0
 800f490:	f000 8120 	beq.w	800f6d4 <__ieee754_log+0x2f4>
 800f494:	4620      	mov	r0, r4
 800f496:	f7f1 f86d 	bl	8000574 <__aeabi_i2d>
 800f49a:	a391      	add	r3, pc, #580	@ (adr r3, 800f6e0 <__ieee754_log+0x300>)
 800f49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	460f      	mov	r7, r1
 800f4a4:	f7f1 f8d0 	bl	8000648 <__aeabi_dmul>
 800f4a8:	a38f      	add	r3, pc, #572	@ (adr r3, 800f6e8 <__ieee754_log+0x308>)
 800f4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	460d      	mov	r5, r1
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	4639      	mov	r1, r7
 800f4b6:	f7f1 f8c7 	bl	8000648 <__aeabi_dmul>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	4620      	mov	r0, r4
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	e7ba      	b.n	800f43a <__ieee754_log+0x5a>
 800f4c4:	a38a      	add	r3, pc, #552	@ (adr r3, 800f6f0 <__ieee754_log+0x310>)
 800f4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ca:	4650      	mov	r0, sl
 800f4cc:	4659      	mov	r1, fp
 800f4ce:	f7f1 f8bb 	bl	8000648 <__aeabi_dmul>
 800f4d2:	4602      	mov	r2, r0
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	499b      	ldr	r1, [pc, #620]	@ (800f748 <__ieee754_log+0x368>)
 800f4da:	f7f0 fefd 	bl	80002d8 <__aeabi_dsub>
 800f4de:	4652      	mov	r2, sl
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	460f      	mov	r7, r1
 800f4e4:	465b      	mov	r3, fp
 800f4e6:	4650      	mov	r0, sl
 800f4e8:	4659      	mov	r1, fp
 800f4ea:	f7f1 f8ad 	bl	8000648 <__aeabi_dmul>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	4639      	mov	r1, r7
 800f4f6:	f7f1 f8a7 	bl	8000648 <__aeabi_dmul>
 800f4fa:	4606      	mov	r6, r0
 800f4fc:	460f      	mov	r7, r1
 800f4fe:	b914      	cbnz	r4, 800f506 <__ieee754_log+0x126>
 800f500:	4632      	mov	r2, r6
 800f502:	463b      	mov	r3, r7
 800f504:	e0a0      	b.n	800f648 <__ieee754_log+0x268>
 800f506:	4620      	mov	r0, r4
 800f508:	f7f1 f834 	bl	8000574 <__aeabi_i2d>
 800f50c:	a374      	add	r3, pc, #464	@ (adr r3, 800f6e0 <__ieee754_log+0x300>)
 800f50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f512:	4680      	mov	r8, r0
 800f514:	4689      	mov	r9, r1
 800f516:	f7f1 f897 	bl	8000648 <__aeabi_dmul>
 800f51a:	a373      	add	r3, pc, #460	@ (adr r3, 800f6e8 <__ieee754_log+0x308>)
 800f51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f520:	4604      	mov	r4, r0
 800f522:	460d      	mov	r5, r1
 800f524:	4640      	mov	r0, r8
 800f526:	4649      	mov	r1, r9
 800f528:	f7f1 f88e 	bl	8000648 <__aeabi_dmul>
 800f52c:	e0a5      	b.n	800f67a <__ieee754_log+0x29a>
 800f52e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f532:	f7f0 fed3 	bl	80002dc <__adddf3>
 800f536:	4602      	mov	r2, r0
 800f538:	460b      	mov	r3, r1
 800f53a:	4650      	mov	r0, sl
 800f53c:	4659      	mov	r1, fp
 800f53e:	f7f1 f9ad 	bl	800089c <__aeabi_ddiv>
 800f542:	e9cd 0100 	strd	r0, r1, [sp]
 800f546:	4620      	mov	r0, r4
 800f548:	f7f1 f814 	bl	8000574 <__aeabi_i2d>
 800f54c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f554:	4610      	mov	r0, r2
 800f556:	4619      	mov	r1, r3
 800f558:	f7f1 f876 	bl	8000648 <__aeabi_dmul>
 800f55c:	4602      	mov	r2, r0
 800f55e:	460b      	mov	r3, r1
 800f560:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f564:	f7f1 f870 	bl	8000648 <__aeabi_dmul>
 800f568:	a363      	add	r3, pc, #396	@ (adr r3, 800f6f8 <__ieee754_log+0x318>)
 800f56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56e:	4680      	mov	r8, r0
 800f570:	4689      	mov	r9, r1
 800f572:	f7f1 f869 	bl	8000648 <__aeabi_dmul>
 800f576:	a362      	add	r3, pc, #392	@ (adr r3, 800f700 <__ieee754_log+0x320>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f7f0 feae 	bl	80002dc <__adddf3>
 800f580:	4642      	mov	r2, r8
 800f582:	464b      	mov	r3, r9
 800f584:	f7f1 f860 	bl	8000648 <__aeabi_dmul>
 800f588:	a35f      	add	r3, pc, #380	@ (adr r3, 800f708 <__ieee754_log+0x328>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f0 fea5 	bl	80002dc <__adddf3>
 800f592:	4642      	mov	r2, r8
 800f594:	464b      	mov	r3, r9
 800f596:	f7f1 f857 	bl	8000648 <__aeabi_dmul>
 800f59a:	a35d      	add	r3, pc, #372	@ (adr r3, 800f710 <__ieee754_log+0x330>)
 800f59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a0:	f7f0 fe9c 	bl	80002dc <__adddf3>
 800f5a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5a8:	f7f1 f84e 	bl	8000648 <__aeabi_dmul>
 800f5ac:	a35a      	add	r3, pc, #360	@ (adr r3, 800f718 <__ieee754_log+0x338>)
 800f5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5b6:	4640      	mov	r0, r8
 800f5b8:	4649      	mov	r1, r9
 800f5ba:	f7f1 f845 	bl	8000648 <__aeabi_dmul>
 800f5be:	a358      	add	r3, pc, #352	@ (adr r3, 800f720 <__ieee754_log+0x340>)
 800f5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c4:	f7f0 fe8a 	bl	80002dc <__adddf3>
 800f5c8:	4642      	mov	r2, r8
 800f5ca:	464b      	mov	r3, r9
 800f5cc:	f7f1 f83c 	bl	8000648 <__aeabi_dmul>
 800f5d0:	a355      	add	r3, pc, #340	@ (adr r3, 800f728 <__ieee754_log+0x348>)
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	f7f0 fe81 	bl	80002dc <__adddf3>
 800f5da:	4642      	mov	r2, r8
 800f5dc:	464b      	mov	r3, r9
 800f5de:	f7f1 f833 	bl	8000648 <__aeabi_dmul>
 800f5e2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800f5ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5f2:	f7f0 fe73 	bl	80002dc <__adddf3>
 800f5f6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800f5fa:	3551      	adds	r5, #81	@ 0x51
 800f5fc:	4335      	orrs	r5, r6
 800f5fe:	2d00      	cmp	r5, #0
 800f600:	4680      	mov	r8, r0
 800f602:	4689      	mov	r9, r1
 800f604:	dd48      	ble.n	800f698 <__ieee754_log+0x2b8>
 800f606:	4b50      	ldr	r3, [pc, #320]	@ (800f748 <__ieee754_log+0x368>)
 800f608:	2200      	movs	r2, #0
 800f60a:	4650      	mov	r0, sl
 800f60c:	4659      	mov	r1, fp
 800f60e:	f7f1 f81b 	bl	8000648 <__aeabi_dmul>
 800f612:	4652      	mov	r2, sl
 800f614:	465b      	mov	r3, fp
 800f616:	f7f1 f817 	bl	8000648 <__aeabi_dmul>
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	4606      	mov	r6, r0
 800f620:	460f      	mov	r7, r1
 800f622:	4640      	mov	r0, r8
 800f624:	4649      	mov	r1, r9
 800f626:	f7f0 fe59 	bl	80002dc <__adddf3>
 800f62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f62e:	f7f1 f80b 	bl	8000648 <__aeabi_dmul>
 800f632:	4680      	mov	r8, r0
 800f634:	4689      	mov	r9, r1
 800f636:	b964      	cbnz	r4, 800f652 <__ieee754_log+0x272>
 800f638:	4602      	mov	r2, r0
 800f63a:	460b      	mov	r3, r1
 800f63c:	4630      	mov	r0, r6
 800f63e:	4639      	mov	r1, r7
 800f640:	f7f0 fe4a 	bl	80002d8 <__aeabi_dsub>
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	4650      	mov	r0, sl
 800f64a:	4659      	mov	r1, fp
 800f64c:	f7f0 fe44 	bl	80002d8 <__aeabi_dsub>
 800f650:	e6da      	b.n	800f408 <__ieee754_log+0x28>
 800f652:	a323      	add	r3, pc, #140	@ (adr r3, 800f6e0 <__ieee754_log+0x300>)
 800f654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f65c:	f7f0 fff4 	bl	8000648 <__aeabi_dmul>
 800f660:	a321      	add	r3, pc, #132	@ (adr r3, 800f6e8 <__ieee754_log+0x308>)
 800f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f666:	4604      	mov	r4, r0
 800f668:	460d      	mov	r5, r1
 800f66a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f66e:	f7f0 ffeb 	bl	8000648 <__aeabi_dmul>
 800f672:	4642      	mov	r2, r8
 800f674:	464b      	mov	r3, r9
 800f676:	f7f0 fe31 	bl	80002dc <__adddf3>
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	4630      	mov	r0, r6
 800f680:	4639      	mov	r1, r7
 800f682:	f7f0 fe29 	bl	80002d8 <__aeabi_dsub>
 800f686:	4652      	mov	r2, sl
 800f688:	465b      	mov	r3, fp
 800f68a:	f7f0 fe25 	bl	80002d8 <__aeabi_dsub>
 800f68e:	4602      	mov	r2, r0
 800f690:	460b      	mov	r3, r1
 800f692:	4620      	mov	r0, r4
 800f694:	4629      	mov	r1, r5
 800f696:	e7d9      	b.n	800f64c <__ieee754_log+0x26c>
 800f698:	4602      	mov	r2, r0
 800f69a:	460b      	mov	r3, r1
 800f69c:	4650      	mov	r0, sl
 800f69e:	4659      	mov	r1, fp
 800f6a0:	f7f0 fe1a 	bl	80002d8 <__aeabi_dsub>
 800f6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6a8:	f7f0 ffce 	bl	8000648 <__aeabi_dmul>
 800f6ac:	4606      	mov	r6, r0
 800f6ae:	460f      	mov	r7, r1
 800f6b0:	2c00      	cmp	r4, #0
 800f6b2:	f43f af25 	beq.w	800f500 <__ieee754_log+0x120>
 800f6b6:	a30a      	add	r3, pc, #40	@ (adr r3, 800f6e0 <__ieee754_log+0x300>)
 800f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6c0:	f7f0 ffc2 	bl	8000648 <__aeabi_dmul>
 800f6c4:	a308      	add	r3, pc, #32	@ (adr r3, 800f6e8 <__ieee754_log+0x308>)
 800f6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	460d      	mov	r5, r1
 800f6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6d2:	e729      	b.n	800f528 <__ieee754_log+0x148>
 800f6d4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800f730 <__ieee754_log+0x350>
 800f6d8:	e698      	b.n	800f40c <__ieee754_log+0x2c>
 800f6da:	bf00      	nop
 800f6dc:	f3af 8000 	nop.w
 800f6e0:	fee00000 	.word	0xfee00000
 800f6e4:	3fe62e42 	.word	0x3fe62e42
 800f6e8:	35793c76 	.word	0x35793c76
 800f6ec:	3dea39ef 	.word	0x3dea39ef
 800f6f0:	55555555 	.word	0x55555555
 800f6f4:	3fd55555 	.word	0x3fd55555
 800f6f8:	df3e5244 	.word	0xdf3e5244
 800f6fc:	3fc2f112 	.word	0x3fc2f112
 800f700:	96cb03de 	.word	0x96cb03de
 800f704:	3fc74664 	.word	0x3fc74664
 800f708:	94229359 	.word	0x94229359
 800f70c:	3fd24924 	.word	0x3fd24924
 800f710:	55555593 	.word	0x55555593
 800f714:	3fe55555 	.word	0x3fe55555
 800f718:	d078c69f 	.word	0xd078c69f
 800f71c:	3fc39a09 	.word	0x3fc39a09
 800f720:	1d8e78af 	.word	0x1d8e78af
 800f724:	3fcc71c5 	.word	0x3fcc71c5
 800f728:	9997fa04 	.word	0x9997fa04
 800f72c:	3fd99999 	.word	0x3fd99999
	...
 800f738:	c3500000 	.word	0xc3500000
 800f73c:	43500000 	.word	0x43500000
 800f740:	7fefffff 	.word	0x7fefffff
 800f744:	3ff00000 	.word	0x3ff00000
 800f748:	3fe00000 	.word	0x3fe00000

0800f74c <_init>:
 800f74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74e:	bf00      	nop
 800f750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f752:	bc08      	pop	{r3}
 800f754:	469e      	mov	lr, r3
 800f756:	4770      	bx	lr

0800f758 <_fini>:
 800f758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75a:	bf00      	nop
 800f75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75e:	bc08      	pop	{r3}
 800f760:	469e      	mov	lr, r3
 800f762:	4770      	bx	lr
