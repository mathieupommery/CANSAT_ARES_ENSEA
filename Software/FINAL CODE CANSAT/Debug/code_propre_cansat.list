
code_propre_cansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010148  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001188  08010328  08010328  00011328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114b0  080114b0  000131e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080114b0  080114b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114b8  080114b8  000131e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114b8  080114b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080114bc  080114bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080114c0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e8  200001e8  080116a4  000131e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012d0  080116a4  000132d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024158  00000000  00000000  00013214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dcb  00000000  00000000  0003736c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  0003c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b3  00000000  00000000  0003dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246b1  00000000  00000000  0003f303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002501c  00000000  00000000  000639b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e21d7  00000000  00000000  000889d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016aba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c44  00000000  00000000  0016abec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00173830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010310 	.word	0x08010310

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08010310 	.word	0x08010310

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800107a:	2354      	movs	r3, #84	@ 0x54
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2210      	movs	r2, #16
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4838      	ldr	r0, [pc, #224]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f005 feb0 	bl	8006df8 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 8001098:	234c      	movs	r3, #76	@ 0x4c
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2211      	movs	r2, #17
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4830      	ldr	r0, [pc, #192]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f005 fea1 	bl	8006df8 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2212      	movs	r2, #18
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	4829      	ldr	r0, [pc, #164]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f005 fe92 	bl	8006df8 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2215      	movs	r2, #21
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4821      	ldr	r0, [pc, #132]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f005 fe83 	bl	8006df8 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2216      	movs	r2, #22
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	481a      	ldr	r0, [pc, #104]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f005 fe74 	bl	8006df8 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2217      	movs	r2, #23
 8001126:	21d6      	movs	r1, #214	@ 0xd6
 8001128:	4812      	ldr	r0, [pc, #72]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800112a:	f005 fe65 	bl	8006df8 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	221e      	movs	r2, #30
 8001144:	21d6      	movs	r1, #214	@ 0xd6
 8001146:	480b      	ldr	r0, [pc, #44]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001148:	f005 ff6a 	bl	8007020 <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <Init_HighPerf_Mode_6_axis+0x108>)
 8001158:	f00c f8ea 	bl	800d330 <puts>
        }
        if (status & 0x02) {
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <Init_HighPerf_Mode_6_axis+0x10c>)
 8001168:	f00c f8e2 	bl	800d330 <puts>
        }

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000033c 	.word	0x2000033c
 8001178:	08010364 	.word	0x08010364
 800117c:	08010398 	.word	0x08010398

08001180 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	@ 0x38
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030b 	add.w	r3, r7, #11
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	221e      	movs	r2, #30
 800119c:	21d6      	movs	r1, #214	@ 0xd6
 800119e:	486e      	ldr	r0, [pc, #440]	@ (8001358 <Read_sensor_data+0x1d8>)
 80011a0:	f005 ff3e 	bl	8007020 <HAL_I2C_Mem_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 80011a8:	7ffb      	ldrb	r3, [r7, #31]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <Read_sensor_data+0x32>
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	e0ce      	b.n	8001350 <Read_sensor_data+0x1d0>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <Read_sensor_data+0x46>
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0c2      	b.n	8001350 <Read_sensor_data+0x1d0>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ce:	e044      	b.n	800125a <Read_sensor_data+0xda>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	3311      	adds	r3, #17
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011e0:	7f3b      	ldrb	r3, [r7, #28]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f107 030a 	add.w	r3, r7, #10
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	21d6      	movs	r1, #214	@ 0xd6
 80011f8:	4857      	ldr	r0, [pc, #348]	@ (8001358 <Read_sensor_data+0x1d8>)
 80011fa:	f005 ff11 	bl	8007020 <HAL_I2C_Mem_Read>
 80011fe:	4603      	mov	r3, r0
 8001200:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <Read_sensor_data+0x8c>
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	e0a1      	b.n	8001350 <Read_sensor_data+0x1d0>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800120c:	7efb      	ldrb	r3, [r7, #27]
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0309 	add.w	r3, r7, #9
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	21d6      	movs	r1, #214	@ 0xd6
 8001224:	484c      	ldr	r0, [pc, #304]	@ (8001358 <Read_sensor_data+0x1d8>)
 8001226:	f005 fefb 	bl	8007020 <HAL_I2C_Mem_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <Read_sensor_data+0xb8>
 8001234:	7ffb      	ldrb	r3, [r7, #31]
 8001236:	e08b      	b.n	8001350 <Read_sensor_data+0x1d0>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001238:	7a7b      	ldrb	r3, [r7, #9]
 800123a:	b21b      	sxth	r3, r3
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7abb      	ldrb	r3, [r7, #10]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	3328      	adds	r3, #40	@ 0x28
 800124e:	443b      	add	r3, r7
 8001250:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 8001254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001256:	3301      	adds	r3, #1
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	2b02      	cmp	r3, #2
 800125e:	ddb7      	ble.n	80011d0 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	e044      	b.n	80012f0 <Read_sensor_data+0x170>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	3314      	adds	r3, #20
 800126a:	b2db      	uxtb	r3, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001270:	7fbb      	ldrb	r3, [r7, #30]
 8001272:	3301      	adds	r3, #1
 8001274:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001276:	7fbb      	ldrb	r3, [r7, #30]
 8001278:	b29a      	uxth	r2, r3
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f107 030a 	add.w	r3, r7, #10
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	21d6      	movs	r1, #214	@ 0xd6
 800128e:	4832      	ldr	r0, [pc, #200]	@ (8001358 <Read_sensor_data+0x1d8>)
 8001290:	f005 fec6 	bl	8007020 <HAL_I2C_Mem_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Read_sensor_data+0x122>
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	e056      	b.n	8001350 <Read_sensor_data+0x1d0>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80012a2:	7f7b      	ldrb	r3, [r7, #29]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	f107 0309 	add.w	r3, r7, #9
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	21d6      	movs	r1, #214	@ 0xd6
 80012ba:	4827      	ldr	r0, [pc, #156]	@ (8001358 <Read_sensor_data+0x1d8>)
 80012bc:	f005 feb0 	bl	8007020 <HAL_I2C_Mem_Read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <Read_sensor_data+0x14e>
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	e040      	b.n	8001350 <Read_sensor_data+0x1d0>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80012ce:	7a7b      	ldrb	r3, [r7, #9]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3328      	adds	r3, #40	@ 0x28
 80012e4:	443b      	add	r3, r7
 80012e6:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	3301      	adds	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	ddb7      	ble.n	8001266 <Read_sensor_data+0xe6>
	}
	data->AccelX = accel_data[0];
 80012f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	601a      	str	r2, [r3, #0]
	data->AccelY = accel_data[1];
 8001300:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001304:	461a      	mov	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	605a      	str	r2, [r3, #4]
	data->AccelZ = accel_data[2];
 800130a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800130e:	461a      	mov	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]
	data->GyroX = gyro_data[0];
 8001314:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001318:	461a      	mov	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 800131e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 8001328:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800132c:	461a      	mov	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 8001332:	f000 f815 	bl	8001360 <Read_temp>
 8001336:	ec51 0b10 	vmov	r0, r1, d0
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <Read_sensor_data+0x1dc>)
 8001340:	f7fe ffca 	bl	80002d8 <__aeabi_dsub>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3728      	adds	r7, #40	@ 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000033c 	.word	0x2000033c
 800135c:	40210000 	.word	0x40210000

08001360 <Read_temp>:

double Read_temp() {
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	2220      	movs	r2, #32
 8001378:	21d6      	movs	r1, #214	@ 0xd6
 800137a:	481f      	ldr	r0, [pc, #124]	@ (80013f8 <Read_temp+0x98>)
 800137c:	f005 fe50 	bl	8007020 <HAL_I2C_Mem_Read>
 8001380:	4603      	mov	r3, r0
 8001382:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	2301      	movs	r3, #1
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	1dbb      	adds	r3, r7, #6
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	2221      	movs	r2, #33	@ 0x21
 8001396:	21d6      	movs	r1, #214	@ 0xd6
 8001398:	4817      	ldr	r0, [pc, #92]	@ (80013f8 <Read_temp+0x98>)
 800139a:	f005 fe41 	bl	8007020 <HAL_I2C_Mem_Read>
 800139e:	4603      	mov	r3, r0
 80013a0:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 80013b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8dc 	bl	8000574 <__aeabi_i2d>
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <Read_temp+0x9c>)
 80013c2:	f7ff fa6b 	bl	800089c <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <Read_temp+0xa0>)
 80013d4:	f7fe ff82 	bl	80002dc <__adddf3>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 80013e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80013e8:	eeb0 0a47 	vmov.f32	s0, s14
 80013ec:	eef0 0a67 	vmov.f32	s1, s15
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000033c 	.word	0x2000033c
 80013fc:	40700000 	.word	0x40700000
 8001400:	40390000 	.word	0x40390000

08001404 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800140a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2220      	movs	r2, #32
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f00c f89d 	bl	800d55c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001422:	4b40      	ldr	r3, [pc, #256]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001424:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001428:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800142a:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <MX_ADC1_Init+0x120>)
 800142c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001430:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001432:	4b3c      	ldr	r3, [pc, #240]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001438:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <MX_ADC1_Init+0x120>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800143e:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001444:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001446:	2201      	movs	r2, #1
 8001448:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800144a:	4b36      	ldr	r3, [pc, #216]	@ (8001524 <MX_ADC1_Init+0x120>)
 800144c:	2208      	movs	r2, #8
 800144e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001450:	4b34      	ldr	r3, [pc, #208]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001452:	2200      	movs	r2, #0
 8001454:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001456:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001458:	2201      	movs	r2, #1
 800145a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800145c:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <MX_ADC1_Init+0x120>)
 800145e:	2203      	movs	r2, #3
 8001460:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001462:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146a:	4b2e      	ldr	r3, [pc, #184]	@ (8001524 <MX_ADC1_Init+0x120>)
 800146c:	2200      	movs	r2, #0
 800146e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001470:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001472:	2200      	movs	r2, #0
 8001474:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001476:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800147e:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001480:	2200      	movs	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <MX_ADC1_Init+0x120>)
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800148c:	4825      	ldr	r0, [pc, #148]	@ (8001524 <MX_ADC1_Init+0x120>)
 800148e:	f003 fb6f 	bl	8004b70 <HAL_ADC_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001498:	f001 f88a 	bl	80025b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	481f      	ldr	r0, [pc, #124]	@ (8001524 <MX_ADC1_Init+0x120>)
 80014a8:	f004 fd34 	bl	8005f14 <HAL_ADCEx_MultiModeConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014b2:	f001 f87d 	bl	80025b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <MX_ADC1_Init+0x124>)
 80014b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ba:	2306      	movs	r3, #6
 80014bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014be:	2307      	movs	r3, #7
 80014c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014c2:	237f      	movs	r3, #127	@ 0x7f
 80014c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014c6:	2304      	movs	r3, #4
 80014c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4814      	ldr	r0, [pc, #80]	@ (8001524 <MX_ADC1_Init+0x120>)
 80014d4:	f003 ffbc 	bl	8005450 <HAL_ADC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014de:	f001 f867 	bl	80025b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_ADC1_Init+0x128>)
 80014e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014e6:	230c      	movs	r3, #12
 80014e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_ADC1_Init+0x120>)
 80014f0:	f003 ffae 	bl	8005450 <HAL_ADC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80014fa:	f001 f859 	bl	80025b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <MX_ADC1_Init+0x12c>)
 8001500:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001502:	2312      	movs	r3, #18
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	@ (8001524 <MX_ADC1_Init+0x120>)
 800150c:	f003 ffa0 	bl	8005450 <HAL_ADC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001516:	f001 f84b 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	@ 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000204 	.word	0x20000204
 8001528:	cb840000 	.word	0xcb840000
 800152c:	c3210000 	.word	0xc3210000
 8001530:	0c900008 	.word	0x0c900008

08001534 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b09a      	sub	sp, #104	@ 0x68
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	2244      	movs	r2, #68	@ 0x44
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f00c f801 	bl	800d55c <memset>
  if(adcHandle->Instance==ADC1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001562:	d167      	bne.n	8001634 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001564:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001568:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800156a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800156e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4618      	mov	r0, r3
 8001576:	f006 ffa5 	bl	80084c4 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001580:	f001 f816 	bl	80025b0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001584:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <HAL_ADC_MspInit+0x108>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001588:	4a2c      	ldr	r2, [pc, #176]	@ (800163c <HAL_ADC_MspInit+0x108>)
 800158a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800158e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001590:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <HAL_ADC_MspInit+0x108>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b27      	ldr	r3, [pc, #156]	@ (800163c <HAL_ADC_MspInit+0x108>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	4a26      	ldr	r2, [pc, #152]	@ (800163c <HAL_ADC_MspInit+0x108>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a8:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_ADC_MspInit+0x108>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b4:	2304      	movs	r3, #4
 80015b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b8:	2303      	movs	r3, #3
 80015ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ca:	f005 f995 	bl	80068f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 80015d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <HAL_ADC_MspInit+0x110>)
 80015d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 80015d6:	2205      	movs	r2, #5
 80015d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 80015ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 80015f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015fc:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 80015fe:	2220      	movs	r2, #32
 8001600:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001608:	480d      	ldr	r0, [pc, #52]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 800160a:	f004 fe37 	bl	800627c <HAL_DMA_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001614:	f000 ffcc 	bl	80025b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 800161c:	655a      	str	r2, [r3, #84]	@ 0x54
 800161e:	4a08      	ldr	r2, [pc, #32]	@ (8001640 <HAL_ADC_MspInit+0x10c>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	2012      	movs	r0, #18
 800162a:	f004 fdf2 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800162e:	2012      	movs	r0, #18
 8001630:	f004 fe09 	bl	8006246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001634:	bf00      	nop
 8001636:	3768      	adds	r7, #104	@ 0x68
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	20000270 	.word	0x20000270
 8001644:	4002001c 	.word	0x4002001c

08001648 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800165a:	f040 8097 	bne.w	800178c <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 800165e:	4b52      	ldr	r3, [pc, #328]	@ (80017a8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff86 	bl	8000574 <__aeabi_i2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	a14a      	add	r1, pc, #296	@ (adr r1, 8001798 <HAL_ADC_ConvCpltCallback+0x150>)
 800166e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001672:	f7ff f913 	bl	800089c <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff fadb 	bl	8000c38 <__aeabi_d2f>
 8001682:	4603      	mov	r3, r0
 8001684:	4a49      	ldr	r2, [pc, #292]	@ (80017ac <HAL_ADC_ConvCpltCallback+0x164>)
 8001686:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001688:	4b49      	ldr	r3, [pc, #292]	@ (80017b0 <HAL_ADC_ConvCpltCallback+0x168>)
 800168a:	ed93 7a00 	vldr	s14, [r3]
 800168e:	4b49      	ldr	r3, [pc, #292]	@ (80017b4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	ee17 0a90 	vmov	r0, s15
 800169c:	f7fe ff7c 	bl	8000598 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	f04f 0000 	mov.w	r0, #0
 80016a8:	4943      	ldr	r1, [pc, #268]	@ (80017b8 <HAL_ADC_ConvCpltCallback+0x170>)
 80016aa:	f7ff f8f7 	bl	800089c <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4690      	mov	r8, r2
 80016b4:	4699      	mov	r9, r3
 80016b6:	4b3c      	ldr	r3, [pc, #240]	@ (80017a8 <HAL_ADC_ConvCpltCallback+0x160>)
 80016b8:	885b      	ldrh	r3, [r3, #2]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff5a 	bl	8000574 <__aeabi_i2d>
 80016c0:	4604      	mov	r4, r0
 80016c2:	460d      	mov	r5, r1
 80016c4:	4b39      	ldr	r3, [pc, #228]	@ (80017ac <HAL_ADC_ConvCpltCallback+0x164>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff65 	bl	8000598 <__aeabi_f2d>
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b3a      	ldr	r3, [pc, #232]	@ (80017bc <HAL_ADC_ConvCpltCallback+0x174>)
 80016d4:	f7ff f8e2 	bl	800089c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe ffb2 	bl	8000648 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	461d      	mov	r5, r3
 80016ec:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <HAL_ADC_ConvCpltCallback+0x16c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff51 	bl	8000598 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7fe fdeb 	bl	80002d8 <__aeabi_dsub>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4640      	mov	r0, r8
 8001708:	4649      	mov	r1, r9
 800170a:	f7fe ff9d 	bl	8000648 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff fa8f 	bl	8000c38 <__aeabi_d2f>
 800171a:	ee07 0a10 	vmov	s14, r0
 800171e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001726:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <HAL_ADC_ConvCpltCallback+0x178>)
 8001728:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <HAL_ADC_ConvCpltCallback+0x160>)
 800172e:	88db      	ldrh	r3, [r3, #6]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff1f 	bl	8000574 <__aeabi_i2d>
 8001736:	a31a      	add	r3, pc, #104	@ (adr r3, 80017a0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7ff f8ae 	bl	800089c <__aeabi_ddiv>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <HAL_ADC_ConvCpltCallback+0x174>)
 800174e:	f7fe ff7b 	bl	8000648 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4614      	mov	r4, r2
 8001758:	461d      	mov	r5, r3
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <HAL_ADC_ConvCpltCallback+0x164>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ff1a 	bl	8000598 <__aeabi_f2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe ff6c 	bl	8000648 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff fa5e 	bl	8000c38 <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	4a11      	ldr	r2, [pc, #68]	@ (80017c4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001780:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 8001782:	2203      	movs	r2, #3
 8001784:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001786:	4810      	ldr	r0, [pc, #64]	@ (80017c8 <HAL_ADC_ConvCpltCallback+0x180>)
 8001788:	f003 fb76 	bl	8004e78 <HAL_ADC_Start_DMA>

	}

}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001796:	bf00      	nop
 8001798:	d70a3d70 	.word	0xd70a3d70
 800179c:	40b36323 	.word	0x40b36323
 80017a0:	00000000 	.word	0x00000000
 80017a4:	40affe00 	.word	0x40affe00
 80017a8:	20000394 	.word	0x20000394
 80017ac:	200003a0 	.word	0x200003a0
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004
 80017b8:	40590000 	.word	0x40590000
 80017bc:	40080000 	.word	0x40080000
 80017c0:	2000039c 	.word	0x2000039c
 80017c4:	200003a4 	.word	0x200003a4
 80017c8:	20000204 	.word	0x20000204
 80017cc:	00000000 	.word	0x00000000

080017d0 <bmp581_read_precise_normal>:
}




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b08e      	sub	sp, #56	@ 0x38
 80017d4:	af04      	add	r7, sp, #16
 80017d6:	6078      	str	r0, [r7, #4]
		int check=0;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
		int32_t intbufferpres=0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]

		double tmoy=0;
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
//			check=1;
//		}
//		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_MSB, 1, &recarray[5], 1, 100)!=HAL_OK){
//			check=1;
//		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 80017f0:	2364      	movs	r3, #100	@ 0x64
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	2306      	movs	r3, #6
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	221d      	movs	r2, #29
 8001802:	218f      	movs	r1, #143	@ 0x8f
 8001804:	4866      	ldr	r0, [pc, #408]	@ (80019a0 <bmp581_read_precise_normal+0x1d0>)
 8001806:	f005 fc0b 	bl	8007020 <HAL_I2C_Mem_Read>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <bmp581_read_precise_normal+0x44>
					check=1;
 8001810:	2301      	movs	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
				}


		if(check==0){
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 80a1 	bne.w	800195e <bmp581_read_precise_normal+0x18e>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 800181c:	7abb      	ldrb	r3, [r7, #10]
 800181e:	041a      	lsls	r2, r3, #16
 8001820:	7a7b      	ldrb	r3, [r7, #9]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	4313      	orrs	r3, r2
 8001826:	7a3a      	ldrb	r2, [r7, #8]
 8001828:	4313      	orrs	r3, r2
 800182a:	623b      	str	r3, [r7, #32]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	041a      	lsls	r2, r3, #16
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	4313      	orrs	r3, r2
 8001836:	7afa      	ldrb	r2, [r7, #11]
 8001838:	4313      	orrs	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]
		bmptemp=(double)intbuffertemp/65536.0;
 800183c:	6a38      	ldr	r0, [r7, #32]
 800183e:	f7fe fe99 	bl	8000574 <__aeabi_i2d>
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b57      	ldr	r3, [pc, #348]	@ (80019a4 <bmp581_read_precise_normal+0x1d4>)
 8001848:	f7ff f828 	bl	800089c <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4955      	ldr	r1, [pc, #340]	@ (80019a8 <bmp581_read_precise_normal+0x1d8>)
 8001852:	e9c1 2300 	strd	r2, r3, [r1]
		bmppress=(double) intbufferpres/64.0;
 8001856:	69f8      	ldr	r0, [r7, #28]
 8001858:	f7fe fe8c 	bl	8000574 <__aeabi_i2d>
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b52      	ldr	r3, [pc, #328]	@ (80019ac <bmp581_read_precise_normal+0x1dc>)
 8001862:	f7ff f81b 	bl	800089c <__aeabi_ddiv>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4951      	ldr	r1, [pc, #324]	@ (80019b0 <bmp581_read_precise_normal+0x1e0>)
 800186c:	e9c1 2300 	strd	r2, r3, [r1]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		bmpalt=(double) ((8.314*293.15)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 8001870:	4b4f      	ldr	r3, [pc, #316]	@ (80019b0 <bmp581_read_precise_normal+0x1e0>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	a13e      	add	r1, pc, #248	@ (adr r1, 8001970 <bmp581_read_precise_normal+0x1a0>)
 8001878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800187c:	f7ff f80e 	bl	800089c <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	ec43 2b17 	vmov	d7, r2, r3
 8001888:	eeb0 0a47 	vmov.f32	s0, s14
 800188c:	eef0 0a67 	vmov.f32	s1, s15
 8001890:	f00d fe1a 	bl	800f4c8 <log>
 8001894:	ec51 0b10 	vmov	r0, r1, d0
 8001898:	a337      	add	r3, pc, #220	@ (adr r3, 8001978 <bmp581_read_precise_normal+0x1a8>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fed3 	bl	8000648 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4943      	ldr	r1, [pc, #268]	@ (80019b4 <bmp581_read_precise_normal+0x1e4>)
 80018a8:	e9c1 2300 	strd	r2, r3, [r1]
		tmoy=(double) 293.15+bmptemp+(0.0065*bmpalt)/2;
 80018ac:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <bmp581_read_precise_normal+0x1d8>)
 80018ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b2:	a333      	add	r3, pc, #204	@ (adr r3, 8001980 <bmp581_read_precise_normal+0x1b0>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fd10 	bl	80002dc <__adddf3>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	4b3b      	ldr	r3, [pc, #236]	@ (80019b4 <bmp581_read_precise_normal+0x1e4>)
 80018c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ca:	a32f      	add	r3, pc, #188	@ (adr r3, 8001988 <bmp581_read_precise_normal+0x1b8>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe feba 	bl	8000648 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018e4:	f7fe ffda 	bl	800089c <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe fcf4 	bl	80002dc <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		bmpalt=(double) ((8.314*tmoy)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 80018fc:	a324      	add	r3, pc, #144	@ (adr r3, 8001990 <bmp581_read_precise_normal+0x1c0>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001906:	f7fe fe9f 	bl	8000648 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	a321      	add	r3, pc, #132	@ (adr r3, 8001998 <bmp581_read_precise_normal+0x1c8>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe ffc0 	bl	800089c <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4614      	mov	r4, r2
 8001922:	461d      	mov	r5, r3
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <bmp581_read_precise_normal+0x1e0>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	a111      	add	r1, pc, #68	@ (adr r1, 8001970 <bmp581_read_precise_normal+0x1a0>)
 800192c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001930:	f7fe ffb4 	bl	800089c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	ec43 2b17 	vmov	d7, r2, r3
 800193c:	eeb0 0a47 	vmov.f32	s0, s14
 8001940:	eef0 0a67 	vmov.f32	s1, s15
 8001944:	f00d fdc0 	bl	800f4c8 <log>
 8001948:	ec53 2b10 	vmov	r2, r3, d0
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fe7a 	bl	8000648 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4916      	ldr	r1, [pc, #88]	@ (80019b4 <bmp581_read_precise_normal+0x1e4>)
 800195a:	e9c1 2300 	strd	r2, r3, [r1]



		}

		return check;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	b2db      	uxtb	r3, r3
}
 8001962:	4618      	mov	r0, r3
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bdb0      	pop	{r4, r5, r7, pc}
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w
 8001970:	00000000 	.word	0x00000000
 8001974:	40f8bcd0 	.word	0x40f8bcd0
 8001978:	81a9275b 	.word	0x81a9275b
 800197c:	40c0c254 	.word	0x40c0c254
 8001980:	66666666 	.word	0x66666666
 8001984:	40725266 	.word	0x40725266
 8001988:	76c8b439 	.word	0x76c8b439
 800198c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001990:	9ba5e354 	.word	0x9ba5e354
 8001994:	4020a0c4 	.word	0x4020a0c4
 8001998:	50527f89 	.word	0x50527f89
 800199c:	3fd22db5 	.word	0x3fd22db5
 80019a0:	200002e8 	.word	0x200002e8
 80019a4:	40f00000 	.word	0x40f00000
 80019a8:	200002d0 	.word	0x200002d0
 80019ac:	40500000 	.word	0x40500000
 80019b0:	200002d8 	.word	0x200002d8
 80019b4:	200002e0 	.word	0x200002e0

080019b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019be:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <MX_DMA_Init+0x80>)
 80019c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a38 <MX_DMA_Init+0x80>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80019ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <MX_DMA_Init+0x80>)
 80019cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d6:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <MX_DMA_Init+0x80>)
 80019d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019da:	4a17      	ldr	r2, [pc, #92]	@ (8001a38 <MX_DMA_Init+0x80>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <MX_DMA_Init+0x80>)
 80019e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	200b      	movs	r0, #11
 80019f4:	f004 fc0d 	bl	8006212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019f8:	200b      	movs	r0, #11
 80019fa:	f004 fc24 	bl	8006246 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	200c      	movs	r0, #12
 8001a04:	f004 fc05 	bl	8006212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a08:	200c      	movs	r0, #12
 8001a0a:	f004 fc1c 	bl	8006246 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	200d      	movs	r0, #13
 8001a14:	f004 fbfd 	bl	8006212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a18:	200d      	movs	r0, #13
 8001a1a:	f004 fc14 	bl	8006246 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	200f      	movs	r0, #15
 8001a24:	f004 fbf5 	bl	8006212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a28:	200f      	movs	r0, #15
 8001a2a:	f004 fc0c 	bl	8006246 <HAL_NVIC_EnableIRQ>

}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000

08001a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a52:	4b3a      	ldr	r3, [pc, #232]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	4a39      	ldr	r2, [pc, #228]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a58:	f043 0320 	orr.w	r3, r3, #32
 8001a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5e:	4b37      	ldr	r3, [pc, #220]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b34      	ldr	r3, [pc, #208]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	4a33      	ldr	r2, [pc, #204]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a76:	4b31      	ldr	r3, [pc, #196]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	4a2d      	ldr	r2, [pc, #180]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	4a27      	ldr	r2, [pc, #156]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa6:	4b25      	ldr	r3, [pc, #148]	@ (8001b3c <MX_GPIO_Init+0x100>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001ab8:	4821      	ldr	r0, [pc, #132]	@ (8001b40 <MX_GPIO_Init+0x104>)
 8001aba:	f005 f8b7 	bl	8006c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ac2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad6:	f004 ff0f 	bl	80068f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 SDDETECT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SDDETECT_Pin;
 8001ada:	2306      	movs	r3, #6
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ade:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4814      	ldr	r0, [pc, #80]	@ (8001b40 <MX_GPIO_Init+0x104>)
 8001af0:	f004 ff02 	bl	80068f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 8001af4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <MX_GPIO_Init+0x104>)
 8001b0e:	f004 fef3 	bl	80068f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2007      	movs	r0, #7
 8001b18:	f004 fb7b 	bl	8006212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b1c:	2007      	movs	r0, #7
 8001b1e:	f004 fb92 	bl	8006246 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	200a      	movs	r0, #10
 8001b28:	f004 fb73 	bl	8006212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	f004 fb8a 	bl	8006246 <HAL_NVIC_EnableIRQ>

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	@ 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48000400 	.word	0x48000400

08001b44 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bbc <MX_I2C1_Init+0x78>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B182BE;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b50:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <MX_I2C1_Init+0x7c>)
 8001b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b7e:	480e      	ldr	r0, [pc, #56]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b80:	f005 f89e 	bl	8006cc0 <HAL_I2C_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b8a:	f000 fd11 	bl	80025b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4809      	ldr	r0, [pc, #36]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001b92:	f005 fe21 	bl	80077d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b9c:	f000 fd08 	bl	80025b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_I2C1_Init+0x74>)
 8001ba4:	f005 fe63 	bl	800786e <HAL_I2CEx_ConfigDigitalFilter>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bae:	f000 fcff 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200002e8 	.word	0x200002e8
 8001bbc:	40005400 	.word	0x40005400
 8001bc0:	20b182be 	.word	0x20b182be

08001bc4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001bca:	4a1c      	ldr	r2, [pc, #112]	@ (8001c3c <MX_I2C3_Init+0x78>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B182BE;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c40 <MX_I2C3_Init+0x7c>)
 8001bd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bda:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be0:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bfe:	480e      	ldr	r0, [pc, #56]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001c00:	f005 f85e 	bl	8006cc0 <HAL_I2C_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001c0a:	f000 fcd1 	bl	80025b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4809      	ldr	r0, [pc, #36]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001c12:	f005 fde1 	bl	80077d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001c1c:	f000 fcc8 	bl	80025b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c20:	2100      	movs	r1, #0
 8001c22:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <MX_I2C3_Init+0x74>)
 8001c24:	f005 fe23 	bl	800786e <HAL_I2CEx_ConfigDigitalFilter>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001c2e:	f000 fcbf 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000033c 	.word	0x2000033c
 8001c3c:	40007800 	.word	0x40007800
 8001c40:	20b182be 	.word	0x20b182be

08001c44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09e      	sub	sp, #120	@ 0x78
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 0320 	add.w	r3, r7, #32
 8001c60:	2244      	movs	r2, #68	@ 0x44
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00b fc79 	bl	800d55c <memset>
  if(i2cHandle->Instance==I2C1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8001de0 <HAL_I2C_MspInit+0x19c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d155      	bne.n	8001d20 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c74:	2340      	movs	r3, #64	@ 0x40
 8001c76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7c:	f107 0320 	add.w	r3, r7, #32
 8001c80:	4618      	mov	r0, r3
 8001c82:	f006 fc1f 	bl	80084c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c8c:	f000 fc90 	bl	80025b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b54      	ldr	r3, [pc, #336]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c94:	4a53      	ldr	r2, [pc, #332]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9c:	4b51      	ldr	r3, [pc, #324]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cac:	4a4d      	ldr	r2, [pc, #308]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cc4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc6:	2312      	movs	r3, #18
 8001cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce0:	f004 fe0a 	bl	80068f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ce8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cea:	2312      	movs	r3, #18
 8001cec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4839      	ldr	r0, [pc, #228]	@ (8001de8 <HAL_I2C_MspInit+0x1a4>)
 8001d02:	f004 fdf9 	bl	80068f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d06:	4b37      	ldr	r3, [pc, #220]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0a:	4a36      	ldr	r2, [pc, #216]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001d0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d12:	4b34      	ldr	r3, [pc, #208]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d1e:	e05a      	b.n	8001dd6 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a31      	ldr	r2, [pc, #196]	@ (8001dec <HAL_I2C_MspInit+0x1a8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d155      	bne.n	8001dd6 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d34:	f107 0320 	add.w	r3, r7, #32
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f006 fbc3 	bl	80084c4 <HAL_RCCEx_PeriphCLKConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8001d44:	f000 fc34 	bl	80025b0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	4a25      	ldr	r2, [pc, #148]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d60:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d64:	4a1f      	ldr	r2, [pc, #124]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d7c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7e:	2312      	movs	r3, #18
 8001d80:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d98:	f004 fdae 	bl	80068f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001da0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da2:	2312      	movs	r3, #18
 8001da4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001dae:	2308      	movs	r3, #8
 8001db0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001db6:	4619      	mov	r1, r3
 8001db8:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <HAL_I2C_MspInit+0x1ac>)
 8001dba:	f004 fd9d 	bl	80068f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	4a08      	ldr	r2, [pc, #32]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001dc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_I2C_MspInit+0x1a0>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
}
 8001dd6:	bf00      	nop
 8001dd8:	3778      	adds	r7, #120	@ 0x78
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40005400 	.word	0x40005400
 8001de4:	40021000 	.word	0x40021000
 8001de8:	48000400 	.word	0x48000400
 8001dec:	40007800 	.word	0x40007800
 8001df0:	48000800 	.word	0x48000800

08001df4 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8001dfa:	480d      	ldr	r0, [pc, #52]	@ (8001e30 <LED_Init+0x3c>)
 8001dfc:	f006 fe14 	bl	8008a28 <HAL_TIM_PWM_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001e04:	2300      	movs	r3, #0
 8001e06:	80fb      	strh	r3, [r7, #6]
 8001e08:	e006      	b.n	8001e18 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	4a09      	ldr	r2, [pc, #36]	@ (8001e34 <LED_Init+0x40>)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	3301      	adds	r3, #1
 8001e16:	80fb      	strh	r3, [r7, #6]
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001e1e:	d9f4      	bls.n	8001e0a <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <LED_Init+0x44>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8001e26:	797b      	ldrb	r3, [r7, #5]




}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000e08 	.word	0x20000e08
 8001e34:	20000788 	.word	0x20000788
 8001e38:	200008c1 	.word	0x200008c1

08001e3c <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8001e3c:	b490      	push	{r4, r7}
 8001e3e:	b08a      	sub	sp, #40	@ 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4604      	mov	r4, r0
 8001e44:	4608      	mov	r0, r1
 8001e46:	4611      	mov	r1, r2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71bb      	strb	r3, [r7, #6]
 8001e52:	460b      	mov	r3, r1
 8001e54:	717b      	strb	r3, [r7, #5]
 8001e56:	4613      	mov	r3, r2
 8001e58:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8001e5e:	79bb      	ldrb	r3, [r7, #6]
 8001e60:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8001e66:	797b      	ldrb	r3, [r7, #5]
 8001e68:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8001e6a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e6e:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8001e70:	793b      	ldrb	r3, [r7, #4]
 8001e72:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8001e74:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e78:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
 8001e7e:	e007      	b.n	8001e90 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8001e80:	4a35      	ldr	r2, [pc, #212]	@ (8001f58 <LED_Setcolour+0x11c>)
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	4413      	add	r3, r2
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001e96:	ddf3      	ble.n	8001e80 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8001e98:	2300      	movs	r3, #0
 8001e9a:	77fb      	strb	r3, [r7, #31]
 8001e9c:	e032      	b.n	8001f04 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	77bb      	strb	r3, [r7, #30]
 8001ea2:	e029      	b.n	8001ef8 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	e020      	b.n	8001eec <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8001eaa:	7ffa      	ldrb	r2, [r7, #31]
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	441a      	add	r2, r3
 8001eb2:	7fbb      	ldrb	r3, [r7, #30]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3328      	adds	r3, #40	@ 0x28
 8001eb8:	443b      	add	r3, r7
 8001eba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa42 f303 	asr.w	r3, r2, r3
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d004      	beq.n	8001ed8 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8001ece:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ed0:	4a21      	ldr	r2, [pc, #132]	@ (8001f58 <LED_Setcolour+0x11c>)
 8001ed2:	215a      	movs	r1, #90	@ 0x5a
 8001ed4:	54d1      	strb	r1, [r2, r3]
 8001ed6:	e003      	b.n	8001ee0 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8001ed8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001eda:	4a1f      	ldr	r2, [pc, #124]	@ (8001f58 <LED_Setcolour+0x11c>)
 8001edc:	211e      	movs	r1, #30
 8001ede:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8001ee0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b07      	cmp	r3, #7
 8001ef0:	dddb      	ble.n	8001eaa <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 8001ef2:	7fbb      	ldrb	r3, [r7, #30]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	77bb      	strb	r3, [r7, #30]
 8001ef8:	7fbb      	ldrb	r3, [r7, #30]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d9d2      	bls.n	8001ea4 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	3301      	adds	r3, #1
 8001f02:	77fb      	strb	r3, [r7, #31]
 8001f04:	7ffb      	ldrb	r3, [r7, #31]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d9c9      	bls.n	8001e9e <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e009      	b.n	8001f24 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8001f10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f12:	4a11      	ldr	r2, [pc, #68]	@ (8001f58 <LED_Setcolour+0x11c>)
 8001f14:	2100      	movs	r1, #0
 8001f16:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8001f18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f2a:	dbf1      	blt.n	8001f10 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e009      	b.n	8001f46 <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8001f32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f34:	4a08      	ldr	r2, [pc, #32]	@ (8001f58 <LED_Setcolour+0x11c>)
 8001f36:	2100      	movs	r1, #0
 8001f38:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8001f3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	3301      	adds	r3, #1
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	ddf2      	ble.n	8001f32 <LED_Setcolour+0xf6>
		}

}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3728      	adds	r7, #40	@ 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc90      	pop	{r4, r7}
 8001f56:	4770      	bx	lr
 8001f58:	20000788 	.word	0x20000788

08001f5c <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8001f62:	f240 1339 	movw	r3, #313	@ 0x139
 8001f66:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <LED_Update+0x28>)
 8001f68:	2104      	movs	r1, #4
 8001f6a:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <LED_Update+0x2c>)
 8001f6c:	f006 febe 	bl	8008cec <HAL_TIM_PWM_Start_DMA>
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]

	if(halStatus=HAL_OK){
 8001f74:	2300      	movs	r3, #0
 8001f76:	71fb      	strb	r3, [r7, #7]
		DMA_COMPLETE_FLAG=0;
	}


	return halStatus;
 8001f78:	79fb      	ldrb	r3, [r7, #7]

}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000788 	.word	0x20000788
 8001f88:	20000e08 	.word	0x20000e08

08001f8c <LED_Callback>:



void LED_Callback(){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8001f90:	2104      	movs	r1, #4
 8001f92:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <LED_Callback+0x18>)
 8001f94:	f007 f8c2 	bl	800911c <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <LED_Callback+0x1c>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]


}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000e08 	.word	0x20000e08
 8001fa8:	200008c1 	.word	0x200008c1

08001fac <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4){
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d147      	bne.n	800204c <HAL_GPIO_EXTI_Callback+0xa0>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)== GPIO_PIN_SET){
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc2:	f004 fe1b 	bl	8006bfc <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d109      	bne.n	8001fe0 <HAL_GPIO_EXTI_Callback+0x34>

						gros_btn_time=0;
 8001fcc:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
						tbtn1=HAL_GetTick();
 8001fd2:	f002 fb5f 	bl	8004694 <HAL_GetTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_GPIO_EXTI_Callback+0xac>)
 8001fdc:	601a      	str	r2, [r3, #0]
//	if(GPIO_Pin==GPIO_PIN_0){
//		flag_drop=1;
//
//		}

	}
 8001fde:	e035      	b.n	800204c <HAL_GPIO_EXTI_Callback+0xa0>
						gros_btn_time=(HAL_GetTick()-tbtn1);
 8001fe0:	f002 fb58 	bl	8004694 <HAL_GetTick>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <HAL_GPIO_EXTI_Callback+0xac>)
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001ff0:	601a      	str	r2, [r3, #0]
		if(gros_btn_time<=380){
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 8001ffa:	dc04      	bgt.n	8002006 <HAL_GPIO_EXTI_Callback+0x5a>
			lock_mecanism();
 8001ffc:	f000 fec4 	bl	8002d88 <lock_mecanism>
			gros_btn_time=0;
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
					if(gros_btn_time>=400 && gros_btn_time<=2000){
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800200e:	db09      	blt.n	8002024 <HAL_GPIO_EXTI_Callback+0x78>
 8002010:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002018:	dc04      	bgt.n	8002024 <HAL_GPIO_EXTI_Callback+0x78>
						release_mecanism();
 800201a:	f000 fea7 	bl	8002d6c <release_mecanism>
						gros_btn_time=0;
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
					if(gros_btn_time>=4000){
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800202c:	db0e      	blt.n	800204c <HAL_GPIO_EXTI_Callback+0xa0>
						hauteur_Initiale=myDatabmp581.altitude;
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_GPIO_EXTI_Callback+0xb0>)
 8002030:	edd3 7a05 	vldr	s15, [r3, #20]
 8002034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002038:	ee17 2a90 	vmov	r2, s15
 800203c:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <HAL_GPIO_EXTI_Callback+0xb4>)
 800203e:	601a      	str	r2, [r3, #0]
						flag_calib=1;
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]
						gros_btn_time=0;
 8002046:	4b03      	ldr	r3, [pc, #12]	@ (8002054 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
	}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200008c4 	.word	0x200008c4
 8002058:	20000390 	.word	0x20000390
 800205c:	20000770 	.word	0x20000770
 8002060:	200008d0 	.word	0x200008d0
 8002064:	200008d4 	.word	0x200008d4

08002068 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8002070:	f7ff ff8c 	bl	8001f8c <LED_Callback>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	0000      	movs	r0, r0
	...

08002080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002086:	f002 faa0 	bl	80045ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208a:	f000 fa47 	bl	800251c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800208e:	f7ff fcd5 	bl	8001a3c <MX_GPIO_Init>
  MX_DMA_Init();
 8002092:	f7ff fc91 	bl	80019b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002096:	f7ff f9b5 	bl	8001404 <MX_ADC1_Init>
  MX_I2C1_Init();
 800209a:	f7ff fd53 	bl	8001b44 <MX_I2C1_Init>
  MX_I2C3_Init();
 800209e:	f7ff fd91 	bl	8001bc4 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80020a2:	f002 f81b 	bl	80040dc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80020a6:	f002 f863 	bl	8004170 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80020aa:	f001 fe21 	bl	8003cf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80020ae:	f001 fe97 	bl	8003de0 <MX_TIM4_Init>
  MX_TIM6_Init();
 80020b2:	f001 fee3 	bl	8003e7c <MX_TIM6_Init>
  MX_TIM2_Init();
 80020b6:	f001 fda5 	bl	8003c04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 80020ba:	f000 fead 	bl	8002e18 <ssd1306_Init>
  ssd1306_Fill(Black);
 80020be:	2000      	movs	r0, #0
 80020c0:	f000 ff14 	bl	8002eec <ssd1306_Fill>
  ssd1306_SetCursor(32, 40);
 80020c4:	2128      	movs	r1, #40	@ 0x28
 80020c6:	2020      	movs	r0, #32
 80020c8:	f001 f852 	bl	8003170 <ssd1306_SetCursor>
  ssd1306_WriteString("Init...", Font_7x10, White);
 80020cc:	4ac2      	ldr	r2, [pc, #776]	@ (80023d8 <main+0x358>)
 80020ce:	2301      	movs	r3, #1
 80020d0:	ca06      	ldmia	r2, {r1, r2}
 80020d2:	48c2      	ldr	r0, [pc, #776]	@ (80023dc <main+0x35c>)
 80020d4:	f001 f826 	bl	8003124 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80020d8:	f000 ff20 	bl	8002f1c <ssd1306_UpdateScreen>

  if( HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK){
 80020dc:	48c0      	ldr	r0, [pc, #768]	@ (80023e0 <main+0x360>)
 80020de:	f006 fc39 	bl	8008954 <HAL_TIM_Base_Start_IT>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d011      	beq.n	800210c <main+0x8c>
	  ssd1306_Fill(Black);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f000 feff 	bl	8002eec <ssd1306_Fill>
	  ssd1306_WriteString("tim4pbm", Font_7x10, White);
 80020ee:	4aba      	ldr	r2, [pc, #744]	@ (80023d8 <main+0x358>)
 80020f0:	2301      	movs	r3, #1
 80020f2:	ca06      	ldmia	r2, {r1, r2}
 80020f4:	48bb      	ldr	r0, [pc, #748]	@ (80023e4 <main+0x364>)
 80020f6:	f001 f815 	bl	8003124 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80020fa:	f000 ff0f 	bl	8002f1c <ssd1306_UpdateScreen>
	  HAL_Delay(500);
 80020fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002102:	f002 fad3 	bl	80046ac <HAL_Delay>
	  pbmseeker=1;
 8002106:	4bb8      	ldr	r3, [pc, #736]	@ (80023e8 <main+0x368>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]


  }

  if( HAL_TIM_Base_Start_IT(&htim6)!=HAL_OK){
 800210c:	48b7      	ldr	r0, [pc, #732]	@ (80023ec <main+0x36c>)
 800210e:	f006 fc21 	bl	8008954 <HAL_TIM_Base_Start_IT>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d011      	beq.n	800213c <main+0xbc>
	  ssd1306_Fill(Black);
 8002118:	2000      	movs	r0, #0
 800211a:	f000 fee7 	bl	8002eec <ssd1306_Fill>
	  ssd1306_WriteString("tim6pbm", Font_7x10, White);
 800211e:	4aae      	ldr	r2, [pc, #696]	@ (80023d8 <main+0x358>)
 8002120:	2301      	movs	r3, #1
 8002122:	ca06      	ldmia	r2, {r1, r2}
 8002124:	48b2      	ldr	r0, [pc, #712]	@ (80023f0 <main+0x370>)
 8002126:	f000 fffd 	bl	8003124 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800212a:	f000 fef7 	bl	8002f1c <ssd1306_UpdateScreen>
	  HAL_Delay(500);
 800212e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002132:	f002 fabb 	bl	80046ac <HAL_Delay>
	  pbmseeker=1;
 8002136:	4bac      	ldr	r3, [pc, #688]	@ (80023e8 <main+0x368>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]

  }



  if( Init_servo()!=HAL_OK){
 800213c:	f000 fe06 	bl	8002d4c <Init_servo>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d011      	beq.n	800216a <main+0xea>
 	  ssd1306_Fill(Black);
 8002146:	2000      	movs	r0, #0
 8002148:	f000 fed0 	bl	8002eec <ssd1306_Fill>
 	  ssd1306_WriteString("servopbm", Font_7x10, White);
 800214c:	4aa2      	ldr	r2, [pc, #648]	@ (80023d8 <main+0x358>)
 800214e:	2301      	movs	r3, #1
 8002150:	ca06      	ldmia	r2, {r1, r2}
 8002152:	48a8      	ldr	r0, [pc, #672]	@ (80023f4 <main+0x374>)
 8002154:	f000 ffe6 	bl	8003124 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002158:	f000 fee0 	bl	8002f1c <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 800215c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002160:	f002 faa4 	bl	80046ac <HAL_Delay>
 	 pbmseeker=1;
 8002164:	4ba0      	ldr	r3, [pc, #640]	@ (80023e8 <main+0x368>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

   }



  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 800216a:	2203      	movs	r2, #3
 800216c:	49a2      	ldr	r1, [pc, #648]	@ (80023f8 <main+0x378>)
 800216e:	48a3      	ldr	r0, [pc, #652]	@ (80023fc <main+0x37c>)
 8002170:	f002 fe82 	bl	8004e78 <HAL_ADC_Start_DMA>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d011      	beq.n	800219e <main+0x11e>
 	  ssd1306_Fill(Black);
 800217a:	2000      	movs	r0, #0
 800217c:	f000 feb6 	bl	8002eec <ssd1306_Fill>
 	  ssd1306_WriteString("adcpbm", Font_7x10, White);
 8002180:	4a95      	ldr	r2, [pc, #596]	@ (80023d8 <main+0x358>)
 8002182:	2301      	movs	r3, #1
 8002184:	ca06      	ldmia	r2, {r1, r2}
 8002186:	489e      	ldr	r0, [pc, #632]	@ (8002400 <main+0x380>)
 8002188:	f000 ffcc 	bl	8003124 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 800218c:	f000 fec6 	bl	8002f1c <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002190:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002194:	f002 fa8a 	bl	80046ac <HAL_Delay>
 	 pbmseeker=1;
 8002198:	4b93      	ldr	r3, [pc, #588]	@ (80023e8 <main+0x368>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]


   }

   HAL_Delay(100);
 800219e:	2064      	movs	r0, #100	@ 0x64
 80021a0:	f002 fa84 	bl	80046ac <HAL_Delay>
   HAL_UART_Abort(&huart1);
 80021a4:	4897      	ldr	r0, [pc, #604]	@ (8002404 <main+0x384>)
 80021a6:	f008 fb63 	bl	800a870 <HAL_UART_Abort>

   if( HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize)!=HAL_OK){
 80021aa:	2240      	movs	r2, #64	@ 0x40
 80021ac:	4996      	ldr	r1, [pc, #600]	@ (8002408 <main+0x388>)
 80021ae:	4895      	ldr	r0, [pc, #596]	@ (8002404 <main+0x384>)
 80021b0:	f008 fb12 	bl	800a7d8 <HAL_UART_Receive_DMA>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d011      	beq.n	80021de <main+0x15e>
  	  ssd1306_Fill(Black);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f000 fe96 	bl	8002eec <ssd1306_Fill>
  	  ssd1306_WriteString("gpspbm", Font_7x10, White);
 80021c0:	4a85      	ldr	r2, [pc, #532]	@ (80023d8 <main+0x358>)
 80021c2:	2301      	movs	r3, #1
 80021c4:	ca06      	ldmia	r2, {r1, r2}
 80021c6:	4891      	ldr	r0, [pc, #580]	@ (800240c <main+0x38c>)
 80021c8:	f000 ffac 	bl	8003124 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 80021cc:	f000 fea6 	bl	8002f1c <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 80021d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021d4:	f002 fa6a 	bl	80046ac <HAL_Delay>
  	pbmseeker=1;
 80021d8:	4b83      	ldr	r3, [pc, #524]	@ (80023e8 <main+0x368>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]


    }

   HAL_Delay(100);
 80021de:	2064      	movs	r0, #100	@ 0x64
 80021e0:	f002 fa64 	bl	80046ac <HAL_Delay>
   HAL_UART_Abort(&hlpuart1);
 80021e4:	488a      	ldr	r0, [pc, #552]	@ (8002410 <main+0x390>)
 80021e6:	f008 fb43 	bl	800a870 <HAL_UART_Abort>

   if(HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize)!=HAL_OK){
 80021ea:	221e      	movs	r2, #30
 80021ec:	4989      	ldr	r1, [pc, #548]	@ (8002414 <main+0x394>)
 80021ee:	4888      	ldr	r0, [pc, #544]	@ (8002410 <main+0x390>)
 80021f0:	f008 faf2 	bl	800a7d8 <HAL_UART_Receive_DMA>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d011      	beq.n	800221e <main+0x19e>
  	  ssd1306_Fill(Black);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 fe76 	bl	8002eec <ssd1306_Fill>
  	  ssd1306_WriteString("tvsrxpbm", Font_7x10, White);
 8002200:	4a75      	ldr	r2, [pc, #468]	@ (80023d8 <main+0x358>)
 8002202:	2301      	movs	r3, #1
 8002204:	ca06      	ldmia	r2, {r1, r2}
 8002206:	4884      	ldr	r0, [pc, #528]	@ (8002418 <main+0x398>)
 8002208:	f000 ff8c 	bl	8003124 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 800220c:	f000 fe86 	bl	8002f1c <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 8002210:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002214:	f002 fa4a 	bl	80046ac <HAL_Delay>
  	pbmseeker=1;
 8002218:	4b73      	ldr	r3, [pc, #460]	@ (80023e8 <main+0x368>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]


    }


  if(  LED_Init()!=HAL_OK){
 800221e:	f7ff fde9 	bl	8001df4 <LED_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d011      	beq.n	800224c <main+0x1cc>
 	  ssd1306_Fill(Black);
 8002228:	2000      	movs	r0, #0
 800222a:	f000 fe5f 	bl	8002eec <ssd1306_Fill>
 	  ssd1306_WriteString("ledpbm", Font_7x10, White);
 800222e:	4a6a      	ldr	r2, [pc, #424]	@ (80023d8 <main+0x358>)
 8002230:	2301      	movs	r3, #1
 8002232:	ca06      	ldmia	r2, {r1, r2}
 8002234:	4879      	ldr	r0, [pc, #484]	@ (800241c <main+0x39c>)
 8002236:	f000 ff75 	bl	8003124 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 800223a:	f000 fe6f 	bl	8002f1c <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 800223e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002242:	f002 fa33 	bl	80046ac <HAL_Delay>
 	 pbmseeker=1;
 8002246:	4b68      	ldr	r3, [pc, #416]	@ (80023e8 <main+0x368>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]


   }
  Init_HighPerf_Mode_6_axis();
 800224c:	f7fe ff10 	bl	8001070 <Init_HighPerf_Mode_6_axis>
//
//
//   }

  //mon adresse est 1° et on envoit à 2°
  if( INIT_PERM_TARVOS(TOP_ADDR, GROUND_ADDR)!=HAL_OK){
 8002250:	2101      	movs	r1, #1
 8002252:	2015      	movs	r0, #21
 8002254:	f001 fada 	bl	800380c <INIT_PERM_TARVOS>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d011      	beq.n	8002282 <main+0x202>
 	  ssd1306_Fill(Black);
 800225e:	2000      	movs	r0, #0
 8002260:	f000 fe44 	bl	8002eec <ssd1306_Fill>
 	  ssd1306_WriteString("tvsaddrpbm", Font_7x10, White);
 8002264:	4a5c      	ldr	r2, [pc, #368]	@ (80023d8 <main+0x358>)
 8002266:	2301      	movs	r3, #1
 8002268:	ca06      	ldmia	r2, {r1, r2}
 800226a:	486d      	ldr	r0, [pc, #436]	@ (8002420 <main+0x3a0>)
 800226c:	f000 ff5a 	bl	8003124 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002270:	f000 fe54 	bl	8002f1c <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002274:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002278:	f002 fa18 	bl	80046ac <HAL_Delay>
 	 pbmseeker=1;
 800227c:	4b5a      	ldr	r3, [pc, #360]	@ (80023e8 <main+0x368>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]


   }

  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 8002282:	2201      	movs	r2, #1
 8002284:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002288:	4866      	ldr	r0, [pc, #408]	@ (8002424 <main+0x3a4>)
 800228a:	f004 fccf 	bl	8006c2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 800228e:	2201      	movs	r2, #1
 8002290:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002294:	4863      	ldr	r0, [pc, #396]	@ (8002424 <main+0x3a4>)
 8002296:	f004 fcc9 	bl	8006c2c <HAL_GPIO_WritePin>

  if(pbmseeker==0){
 800229a:	4b53      	ldr	r3, [pc, #332]	@ (80023e8 <main+0x368>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10e      	bne.n	80022c0 <main+0x240>

	  ssd1306_Fill(Black);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 fe22 	bl	8002eec <ssd1306_Fill>
	  ssd1306_WriteString("done!", Font_7x10, White);
 80022a8:	4a4b      	ldr	r2, [pc, #300]	@ (80023d8 <main+0x358>)
 80022aa:	2301      	movs	r3, #1
 80022ac:	ca06      	ldmia	r2, {r1, r2}
 80022ae:	485e      	ldr	r0, [pc, #376]	@ (8002428 <main+0x3a8>)
 80022b0:	f000 ff38 	bl	8003124 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80022b4:	f000 fe32 	bl	8002f1c <ssd1306_UpdateScreen>
	  HAL_Delay(500);
 80022b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80022bc:	f002 f9f6 	bl	80046ac <HAL_Delay>


  }
  if(pbmseeker==1){
 80022c0:	4b49      	ldr	r3, [pc, #292]	@ (80023e8 <main+0x368>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10e      	bne.n	80022e6 <main+0x266>

	  ssd1306_Fill(Black);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f000 fe0f 	bl	8002eec <ssd1306_Fill>
	  ssd1306_WriteString("PROBLEM", Font_7x10, White);
 80022ce:	4a42      	ldr	r2, [pc, #264]	@ (80023d8 <main+0x358>)
 80022d0:	2301      	movs	r3, #1
 80022d2:	ca06      	ldmia	r2, {r1, r2}
 80022d4:	4855      	ldr	r0, [pc, #340]	@ (800242c <main+0x3ac>)
 80022d6:	f000 ff25 	bl	8003124 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80022da:	f000 fe1f 	bl	8002f1c <ssd1306_UpdateScreen>
	  HAL_Delay(2000);
 80022de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80022e2:	f002 f9e3 	bl	80046ac <HAL_Delay>


  }
  int r=0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
  int g=0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
  int b=0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  int t=0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timestamp==1){
 80022f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002430 <main+0x3b0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d10e      	bne.n	800231c <main+0x29c>

		  nmea_parse(&myDataGPS,(uint8_t*) GPS_RX_Buffer);
 80022fe:	494d      	ldr	r1, [pc, #308]	@ (8002434 <main+0x3b4>)
 8002300:	484d      	ldr	r0, [pc, #308]	@ (8002438 <main+0x3b8>)
 8002302:	f000 fc73 	bl	8002bec <nmea_parse>
		  bmp581_read_precise_normal(&myDatabmp581);
 8002306:	484d      	ldr	r0, [pc, #308]	@ (800243c <main+0x3bc>)
 8002308:	f7ff fa62 	bl	80017d0 <bmp581_read_precise_normal>
		  Read_sensor_data(&myData6AXIS);
 800230c:	484c      	ldr	r0, [pc, #304]	@ (8002440 <main+0x3c0>)
 800230e:	f7fe ff37 	bl	8001180 <Read_sensor_data>

		  statemachine();
 8002312:	f000 ff77 	bl	8003204 <statemachine>
		  timestamp=0;
 8002316:	4b46      	ldr	r3, [pc, #280]	@ (8002430 <main+0x3b0>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]



	  }
	  LED_Setcolour(r, g, b,r, g, b);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	b2d8      	uxtb	r0, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	b2d9      	uxtb	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	b2dc      	uxtb	r4, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	b2dd      	uxtb	r5, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	9201      	str	r2, [sp, #4]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	462b      	mov	r3, r5
 800233a:	4622      	mov	r2, r4
 800233c:	f7ff fd7e 	bl	8001e3c <LED_Setcolour>
	  r=floor(abs(255*cosf((2*M_PI/255)*t)));
 8002340:	6838      	ldr	r0, [r7, #0]
 8002342:	f7fe f917 	bl	8000574 <__aeabi_i2d>
 8002346:	a320      	add	r3, pc, #128	@ (adr r3, 80023c8 <main+0x348>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f97c 	bl	8000648 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fc6e 	bl	8000c38 <__aeabi_d2f>
 800235c:	4603      	mov	r3, r0
 800235e:	ee00 3a10 	vmov	s0, r3
 8002362:	f00d f8ef 	bl	800f544 <cosf>
 8002366:	eef0 7a40 	vmov.f32	s15, s0
 800236a:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8002444 <main+0x3c4>
 800236e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002376:	ee17 3a90 	vmov	r3, s15
 800237a:	2b00      	cmp	r3, #0
 800237c:	bfb8      	it	lt
 800237e:	425b      	neglt	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8f7 	bl	8000574 <__aeabi_i2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7fe fc0b 	bl	8000ba8 <__aeabi_d2iz>
 8002392:	4603      	mov	r3, r0
 8002394:	60fb      	str	r3, [r7, #12]
	  g=floor(abs(255*cosf((2*M_PI/255)*t+(180/M_PI))));
 8002396:	6838      	ldr	r0, [r7, #0]
 8002398:	f7fe f8ec 	bl	8000574 <__aeabi_i2d>
 800239c:	a30a      	add	r3, pc, #40	@ (adr r3, 80023c8 <main+0x348>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f951 	bl	8000648 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	a308      	add	r3, pc, #32	@ (adr r3, 80023d0 <main+0x350>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f7fd ff92 	bl	80002dc <__adddf3>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	e042      	b.n	8002448 <main+0x3c8>
 80023c2:	bf00      	nop
 80023c4:	f3af 8000 	nop.w
 80023c8:	8acefc14 	.word	0x8acefc14
 80023cc:	3f993b36 	.word	0x3f993b36
 80023d0:	1a63c1f8 	.word	0x1a63c1f8
 80023d4:	404ca5dc 	.word	0x404ca5dc
 80023d8:	20000008 	.word	0x20000008
 80023dc:	080103c4 	.word	0x080103c4
 80023e0:	20000ea0 	.word	0x20000ea0
 80023e4:	080103cc 	.word	0x080103cc
 80023e8:	200008d8 	.word	0x200008d8
 80023ec:	20000eec 	.word	0x20000eec
 80023f0:	080103d4 	.word	0x080103d4
 80023f4:	080103dc 	.word	0x080103dc
 80023f8:	20000394 	.word	0x20000394
 80023fc:	20000204 	.word	0x20000204
 8002400:	080103e8 	.word	0x080103e8
 8002404:	2000102c 	.word	0x2000102c
 8002408:	200006c8 	.word	0x200006c8
 800240c:	080103f0 	.word	0x080103f0
 8002410:	20000f98 	.word	0x20000f98
 8002414:	200004a8 	.word	0x200004a8
 8002418:	080103f8 	.word	0x080103f8
 800241c:	08010404 	.word	0x08010404
 8002420:	0801040c 	.word	0x0801040c
 8002424:	48000400 	.word	0x48000400
 8002428:	08010418 	.word	0x08010418
 800242c:	08010420 	.word	0x08010420
 8002430:	200008c2 	.word	0x200008c2
 8002434:	200004c8 	.word	0x200004c8
 8002438:	20000710 	.word	0x20000710
 800243c:	20000770 	.word	0x20000770
 8002440:	20000750 	.word	0x20000750
 8002444:	437f0000 	.word	0x437f0000
 8002448:	f7fe fbf6 	bl	8000c38 <__aeabi_d2f>
 800244c:	4603      	mov	r3, r0
 800244e:	ee00 3a10 	vmov	s0, r3
 8002452:	f00d f877 	bl	800f544 <cosf>
 8002456:	eef0 7a40 	vmov.f32	s15, s0
 800245a:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8002444 <main+0x3c4>
 800245e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002466:	ee17 3a90 	vmov	r3, s15
 800246a:	2b00      	cmp	r3, #0
 800246c:	bfb8      	it	lt
 800246e:	425b      	neglt	r3, r3
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f87f 	bl	8000574 <__aeabi_i2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fb93 	bl	8000ba8 <__aeabi_d2iz>
 8002482:	4603      	mov	r3, r0
 8002484:	60bb      	str	r3, [r7, #8]
	  b=floor(abs(255*cosf((2*M_PI/255)*t+(270/M_PI))));
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	f7fe f874 	bl	8000574 <__aeabi_i2d>
 800248c:	a31f      	add	r3, pc, #124	@ (adr r3, 800250c <main+0x48c>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	f7fe f8d9 	bl	8000648 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	a31d      	add	r3, pc, #116	@ (adr r3, 8002514 <main+0x494>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fd ff1a 	bl	80002dc <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fbc2 	bl	8000c38 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	ee00 3a10 	vmov	s0, r3
 80024ba:	f00d f843 	bl	800f544 <cosf>
 80024be:	eef0 7a40 	vmov.f32	s15, s0
 80024c2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002508 <main+0x488>
 80024c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ce:	ee17 3a90 	vmov	r3, s15
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bfb8      	it	lt
 80024d6:	425b      	neglt	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f84b 	bl	8000574 <__aeabi_i2d>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f7fe fb5f 	bl	8000ba8 <__aeabi_d2iz>
 80024ea:	4603      	mov	r3, r0
 80024ec:	607b      	str	r3, [r7, #4]

	  if(t>=255){
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80024f2:	dd01      	ble.n	80024f8 <main+0x478>
		  t=0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	603b      	str	r3, [r7, #0]
	  }
	  t++;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	603b      	str	r3, [r7, #0]

	  LED_Update();
 80024fe:	f7ff fd2d 	bl	8001f5c <LED_Update>
	  if(timestamp==1){
 8002502:	e6f8      	b.n	80022f6 <main+0x276>
 8002504:	f3af 8000 	nop.w
 8002508:	437f0000 	.word	0x437f0000
 800250c:	8acefc14 	.word	0x8acefc14
 8002510:	3f993b36 	.word	0x3f993b36
 8002514:	13cad17a 	.word	0x13cad17a
 8002518:	40557c65 	.word	0x40557c65

0800251c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b094      	sub	sp, #80	@ 0x50
 8002520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002522:	f107 0318 	add.w	r3, r7, #24
 8002526:	2238      	movs	r2, #56	@ 0x38
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f00b f816 	bl	800d55c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800253e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002542:	f005 f9e1 	bl	8007908 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800254a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800254e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002550:	2302      	movs	r3, #2
 8002552:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002554:	2303      	movs	r3, #3
 8002556:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002558:	2302      	movs	r3, #2
 800255a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 800255c:	2319      	movs	r3, #25
 800255e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002560:	2302      	movs	r3, #2
 8002562:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002564:	2302      	movs	r3, #2
 8002566:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002568:	2302      	movs	r3, #2
 800256a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256c:	f107 0318 	add.w	r3, r7, #24
 8002570:	4618      	mov	r0, r3
 8002572:	f005 fa7d 	bl	8007a70 <HAL_RCC_OscConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800257c:	f000 f818 	bl	80025b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002580:	230f      	movs	r3, #15
 8002582:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002584:	2303      	movs	r3, #3
 8002586:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	2103      	movs	r1, #3
 8002598:	4618      	mov	r0, r3
 800259a:	f005 fd7b 	bl	8008094 <HAL_RCC_ClockConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80025a4:	f000 f804 	bl	80025b0 <Error_Handler>
  }
}
 80025a8:	bf00      	nop
 80025aa:	3750      	adds	r7, #80	@ 0x50
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
}
 80025b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <Error_Handler+0x8>

080025bc <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fd fe2b 	bl	8000220 <strlen>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d801      	bhi.n	80025d4 <gps_checksum+0x18>
 80025d0:	2300      	movs	r3, #0
 80025d2:	e038      	b.n	8002646 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7fd fe23 	bl	8000220 <strlen>
 80025da:	4603      	mov	r3, r0
 80025dc:	3b04      	subs	r3, #4
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fd fe1a 	bl	8000220 <strlen>
 80025ec:	4603      	mov	r3, r0
 80025ee:	3b03      	subs	r3, #3
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	e00a      	b.n	8002618 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4053      	eors	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	3301      	adds	r3, #1
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fd fe01 	bl	8000220 <strlen>
 800261e:	4603      	mov	r3, r0
 8002620:	1f5a      	subs	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	429a      	cmp	r2, r3
 8002626:	d8ec      	bhi.n	8002602 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8002628:	f107 0308 	add.w	r3, r7, #8
 800262c:	2210      	movs	r2, #16
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f00a fd5b 	bl	800d0ec <strtol>
 8002636:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d101      	bne.n	8002644 <gps_checksum+0x88>
        return 1;
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002644:	2300      	movs	r3, #0
    }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b0b7      	sub	sp, #220	@ 0xdc
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002660:	f107 0320 	add.w	r3, r7, #32
 8002664:	2264      	movs	r2, #100	@ 0x64
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f00a ff77 	bl	800d55c <memset>
    char *marker = strtok(inputString, ",");
 800266e:	49c2      	ldr	r1, [pc, #776]	@ (8002978 <nmea_GPGGA+0x328>)
 8002670:	6838      	ldr	r0, [r7, #0]
 8002672:	f00a ff8d 	bl	800d590 <strtok>
 8002676:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800267a:	e027      	b.n	80026cc <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800267c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002680:	f7fd fdce 	bl	8000220 <strlen>
 8002684:	4603      	mov	r3, r0
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 800268c:	1c63      	adds	r3, r4, #1
 800268e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002692:	4610      	mov	r0, r2
 8002694:	f009 fd8c 	bl	800c1b0 <malloc>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	00a3      	lsls	r3, r4, #2
 800269e:	33d8      	adds	r3, #216	@ 0xd8
 80026a0:	443b      	add	r3, r7
 80026a2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80026a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026aa:	3b01      	subs	r3, #1
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	33d8      	adds	r3, #216	@ 0xd8
 80026b0:	443b      	add	r3, r7
 80026b2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80026b6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f00b f85d 	bl	800d77a <strcpy>
        marker = strtok(NULL, ",");
 80026c0:	49ad      	ldr	r1, [pc, #692]	@ (8002978 <nmea_GPGGA+0x328>)
 80026c2:	2000      	movs	r0, #0
 80026c4:	f00a ff64 	bl	800d590 <strtok>
 80026c8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80026cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1d3      	bne.n	800267c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80026d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 80026dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	332c      	adds	r3, #44	@ 0x2c
 80026e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f00b f844 	bl	800d77a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80026f2:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80026f6:	2b53      	cmp	r3, #83	@ 0x53
 80026f8:	d004      	beq.n	8002704 <nmea_GPGGA+0xb4>
 80026fa:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80026fe:	2b4e      	cmp	r3, #78	@ 0x4e
 8002700:	f040 8159 	bne.w	80029b6 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800270a:	e010      	b.n	800272e <nmea_GPGGA+0xde>
 800270c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800270e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002712:	4413      	add	r3, r2
 8002714:	7819      	ldrb	r1, [r3, #0]
 8002716:	f107 021c 	add.w	r2, r7, #28
 800271a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800271e:	4413      	add	r3, r2
 8002720:	460a      	mov	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002728:	3301      	adds	r3, #1
 800272a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800272e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002732:	2b01      	cmp	r3, #1
 8002734:	ddea      	ble.n	800270c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800273c:	e011      	b.n	8002762 <nmea_GPGGA+0x112>
 800273e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002744:	3302      	adds	r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	7819      	ldrb	r1, [r3, #0]
 800274a:	f107 0214 	add.w	r2, r7, #20
 800274e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002752:	4413      	add	r3, r2
 8002754:	460a      	mov	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800275c:	3301      	adds	r3, #1
 800275e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002766:	2b05      	cmp	r3, #5
 8002768:	dde9      	ble.n	800273e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	220a      	movs	r2, #10
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f00a fcba 	bl	800d0ec <strtol>
 8002778:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f00a fbd4 	bl	800cf30 <strtof>
 8002788:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 800278c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002798:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 800279c:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 800297c <nmea_GPGGA+0x32c>
 80027a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a8:	ee17 0a90 	vmov	r0, s15
 80027ac:	f7fd fef4 	bl	8000598 <__aeabi_f2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027be:	e010      	b.n	80027e2 <nmea_GPGGA+0x192>
 80027c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027c6:	4413      	add	r3, r2
 80027c8:	7819      	ldrb	r1, [r3, #0]
 80027ca:	f107 0210 	add.w	r2, r7, #16
 80027ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027d2:	4413      	add	r3, r2
 80027d4:	460a      	mov	r2, r1
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027dc:	3301      	adds	r3, #1
 80027de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	ddea      	ble.n	80027c0 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027f0:	e011      	b.n	8002816 <nmea_GPGGA+0x1c6>
 80027f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027f8:	3303      	adds	r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	7819      	ldrb	r1, [r3, #0]
 80027fe:	f107 0208 	add.w	r2, r7, #8
 8002802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002806:	4413      	add	r3, r2
 8002808:	460a      	mov	r2, r1
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002810:	3301      	adds	r3, #1
 8002812:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800281a:	2b05      	cmp	r3, #5
 800281c:	dde9      	ble.n	80027f2 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800281e:	f107 0310 	add.w	r3, r7, #16
 8002822:	220a      	movs	r2, #10
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f00a fc60 	bl	800d0ec <strtol>
 800282c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002830:	f107 0308 	add.w	r3, r7, #8
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f00a fb7a 	bl	800cf30 <strtof>
 800283c:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800284c:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002850:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 800297c <nmea_GPGGA+0x32c>
 8002854:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285c:	ee17 0a90 	vmov	r0, s15
 8002860:	f7fd fe9a 	bl	8000598 <__aeabi_f2d>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002878:	f7fe f94e 	bl	8000b18 <__aeabi_dcmpeq>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d176      	bne.n	8002970 <nmea_GPGGA+0x320>
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800288e:	f7fe f943 	bl	8000b18 <__aeabi_dcmpeq>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d16b      	bne.n	8002970 <nmea_GPGGA+0x320>
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <nmea_GPGGA+0x330>)
 800289e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80028a2:	f7fe f943 	bl	8000b2c <__aeabi_dcmplt>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d061      	beq.n	8002970 <nmea_GPGGA+0x320>
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	4b34      	ldr	r3, [pc, #208]	@ (8002984 <nmea_GPGGA+0x334>)
 80028b2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80028b6:	f7fe f939 	bl	8000b2c <__aeabi_dcmplt>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d057      	beq.n	8002970 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80028c6:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 80028d0:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80028d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80028e2:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80028e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f00a fb21 	bl	800cf30 <strtof>
 80028ee:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80028f2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80028f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fe:	d102      	bne.n	8002906 <nmea_GPGGA+0x2b6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	e001      	b.n	800290a <nmea_GPGGA+0x2ba>
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800290e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002910:	220a      	movs	r2, #10
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f00a fbe9 	bl	800d0ec <strtol>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002922:	220a      	movs	r2, #10
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f00a fbe0 	bl	800d0ec <strtol>
 800292c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002930:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002934:	2b00      	cmp	r3, #0
 8002936:	bfcc      	ite	gt
 8002938:	2301      	movgt	r3, #1
 800293a:	2300      	movle	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8002944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f00a faf1 	bl	800cf30 <strtof>
 800294e:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8002952:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002956:	eef5 7a40 	vcmp.f32	s15, #0.0
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	d102      	bne.n	8002966 <nmea_GPGGA+0x316>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	e001      	b.n	800296a <nmea_GPGGA+0x31a>
 8002966:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800296e:	e022      	b.n	80029b6 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002976:	e016      	b.n	80029a6 <nmea_GPGGA+0x356>
 8002978:	08010428 	.word	0x08010428
 800297c:	42700000 	.word	0x42700000
 8002980:	40568000 	.word	0x40568000
 8002984:	40668000 	.word	0x40668000
 8002988:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	33d8      	adds	r3, #216	@ 0xd8
 8002990:	443b      	add	r3, r7
 8002992:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002996:	4618      	mov	r0, r3
 8002998:	f009 fc12 	bl	800c1c0 <free>
 800299c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029a0:	3301      	adds	r3, #1
 80029a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80029aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029ae:	429a      	cmp	r2, r3
 80029b0:	dbea      	blt.n	8002988 <nmea_GPGGA+0x338>
            return 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e019      	b.n	80029ea <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029bc:	e00e      	b.n	80029dc <nmea_GPGGA+0x38c>
 80029be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	33d8      	adds	r3, #216	@ 0xd8
 80029c6:	443b      	add	r3, r7
 80029c8:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f009 fbf7 	bl	800c1c0 <free>
 80029d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029d6:	3301      	adds	r3, #1
 80029d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80029e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dbea      	blt.n	80029be <nmea_GPGGA+0x36e>
    return 1;
 80029e8:	2301      	movs	r3, #1
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	37dc      	adds	r7, #220	@ 0xdc
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	bf00      	nop

080029f4 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b0a3      	sub	sp, #140	@ 0x8c
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	2264      	movs	r2, #100	@ 0x64
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f00a fda5 	bl	800d55c <memset>
    char *marker = strtok(inputString, ",");
 8002a12:	493b      	ldr	r1, [pc, #236]	@ (8002b00 <nmea_GPGSA+0x10c>)
 8002a14:	6838      	ldr	r0, [r7, #0]
 8002a16:	f00a fdbb 	bl	800d590 <strtok>
 8002a1a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8002a1e:	e027      	b.n	8002a70 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002a20:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002a24:	f7fd fbfc 	bl	8000220 <strlen>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8002a30:	1c63      	adds	r3, r4, #1
 8002a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a36:	4610      	mov	r0, r2
 8002a38:	f009 fbba 	bl	800c1b0 <malloc>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	00a3      	lsls	r3, r4, #2
 8002a42:	3388      	adds	r3, #136	@ 0x88
 8002a44:	443b      	add	r3, r7
 8002a46:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8002a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	3388      	adds	r3, #136	@ 0x88
 8002a54:	443b      	add	r3, r7
 8002a56:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002a5a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f00a fe8b 	bl	800d77a <strcpy>
        marker = strtok(NULL, ",");
 8002a64:	4926      	ldr	r1, [pc, #152]	@ (8002b00 <nmea_GPGSA+0x10c>)
 8002a66:	2000      	movs	r0, #0
 8002a68:	f00a fd92 	bl	800d590 <strtok>
 8002a6c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8002a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1d3      	bne.n	8002a20 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	220a      	movs	r2, #10
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f00a fb34 	bl	800d0ec <strtol>
 8002a84:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8002a86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	bfcc      	ite	gt
 8002a8c:	2301      	movgt	r3, #1
 8002a8e:	2300      	movle	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002aa0:	e00e      	b.n	8002ac0 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8002aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3388      	adds	r3, #136	@ 0x88
 8002aa8:	443b      	add	r3, r7
 8002aaa:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <nmea_GPGSA+0xc6>
            satelliteCount++;
 8002ab4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8002aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002abc:	3301      	adds	r3, #1
 8002abe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ac2:	2b0e      	cmp	r3, #14
 8002ac4:	dded      	ble.n	8002aa2 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8002acc:	2300      	movs	r3, #0
 8002ace:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ad0:	e00b      	b.n	8002aea <nmea_GPGSA+0xf6>
 8002ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	3388      	adds	r3, #136	@ 0x88
 8002ad8:	443b      	add	r3, r7
 8002ada:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f009 fb6e 	bl	800c1c0 <free>
 8002ae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002aea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbee      	blt.n	8002ad2 <nmea_GPGSA+0xde>
    return 1;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	378c      	adds	r7, #140	@ 0x8c
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	08010428 	.word	0x08010428
 8002b04:	00000000 	.word	0x00000000

08002b08 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b0a1      	sub	sp, #132	@ 0x84
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	2264      	movs	r2, #100	@ 0x64
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f00a fd1c 	bl	800d55c <memset>
    char *marker = strtok(inputString, ",");
 8002b24:	4930      	ldr	r1, [pc, #192]	@ (8002be8 <nmea_GNRMC+0xe0>)
 8002b26:	6838      	ldr	r0, [r7, #0]
 8002b28:	f00a fd32 	bl	800d590 <strtok>
 8002b2c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8002b2e:	e021      	b.n	8002b74 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002b30:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002b32:	f7fd fb75 	bl	8000220 <strlen>
 8002b36:	4603      	mov	r3, r0
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8002b3c:	1c63      	adds	r3, r4, #1
 8002b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b40:	4610      	mov	r0, r2
 8002b42:	f009 fb35 	bl	800c1b0 <malloc>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	00a3      	lsls	r3, r4, #2
 8002b4c:	3380      	adds	r3, #128	@ 0x80
 8002b4e:	443b      	add	r3, r7
 8002b50:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8002b54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b56:	3b01      	subs	r3, #1
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	3380      	adds	r3, #128	@ 0x80
 8002b5c:	443b      	add	r3, r7
 8002b5e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002b62:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002b64:	4618      	mov	r0, r3
 8002b66:	f00a fe08 	bl	800d77a <strcpy>
        marker = strtok(NULL, ",");
 8002b6a:	491f      	ldr	r1, [pc, #124]	@ (8002be8 <nmea_GNRMC+0xe0>)
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f00a fd0f 	bl	800d590 <strtok>
 8002b72:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8002b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1da      	bne.n	8002b30 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8002b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f00a f9d6 	bl	800cf30 <strtof>
 8002b84:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 8002b88:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002b8a:	f7fd fd05 	bl	8000598 <__aeabi_f2d>
 8002b8e:	a314      	add	r3, pc, #80	@ (adr r3, 8002be0 <nmea_GNRMC+0xd8>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f7fd fe82 	bl	800089c <__aeabi_ddiv>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f7fe f84a 	bl	8000c38 <__aeabi_d2f>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8002baa:	2300      	movs	r3, #0
 8002bac:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bae:	e00b      	b.n	8002bc8 <nmea_GNRMC+0xc0>
 8002bb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	3380      	adds	r3, #128	@ 0x80
 8002bb6:	443b      	add	r3, r7
 8002bb8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f009 faff 	bl	800c1c0 <free>
 8002bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bc8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002bca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	dbef      	blt.n	8002bb0 <nmea_GNRMC+0xa8>
    return 1;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3784      	adds	r7, #132	@ 0x84
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd90      	pop	{r4, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w
 8002be0:	be76c8b4 	.word	0xbe76c8b4
 8002be4:	3fff1a9f 	.word	0x3fff1a9f
 8002be8:	08010428 	.word	0x08010428

08002bec <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002bf6:	223c      	movs	r2, #60	@ 0x3c
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	484e      	ldr	r0, [pc, #312]	@ (8002d34 <nmea_parse+0x148>)
 8002bfc:	f00a fcae 	bl	800d55c <memset>
    char * token = strtok(buffer, "$");
 8002c00:	494d      	ldr	r1, [pc, #308]	@ (8002d38 <nmea_parse+0x14c>)
 8002c02:	6838      	ldr	r0, [r7, #0]
 8002c04:	f00a fcc4 	bl	800d590 <strtok>
 8002c08:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8002c0e:	e01d      	b.n	8002c4c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002c10:	6978      	ldr	r0, [r7, #20]
 8002c12:	f7fd fb05 	bl	8000220 <strlen>
 8002c16:	4603      	mov	r3, r0
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	693c      	ldr	r4, [r7, #16]
 8002c1c:	1c63      	adds	r3, r4, #1
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	4610      	mov	r0, r2
 8002c22:	f009 fac5 	bl	800c1b0 <malloc>
 8002c26:	4603      	mov	r3, r0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b42      	ldr	r3, [pc, #264]	@ (8002d34 <nmea_parse+0x148>)
 8002c2c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	4a3f      	ldr	r2, [pc, #252]	@ (8002d34 <nmea_parse+0x148>)
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	6979      	ldr	r1, [r7, #20]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f00a fd9c 	bl	800d77a <strcpy>
        token = strtok(NULL, "$");
 8002c42:	493d      	ldr	r1, [pc, #244]	@ (8002d38 <nmea_parse+0x14c>)
 8002c44:	2000      	movs	r0, #0
 8002c46:	f00a fca3 	bl	800d590 <strtok>
 8002c4a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1de      	bne.n	8002c10 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e052      	b.n	8002cfe <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002c58:	4a36      	ldr	r2, [pc, #216]	@ (8002d34 <nmea_parse+0x148>)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	4936      	ldr	r1, [pc, #216]	@ (8002d3c <nmea_parse+0x150>)
 8002c62:	4618      	mov	r0, r3
 8002c64:	f00a fcf0 	bl	800d648 <strstr>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d044      	beq.n	8002cf8 <nmea_parse+0x10c>
 8002c6e:	4a31      	ldr	r2, [pc, #196]	@ (8002d34 <nmea_parse+0x148>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fca0 	bl	80025bc <gps_checksum>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d03a      	beq.n	8002cf8 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8002c82:	4a2c      	ldr	r2, [pc, #176]	@ (8002d34 <nmea_parse+0x148>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	492d      	ldr	r1, [pc, #180]	@ (8002d40 <nmea_parse+0x154>)
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f00a fcdb 	bl	800d648 <strstr>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8002c98:	4a26      	ldr	r2, [pc, #152]	@ (8002d34 <nmea_parse+0x148>)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ff30 	bl	8002b08 <nmea_GNRMC>
 8002ca8:	e026      	b.n	8002cf8 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8002caa:	4a22      	ldr	r2, [pc, #136]	@ (8002d34 <nmea_parse+0x148>)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	4924      	ldr	r1, [pc, #144]	@ (8002d44 <nmea_parse+0x158>)
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f00a fcc7 	bl	800d648 <strstr>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d34 <nmea_parse+0x148>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fe92 	bl	80029f4 <nmea_GPGSA>
 8002cd0:	e012      	b.n	8002cf8 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8002cd2:	4a18      	ldr	r2, [pc, #96]	@ (8002d34 <nmea_parse+0x148>)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cda:	491b      	ldr	r1, [pc, #108]	@ (8002d48 <nmea_parse+0x15c>)
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f00a fcb3 	bl	800d648 <strstr>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002ce8:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <nmea_parse+0x148>)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fcac 	bl	8002650 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	dba8      	blt.n	8002c58 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	e009      	b.n	8002d20 <nmea_parse+0x134>
 8002d0c:	4a09      	ldr	r2, [pc, #36]	@ (8002d34 <nmea_parse+0x148>)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f009 fa53 	bl	800c1c0 <free>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbf1      	blt.n	8002d0c <nmea_parse+0x120>


}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200008dc 	.word	0x200008dc
 8002d38:	0801042c 	.word	0x0801042c
 8002d3c:	08010430 	.word	0x08010430
 8002d40:	08010434 	.word	0x08010434
 8002d44:	0801043c 	.word	0x0801043c
 8002d48:	08010444 	.word	0x08010444

08002d4c <Init_servo>:
#include "tim.h"




HAL_StatusTypeDef Init_servo(void){
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <Init_servo+0x1c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8002d58:	635a      	str	r2, [r3, #52]	@ 0x34
	  return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4802      	ldr	r0, [pc, #8]	@ (8002d68 <Init_servo+0x1c>)
 8002d5e:	f005 fec5 	bl	8008aec <HAL_TIM_PWM_Start>
 8002d62:	4603      	mov	r3, r0




}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000e54 	.word	0x20000e54

08002d6c <release_mecanism>:
void release_mecanism(void){
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 8002d70:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <release_mecanism+0x18>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8002d78:	635a      	str	r2, [r3, #52]	@ 0x34


}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	20000e54 	.word	0x20000e54

08002d88 <lock_mecanism>:
void lock_mecanism(void){
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,CLOSED_HIGH_TIME);
 8002d8c:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <lock_mecanism+0x18>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f240 5246 	movw	r2, #1350	@ 0x546
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34


}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	20000e54 	.word	0x20000e54

08002da4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af04      	add	r7, sp, #16
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	9302      	str	r3, [sp, #8]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2178      	movs	r1, #120	@ 0x78
 8002dd2:	4803      	ldr	r0, [pc, #12]	@ (8002de0 <ssd1306_WriteCommand+0x2c>)
 8002dd4:	f004 f810 	bl	8006df8 <HAL_I2C_Mem_Write>
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	2000033c 	.word	0x2000033c

08002de4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af04      	add	r7, sp, #16
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f04f 32ff 	mov.w	r2, #4294967295
 8002df6:	9202      	str	r2, [sp, #8]
 8002df8:	9301      	str	r3, [sp, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	2240      	movs	r2, #64	@ 0x40
 8002e02:	2178      	movs	r1, #120	@ 0x78
 8002e04:	4803      	ldr	r0, [pc, #12]	@ (8002e14 <ssd1306_WriteData+0x30>)
 8002e06:	f003 fff7 	bl	8006df8 <HAL_I2C_Mem_Write>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000033c 	.word	0x2000033c

08002e18 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002e1c:	f7ff ffc2 	bl	8002da4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002e20:	2064      	movs	r0, #100	@ 0x64
 8002e22:	f001 fc43 	bl	80046ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002e26:	2000      	movs	r0, #0
 8002e28:	f000 f9ce 	bl	80031c8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002e2c:	2020      	movs	r0, #32
 8002e2e:	f7ff ffc1 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7ff ffbe 	bl	8002db4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e38:	20b0      	movs	r0, #176	@ 0xb0
 8002e3a:	f7ff ffbb 	bl	8002db4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002e3e:	20c8      	movs	r0, #200	@ 0xc8
 8002e40:	f7ff ffb8 	bl	8002db4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff ffb5 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002e4a:	2010      	movs	r0, #16
 8002e4c:	f7ff ffb2 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002e50:	2040      	movs	r0, #64	@ 0x40
 8002e52:	f7ff ffaf 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002e56:	20ff      	movs	r0, #255	@ 0xff
 8002e58:	f000 f9a2 	bl	80031a0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002e5c:	20a1      	movs	r0, #161	@ 0xa1
 8002e5e:	f7ff ffa9 	bl	8002db4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002e62:	20a6      	movs	r0, #166	@ 0xa6
 8002e64:	f7ff ffa6 	bl	8002db4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002e68:	20a8      	movs	r0, #168	@ 0xa8
 8002e6a:	f7ff ffa3 	bl	8002db4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002e6e:	203f      	movs	r0, #63	@ 0x3f
 8002e70:	f7ff ffa0 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e74:	20a4      	movs	r0, #164	@ 0xa4
 8002e76:	f7ff ff9d 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002e7a:	20d3      	movs	r0, #211	@ 0xd3
 8002e7c:	f7ff ff9a 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7ff ff97 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e86:	20d5      	movs	r0, #213	@ 0xd5
 8002e88:	f7ff ff94 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002e8c:	20f0      	movs	r0, #240	@ 0xf0
 8002e8e:	f7ff ff91 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002e92:	20d9      	movs	r0, #217	@ 0xd9
 8002e94:	f7ff ff8e 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002e98:	2022      	movs	r0, #34	@ 0x22
 8002e9a:	f7ff ff8b 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002e9e:	20da      	movs	r0, #218	@ 0xda
 8002ea0:	f7ff ff88 	bl	8002db4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002ea4:	2012      	movs	r0, #18
 8002ea6:	f7ff ff85 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002eaa:	20db      	movs	r0, #219	@ 0xdb
 8002eac:	f7ff ff82 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002eb0:	2020      	movs	r0, #32
 8002eb2:	f7ff ff7f 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002eb6:	208d      	movs	r0, #141	@ 0x8d
 8002eb8:	f7ff ff7c 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002ebc:	2014      	movs	r0, #20
 8002ebe:	f7ff ff79 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f000 f980 	bl	80031c8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f000 f80f 	bl	8002eec <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002ece:	f000 f825 	bl	8002f1c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <ssd1306_Init+0xd0>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	@ (8002ee8 <ssd1306_Init+0xd0>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002ede:	4b02      	ldr	r3, [pc, #8]	@ (8002ee8 <ssd1306_Init+0xd0>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	711a      	strb	r2, [r3, #4]
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000d18 	.word	0x20000d18

08002eec <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <ssd1306_Fill+0x14>
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <ssd1306_Fill+0x16>
 8002f00:	23ff      	movs	r3, #255	@ 0xff
 8002f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f06:	4619      	mov	r1, r3
 8002f08:	4803      	ldr	r0, [pc, #12]	@ (8002f18 <ssd1306_Fill+0x2c>)
 8002f0a:	f00a fb27 	bl	800d55c <memset>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000918 	.word	0x20000918

08002f1c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	71fb      	strb	r3, [r7, #7]
 8002f26:	e016      	b.n	8002f56 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	3b50      	subs	r3, #80	@ 0x50
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff40 	bl	8002db4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7ff ff3d 	bl	8002db4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f7ff ff3a 	bl	8002db4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	01db      	lsls	r3, r3, #7
 8002f44:	4a08      	ldr	r2, [pc, #32]	@ (8002f68 <ssd1306_UpdateScreen+0x4c>)
 8002f46:	4413      	add	r3, r2
 8002f48:	2180      	movs	r1, #128	@ 0x80
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff4a 	bl	8002de4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	3301      	adds	r3, #1
 8002f54:	71fb      	strb	r3, [r7, #7]
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	2b07      	cmp	r3, #7
 8002f5a:	d9e5      	bls.n	8002f28 <ssd1306_UpdateScreen+0xc>
    }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000918 	.word	0x20000918

08002f6c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
 8002f76:	460b      	mov	r3, r1
 8002f78:	71bb      	strb	r3, [r7, #6]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db3d      	blt.n	8003002 <ssd1306_DrawPixel+0x96>
 8002f86:	79bb      	ldrb	r3, [r7, #6]
 8002f88:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f8a:	d83a      	bhi.n	8003002 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002f8c:	797b      	ldrb	r3, [r7, #5]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d11a      	bne.n	8002fc8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f92:	79fa      	ldrb	r2, [r7, #7]
 8002f94:	79bb      	ldrb	r3, [r7, #6]
 8002f96:	08db      	lsrs	r3, r3, #3
 8002f98:	b2d8      	uxtb	r0, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	01db      	lsls	r3, r3, #7
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <ssd1306_DrawPixel+0xa4>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	b25a      	sxtb	r2, r3
 8002fa6:	79bb      	ldrb	r3, [r7, #6]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	b25b      	sxtb	r3, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b259      	sxtb	r1, r3
 8002fb8:	79fa      	ldrb	r2, [r7, #7]
 8002fba:	4603      	mov	r3, r0
 8002fbc:	01db      	lsls	r3, r3, #7
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b2c9      	uxtb	r1, r1
 8002fc2:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <ssd1306_DrawPixel+0xa4>)
 8002fc4:	54d1      	strb	r1, [r2, r3]
 8002fc6:	e01d      	b.n	8003004 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002fc8:	79fa      	ldrb	r2, [r7, #7]
 8002fca:	79bb      	ldrb	r3, [r7, #6]
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	b2d8      	uxtb	r0, r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	01db      	lsls	r3, r3, #7
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8003010 <ssd1306_DrawPixel+0xa4>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	b25a      	sxtb	r2, r3
 8002fdc:	79bb      	ldrb	r3, [r7, #6]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b259      	sxtb	r1, r3
 8002ff2:	79fa      	ldrb	r2, [r7, #7]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	01db      	lsls	r3, r3, #7
 8002ff8:	4413      	add	r3, r2
 8002ffa:	b2c9      	uxtb	r1, r1
 8002ffc:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <ssd1306_DrawPixel+0xa4>)
 8002ffe:	54d1      	strb	r1, [r2, r3]
 8003000:	e000      	b.n	8003004 <ssd1306_DrawPixel+0x98>
        return;
 8003002:	bf00      	nop
    }
}
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000918 	.word	0x20000918

08003014 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003014:	b590      	push	{r4, r7, lr}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	4604      	mov	r4, r0
 800301c:	1d38      	adds	r0, r7, #4
 800301e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003022:	461a      	mov	r2, r3
 8003024:	4623      	mov	r3, r4
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	4613      	mov	r3, r2
 800302a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b1f      	cmp	r3, #31
 8003030:	d902      	bls.n	8003038 <ssd1306_WriteChar+0x24>
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b7e      	cmp	r3, #126	@ 0x7e
 8003036:	d901      	bls.n	800303c <ssd1306_WriteChar+0x28>
        return 0;
 8003038:	2300      	movs	r3, #0
 800303a:	e06c      	b.n	8003116 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800303c:	4b38      	ldr	r3, [pc, #224]	@ (8003120 <ssd1306_WriteChar+0x10c>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	793b      	ldrb	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	2b80      	cmp	r3, #128	@ 0x80
 8003048:	dc06      	bgt.n	8003058 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800304a:	4b35      	ldr	r3, [pc, #212]	@ (8003120 <ssd1306_WriteChar+0x10c>)
 800304c:	885b      	ldrh	r3, [r3, #2]
 800304e:	461a      	mov	r2, r3
 8003050:	797b      	ldrb	r3, [r7, #5]
 8003052:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003054:	2b40      	cmp	r3, #64	@ 0x40
 8003056:	dd01      	ble.n	800305c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003058:	2300      	movs	r3, #0
 800305a:	e05c      	b.n	8003116 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	e04c      	b.n	80030fc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	3b20      	subs	r3, #32
 8003068:	7979      	ldrb	r1, [r7, #5]
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4619      	mov	r1, r3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	440b      	add	r3, r1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e034      	b.n	80030ec <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003092:	4b23      	ldr	r3, [pc, #140]	@ (8003120 <ssd1306_WriteChar+0x10c>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4413      	add	r3, r2
 800309e:	b2d8      	uxtb	r0, r3
 80030a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <ssd1306_WriteChar+0x10c>)
 80030a2:	885b      	ldrh	r3, [r3, #2]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	7bba      	ldrb	r2, [r7, #14]
 80030b0:	4619      	mov	r1, r3
 80030b2:	f7ff ff5b 	bl	8002f6c <ssd1306_DrawPixel>
 80030b6:	e016      	b.n	80030e6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80030b8:	4b19      	ldr	r3, [pc, #100]	@ (8003120 <ssd1306_WriteChar+0x10c>)
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	b2d8      	uxtb	r0, r3
 80030c6:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <ssd1306_WriteChar+0x10c>)
 80030c8:	885b      	ldrh	r3, [r3, #2]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	b2d9      	uxtb	r1, r3
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	f7ff ff43 	bl	8002f6c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	793b      	ldrb	r3, [r7, #4]
 80030ee:	461a      	mov	r2, r3
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d3c5      	bcc.n	8003082 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	797b      	ldrb	r3, [r7, #5]
 80030fe:	461a      	mov	r2, r3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4293      	cmp	r3, r2
 8003104:	d3ad      	bcc.n	8003062 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <ssd1306_WriteChar+0x10c>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	793a      	ldrb	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	b29a      	uxth	r2, r3
 8003110:	4b03      	ldr	r3, [pc, #12]	@ (8003120 <ssd1306_WriteChar+0x10c>)
 8003112:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}
 800311e:	bf00      	nop
 8003120:	20000d18 	.word	0x20000d18

08003124 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	1d38      	adds	r0, r7, #4
 800312e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003132:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003134:	e012      	b.n	800315c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	7818      	ldrb	r0, [r3, #0]
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	1d3a      	adds	r2, r7, #4
 800313e:	ca06      	ldmia	r2, {r1, r2}
 8003140:	f7ff ff68 	bl	8003014 <ssd1306_WriteChar>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d002      	beq.n	8003156 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	e008      	b.n	8003168 <ssd1306_WriteString+0x44>
        }
        str++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3301      	adds	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e8      	bne.n	8003136 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	781b      	ldrb	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	460a      	mov	r2, r1
 800317a:	71fb      	strb	r3, [r7, #7]
 800317c:	4613      	mov	r3, r2
 800317e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	b29a      	uxth	r2, r3
 8003184:	4b05      	ldr	r3, [pc, #20]	@ (800319c <ssd1306_SetCursor+0x2c>)
 8003186:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003188:	79bb      	ldrb	r3, [r7, #6]
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b03      	ldr	r3, [pc, #12]	@ (800319c <ssd1306_SetCursor+0x2c>)
 800318e:	805a      	strh	r2, [r3, #2]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	20000d18 	.word	0x20000d18

080031a0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80031aa:	2381      	movs	r3, #129	@ 0x81
 80031ac:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fdff 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fdfb 	bl	8002db4 <ssd1306_WriteCommand>
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80031d8:	23af      	movs	r3, #175	@ 0xaf
 80031da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80031dc:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <ssd1306_SetDisplayOn+0x38>)
 80031de:	2201      	movs	r2, #1
 80031e0:	715a      	strb	r2, [r3, #5]
 80031e2:	e004      	b.n	80031ee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80031e4:	23ae      	movs	r3, #174	@ 0xae
 80031e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80031e8:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <ssd1306_SetDisplayOn+0x38>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fddf 	bl	8002db4 <ssd1306_WriteCommand>
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000d18 	.word	0x20000d18

08003204 <statemachine>:
extern int flag_drop;

int send_data_len=0;


void statemachine(void){
 8003204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af06      	add	r7, sp, #24

	switch(state){
 800320c:	4b94      	ldr	r3, [pc, #592]	@ (8003460 <statemachine+0x25c>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b02      	cmp	r3, #2
 8003212:	f000 80fc 	beq.w	800340e <statemachine+0x20a>
 8003216:	2b02      	cmp	r3, #2
 8003218:	f300 811d 	bgt.w	8003456 <statemachine+0x252>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <statemachine+0x24>
 8003220:	2b01      	cmp	r3, #1
 8003222:	f000 8085 	beq.w	8003330 <statemachine+0x12c>


	}


}
 8003226:	e116      	b.n	8003456 <statemachine+0x252>
			if (vbat <= 7){
 8003228:	4b8e      	ldr	r3, [pc, #568]	@ (8003464 <statemachine+0x260>)
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8003232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	d81d      	bhi.n	8003278 <statemachine+0x74>
				ssd1306_Fill(Black);
 800323c:	2000      	movs	r0, #0
 800323e:	f7ff fe55 	bl	8002eec <ssd1306_Fill>
				ssd1306_SetCursor(32, 40);
 8003242:	2128      	movs	r1, #40	@ 0x28
 8003244:	2020      	movs	r0, #32
 8003246:	f7ff ff93 	bl	8003170 <ssd1306_SetCursor>
				ssd1306_WriteString("BAT LOW", Font_7x10, White);
 800324a:	4a87      	ldr	r2, [pc, #540]	@ (8003468 <statemachine+0x264>)
 800324c:	2301      	movs	r3, #1
 800324e:	ca06      	ldmia	r2, {r1, r2}
 8003250:	4886      	ldr	r0, [pc, #536]	@ (800346c <statemachine+0x268>)
 8003252:	f7ff ff67 	bl	8003124 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8003256:	f7ff fe61 	bl	8002f1c <ssd1306_UpdateScreen>
				send_data_len=snprintf((char *) buffertosend,224,"$2,batterie faible#");
 800325a:	4a85      	ldr	r2, [pc, #532]	@ (8003470 <statemachine+0x26c>)
 800325c:	21e0      	movs	r1, #224	@ 0xe0
 800325e:	4885      	ldr	r0, [pc, #532]	@ (8003474 <statemachine+0x270>)
 8003260:	f00a f86e 	bl	800d340 <sniprintf>
 8003264:	4603      	mov	r3, r0
 8003266:	4a84      	ldr	r2, [pc, #528]	@ (8003478 <statemachine+0x274>)
 8003268:	6013      	str	r3, [r2, #0]
				SEND_DATA_NETW1((char *) buffertosend, 0x82, GROUND_ADDR, send_data_len);
 800326a:	4b83      	ldr	r3, [pc, #524]	@ (8003478 <statemachine+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	2182      	movs	r1, #130	@ 0x82
 8003272:	4880      	ldr	r0, [pc, #512]	@ (8003474 <statemachine+0x270>)
 8003274:	f000 fc52 	bl	8003b1c <SEND_DATA_NETW1>
			if(flag_calib==0){
 8003278:	4b80      	ldr	r3, [pc, #512]	@ (800347c <statemachine+0x278>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d127      	bne.n	80032d0 <statemachine+0xcc>
				ssd1306_Fill(Black);
 8003280:	2000      	movs	r0, #0
 8003282:	f7ff fe33 	bl	8002eec <ssd1306_Fill>
				ssd1306_SetCursor(32, 32);
 8003286:	2120      	movs	r1, #32
 8003288:	2020      	movs	r0, #32
 800328a:	f7ff ff71 	bl	8003170 <ssd1306_SetCursor>
				ssd1306_WriteString("attention", Font_7x10, White);
 800328e:	4a76      	ldr	r2, [pc, #472]	@ (8003468 <statemachine+0x264>)
 8003290:	2301      	movs	r3, #1
 8003292:	ca06      	ldmia	r2, {r1, r2}
 8003294:	487a      	ldr	r0, [pc, #488]	@ (8003480 <statemachine+0x27c>)
 8003296:	f7ff ff45 	bl	8003124 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 42);
 800329a:	212a      	movs	r1, #42	@ 0x2a
 800329c:	2020      	movs	r0, #32
 800329e:	f7ff ff67 	bl	8003170 <ssd1306_SetCursor>
				ssd1306_WriteString("alt_calib", Font_7x10, White);
 80032a2:	4a71      	ldr	r2, [pc, #452]	@ (8003468 <statemachine+0x264>)
 80032a4:	2301      	movs	r3, #1
 80032a6:	ca06      	ldmia	r2, {r1, r2}
 80032a8:	4876      	ldr	r0, [pc, #472]	@ (8003484 <statemachine+0x280>)
 80032aa:	f7ff ff3b 	bl	8003124 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80032ae:	f7ff fe35 	bl	8002f1c <ssd1306_UpdateScreen>
				send_data_len=snprintf((char *) buffertosend,224,"$2,[top]altitude non calibre#");
 80032b2:	4a75      	ldr	r2, [pc, #468]	@ (8003488 <statemachine+0x284>)
 80032b4:	21e0      	movs	r1, #224	@ 0xe0
 80032b6:	486f      	ldr	r0, [pc, #444]	@ (8003474 <statemachine+0x270>)
 80032b8:	f00a f842 	bl	800d340 <sniprintf>
 80032bc:	4603      	mov	r3, r0
 80032be:	4a6e      	ldr	r2, [pc, #440]	@ (8003478 <statemachine+0x274>)
 80032c0:	6013      	str	r3, [r2, #0]
				SEND_DATA_NETW1((uint8_t *) buffertosend, 0x82,  GROUND_ADDR, send_data_len);
 80032c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003478 <statemachine+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	2182      	movs	r1, #130	@ 0x82
 80032ca:	486a      	ldr	r0, [pc, #424]	@ (8003474 <statemachine+0x270>)
 80032cc:	f000 fc26 	bl	8003b1c <SEND_DATA_NETW1>
			if (myDataGPS.fix == 0){
 80032d0:	4b6e      	ldr	r3, [pc, #440]	@ (800348c <statemachine+0x288>)
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11a      	bne.n	800330e <statemachine+0x10a>
					send_data_len=snprintf((char *) buffertosend,224,"$2,pas de GPS#");
 80032d8:	4a6d      	ldr	r2, [pc, #436]	@ (8003490 <statemachine+0x28c>)
 80032da:	21e0      	movs	r1, #224	@ 0xe0
 80032dc:	4865      	ldr	r0, [pc, #404]	@ (8003474 <statemachine+0x270>)
 80032de:	f00a f82f 	bl	800d340 <sniprintf>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4a64      	ldr	r2, [pc, #400]	@ (8003478 <statemachine+0x274>)
 80032e6:	6013      	str	r3, [r2, #0]
					SEND_DATA_NETW1((uint8_t *) buffertosend, 0x82,  GROUND_ADDR, send_data_len);
 80032e8:	4b63      	ldr	r3, [pc, #396]	@ (8003478 <statemachine+0x274>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	2182      	movs	r1, #130	@ 0x82
 80032f0:	4860      	ldr	r0, [pc, #384]	@ (8003474 <statemachine+0x270>)
 80032f2:	f000 fc13 	bl	8003b1c <SEND_DATA_NETW1>
					ssd1306_SetCursor(32, 52);
 80032f6:	2134      	movs	r1, #52	@ 0x34
 80032f8:	2020      	movs	r0, #32
 80032fa:	f7ff ff39 	bl	8003170 <ssd1306_SetCursor>
					ssd1306_WriteString("gps_fix", Font_7x10, White);
 80032fe:	4a5a      	ldr	r2, [pc, #360]	@ (8003468 <statemachine+0x264>)
 8003300:	2301      	movs	r3, #1
 8003302:	ca06      	ldmia	r2, {r1, r2}
 8003304:	4863      	ldr	r0, [pc, #396]	@ (8003494 <statemachine+0x290>)
 8003306:	f7ff ff0d 	bl	8003124 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 800330a:	f7ff fe07 	bl	8002f1c <ssd1306_UpdateScreen>
			if((flag_drop==1) && (flag_calib==1)){
 800330e:	4b62      	ldr	r3, [pc, #392]	@ (8003498 <statemachine+0x294>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	f040 809e 	bne.w	8003454 <statemachine+0x250>
 8003318:	4b58      	ldr	r3, [pc, #352]	@ (800347c <statemachine+0x278>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	f040 8099 	bne.w	8003454 <statemachine+0x250>
				state++;
 8003322:	4b4f      	ldr	r3, [pc, #316]	@ (8003460 <statemachine+0x25c>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	3301      	adds	r3, #1
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4b4d      	ldr	r3, [pc, #308]	@ (8003460 <statemachine+0x25c>)
 800332c:	701a      	strb	r2, [r3, #0]
		break;
 800332e:	e091      	b.n	8003454 <statemachine+0x250>
		send_data_len=snprintf((char *) buffertosend,224,"$3,0.7f,0.7f,0.2f#",myDataGPS.latitude,myDataGPS.longitude,myDatabmp581.altitude);
 8003330:	4b56      	ldr	r3, [pc, #344]	@ (800348c <statemachine+0x288>)
 8003332:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003336:	4b55      	ldr	r3, [pc, #340]	@ (800348c <statemachine+0x288>)
 8003338:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800333c:	4b57      	ldr	r3, [pc, #348]	@ (800349c <statemachine+0x298>)
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f929 	bl	8000598 <__aeabi_f2d>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800334e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003352:	e9cd 4500 	strd	r4, r5, [sp]
 8003356:	4a52      	ldr	r2, [pc, #328]	@ (80034a0 <statemachine+0x29c>)
 8003358:	21e0      	movs	r1, #224	@ 0xe0
 800335a:	4846      	ldr	r0, [pc, #280]	@ (8003474 <statemachine+0x270>)
 800335c:	f009 fff0 	bl	800d340 <sniprintf>
 8003360:	4603      	mov	r3, r0
 8003362:	4a45      	ldr	r2, [pc, #276]	@ (8003478 <statemachine+0x274>)
 8003364:	6013      	str	r3, [r2, #0]
		SEND_DATA_NETW1((uint8_t *) buffertosend, 0x82, GROUND_ADDR, send_data_len);
 8003366:	4b44      	ldr	r3, [pc, #272]	@ (8003478 <statemachine+0x274>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2201      	movs	r2, #1
 800336c:	2182      	movs	r1, #130	@ 0x82
 800336e:	4841      	ldr	r0, [pc, #260]	@ (8003474 <statemachine+0x270>)
 8003370:	f000 fbd4 	bl	8003b1c <SEND_DATA_NETW1>
		if((myDatabmp581.altitude-hauteur_Initiale)<=60.0){
 8003374:	4b49      	ldr	r3, [pc, #292]	@ (800349c <statemachine+0x298>)
 8003376:	ed93 7a05 	vldr	s14, [r3, #20]
 800337a:	4b4a      	ldr	r3, [pc, #296]	@ (80034a4 <statemachine+0x2a0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800338a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80034a8 <statemachine+0x2a4>
 800338e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	d900      	bls.n	800339a <statemachine+0x196>
		break;
 8003398:	e05d      	b.n	8003456 <statemachine+0x252>
			state++;
 800339a:	4b31      	ldr	r3, [pc, #196]	@ (8003460 <statemachine+0x25c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003460 <statemachine+0x25c>)
 80033a4:	701a      	strb	r2, [r3, #0]
			release_mecanism();
 80033a6:	f7ff fce1 	bl	8002d6c <release_mecanism>
			send_data_len=snprintf((char *) buffertosend,224,"$1,separation#");
 80033aa:	4a40      	ldr	r2, [pc, #256]	@ (80034ac <statemachine+0x2a8>)
 80033ac:	21e0      	movs	r1, #224	@ 0xe0
 80033ae:	4831      	ldr	r0, [pc, #196]	@ (8003474 <statemachine+0x270>)
 80033b0:	f009 ffc6 	bl	800d340 <sniprintf>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4a30      	ldr	r2, [pc, #192]	@ (8003478 <statemachine+0x274>)
 80033b8:	6013      	str	r3, [r2, #0]
			SEND_DATA_NETW1((uint8_t *) buffertosend, 0x82, GROUND_ADDR, send_data_len);
 80033ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003478 <statemachine+0x274>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2201      	movs	r2, #1
 80033c0:	2182      	movs	r1, #130	@ 0x82
 80033c2:	482c      	ldr	r0, [pc, #176]	@ (8003474 <statemachine+0x270>)
 80033c4:	f000 fbaa 	bl	8003b1c <SEND_DATA_NETW1>
			send_data_len=snprintf((char *) buffertosend,224,"$1,0.2f\n\r",(myDatabmp581.altitude-hauteur_Initiale));
 80033c8:	4b34      	ldr	r3, [pc, #208]	@ (800349c <statemachine+0x298>)
 80033ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80033ce:	4b35      	ldr	r3, [pc, #212]	@ (80034a4 <statemachine+0x2a0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033de:	ee17 0a90 	vmov	r0, s15
 80033e2:	f7fd f8d9 	bl	8000598 <__aeabi_f2d>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	e9cd 2300 	strd	r2, r3, [sp]
 80033ee:	4a30      	ldr	r2, [pc, #192]	@ (80034b0 <statemachine+0x2ac>)
 80033f0:	21e0      	movs	r1, #224	@ 0xe0
 80033f2:	4820      	ldr	r0, [pc, #128]	@ (8003474 <statemachine+0x270>)
 80033f4:	f009 ffa4 	bl	800d340 <sniprintf>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003478 <statemachine+0x274>)
 80033fc:	6013      	str	r3, [r2, #0]
			SEND_DATA_NETW1((uint8_t *) buffertosend, 0x82, BOTTOM_ADDR, send_data_len);
 80033fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003478 <statemachine+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2216      	movs	r2, #22
 8003404:	2182      	movs	r1, #130	@ 0x82
 8003406:	481b      	ldr	r0, [pc, #108]	@ (8003474 <statemachine+0x270>)
 8003408:	f000 fb88 	bl	8003b1c <SEND_DATA_NETW1>
		break;
 800340c:	e023      	b.n	8003456 <statemachine+0x252>
		send_data_len=snprintf((char *) buffertosend,224,"$3,0.7f,0.7f,0.2f#",myDataGPS.latitude,myDataGPS.longitude,myDatabmp581.altitude);
 800340e:	4b1f      	ldr	r3, [pc, #124]	@ (800348c <statemachine+0x288>)
 8003410:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003414:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <statemachine+0x288>)
 8003416:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800341a:	4b20      	ldr	r3, [pc, #128]	@ (800349c <statemachine+0x298>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd f8ba 	bl	8000598 <__aeabi_f2d>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800342c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003430:	e9cd 4500 	strd	r4, r5, [sp]
 8003434:	4a1a      	ldr	r2, [pc, #104]	@ (80034a0 <statemachine+0x29c>)
 8003436:	21e0      	movs	r1, #224	@ 0xe0
 8003438:	480e      	ldr	r0, [pc, #56]	@ (8003474 <statemachine+0x270>)
 800343a:	f009 ff81 	bl	800d340 <sniprintf>
 800343e:	4603      	mov	r3, r0
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <statemachine+0x274>)
 8003442:	6013      	str	r3, [r2, #0]
		SEND_DATA_NETW((uint8_t *) buffertosend, 0x82, BOTTOM_ADDR, send_data_len);
 8003444:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <statemachine+0x274>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2216      	movs	r2, #22
 800344a:	2182      	movs	r1, #130	@ 0x82
 800344c:	4809      	ldr	r0, [pc, #36]	@ (8003474 <statemachine+0x270>)
 800344e:	f000 faf7 	bl	8003a40 <SEND_DATA_NETW>
		break;
 8003452:	e000      	b.n	8003456 <statemachine+0x252>
		break;
 8003454:	bf00      	nop
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800345e:	bf00      	nop
 8003460:	200008c8 	.word	0x200008c8
 8003464:	200003a4 	.word	0x200003a4
 8003468:	20000008 	.word	0x20000008
 800346c:	0801044c 	.word	0x0801044c
 8003470:	08010454 	.word	0x08010454
 8003474:	20000d20 	.word	0x20000d20
 8003478:	20000e00 	.word	0x20000e00
 800347c:	200008d4 	.word	0x200008d4
 8003480:	08010468 	.word	0x08010468
 8003484:	08010474 	.word	0x08010474
 8003488:	08010480 	.word	0x08010480
 800348c:	20000710 	.word	0x20000710
 8003490:	080104a0 	.word	0x080104a0
 8003494:	080104b0 	.word	0x080104b0
 8003498:	200008cc 	.word	0x200008cc
 800349c:	20000770 	.word	0x20000770
 80034a0:	080104b8 	.word	0x080104b8
 80034a4:	200008d0 	.word	0x200008d0
 80034a8:	42700000 	.word	0x42700000
 80034ac:	080104cc 	.word	0x080104cc
 80034b0:	080104dc 	.word	0x080104dc

080034b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <HAL_MspInit+0x44>)
 80034bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034be:	4a0e      	ldr	r2, [pc, #56]	@ (80034f8 <HAL_MspInit+0x44>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80034c6:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_MspInit+0x44>)
 80034c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_MspInit+0x44>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d6:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <HAL_MspInit+0x44>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_MspInit+0x44>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80034ea:	f004 fab1 	bl	8007a50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000

080034fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003500:	bf00      	nop
 8003502:	e7fd      	b.n	8003500 <NMI_Handler+0x4>

08003504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <HardFault_Handler+0x4>

0800350c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <MemManage_Handler+0x4>

08003514 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <BusFault_Handler+0x4>

0800351c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <UsageFault_Handler+0x4>

08003524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003552:	f001 f88d 	bl	8004670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}

0800355a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800355e:	2002      	movs	r0, #2
 8003560:	f003 fb96 	bl	8006c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}

08003568 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800356c:	2010      	movs	r0, #16
 800356e:	f003 fb8f 	bl	8006c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 800357c:	4802      	ldr	r0, [pc, #8]	@ (8003588 <DMA1_Channel1_IRQHandler+0x10>)
 800357e:	f003 f860 	bl	8006642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000f38 	.word	0x20000f38

0800358c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003590:	4802      	ldr	r0, [pc, #8]	@ (800359c <DMA1_Channel2_IRQHandler+0x10>)
 8003592:	f003 f856 	bl	8006642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000270 	.word	0x20000270

080035a0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80035a4:	4802      	ldr	r0, [pc, #8]	@ (80035b0 <DMA1_Channel3_IRQHandler+0x10>)
 80035a6:	f003 f84c 	bl	8006642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200010c0 	.word	0x200010c0

080035b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80035b8:	4802      	ldr	r0, [pc, #8]	@ (80035c4 <DMA1_Channel5_IRQHandler+0x10>)
 80035ba:	f003 f842 	bl	8006642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20001120 	.word	0x20001120

080035c8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80035cc:	4802      	ldr	r0, [pc, #8]	@ (80035d8 <ADC1_2_IRQHandler+0x10>)
 80035ce:	f001 fd07 	bl	8004fe0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000204 	.word	0x20000204

080035dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035e0:	4802      	ldr	r0, [pc, #8]	@ (80035ec <TIM3_IRQHandler+0x10>)
 80035e2:	f005 fe93 	bl	800930c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000e54 	.word	0x20000e54

080035f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(timestamp==0){
 80035f4:	4b05      	ldr	r3, [pc, #20]	@ (800360c <TIM4_IRQHandler+0x1c>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <TIM4_IRQHandler+0x12>
			timestamp=1;
 80035fc:	4b03      	ldr	r3, [pc, #12]	@ (800360c <TIM4_IRQHandler+0x1c>)
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003602:	4803      	ldr	r0, [pc, #12]	@ (8003610 <TIM4_IRQHandler+0x20>)
 8003604:	f005 fe82 	bl	800930c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003608:	bf00      	nop
 800360a:	bd80      	pop	{r7, pc}
 800360c:	200008c2 	.word	0x200008c2
 8003610:	20000ea0 	.word	0x20000ea0

08003614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003618:	4802      	ldr	r0, [pc, #8]	@ (8003624 <USART1_IRQHandler+0x10>)
 800361a:	f007 fa37 	bl	800aa8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000102c 	.word	0x2000102c

08003628 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	HAL_GPIO_TogglePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin);
 800362c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003630:	4803      	ldr	r0, [pc, #12]	@ (8003640 <TIM6_DAC_IRQHandler+0x18>)
 8003632:	f003 fb13 	bl	8006c5c <HAL_GPIO_TogglePin>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003636:	4803      	ldr	r0, [pc, #12]	@ (8003644 <TIM6_DAC_IRQHandler+0x1c>)
 8003638:	f005 fe68 	bl	800930c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}
 8003640:	48000400 	.word	0x48000400
 8003644:	20000eec 	.word	0x20000eec

08003648 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800364c:	4802      	ldr	r0, [pc, #8]	@ (8003658 <LPUART1_IRQHandler+0x10>)
 800364e:	f007 fa1d 	bl	800aa8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000f98 	.word	0x20000f98

0800365c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return 1;
 8003660:	2301      	movs	r3, #1
}
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <_kill>:

int _kill(int pid, int sig)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003676:	f00a f853 	bl	800d720 <__errno>
 800367a:	4603      	mov	r3, r0
 800367c:	2216      	movs	r2, #22
 800367e:	601a      	str	r2, [r3, #0]
  return -1;
 8003680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <_exit>:

void _exit (int status)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ffe7 	bl	800366c <_kill>
  while (1) {}    /* Make sure we hang here */
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <_exit+0x12>

080036a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e00a      	b.n	80036ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036b4:	f3af 8000 	nop.w
 80036b8:	4601      	mov	r1, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	60ba      	str	r2, [r7, #8]
 80036c0:	b2ca      	uxtb	r2, r1
 80036c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	3301      	adds	r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	dbf0      	blt.n	80036b4 <_read+0x12>
  }

  return len;
 80036d2:	687b      	ldr	r3, [r7, #4]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e009      	b.n	8003702 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	60ba      	str	r2, [r7, #8]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3301      	adds	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	dbf1      	blt.n	80036ee <_write+0x12>
  }
  return len;
 800370a:	687b      	ldr	r3, [r7, #4]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <_close>:

int _close(int file)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800373c:	605a      	str	r2, [r3, #4]
  return 0;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <_isatty>:

int _isatty(int file)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003754:	2301      	movs	r3, #1
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003784:	4a14      	ldr	r2, [pc, #80]	@ (80037d8 <_sbrk+0x5c>)
 8003786:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <_sbrk+0x60>)
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003790:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <_sbrk+0x64>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <_sbrk+0x64>)
 800379a:	4a12      	ldr	r2, [pc, #72]	@ (80037e4 <_sbrk+0x68>)
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800379e:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <_sbrk+0x64>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d207      	bcs.n	80037bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037ac:	f009 ffb8 	bl	800d720 <__errno>
 80037b0:	4603      	mov	r3, r0
 80037b2:	220c      	movs	r2, #12
 80037b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e009      	b.n	80037d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037bc:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <_sbrk+0x64>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037c2:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <_sbrk+0x64>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	4a05      	ldr	r2, [pc, #20]	@ (80037e0 <_sbrk+0x64>)
 80037cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ce:	68fb      	ldr	r3, [r7, #12]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20008000 	.word	0x20008000
 80037dc:	00000400 	.word	0x00000400
 80037e0:	20000e04 	.word	0x20000e04
 80037e4:	200012d0 	.word	0x200012d0

080037e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <SystemInit+0x20>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f2:	4a05      	ldr	r2, [pc, #20]	@ (8003808 <SystemInit+0x20>)
 80037f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b08e      	sub	sp, #56	@ 0x38
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	460a      	mov	r2, r1
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	4613      	mov	r3, r2
 800381a:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 800381c:	2306      	movs	r3, #6
 800381e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 8003822:	2304      	movs	r3, #4
 8003824:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 800382e:	4a6f      	ldr	r2, [pc, #444]	@ (80039ec <INIT_PERM_TARVOS+0x1e0>)
 8003830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003838:	6018      	str	r0, [r3, #0]
 800383a:	3304      	adds	r3, #4
 800383c:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 800383e:	4a6c      	ldr	r2, [pc, #432]	@ (80039f0 <INIT_PERM_TARVOS+0x1e4>)
 8003840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003848:	6018      	str	r0, [r3, #0]
 800384a:	3304      	adds	r3, #4
 800384c:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 800384e:	4a69      	ldr	r2, [pc, #420]	@ (80039f4 <INIT_PERM_TARVOS+0x1e8>)
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003858:	6018      	str	r0, [r3, #0]
 800385a:	3304      	adds	r3, #4
 800385c:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 800385e:	2302      	movs	r3, #2
 8003860:	753b      	strb	r3, [r7, #20]
 8003862:	2309      	movs	r3, #9
 8003864:	757b      	strb	r3, [r7, #21]
 8003866:	2302      	movs	r3, #2
 8003868:	75bb      	strb	r3, [r7, #22]
 800386a:	230b      	movs	r3, #11
 800386c:	75fb      	strb	r3, [r7, #23]
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	763b      	strb	r3, [r7, #24]
 8003872:	2300      	movs	r3, #0
 8003874:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8003876:	2302      	movs	r3, #2
 8003878:	733b      	strb	r3, [r7, #12]
 800387a:	2309      	movs	r3, #9
 800387c:	737b      	strb	r3, [r7, #13]
 800387e:	2302      	movs	r3, #2
 8003880:	73bb      	strb	r3, [r7, #14]
 8003882:	2308      	movs	r3, #8
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	79bb      	ldrb	r3, [r7, #6]
 8003888:	743b      	strb	r3, [r7, #16]
 800388a:	2300      	movs	r3, #0
 800388c:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 800388e:	4b5a      	ldr	r3, [pc, #360]	@ (80039f8 <INIT_PERM_TARVOS+0x1ec>)
 8003890:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 8003892:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f8ac 	bl	8003a00 <Get_CRC8>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 80038ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80038b8:	2364      	movs	r3, #100	@ 0x64
 80038ba:	4850      	ldr	r0, [pc, #320]	@ (80039fc <INIT_PERM_TARVOS+0x1f0>)
 80038bc:	f006 fefe 	bl	800a6bc <HAL_UART_Transmit>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 80038cc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f88f 	bl	8003a00 <Get_CRC8>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 80038e8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80038f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80038f6:	4841      	ldr	r0, [pc, #260]	@ (80039fc <INIT_PERM_TARVOS+0x1f0>)
 80038f8:	f006 fee0 	bl	800a6bc <HAL_UART_Transmit>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 8003908:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f000 f871 	bl	8003a00 <Get_CRC8>
 800391e:	4603      	mov	r3, r0
 8003920:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 8003924:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003928:	b29a      	uxth	r2, r3
 800392a:	f107 011c 	add.w	r1, r7, #28
 800392e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003932:	4832      	ldr	r0, [pc, #200]	@ (80039fc <INIT_PERM_TARVOS+0x1f0>)
 8003934:	f006 fec2 	bl	800a6bc <HAL_UART_Transmit>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 8003944:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	f107 0314 	add.w	r3, r7, #20
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f853 	bl	8003a00 <Get_CRC8>
 800395a:	4603      	mov	r3, r0
 800395c:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 800395e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003962:	b29a      	uxth	r2, r3
 8003964:	f107 0114 	add.w	r1, r7, #20
 8003968:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800396c:	4823      	ldr	r0, [pc, #140]	@ (80039fc <INIT_PERM_TARVOS+0x1f0>)
 800396e:	f006 fea5 	bl	800a6bc <HAL_UART_Transmit>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 800397e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	f107 030c 	add.w	r3, r7, #12
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f836 	bl	8003a00 <Get_CRC8>
 8003994:	4603      	mov	r3, r0
 8003996:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8003998:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800399c:	b29a      	uxth	r2, r3
 800399e:	f107 010c 	add.w	r1, r7, #12
 80039a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80039a6:	4815      	ldr	r0, [pc, #84]	@ (80039fc <INIT_PERM_TARVOS+0x1f0>)
 80039a8:	f006 fe88 	bl	800a6bc <HAL_UART_Transmit>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 80039b8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80039bc:	b29a      	uxth	r2, r3
 80039be:	f107 0108 	add.w	r1, r7, #8
 80039c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80039c6:	480d      	ldr	r0, [pc, #52]	@ (80039fc <INIT_PERM_TARVOS+0x1f0>)
 80039c8:	f006 fe78 	bl	800a6bc <HAL_UART_Transmit>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 80039d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039dc:	f000 fe66 	bl	80046ac <HAL_Delay>
    return status;
 80039e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3738      	adds	r7, #56	@ 0x38
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	0801050c 	.word	0x0801050c
 80039f0:	08010514 	.word	0x08010514
 80039f4:	0801051c 	.word	0x0801051c
 80039f8:	07000502 	.word	0x07000502
 80039fc:	20000f98 	.word	0x20000f98

08003a00 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8003a10:	2300      	movs	r3, #0
 8003a12:	81bb      	strh	r3, [r7, #12]
 8003a14:	e009      	b.n	8003a2a <Get_CRC8+0x2a>
		crc ^= bufP[i];
 8003a16:	89bb      	ldrh	r3, [r7, #12]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	4053      	eors	r3, r2
 8003a22:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8003a24:	89bb      	ldrh	r3, [r7, #12]
 8003a26:	3301      	adds	r3, #1
 8003a28:	81bb      	strh	r3, [r7, #12]
 8003a2a:	89ba      	ldrh	r2, [r7, #12]
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d3f1      	bcc.n	8003a16 <Get_CRC8+0x16>
	}
	return crc;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <SEND_DATA_NETW>:



int SEND_DATA_NETW(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	72fb      	strb	r3, [r7, #11]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef status=HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferindex=0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75bb      	strb	r3, [r7, #22]
	memset((uint8_t *) tarvos_TX_Buffer,256,'\0');

	if(length>=250){
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2bf9      	cmp	r3, #249	@ 0xf9
 8003a5e:	dd01      	ble.n	8003a64 <SEND_DATA_NETW+0x24>
		return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e052      	b.n	8003b0a <SEND_DATA_NETW+0xca>
	}

    // Initialisation de l'en-tête

	tarvos_TX_Buffer[bufferindex]= 0x02;
 8003a64:	7dbb      	ldrb	r3, [r7, #22]
 8003a66:	4a2b      	ldr	r2, [pc, #172]	@ (8003b14 <SEND_DATA_NETW+0xd4>)
 8003a68:	2102      	movs	r1, #2
 8003a6a:	54d1      	strb	r1, [r2, r3]
	bufferindex++;// Start byte
 8003a6c:	7dbb      	ldrb	r3, [r7, #22]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	75bb      	strb	r3, [r7, #22]
	tarvos_TX_Buffer[bufferindex]= 0x01;
 8003a72:	7dbb      	ldrb	r3, [r7, #22]
 8003a74:	4a27      	ldr	r2, [pc, #156]	@ (8003b14 <SEND_DATA_NETW+0xd4>)
 8003a76:	2101      	movs	r1, #1
 8003a78:	54d1      	strb	r1, [r2, r3]
	bufferindex++;// Command identifier
 8003a7a:	7dbb      	ldrb	r3, [r7, #22]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	75bb      	strb	r3, [r7, #22]
	tarvos_TX_Buffer[bufferindex]= length + 2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	7dbb      	ldrb	r3, [r7, #22]
 8003a86:	3202      	adds	r2, #2
 8003a88:	b2d1      	uxtb	r1, r2
 8003a8a:	4a22      	ldr	r2, [pc, #136]	@ (8003b14 <SEND_DATA_NETW+0xd4>)
 8003a8c:	54d1      	strb	r1, [r2, r3]
	bufferindex++;// Longueur totale (length + channel + dest_adress)
 8003a8e:	7dbb      	ldrb	r3, [r7, #22]
 8003a90:	3301      	adds	r3, #1
 8003a92:	75bb      	strb	r3, [r7, #22]
	tarvos_TX_Buffer[bufferindex]= channel;
 8003a94:	7dbb      	ldrb	r3, [r7, #22]
 8003a96:	491f      	ldr	r1, [pc, #124]	@ (8003b14 <SEND_DATA_NETW+0xd4>)
 8003a98:	7afa      	ldrb	r2, [r7, #11]
 8003a9a:	54ca      	strb	r2, [r1, r3]
	bufferindex++;// Canal
 8003a9c:	7dbb      	ldrb	r3, [r7, #22]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	75bb      	strb	r3, [r7, #22]
	tarvos_TX_Buffer[bufferindex]= dest_adress; // Adresse de destination
 8003aa2:	7dbb      	ldrb	r3, [r7, #22]
 8003aa4:	491b      	ldr	r1, [pc, #108]	@ (8003b14 <SEND_DATA_NETW+0xd4>)
 8003aa6:	7aba      	ldrb	r2, [r7, #10]
 8003aa8:	54ca      	strb	r2, [r1, r3]

	bufferindex++;
 8003aaa:	7dbb      	ldrb	r3, [r7, #22]
 8003aac:	3301      	adds	r3, #1
 8003aae:	75bb      	strb	r3, [r7, #22]

    // Copie des données dans la trame
    for (int i = 0; i < length; i++) {
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	e00c      	b.n	8003ad0 <SEND_DATA_NETW+0x90>
    	tarvos_TX_Buffer[bufferindex]=data[i];
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	441a      	add	r2, r3
 8003abc:	7dbb      	ldrb	r3, [r7, #22]
 8003abe:	7811      	ldrb	r1, [r2, #0]
 8003ac0:	4a14      	ldr	r2, [pc, #80]	@ (8003b14 <SEND_DATA_NETW+0xd4>)
 8003ac2:	54d1      	strb	r1, [r2, r3]
    	bufferindex++;
 8003ac4:	7dbb      	ldrb	r3, [r7, #22]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	75bb      	strb	r3, [r7, #22]
    for (int i = 0; i < length; i++) {
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3301      	adds	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	dbee      	blt.n	8003ab6 <SEND_DATA_NETW+0x76>




    // Calcul du CRC (sur tout sauf le CRC lui-même)
    tarvos_TX_Buffer[bufferindex]= Get_CRC8((uint8_t *)(tarvos_TX_Buffer), bufferindex);///////pas surrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr///
 8003ad8:	7dbb      	ldrb	r3, [r7, #22]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	7dbc      	ldrb	r4, [r7, #22]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	480c      	ldr	r0, [pc, #48]	@ (8003b14 <SEND_DATA_NETW+0xd4>)
 8003ae2:	f7ff ff8d 	bl	8003a00 <Get_CRC8>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <SEND_DATA_NETW+0xd4>)
 8003aec:	551a      	strb	r2, [r3, r4]


    if( HAL_UART_Transmit(&hlpuart1,(uint8_t *) tarvos_TX_Buffer, bufferindex,1000)!=HAL_OK){
 8003aee:	7dbb      	ldrb	r3, [r7, #22]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003af6:	4907      	ldr	r1, [pc, #28]	@ (8003b14 <SEND_DATA_NETW+0xd4>)
 8003af8:	4807      	ldr	r0, [pc, #28]	@ (8003b18 <SEND_DATA_NETW+0xd8>)
 8003afa:	f006 fddf 	bl	800a6bc <HAL_UART_Transmit>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <SEND_DATA_NETW+0xc8>
    	status=HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]

}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd90      	pop	{r4, r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200003a8 	.word	0x200003a8
 8003b18:	20000f98 	.word	0x20000f98

08003b1c <SEND_DATA_NETW1>:

void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 8003b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	b088      	sub	sp, #32
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	72fb      	strb	r3, [r7, #11]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	72bb      	strb	r3, [r7, #10]
 8003b30:	466b      	mov	r3, sp
 8003b32:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1d9e      	adds	r6, r3, #6
 8003b38:	1e73      	subs	r3, r6, #1
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	2300      	movs	r3, #0
 8003b40:	4690      	mov	r8, r2
 8003b42:	4699      	mov	r9, r3
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b58:	4632      	mov	r2, r6
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	461d      	mov	r5, r3
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	00eb      	lsls	r3, r5, #3
 8003b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6e:	00e2      	lsls	r2, r4, #3
 8003b70:	4633      	mov	r3, r6
 8003b72:	3307      	adds	r3, #7
 8003b74:	08db      	lsrs	r3, r3, #3
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	ebad 0d03 	sub.w	sp, sp, r3
 8003b7c:	466b      	mov	r3, sp
 8003b7e:	3300      	adds	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2202      	movs	r2, #2
 8003b86:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	3302      	adds	r3, #2
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	7afa      	ldrb	r2, [r7, #11]
 8003b9e:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	7aba      	ldrb	r2, [r7, #10]
 8003ba4:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e00a      	b.n	8003bc2 <SEND_DATA_NETW1+0xa6>
        trame[5 + i] = data[i];
 8003bac:	7ffb      	ldrb	r3, [r7, #31]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	441a      	add	r2, r3
 8003bb2:	7ffb      	ldrb	r3, [r7, #31]
 8003bb4:	3305      	adds	r3, #5
 8003bb6:	7811      	ldrb	r1, [r2, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8003bbc:	7ffb      	ldrb	r3, [r7, #31]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	7ffb      	ldrb	r3, [r7, #31]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	dcf0      	bgt.n	8003bac <SEND_DATA_NETW1+0x90>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3305      	adds	r3, #5
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	1d5c      	adds	r4, r3, #5
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	6978      	ldr	r0, [r7, #20]
 8003bda:	f7ff ff11 	bl	8003a00 <Get_CRC8>
 8003bde:	4603      	mov	r3, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 8003be6:	b2b2      	uxth	r2, r6
 8003be8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	4804      	ldr	r0, [pc, #16]	@ (8003c00 <SEND_DATA_NETW1+0xe4>)
 8003bf0:	f006 fd64 	bl	800a6bc <HAL_UART_Transmit>
 8003bf4:	46d5      	mov	sp, sl
}
 8003bf6:	bf00      	nop
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c00:	20000f98 	.word	0x20000f98

08003c04 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	@ 0x38
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	605a      	str	r2, [r3, #4]
 8003c14:	609a      	str	r2, [r3, #8]
 8003c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c24:	463b      	mov	r3, r7
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	611a      	str	r2, [r3, #16]
 8003c32:	615a      	str	r2, [r3, #20]
 8003c34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c36:	4b2d      	ldr	r3, [pc, #180]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003c38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c44:	4b29      	ldr	r3, [pc, #164]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 8003c4a:	4b28      	ldr	r3, [pc, #160]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003c4c:	227c      	movs	r2, #124	@ 0x7c
 8003c4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c50:	4b26      	ldr	r3, [pc, #152]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c56:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c5c:	4823      	ldr	r0, [pc, #140]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003c5e:	f004 fe21 	bl	80088a4 <HAL_TIM_Base_Init>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003c68:	f7fe fca2 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c76:	4619      	mov	r1, r3
 8003c78:	481c      	ldr	r0, [pc, #112]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003c7a:	f005 fdab 	bl	80097d4 <HAL_TIM_ConfigClockSource>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003c84:	f7fe fc94 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c88:	4818      	ldr	r0, [pc, #96]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003c8a:	f004 fecd 	bl	8008a28 <HAL_TIM_PWM_Init>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003c94:	f7fe fc8c 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4811      	ldr	r0, [pc, #68]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003ca8:	f006 fbf0 	bl	800a48c <HAL_TIMEx_MasterConfigSynchronization>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003cb2:	f7fe fc7d 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cb6:	2360      	movs	r3, #96	@ 0x60
 8003cb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	2204      	movs	r2, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4807      	ldr	r0, [pc, #28]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003cce:	f005 fc6d 	bl	80095ac <HAL_TIM_PWM_ConfigChannel>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003cd8:	f7fe fc6a 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003cdc:	4803      	ldr	r0, [pc, #12]	@ (8003cec <MX_TIM2_Init+0xe8>)
 8003cde:	f000 f9a3 	bl	8004028 <HAL_TIM_MspPostInit>

}
 8003ce2:	bf00      	nop
 8003ce4:	3738      	adds	r7, #56	@ 0x38
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000e08 	.word	0x20000e08

08003cf0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08e      	sub	sp, #56	@ 0x38
 8003cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
 8003d00:	609a      	str	r2, [r3, #8]
 8003d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d04:	f107 031c 	add.w	r3, r7, #28
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d10:	463b      	mov	r3, r7
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	611a      	str	r2, [r3, #16]
 8003d1e:	615a      	str	r2, [r3, #20]
 8003d20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d22:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d24:	4a2d      	ldr	r2, [pc, #180]	@ (8003ddc <MX_TIM3_Init+0xec>)
 8003d26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8003d28:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d2a:	2263      	movs	r2, #99	@ 0x63
 8003d2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003d34:	4b28      	ldr	r3, [pc, #160]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d36:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003d3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d3c:	4b26      	ldr	r3, [pc, #152]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d42:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d44:	2280      	movs	r2, #128	@ 0x80
 8003d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d48:	4823      	ldr	r0, [pc, #140]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d4a:	f004 fdab 	bl	80088a4 <HAL_TIM_Base_Init>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003d54:	f7fe fc2c 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d62:	4619      	mov	r1, r3
 8003d64:	481c      	ldr	r0, [pc, #112]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d66:	f005 fd35 	bl	80097d4 <HAL_TIM_ConfigClockSource>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003d70:	f7fe fc1e 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d74:	4818      	ldr	r0, [pc, #96]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d76:	f004 fe57 	bl	8008a28 <HAL_TIM_PWM_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003d80:	f7fe fc16 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d8c:	f107 031c 	add.w	r3, r7, #28
 8003d90:	4619      	mov	r1, r3
 8003d92:	4811      	ldr	r0, [pc, #68]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003d94:	f006 fb7a 	bl	800a48c <HAL_TIMEx_MasterConfigSynchronization>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003d9e:	f7fe fc07 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003da2:	2360      	movs	r3, #96	@ 0x60
 8003da4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003db2:	463b      	mov	r3, r7
 8003db4:	2200      	movs	r2, #0
 8003db6:	4619      	mov	r1, r3
 8003db8:	4807      	ldr	r0, [pc, #28]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003dba:	f005 fbf7 	bl	80095ac <HAL_TIM_PWM_ConfigChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003dc4:	f7fe fbf4 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003dc8:	4803      	ldr	r0, [pc, #12]	@ (8003dd8 <MX_TIM3_Init+0xe8>)
 8003dca:	f000 f92d 	bl	8004028 <HAL_TIM_MspPostInit>

}
 8003dce:	bf00      	nop
 8003dd0:	3738      	adds	r7, #56	@ 0x38
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000e54 	.word	0x20000e54
 8003ddc:	40000400 	.word	0x40000400

08003de0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003de6:	f107 0310 	add.w	r3, r7, #16
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	609a      	str	r2, [r3, #8]
 8003df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003e74 <MX_TIM4_Init+0x94>)
 8003e00:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <MX_TIM4_Init+0x98>)
 8003e02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8003e04:	4b1b      	ldr	r3, [pc, #108]	@ (8003e74 <MX_TIM4_Init+0x94>)
 8003e06:	2263      	movs	r2, #99	@ 0x63
 8003e08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e74 <MX_TIM4_Init+0x94>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8003e10:	4b18      	ldr	r3, [pc, #96]	@ (8003e74 <MX_TIM4_Init+0x94>)
 8003e12:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003e16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e18:	4b16      	ldr	r3, [pc, #88]	@ (8003e74 <MX_TIM4_Init+0x94>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e1e:	4b15      	ldr	r3, [pc, #84]	@ (8003e74 <MX_TIM4_Init+0x94>)
 8003e20:	2280      	movs	r2, #128	@ 0x80
 8003e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e24:	4813      	ldr	r0, [pc, #76]	@ (8003e74 <MX_TIM4_Init+0x94>)
 8003e26:	f004 fd3d 	bl	80088a4 <HAL_TIM_Base_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003e30:	f7fe fbbe 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e3a:	f107 0310 	add.w	r3, r7, #16
 8003e3e:	4619      	mov	r1, r3
 8003e40:	480c      	ldr	r0, [pc, #48]	@ (8003e74 <MX_TIM4_Init+0x94>)
 8003e42:	f005 fcc7 	bl	80097d4 <HAL_TIM_ConfigClockSource>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003e4c:	f7fe fbb0 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4805      	ldr	r0, [pc, #20]	@ (8003e74 <MX_TIM4_Init+0x94>)
 8003e5e:	f006 fb15 	bl	800a48c <HAL_TIMEx_MasterConfigSynchronization>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003e68:	f7fe fba2 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e6c:	bf00      	nop
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000ea0 	.word	0x20000ea0
 8003e78:	40000800 	.word	0x40000800

08003e7c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e82:	1d3b      	adds	r3, r7, #4
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003e8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ee4 <MX_TIM6_Init+0x68>)
 8003e8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ee8 <MX_TIM6_Init+0x6c>)
 8003e90:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000-1;
 8003e92:	4b14      	ldr	r3, [pc, #80]	@ (8003ee4 <MX_TIM6_Init+0x68>)
 8003e94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e98:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ee4 <MX_TIM6_Init+0x68>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003ea0:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <MX_TIM6_Init+0x68>)
 8003ea2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003ea6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee4 <MX_TIM6_Init+0x68>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003eae:	480d      	ldr	r0, [pc, #52]	@ (8003ee4 <MX_TIM6_Init+0x68>)
 8003eb0:	f004 fcf8 	bl	80088a4 <HAL_TIM_Base_Init>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003eba:	f7fe fb79 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4806      	ldr	r0, [pc, #24]	@ (8003ee4 <MX_TIM6_Init+0x68>)
 8003ecc:	f006 fade 	bl	800a48c <HAL_TIMEx_MasterConfigSynchronization>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003ed6:	f7fe fb6b 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000eec 	.word	0x20000eec
 8003ee8:	40001000 	.word	0x40001000

08003eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efc:	d136      	bne.n	8003f6c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003efe:	4b44      	ldr	r3, [pc, #272]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	4a43      	ldr	r2, [pc, #268]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f0a:	4b41      	ldr	r3, [pc, #260]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8003f16:	4b3f      	ldr	r3, [pc, #252]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f18:	4a3f      	ldr	r2, [pc, #252]	@ (8004018 <HAL_TIM_Base_MspInit+0x12c>)
 8003f1a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8003f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f1e:	2239      	movs	r2, #57	@ 0x39
 8003f20:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f22:	4b3c      	ldr	r3, [pc, #240]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f24:	2210      	movs	r2, #16
 8003f26:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f28:	4b3a      	ldr	r3, [pc, #232]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003f2e:	4b39      	ldr	r3, [pc, #228]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f30:	2280      	movs	r2, #128	@ 0x80
 8003f32:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f34:	4b37      	ldr	r3, [pc, #220]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f3a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f3c:	4b35      	ldr	r3, [pc, #212]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8003f42:	4b34      	ldr	r3, [pc, #208]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f44:	2220      	movs	r2, #32
 8003f46:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003f48:	4b32      	ldr	r3, [pc, #200]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8003f4e:	4831      	ldr	r0, [pc, #196]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f50:	f002 f994 	bl	800627c <HAL_DMA_Init>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8003f5a:	f7fe fb29 	bl	80025b0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2c      	ldr	r2, [pc, #176]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f64:	4a2b      	ldr	r2, [pc, #172]	@ (8004014 <HAL_TIM_Base_MspInit+0x128>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003f6a:	e04c      	b.n	8004006 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <HAL_TIM_Base_MspInit+0x130>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d114      	bne.n	8003fa0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f76:	4b26      	ldr	r3, [pc, #152]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7a:	4a25      	ldr	r2, [pc, #148]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f82:	4b23      	ldr	r3, [pc, #140]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2100      	movs	r1, #0
 8003f92:	201d      	movs	r0, #29
 8003f94:	f002 f93d 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f98:	201d      	movs	r0, #29
 8003f9a:	f002 f954 	bl	8006246 <HAL_NVIC_EnableIRQ>
}
 8003f9e:	e032      	b.n	8004006 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8004020 <HAL_TIM_Base_MspInit+0x134>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d114      	bne.n	8003fd4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003faa:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fae:	4a18      	ldr	r2, [pc, #96]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fb6:	4b16      	ldr	r3, [pc, #88]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	201e      	movs	r0, #30
 8003fc8:	f002 f923 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003fcc:	201e      	movs	r0, #30
 8003fce:	f002 f93a 	bl	8006246 <HAL_NVIC_EnableIRQ>
}
 8003fd2:	e018      	b.n	8004006 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM6)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <HAL_TIM_Base_MspInit+0x138>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d113      	bne.n	8004006 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fde:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003fe4:	f043 0310 	orr.w	r3, r3, #16
 8003fe8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fea:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <HAL_TIM_Base_MspInit+0x124>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	2036      	movs	r0, #54	@ 0x36
 8003ffc:	f002 f909 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004000:	2036      	movs	r0, #54	@ 0x36
 8004002:	f002 f920 	bl	8006246 <HAL_NVIC_EnableIRQ>
}
 8004006:	bf00      	nop
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	20000f38 	.word	0x20000f38
 8004018:	40020008 	.word	0x40020008
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40001000 	.word	0x40001000

08004028 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	@ 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	f107 0314 	add.w	r3, r7, #20
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004048:	d11d      	bne.n	8004086 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800404a:	4b21      	ldr	r3, [pc, #132]	@ (80040d0 <HAL_TIM_MspPostInit+0xa8>)
 800404c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404e:	4a20      	ldr	r2, [pc, #128]	@ (80040d0 <HAL_TIM_MspPostInit+0xa8>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004056:	4b1e      	ldr	r3, [pc, #120]	@ (80040d0 <HAL_TIM_MspPostInit+0xa8>)
 8004058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004062:	2302      	movs	r3, #2
 8004064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004066:	2302      	movs	r3, #2
 8004068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406e:	2300      	movs	r3, #0
 8004070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004072:	2301      	movs	r3, #1
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004076:	f107 0314 	add.w	r3, r7, #20
 800407a:	4619      	mov	r1, r3
 800407c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004080:	f002 fc3a 	bl	80068f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004084:	e020      	b.n	80040c8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a12      	ldr	r2, [pc, #72]	@ (80040d4 <HAL_TIM_MspPostInit+0xac>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004090:	4b0f      	ldr	r3, [pc, #60]	@ (80040d0 <HAL_TIM_MspPostInit+0xa8>)
 8004092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004094:	4a0e      	ldr	r2, [pc, #56]	@ (80040d0 <HAL_TIM_MspPostInit+0xa8>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800409c:	4b0c      	ldr	r3, [pc, #48]	@ (80040d0 <HAL_TIM_MspPostInit+0xa8>)
 800409e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040a8:	2340      	movs	r3, #64	@ 0x40
 80040aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b4:	2300      	movs	r3, #0
 80040b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040b8:	2302      	movs	r3, #2
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	4619      	mov	r1, r3
 80040c2:	4805      	ldr	r0, [pc, #20]	@ (80040d8 <HAL_TIM_MspPostInit+0xb0>)
 80040c4:	f002 fc18 	bl	80068f8 <HAL_GPIO_Init>
}
 80040c8:	bf00      	nop
 80040ca:	3728      	adds	r7, #40	@ 0x28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	48000800 	.word	0x48000800

080040dc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80040e0:	4b21      	ldr	r3, [pc, #132]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 80040e2:	4a22      	ldr	r2, [pc, #136]	@ (800416c <MX_LPUART1_UART_Init+0x90>)
 80040e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80040e6:	4b20      	ldr	r3, [pc, #128]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 80040e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80040f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80040fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 8004102:	220c      	movs	r2, #12
 8004104:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004106:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800410c:	4b16      	ldr	r3, [pc, #88]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 800410e:	2200      	movs	r2, #0
 8004110:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004112:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 8004114:	2200      	movs	r2, #0
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004118:	4b13      	ldr	r3, [pc, #76]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 800411a:	2200      	movs	r2, #0
 800411c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800411e:	4812      	ldr	r0, [pc, #72]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 8004120:	f006 fa7c 	bl	800a61c <HAL_UART_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800412a:	f7fe fa41 	bl	80025b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800412e:	2100      	movs	r1, #0
 8004130:	480d      	ldr	r0, [pc, #52]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 8004132:	f007 ff73 	bl	800c01c <HAL_UARTEx_SetTxFifoThreshold>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800413c:	f7fe fa38 	bl	80025b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004140:	2100      	movs	r1, #0
 8004142:	4809      	ldr	r0, [pc, #36]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 8004144:	f007 ffa8 	bl	800c098 <HAL_UARTEx_SetRxFifoThreshold>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800414e:	f7fe fa2f 	bl	80025b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004152:	4805      	ldr	r0, [pc, #20]	@ (8004168 <MX_LPUART1_UART_Init+0x8c>)
 8004154:	f007 ff29 	bl	800bfaa <HAL_UARTEx_DisableFifoMode>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800415e:	f7fe fa27 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000f98 	.word	0x20000f98
 800416c:	40008000 	.word	0x40008000

08004170 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004174:	4b22      	ldr	r3, [pc, #136]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 8004176:	4a23      	ldr	r2, [pc, #140]	@ (8004204 <MX_USART1_UART_Init+0x94>)
 8004178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800417a:	4b21      	ldr	r3, [pc, #132]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 800417c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004182:	4b1f      	ldr	r3, [pc, #124]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 8004184:	2200      	movs	r2, #0
 8004186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004188:	4b1d      	ldr	r3, [pc, #116]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 800418a:	2200      	movs	r2, #0
 800418c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800418e:	4b1c      	ldr	r3, [pc, #112]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 8004190:	2200      	movs	r2, #0
 8004192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004194:	4b1a      	ldr	r3, [pc, #104]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 8004196:	220c      	movs	r2, #12
 8004198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800419a:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 800419c:	2200      	movs	r2, #0
 800419e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041a0:	4b17      	ldr	r3, [pc, #92]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041a6:	4b16      	ldr	r3, [pc, #88]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041ac:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041b2:	4b13      	ldr	r3, [pc, #76]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041b8:	4811      	ldr	r0, [pc, #68]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 80041ba:	f006 fa2f 	bl	800a61c <HAL_UART_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80041c4:	f7fe f9f4 	bl	80025b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041c8:	2100      	movs	r1, #0
 80041ca:	480d      	ldr	r0, [pc, #52]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 80041cc:	f007 ff26 	bl	800c01c <HAL_UARTEx_SetTxFifoThreshold>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80041d6:	f7fe f9eb 	bl	80025b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041da:	2100      	movs	r1, #0
 80041dc:	4808      	ldr	r0, [pc, #32]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 80041de:	f007 ff5b 	bl	800c098 <HAL_UARTEx_SetRxFifoThreshold>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80041e8:	f7fe f9e2 	bl	80025b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80041ec:	4804      	ldr	r0, [pc, #16]	@ (8004200 <MX_USART1_UART_Init+0x90>)
 80041ee:	f007 fedc 	bl	800bfaa <HAL_UARTEx_DisableFifoMode>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80041f8:	f7fe f9da 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041fc:	bf00      	nop
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	2000102c 	.word	0x2000102c
 8004204:	40013800 	.word	0x40013800

08004208 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b09e      	sub	sp, #120	@ 0x78
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004220:	f107 0320 	add.w	r3, r7, #32
 8004224:	2244      	movs	r2, #68	@ 0x44
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f009 f997 	bl	800d55c <memset>
  if(uartHandle->Instance==LPUART1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a7e      	ldr	r2, [pc, #504]	@ (800442c <HAL_UART_MspInit+0x224>)
 8004234:	4293      	cmp	r3, r2
 8004236:	f040 8087 	bne.w	8004348 <HAL_UART_MspInit+0x140>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800423a:	2320      	movs	r3, #32
 800423c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800423e:	2300      	movs	r3, #0
 8004240:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004242:	f107 0320 	add.w	r3, r7, #32
 8004246:	4618      	mov	r0, r3
 8004248:	f004 f93c 	bl	80084c4 <HAL_RCCEx_PeriphCLKConfig>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004252:	f7fe f9ad 	bl	80025b0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004256:	4b76      	ldr	r3, [pc, #472]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	4a75      	ldr	r2, [pc, #468]	@ (8004430 <HAL_UART_MspInit+0x228>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004262:	4b73      	ldr	r3, [pc, #460]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426e:	4b70      	ldr	r3, [pc, #448]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004272:	4a6f      	ldr	r2, [pc, #444]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800427a:	4b6d      	ldr	r3, [pc, #436]	@ (8004430 <HAL_UART_MspInit+0x228>)
 800427c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004286:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	4a69      	ldr	r2, [pc, #420]	@ (8004430 <HAL_UART_MspInit+0x228>)
 800428c:	f043 0302 	orr.w	r3, r3, #2
 8004290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004292:	4b67      	ldr	r3, [pc, #412]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800429e:	2308      	movs	r3, #8
 80042a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a2:	2302      	movs	r3, #2
 80042a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042aa:	2300      	movs	r3, #0
 80042ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80042ae:	230c      	movs	r3, #12
 80042b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80042b6:	4619      	mov	r1, r3
 80042b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042bc:	f002 fb1c 	bl	80068f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80042c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80042c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c6:	2302      	movs	r3, #2
 80042c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ce:	2300      	movs	r3, #0
 80042d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80042d2:	2308      	movs	r3, #8
 80042d4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80042da:	4619      	mov	r1, r3
 80042dc:	4855      	ldr	r0, [pc, #340]	@ (8004434 <HAL_UART_MspInit+0x22c>)
 80042de:	f002 fb0b 	bl	80068f8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 80042e2:	4b55      	ldr	r3, [pc, #340]	@ (8004438 <HAL_UART_MspInit+0x230>)
 80042e4:	4a55      	ldr	r2, [pc, #340]	@ (800443c <HAL_UART_MspInit+0x234>)
 80042e6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80042e8:	4b53      	ldr	r3, [pc, #332]	@ (8004438 <HAL_UART_MspInit+0x230>)
 80042ea:	2222      	movs	r2, #34	@ 0x22
 80042ec:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042ee:	4b52      	ldr	r3, [pc, #328]	@ (8004438 <HAL_UART_MspInit+0x230>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042f4:	4b50      	ldr	r3, [pc, #320]	@ (8004438 <HAL_UART_MspInit+0x230>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004438 <HAL_UART_MspInit+0x230>)
 80042fc:	2280      	movs	r2, #128	@ 0x80
 80042fe:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004300:	4b4d      	ldr	r3, [pc, #308]	@ (8004438 <HAL_UART_MspInit+0x230>)
 8004302:	2200      	movs	r2, #0
 8004304:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004306:	4b4c      	ldr	r3, [pc, #304]	@ (8004438 <HAL_UART_MspInit+0x230>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800430c:	4b4a      	ldr	r3, [pc, #296]	@ (8004438 <HAL_UART_MspInit+0x230>)
 800430e:	2200      	movs	r2, #0
 8004310:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004312:	4b49      	ldr	r3, [pc, #292]	@ (8004438 <HAL_UART_MspInit+0x230>)
 8004314:	2200      	movs	r2, #0
 8004316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004318:	4847      	ldr	r0, [pc, #284]	@ (8004438 <HAL_UART_MspInit+0x230>)
 800431a:	f001 ffaf 	bl	800627c <HAL_DMA_Init>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8004324:	f7fe f944 	bl	80025b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a43      	ldr	r2, [pc, #268]	@ (8004438 <HAL_UART_MspInit+0x230>)
 800432c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004330:	4a41      	ldr	r2, [pc, #260]	@ (8004438 <HAL_UART_MspInit+0x230>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004336:	2200      	movs	r2, #0
 8004338:	2100      	movs	r1, #0
 800433a:	205b      	movs	r0, #91	@ 0x5b
 800433c:	f001 ff69 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004340:	205b      	movs	r0, #91	@ 0x5b
 8004342:	f001 ff80 	bl	8006246 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004346:	e06c      	b.n	8004422 <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==USART1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a3c      	ldr	r2, [pc, #240]	@ (8004440 <HAL_UART_MspInit+0x238>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d167      	bne.n	8004422 <HAL_UART_MspInit+0x21a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004352:	2301      	movs	r3, #1
 8004354:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004356:	2300      	movs	r3, #0
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800435a:	f107 0320 	add.w	r3, r7, #32
 800435e:	4618      	mov	r0, r3
 8004360:	f004 f8b0 	bl	80084c4 <HAL_RCCEx_PeriphCLKConfig>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_UART_MspInit+0x166>
      Error_Handler();
 800436a:	f7fe f921 	bl	80025b0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800436e:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	4a2f      	ldr	r2, [pc, #188]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004378:	6613      	str	r3, [r2, #96]	@ 0x60
 800437a:	4b2d      	ldr	r3, [pc, #180]	@ (8004430 <HAL_UART_MspInit+0x228>)
 800437c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004386:	4b2a      	ldr	r3, [pc, #168]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438a:	4a29      	ldr	r2, [pc, #164]	@ (8004430 <HAL_UART_MspInit+0x228>)
 800438c:	f043 0302 	orr.w	r3, r3, #2
 8004390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004392:	4b27      	ldr	r3, [pc, #156]	@ (8004430 <HAL_UART_MspInit+0x228>)
 8004394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800439e:	23c0      	movs	r3, #192	@ 0xc0
 80043a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a2:	2302      	movs	r3, #2
 80043a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043aa:	2300      	movs	r3, #0
 80043ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043ae:	2307      	movs	r3, #7
 80043b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043b6:	4619      	mov	r1, r3
 80043b8:	481e      	ldr	r0, [pc, #120]	@ (8004434 <HAL_UART_MspInit+0x22c>)
 80043ba:	f002 fa9d 	bl	80068f8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80043be:	4b21      	ldr	r3, [pc, #132]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043c0:	4a21      	ldr	r2, [pc, #132]	@ (8004448 <HAL_UART_MspInit+0x240>)
 80043c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80043c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043c6:	2218      	movs	r2, #24
 80043c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043d8:	2280      	movs	r2, #128	@ 0x80
 80043da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043dc:	4b19      	ldr	r3, [pc, #100]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043de:	2200      	movs	r2, #0
 80043e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043e2:	4b18      	ldr	r3, [pc, #96]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80043e8:	4b16      	ldr	r3, [pc, #88]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043ee:	4b15      	ldr	r3, [pc, #84]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80043f4:	4813      	ldr	r0, [pc, #76]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 80043f6:	f001 ff41 	bl	800627c <HAL_DMA_Init>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004400:	f7fe f8d6 	bl	80025b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0f      	ldr	r2, [pc, #60]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 8004408:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800440c:	4a0d      	ldr	r2, [pc, #52]	@ (8004444 <HAL_UART_MspInit+0x23c>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004412:	2200      	movs	r2, #0
 8004414:	2100      	movs	r1, #0
 8004416:	2025      	movs	r0, #37	@ 0x25
 8004418:	f001 fefb 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800441c:	2025      	movs	r0, #37	@ 0x25
 800441e:	f001 ff12 	bl	8006246 <HAL_NVIC_EnableIRQ>
}
 8004422:	bf00      	nop
 8004424:	3778      	adds	r7, #120	@ 0x78
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40008000 	.word	0x40008000
 8004430:	40021000 	.word	0x40021000
 8004434:	48000400 	.word	0x48000400
 8004438:	200010c0 	.word	0x200010c0
 800443c:	40020030 	.word	0x40020030
 8004440:	40013800 	.word	0x40013800
 8004444:	20001120 	.word	0x20001120
 8004448:	40020058 	.word	0x40020058

0800444c <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800444c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3c      	ldr	r2, [pc, #240]	@ (800454c <HAL_UART_RxCpltCallback+0x100>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d15b      	bne.n	8004516 <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 800445e:	4b3c      	ldr	r3, [pc, #240]	@ (8004550 <HAL_UART_RxCpltCallback+0x104>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3c      	ldr	r2, [pc, #240]	@ (8004554 <HAL_UART_RxCpltCallback+0x108>)
 8004464:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8004466:	4b3b      	ldr	r3, [pc, #236]	@ (8004554 <HAL_UART_RxCpltCallback+0x108>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800446e:	dd22      	ble.n	80044b6 <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 8004470:	4b38      	ldr	r3, [pc, #224]	@ (8004554 <HAL_UART_RxCpltCallback+0x108>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800447a:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 800447c:	4b35      	ldr	r3, [pc, #212]	@ (8004554 <HAL_UART_RxCpltCallback+0x108>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	4b35      	ldr	r3, [pc, #212]	@ (8004558 <HAL_UART_RxCpltCallback+0x10c>)
 8004484:	4413      	add	r3, r2
 8004486:	89fa      	ldrh	r2, [r7, #14]
 8004488:	4934      	ldr	r1, [pc, #208]	@ (800455c <HAL_UART_RxCpltCallback+0x110>)
 800448a:	4618      	mov	r0, r3
 800448c:	f009 f97d 	bl	800d78a <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 8004490:	4b30      	ldr	r3, [pc, #192]	@ (8004554 <HAL_UART_RxCpltCallback+0x108>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 8004496:	89fb      	ldrh	r3, [r7, #14]
 8004498:	4a30      	ldr	r2, [pc, #192]	@ (800455c <HAL_UART_RxCpltCallback+0x110>)
 800449a:	1899      	adds	r1, r3, r2
 800449c:	89fb      	ldrh	r3, [r7, #14]
 800449e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80044a2:	461a      	mov	r2, r3
 80044a4:	482c      	ldr	r0, [pc, #176]	@ (8004558 <HAL_UART_RxCpltCallback+0x10c>)
 80044a6:	f009 f970 	bl	800d78a <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 80044aa:	89fb      	ldrh	r3, [r7, #14]
 80044ac:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80044b0:	4a27      	ldr	r2, [pc, #156]	@ (8004550 <HAL_UART_RxCpltCallback+0x104>)
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	e01d      	b.n	80044f2 <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 80044b6:	4b27      	ldr	r3, [pc, #156]	@ (8004554 <HAL_UART_RxCpltCallback+0x108>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	4b26      	ldr	r3, [pc, #152]	@ (8004558 <HAL_UART_RxCpltCallback+0x10c>)
 80044be:	441a      	add	r2, r3
 80044c0:	4b26      	ldr	r3, [pc, #152]	@ (800455c <HAL_UART_RxCpltCallback+0x110>)
 80044c2:	4610      	mov	r0, r2
 80044c4:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80044c8:	4602      	mov	r2, r0
 80044ca:	4619      	mov	r1, r3
 80044cc:	f8d1 c000 	ldr.w	ip, [r1]
 80044d0:	684e      	ldr	r6, [r1, #4]
 80044d2:	688d      	ldr	r5, [r1, #8]
 80044d4:	68c9      	ldr	r1, [r1, #12]
 80044d6:	f8c2 c000 	str.w	ip, [r2]
 80044da:	6056      	str	r6, [r2, #4]
 80044dc:	6095      	str	r5, [r2, #8]
 80044de:	60d1      	str	r1, [r2, #12]
 80044e0:	3310      	adds	r3, #16
 80044e2:	3010      	adds	r0, #16
 80044e4:	42a3      	cmp	r3, r4
 80044e6:	d1ef      	bne.n	80044c8 <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 80044e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004554 <HAL_UART_RxCpltCallback+0x108>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3340      	adds	r3, #64	@ 0x40
 80044ee:	4a18      	ldr	r2, [pc, #96]	@ (8004550 <HAL_UART_RxCpltCallback+0x104>)
 80044f0:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 80044f2:	2240      	movs	r2, #64	@ 0x40
 80044f4:	4919      	ldr	r1, [pc, #100]	@ (800455c <HAL_UART_RxCpltCallback+0x110>)
 80044f6:	481a      	ldr	r0, [pc, #104]	@ (8004560 <HAL_UART_RxCpltCallback+0x114>)
 80044f8:	f006 f96e 	bl	800a7d8 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80044fc:	4b19      	ldr	r3, [pc, #100]	@ (8004564 <HAL_UART_RxCpltCallback+0x118>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4b18      	ldr	r3, [pc, #96]	@ (8004564 <HAL_UART_RxCpltCallback+0x118>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0204 	bic.w	r2, r2, #4
 800450a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 800450c:	2240      	movs	r2, #64	@ 0x40
 800450e:	4913      	ldr	r1, [pc, #76]	@ (800455c <HAL_UART_RxCpltCallback+0x110>)
 8004510:	4813      	ldr	r0, [pc, #76]	@ (8004560 <HAL_UART_RxCpltCallback+0x114>)
 8004512:	f006 f961 	bl	800a7d8 <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a13      	ldr	r2, [pc, #76]	@ (8004568 <HAL_UART_RxCpltCallback+0x11c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10c      	bne.n	800453a <HAL_UART_RxCpltCallback+0xee>
//					buffer_servo[5]='\0';
//				}
//				position_servo = atoi(buffer_servo);
//				//break;
//			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8004520:	221e      	movs	r2, #30
 8004522:	4912      	ldr	r1, [pc, #72]	@ (800456c <HAL_UART_RxCpltCallback+0x120>)
 8004524:	4812      	ldr	r0, [pc, #72]	@ (8004570 <HAL_UART_RxCpltCallback+0x124>)
 8004526:	f006 f957 	bl	800a7d8 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 800452a:	4b12      	ldr	r3, [pc, #72]	@ (8004574 <HAL_UART_RxCpltCallback+0x128>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <HAL_UART_RxCpltCallback+0x128>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0204 	bic.w	r2, r2, #4
 8004538:	601a      	str	r2, [r3, #0]
			}
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 800453a:	221e      	movs	r2, #30
 800453c:	490b      	ldr	r1, [pc, #44]	@ (800456c <HAL_UART_RxCpltCallback+0x120>)
 800453e:	480c      	ldr	r0, [pc, #48]	@ (8004570 <HAL_UART_RxCpltCallback+0x124>)
 8004540:	f006 f94a 	bl	800a7d8 <HAL_UART_Receive_DMA>

}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800454c:	40013800 	.word	0x40013800
 8004550:	2000070c 	.word	0x2000070c
 8004554:	20000708 	.word	0x20000708
 8004558:	200004c8 	.word	0x200004c8
 800455c:	200006c8 	.word	0x200006c8
 8004560:	2000102c 	.word	0x2000102c
 8004564:	20001120 	.word	0x20001120
 8004568:	40008000 	.word	0x40008000
 800456c:	200004a8 	.word	0x200004a8
 8004570:	20000f98 	.word	0x20000f98
 8004574:	200010c0 	.word	0x200010c0

08004578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004578:	480d      	ldr	r0, [pc, #52]	@ (80045b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800457a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800457c:	f7ff f934 	bl	80037e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004580:	480c      	ldr	r0, [pc, #48]	@ (80045b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004582:	490d      	ldr	r1, [pc, #52]	@ (80045b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004584:	4a0d      	ldr	r2, [pc, #52]	@ (80045bc <LoopForever+0xe>)
  movs r3, #0
 8004586:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004588:	e002      	b.n	8004590 <LoopCopyDataInit>

0800458a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800458a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800458c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800458e:	3304      	adds	r3, #4

08004590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004594:	d3f9      	bcc.n	800458a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004596:	4a0a      	ldr	r2, [pc, #40]	@ (80045c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004598:	4c0a      	ldr	r4, [pc, #40]	@ (80045c4 <LoopForever+0x16>)
  movs r3, #0
 800459a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800459c:	e001      	b.n	80045a2 <LoopFillZerobss>

0800459e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800459e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045a0:	3204      	adds	r2, #4

080045a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045a4:	d3fb      	bcc.n	800459e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80045a6:	f009 f8c1 	bl	800d72c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045aa:	f7fd fd69 	bl	8002080 <main>

080045ae <LoopForever>:

LoopForever:
    b LoopForever
 80045ae:	e7fe      	b.n	80045ae <LoopForever>
  ldr   r0, =_estack
 80045b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80045b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80045bc:	080114c0 	.word	0x080114c0
  ldr r2, =_sbss
 80045c0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80045c4:	200012d0 	.word	0x200012d0

080045c8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045c8:	e7fe      	b.n	80045c8 <COMP1_2_3_IRQHandler>

080045ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d4:	2003      	movs	r0, #3
 80045d6:	f001 fe11 	bl	80061fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045da:	200f      	movs	r0, #15
 80045dc:	f000 f80e 	bl	80045fc <HAL_InitTick>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	71fb      	strb	r3, [r7, #7]
 80045ea:	e001      	b.n	80045f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80045ec:	f7fe ff62 	bl	80034b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80045f0:	79fb      	ldrb	r3, [r7, #7]

}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004608:	4b16      	ldr	r3, [pc, #88]	@ (8004664 <HAL_InitTick+0x68>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d022      	beq.n	8004656 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004610:	4b15      	ldr	r3, [pc, #84]	@ (8004668 <HAL_InitTick+0x6c>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <HAL_InitTick+0x68>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800461c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fe1c 	bl	8006262 <HAL_SYSTICK_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b0f      	cmp	r3, #15
 8004634:	d809      	bhi.n	800464a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004636:	2200      	movs	r2, #0
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	f04f 30ff 	mov.w	r0, #4294967295
 800463e:	f001 fde8 	bl	8006212 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004642:	4a0a      	ldr	r2, [pc, #40]	@ (800466c <HAL_InitTick+0x70>)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e007      	b.n	800465a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	e004      	b.n	800465a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	e001      	b.n	800465a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000018 	.word	0x20000018
 8004668:	20000010 	.word	0x20000010
 800466c:	20000014 	.word	0x20000014

08004670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <HAL_IncTick+0x1c>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <HAL_IncTick+0x20>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4413      	add	r3, r2
 800467e:	4a03      	ldr	r2, [pc, #12]	@ (800468c <HAL_IncTick+0x1c>)
 8004680:	6013      	str	r3, [r2, #0]
}
 8004682:	bf00      	nop
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	20001180 	.word	0x20001180
 8004690:	20000018 	.word	0x20000018

08004694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return uwTick;
 8004698:	4b03      	ldr	r3, [pc, #12]	@ (80046a8 <HAL_GetTick+0x14>)
 800469a:	681b      	ldr	r3, [r3, #0]
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20001180 	.word	0x20001180

080046ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046b4:	f7ff ffee 	bl	8004694 <HAL_GetTick>
 80046b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d004      	beq.n	80046d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80046c6:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <HAL_Delay+0x40>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046d0:	bf00      	nop
 80046d2:	f7ff ffdf 	bl	8004694 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d8f7      	bhi.n	80046d2 <HAL_Delay+0x26>
  {
  }
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000018 	.word	0x20000018

080046f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	609a      	str	r2, [r3, #8]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3360      	adds	r3, #96	@ 0x60
 800476a:	461a      	mov	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4b08      	ldr	r3, [pc, #32]	@ (800479c <LL_ADC_SetOffset+0x44>)
 800477a:	4013      	ands	r3, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	4313      	orrs	r3, r2
 8004788:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	03fff000 	.word	0x03fff000

080047a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3360      	adds	r3, #96	@ 0x60
 80047ae:	461a      	mov	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3360      	adds	r3, #96	@ 0x60
 80047dc:	461a      	mov	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004802:	b480      	push	{r7}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3360      	adds	r3, #96	@ 0x60
 8004812:	461a      	mov	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	431a      	orrs	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3360      	adds	r3, #96	@ 0x60
 8004848:	461a      	mov	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	431a      	orrs	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	615a      	str	r2, [r3, #20]
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b087      	sub	sp, #28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3330      	adds	r3, #48	@ 0x30
 80048ca:	461a      	mov	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	0a1b      	lsrs	r3, r3, #8
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	4413      	add	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	211f      	movs	r1, #31
 80048e6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	401a      	ands	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0e9b      	lsrs	r3, r3, #26
 80048f2:	f003 011f 	and.w	r1, r3, #31
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	431a      	orrs	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3314      	adds	r3, #20
 8004948:	461a      	mov	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	0e5b      	lsrs	r3, r3, #25
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	4413      	add	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	0d1b      	lsrs	r3, r3, #20
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2107      	movs	r1, #7
 8004966:	fa01 f303 	lsl.w	r3, r1, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	401a      	ands	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	0d1b      	lsrs	r3, r3, #20
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	431a      	orrs	r2, r3
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a8:	43db      	mvns	r3, r3
 80049aa:	401a      	ands	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f003 0318 	and.w	r3, r3, #24
 80049b2:	4908      	ldr	r1, [pc, #32]	@ (80049d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80049b4:	40d9      	lsrs	r1, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	400b      	ands	r3, r1
 80049ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049be:	431a      	orrs	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	0007ffff 	.word	0x0007ffff

080049d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 031f 	and.w	r3, r3, #31
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004a20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6093      	str	r3, [r2, #8]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a48:	d101      	bne.n	8004a4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004a6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a98:	d101      	bne.n	8004a9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004abc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ac0:	f043 0201 	orr.w	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <LL_ADC_IsEnabled+0x18>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <LL_ADC_IsEnabled+0x1a>
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b0e:	f043 0204 	orr.w	r2, r3, #4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d101      	bne.n	8004b3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d101      	bne.n	8004b60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b089      	sub	sp, #36	@ 0x24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e167      	b.n	8004e5a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc fccb 	bl	8001534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff ff3f 	bl	8004a34 <LL_ADC_IsDeepPowerDownEnabled>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff ff25 	bl	8004a10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff ff5a 	bl	8004a84 <LL_ADC_IsInternalRegulatorEnabled>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d115      	bne.n	8004c02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff ff3e 	bl	8004a5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004be0:	4ba0      	ldr	r3, [pc, #640]	@ (8004e64 <HAL_ADC_Init+0x2f4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	099b      	lsrs	r3, r3, #6
 8004be6:	4aa0      	ldr	r2, [pc, #640]	@ (8004e68 <HAL_ADC_Init+0x2f8>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	099b      	lsrs	r3, r3, #6
 8004bee:	3301      	adds	r3, #1
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bf4:	e002      	b.n	8004bfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f9      	bne.n	8004bf6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff ff3c 	bl	8004a84 <LL_ADC_IsInternalRegulatorEnabled>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10d      	bne.n	8004c2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c16:	f043 0210 	orr.w	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff ff75 	bl	8004b22 <LL_ADC_REG_IsConversionOngoing>
 8004c38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f040 8100 	bne.w	8004e48 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 80fc 	bne.w	8004e48 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004c58:	f043 0202 	orr.w	r2, r3, #2
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff ff35 	bl	8004ad4 <LL_ADC_IsEnabled>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d111      	bne.n	8004c94 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c74:	f7ff ff2e 	bl	8004ad4 <LL_ADC_IsEnabled>
 8004c78:	4604      	mov	r4, r0
 8004c7a:	487c      	ldr	r0, [pc, #496]	@ (8004e6c <HAL_ADC_Init+0x2fc>)
 8004c7c:	f7ff ff2a 	bl	8004ad4 <LL_ADC_IsEnabled>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4323      	orrs	r3, r4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4878      	ldr	r0, [pc, #480]	@ (8004e70 <HAL_ADC_Init+0x300>)
 8004c90:	f7ff fd2e 	bl	80046f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7f5b      	ldrb	r3, [r3, #29]
 8004c98:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c9e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004ca4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004caa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cb2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d106      	bne.n	8004cd0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	045b      	lsls	r3, r3, #17
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	4b60      	ldr	r3, [pc, #384]	@ (8004e74 <HAL_ADC_Init+0x304>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	69b9      	ldr	r1, [r7, #24]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff ff14 	bl	8004b48 <LL_ADC_INJ_IsConversionOngoing>
 8004d20:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d16d      	bne.n	8004e04 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d16a      	bne.n	8004e04 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d32:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d3a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d4a:	f023 0302 	bic.w	r3, r3, #2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	69b9      	ldr	r1, [r7, #24]
 8004d54:	430b      	orrs	r3, r1
 8004d56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004d6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6911      	ldr	r1, [r2, #16]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004d8e:	e013      	b.n	8004db8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004d9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004db0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004db4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d118      	bne.n	8004df4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dd8:	4311      	orrs	r1, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004dde:	4311      	orrs	r1, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004de4:	430a      	orrs	r2, r1
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	611a      	str	r2, [r3, #16]
 8004df2:	e007      	b.n	8004e04 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10c      	bne.n	8004e26 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	f023 010f 	bic.w	r1, r3, #15
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	1e5a      	subs	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e24:	e007      	b.n	8004e36 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 020f 	bic.w	r2, r2, #15
 8004e34:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3a:	f023 0303 	bic.w	r3, r3, #3
 8004e3e:	f043 0201 	orr.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e46:	e007      	b.n	8004e58 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4c:	f043 0210 	orr.w	r2, r3, #16
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e58:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3724      	adds	r7, #36	@ 0x24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd90      	pop	{r4, r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000010 	.word	0x20000010
 8004e68:	053e2d63 	.word	0x053e2d63
 8004e6c:	50000100 	.word	0x50000100
 8004e70:	50000300 	.word	0x50000300
 8004e74:	fff04007 	.word	0xfff04007

08004e78 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e84:	4851      	ldr	r0, [pc, #324]	@ (8004fcc <HAL_ADC_Start_DMA+0x154>)
 8004e86:	f7ff fda7 	bl	80049d8 <LL_ADC_GetMultimode>
 8004e8a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fe46 	bl	8004b22 <LL_ADC_REG_IsConversionOngoing>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f040 808f 	bne.w	8004fbc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_ADC_Start_DMA+0x34>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e08a      	b.n	8004fc2 <HAL_ADC_Start_DMA+0x14a>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	d002      	beq.n	8004ec6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b09      	cmp	r3, #9
 8004ec4:	d173      	bne.n	8004fae <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 feb2 	bl	8005c30 <ADC_Enable>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d166      	bne.n	8004fa4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eda:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a38      	ldr	r2, [pc, #224]	@ (8004fd0 <HAL_ADC_Start_DMA+0x158>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d002      	beq.n	8004efa <HAL_ADC_Start_DMA+0x82>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	e001      	b.n	8004efe <HAL_ADC_Start_DMA+0x86>
 8004efa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d002      	beq.n	8004f0c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f28:	f023 0206 	bic.w	r2, r3, #6
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f30:	e002      	b.n	8004f38 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3c:	4a25      	ldr	r2, [pc, #148]	@ (8004fd4 <HAL_ADC_Start_DMA+0x15c>)
 8004f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f44:	4a24      	ldr	r2, [pc, #144]	@ (8004fd8 <HAL_ADC_Start_DMA+0x160>)
 8004f46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4c:	4a23      	ldr	r2, [pc, #140]	@ (8004fdc <HAL_ADC_Start_DMA+0x164>)
 8004f4e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	221c      	movs	r2, #28
 8004f56:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0210 	orr.w	r2, r2, #16
 8004f6e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3340      	adds	r3, #64	@ 0x40
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f001 fa1c 	bl	80063cc <HAL_DMA_Start_IT>
 8004f94:	4603      	mov	r3, r0
 8004f96:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fdac 	bl	8004afa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004fa2:	e00d      	b.n	8004fc0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004fac:	e008      	b.n	8004fc0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004fba:	e001      	b.n	8004fc0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	50000300 	.word	0x50000300
 8004fd0:	50000100 	.word	0x50000100
 8004fd4:	08005d3d 	.word	0x08005d3d
 8004fd8:	08005e15 	.word	0x08005e15
 8004fdc:	08005e31 	.word	0x08005e31

08004fe0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	@ 0x28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004fe8:	2300      	movs	r3, #0
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ffc:	4883      	ldr	r0, [pc, #524]	@ (800520c <HAL_ADC_IRQHandler+0x22c>)
 8004ffe:	f7ff fceb 	bl	80049d8 <LL_ADC_GetMultimode>
 8005002:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d017      	beq.n	800503e <HAL_ADC_IRQHandler+0x5e>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d012      	beq.n	800503e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005028:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 ff65 	bl	8005f00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2202      	movs	r2, #2
 800503c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <HAL_ADC_IRQHandler+0x72>
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8085 	beq.w	8005168 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d07f      	beq.n	8005168 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005078:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fc05 	bl	8004894 <LL_ADC_REG_IsTriggerSourceSWStart>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d064      	beq.n	800515a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5e      	ldr	r2, [pc, #376]	@ (8005210 <HAL_ADC_IRQHandler+0x230>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d002      	beq.n	80050a0 <HAL_ADC_IRQHandler+0xc0>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	e001      	b.n	80050a4 <HAL_ADC_IRQHandler+0xc4>
 80050a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d008      	beq.n	80050be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	d002      	beq.n	80050be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b09      	cmp	r3, #9
 80050bc:	d104      	bne.n	80050c8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	e00d      	b.n	80050e4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a50      	ldr	r2, [pc, #320]	@ (8005210 <HAL_ADC_IRQHandler+0x230>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d002      	beq.n	80050d8 <HAL_ADC_IRQHandler+0xf8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	e001      	b.n	80050dc <HAL_ADC_IRQHandler+0xfc>
 80050d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050dc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d135      	bne.n	800515a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d12e      	bne.n	800515a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fd0e 	bl	8004b22 <LL_ADC_REG_IsConversionOngoing>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d11a      	bne.n	8005142 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 020c 	bic.w	r2, r2, #12
 800511a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005120:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d112      	bne.n	800515a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005138:	f043 0201 	orr.w	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005140:	e00b      	b.n	800515a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005146:	f043 0210 	orr.w	r2, r3, #16
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fc fa74 	bl	8001648 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	220c      	movs	r2, #12
 8005166:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <HAL_ADC_IRQHandler+0x19c>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10b      	bne.n	8005194 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 809e 	beq.w	80052c4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 8098 	beq.w	80052c4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b00      	cmp	r3, #0
 800519e:	d105      	bne.n	80051ac <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fbae 	bl	8004912 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80051b6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff fb69 	bl	8004894 <LL_ADC_REG_IsTriggerSourceSWStart>
 80051c2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a11      	ldr	r2, [pc, #68]	@ (8005210 <HAL_ADC_IRQHandler+0x230>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d002      	beq.n	80051d4 <HAL_ADC_IRQHandler+0x1f4>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	e001      	b.n	80051d8 <HAL_ADC_IRQHandler+0x1f8>
 80051d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	4293      	cmp	r3, r2
 80051de:	d008      	beq.n	80051f2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b06      	cmp	r3, #6
 80051ea:	d002      	beq.n	80051f2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b07      	cmp	r3, #7
 80051f0:	d104      	bne.n	80051fc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	e011      	b.n	8005220 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a03      	ldr	r2, [pc, #12]	@ (8005210 <HAL_ADC_IRQHandler+0x230>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d006      	beq.n	8005214 <HAL_ADC_IRQHandler+0x234>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	e005      	b.n	8005218 <HAL_ADC_IRQHandler+0x238>
 800520c:	50000300 	.word	0x50000300
 8005210:	50000100 	.word	0x50000100
 8005214:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005218:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d047      	beq.n	80052b6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_ADC_IRQHandler+0x260>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d03f      	beq.n	80052b6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800523c:	2b00      	cmp	r3, #0
 800523e:	d13a      	bne.n	80052b6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d133      	bne.n	80052b6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d12e      	bne.n	80052b6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fc73 	bl	8004b48 <LL_ADC_INJ_IsConversionOngoing>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d11a      	bne.n	800529e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005276:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d112      	bne.n	80052b6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005294:	f043 0201 	orr.w	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800529c:	e00b      	b.n	80052b6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a2:	f043 0210 	orr.w	r2, r3, #16
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ae:	f043 0201 	orr.w	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fdfa 	bl	8005eb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2260      	movs	r2, #96	@ 0x60
 80052c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d011      	beq.n	80052f2 <HAL_ADC_IRQHandler+0x312>
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00c      	beq.n	80052f2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f89f 	bl	8005428 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2280      	movs	r2, #128	@ 0x80
 80052f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d012      	beq.n	8005322 <HAL_ADC_IRQHandler+0x342>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00d      	beq.n	8005322 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fde0 	bl	8005ed8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005320:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005328:	2b00      	cmp	r3, #0
 800532a:	d012      	beq.n	8005352 <HAL_ADC_IRQHandler+0x372>
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800533a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fdd2 	bl	8005eec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005350:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b00      	cmp	r3, #0
 800535a:	d036      	beq.n	80053ca <HAL_ADC_IRQHandler+0x3ea>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d031      	beq.n	80053ca <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800536e:	2301      	movs	r3, #1
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
 8005372:	e014      	b.n	800539e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800537a:	4825      	ldr	r0, [pc, #148]	@ (8005410 <HAL_ADC_IRQHandler+0x430>)
 800537c:	f7ff fb3a 	bl	80049f4 <LL_ADC_GetMultiDMATransfer>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00b      	beq.n	800539e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8005386:	2301      	movs	r3, #1
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
 800538a:	e008      	b.n	800539e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800539a:	2301      	movs	r3, #1
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d10e      	bne.n	80053c2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b4:	f043 0202 	orr.w	r2, r3, #2
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f83d 	bl	800543c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2210      	movs	r2, #16
 80053c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d018      	beq.n	8005406 <HAL_ADC_IRQHandler+0x426>
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d013      	beq.n	8005406 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ee:	f043 0208 	orr.w	r2, r3, #8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053fe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fd5f 	bl	8005ec4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005406:	bf00      	nop
 8005408:	3728      	adds	r7, #40	@ 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	50000300 	.word	0x50000300

08005414 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b0b6      	sub	sp, #216	@ 0xd8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x22>
 800546e:	2302      	movs	r3, #2
 8005470:	e3c8      	b.n	8005c04 <HAL_ADC_ConfigChannel+0x7b4>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fb4f 	bl	8004b22 <LL_ADC_REG_IsConversionOngoing>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	f040 83ad 	bne.w	8005be6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	f7ff fa0e 	bl	80048ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fb3d 	bl	8004b22 <LL_ADC_REG_IsConversionOngoing>
 80054a8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fb49 	bl	8004b48 <LL_ADC_INJ_IsConversionOngoing>
 80054b6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 81d9 	bne.w	8005876 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80054c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f040 81d4 	bne.w	8005876 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054d6:	d10f      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2200      	movs	r2, #0
 80054e2:	4619      	mov	r1, r3
 80054e4:	f7ff fa28 	bl	8004938 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff f9bc 	bl	800486e <LL_ADC_SetSamplingTimeCommonConfig>
 80054f6:	e00e      	b.n	8005516 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6819      	ldr	r1, [r3, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	461a      	mov	r2, r3
 8005506:	f7ff fa17 	bl	8004938 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff f9ac 	bl	800486e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d022      	beq.n	800557e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	6919      	ldr	r1, [r3, #16]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005548:	f7ff f906 	bl	8004758 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6919      	ldr	r1, [r3, #16]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	461a      	mov	r2, r3
 800555a:	f7ff f952 	bl	8004802 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800556a:	2b01      	cmp	r3, #1
 800556c:	d102      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x124>
 800556e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005572:	e000      	b.n	8005576 <HAL_ADC_ConfigChannel+0x126>
 8005574:	2300      	movs	r3, #0
 8005576:	461a      	mov	r2, r3
 8005578:	f7ff f95e 	bl	8004838 <LL_ADC_SetOffsetSaturation>
 800557c:	e17b      	b.n	8005876 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff f90b 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 800558a:	4603      	mov	r3, r0
 800558c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <HAL_ADC_ConfigChannel+0x15a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2100      	movs	r1, #0
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff f900 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 80055a0:	4603      	mov	r3, r0
 80055a2:	0e9b      	lsrs	r3, r3, #26
 80055a4:	f003 021f 	and.w	r2, r3, #31
 80055a8:	e01e      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x198>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2100      	movs	r1, #0
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff f8f5 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 80055b6:	4603      	mov	r3, r0
 80055b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80055c0:	fa93 f3a3 	rbit	r3, r3
 80055c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80055c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80055d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80055d8:	2320      	movs	r3, #32
 80055da:	e004      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80055dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055e0:	fab3 f383 	clz	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <HAL_ADC_ConfigChannel+0x1b0>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	0e9b      	lsrs	r3, r3, #26
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	e018      	b.n	8005632 <HAL_ADC_ConfigChannel+0x1e2>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800561c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005624:	2320      	movs	r3, #32
 8005626:	e004      	b.n	8005632 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8005628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800562c:	fab3 f383 	clz	r3, r3
 8005630:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005632:	429a      	cmp	r2, r3
 8005634:	d106      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff f8c4 	bl	80047cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2101      	movs	r1, #1
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff f8a8 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 8005650:	4603      	mov	r3, r0
 8005652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x220>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2101      	movs	r1, #1
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff f89d 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 8005666:	4603      	mov	r3, r0
 8005668:	0e9b      	lsrs	r3, r3, #26
 800566a:	f003 021f 	and.w	r2, r3, #31
 800566e:	e01e      	b.n	80056ae <HAL_ADC_ConfigChannel+0x25e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2101      	movs	r1, #1
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff f892 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 800567c:	4603      	mov	r3, r0
 800567e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005686:	fa93 f3a3 	rbit	r3, r3
 800568a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800568e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005692:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800569e:	2320      	movs	r3, #32
 80056a0:	e004      	b.n	80056ac <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80056a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056a6:	fab3 f383 	clz	r3, r3
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <HAL_ADC_ConfigChannel+0x276>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	0e9b      	lsrs	r3, r3, #26
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	e018      	b.n	80056f8 <HAL_ADC_ConfigChannel+0x2a8>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056d2:	fa93 f3a3 	rbit	r3, r3
 80056d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80056da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80056e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80056ea:	2320      	movs	r3, #32
 80056ec:	e004      	b.n	80056f8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80056ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056f2:	fab3 f383 	clz	r3, r3
 80056f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d106      	bne.n	800570a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2200      	movs	r2, #0
 8005702:	2101      	movs	r1, #1
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff f861 	bl	80047cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2102      	movs	r1, #2
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff f845 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 8005716:	4603      	mov	r3, r0
 8005718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <HAL_ADC_ConfigChannel+0x2e6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2102      	movs	r1, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff f83a 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 800572c:	4603      	mov	r3, r0
 800572e:	0e9b      	lsrs	r3, r3, #26
 8005730:	f003 021f 	and.w	r2, r3, #31
 8005734:	e01e      	b.n	8005774 <HAL_ADC_ConfigChannel+0x324>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2102      	movs	r1, #2
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff f82f 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 8005742:	4603      	mov	r3, r0
 8005744:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800574c:	fa93 f3a3 	rbit	r3, r3
 8005750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800575c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005764:	2320      	movs	r3, #32
 8005766:	e004      	b.n	8005772 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005768:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <HAL_ADC_ConfigChannel+0x33c>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	0e9b      	lsrs	r3, r3, #26
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	e016      	b.n	80057ba <HAL_ADC_ConfigChannel+0x36a>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005794:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005798:	fa93 f3a3 	rbit	r3, r3
 800579c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800579e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80057a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80057ac:	2320      	movs	r3, #32
 80057ae:	e004      	b.n	80057ba <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80057b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057b4:	fab3 f383 	clz	r3, r3
 80057b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d106      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	2102      	movs	r1, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff f800 	bl	80047cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2103      	movs	r1, #3
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe ffe4 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 80057d8:	4603      	mov	r3, r0
 80057da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x3a8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2103      	movs	r1, #3
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe ffd9 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 80057ee:	4603      	mov	r3, r0
 80057f0:	0e9b      	lsrs	r3, r3, #26
 80057f2:	f003 021f 	and.w	r2, r3, #31
 80057f6:	e017      	b.n	8005828 <HAL_ADC_ConfigChannel+0x3d8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2103      	movs	r1, #3
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe ffce 	bl	80047a0 <LL_ADC_GetOffsetChannel>
 8005804:	4603      	mov	r3, r0
 8005806:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800580a:	fa93 f3a3 	rbit	r3, r3
 800580e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005812:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800581a:	2320      	movs	r3, #32
 800581c:	e003      	b.n	8005826 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800581e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005820:	fab3 f383 	clz	r3, r3
 8005824:	b2db      	uxtb	r3, r3
 8005826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005830:	2b00      	cmp	r3, #0
 8005832:	d105      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x3f0>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	0e9b      	lsrs	r3, r3, #26
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	e011      	b.n	8005864 <HAL_ADC_ConfigChannel+0x414>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800584e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005850:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e003      	b.n	8005864 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800585c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005864:	429a      	cmp	r2, r3
 8005866:	d106      	bne.n	8005876 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2200      	movs	r2, #0
 800586e:	2103      	movs	r1, #3
 8005870:	4618      	mov	r0, r3
 8005872:	f7fe ffab 	bl	80047cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff f92a 	bl	8004ad4 <LL_ADC_IsEnabled>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 8140 	bne.w	8005b08 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6819      	ldr	r1, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	461a      	mov	r2, r3
 8005896:	f7ff f87b 	bl	8004990 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	4a8f      	ldr	r2, [pc, #572]	@ (8005adc <HAL_ADC_ConfigChannel+0x68c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	f040 8131 	bne.w	8005b08 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x47e>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	0e9b      	lsrs	r3, r3, #26
 80058bc:	3301      	adds	r3, #1
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2b09      	cmp	r3, #9
 80058c4:	bf94      	ite	ls
 80058c6:	2301      	movls	r3, #1
 80058c8:	2300      	movhi	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	e019      	b.n	8005902 <HAL_ADC_ConfigChannel+0x4b2>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058d6:	fa93 f3a3 	rbit	r3, r3
 80058da:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80058dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058de:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80058e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80058e6:	2320      	movs	r3, #32
 80058e8:	e003      	b.n	80058f2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80058ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058ec:	fab3 f383 	clz	r3, r3
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	3301      	adds	r3, #1
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2b09      	cmp	r3, #9
 80058fa:	bf94      	ite	ls
 80058fc:	2301      	movls	r3, #1
 80058fe:	2300      	movhi	r3, #0
 8005900:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005902:	2b00      	cmp	r3, #0
 8005904:	d079      	beq.n	80059fa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590e:	2b00      	cmp	r3, #0
 8005910:	d107      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x4d2>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	0e9b      	lsrs	r3, r3, #26
 8005918:	3301      	adds	r3, #1
 800591a:	069b      	lsls	r3, r3, #26
 800591c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005920:	e015      	b.n	800594e <HAL_ADC_ConfigChannel+0x4fe>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800592a:	fa93 f3a3 	rbit	r3, r3
 800592e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005932:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800593a:	2320      	movs	r3, #32
 800593c:	e003      	b.n	8005946 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800593e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005940:	fab3 f383 	clz	r3, r3
 8005944:	b2db      	uxtb	r3, r3
 8005946:	3301      	adds	r3, #1
 8005948:	069b      	lsls	r3, r3, #26
 800594a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <HAL_ADC_ConfigChannel+0x51e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	0e9b      	lsrs	r3, r3, #26
 8005960:	3301      	adds	r3, #1
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2101      	movs	r1, #1
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	e017      	b.n	800599e <HAL_ADC_ConfigChannel+0x54e>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005976:	fa93 f3a3 	rbit	r3, r3
 800597a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800597c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800597e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005986:	2320      	movs	r3, #32
 8005988:	e003      	b.n	8005992 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800598a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800598c:	fab3 f383 	clz	r3, r3
 8005990:	b2db      	uxtb	r3, r3
 8005992:	3301      	adds	r3, #1
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	2101      	movs	r1, #1
 800599a:	fa01 f303 	lsl.w	r3, r1, r3
 800599e:	ea42 0103 	orr.w	r1, r2, r3
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x574>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	0e9b      	lsrs	r3, r3, #26
 80059b4:	3301      	adds	r3, #1
 80059b6:	f003 021f 	and.w	r2, r3, #31
 80059ba:	4613      	mov	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4413      	add	r3, r2
 80059c0:	051b      	lsls	r3, r3, #20
 80059c2:	e018      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x5a6>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	fa93 f3a3 	rbit	r3, r3
 80059d0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80059d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80059d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80059dc:	2320      	movs	r3, #32
 80059de:	e003      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80059e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	3301      	adds	r3, #1
 80059ea:	f003 021f 	and.w	r2, r3, #31
 80059ee:	4613      	mov	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4413      	add	r3, r2
 80059f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059f6:	430b      	orrs	r3, r1
 80059f8:	e081      	b.n	8005afe <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d107      	bne.n	8005a16 <HAL_ADC_ConfigChannel+0x5c6>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	0e9b      	lsrs	r3, r3, #26
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	069b      	lsls	r3, r3, #26
 8005a10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a14:	e015      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x5f2>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1e:	fa93 f3a3 	rbit	r3, r3
 8005a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a26:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005a2e:	2320      	movs	r3, #32
 8005a30:	e003      	b.n	8005a3a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	fab3 f383 	clz	r3, r3
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	069b      	lsls	r3, r3, #26
 8005a3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <HAL_ADC_ConfigChannel+0x612>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	0e9b      	lsrs	r3, r3, #26
 8005a54:	3301      	adds	r3, #1
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a60:	e017      	b.n	8005a92 <HAL_ADC_ConfigChannel+0x642>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	fa93 f3a3 	rbit	r3, r3
 8005a6e:	61fb      	str	r3, [r7, #28]
  return result;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005a7a:	2320      	movs	r3, #32
 8005a7c:	e003      	b.n	8005a86 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	fab3 f383 	clz	r3, r3
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	3301      	adds	r3, #1
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a92:	ea42 0103 	orr.w	r1, r2, r3
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <HAL_ADC_ConfigChannel+0x66e>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	0e9b      	lsrs	r3, r3, #26
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	f003 021f 	and.w	r2, r3, #31
 8005aae:	4613      	mov	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3b1e      	subs	r3, #30
 8005ab6:	051b      	lsls	r3, r3, #20
 8005ab8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005abc:	e01e      	b.n	8005afc <HAL_ADC_ConfigChannel+0x6ac>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	fa93 f3a3 	rbit	r3, r3
 8005aca:	613b      	str	r3, [r7, #16]
  return result;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d104      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005ad6:	2320      	movs	r3, #32
 8005ad8:	e006      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x698>
 8005ada:	bf00      	nop
 8005adc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	3301      	adds	r3, #1
 8005aea:	f003 021f 	and.w	r2, r3, #31
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	3b1e      	subs	r3, #30
 8005af6:	051b      	lsls	r3, r3, #20
 8005af8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005afc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b02:	4619      	mov	r1, r3
 8005b04:	f7fe ff18 	bl	8004938 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c0c <HAL_ADC_ConfigChannel+0x7bc>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d071      	beq.n	8005bf8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b14:	483e      	ldr	r0, [pc, #248]	@ (8005c10 <HAL_ADC_ConfigChannel+0x7c0>)
 8005b16:	f7fe fe11 	bl	800473c <LL_ADC_GetCommonPathInternalCh>
 8005b1a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a3c      	ldr	r2, [pc, #240]	@ (8005c14 <HAL_ADC_ConfigChannel+0x7c4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_ADC_ConfigChannel+0x6e2>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8005c18 <HAL_ADC_ConfigChannel+0x7c8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d127      	bne.n	8005b82 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d121      	bne.n	8005b82 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b46:	d157      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b50:	4619      	mov	r1, r3
 8005b52:	482f      	ldr	r0, [pc, #188]	@ (8005c10 <HAL_ADC_ConfigChannel+0x7c0>)
 8005b54:	f7fe fddf 	bl	8004716 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b58:	4b30      	ldr	r3, [pc, #192]	@ (8005c1c <HAL_ADC_ConfigChannel+0x7cc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	099b      	lsrs	r3, r3, #6
 8005b5e:	4a30      	ldr	r2, [pc, #192]	@ (8005c20 <HAL_ADC_ConfigChannel+0x7d0>)
 8005b60:	fba2 2303 	umull	r2, r3, r2, r3
 8005b64:	099b      	lsrs	r3, r3, #6
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	4613      	mov	r3, r2
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b72:	e002      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1f9      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b80:	e03a      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a27      	ldr	r2, [pc, #156]	@ (8005c24 <HAL_ADC_ConfigChannel+0x7d4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d113      	bne.n	8005bb4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10d      	bne.n	8005bb4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a22      	ldr	r2, [pc, #136]	@ (8005c28 <HAL_ADC_ConfigChannel+0x7d8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d02a      	beq.n	8005bf8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005baa:	4619      	mov	r1, r3
 8005bac:	4818      	ldr	r0, [pc, #96]	@ (8005c10 <HAL_ADC_ConfigChannel+0x7c0>)
 8005bae:	f7fe fdb2 	bl	8004716 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bb2:	e021      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c2c <HAL_ADC_ConfigChannel+0x7dc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d11c      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d116      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a16      	ldr	r2, [pc, #88]	@ (8005c28 <HAL_ADC_ConfigChannel+0x7d8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d011      	beq.n	8005bf8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005bdc:	4619      	mov	r1, r3
 8005bde:	480c      	ldr	r0, [pc, #48]	@ (8005c10 <HAL_ADC_ConfigChannel+0x7c0>)
 8005be0:	f7fe fd99 	bl	8004716 <LL_ADC_SetCommonPathInternalCh>
 8005be4:	e008      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bea:	f043 0220 	orr.w	r2, r3, #32
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c00:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	37d8      	adds	r7, #216	@ 0xd8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	80080000 	.word	0x80080000
 8005c10:	50000300 	.word	0x50000300
 8005c14:	c3210000 	.word	0xc3210000
 8005c18:	90c00010 	.word	0x90c00010
 8005c1c:	20000010 	.word	0x20000010
 8005c20:	053e2d63 	.word	0x053e2d63
 8005c24:	c7520000 	.word	0xc7520000
 8005c28:	50000100 	.word	0x50000100
 8005c2c:	cb840000 	.word	0xcb840000

08005c30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe ff47 	bl	8004ad4 <LL_ADC_IsEnabled>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d169      	bne.n	8005d20 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	4b36      	ldr	r3, [pc, #216]	@ (8005d2c <ADC_Enable+0xfc>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00d      	beq.n	8005c76 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c5e:	f043 0210 	orr.w	r2, r3, #16
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e055      	b.n	8005d22 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe ff16 	bl	8004aac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005c80:	482b      	ldr	r0, [pc, #172]	@ (8005d30 <ADC_Enable+0x100>)
 8005c82:	f7fe fd5b 	bl	800473c <LL_ADC_GetCommonPathInternalCh>
 8005c86:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d013      	beq.n	8005cb8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c90:	4b28      	ldr	r3, [pc, #160]	@ (8005d34 <ADC_Enable+0x104>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	099b      	lsrs	r3, r3, #6
 8005c96:	4a28      	ldr	r2, [pc, #160]	@ (8005d38 <ADC_Enable+0x108>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	099b      	lsrs	r3, r3, #6
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005caa:	e002      	b.n	8005cb2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f9      	bne.n	8005cac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005cb8:	f7fe fcec 	bl	8004694 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cbe:	e028      	b.n	8005d12 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe ff05 	bl	8004ad4 <LL_ADC_IsEnabled>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fe fee9 	bl	8004aac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005cda:	f7fe fcdb 	bl	8004694 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d914      	bls.n	8005d12 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d00d      	beq.n	8005d12 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfa:	f043 0210 	orr.w	r2, r3, #16
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d06:	f043 0201 	orr.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e007      	b.n	8005d22 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d1cf      	bne.n	8005cc0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	8000003f 	.word	0x8000003f
 8005d30:	50000300 	.word	0x50000300
 8005d34:	20000010 	.word	0x20000010
 8005d38:	053e2d63 	.word	0x053e2d63

08005d3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d14b      	bne.n	8005dee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d021      	beq.n	8005db4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe fd8d 	bl	8004894 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d032      	beq.n	8005de6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d12b      	bne.n	8005de6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d11f      	bne.n	8005de6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005daa:	f043 0201 	orr.w	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005db2:	e018      	b.n	8005de6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d111      	bne.n	8005de6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dde:	f043 0201 	orr.w	r2, r3, #1
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7fb fc2e 	bl	8001648 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005dec:	e00e      	b.n	8005e0c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff fb1e 	bl	800543c <HAL_ADC_ErrorCallback>
}
 8005e00:	e004      	b.n	8005e0c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
}
 8005e0c:	bf00      	nop
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff faf6 	bl	8005414 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e28:	bf00      	nop
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e4e:	f043 0204 	orr.w	r2, r3, #4
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7ff faf0 	bl	800543c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <LL_ADC_IsEnabled>:
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <LL_ADC_IsEnabled+0x18>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <LL_ADC_IsEnabled+0x1a>
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <LL_ADC_REG_IsConversionOngoing>:
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d101      	bne.n	8005ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b0a1      	sub	sp, #132	@ 0x84
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e08b      	b.n	800604a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005f3e:	2300      	movs	r3, #0
 8005f40:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f4a:	d102      	bne.n	8005f52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f4c:	4b41      	ldr	r3, [pc, #260]	@ (8006054 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005f4e:	60bb      	str	r3, [r7, #8]
 8005f50:	e001      	b.n	8005f56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10b      	bne.n	8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e06a      	b.n	800604a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff ff87 	bl	8005e8a <LL_ADC_REG_IsConversionOngoing>
 8005f7c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff ff81 	bl	8005e8a <LL_ADC_REG_IsConversionOngoing>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d14c      	bne.n	8006028 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d149      	bne.n	8006028 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f94:	4b30      	ldr	r3, [pc, #192]	@ (8006058 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005f96:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d028      	beq.n	8005ff2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6859      	ldr	r1, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005fb2:	035b      	lsls	r3, r3, #13
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fbc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005fc0:	f7ff ff50 	bl	8005e64 <LL_ADC_IsEnabled>
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	4823      	ldr	r0, [pc, #140]	@ (8006054 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005fc8:	f7ff ff4c 	bl	8005e64 <LL_ADC_IsEnabled>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4323      	orrs	r3, r4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d133      	bne.n	800603c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005fd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005fdc:	f023 030f 	bic.w	r3, r3, #15
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	6811      	ldr	r1, [r2, #0]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	6892      	ldr	r2, [r2, #8]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	431a      	orrs	r2, r3
 8005fec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ff0:	e024      	b.n	800603c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ffa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ffc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ffe:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006002:	f7ff ff2f 	bl	8005e64 <LL_ADC_IsEnabled>
 8006006:	4604      	mov	r4, r0
 8006008:	4812      	ldr	r0, [pc, #72]	@ (8006054 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800600a:	f7ff ff2b 	bl	8005e64 <LL_ADC_IsEnabled>
 800600e:	4603      	mov	r3, r0
 8006010:	4323      	orrs	r3, r4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d112      	bne.n	800603c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800601e:	f023 030f 	bic.w	r3, r3, #15
 8006022:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006024:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006026:	e009      	b.n	800603c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800603a:	e000      	b.n	800603e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800603c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006046:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800604a:	4618      	mov	r0, r3
 800604c:	3784      	adds	r7, #132	@ 0x84
 800604e:	46bd      	mov	sp, r7
 8006050:	bd90      	pop	{r4, r7, pc}
 8006052:	bf00      	nop
 8006054:	50000100 	.word	0x50000100
 8006058:	50000300 	.word	0x50000300

0800605c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800606c:	4b0c      	ldr	r3, [pc, #48]	@ (80060a0 <__NVIC_SetPriorityGrouping+0x44>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006078:	4013      	ands	r3, r2
 800607a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800608c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800608e:	4a04      	ldr	r2, [pc, #16]	@ (80060a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	60d3      	str	r3, [r2, #12]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	e000ed00 	.word	0xe000ed00

080060a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060a8:	4b04      	ldr	r3, [pc, #16]	@ (80060bc <__NVIC_GetPriorityGrouping+0x18>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	0a1b      	lsrs	r3, r3, #8
 80060ae:	f003 0307 	and.w	r3, r3, #7
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	e000ed00 	.word	0xe000ed00

080060c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	db0b      	blt.n	80060ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	f003 021f 	and.w	r2, r3, #31
 80060d8:	4907      	ldr	r1, [pc, #28]	@ (80060f8 <__NVIC_EnableIRQ+0x38>)
 80060da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	2001      	movs	r0, #1
 80060e2:	fa00 f202 	lsl.w	r2, r0, r2
 80060e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	e000e100 	.word	0xe000e100

080060fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	6039      	str	r1, [r7, #0]
 8006106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610c:	2b00      	cmp	r3, #0
 800610e:	db0a      	blt.n	8006126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	490c      	ldr	r1, [pc, #48]	@ (8006148 <__NVIC_SetPriority+0x4c>)
 8006116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611a:	0112      	lsls	r2, r2, #4
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	440b      	add	r3, r1
 8006120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006124:	e00a      	b.n	800613c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	4908      	ldr	r1, [pc, #32]	@ (800614c <__NVIC_SetPriority+0x50>)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	3b04      	subs	r3, #4
 8006134:	0112      	lsls	r2, r2, #4
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	440b      	add	r3, r1
 800613a:	761a      	strb	r2, [r3, #24]
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	e000e100 	.word	0xe000e100
 800614c:	e000ed00 	.word	0xe000ed00

08006150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006150:	b480      	push	{r7}
 8006152:	b089      	sub	sp, #36	@ 0x24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f1c3 0307 	rsb	r3, r3, #7
 800616a:	2b04      	cmp	r3, #4
 800616c:	bf28      	it	cs
 800616e:	2304      	movcs	r3, #4
 8006170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3304      	adds	r3, #4
 8006176:	2b06      	cmp	r3, #6
 8006178:	d902      	bls.n	8006180 <NVIC_EncodePriority+0x30>
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	3b03      	subs	r3, #3
 800617e:	e000      	b.n	8006182 <NVIC_EncodePriority+0x32>
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006184:	f04f 32ff 	mov.w	r2, #4294967295
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43da      	mvns	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	401a      	ands	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006198:	f04f 31ff 	mov.w	r1, #4294967295
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	fa01 f303 	lsl.w	r3, r1, r3
 80061a2:	43d9      	mvns	r1, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061a8:	4313      	orrs	r3, r2
         );
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3724      	adds	r7, #36	@ 0x24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061c8:	d301      	bcc.n	80061ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061ca:	2301      	movs	r3, #1
 80061cc:	e00f      	b.n	80061ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061ce:	4a0a      	ldr	r2, [pc, #40]	@ (80061f8 <SysTick_Config+0x40>)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061d6:	210f      	movs	r1, #15
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	f7ff ff8e 	bl	80060fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061e0:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <SysTick_Config+0x40>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061e6:	4b04      	ldr	r3, [pc, #16]	@ (80061f8 <SysTick_Config+0x40>)
 80061e8:	2207      	movs	r2, #7
 80061ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	e000e010 	.word	0xe000e010

080061fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ff29 	bl	800605c <__NVIC_SetPriorityGrouping>
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	4603      	mov	r3, r0
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
 800621e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006220:	f7ff ff40 	bl	80060a4 <__NVIC_GetPriorityGrouping>
 8006224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	6978      	ldr	r0, [r7, #20]
 800622c:	f7ff ff90 	bl	8006150 <NVIC_EncodePriority>
 8006230:	4602      	mov	r2, r0
 8006232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006236:	4611      	mov	r1, r2
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff ff5f 	bl	80060fc <__NVIC_SetPriority>
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	4603      	mov	r3, r0
 800624e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff ff33 	bl	80060c0 <__NVIC_EnableIRQ>
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ffa4 	bl	80061b8 <SysTick_Config>
 8006270:	4603      	mov	r3, r0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e08d      	b.n	80063aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	4b47      	ldr	r3, [pc, #284]	@ (80063b4 <HAL_DMA_Init+0x138>)
 8006296:	429a      	cmp	r2, r3
 8006298:	d80f      	bhi.n	80062ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	4b45      	ldr	r3, [pc, #276]	@ (80063b8 <HAL_DMA_Init+0x13c>)
 80062a2:	4413      	add	r3, r2
 80062a4:	4a45      	ldr	r2, [pc, #276]	@ (80063bc <HAL_DMA_Init+0x140>)
 80062a6:	fba2 2303 	umull	r2, r3, r2, r3
 80062aa:	091b      	lsrs	r3, r3, #4
 80062ac:	009a      	lsls	r2, r3, #2
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a42      	ldr	r2, [pc, #264]	@ (80063c0 <HAL_DMA_Init+0x144>)
 80062b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80062b8:	e00e      	b.n	80062d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	4b40      	ldr	r3, [pc, #256]	@ (80063c4 <HAL_DMA_Init+0x148>)
 80062c2:	4413      	add	r3, r2
 80062c4:	4a3d      	ldr	r2, [pc, #244]	@ (80063bc <HAL_DMA_Init+0x140>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	091b      	lsrs	r3, r3, #4
 80062cc:	009a      	lsls	r2, r3, #2
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a3c      	ldr	r2, [pc, #240]	@ (80063c8 <HAL_DMA_Init+0x14c>)
 80062d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80062ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80062fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006308:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006314:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa82 	bl	8006834 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006338:	d102      	bne.n	8006340 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006354:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d010      	beq.n	8006380 <HAL_DMA_Init+0x104>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b04      	cmp	r3, #4
 8006364:	d80c      	bhi.n	8006380 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 faa2 	bl	80068b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800637c:	605a      	str	r2, [r3, #4]
 800637e:	e008      	b.n	8006392 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40020407 	.word	0x40020407
 80063b8:	bffdfff8 	.word	0xbffdfff8
 80063bc:	cccccccd 	.word	0xcccccccd
 80063c0:	40020000 	.word	0x40020000
 80063c4:	bffdfbf8 	.word	0xbffdfbf8
 80063c8:	40020400 	.word	0x40020400

080063cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_DMA_Start_IT+0x20>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e066      	b.n	80064ba <HAL_DMA_Start_IT+0xee>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d155      	bne.n	80064ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f9c7 	bl	80067b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 020e 	orr.w	r2, r2, #14
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	e00f      	b.n	8006464 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0204 	bic.w	r2, r2, #4
 8006452:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 020a 	orr.w	r2, r2, #10
 8006462:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800647c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006480:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006494:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006498:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	e005      	b.n	80064b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
 80064b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d005      	beq.n	80064e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2204      	movs	r2, #4
 80064de:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e037      	b.n	8006556 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 020e 	bic.w	r2, r2, #14
 80064f4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006504:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651a:	f003 021f 	and.w	r2, r3, #31
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	2101      	movs	r1, #1
 8006524:	fa01 f202 	lsl.w	r2, r1, r2
 8006528:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006532:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00c      	beq.n	8006556 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006546:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800654a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006554:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d00d      	beq.n	80065a8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2204      	movs	r2, #4
 8006590:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
 80065a6:	e047      	b.n	8006638 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 020e 	bic.w	r2, r2, #14
 80065b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065dc:	f003 021f 	and.w	r2, r3, #31
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	2101      	movs	r1, #1
 80065e6:	fa01 f202 	lsl.w	r2, r1, r2
 80065ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80065f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00c      	beq.n	8006618 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800660c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006616:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
    }
  }
  return status;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	2204      	movs	r2, #4
 8006664:	409a      	lsls	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4013      	ands	r3, r2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d026      	beq.n	80066bc <HAL_DMA_IRQHandler+0x7a>
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d021      	beq.n	80066bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d107      	bne.n	8006696 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0204 	bic.w	r2, r2, #4
 8006694:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800669a:	f003 021f 	and.w	r2, r3, #31
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	2104      	movs	r1, #4
 80066a4:	fa01 f202 	lsl.w	r2, r1, r2
 80066a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d071      	beq.n	8006796 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80066ba:	e06c      	b.n	8006796 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	2202      	movs	r2, #2
 80066c6:	409a      	lsls	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d02e      	beq.n	800672e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d029      	beq.n	800672e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10b      	bne.n	8006700 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 020a 	bic.w	r2, r2, #10
 80066f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006704:	f003 021f 	and.w	r2, r3, #31
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670c:	2102      	movs	r1, #2
 800670e:	fa01 f202 	lsl.w	r2, r1, r2
 8006712:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d038      	beq.n	8006796 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800672c:	e033      	b.n	8006796 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	2208      	movs	r2, #8
 8006738:	409a      	lsls	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4013      	ands	r3, r2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d02a      	beq.n	8006798 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d025      	beq.n	8006798 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 020e 	bic.w	r2, r2, #14
 800675a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006760:	f003 021f 	and.w	r2, r3, #31
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006768:	2101      	movs	r1, #1
 800676a:	fa01 f202 	lsl.w	r2, r1, r2
 800676e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006796:	bf00      	nop
 8006798:	bf00      	nop
}
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80067e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e6:	f003 021f 	and.w	r2, r3, #31
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ee:	2101      	movs	r1, #1
 80067f0:	fa01 f202 	lsl.w	r2, r1, r2
 80067f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b10      	cmp	r3, #16
 8006804:	d108      	bne.n	8006818 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006816:	e007      	b.n	8006828 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	60da      	str	r2, [r3, #12]
}
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	461a      	mov	r2, r3
 8006842:	4b16      	ldr	r3, [pc, #88]	@ (800689c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006844:	429a      	cmp	r2, r3
 8006846:	d802      	bhi.n	800684e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006848:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	e001      	b.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800684e:	4b15      	ldr	r3, [pc, #84]	@ (80068a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006850:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	3b08      	subs	r3, #8
 800685e:	4a12      	ldr	r2, [pc, #72]	@ (80068a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006860:	fba2 2303 	umull	r2, r3, r2, r3
 8006864:	091b      	lsrs	r3, r3, #4
 8006866:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686c:	089b      	lsrs	r3, r3, #2
 800686e:	009a      	lsls	r2, r3, #2
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4413      	add	r3, r2
 8006874:	461a      	mov	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a0b      	ldr	r2, [pc, #44]	@ (80068ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800687e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2201      	movs	r2, #1
 8006888:	409a      	lsls	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40020407 	.word	0x40020407
 80068a0:	40020800 	.word	0x40020800
 80068a4:	40020820 	.word	0x40020820
 80068a8:	cccccccd 	.word	0xcccccccd
 80068ac:	40020880 	.word	0x40020880

080068b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4b0b      	ldr	r3, [pc, #44]	@ (80068f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a08      	ldr	r2, [pc, #32]	@ (80068f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80068d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	2201      	movs	r2, #1
 80068de:	409a      	lsls	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	1000823f 	.word	0x1000823f
 80068f4:	40020940 	.word	0x40020940

080068f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006906:	e15a      	b.n	8006bbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	2101      	movs	r1, #1
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	fa01 f303 	lsl.w	r3, r1, r3
 8006914:	4013      	ands	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 814c 	beq.w	8006bb8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	2b01      	cmp	r3, #1
 800692a:	d005      	beq.n	8006938 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006934:	2b02      	cmp	r3, #2
 8006936:	d130      	bne.n	800699a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	2203      	movs	r2, #3
 8006944:	fa02 f303 	lsl.w	r3, r2, r3
 8006948:	43db      	mvns	r3, r3
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4013      	ands	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800696e:	2201      	movs	r2, #1
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	fa02 f303 	lsl.w	r3, r2, r3
 8006976:	43db      	mvns	r3, r3
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	091b      	lsrs	r3, r3, #4
 8006984:	f003 0201 	and.w	r2, r3, #1
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d017      	beq.n	80069d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	2203      	movs	r2, #3
 80069b2:	fa02 f303 	lsl.w	r3, r2, r3
 80069b6:	43db      	mvns	r3, r3
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4013      	ands	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d123      	bne.n	8006a2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	08da      	lsrs	r2, r3, #3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3208      	adds	r2, #8
 80069ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	220f      	movs	r2, #15
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	43db      	mvns	r3, r3
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4013      	ands	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	08da      	lsrs	r2, r3, #3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3208      	adds	r2, #8
 8006a24:	6939      	ldr	r1, [r7, #16]
 8006a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	2203      	movs	r2, #3
 8006a36:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f003 0203 	and.w	r2, r3, #3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80a6 	beq.w	8006bb8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8006bdc <HAL_GPIO_Init+0x2e4>)
 8006a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a70:	4a5a      	ldr	r2, [pc, #360]	@ (8006bdc <HAL_GPIO_Init+0x2e4>)
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a78:	4b58      	ldr	r3, [pc, #352]	@ (8006bdc <HAL_GPIO_Init+0x2e4>)
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a84:	4a56      	ldr	r2, [pc, #344]	@ (8006be0 <HAL_GPIO_Init+0x2e8>)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	089b      	lsrs	r3, r3, #2
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	220f      	movs	r2, #15
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006aae:	d01f      	beq.n	8006af0 <HAL_GPIO_Init+0x1f8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a4c      	ldr	r2, [pc, #304]	@ (8006be4 <HAL_GPIO_Init+0x2ec>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d019      	beq.n	8006aec <HAL_GPIO_Init+0x1f4>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a4b      	ldr	r2, [pc, #300]	@ (8006be8 <HAL_GPIO_Init+0x2f0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d013      	beq.n	8006ae8 <HAL_GPIO_Init+0x1f0>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8006bec <HAL_GPIO_Init+0x2f4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00d      	beq.n	8006ae4 <HAL_GPIO_Init+0x1ec>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a49      	ldr	r2, [pc, #292]	@ (8006bf0 <HAL_GPIO_Init+0x2f8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d007      	beq.n	8006ae0 <HAL_GPIO_Init+0x1e8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a48      	ldr	r2, [pc, #288]	@ (8006bf4 <HAL_GPIO_Init+0x2fc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d101      	bne.n	8006adc <HAL_GPIO_Init+0x1e4>
 8006ad8:	2305      	movs	r3, #5
 8006ada:	e00a      	b.n	8006af2 <HAL_GPIO_Init+0x1fa>
 8006adc:	2306      	movs	r3, #6
 8006ade:	e008      	b.n	8006af2 <HAL_GPIO_Init+0x1fa>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	e006      	b.n	8006af2 <HAL_GPIO_Init+0x1fa>
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e004      	b.n	8006af2 <HAL_GPIO_Init+0x1fa>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e002      	b.n	8006af2 <HAL_GPIO_Init+0x1fa>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <HAL_GPIO_Init+0x1fa>
 8006af0:	2300      	movs	r3, #0
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	f002 0203 	and.w	r2, r2, #3
 8006af8:	0092      	lsls	r2, r2, #2
 8006afa:	4093      	lsls	r3, r2
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b02:	4937      	ldr	r1, [pc, #220]	@ (8006be0 <HAL_GPIO_Init+0x2e8>)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	089b      	lsrs	r3, r3, #2
 8006b08:	3302      	adds	r3, #2
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b10:	4b39      	ldr	r3, [pc, #228]	@ (8006bf8 <HAL_GPIO_Init+0x300>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b34:	4a30      	ldr	r2, [pc, #192]	@ (8006bf8 <HAL_GPIO_Init+0x300>)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006bf8 <HAL_GPIO_Init+0x300>)
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	43db      	mvns	r3, r3
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4013      	ands	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b5e:	4a26      	ldr	r2, [pc, #152]	@ (8006bf8 <HAL_GPIO_Init+0x300>)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b64:	4b24      	ldr	r3, [pc, #144]	@ (8006bf8 <HAL_GPIO_Init+0x300>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4013      	ands	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b88:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf8 <HAL_GPIO_Init+0x300>)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf8 <HAL_GPIO_Init+0x300>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	43db      	mvns	r3, r3
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bb2:	4a11      	ldr	r2, [pc, #68]	@ (8006bf8 <HAL_GPIO_Init+0x300>)
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f47f ae9d 	bne.w	8006908 <HAL_GPIO_Init+0x10>
  }
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	371c      	adds	r7, #28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	40010000 	.word	0x40010000
 8006be4:	48000400 	.word	0x48000400
 8006be8:	48000800 	.word	0x48000800
 8006bec:	48000c00 	.word	0x48000c00
 8006bf0:	48001000 	.word	0x48001000
 8006bf4:	48001400 	.word	0x48001400
 8006bf8:	40010400 	.word	0x40010400

08006bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	887b      	ldrh	r3, [r7, #2]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c14:	2301      	movs	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
 8006c18:	e001      	b.n	8006c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	807b      	strh	r3, [r7, #2]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c3c:	787b      	ldrb	r3, [r7, #1]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c42:	887a      	ldrh	r2, [r7, #2]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c48:	e002      	b.n	8006c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c4a:	887a      	ldrh	r2, [r7, #2]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006c6e:	887a      	ldrh	r2, [r7, #2]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4013      	ands	r3, r2
 8006c74:	041a      	lsls	r2, r3, #16
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	43d9      	mvns	r1, r3
 8006c7a:	887b      	ldrh	r3, [r7, #2]
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	619a      	str	r2, [r3, #24]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006c9a:	4b08      	ldr	r3, [pc, #32]	@ (8006cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c9c:	695a      	ldr	r2, [r3, #20]
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d006      	beq.n	8006cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ca6:	4a05      	ldr	r2, [pc, #20]	@ (8006cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fb f97c 	bl	8001fac <HAL_GPIO_EXTI_Callback>
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40010400 	.word	0x40010400

08006cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e08d      	b.n	8006dee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fa ffac 	bl	8001c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2224      	movs	r2, #36	@ 0x24
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d107      	bne.n	8006d3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d36:	609a      	str	r2, [r3, #8]
 8006d38:	e006      	b.n	8006d48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006d46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d108      	bne.n	8006d62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d5e:	605a      	str	r2, [r3, #4]
 8006d60:	e007      	b.n	8006d72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691a      	ldr	r2, [r3, #16]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	69d9      	ldr	r1, [r3, #28]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a1a      	ldr	r2, [r3, #32]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	817b      	strh	r3, [r7, #10]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	813b      	strh	r3, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	f040 80f9 	bne.w	8007012 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_I2C_Mem_Write+0x34>
 8006e26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d105      	bne.n	8006e38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0ed      	b.n	8007014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_I2C_Mem_Write+0x4e>
 8006e42:	2302      	movs	r3, #2
 8006e44:	e0e6      	b.n	8007014 <HAL_I2C_Mem_Write+0x21c>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e4e:	f7fd fc21 	bl	8004694 <HAL_GetTick>
 8006e52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	2319      	movs	r3, #25
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fac3 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0d1      	b.n	8007014 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2221      	movs	r2, #33	@ 0x21
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2240      	movs	r2, #64	@ 0x40
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a3a      	ldr	r2, [r7, #32]
 8006e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e98:	88f8      	ldrh	r0, [r7, #6]
 8006e9a:	893a      	ldrh	r2, [r7, #8]
 8006e9c:	8979      	ldrh	r1, [r7, #10]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f9d3 	bl	8007254 <I2C_RequestMemoryWrite>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0a9      	b.n	8007014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2bff      	cmp	r3, #255	@ 0xff
 8006ec8:	d90e      	bls.n	8006ee8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	22ff      	movs	r2, #255	@ 0xff
 8006ece:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	8979      	ldrh	r1, [r7, #10]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fc47 	bl	8007774 <I2C_TransferConfig>
 8006ee6:	e00f      	b.n	8006f08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	8979      	ldrh	r1, [r7, #10]
 8006efa:	2300      	movs	r3, #0
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 fc36 	bl	8007774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 fac6 	bl	800749e <I2C_WaitOnTXISFlagUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e07b      	b.n	8007014 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	781a      	ldrb	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d034      	beq.n	8006fc0 <HAL_I2C_Mem_Write+0x1c8>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d130      	bne.n	8006fc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f64:	2200      	movs	r2, #0
 8006f66:	2180      	movs	r1, #128	@ 0x80
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fa3f 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e04d      	b.n	8007014 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2bff      	cmp	r3, #255	@ 0xff
 8006f80:	d90e      	bls.n	8006fa0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	22ff      	movs	r2, #255	@ 0xff
 8006f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	8979      	ldrh	r1, [r7, #10]
 8006f90:	2300      	movs	r3, #0
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fbeb 	bl	8007774 <I2C_TransferConfig>
 8006f9e:	e00f      	b.n	8006fc0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	8979      	ldrh	r1, [r7, #10]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 fbda 	bl	8007774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d19e      	bne.n	8006f08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 faac 	bl	800752c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e01a      	b.n	8007014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800701c <HAL_I2C_Mem_Write+0x224>)
 8006ff2:	400b      	ands	r3, r1
 8006ff4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	e000      	b.n	8007014 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007012:	2302      	movs	r3, #2
  }
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	fe00e800 	.word	0xfe00e800

08007020 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	4608      	mov	r0, r1
 800702a:	4611      	mov	r1, r2
 800702c:	461a      	mov	r2, r3
 800702e:	4603      	mov	r3, r0
 8007030:	817b      	strh	r3, [r7, #10]
 8007032:	460b      	mov	r3, r1
 8007034:	813b      	strh	r3, [r7, #8]
 8007036:	4613      	mov	r3, r2
 8007038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b20      	cmp	r3, #32
 8007044:	f040 80fd 	bne.w	8007242 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_I2C_Mem_Read+0x34>
 800704e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800705a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e0f1      	b.n	8007244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_I2C_Mem_Read+0x4e>
 800706a:	2302      	movs	r3, #2
 800706c:	e0ea      	b.n	8007244 <HAL_I2C_Mem_Read+0x224>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007076:	f7fd fb0d 	bl	8004694 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2319      	movs	r3, #25
 8007082:	2201      	movs	r2, #1
 8007084:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f9af 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e0d5      	b.n	8007244 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2222      	movs	r2, #34	@ 0x22
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2240      	movs	r2, #64	@ 0x40
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a3a      	ldr	r2, [r7, #32]
 80070b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80070b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070c0:	88f8      	ldrh	r0, [r7, #6]
 80070c2:	893a      	ldrh	r2, [r7, #8]
 80070c4:	8979      	ldrh	r1, [r7, #10]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4603      	mov	r3, r0
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f913 	bl	80072fc <I2C_RequestMemoryRead>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0ad      	b.n	8007244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2bff      	cmp	r3, #255	@ 0xff
 80070f0:	d90e      	bls.n	8007110 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	22ff      	movs	r2, #255	@ 0xff
 80070f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	8979      	ldrh	r1, [r7, #10]
 8007100:	4b52      	ldr	r3, [pc, #328]	@ (800724c <HAL_I2C_Mem_Read+0x22c>)
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fb33 	bl	8007774 <I2C_TransferConfig>
 800710e:	e00f      	b.n	8007130 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711e:	b2da      	uxtb	r2, r3
 8007120:	8979      	ldrh	r1, [r7, #10]
 8007122:	4b4a      	ldr	r3, [pc, #296]	@ (800724c <HAL_I2C_Mem_Read+0x22c>)
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fb22 	bl	8007774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007136:	2200      	movs	r2, #0
 8007138:	2104      	movs	r1, #4
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 f956 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e07c      	b.n	8007244 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d034      	beq.n	80071f0 <HAL_I2C_Mem_Read+0x1d0>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d130      	bne.n	80071f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	2200      	movs	r2, #0
 8007196:	2180      	movs	r1, #128	@ 0x80
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f927 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e04d      	b.n	8007244 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2bff      	cmp	r3, #255	@ 0xff
 80071b0:	d90e      	bls.n	80071d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	22ff      	movs	r2, #255	@ 0xff
 80071b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	8979      	ldrh	r1, [r7, #10]
 80071c0:	2300      	movs	r3, #0
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 fad3 	bl	8007774 <I2C_TransferConfig>
 80071ce:	e00f      	b.n	80071f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	8979      	ldrh	r1, [r7, #10]
 80071e2:	2300      	movs	r3, #0
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 fac2 	bl	8007774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d19a      	bne.n	8007130 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f994 	bl	800752c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e01a      	b.n	8007244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2220      	movs	r2, #32
 8007214:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6859      	ldr	r1, [r3, #4]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <HAL_I2C_Mem_Read+0x230>)
 8007222:	400b      	ands	r3, r1
 8007224:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2220      	movs	r2, #32
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e000      	b.n	8007244 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007242:	2302      	movs	r3, #2
  }
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	80002400 	.word	0x80002400
 8007250:	fe00e800 	.word	0xfe00e800

08007254 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af02      	add	r7, sp, #8
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	4608      	mov	r0, r1
 800725e:	4611      	mov	r1, r2
 8007260:	461a      	mov	r2, r3
 8007262:	4603      	mov	r3, r0
 8007264:	817b      	strh	r3, [r7, #10]
 8007266:	460b      	mov	r3, r1
 8007268:	813b      	strh	r3, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	b2da      	uxtb	r2, r3
 8007272:	8979      	ldrh	r1, [r7, #10]
 8007274:	4b20      	ldr	r3, [pc, #128]	@ (80072f8 <I2C_RequestMemoryWrite+0xa4>)
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fa79 	bl	8007774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f909 	bl	800749e <I2C_WaitOnTXISFlagUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e02c      	b.n	80072f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d105      	bne.n	80072a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800729c:	893b      	ldrh	r3, [r7, #8]
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80072a6:	e015      	b.n	80072d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072a8:	893b      	ldrh	r3, [r7, #8]
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	69b9      	ldr	r1, [r7, #24]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f8ef 	bl	800749e <I2C_WaitOnTXISFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e012      	b.n	80072f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072ca:	893b      	ldrh	r3, [r7, #8]
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2200      	movs	r2, #0
 80072dc:	2180      	movs	r1, #128	@ 0x80
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 f884 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	80002000 	.word	0x80002000

080072fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af02      	add	r7, sp, #8
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	4608      	mov	r0, r1
 8007306:	4611      	mov	r1, r2
 8007308:	461a      	mov	r2, r3
 800730a:	4603      	mov	r3, r0
 800730c:	817b      	strh	r3, [r7, #10]
 800730e:	460b      	mov	r3, r1
 8007310:	813b      	strh	r3, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	b2da      	uxtb	r2, r3
 800731a:	8979      	ldrh	r1, [r7, #10]
 800731c:	4b20      	ldr	r3, [pc, #128]	@ (80073a0 <I2C_RequestMemoryRead+0xa4>)
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	2300      	movs	r3, #0
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 fa26 	bl	8007774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	69b9      	ldr	r1, [r7, #24]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f8b6 	bl	800749e <I2C_WaitOnTXISFlagUntilTimeout>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e02c      	b.n	8007396 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d105      	bne.n	800734e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007342:	893b      	ldrh	r3, [r7, #8]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	629a      	str	r2, [r3, #40]	@ 0x28
 800734c:	e015      	b.n	800737a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800734e:	893b      	ldrh	r3, [r7, #8]
 8007350:	0a1b      	lsrs	r3, r3, #8
 8007352:	b29b      	uxth	r3, r3
 8007354:	b2da      	uxtb	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	69b9      	ldr	r1, [r7, #24]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f89c 	bl	800749e <I2C_WaitOnTXISFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e012      	b.n	8007396 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007370:	893b      	ldrh	r3, [r7, #8]
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2200      	movs	r2, #0
 8007382:	2140      	movs	r1, #64	@ 0x40
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f831 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	80002000 	.word	0x80002000

080073a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d103      	bne.n	80073c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2200      	movs	r2, #0
 80073c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d007      	beq.n	80073e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	619a      	str	r2, [r3, #24]
  }
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073fc:	e03b      	b.n	8007476 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f8d6 	bl	80075b4 <I2C_IsErrorOccurred>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e041      	b.n	8007496 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d02d      	beq.n	8007476 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741a:	f7fd f93b 	bl	8004694 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <I2C_WaitOnFlagUntilTimeout+0x44>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d122      	bne.n	8007476 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	4013      	ands	r3, r2
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	429a      	cmp	r2, r3
 800743e:	bf0c      	ite	eq
 8007440:	2301      	moveq	r3, #1
 8007442:	2300      	movne	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	429a      	cmp	r2, r3
 800744c:	d113      	bne.n	8007476 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007452:	f043 0220 	orr.w	r2, r3, #32
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e00f      	b.n	8007496 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	699a      	ldr	r2, [r3, #24]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4013      	ands	r3, r2
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	429a      	cmp	r2, r3
 8007484:	bf0c      	ite	eq
 8007486:	2301      	moveq	r3, #1
 8007488:	2300      	movne	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	429a      	cmp	r2, r3
 8007492:	d0b4      	beq.n	80073fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074aa:	e033      	b.n	8007514 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f87f 	bl	80075b4 <I2C_IsErrorOccurred>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e031      	b.n	8007524 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d025      	beq.n	8007514 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c8:	f7fd f8e4 	bl	8004694 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d302      	bcc.n	80074de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d11a      	bne.n	8007514 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d013      	beq.n	8007514 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f0:	f043 0220 	orr.w	r2, r3, #32
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e007      	b.n	8007524 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b02      	cmp	r3, #2
 8007520:	d1c4      	bne.n	80074ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007538:	e02f      	b.n	800759a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f838 	bl	80075b4 <I2C_IsErrorOccurred>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e02d      	b.n	80075aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800754e:	f7fd f8a1 	bl	8004694 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	d302      	bcc.n	8007564 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d11a      	bne.n	800759a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	f003 0320 	and.w	r3, r3, #32
 800756e:	2b20      	cmp	r3, #32
 8007570:	d013      	beq.n	800759a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007576:	f043 0220 	orr.w	r2, r3, #32
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e007      	b.n	80075aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d1c8      	bne.n	800753a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	@ 0x28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d068      	beq.n	80076b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2210      	movs	r2, #16
 80075e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80075e8:	e049      	b.n	800767e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f0:	d045      	beq.n	800767e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80075f2:	f7fd f84f 	bl	8004694 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d302      	bcc.n	8007608 <I2C_IsErrorOccurred+0x54>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d13a      	bne.n	800767e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007612:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800761a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800762a:	d121      	bne.n	8007670 <I2C_IsErrorOccurred+0xbc>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007632:	d01d      	beq.n	8007670 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007634:	7cfb      	ldrb	r3, [r7, #19]
 8007636:	2b20      	cmp	r3, #32
 8007638:	d01a      	beq.n	8007670 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007648:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800764a:	f7fd f823 	bl	8004694 <HAL_GetTick>
 800764e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007650:	e00e      	b.n	8007670 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007652:	f7fd f81f 	bl	8004694 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b19      	cmp	r3, #25
 800765e:	d907      	bls.n	8007670 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	f043 0320 	orr.w	r3, r3, #32
 8007666:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800766e:	e006      	b.n	800767e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b20      	cmp	r3, #32
 800767c:	d1e9      	bne.n	8007652 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b20      	cmp	r3, #32
 800768a:	d003      	beq.n	8007694 <I2C_IsErrorOccurred+0xe0>
 800768c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0aa      	beq.n	80075ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2220      	movs	r2, #32
 80076a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	f043 0304 	orr.w	r3, r3, #4
 80076aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00b      	beq.n	80076fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f043 0308 	orr.w	r3, r3, #8
 80076ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80076f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	f043 0302 	orr.w	r3, r3, #2
 800770e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007718:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01c      	beq.n	8007762 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7ff fe3b 	bl	80073a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6859      	ldr	r1, [r3, #4]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	4b0d      	ldr	r3, [pc, #52]	@ (8007770 <I2C_IsErrorOccurred+0x1bc>)
 800773a:	400b      	ands	r3, r1
 800773c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	431a      	orrs	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2220      	movs	r2, #32
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007762:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007766:	4618      	mov	r0, r3
 8007768:	3728      	adds	r7, #40	@ 0x28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	fe00e800 	.word	0xfe00e800

08007774 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	817b      	strh	r3, [r7, #10]
 8007782:	4613      	mov	r3, r2
 8007784:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007786:	897b      	ldrh	r3, [r7, #10]
 8007788:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800778c:	7a7b      	ldrb	r3, [r7, #9]
 800778e:	041b      	lsls	r3, r3, #16
 8007790:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007794:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	4313      	orrs	r3, r2
 800779e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	0d5b      	lsrs	r3, r3, #21
 80077ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80077b2:	4b08      	ldr	r3, [pc, #32]	@ (80077d4 <I2C_TransferConfig+0x60>)
 80077b4:	430b      	orrs	r3, r1
 80077b6:	43db      	mvns	r3, r3
 80077b8:	ea02 0103 	and.w	r1, r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	03ff63ff 	.word	0x03ff63ff

080077d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	d138      	bne.n	8007860 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e032      	b.n	8007862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2224      	movs	r2, #36	@ 0x24
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800782a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6819      	ldr	r1, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0201 	orr.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	e000      	b.n	8007862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007860:	2302      	movs	r3, #2
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b20      	cmp	r3, #32
 8007882:	d139      	bne.n	80078f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800788e:	2302      	movs	r3, #2
 8007890:	e033      	b.n	80078fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2224      	movs	r2, #36	@ 0x24
 800789e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0201 	bic.w	r2, r2, #1
 80078b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80078c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
	...

08007908 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d141      	bne.n	800799a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007916:	4b4b      	ldr	r3, [pc, #300]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800791e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007922:	d131      	bne.n	8007988 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007924:	4b47      	ldr	r3, [pc, #284]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800792a:	4a46      	ldr	r2, [pc, #280]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800792c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007930:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007934:	4b43      	ldr	r3, [pc, #268]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800793c:	4a41      	ldr	r2, [pc, #260]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800793e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007942:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007944:	4b40      	ldr	r3, [pc, #256]	@ (8007a48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2232      	movs	r2, #50	@ 0x32
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	4a3f      	ldr	r2, [pc, #252]	@ (8007a4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	0c9b      	lsrs	r3, r3, #18
 8007956:	3301      	adds	r3, #1
 8007958:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800795a:	e002      	b.n	8007962 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3b01      	subs	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007962:	4b38      	ldr	r3, [pc, #224]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800796a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800796e:	d102      	bne.n	8007976 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f2      	bne.n	800795c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007976:	4b33      	ldr	r3, [pc, #204]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007982:	d158      	bne.n	8007a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e057      	b.n	8007a38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007988:	4b2e      	ldr	r3, [pc, #184]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800798a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800798e:	4a2d      	ldr	r2, [pc, #180]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007994:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007998:	e04d      	b.n	8007a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079a0:	d141      	bne.n	8007a26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80079a2:	4b28      	ldr	r3, [pc, #160]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80079aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ae:	d131      	bne.n	8007a14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80079b0:	4b24      	ldr	r3, [pc, #144]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079b6:	4a23      	ldr	r2, [pc, #140]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80079c0:	4b20      	ldr	r3, [pc, #128]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80079c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80079ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80079d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2232      	movs	r2, #50	@ 0x32
 80079d6:	fb02 f303 	mul.w	r3, r2, r3
 80079da:	4a1c      	ldr	r2, [pc, #112]	@ (8007a4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80079dc:	fba2 2303 	umull	r2, r3, r2, r3
 80079e0:	0c9b      	lsrs	r3, r3, #18
 80079e2:	3301      	adds	r3, #1
 80079e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80079e6:	e002      	b.n	80079ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80079ee:	4b15      	ldr	r3, [pc, #84]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079fa:	d102      	bne.n	8007a02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f2      	bne.n	80079e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a02:	4b10      	ldr	r3, [pc, #64]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a0e:	d112      	bne.n	8007a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e011      	b.n	8007a38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a14:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007a24:	e007      	b.n	8007a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007a26:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a2e:	4a05      	ldr	r2, [pc, #20]	@ (8007a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007a34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	40007000 	.word	0x40007000
 8007a48:	20000010 	.word	0x20000010
 8007a4c:	431bde83 	.word	0x431bde83

08007a50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007a50:	b480      	push	{r7}
 8007a52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007a54:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	4a04      	ldr	r2, [pc, #16]	@ (8007a6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a5e:	6093      	str	r3, [r2, #8]
}
 8007a60:	bf00      	nop
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40007000 	.word	0x40007000

08007a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e2fe      	b.n	8008080 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d075      	beq.n	8007b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a8e:	4b97      	ldr	r3, [pc, #604]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 030c 	and.w	r3, r3, #12
 8007a96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a98:	4b94      	ldr	r3, [pc, #592]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b0c      	cmp	r3, #12
 8007aa6:	d102      	bne.n	8007aae <HAL_RCC_OscConfig+0x3e>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d002      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x44>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d10b      	bne.n	8007acc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ab4:	4b8d      	ldr	r3, [pc, #564]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d05b      	beq.n	8007b78 <HAL_RCC_OscConfig+0x108>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d157      	bne.n	8007b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e2d9      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad4:	d106      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x74>
 8007ad6:	4b85      	ldr	r3, [pc, #532]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a84      	ldr	r2, [pc, #528]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	e01d      	b.n	8007b20 <HAL_RCC_OscConfig+0xb0>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007aec:	d10c      	bne.n	8007b08 <HAL_RCC_OscConfig+0x98>
 8007aee:	4b7f      	ldr	r3, [pc, #508]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a7e      	ldr	r2, [pc, #504]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	4b7c      	ldr	r3, [pc, #496]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a7b      	ldr	r2, [pc, #492]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	e00b      	b.n	8007b20 <HAL_RCC_OscConfig+0xb0>
 8007b08:	4b78      	ldr	r3, [pc, #480]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a77      	ldr	r2, [pc, #476]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	4b75      	ldr	r3, [pc, #468]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a74      	ldr	r2, [pc, #464]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d013      	beq.n	8007b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fc fdb4 	bl	8004694 <HAL_GetTick>
 8007b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b30:	f7fc fdb0 	bl	8004694 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b64      	cmp	r3, #100	@ 0x64
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e29e      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b42:	4b6a      	ldr	r3, [pc, #424]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f0      	beq.n	8007b30 <HAL_RCC_OscConfig+0xc0>
 8007b4e:	e014      	b.n	8007b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b50:	f7fc fda0 	bl	8004694 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b56:	e008      	b.n	8007b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b58:	f7fc fd9c 	bl	8004694 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b64      	cmp	r3, #100	@ 0x64
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e28a      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b6a:	4b60      	ldr	r3, [pc, #384]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f0      	bne.n	8007b58 <HAL_RCC_OscConfig+0xe8>
 8007b76:	e000      	b.n	8007b7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d075      	beq.n	8007c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b86:	4b59      	ldr	r3, [pc, #356]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 030c 	and.w	r3, r3, #12
 8007b8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b90:	4b56      	ldr	r3, [pc, #344]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f003 0303 	and.w	r3, r3, #3
 8007b98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2b0c      	cmp	r3, #12
 8007b9e:	d102      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x136>
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d002      	beq.n	8007bac <HAL_RCC_OscConfig+0x13c>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b04      	cmp	r3, #4
 8007baa:	d11f      	bne.n	8007bec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bac:	4b4f      	ldr	r3, [pc, #316]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x154>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e25d      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc4:	4b49      	ldr	r3, [pc, #292]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	061b      	lsls	r3, r3, #24
 8007bd2:	4946      	ldr	r1, [pc, #280]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007bd8:	4b45      	ldr	r3, [pc, #276]	@ (8007cf0 <HAL_RCC_OscConfig+0x280>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fc fd0d 	bl	80045fc <HAL_InitTick>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d043      	beq.n	8007c70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e249      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d023      	beq.n	8007c3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c00:	f7fc fd48 	bl	8004694 <HAL_GetTick>
 8007c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c06:	e008      	b.n	8007c1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c08:	f7fc fd44 	bl	8004694 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d901      	bls.n	8007c1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e232      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c1a:	4b34      	ldr	r3, [pc, #208]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0f0      	beq.n	8007c08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c26:	4b31      	ldr	r3, [pc, #196]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	061b      	lsls	r3, r3, #24
 8007c34:	492d      	ldr	r1, [pc, #180]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	604b      	str	r3, [r1, #4]
 8007c3a:	e01a      	b.n	8007c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a2a      	ldr	r2, [pc, #168]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007c42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c48:	f7fc fd24 	bl	8004694 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c50:	f7fc fd20 	bl	8004694 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e20e      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c62:	4b22      	ldr	r3, [pc, #136]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f0      	bne.n	8007c50 <HAL_RCC_OscConfig+0x1e0>
 8007c6e:	e000      	b.n	8007c72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0308 	and.w	r3, r3, #8
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d041      	beq.n	8007d02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01c      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c86:	4b19      	ldr	r3, [pc, #100]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c8c:	4a17      	ldr	r2, [pc, #92]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c96:	f7fc fcfd 	bl	8004694 <HAL_GetTick>
 8007c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c9c:	e008      	b.n	8007cb0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c9e:	f7fc fcf9 	bl	8004694 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d901      	bls.n	8007cb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e1e7      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0ef      	beq.n	8007c9e <HAL_RCC_OscConfig+0x22e>
 8007cbe:	e020      	b.n	8007d02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cc6:	4a09      	ldr	r2, [pc, #36]	@ (8007cec <HAL_RCC_OscConfig+0x27c>)
 8007cc8:	f023 0301 	bic.w	r3, r3, #1
 8007ccc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd0:	f7fc fce0 	bl	8004694 <HAL_GetTick>
 8007cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cd6:	e00d      	b.n	8007cf4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cd8:	f7fc fcdc 	bl	8004694 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d906      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e1ca      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
 8007cea:	bf00      	nop
 8007cec:	40021000 	.word	0x40021000
 8007cf0:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cf4:	4b8c      	ldr	r3, [pc, #560]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1ea      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 80a6 	beq.w	8007e5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d10:	2300      	movs	r3, #0
 8007d12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007d14:	4b84      	ldr	r3, [pc, #528]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_RCC_OscConfig+0x2b4>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e000      	b.n	8007d26 <HAL_RCC_OscConfig+0x2b6>
 8007d24:	2300      	movs	r3, #0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00d      	beq.n	8007d46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d36:	4b7c      	ldr	r3, [pc, #496]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007d42:	2301      	movs	r3, #1
 8007d44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d46:	4b79      	ldr	r3, [pc, #484]	@ (8007f2c <HAL_RCC_OscConfig+0x4bc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d118      	bne.n	8007d84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d52:	4b76      	ldr	r3, [pc, #472]	@ (8007f2c <HAL_RCC_OscConfig+0x4bc>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a75      	ldr	r2, [pc, #468]	@ (8007f2c <HAL_RCC_OscConfig+0x4bc>)
 8007d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d5e:	f7fc fc99 	bl	8004694 <HAL_GetTick>
 8007d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d64:	e008      	b.n	8007d78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d66:	f7fc fc95 	bl	8004694 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d901      	bls.n	8007d78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e183      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d78:	4b6c      	ldr	r3, [pc, #432]	@ (8007f2c <HAL_RCC_OscConfig+0x4bc>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0f0      	beq.n	8007d66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d108      	bne.n	8007d9e <HAL_RCC_OscConfig+0x32e>
 8007d8c:	4b66      	ldr	r3, [pc, #408]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d92:	4a65      	ldr	r2, [pc, #404]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007d94:	f043 0301 	orr.w	r3, r3, #1
 8007d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d9c:	e024      	b.n	8007de8 <HAL_RCC_OscConfig+0x378>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d110      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x358>
 8007da6:	4b60      	ldr	r3, [pc, #384]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dac:	4a5e      	ldr	r2, [pc, #376]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007dae:	f043 0304 	orr.w	r3, r3, #4
 8007db2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007db6:	4b5c      	ldr	r3, [pc, #368]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dbc:	4a5a      	ldr	r2, [pc, #360]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007dc6:	e00f      	b.n	8007de8 <HAL_RCC_OscConfig+0x378>
 8007dc8:	4b57      	ldr	r3, [pc, #348]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dce:	4a56      	ldr	r2, [pc, #344]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007dd0:	f023 0301 	bic.w	r3, r3, #1
 8007dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007dd8:	4b53      	ldr	r3, [pc, #332]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dde:	4a52      	ldr	r2, [pc, #328]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007de0:	f023 0304 	bic.w	r3, r3, #4
 8007de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d016      	beq.n	8007e1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df0:	f7fc fc50 	bl	8004694 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007df6:	e00a      	b.n	8007e0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007df8:	f7fc fc4c 	bl	8004694 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e138      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e0e:	4b46      	ldr	r3, [pc, #280]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d0ed      	beq.n	8007df8 <HAL_RCC_OscConfig+0x388>
 8007e1c:	e015      	b.n	8007e4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e1e:	f7fc fc39 	bl	8004694 <HAL_GetTick>
 8007e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e24:	e00a      	b.n	8007e3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e26:	f7fc fc35 	bl	8004694 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d901      	bls.n	8007e3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e121      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e3c:	4b3a      	ldr	r3, [pc, #232]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1ed      	bne.n	8007e26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e4a:	7ffb      	ldrb	r3, [r7, #31]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d105      	bne.n	8007e5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e50:	4b35      	ldr	r3, [pc, #212]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e54:	4a34      	ldr	r2, [pc, #208]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0320 	and.w	r3, r3, #32
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d03c      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01c      	beq.n	8007eaa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e70:	4b2d      	ldr	r3, [pc, #180]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e76:	4a2c      	ldr	r2, [pc, #176]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007e78:	f043 0301 	orr.w	r3, r3, #1
 8007e7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e80:	f7fc fc08 	bl	8004694 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e88:	f7fc fc04 	bl	8004694 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e0f2      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e9a:	4b23      	ldr	r3, [pc, #140]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0ef      	beq.n	8007e88 <HAL_RCC_OscConfig+0x418>
 8007ea8:	e01b      	b.n	8007ee2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eba:	f7fc fbeb 	bl	8004694 <HAL_GetTick>
 8007ebe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ec0:	e008      	b.n	8007ed4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ec2:	f7fc fbe7 	bl	8004694 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e0d5      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ed4:	4b14      	ldr	r3, [pc, #80]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1ef      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 80c9 	beq.w	800807e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007eec:	4b0e      	ldr	r3, [pc, #56]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f003 030c 	and.w	r3, r3, #12
 8007ef4:	2b0c      	cmp	r3, #12
 8007ef6:	f000 8083 	beq.w	8008000 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d15e      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f02:	4b09      	ldr	r3, [pc, #36]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a08      	ldr	r2, [pc, #32]	@ (8007f28 <HAL_RCC_OscConfig+0x4b8>)
 8007f08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0e:	f7fc fbc1 	bl	8004694 <HAL_GetTick>
 8007f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f14:	e00c      	b.n	8007f30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f16:	f7fc fbbd 	bl	8004694 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d905      	bls.n	8007f30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e0ab      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
 8007f28:	40021000 	.word	0x40021000
 8007f2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f30:	4b55      	ldr	r3, [pc, #340]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1ec      	bne.n	8007f16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f3c:	4b52      	ldr	r3, [pc, #328]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	4b52      	ldr	r3, [pc, #328]	@ (800808c <HAL_RCC_OscConfig+0x61c>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6a11      	ldr	r1, [r2, #32]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f4c:	3a01      	subs	r2, #1
 8007f4e:	0112      	lsls	r2, r2, #4
 8007f50:	4311      	orrs	r1, r2
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007f56:	0212      	lsls	r2, r2, #8
 8007f58:	4311      	orrs	r1, r2
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007f5e:	0852      	lsrs	r2, r2, #1
 8007f60:	3a01      	subs	r2, #1
 8007f62:	0552      	lsls	r2, r2, #21
 8007f64:	4311      	orrs	r1, r2
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007f6a:	0852      	lsrs	r2, r2, #1
 8007f6c:	3a01      	subs	r2, #1
 8007f6e:	0652      	lsls	r2, r2, #25
 8007f70:	4311      	orrs	r1, r2
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007f76:	06d2      	lsls	r2, r2, #27
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	4943      	ldr	r1, [pc, #268]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f80:	4b41      	ldr	r3, [pc, #260]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a40      	ldr	r2, [pc, #256]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	4a3d      	ldr	r2, [pc, #244]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f98:	f7fc fb7c 	bl	8004694 <HAL_GetTick>
 8007f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fa0:	f7fc fb78 	bl	8004694 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e066      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fb2:	4b35      	ldr	r3, [pc, #212]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0f0      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x530>
 8007fbe:	e05e      	b.n	800807e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fc0:	4b31      	ldr	r3, [pc, #196]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a30      	ldr	r2, [pc, #192]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fcc:	f7fc fb62 	bl	8004694 <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fd4:	f7fc fb5e 	bl	8004694 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e04c      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fe6:	4b28      	ldr	r3, [pc, #160]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f0      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ff2:	4b25      	ldr	r3, [pc, #148]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	4924      	ldr	r1, [pc, #144]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 8007ff8:	4b25      	ldr	r3, [pc, #148]	@ (8008090 <HAL_RCC_OscConfig+0x620>)
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	60cb      	str	r3, [r1, #12]
 8007ffe:	e03e      	b.n	800807e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e039      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800800c:	4b1e      	ldr	r3, [pc, #120]	@ (8008088 <HAL_RCC_OscConfig+0x618>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f003 0203 	and.w	r2, r3, #3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	429a      	cmp	r2, r3
 800801e:	d12c      	bne.n	800807a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802a:	3b01      	subs	r3, #1
 800802c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800802e:	429a      	cmp	r2, r3
 8008030:	d123      	bne.n	800807a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800803e:	429a      	cmp	r2, r3
 8008040:	d11b      	bne.n	800807a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800804e:	429a      	cmp	r2, r3
 8008050:	d113      	bne.n	800807a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805c:	085b      	lsrs	r3, r3, #1
 800805e:	3b01      	subs	r3, #1
 8008060:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008062:	429a      	cmp	r2, r3
 8008064:	d109      	bne.n	800807a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008070:	085b      	lsrs	r3, r3, #1
 8008072:	3b01      	subs	r3, #1
 8008074:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008076:	429a      	cmp	r2, r3
 8008078:	d001      	beq.n	800807e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40021000 	.word	0x40021000
 800808c:	019f800c 	.word	0x019f800c
 8008090:	feeefffc 	.word	0xfeeefffc

08008094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800809e:	2300      	movs	r3, #0
 80080a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e11e      	b.n	80082ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080ac:	4b91      	ldr	r3, [pc, #580]	@ (80082f4 <HAL_RCC_ClockConfig+0x260>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d910      	bls.n	80080dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ba:	4b8e      	ldr	r3, [pc, #568]	@ (80082f4 <HAL_RCC_ClockConfig+0x260>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f023 020f 	bic.w	r2, r3, #15
 80080c2:	498c      	ldr	r1, [pc, #560]	@ (80082f4 <HAL_RCC_ClockConfig+0x260>)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ca:	4b8a      	ldr	r3, [pc, #552]	@ (80082f4 <HAL_RCC_ClockConfig+0x260>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d001      	beq.n	80080dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e106      	b.n	80082ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d073      	beq.n	80081d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d129      	bne.n	8008144 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080f0:	4b81      	ldr	r3, [pc, #516]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e0f4      	b.n	80082ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008100:	f000 f99c 	bl	800843c <RCC_GetSysClockFreqFromPLLSource>
 8008104:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4a7c      	ldr	r2, [pc, #496]	@ (80082fc <HAL_RCC_ClockConfig+0x268>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d93f      	bls.n	800818e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800810e:	4b7a      	ldr	r3, [pc, #488]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008122:	2b00      	cmp	r3, #0
 8008124:	d033      	beq.n	800818e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800812a:	2b00      	cmp	r3, #0
 800812c:	d12f      	bne.n	800818e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800812e:	4b72      	ldr	r3, [pc, #456]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008136:	4a70      	ldr	r2, [pc, #448]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 8008138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800813c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800813e:	2380      	movs	r3, #128	@ 0x80
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e024      	b.n	800818e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d107      	bne.n	800815c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800814c:	4b6a      	ldr	r3, [pc, #424]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d109      	bne.n	800816c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e0c6      	b.n	80082ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800815c:	4b66      	ldr	r3, [pc, #408]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e0be      	b.n	80082ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800816c:	f000 f8ce 	bl	800830c <HAL_RCC_GetSysClockFreq>
 8008170:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	4a61      	ldr	r2, [pc, #388]	@ (80082fc <HAL_RCC_ClockConfig+0x268>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d909      	bls.n	800818e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800817a:	4b5f      	ldr	r3, [pc, #380]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008182:	4a5d      	ldr	r2, [pc, #372]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 8008184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008188:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800818a:	2380      	movs	r3, #128	@ 0x80
 800818c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800818e:	4b5a      	ldr	r3, [pc, #360]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f023 0203 	bic.w	r2, r3, #3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	4957      	ldr	r1, [pc, #348]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 800819c:	4313      	orrs	r3, r2
 800819e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081a0:	f7fc fa78 	bl	8004694 <HAL_GetTick>
 80081a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081a6:	e00a      	b.n	80081be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081a8:	f7fc fa74 	bl	8004694 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e095      	b.n	80082ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081be:	4b4e      	ldr	r3, [pc, #312]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 020c 	and.w	r2, r3, #12
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d1eb      	bne.n	80081a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d023      	beq.n	8008224 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081e8:	4b43      	ldr	r3, [pc, #268]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	4a42      	ldr	r2, [pc, #264]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 80081ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80081f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0308 	and.w	r3, r3, #8
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d007      	beq.n	8008210 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008200:	4b3d      	ldr	r3, [pc, #244]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008208:	4a3b      	ldr	r2, [pc, #236]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 800820a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800820e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008210:	4b39      	ldr	r3, [pc, #228]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	4936      	ldr	r1, [pc, #216]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 800821e:	4313      	orrs	r3, r2
 8008220:	608b      	str	r3, [r1, #8]
 8008222:	e008      	b.n	8008236 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2b80      	cmp	r3, #128	@ 0x80
 8008228:	d105      	bne.n	8008236 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800822a:	4b33      	ldr	r3, [pc, #204]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	4a32      	ldr	r2, [pc, #200]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 8008230:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008234:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008236:	4b2f      	ldr	r3, [pc, #188]	@ (80082f4 <HAL_RCC_ClockConfig+0x260>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 030f 	and.w	r3, r3, #15
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	429a      	cmp	r2, r3
 8008242:	d21d      	bcs.n	8008280 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008244:	4b2b      	ldr	r3, [pc, #172]	@ (80082f4 <HAL_RCC_ClockConfig+0x260>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f023 020f 	bic.w	r2, r3, #15
 800824c:	4929      	ldr	r1, [pc, #164]	@ (80082f4 <HAL_RCC_ClockConfig+0x260>)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	4313      	orrs	r3, r2
 8008252:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008254:	f7fc fa1e 	bl	8004694 <HAL_GetTick>
 8008258:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800825a:	e00a      	b.n	8008272 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800825c:	f7fc fa1a 	bl	8004694 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800826a:	4293      	cmp	r3, r2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e03b      	b.n	80082ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008272:	4b20      	ldr	r3, [pc, #128]	@ (80082f4 <HAL_RCC_ClockConfig+0x260>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d1ed      	bne.n	800825c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800828c:	4b1a      	ldr	r3, [pc, #104]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	4917      	ldr	r1, [pc, #92]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 800829a:	4313      	orrs	r3, r2
 800829c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0308 	and.w	r3, r3, #8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082aa:	4b13      	ldr	r3, [pc, #76]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	490f      	ldr	r1, [pc, #60]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80082be:	f000 f825 	bl	800830c <HAL_RCC_GetSysClockFreq>
 80082c2:	4602      	mov	r2, r0
 80082c4:	4b0c      	ldr	r3, [pc, #48]	@ (80082f8 <HAL_RCC_ClockConfig+0x264>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	091b      	lsrs	r3, r3, #4
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	490c      	ldr	r1, [pc, #48]	@ (8008300 <HAL_RCC_ClockConfig+0x26c>)
 80082d0:	5ccb      	ldrb	r3, [r1, r3]
 80082d2:	f003 031f 	and.w	r3, r3, #31
 80082d6:	fa22 f303 	lsr.w	r3, r2, r3
 80082da:	4a0a      	ldr	r2, [pc, #40]	@ (8008304 <HAL_RCC_ClockConfig+0x270>)
 80082dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80082de:	4b0a      	ldr	r3, [pc, #40]	@ (8008308 <HAL_RCC_ClockConfig+0x274>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fc f98a 	bl	80045fc <HAL_InitTick>
 80082e8:	4603      	mov	r3, r0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	40022000 	.word	0x40022000
 80082f8:	40021000 	.word	0x40021000
 80082fc:	04c4b400 	.word	0x04c4b400
 8008300:	08010c90 	.word	0x08010c90
 8008304:	20000010 	.word	0x20000010
 8008308:	20000014 	.word	0x20000014

0800830c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008312:	4b2c      	ldr	r3, [pc, #176]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 030c 	and.w	r3, r3, #12
 800831a:	2b04      	cmp	r3, #4
 800831c:	d102      	bne.n	8008324 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800831e:	4b2a      	ldr	r3, [pc, #168]	@ (80083c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008320:	613b      	str	r3, [r7, #16]
 8008322:	e047      	b.n	80083b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008324:	4b27      	ldr	r3, [pc, #156]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 030c 	and.w	r3, r3, #12
 800832c:	2b08      	cmp	r3, #8
 800832e:	d102      	bne.n	8008336 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008330:	4b25      	ldr	r3, [pc, #148]	@ (80083c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	e03e      	b.n	80083b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008336:	4b23      	ldr	r3, [pc, #140]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 030c 	and.w	r3, r3, #12
 800833e:	2b0c      	cmp	r3, #12
 8008340:	d136      	bne.n	80083b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008342:	4b20      	ldr	r3, [pc, #128]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800834c:	4b1d      	ldr	r3, [pc, #116]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	091b      	lsrs	r3, r3, #4
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	3301      	adds	r3, #1
 8008358:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b03      	cmp	r3, #3
 800835e:	d10c      	bne.n	800837a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008360:	4a19      	ldr	r2, [pc, #100]	@ (80083c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	fbb2 f3f3 	udiv	r3, r2, r3
 8008368:	4a16      	ldr	r2, [pc, #88]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800836a:	68d2      	ldr	r2, [r2, #12]
 800836c:	0a12      	lsrs	r2, r2, #8
 800836e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008372:	fb02 f303 	mul.w	r3, r2, r3
 8008376:	617b      	str	r3, [r7, #20]
      break;
 8008378:	e00c      	b.n	8008394 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800837a:	4a13      	ldr	r2, [pc, #76]	@ (80083c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008382:	4a10      	ldr	r2, [pc, #64]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008384:	68d2      	ldr	r2, [r2, #12]
 8008386:	0a12      	lsrs	r2, r2, #8
 8008388:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800838c:	fb02 f303 	mul.w	r3, r2, r3
 8008390:	617b      	str	r3, [r7, #20]
      break;
 8008392:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008394:	4b0b      	ldr	r3, [pc, #44]	@ (80083c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	0e5b      	lsrs	r3, r3, #25
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	3301      	adds	r3, #1
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ac:	613b      	str	r3, [r7, #16]
 80083ae:	e001      	b.n	80083b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80083b4:	693b      	ldr	r3, [r7, #16]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40021000 	.word	0x40021000
 80083c8:	00f42400 	.word	0x00f42400

080083cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083d0:	4b03      	ldr	r3, [pc, #12]	@ (80083e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80083d2:	681b      	ldr	r3, [r3, #0]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000010 	.word	0x20000010

080083e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80083e8:	f7ff fff0 	bl	80083cc <HAL_RCC_GetHCLKFreq>
 80083ec:	4602      	mov	r2, r0
 80083ee:	4b06      	ldr	r3, [pc, #24]	@ (8008408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	0a1b      	lsrs	r3, r3, #8
 80083f4:	f003 0307 	and.w	r3, r3, #7
 80083f8:	4904      	ldr	r1, [pc, #16]	@ (800840c <HAL_RCC_GetPCLK1Freq+0x28>)
 80083fa:	5ccb      	ldrb	r3, [r1, r3]
 80083fc:	f003 031f 	and.w	r3, r3, #31
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40021000 	.word	0x40021000
 800840c:	08010ca0 	.word	0x08010ca0

08008410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008414:	f7ff ffda 	bl	80083cc <HAL_RCC_GetHCLKFreq>
 8008418:	4602      	mov	r2, r0
 800841a:	4b06      	ldr	r3, [pc, #24]	@ (8008434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	0adb      	lsrs	r3, r3, #11
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	4904      	ldr	r1, [pc, #16]	@ (8008438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008426:	5ccb      	ldrb	r3, [r1, r3]
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008430:	4618      	mov	r0, r3
 8008432:	bd80      	pop	{r7, pc}
 8008434:	40021000 	.word	0x40021000
 8008438:	08010ca0 	.word	0x08010ca0

0800843c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008442:	4b1e      	ldr	r3, [pc, #120]	@ (80084bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800844c:	4b1b      	ldr	r3, [pc, #108]	@ (80084bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	091b      	lsrs	r3, r3, #4
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	3301      	adds	r3, #1
 8008458:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b03      	cmp	r3, #3
 800845e:	d10c      	bne.n	800847a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008460:	4a17      	ldr	r2, [pc, #92]	@ (80084c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	4a14      	ldr	r2, [pc, #80]	@ (80084bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800846a:	68d2      	ldr	r2, [r2, #12]
 800846c:	0a12      	lsrs	r2, r2, #8
 800846e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008472:	fb02 f303 	mul.w	r3, r2, r3
 8008476:	617b      	str	r3, [r7, #20]
    break;
 8008478:	e00c      	b.n	8008494 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800847a:	4a11      	ldr	r2, [pc, #68]	@ (80084c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008482:	4a0e      	ldr	r2, [pc, #56]	@ (80084bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008484:	68d2      	ldr	r2, [r2, #12]
 8008486:	0a12      	lsrs	r2, r2, #8
 8008488:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800848c:	fb02 f303 	mul.w	r3, r2, r3
 8008490:	617b      	str	r3, [r7, #20]
    break;
 8008492:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008494:	4b09      	ldr	r3, [pc, #36]	@ (80084bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	0e5b      	lsrs	r3, r3, #25
 800849a:	f003 0303 	and.w	r3, r3, #3
 800849e:	3301      	adds	r3, #1
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80084ae:	687b      	ldr	r3, [r7, #4]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	371c      	adds	r7, #28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	40021000 	.word	0x40021000
 80084c0:	00f42400 	.word	0x00f42400

080084c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80084cc:	2300      	movs	r3, #0
 80084ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084d0:	2300      	movs	r3, #0
 80084d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 8098 	beq.w	8008612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084e2:	2300      	movs	r3, #0
 80084e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084e6:	4b43      	ldr	r3, [pc, #268]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10d      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084f2:	4b40      	ldr	r3, [pc, #256]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f6:	4a3f      	ldr	r2, [pc, #252]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80084fe:	4b3d      	ldr	r3, [pc, #244]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008506:	60bb      	str	r3, [r7, #8]
 8008508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800850a:	2301      	movs	r3, #1
 800850c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800850e:	4b3a      	ldr	r3, [pc, #232]	@ (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a39      	ldr	r2, [pc, #228]	@ (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008518:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800851a:	f7fc f8bb 	bl	8004694 <HAL_GetTick>
 800851e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008520:	e009      	b.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008522:	f7fc f8b7 	bl	8004694 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b02      	cmp	r3, #2
 800852e:	d902      	bls.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	74fb      	strb	r3, [r7, #19]
        break;
 8008534:	e005      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008536:	4b30      	ldr	r3, [pc, #192]	@ (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0ef      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008542:	7cfb      	ldrb	r3, [r7, #19]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d159      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008548:	4b2a      	ldr	r3, [pc, #168]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800854a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800854e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008552:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01e      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	429a      	cmp	r2, r3
 8008562:	d019      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008564:	4b23      	ldr	r3, [pc, #140]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800856a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800856e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008570:	4b20      	ldr	r3, [pc, #128]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008576:	4a1f      	ldr	r2, [pc, #124]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800857c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008580:	4b1c      	ldr	r3, [pc, #112]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008586:	4a1b      	ldr	r2, [pc, #108]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800858c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008590:	4a18      	ldr	r2, [pc, #96]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d016      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a2:	f7fc f877 	bl	8004694 <HAL_GetTick>
 80085a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085a8:	e00b      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085aa:	f7fc f873 	bl	8004694 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d902      	bls.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	74fb      	strb	r3, [r7, #19]
            break;
 80085c0:	e006      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085c2:	4b0c      	ldr	r3, [pc, #48]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0ec      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80085d0:	7cfb      	ldrb	r3, [r7, #19]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085d6:	4b07      	ldr	r3, [pc, #28]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e4:	4903      	ldr	r1, [pc, #12]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80085ec:	e008      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085ee:	7cfb      	ldrb	r3, [r7, #19]
 80085f0:	74bb      	strb	r3, [r7, #18]
 80085f2:	e005      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80085f4:	40021000 	.word	0x40021000
 80085f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	7cfb      	ldrb	r3, [r7, #19]
 80085fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008600:	7c7b      	ldrb	r3, [r7, #17]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d105      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008606:	4ba6      	ldr	r3, [pc, #664]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800860a:	4aa5      	ldr	r2, [pc, #660]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800860c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008610:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800861e:	4ba0      	ldr	r3, [pc, #640]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008624:	f023 0203 	bic.w	r2, r3, #3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	499c      	ldr	r1, [pc, #624]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800862e:	4313      	orrs	r3, r2
 8008630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008640:	4b97      	ldr	r3, [pc, #604]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008646:	f023 020c 	bic.w	r2, r3, #12
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	4994      	ldr	r1, [pc, #592]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008650:	4313      	orrs	r3, r2
 8008652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008662:	4b8f      	ldr	r3, [pc, #572]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008668:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	498b      	ldr	r1, [pc, #556]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008672:	4313      	orrs	r3, r2
 8008674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008684:	4b86      	ldr	r3, [pc, #536]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800868a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	4983      	ldr	r1, [pc, #524]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008694:	4313      	orrs	r3, r2
 8008696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086a6:	4b7e      	ldr	r3, [pc, #504]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	497a      	ldr	r1, [pc, #488]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086c8:	4b75      	ldr	r3, [pc, #468]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	4972      	ldr	r1, [pc, #456]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80086ea:	4b6d      	ldr	r3, [pc, #436]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	4969      	ldr	r1, [pc, #420]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800870c:	4b64      	ldr	r3, [pc, #400]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800870e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008712:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	4961      	ldr	r1, [pc, #388]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800871c:	4313      	orrs	r3, r2
 800871e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800872e:	4b5c      	ldr	r3, [pc, #368]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008734:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873c:	4958      	ldr	r1, [pc, #352]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800873e:	4313      	orrs	r3, r2
 8008740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800874c:	2b00      	cmp	r3, #0
 800874e:	d015      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008750:	4b53      	ldr	r3, [pc, #332]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875e:	4950      	ldr	r1, [pc, #320]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008760:	4313      	orrs	r3, r2
 8008762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800876e:	d105      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008770:	4b4b      	ldr	r3, [pc, #300]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	4a4a      	ldr	r2, [pc, #296]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800877a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008784:	2b00      	cmp	r3, #0
 8008786:	d015      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008788:	4b45      	ldr	r3, [pc, #276]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800878a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800878e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008796:	4942      	ldr	r1, [pc, #264]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008798:	4313      	orrs	r3, r2
 800879a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087a6:	d105      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087a8:	4b3d      	ldr	r3, [pc, #244]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	4a3c      	ldr	r2, [pc, #240]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d015      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80087c0:	4b37      	ldr	r3, [pc, #220]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ce:	4934      	ldr	r1, [pc, #208]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087de:	d105      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087e0:	4b2f      	ldr	r3, [pc, #188]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	4a2e      	ldr	r2, [pc, #184]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d015      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087f8:	4b29      	ldr	r3, [pc, #164]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008806:	4926      	ldr	r1, [pc, #152]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008808:	4313      	orrs	r3, r2
 800880a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008816:	d105      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008818:	4b21      	ldr	r3, [pc, #132]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	4a20      	ldr	r2, [pc, #128]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800881e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008822:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d015      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008830:	4b1b      	ldr	r3, [pc, #108]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883e:	4918      	ldr	r1, [pc, #96]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008840:	4313      	orrs	r3, r2
 8008842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800884e:	d105      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008850:	4b13      	ldr	r3, [pc, #76]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	4a12      	ldr	r2, [pc, #72]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800885a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d015      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008868:	4b0d      	ldr	r3, [pc, #52]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800886a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800886e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008876:	490a      	ldr	r1, [pc, #40]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008878:	4313      	orrs	r3, r2
 800887a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008886:	d105      	bne.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008888:	4b05      	ldr	r3, [pc, #20]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	4a04      	ldr	r2, [pc, #16]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800888e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008892:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008894:	7cbb      	ldrb	r3, [r7, #18]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	40021000 	.word	0x40021000

080088a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e049      	b.n	800894a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7fb fb0e 	bl	8003eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3304      	adds	r3, #4
 80088e0:	4619      	mov	r1, r3
 80088e2:	4610      	mov	r0, r2
 80088e4:	f001 f97e 	bl	8009be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	d001      	beq.n	800896c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e04a      	b.n	8008a02 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0201 	orr.w	r2, r2, #1
 8008982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a21      	ldr	r2, [pc, #132]	@ (8008a10 <HAL_TIM_Base_Start_IT+0xbc>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d018      	beq.n	80089c0 <HAL_TIM_Base_Start_IT+0x6c>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008996:	d013      	beq.n	80089c0 <HAL_TIM_Base_Start_IT+0x6c>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a14 <HAL_TIM_Base_Start_IT+0xc0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00e      	beq.n	80089c0 <HAL_TIM_Base_Start_IT+0x6c>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a18 <HAL_TIM_Base_Start_IT+0xc4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d009      	beq.n	80089c0 <HAL_TIM_Base_Start_IT+0x6c>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a1a      	ldr	r2, [pc, #104]	@ (8008a1c <HAL_TIM_Base_Start_IT+0xc8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d004      	beq.n	80089c0 <HAL_TIM_Base_Start_IT+0x6c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a19      	ldr	r2, [pc, #100]	@ (8008a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d115      	bne.n	80089ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	4b17      	ldr	r3, [pc, #92]	@ (8008a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2b06      	cmp	r3, #6
 80089d0:	d015      	beq.n	80089fe <HAL_TIM_Base_Start_IT+0xaa>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089d8:	d011      	beq.n	80089fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0201 	orr.w	r2, r2, #1
 80089e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ea:	e008      	b.n	80089fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0201 	orr.w	r2, r2, #1
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	e000      	b.n	8008a00 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	40012c00 	.word	0x40012c00
 8008a14:	40000400 	.word	0x40000400
 8008a18:	40000800 	.word	0x40000800
 8008a1c:	40013400 	.word	0x40013400
 8008a20:	40014000 	.word	0x40014000
 8008a24:	00010007 	.word	0x00010007

08008a28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e049      	b.n	8008ace <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d106      	bne.n	8008a54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f841 	bl	8008ad6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3304      	adds	r3, #4
 8008a64:	4619      	mov	r1, r3
 8008a66:	4610      	mov	r0, r2
 8008a68:	f001 f8bc 	bl	8009be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
	...

08008aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d109      	bne.n	8008b10 <HAL_TIM_PWM_Start+0x24>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	bf14      	ite	ne
 8008b08:	2301      	movne	r3, #1
 8008b0a:	2300      	moveq	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	e03c      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d109      	bne.n	8008b2a <HAL_TIM_PWM_Start+0x3e>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	bf14      	ite	ne
 8008b22:	2301      	movne	r3, #1
 8008b24:	2300      	moveq	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	e02f      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d109      	bne.n	8008b44 <HAL_TIM_PWM_Start+0x58>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	e022      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b0c      	cmp	r3, #12
 8008b48:	d109      	bne.n	8008b5e <HAL_TIM_PWM_Start+0x72>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	bf14      	ite	ne
 8008b56:	2301      	movne	r3, #1
 8008b58:	2300      	moveq	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	e015      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d109      	bne.n	8008b78 <HAL_TIM_PWM_Start+0x8c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	bf14      	ite	ne
 8008b70:	2301      	movne	r3, #1
 8008b72:	2300      	moveq	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	e008      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	bf14      	ite	ne
 8008b84:	2301      	movne	r3, #1
 8008b86:	2300      	moveq	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e097      	b.n	8008cc2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <HAL_TIM_PWM_Start+0xb6>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ba0:	e023      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d104      	bne.n	8008bb2 <HAL_TIM_PWM_Start+0xc6>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bb0:	e01b      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d104      	bne.n	8008bc2 <HAL_TIM_PWM_Start+0xd6>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bc0:	e013      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b0c      	cmp	r3, #12
 8008bc6:	d104      	bne.n	8008bd2 <HAL_TIM_PWM_Start+0xe6>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bd0:	e00b      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b10      	cmp	r3, #16
 8008bd6:	d104      	bne.n	8008be2 <HAL_TIM_PWM_Start+0xf6>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be0:	e003      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 fc24 	bl	800a440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a33      	ldr	r2, [pc, #204]	@ (8008ccc <HAL_TIM_PWM_Start+0x1e0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d013      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x13e>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a32      	ldr	r2, [pc, #200]	@ (8008cd0 <HAL_TIM_PWM_Start+0x1e4>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00e      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x13e>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a30      	ldr	r2, [pc, #192]	@ (8008cd4 <HAL_TIM_PWM_Start+0x1e8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d009      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x13e>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8008cd8 <HAL_TIM_PWM_Start+0x1ec>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d004      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x13e>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a2d      	ldr	r2, [pc, #180]	@ (8008cdc <HAL_TIM_PWM_Start+0x1f0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d101      	bne.n	8008c2e <HAL_TIM_PWM_Start+0x142>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <HAL_TIM_PWM_Start+0x144>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d007      	beq.n	8008c44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a20      	ldr	r2, [pc, #128]	@ (8008ccc <HAL_TIM_PWM_Start+0x1e0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d018      	beq.n	8008c80 <HAL_TIM_PWM_Start+0x194>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c56:	d013      	beq.n	8008c80 <HAL_TIM_PWM_Start+0x194>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a20      	ldr	r2, [pc, #128]	@ (8008ce0 <HAL_TIM_PWM_Start+0x1f4>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00e      	beq.n	8008c80 <HAL_TIM_PWM_Start+0x194>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a1f      	ldr	r2, [pc, #124]	@ (8008ce4 <HAL_TIM_PWM_Start+0x1f8>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d009      	beq.n	8008c80 <HAL_TIM_PWM_Start+0x194>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a17      	ldr	r2, [pc, #92]	@ (8008cd0 <HAL_TIM_PWM_Start+0x1e4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d004      	beq.n	8008c80 <HAL_TIM_PWM_Start+0x194>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a16      	ldr	r2, [pc, #88]	@ (8008cd4 <HAL_TIM_PWM_Start+0x1e8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d115      	bne.n	8008cac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689a      	ldr	r2, [r3, #8]
 8008c86:	4b18      	ldr	r3, [pc, #96]	@ (8008ce8 <HAL_TIM_PWM_Start+0x1fc>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b06      	cmp	r3, #6
 8008c90:	d015      	beq.n	8008cbe <HAL_TIM_PWM_Start+0x1d2>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c98:	d011      	beq.n	8008cbe <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0201 	orr.w	r2, r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008caa:	e008      	b.n	8008cbe <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0201 	orr.w	r2, r2, #1
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	e000      	b.n	8008cc0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	40012c00 	.word	0x40012c00
 8008cd0:	40013400 	.word	0x40013400
 8008cd4:	40014000 	.word	0x40014000
 8008cd8:	40014400 	.word	0x40014400
 8008cdc:	40014800 	.word	0x40014800
 8008ce0:	40000400 	.word	0x40000400
 8008ce4:	40000800 	.word	0x40000800
 8008ce8:	00010007 	.word	0x00010007

08008cec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
 8008cf8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	bf0c      	ite	eq
 8008d10:	2301      	moveq	r3, #1
 8008d12:	2300      	movne	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	e03c      	b.n	8008d92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d109      	bne.n	8008d32 <HAL_TIM_PWM_Start_DMA+0x46>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	bf0c      	ite	eq
 8008d2a:	2301      	moveq	r3, #1
 8008d2c:	2300      	movne	r3, #0
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	e02f      	b.n	8008d92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d109      	bne.n	8008d4c <HAL_TIM_PWM_Start_DMA+0x60>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	bf0c      	ite	eq
 8008d44:	2301      	moveq	r3, #1
 8008d46:	2300      	movne	r3, #0
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	e022      	b.n	8008d92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2b0c      	cmp	r3, #12
 8008d50:	d109      	bne.n	8008d66 <HAL_TIM_PWM_Start_DMA+0x7a>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	e015      	b.n	8008d92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b10      	cmp	r3, #16
 8008d6a:	d109      	bne.n	8008d80 <HAL_TIM_PWM_Start_DMA+0x94>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	bf0c      	ite	eq
 8008d78:	2301      	moveq	r3, #1
 8008d7a:	2300      	movne	r3, #0
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	e008      	b.n	8008d92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2301      	moveq	r3, #1
 8008d8e:	2300      	movne	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
 8008d98:	e1a6      	b.n	80090e8 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	bf0c      	ite	eq
 8008dac:	2301      	moveq	r3, #1
 8008dae:	2300      	movne	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	e03c      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x142>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d109      	bne.n	8008dce <HAL_TIM_PWM_Start_DMA+0xe2>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	bf0c      	ite	eq
 8008dc6:	2301      	moveq	r3, #1
 8008dc8:	2300      	movne	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	e02f      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x142>
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d109      	bne.n	8008de8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	bf0c      	ite	eq
 8008de0:	2301      	moveq	r3, #1
 8008de2:	2300      	movne	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	e022      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x142>
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b0c      	cmp	r3, #12
 8008dec:	d109      	bne.n	8008e02 <HAL_TIM_PWM_Start_DMA+0x116>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	bf0c      	ite	eq
 8008dfa:	2301      	moveq	r3, #1
 8008dfc:	2300      	movne	r3, #0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	e015      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x142>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d109      	bne.n	8008e1c <HAL_TIM_PWM_Start_DMA+0x130>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	bf0c      	ite	eq
 8008e14:	2301      	moveq	r3, #1
 8008e16:	2300      	movne	r3, #0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	e008      	b.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x142>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	bf0c      	ite	eq
 8008e28:	2301      	moveq	r3, #1
 8008e2a:	2300      	movne	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d034      	beq.n	8008e9c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <HAL_TIM_PWM_Start_DMA+0x152>
 8008e38:	887b      	ldrh	r3, [r7, #2]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e152      	b.n	80090e8 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d104      	bne.n	8008e52 <HAL_TIM_PWM_Start_DMA+0x166>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e50:	e026      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	d104      	bne.n	8008e62 <HAL_TIM_PWM_Start_DMA+0x176>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e60:	e01e      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2b08      	cmp	r3, #8
 8008e66:	d104      	bne.n	8008e72 <HAL_TIM_PWM_Start_DMA+0x186>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e70:	e016      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2b0c      	cmp	r3, #12
 8008e76:	d104      	bne.n	8008e82 <HAL_TIM_PWM_Start_DMA+0x196>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e80:	e00e      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2b10      	cmp	r3, #16
 8008e86:	d104      	bne.n	8008e92 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e90:	e006      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2202      	movs	r2, #2
 8008e96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e9a:	e001      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e123      	b.n	80090e8 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b0c      	cmp	r3, #12
 8008ea4:	f200 80ae 	bhi.w	8009004 <HAL_TIM_PWM_Start_DMA+0x318>
 8008ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008ee5 	.word	0x08008ee5
 8008eb4:	08009005 	.word	0x08009005
 8008eb8:	08009005 	.word	0x08009005
 8008ebc:	08009005 	.word	0x08009005
 8008ec0:	08008f2d 	.word	0x08008f2d
 8008ec4:	08009005 	.word	0x08009005
 8008ec8:	08009005 	.word	0x08009005
 8008ecc:	08009005 	.word	0x08009005
 8008ed0:	08008f75 	.word	0x08008f75
 8008ed4:	08009005 	.word	0x08009005
 8008ed8:	08009005 	.word	0x08009005
 8008edc:	08009005 	.word	0x08009005
 8008ee0:	08008fbd 	.word	0x08008fbd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee8:	4a81      	ldr	r2, [pc, #516]	@ (80090f0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008eea:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef0:	4a80      	ldr	r2, [pc, #512]	@ (80090f4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008ef2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef8:	4a7f      	ldr	r2, [pc, #508]	@ (80090f8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008efa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3334      	adds	r3, #52	@ 0x34
 8008f08:	461a      	mov	r2, r3
 8008f0a:	887b      	ldrh	r3, [r7, #2]
 8008f0c:	f7fd fa5e 	bl	80063cc <HAL_DMA_Start_IT>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e0e6      	b.n	80090e8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f28:	60da      	str	r2, [r3, #12]
      break;
 8008f2a:	e06e      	b.n	800900a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	4a6f      	ldr	r2, [pc, #444]	@ (80090f0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008f32:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f38:	4a6e      	ldr	r2, [pc, #440]	@ (80090f4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008f3a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f40:	4a6d      	ldr	r2, [pc, #436]	@ (80090f8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008f42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3338      	adds	r3, #56	@ 0x38
 8008f50:	461a      	mov	r2, r3
 8008f52:	887b      	ldrh	r3, [r7, #2]
 8008f54:	f7fd fa3a 	bl	80063cc <HAL_DMA_Start_IT>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e0c2      	b.n	80090e8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68da      	ldr	r2, [r3, #12]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008f70:	60da      	str	r2, [r3, #12]
      break;
 8008f72:	e04a      	b.n	800900a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f78:	4a5d      	ldr	r2, [pc, #372]	@ (80090f0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	4a5c      	ldr	r2, [pc, #368]	@ (80090f4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008f82:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f88:	4a5b      	ldr	r2, [pc, #364]	@ (80090f8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008f8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	333c      	adds	r3, #60	@ 0x3c
 8008f98:	461a      	mov	r2, r3
 8008f9a:	887b      	ldrh	r3, [r7, #2]
 8008f9c:	f7fd fa16 	bl	80063cc <HAL_DMA_Start_IT>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e09e      	b.n	80090e8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fb8:	60da      	str	r2, [r3, #12]
      break;
 8008fba:	e026      	b.n	800900a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80090f0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80090f4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008fca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd0:	4a49      	ldr	r2, [pc, #292]	@ (80090f8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008fd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3340      	adds	r3, #64	@ 0x40
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	887b      	ldrh	r3, [r7, #2]
 8008fe4:	f7fd f9f2 	bl	80063cc <HAL_DMA_Start_IT>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e07a      	b.n	80090e8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009000:	60da      	str	r2, [r3, #12]
      break;
 8009002:	e002      	b.n	800900a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	75fb      	strb	r3, [r7, #23]
      break;
 8009008:	bf00      	nop
  }

  if (status == HAL_OK)
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d16a      	bne.n	80090e6 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2201      	movs	r2, #1
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	4618      	mov	r0, r3
 800901a:	f001 fa11 	bl	800a440 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a36      	ldr	r2, [pc, #216]	@ (80090fc <HAL_TIM_PWM_Start_DMA+0x410>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d013      	beq.n	8009050 <HAL_TIM_PWM_Start_DMA+0x364>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a34      	ldr	r2, [pc, #208]	@ (8009100 <HAL_TIM_PWM_Start_DMA+0x414>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00e      	beq.n	8009050 <HAL_TIM_PWM_Start_DMA+0x364>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a33      	ldr	r2, [pc, #204]	@ (8009104 <HAL_TIM_PWM_Start_DMA+0x418>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d009      	beq.n	8009050 <HAL_TIM_PWM_Start_DMA+0x364>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a31      	ldr	r2, [pc, #196]	@ (8009108 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d004      	beq.n	8009050 <HAL_TIM_PWM_Start_DMA+0x364>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a30      	ldr	r2, [pc, #192]	@ (800910c <HAL_TIM_PWM_Start_DMA+0x420>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d101      	bne.n	8009054 <HAL_TIM_PWM_Start_DMA+0x368>
 8009050:	2301      	movs	r3, #1
 8009052:	e000      	b.n	8009056 <HAL_TIM_PWM_Start_DMA+0x36a>
 8009054:	2300      	movs	r3, #0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a23      	ldr	r2, [pc, #140]	@ (80090fc <HAL_TIM_PWM_Start_DMA+0x410>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d018      	beq.n	80090a6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800907c:	d013      	beq.n	80090a6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a23      	ldr	r2, [pc, #140]	@ (8009110 <HAL_TIM_PWM_Start_DMA+0x424>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d00e      	beq.n	80090a6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a21      	ldr	r2, [pc, #132]	@ (8009114 <HAL_TIM_PWM_Start_DMA+0x428>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d009      	beq.n	80090a6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a1a      	ldr	r2, [pc, #104]	@ (8009100 <HAL_TIM_PWM_Start_DMA+0x414>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d004      	beq.n	80090a6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a18      	ldr	r2, [pc, #96]	@ (8009104 <HAL_TIM_PWM_Start_DMA+0x418>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d115      	bne.n	80090d2 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009118 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b06      	cmp	r3, #6
 80090b6:	d015      	beq.n	80090e4 <HAL_TIM_PWM_Start_DMA+0x3f8>
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090be:	d011      	beq.n	80090e4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0201 	orr.w	r2, r2, #1
 80090ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d0:	e008      	b.n	80090e4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 0201 	orr.w	r2, r2, #1
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	e000      	b.n	80090e6 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	08009ad3 	.word	0x08009ad3
 80090f4:	08009b7b 	.word	0x08009b7b
 80090f8:	08009a41 	.word	0x08009a41
 80090fc:	40012c00 	.word	0x40012c00
 8009100:	40013400 	.word	0x40013400
 8009104:	40014000 	.word	0x40014000
 8009108:	40014400 	.word	0x40014400
 800910c:	40014800 	.word	0x40014800
 8009110:	40000400 	.word	0x40000400
 8009114:	40000800 	.word	0x40000800
 8009118:	00010007 	.word	0x00010007

0800911c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b0c      	cmp	r3, #12
 800912e:	d855      	bhi.n	80091dc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8009130:	a201      	add	r2, pc, #4	@ (adr r2, 8009138 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8009132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009136:	bf00      	nop
 8009138:	0800916d 	.word	0x0800916d
 800913c:	080091dd 	.word	0x080091dd
 8009140:	080091dd 	.word	0x080091dd
 8009144:	080091dd 	.word	0x080091dd
 8009148:	08009189 	.word	0x08009189
 800914c:	080091dd 	.word	0x080091dd
 8009150:	080091dd 	.word	0x080091dd
 8009154:	080091dd 	.word	0x080091dd
 8009158:	080091a5 	.word	0x080091a5
 800915c:	080091dd 	.word	0x080091dd
 8009160:	080091dd 	.word	0x080091dd
 8009164:	080091dd 	.word	0x080091dd
 8009168:	080091c1 	.word	0x080091c1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800917a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009180:	4618      	mov	r0, r3
 8009182:	f7fd f9f7 	bl	8006574 <HAL_DMA_Abort_IT>
      break;
 8009186:	e02c      	b.n	80091e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009196:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919c:	4618      	mov	r0, r3
 800919e:	f7fd f9e9 	bl	8006574 <HAL_DMA_Abort_IT>
      break;
 80091a2:	e01e      	b.n	80091e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fd f9db 	bl	8006574 <HAL_DMA_Abort_IT>
      break;
 80091be:	e010      	b.n	80091e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80091ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fd f9cd 	bl	8006574 <HAL_DMA_Abort_IT>
      break;
 80091da:	e002      	b.n	80091e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
      break;
 80091e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f040 8081 	bne.w	80092ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2200      	movs	r2, #0
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 f924 	bl	800a440 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a3e      	ldr	r2, [pc, #248]	@ (80092f8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d013      	beq.n	800922a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a3d      	ldr	r2, [pc, #244]	@ (80092fc <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d00e      	beq.n	800922a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a3b      	ldr	r2, [pc, #236]	@ (8009300 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d009      	beq.n	800922a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a3a      	ldr	r2, [pc, #232]	@ (8009304 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d004      	beq.n	800922a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a38      	ldr	r2, [pc, #224]	@ (8009308 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d101      	bne.n	800922e <HAL_TIM_PWM_Stop_DMA+0x112>
 800922a:	2301      	movs	r3, #1
 800922c:	e000      	b.n	8009230 <HAL_TIM_PWM_Stop_DMA+0x114>
 800922e:	2300      	movs	r3, #0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d017      	beq.n	8009264 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6a1a      	ldr	r2, [r3, #32]
 800923a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800923e:	4013      	ands	r3, r2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10f      	bne.n	8009264 <HAL_TIM_PWM_Stop_DMA+0x148>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6a1a      	ldr	r2, [r3, #32]
 800924a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800924e:	4013      	ands	r3, r2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d107      	bne.n	8009264 <HAL_TIM_PWM_Stop_DMA+0x148>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009262:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6a1a      	ldr	r2, [r3, #32]
 800926a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800926e:	4013      	ands	r3, r2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10f      	bne.n	8009294 <HAL_TIM_PWM_Stop_DMA+0x178>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6a1a      	ldr	r2, [r3, #32]
 800927a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800927e:	4013      	ands	r3, r2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d107      	bne.n	8009294 <HAL_TIM_PWM_Stop_DMA+0x178>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0201 	bic.w	r2, r2, #1
 8009292:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d104      	bne.n	80092a4 <HAL_TIM_PWM_Stop_DMA+0x188>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092a2:	e023      	b.n	80092ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d104      	bne.n	80092b4 <HAL_TIM_PWM_Stop_DMA+0x198>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092b2:	e01b      	b.n	80092ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	d104      	bne.n	80092c4 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092c2:	e013      	b.n	80092ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b0c      	cmp	r3, #12
 80092c8:	d104      	bne.n	80092d4 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092d2:	e00b      	b.n	80092ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b10      	cmp	r3, #16
 80092d8:	d104      	bne.n	80092e4 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092e2:	e003      	b.n	80092ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	40012c00 	.word	0x40012c00
 80092fc:	40013400 	.word	0x40013400
 8009300:	40014000 	.word	0x40014000
 8009304:	40014400 	.word	0x40014400
 8009308:	40014800 	.word	0x40014800

0800930c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d020      	beq.n	8009370 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01b      	beq.n	8009370 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f06f 0202 	mvn.w	r2, #2
 8009340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fb4a 	bl	80099f0 <HAL_TIM_IC_CaptureCallback>
 800935c:	e005      	b.n	800936a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fb3c 	bl	80099dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7f8 fe7f 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d020      	beq.n	80093bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01b      	beq.n	80093bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f06f 0204 	mvn.w	r2, #4
 800938c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2202      	movs	r2, #2
 8009392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fb24 	bl	80099f0 <HAL_TIM_IC_CaptureCallback>
 80093a8:	e005      	b.n	80093b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fb16 	bl	80099dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7f8 fe59 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f003 0308 	and.w	r3, r3, #8
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d020      	beq.n	8009408 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d01b      	beq.n	8009408 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0208 	mvn.w	r2, #8
 80093d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2204      	movs	r2, #4
 80093de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fafe 	bl	80099f0 <HAL_TIM_IC_CaptureCallback>
 80093f4:	e005      	b.n	8009402 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 faf0 	bl	80099dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7f8 fe33 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f003 0310 	and.w	r3, r3, #16
 800940e:	2b00      	cmp	r3, #0
 8009410:	d020      	beq.n	8009454 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f003 0310 	and.w	r3, r3, #16
 8009418:	2b00      	cmp	r3, #0
 800941a:	d01b      	beq.n	8009454 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f06f 0210 	mvn.w	r2, #16
 8009424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2208      	movs	r2, #8
 800942a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fad8 	bl	80099f0 <HAL_TIM_IC_CaptureCallback>
 8009440:	e005      	b.n	800944e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 faca 	bl	80099dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7f8 fe0d 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00c      	beq.n	8009478 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d007      	beq.n	8009478 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f06f 0201 	mvn.w	r2, #1
 8009470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 faa8 	bl	80099c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800947e:	2b00      	cmp	r3, #0
 8009480:	d104      	bne.n	800948c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00c      	beq.n	80094a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009492:	2b00      	cmp	r3, #0
 8009494:	d007      	beq.n	80094a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800949e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f001 f87f 	bl	800a5a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00c      	beq.n	80094ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d007      	beq.n	80094ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 f877 	bl	800a5b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00c      	beq.n	80094ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fa95 	bl	8009a18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00c      	beq.n	8009512 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d007      	beq.n	8009512 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f06f 0220 	mvn.w	r2, #32
 800950a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 f83f 	bl	800a590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00c      	beq.n	8009536 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800952e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f001 f84b 	bl	800a5cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00c      	beq.n	800955a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d007      	beq.n	800955a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 f843 	bl	800a5e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00c      	beq.n	800957e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d007      	beq.n	800957e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 f83b 	bl	800a5f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00c      	beq.n	80095a2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800959a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 f833 	bl	800a608 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d101      	bne.n	80095ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095c6:	2302      	movs	r3, #2
 80095c8:	e0ff      	b.n	80097ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b14      	cmp	r3, #20
 80095d6:	f200 80f0 	bhi.w	80097ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80095da:	a201      	add	r2, pc, #4	@ (adr r2, 80095e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	08009635 	.word	0x08009635
 80095e4:	080097bb 	.word	0x080097bb
 80095e8:	080097bb 	.word	0x080097bb
 80095ec:	080097bb 	.word	0x080097bb
 80095f0:	08009675 	.word	0x08009675
 80095f4:	080097bb 	.word	0x080097bb
 80095f8:	080097bb 	.word	0x080097bb
 80095fc:	080097bb 	.word	0x080097bb
 8009600:	080096b7 	.word	0x080096b7
 8009604:	080097bb 	.word	0x080097bb
 8009608:	080097bb 	.word	0x080097bb
 800960c:	080097bb 	.word	0x080097bb
 8009610:	080096f7 	.word	0x080096f7
 8009614:	080097bb 	.word	0x080097bb
 8009618:	080097bb 	.word	0x080097bb
 800961c:	080097bb 	.word	0x080097bb
 8009620:	08009739 	.word	0x08009739
 8009624:	080097bb 	.word	0x080097bb
 8009628:	080097bb 	.word	0x080097bb
 800962c:	080097bb 	.word	0x080097bb
 8009630:	08009779 	.word	0x08009779
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fb6e 	bl	8009d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	699a      	ldr	r2, [r3, #24]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0208 	orr.w	r2, r2, #8
 800964e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	699a      	ldr	r2, [r3, #24]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0204 	bic.w	r2, r2, #4
 800965e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6999      	ldr	r1, [r3, #24]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	691a      	ldr	r2, [r3, #16]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	430a      	orrs	r2, r1
 8009670:	619a      	str	r2, [r3, #24]
      break;
 8009672:	e0a5      	b.n	80097c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	4618      	mov	r0, r3
 800967c:	f000 fbde 	bl	8009e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	699a      	ldr	r2, [r3, #24]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800968e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	699a      	ldr	r2, [r3, #24]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800969e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6999      	ldr	r1, [r3, #24]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	021a      	lsls	r2, r3, #8
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	619a      	str	r2, [r3, #24]
      break;
 80096b4:	e084      	b.n	80097c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 fc47 	bl	8009f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69da      	ldr	r2, [r3, #28]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f042 0208 	orr.w	r2, r2, #8
 80096d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	69da      	ldr	r2, [r3, #28]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0204 	bic.w	r2, r2, #4
 80096e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	69d9      	ldr	r1, [r3, #28]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	691a      	ldr	r2, [r3, #16]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	61da      	str	r2, [r3, #28]
      break;
 80096f4:	e064      	b.n	80097c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68b9      	ldr	r1, [r7, #8]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fcaf 	bl	800a060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69da      	ldr	r2, [r3, #28]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	69da      	ldr	r2, [r3, #28]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69d9      	ldr	r1, [r3, #28]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	021a      	lsls	r2, r3, #8
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	61da      	str	r2, [r3, #28]
      break;
 8009736:	e043      	b.n	80097c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68b9      	ldr	r1, [r7, #8]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fd18 	bl	800a174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0208 	orr.w	r2, r2, #8
 8009752:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0204 	bic.w	r2, r2, #4
 8009762:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	691a      	ldr	r2, [r3, #16]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009776:	e023      	b.n	80097c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68b9      	ldr	r1, [r7, #8]
 800977e:	4618      	mov	r0, r3
 8009780:	f000 fd5c 	bl	800a23c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009792:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	021a      	lsls	r2, r3, #8
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	430a      	orrs	r2, r1
 80097b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80097b8:	e002      	b.n	80097c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	75fb      	strb	r3, [r7, #23]
      break;
 80097be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop

080097d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d101      	bne.n	80097f0 <HAL_TIM_ConfigClockSource+0x1c>
 80097ec:	2302      	movs	r3, #2
 80097ee:	e0de      	b.n	80099ae <HAL_TIM_ConfigClockSource+0x1da>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800980e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800981a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a63      	ldr	r2, [pc, #396]	@ (80099b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	f000 80a9 	beq.w	8009982 <HAL_TIM_ConfigClockSource+0x1ae>
 8009830:	4a61      	ldr	r2, [pc, #388]	@ (80099b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009832:	4293      	cmp	r3, r2
 8009834:	f200 80ae 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 8009838:	4a60      	ldr	r2, [pc, #384]	@ (80099bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800983a:	4293      	cmp	r3, r2
 800983c:	f000 80a1 	beq.w	8009982 <HAL_TIM_ConfigClockSource+0x1ae>
 8009840:	4a5e      	ldr	r2, [pc, #376]	@ (80099bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009842:	4293      	cmp	r3, r2
 8009844:	f200 80a6 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 8009848:	4a5d      	ldr	r2, [pc, #372]	@ (80099c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800984a:	4293      	cmp	r3, r2
 800984c:	f000 8099 	beq.w	8009982 <HAL_TIM_ConfigClockSource+0x1ae>
 8009850:	4a5b      	ldr	r2, [pc, #364]	@ (80099c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009852:	4293      	cmp	r3, r2
 8009854:	f200 809e 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 8009858:	4a5a      	ldr	r2, [pc, #360]	@ (80099c4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800985a:	4293      	cmp	r3, r2
 800985c:	f000 8091 	beq.w	8009982 <HAL_TIM_ConfigClockSource+0x1ae>
 8009860:	4a58      	ldr	r2, [pc, #352]	@ (80099c4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	f200 8096 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 8009868:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800986c:	f000 8089 	beq.w	8009982 <HAL_TIM_ConfigClockSource+0x1ae>
 8009870:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009874:	f200 808e 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 8009878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800987c:	d03e      	beq.n	80098fc <HAL_TIM_ConfigClockSource+0x128>
 800987e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009882:	f200 8087 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 8009886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800988a:	f000 8086 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x1c6>
 800988e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009892:	d87f      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 8009894:	2b70      	cmp	r3, #112	@ 0x70
 8009896:	d01a      	beq.n	80098ce <HAL_TIM_ConfigClockSource+0xfa>
 8009898:	2b70      	cmp	r3, #112	@ 0x70
 800989a:	d87b      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 800989c:	2b60      	cmp	r3, #96	@ 0x60
 800989e:	d050      	beq.n	8009942 <HAL_TIM_ConfigClockSource+0x16e>
 80098a0:	2b60      	cmp	r3, #96	@ 0x60
 80098a2:	d877      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 80098a4:	2b50      	cmp	r3, #80	@ 0x50
 80098a6:	d03c      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0x14e>
 80098a8:	2b50      	cmp	r3, #80	@ 0x50
 80098aa:	d873      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 80098ac:	2b40      	cmp	r3, #64	@ 0x40
 80098ae:	d058      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x18e>
 80098b0:	2b40      	cmp	r3, #64	@ 0x40
 80098b2:	d86f      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 80098b4:	2b30      	cmp	r3, #48	@ 0x30
 80098b6:	d064      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x1ae>
 80098b8:	2b30      	cmp	r3, #48	@ 0x30
 80098ba:	d86b      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 80098bc:	2b20      	cmp	r3, #32
 80098be:	d060      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x1ae>
 80098c0:	2b20      	cmp	r3, #32
 80098c2:	d867      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d05c      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x1ae>
 80098c8:	2b10      	cmp	r3, #16
 80098ca:	d05a      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x1ae>
 80098cc:	e062      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098de:	f000 fd8f 	bl	800a400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80098f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	609a      	str	r2, [r3, #8]
      break;
 80098fa:	e04f      	b.n	800999c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800990c:	f000 fd78 	bl	800a400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689a      	ldr	r2, [r3, #8]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800991e:	609a      	str	r2, [r3, #8]
      break;
 8009920:	e03c      	b.n	800999c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800992e:	461a      	mov	r2, r3
 8009930:	f000 fcea 	bl	800a308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2150      	movs	r1, #80	@ 0x50
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fd43 	bl	800a3c6 <TIM_ITRx_SetConfig>
      break;
 8009940:	e02c      	b.n	800999c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800994e:	461a      	mov	r2, r3
 8009950:	f000 fd09 	bl	800a366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2160      	movs	r1, #96	@ 0x60
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fd33 	bl	800a3c6 <TIM_ITRx_SetConfig>
      break;
 8009960:	e01c      	b.n	800999c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800996e:	461a      	mov	r2, r3
 8009970:	f000 fcca 	bl	800a308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2140      	movs	r1, #64	@ 0x40
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fd23 	bl	800a3c6 <TIM_ITRx_SetConfig>
      break;
 8009980:	e00c      	b.n	800999c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4619      	mov	r1, r3
 800998c:	4610      	mov	r0, r2
 800998e:	f000 fd1a 	bl	800a3c6 <TIM_ITRx_SetConfig>
      break;
 8009992:	e003      	b.n	800999c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	73fb      	strb	r3, [r7, #15]
      break;
 8009998:	e000      	b.n	800999c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800999a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	00100070 	.word	0x00100070
 80099bc:	00100040 	.word	0x00100040
 80099c0:	00100030 	.word	0x00100030
 80099c4:	00100020 	.word	0x00100020

080099c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d107      	bne.n	8009a68 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a66:	e02a      	b.n	8009abe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d107      	bne.n	8009a82 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2202      	movs	r2, #2
 8009a76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a80:	e01d      	b.n	8009abe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d107      	bne.n	8009a9c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2204      	movs	r2, #4
 8009a90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a9a:	e010      	b.n	8009abe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d107      	bne.n	8009ab6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2208      	movs	r2, #8
 8009aaa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ab4:	e003      	b.n	8009abe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff ffb4 	bl	8009a2c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	771a      	strb	r2, [r3, #28]
}
 8009aca:	bf00      	nop
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ade:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d10b      	bne.n	8009b02 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2201      	movs	r2, #1
 8009aee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d136      	bne.n	8009b66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b00:	e031      	b.n	8009b66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d10b      	bne.n	8009b24 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d125      	bne.n	8009b66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b22:	e020      	b.n	8009b66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d10b      	bne.n	8009b46 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2204      	movs	r2, #4
 8009b32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d114      	bne.n	8009b66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b44:	e00f      	b.n	8009b66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d10a      	bne.n	8009b66 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2208      	movs	r2, #8
 8009b54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d103      	bne.n	8009b66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7f8 fa7e 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	771a      	strb	r2, [r3, #28]
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b86:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d103      	bne.n	8009b9a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2201      	movs	r2, #1
 8009b96:	771a      	strb	r2, [r3, #28]
 8009b98:	e019      	b.n	8009bce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d103      	bne.n	8009bac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	771a      	strb	r2, [r3, #28]
 8009baa:	e010      	b.n	8009bce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d103      	bne.n	8009bbe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2204      	movs	r2, #4
 8009bba:	771a      	strb	r2, [r3, #28]
 8009bbc:	e007      	b.n	8009bce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d102      	bne.n	8009bce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2208      	movs	r2, #8
 8009bcc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7ff ff18 	bl	8009a04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	771a      	strb	r2, [r3, #28]
}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
	...

08009be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a42      	ldr	r2, [pc, #264]	@ (8009d00 <TIM_Base_SetConfig+0x11c>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00f      	beq.n	8009c1c <TIM_Base_SetConfig+0x38>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c02:	d00b      	beq.n	8009c1c <TIM_Base_SetConfig+0x38>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a3f      	ldr	r2, [pc, #252]	@ (8009d04 <TIM_Base_SetConfig+0x120>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d007      	beq.n	8009c1c <TIM_Base_SetConfig+0x38>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8009d08 <TIM_Base_SetConfig+0x124>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d003      	beq.n	8009c1c <TIM_Base_SetConfig+0x38>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a3d      	ldr	r2, [pc, #244]	@ (8009d0c <TIM_Base_SetConfig+0x128>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d108      	bne.n	8009c2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a33      	ldr	r2, [pc, #204]	@ (8009d00 <TIM_Base_SetConfig+0x11c>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d01b      	beq.n	8009c6e <TIM_Base_SetConfig+0x8a>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c3c:	d017      	beq.n	8009c6e <TIM_Base_SetConfig+0x8a>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a30      	ldr	r2, [pc, #192]	@ (8009d04 <TIM_Base_SetConfig+0x120>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d013      	beq.n	8009c6e <TIM_Base_SetConfig+0x8a>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a2f      	ldr	r2, [pc, #188]	@ (8009d08 <TIM_Base_SetConfig+0x124>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d00f      	beq.n	8009c6e <TIM_Base_SetConfig+0x8a>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a2e      	ldr	r2, [pc, #184]	@ (8009d0c <TIM_Base_SetConfig+0x128>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d00b      	beq.n	8009c6e <TIM_Base_SetConfig+0x8a>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a2d      	ldr	r2, [pc, #180]	@ (8009d10 <TIM_Base_SetConfig+0x12c>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d007      	beq.n	8009c6e <TIM_Base_SetConfig+0x8a>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a2c      	ldr	r2, [pc, #176]	@ (8009d14 <TIM_Base_SetConfig+0x130>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d003      	beq.n	8009c6e <TIM_Base_SetConfig+0x8a>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a2b      	ldr	r2, [pc, #172]	@ (8009d18 <TIM_Base_SetConfig+0x134>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d108      	bne.n	8009c80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	689a      	ldr	r2, [r3, #8]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a16      	ldr	r2, [pc, #88]	@ (8009d00 <TIM_Base_SetConfig+0x11c>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d00f      	beq.n	8009ccc <TIM_Base_SetConfig+0xe8>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a17      	ldr	r2, [pc, #92]	@ (8009d0c <TIM_Base_SetConfig+0x128>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d00b      	beq.n	8009ccc <TIM_Base_SetConfig+0xe8>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a16      	ldr	r2, [pc, #88]	@ (8009d10 <TIM_Base_SetConfig+0x12c>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d007      	beq.n	8009ccc <TIM_Base_SetConfig+0xe8>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a15      	ldr	r2, [pc, #84]	@ (8009d14 <TIM_Base_SetConfig+0x130>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d003      	beq.n	8009ccc <TIM_Base_SetConfig+0xe8>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a14      	ldr	r2, [pc, #80]	@ (8009d18 <TIM_Base_SetConfig+0x134>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d103      	bne.n	8009cd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d105      	bne.n	8009cf2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	f023 0201 	bic.w	r2, r3, #1
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	611a      	str	r2, [r3, #16]
  }
}
 8009cf2:	bf00      	nop
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	40012c00 	.word	0x40012c00
 8009d04:	40000400 	.word	0x40000400
 8009d08:	40000800 	.word	0x40000800
 8009d0c:	40013400 	.word	0x40013400
 8009d10:	40014000 	.word	0x40014000
 8009d14:	40014400 	.word	0x40014400
 8009d18:	40014800 	.word	0x40014800

08009d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a1b      	ldr	r3, [r3, #32]
 8009d30:	f023 0201 	bic.w	r2, r3, #1
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f023 0303 	bic.w	r3, r3, #3
 8009d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f023 0302 	bic.w	r3, r3, #2
 8009d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a2c      	ldr	r2, [pc, #176]	@ (8009e28 <TIM_OC1_SetConfig+0x10c>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d00f      	beq.n	8009d9c <TIM_OC1_SetConfig+0x80>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8009e2c <TIM_OC1_SetConfig+0x110>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00b      	beq.n	8009d9c <TIM_OC1_SetConfig+0x80>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a2a      	ldr	r2, [pc, #168]	@ (8009e30 <TIM_OC1_SetConfig+0x114>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d007      	beq.n	8009d9c <TIM_OC1_SetConfig+0x80>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a29      	ldr	r2, [pc, #164]	@ (8009e34 <TIM_OC1_SetConfig+0x118>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d003      	beq.n	8009d9c <TIM_OC1_SetConfig+0x80>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a28      	ldr	r2, [pc, #160]	@ (8009e38 <TIM_OC1_SetConfig+0x11c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d10c      	bne.n	8009db6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	f023 0308 	bic.w	r3, r3, #8
 8009da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f023 0304 	bic.w	r3, r3, #4
 8009db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a1b      	ldr	r2, [pc, #108]	@ (8009e28 <TIM_OC1_SetConfig+0x10c>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d00f      	beq.n	8009dde <TIM_OC1_SetConfig+0xc2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8009e2c <TIM_OC1_SetConfig+0x110>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d00b      	beq.n	8009dde <TIM_OC1_SetConfig+0xc2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a19      	ldr	r2, [pc, #100]	@ (8009e30 <TIM_OC1_SetConfig+0x114>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d007      	beq.n	8009dde <TIM_OC1_SetConfig+0xc2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a18      	ldr	r2, [pc, #96]	@ (8009e34 <TIM_OC1_SetConfig+0x118>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d003      	beq.n	8009dde <TIM_OC1_SetConfig+0xc2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a17      	ldr	r2, [pc, #92]	@ (8009e38 <TIM_OC1_SetConfig+0x11c>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d111      	bne.n	8009e02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	621a      	str	r2, [r3, #32]
}
 8009e1c:	bf00      	nop
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	40012c00 	.word	0x40012c00
 8009e2c:	40013400 	.word	0x40013400
 8009e30:	40014000 	.word	0x40014000
 8009e34:	40014400 	.word	0x40014400
 8009e38:	40014800 	.word	0x40014800

08009e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	f023 0210 	bic.w	r2, r3, #16
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	f023 0320 	bic.w	r3, r3, #32
 8009e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a28      	ldr	r2, [pc, #160]	@ (8009f3c <TIM_OC2_SetConfig+0x100>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d003      	beq.n	8009ea8 <TIM_OC2_SetConfig+0x6c>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a27      	ldr	r2, [pc, #156]	@ (8009f40 <TIM_OC2_SetConfig+0x104>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d10d      	bne.n	8009ec4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	011b      	lsls	r3, r3, #4
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8009f3c <TIM_OC2_SetConfig+0x100>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00f      	beq.n	8009eec <TIM_OC2_SetConfig+0xb0>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a1c      	ldr	r2, [pc, #112]	@ (8009f40 <TIM_OC2_SetConfig+0x104>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00b      	beq.n	8009eec <TIM_OC2_SetConfig+0xb0>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8009f44 <TIM_OC2_SetConfig+0x108>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d007      	beq.n	8009eec <TIM_OC2_SetConfig+0xb0>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a1a      	ldr	r2, [pc, #104]	@ (8009f48 <TIM_OC2_SetConfig+0x10c>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC2_SetConfig+0xb0>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a19      	ldr	r2, [pc, #100]	@ (8009f4c <TIM_OC2_SetConfig+0x110>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d113      	bne.n	8009f14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	621a      	str	r2, [r3, #32]
}
 8009f2e:	bf00      	nop
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	40012c00 	.word	0x40012c00
 8009f40:	40013400 	.word	0x40013400
 8009f44:	40014000 	.word	0x40014000
 8009f48:	40014400 	.word	0x40014400
 8009f4c:	40014800 	.word	0x40014800

08009f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	69db      	ldr	r3, [r3, #28]
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f023 0303 	bic.w	r3, r3, #3
 8009f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	021b      	lsls	r3, r3, #8
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a27      	ldr	r2, [pc, #156]	@ (800a04c <TIM_OC3_SetConfig+0xfc>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d003      	beq.n	8009fba <TIM_OC3_SetConfig+0x6a>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a26      	ldr	r2, [pc, #152]	@ (800a050 <TIM_OC3_SetConfig+0x100>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d10d      	bne.n	8009fd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	021b      	lsls	r3, r3, #8
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <TIM_OC3_SetConfig+0xfc>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d00f      	beq.n	8009ffe <TIM_OC3_SetConfig+0xae>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a1b      	ldr	r2, [pc, #108]	@ (800a050 <TIM_OC3_SetConfig+0x100>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d00b      	beq.n	8009ffe <TIM_OC3_SetConfig+0xae>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a1a      	ldr	r2, [pc, #104]	@ (800a054 <TIM_OC3_SetConfig+0x104>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d007      	beq.n	8009ffe <TIM_OC3_SetConfig+0xae>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a19      	ldr	r2, [pc, #100]	@ (800a058 <TIM_OC3_SetConfig+0x108>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <TIM_OC3_SetConfig+0xae>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a18      	ldr	r2, [pc, #96]	@ (800a05c <TIM_OC3_SetConfig+0x10c>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d113      	bne.n	800a026 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4313      	orrs	r3, r2
 800a018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	621a      	str	r2, [r3, #32]
}
 800a040:	bf00      	nop
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	40012c00 	.word	0x40012c00
 800a050:	40013400 	.word	0x40013400
 800a054:	40014000 	.word	0x40014000
 800a058:	40014400 	.word	0x40014400
 800a05c:	40014800 	.word	0x40014800

0800a060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a08e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	021b      	lsls	r3, r3, #8
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a0ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	031b      	lsls	r3, r3, #12
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a28      	ldr	r2, [pc, #160]	@ (800a160 <TIM_OC4_SetConfig+0x100>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d003      	beq.n	800a0cc <TIM_OC4_SetConfig+0x6c>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a27      	ldr	r2, [pc, #156]	@ (800a164 <TIM_OC4_SetConfig+0x104>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d10d      	bne.n	800a0e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a0d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	031b      	lsls	r3, r3, #12
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a1d      	ldr	r2, [pc, #116]	@ (800a160 <TIM_OC4_SetConfig+0x100>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d00f      	beq.n	800a110 <TIM_OC4_SetConfig+0xb0>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a1c      	ldr	r2, [pc, #112]	@ (800a164 <TIM_OC4_SetConfig+0x104>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d00b      	beq.n	800a110 <TIM_OC4_SetConfig+0xb0>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a168 <TIM_OC4_SetConfig+0x108>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d007      	beq.n	800a110 <TIM_OC4_SetConfig+0xb0>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a1a      	ldr	r2, [pc, #104]	@ (800a16c <TIM_OC4_SetConfig+0x10c>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d003      	beq.n	800a110 <TIM_OC4_SetConfig+0xb0>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a19      	ldr	r2, [pc, #100]	@ (800a170 <TIM_OC4_SetConfig+0x110>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d113      	bne.n	800a138 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a116:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a11e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	019b      	lsls	r3, r3, #6
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	4313      	orrs	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	019b      	lsls	r3, r3, #6
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	4313      	orrs	r3, r2
 800a136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	621a      	str	r2, [r3, #32]
}
 800a152:	bf00      	nop
 800a154:	371c      	adds	r7, #28
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	40012c00 	.word	0x40012c00
 800a164:	40013400 	.word	0x40013400
 800a168:	40014000 	.word	0x40014000
 800a16c:	40014400 	.word	0x40014400
 800a170:	40014800 	.word	0x40014800

0800a174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a174:	b480      	push	{r7}
 800a176:	b087      	sub	sp, #28
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a1b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	041b      	lsls	r3, r3, #16
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a17      	ldr	r2, [pc, #92]	@ (800a228 <TIM_OC5_SetConfig+0xb4>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00f      	beq.n	800a1ee <TIM_OC5_SetConfig+0x7a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a16      	ldr	r2, [pc, #88]	@ (800a22c <TIM_OC5_SetConfig+0xb8>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00b      	beq.n	800a1ee <TIM_OC5_SetConfig+0x7a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a15      	ldr	r2, [pc, #84]	@ (800a230 <TIM_OC5_SetConfig+0xbc>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d007      	beq.n	800a1ee <TIM_OC5_SetConfig+0x7a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a14      	ldr	r2, [pc, #80]	@ (800a234 <TIM_OC5_SetConfig+0xc0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d003      	beq.n	800a1ee <TIM_OC5_SetConfig+0x7a>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a13      	ldr	r2, [pc, #76]	@ (800a238 <TIM_OC5_SetConfig+0xc4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d109      	bne.n	800a202 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	021b      	lsls	r3, r3, #8
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	621a      	str	r2, [r3, #32]
}
 800a21c:	bf00      	nop
 800a21e:	371c      	adds	r7, #28
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	40012c00 	.word	0x40012c00
 800a22c:	40013400 	.word	0x40013400
 800a230:	40014000 	.word	0x40014000
 800a234:	40014400 	.word	0x40014400
 800a238:	40014800 	.word	0x40014800

0800a23c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
 800a250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a26a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a26e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	021b      	lsls	r3, r3, #8
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	051b      	lsls	r3, r3, #20
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a18      	ldr	r2, [pc, #96]	@ (800a2f4 <TIM_OC6_SetConfig+0xb8>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d00f      	beq.n	800a2b8 <TIM_OC6_SetConfig+0x7c>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a17      	ldr	r2, [pc, #92]	@ (800a2f8 <TIM_OC6_SetConfig+0xbc>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d00b      	beq.n	800a2b8 <TIM_OC6_SetConfig+0x7c>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a16      	ldr	r2, [pc, #88]	@ (800a2fc <TIM_OC6_SetConfig+0xc0>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d007      	beq.n	800a2b8 <TIM_OC6_SetConfig+0x7c>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a15      	ldr	r2, [pc, #84]	@ (800a300 <TIM_OC6_SetConfig+0xc4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d003      	beq.n	800a2b8 <TIM_OC6_SetConfig+0x7c>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a14      	ldr	r2, [pc, #80]	@ (800a304 <TIM_OC6_SetConfig+0xc8>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d109      	bne.n	800a2cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a2be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	029b      	lsls	r3, r3, #10
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	621a      	str	r2, [r3, #32]
}
 800a2e6:	bf00      	nop
 800a2e8:	371c      	adds	r7, #28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	40012c00 	.word	0x40012c00
 800a2f8:	40013400 	.word	0x40013400
 800a2fc:	40014000 	.word	0x40014000
 800a300:	40014400 	.word	0x40014400
 800a304:	40014800 	.word	0x40014800

0800a308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a308:	b480      	push	{r7}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	f023 0201 	bic.w	r2, r3, #1
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	011b      	lsls	r3, r3, #4
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f023 030a 	bic.w	r3, r3, #10
 800a344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	621a      	str	r2, [r3, #32]
}
 800a35a:	bf00      	nop
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a366:	b480      	push	{r7}
 800a368:	b087      	sub	sp, #28
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6a1b      	ldr	r3, [r3, #32]
 800a37c:	f023 0210 	bic.w	r2, r3, #16
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	031b      	lsls	r3, r3, #12
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	4313      	orrs	r3, r2
 800a39a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a3a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	621a      	str	r2, [r3, #32]
}
 800a3ba:	bf00      	nop
 800a3bc:	371c      	adds	r7, #28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a3dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	f043 0307 	orr.w	r3, r3, #7
 800a3ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	609a      	str	r2, [r3, #8]
}
 800a3f4:	bf00      	nop
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a41a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	021a      	lsls	r2, r3, #8
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	431a      	orrs	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4313      	orrs	r3, r2
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	609a      	str	r2, [r3, #8]
}
 800a434:	bf00      	nop
 800a436:	371c      	adds	r7, #28
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a440:	b480      	push	{r7}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	f003 031f 	and.w	r3, r3, #31
 800a452:	2201      	movs	r2, #1
 800a454:	fa02 f303 	lsl.w	r3, r2, r3
 800a458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6a1a      	ldr	r2, [r3, #32]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	43db      	mvns	r3, r3
 800a462:	401a      	ands	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a1a      	ldr	r2, [r3, #32]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f003 031f 	and.w	r3, r3, #31
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	fa01 f303 	lsl.w	r3, r1, r3
 800a478:	431a      	orrs	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	621a      	str	r2, [r3, #32]
}
 800a47e:	bf00      	nop
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
	...

0800a48c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e065      	b.n	800a570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a2c      	ldr	r2, [pc, #176]	@ (800a57c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d004      	beq.n	800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a2b      	ldr	r2, [pc, #172]	@ (800a580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d108      	bne.n	800a4ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a4de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a4f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a1b      	ldr	r2, [pc, #108]	@ (800a57c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d018      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a51a:	d013      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a18      	ldr	r2, [pc, #96]	@ (800a584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d00e      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a17      	ldr	r2, [pc, #92]	@ (800a588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d009      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a12      	ldr	r2, [pc, #72]	@ (800a580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d004      	beq.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a13      	ldr	r2, [pc, #76]	@ (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d10c      	bne.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a54a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	4313      	orrs	r3, r2
 800a554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	40012c00 	.word	0x40012c00
 800a580:	40013400 	.word	0x40013400
 800a584:	40000400 	.word	0x40000400
 800a588:	40000800 	.word	0x40000800
 800a58c:	40014000 	.word	0x40014000

0800a590 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e042      	b.n	800a6b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a634:	2b00      	cmp	r3, #0
 800a636:	d106      	bne.n	800a646 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7f9 fde1 	bl	8004208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2224      	movs	r2, #36	@ 0x24
 800a64a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0201 	bic.w	r2, r2, #1
 800a65c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a662:	2b00      	cmp	r3, #0
 800a664:	d002      	beq.n	800a66c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f001 f848 	bl	800b6fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fd79 	bl	800b164 <UART_SetConfig>
 800a672:	4603      	mov	r3, r0
 800a674:	2b01      	cmp	r3, #1
 800a676:	d101      	bne.n	800a67c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e01b      	b.n	800a6b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a68a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	689a      	ldr	r2, [r3, #8]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a69a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f042 0201 	orr.w	r2, r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f001 f8c7 	bl	800b840 <UART_CheckIdleState>
 800a6b2:	4603      	mov	r3, r0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b08a      	sub	sp, #40	@ 0x28
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6d2:	2b20      	cmp	r3, #32
 800a6d4:	d17b      	bne.n	800a7ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d002      	beq.n	800a6e2 <HAL_UART_Transmit+0x26>
 800a6dc:	88fb      	ldrh	r3, [r7, #6]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e074      	b.n	800a7d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2221      	movs	r2, #33	@ 0x21
 800a6f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6f6:	f7f9 ffcd 	bl	8004694 <HAL_GetTick>
 800a6fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	88fa      	ldrh	r2, [r7, #6]
 800a700:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	88fa      	ldrh	r2, [r7, #6]
 800a708:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a714:	d108      	bne.n	800a728 <HAL_UART_Transmit+0x6c>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d104      	bne.n	800a728 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	61bb      	str	r3, [r7, #24]
 800a726:	e003      	b.n	800a730 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a72c:	2300      	movs	r3, #0
 800a72e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a730:	e030      	b.n	800a794 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2200      	movs	r2, #0
 800a73a:	2180      	movs	r1, #128	@ 0x80
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f001 f929 	bl	800b994 <UART_WaitOnFlagUntilTimeout>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e03d      	b.n	800a7d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10b      	bne.n	800a772 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a768:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	3302      	adds	r3, #2
 800a76e:	61bb      	str	r3, [r7, #24]
 800a770:	e007      	b.n	800a782 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	781a      	ldrb	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	3301      	adds	r3, #1
 800a780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a788:	b29b      	uxth	r3, r3
 800a78a:	3b01      	subs	r3, #1
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1c8      	bne.n	800a732 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2140      	movs	r1, #64	@ 0x40
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f001 f8f2 	bl	800b994 <UART_WaitOnFlagUntilTimeout>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d005      	beq.n	800a7c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e006      	b.n	800a7d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	e000      	b.n	800a7d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a7ce:	2302      	movs	r3, #2
  }
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3720      	adds	r7, #32
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08a      	sub	sp, #40	@ 0x28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7ec:	2b20      	cmp	r3, #32
 800a7ee:	d137      	bne.n	800a860 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d002      	beq.n	800a7fc <HAL_UART_Receive_DMA+0x24>
 800a7f6:	88fb      	ldrh	r3, [r7, #6]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e030      	b.n	800a862 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a18      	ldr	r2, [pc, #96]	@ (800a86c <HAL_UART_Receive_DMA+0x94>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d01f      	beq.n	800a850 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d018      	beq.n	800a850 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	613b      	str	r3, [r7, #16]
   return(result);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a832:	627b      	str	r3, [r7, #36]	@ 0x24
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	461a      	mov	r2, r3
 800a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83c:	623b      	str	r3, [r7, #32]
 800a83e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	69f9      	ldr	r1, [r7, #28]
 800a842:	6a3a      	ldr	r2, [r7, #32]
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	61bb      	str	r3, [r7, #24]
   return(result);
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e6      	bne.n	800a81e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a850:	88fb      	ldrh	r3, [r7, #6]
 800a852:	461a      	mov	r2, r3
 800a854:	68b9      	ldr	r1, [r7, #8]
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f001 f90a 	bl	800ba70 <UART_Start_Receive_DMA>
 800a85c:	4603      	mov	r3, r0
 800a85e:	e000      	b.n	800a862 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a860:	2302      	movs	r3, #2
  }
}
 800a862:	4618      	mov	r0, r3
 800a864:	3728      	adds	r7, #40	@ 0x28
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	40008000 	.word	0x40008000

0800a870 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b0a0      	sub	sp, #128	@ 0x80
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a880:	e853 3f00 	ldrex	r3, [r3]
 800a884:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a886:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a888:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800a88c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a896:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a898:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a89c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a89e:	e841 2300 	strex	r3, r2, [r1]
 800a8a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a8a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1e6      	bne.n	800a878 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	3308      	adds	r3, #8
 800a8b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a8ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8bc:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800a8c0:	f023 0301 	bic.w	r3, r3, #1
 800a8c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a8ce:	657a      	str	r2, [r7, #84]	@ 0x54
 800a8d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a8d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8d6:	e841 2300 	strex	r3, r2, [r1]
 800a8da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a8dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1e3      	bne.n	800a8aa <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d118      	bne.n	800a91c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f2:	e853 3f00 	ldrex	r3, [r3]
 800a8f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fa:	f023 0310 	bic.w	r3, r3, #16
 800a8fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	461a      	mov	r2, r3
 800a906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a908:	643b      	str	r3, [r7, #64]	@ 0x40
 800a90a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a90e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a910:	e841 2300 	strex	r3, r2, [r1]
 800a914:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1e6      	bne.n	800a8ea <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a926:	2b80      	cmp	r3, #128	@ 0x80
 800a928:	d137      	bne.n	800a99a <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3308      	adds	r3, #8
 800a930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	61fb      	str	r3, [r7, #28]
   return(result);
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a940:	673b      	str	r3, [r7, #112]	@ 0x70
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3308      	adds	r3, #8
 800a948:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a94a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a94c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e5      	bne.n	800a92a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d019      	beq.n	800a99a <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a96a:	2200      	movs	r2, #0
 800a96c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a972:	4618      	mov	r0, r3
 800a974:	f7fb fda5 	bl	80064c2 <HAL_DMA_Abort>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00d      	beq.n	800a99a <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a982:	4618      	mov	r0, r3
 800a984:	f7fb ff0c 	bl	80067a0 <HAL_DMA_GetError>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	d105      	bne.n	800a99a <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2210      	movs	r2, #16
 800a992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a996:	2303      	movs	r3, #3
 800a998:	e073      	b.n	800aa82 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9a4:	2b40      	cmp	r3, #64	@ 0x40
 800a9a6:	d13b      	bne.n	800aa20 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a9c8:	61ba      	str	r2, [r7, #24]
 800a9ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9cc:	6979      	ldr	r1, [r7, #20]
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	e841 2300 	strex	r3, r2, [r1]
 800a9d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e5      	bne.n	800a9a8 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d01c      	beq.n	800aa20 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fb fd63 	bl	80064c2 <HAL_DMA_Abort>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00e      	beq.n	800aa20 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fb fec9 	bl	80067a0 <HAL_DMA_GetError>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b20      	cmp	r3, #32
 800aa12:	d105      	bne.n	800aa20 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2210      	movs	r2, #16
 800aa18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e030      	b.n	800aa82 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	220f      	movs	r2, #15
 800aa36:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa40:	d107      	bne.n	800aa52 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	699a      	ldr	r2, [r3, #24]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0210 	orr.w	r2, r2, #16
 800aa50:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	699a      	ldr	r2, [r3, #24]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f042 0208 	orr.w	r2, r2, #8
 800aa60:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2220      	movs	r2, #32
 800aa66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3780      	adds	r7, #128	@ 0x80
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b0ba      	sub	sp, #232	@ 0xe8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aab2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aab6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aaba:	4013      	ands	r3, r2
 800aabc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aac0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d11b      	bne.n	800ab00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aacc:	f003 0320 	and.w	r3, r3, #32
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d015      	beq.n	800ab00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aad8:	f003 0320 	and.w	r3, r3, #32
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d105      	bne.n	800aaec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d009      	beq.n	800ab00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8300 	beq.w	800b0f6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	4798      	blx	r3
      }
      return;
 800aafe:	e2fa      	b.n	800b0f6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8123 	beq.w	800ad50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab0e:	4b8d      	ldr	r3, [pc, #564]	@ (800ad44 <HAL_UART_IRQHandler+0x2b8>)
 800ab10:	4013      	ands	r3, r2
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d106      	bne.n	800ab24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ab1a:	4b8b      	ldr	r3, [pc, #556]	@ (800ad48 <HAL_UART_IRQHandler+0x2bc>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 8116 	beq.w	800ad50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d011      	beq.n	800ab54 <HAL_UART_IRQHandler+0xc8>
 800ab30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00b      	beq.n	800ab54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2201      	movs	r2, #1
 800ab42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab4a:	f043 0201 	orr.w	r2, r3, #1
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d011      	beq.n	800ab84 <HAL_UART_IRQHandler+0xf8>
 800ab60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00b      	beq.n	800ab84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2202      	movs	r2, #2
 800ab72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab7a:	f043 0204 	orr.w	r2, r3, #4
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d011      	beq.n	800abb4 <HAL_UART_IRQHandler+0x128>
 800ab90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2204      	movs	r2, #4
 800aba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abaa:	f043 0202 	orr.w	r2, r3, #2
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800abb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abb8:	f003 0308 	and.w	r3, r3, #8
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d017      	beq.n	800abf0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800abc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abc4:	f003 0320 	and.w	r3, r3, #32
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d105      	bne.n	800abd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800abcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800abd0:	4b5c      	ldr	r3, [pc, #368]	@ (800ad44 <HAL_UART_IRQHandler+0x2b8>)
 800abd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00b      	beq.n	800abf0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2208      	movs	r2, #8
 800abde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abe6:	f043 0208 	orr.w	r2, r3, #8
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800abf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d012      	beq.n	800ac22 <HAL_UART_IRQHandler+0x196>
 800abfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00c      	beq.n	800ac22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac18:	f043 0220 	orr.w	r2, r3, #32
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 8266 	beq.w	800b0fa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac32:	f003 0320 	and.w	r3, r3, #32
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d013      	beq.n	800ac62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d105      	bne.n	800ac52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d007      	beq.n	800ac62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac76:	2b40      	cmp	r3, #64	@ 0x40
 800ac78:	d005      	beq.n	800ac86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d054      	beq.n	800ad30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 ffd9 	bl	800bc3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac96:	2b40      	cmp	r3, #64	@ 0x40
 800ac98:	d146      	bne.n	800ad28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aca8:	e853 3f00 	ldrex	r3, [r3]
 800acac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800acb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800acb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	3308      	adds	r3, #8
 800acc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800acc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800acca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800acd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800acde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1d9      	bne.n	800ac9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acec:	2b00      	cmp	r3, #0
 800acee:	d017      	beq.n	800ad20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acf6:	4a15      	ldr	r2, [pc, #84]	@ (800ad4c <HAL_UART_IRQHandler+0x2c0>)
 800acf8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fb fc37 	bl	8006574 <HAL_DMA_Abort_IT>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d019      	beq.n	800ad40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad1e:	e00f      	b.n	800ad40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fa09 	bl	800b138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad26:	e00b      	b.n	800ad40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fa05 	bl	800b138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad2e:	e007      	b.n	800ad40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fa01 	bl	800b138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ad3e:	e1dc      	b.n	800b0fa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad40:	bf00      	nop
    return;
 800ad42:	e1da      	b.n	800b0fa <HAL_UART_IRQHandler+0x66e>
 800ad44:	10000001 	.word	0x10000001
 800ad48:	04000120 	.word	0x04000120
 800ad4c:	0800bef5 	.word	0x0800bef5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	f040 8170 	bne.w	800b03a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad5e:	f003 0310 	and.w	r3, r3, #16
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 8169 	beq.w	800b03a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad6c:	f003 0310 	and.w	r3, r3, #16
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 8162 	beq.w	800b03a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2210      	movs	r2, #16
 800ad7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad88:	2b40      	cmp	r3, #64	@ 0x40
 800ad8a:	f040 80d8 	bne.w	800af3e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 80af 	beq.w	800af04 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800adac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800adb0:	429a      	cmp	r2, r3
 800adb2:	f080 80a7 	bcs.w	800af04 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800adbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0320 	and.w	r3, r3, #32
 800adce:	2b00      	cmp	r3, #0
 800add0:	f040 8087 	bne.w	800aee2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800addc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ade8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800adec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800adfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ae0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ae0e:	e841 2300 	strex	r3, r2, [r1]
 800ae12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ae16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1da      	bne.n	800add4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae28:	e853 3f00 	ldrex	r3, [r3]
 800ae2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae30:	f023 0301 	bic.w	r3, r3, #1
 800ae34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	3308      	adds	r3, #8
 800ae3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ae42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ae46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ae4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ae4e:	e841 2300 	strex	r3, r2, [r1]
 800ae52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e1      	bne.n	800ae1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3308      	adds	r3, #8
 800ae60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae64:	e853 3f00 	ldrex	r3, [r3]
 800ae68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3308      	adds	r3, #8
 800ae7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ae7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae86:	e841 2300 	strex	r3, r2, [r1]
 800ae8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1e3      	bne.n	800ae5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2220      	movs	r2, #32
 800ae96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aeae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeb0:	f023 0310 	bic.w	r3, r3, #16
 800aeb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aec2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aec4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aec8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e4      	bne.n	800aea0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fb faf0 	bl	80064c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2202      	movs	r2, #2
 800aee6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f925 	bl	800b14c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800af02:	e0fc      	b.n	800b0fe <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af0e:	429a      	cmp	r2, r3
 800af10:	f040 80f5 	bne.w	800b0fe <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0320 	and.w	r3, r3, #32
 800af22:	2b20      	cmp	r3, #32
 800af24:	f040 80eb 	bne.w	800b0fe <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2202      	movs	r2, #2
 800af2c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f908 	bl	800b14c <HAL_UARTEx_RxEventCallback>
      return;
 800af3c:	e0df      	b.n	800b0fe <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af58:	b29b      	uxth	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f000 80d1 	beq.w	800b102 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800af60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 80cc 	beq.w	800b102 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af72:	e853 3f00 	ldrex	r3, [r3]
 800af76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800af8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af94:	e841 2300 	strex	r3, r2, [r1]
 800af98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1e4      	bne.n	800af6a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3308      	adds	r3, #8
 800afa6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afaa:	e853 3f00 	ldrex	r3, [r3]
 800afae:	623b      	str	r3, [r7, #32]
   return(result);
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afb6:	f023 0301 	bic.w	r3, r3, #1
 800afba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3308      	adds	r3, #8
 800afc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800afc8:	633a      	str	r2, [r7, #48]	@ 0x30
 800afca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afd0:	e841 2300 	strex	r3, r2, [r1]
 800afd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1e1      	bne.n	800afa0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2220      	movs	r2, #32
 800afe0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	60fb      	str	r3, [r7, #12]
   return(result);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f023 0310 	bic.w	r3, r3, #16
 800b004:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	461a      	mov	r2, r3
 800b00e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b012:	61fb      	str	r3, [r7, #28]
 800b014:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	69b9      	ldr	r1, [r7, #24]
 800b018:	69fa      	ldr	r2, [r7, #28]
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	617b      	str	r3, [r7, #20]
   return(result);
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e4      	bne.n	800aff0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2202      	movs	r2, #2
 800b02a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b02c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f88a 	bl	800b14c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b038:	e063      	b.n	800b102 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b03e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00e      	beq.n	800b064 <HAL_UART_IRQHandler+0x5d8>
 800b046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b04a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d008      	beq.n	800b064 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b05a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 ff86 	bl	800bf6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b062:	e051      	b.n	800b108 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d014      	beq.n	800b09a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d105      	bne.n	800b088 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b07c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d008      	beq.n	800b09a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d03a      	beq.n	800b106 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
    }
    return;
 800b098:	e035      	b.n	800b106 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b09e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <HAL_UART_IRQHandler+0x62e>
 800b0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 ff30 	bl	800bf18 <UART_EndTransmit_IT>
    return;
 800b0b8:	e026      	b.n	800b108 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d009      	beq.n	800b0da <HAL_UART_IRQHandler+0x64e>
 800b0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 ff5f 	bl	800bf96 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0d8:	e016      	b.n	800b108 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d010      	beq.n	800b108 <HAL_UART_IRQHandler+0x67c>
 800b0e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	da0c      	bge.n	800b108 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 ff47 	bl	800bf82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0f4:	e008      	b.n	800b108 <HAL_UART_IRQHandler+0x67c>
      return;
 800b0f6:	bf00      	nop
 800b0f8:	e006      	b.n	800b108 <HAL_UART_IRQHandler+0x67c>
    return;
 800b0fa:	bf00      	nop
 800b0fc:	e004      	b.n	800b108 <HAL_UART_IRQHandler+0x67c>
      return;
 800b0fe:	bf00      	nop
 800b100:	e002      	b.n	800b108 <HAL_UART_IRQHandler+0x67c>
      return;
 800b102:	bf00      	nop
 800b104:	e000      	b.n	800b108 <HAL_UART_IRQHandler+0x67c>
    return;
 800b106:	bf00      	nop
  }
}
 800b108:	37e8      	adds	r7, #232	@ 0xe8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop

0800b110 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b168:	b08c      	sub	sp, #48	@ 0x30
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	689a      	ldr	r2, [r3, #8]
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	431a      	orrs	r2, r3
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	431a      	orrs	r2, r3
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	69db      	ldr	r3, [r3, #28]
 800b188:	4313      	orrs	r3, r2
 800b18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	4bab      	ldr	r3, [pc, #684]	@ (800b440 <UART_SetConfig+0x2dc>)
 800b194:	4013      	ands	r3, r2
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	6812      	ldr	r2, [r2, #0]
 800b19a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b19c:	430b      	orrs	r3, r1
 800b19e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	68da      	ldr	r2, [r3, #12]
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4aa0      	ldr	r2, [pc, #640]	@ (800b444 <UART_SetConfig+0x2e0>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d004      	beq.n	800b1d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b1da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	6812      	ldr	r2, [r2, #0]
 800b1e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ee:	f023 010f 	bic.w	r1, r3, #15
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	430a      	orrs	r2, r1
 800b1fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a91      	ldr	r2, [pc, #580]	@ (800b448 <UART_SetConfig+0x2e4>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d125      	bne.n	800b254 <UART_SetConfig+0xf0>
 800b208:	4b90      	ldr	r3, [pc, #576]	@ (800b44c <UART_SetConfig+0x2e8>)
 800b20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b20e:	f003 0303 	and.w	r3, r3, #3
 800b212:	2b03      	cmp	r3, #3
 800b214:	d81a      	bhi.n	800b24c <UART_SetConfig+0xe8>
 800b216:	a201      	add	r2, pc, #4	@ (adr r2, 800b21c <UART_SetConfig+0xb8>)
 800b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21c:	0800b22d 	.word	0x0800b22d
 800b220:	0800b23d 	.word	0x0800b23d
 800b224:	0800b235 	.word	0x0800b235
 800b228:	0800b245 	.word	0x0800b245
 800b22c:	2301      	movs	r3, #1
 800b22e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b232:	e0d6      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b234:	2302      	movs	r3, #2
 800b236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b23a:	e0d2      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b23c:	2304      	movs	r3, #4
 800b23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b242:	e0ce      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b244:	2308      	movs	r3, #8
 800b246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b24a:	e0ca      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b24c:	2310      	movs	r3, #16
 800b24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b252:	e0c6      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a7d      	ldr	r2, [pc, #500]	@ (800b450 <UART_SetConfig+0x2ec>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d138      	bne.n	800b2d0 <UART_SetConfig+0x16c>
 800b25e:	4b7b      	ldr	r3, [pc, #492]	@ (800b44c <UART_SetConfig+0x2e8>)
 800b260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b264:	f003 030c 	and.w	r3, r3, #12
 800b268:	2b0c      	cmp	r3, #12
 800b26a:	d82d      	bhi.n	800b2c8 <UART_SetConfig+0x164>
 800b26c:	a201      	add	r2, pc, #4	@ (adr r2, 800b274 <UART_SetConfig+0x110>)
 800b26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b272:	bf00      	nop
 800b274:	0800b2a9 	.word	0x0800b2a9
 800b278:	0800b2c9 	.word	0x0800b2c9
 800b27c:	0800b2c9 	.word	0x0800b2c9
 800b280:	0800b2c9 	.word	0x0800b2c9
 800b284:	0800b2b9 	.word	0x0800b2b9
 800b288:	0800b2c9 	.word	0x0800b2c9
 800b28c:	0800b2c9 	.word	0x0800b2c9
 800b290:	0800b2c9 	.word	0x0800b2c9
 800b294:	0800b2b1 	.word	0x0800b2b1
 800b298:	0800b2c9 	.word	0x0800b2c9
 800b29c:	0800b2c9 	.word	0x0800b2c9
 800b2a0:	0800b2c9 	.word	0x0800b2c9
 800b2a4:	0800b2c1 	.word	0x0800b2c1
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ae:	e098      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2b6:	e094      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b2b8:	2304      	movs	r3, #4
 800b2ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2be:	e090      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2c6:	e08c      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ce:	e088      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a5f      	ldr	r2, [pc, #380]	@ (800b454 <UART_SetConfig+0x2f0>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d125      	bne.n	800b326 <UART_SetConfig+0x1c2>
 800b2da:	4b5c      	ldr	r3, [pc, #368]	@ (800b44c <UART_SetConfig+0x2e8>)
 800b2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b2e4:	2b30      	cmp	r3, #48	@ 0x30
 800b2e6:	d016      	beq.n	800b316 <UART_SetConfig+0x1b2>
 800b2e8:	2b30      	cmp	r3, #48	@ 0x30
 800b2ea:	d818      	bhi.n	800b31e <UART_SetConfig+0x1ba>
 800b2ec:	2b20      	cmp	r3, #32
 800b2ee:	d00a      	beq.n	800b306 <UART_SetConfig+0x1a2>
 800b2f0:	2b20      	cmp	r3, #32
 800b2f2:	d814      	bhi.n	800b31e <UART_SetConfig+0x1ba>
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <UART_SetConfig+0x19a>
 800b2f8:	2b10      	cmp	r3, #16
 800b2fa:	d008      	beq.n	800b30e <UART_SetConfig+0x1aa>
 800b2fc:	e00f      	b.n	800b31e <UART_SetConfig+0x1ba>
 800b2fe:	2300      	movs	r3, #0
 800b300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b304:	e06d      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b306:	2302      	movs	r3, #2
 800b308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b30c:	e069      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b30e:	2304      	movs	r3, #4
 800b310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b314:	e065      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b316:	2308      	movs	r3, #8
 800b318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b31c:	e061      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b31e:	2310      	movs	r3, #16
 800b320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b324:	e05d      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a4b      	ldr	r2, [pc, #300]	@ (800b458 <UART_SetConfig+0x2f4>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d125      	bne.n	800b37c <UART_SetConfig+0x218>
 800b330:	4b46      	ldr	r3, [pc, #280]	@ (800b44c <UART_SetConfig+0x2e8>)
 800b332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b336:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b33a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b33c:	d016      	beq.n	800b36c <UART_SetConfig+0x208>
 800b33e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b340:	d818      	bhi.n	800b374 <UART_SetConfig+0x210>
 800b342:	2b80      	cmp	r3, #128	@ 0x80
 800b344:	d00a      	beq.n	800b35c <UART_SetConfig+0x1f8>
 800b346:	2b80      	cmp	r3, #128	@ 0x80
 800b348:	d814      	bhi.n	800b374 <UART_SetConfig+0x210>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <UART_SetConfig+0x1f0>
 800b34e:	2b40      	cmp	r3, #64	@ 0x40
 800b350:	d008      	beq.n	800b364 <UART_SetConfig+0x200>
 800b352:	e00f      	b.n	800b374 <UART_SetConfig+0x210>
 800b354:	2300      	movs	r3, #0
 800b356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b35a:	e042      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b35c:	2302      	movs	r3, #2
 800b35e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b362:	e03e      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b364:	2304      	movs	r3, #4
 800b366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b36a:	e03a      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b36c:	2308      	movs	r3, #8
 800b36e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b372:	e036      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b374:	2310      	movs	r3, #16
 800b376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b37a:	e032      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a30      	ldr	r2, [pc, #192]	@ (800b444 <UART_SetConfig+0x2e0>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d12a      	bne.n	800b3dc <UART_SetConfig+0x278>
 800b386:	4b31      	ldr	r3, [pc, #196]	@ (800b44c <UART_SetConfig+0x2e8>)
 800b388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b38c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b390:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b394:	d01a      	beq.n	800b3cc <UART_SetConfig+0x268>
 800b396:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b39a:	d81b      	bhi.n	800b3d4 <UART_SetConfig+0x270>
 800b39c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3a0:	d00c      	beq.n	800b3bc <UART_SetConfig+0x258>
 800b3a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3a6:	d815      	bhi.n	800b3d4 <UART_SetConfig+0x270>
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d003      	beq.n	800b3b4 <UART_SetConfig+0x250>
 800b3ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3b0:	d008      	beq.n	800b3c4 <UART_SetConfig+0x260>
 800b3b2:	e00f      	b.n	800b3d4 <UART_SetConfig+0x270>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ba:	e012      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b3bc:	2302      	movs	r3, #2
 800b3be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3c2:	e00e      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b3c4:	2304      	movs	r3, #4
 800b3c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ca:	e00a      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b3cc:	2308      	movs	r3, #8
 800b3ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3d2:	e006      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3da:	e002      	b.n	800b3e2 <UART_SetConfig+0x27e>
 800b3dc:	2310      	movs	r3, #16
 800b3de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a17      	ldr	r2, [pc, #92]	@ (800b444 <UART_SetConfig+0x2e0>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	f040 80a8 	bne.w	800b53e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3f2:	2b08      	cmp	r3, #8
 800b3f4:	d834      	bhi.n	800b460 <UART_SetConfig+0x2fc>
 800b3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3fc <UART_SetConfig+0x298>)
 800b3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fc:	0800b421 	.word	0x0800b421
 800b400:	0800b461 	.word	0x0800b461
 800b404:	0800b429 	.word	0x0800b429
 800b408:	0800b461 	.word	0x0800b461
 800b40c:	0800b42f 	.word	0x0800b42f
 800b410:	0800b461 	.word	0x0800b461
 800b414:	0800b461 	.word	0x0800b461
 800b418:	0800b461 	.word	0x0800b461
 800b41c:	0800b437 	.word	0x0800b437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b420:	f7fc ffe0 	bl	80083e4 <HAL_RCC_GetPCLK1Freq>
 800b424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b426:	e021      	b.n	800b46c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b428:	4b0c      	ldr	r3, [pc, #48]	@ (800b45c <UART_SetConfig+0x2f8>)
 800b42a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b42c:	e01e      	b.n	800b46c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b42e:	f7fc ff6d 	bl	800830c <HAL_RCC_GetSysClockFreq>
 800b432:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b434:	e01a      	b.n	800b46c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b43a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b43c:	e016      	b.n	800b46c <UART_SetConfig+0x308>
 800b43e:	bf00      	nop
 800b440:	cfff69f3 	.word	0xcfff69f3
 800b444:	40008000 	.word	0x40008000
 800b448:	40013800 	.word	0x40013800
 800b44c:	40021000 	.word	0x40021000
 800b450:	40004400 	.word	0x40004400
 800b454:	40004800 	.word	0x40004800
 800b458:	40004c00 	.word	0x40004c00
 800b45c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b46a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 812a 	beq.w	800b6c8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b478:	4a9e      	ldr	r2, [pc, #632]	@ (800b6f4 <UART_SetConfig+0x590>)
 800b47a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b47e:	461a      	mov	r2, r3
 800b480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b482:	fbb3 f3f2 	udiv	r3, r3, r2
 800b486:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	4613      	mov	r3, r2
 800b48e:	005b      	lsls	r3, r3, #1
 800b490:	4413      	add	r3, r2
 800b492:	69ba      	ldr	r2, [r7, #24]
 800b494:	429a      	cmp	r2, r3
 800b496:	d305      	bcc.n	800b4a4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b49e:	69ba      	ldr	r2, [r7, #24]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d903      	bls.n	800b4ac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b4aa:	e10d      	b.n	800b6c8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	60bb      	str	r3, [r7, #8]
 800b4b2:	60fa      	str	r2, [r7, #12]
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b8:	4a8e      	ldr	r2, [pc, #568]	@ (800b6f4 <UART_SetConfig+0x590>)
 800b4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	607a      	str	r2, [r7, #4]
 800b4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b4ce:	f7f5 fc03 	bl	8000cd8 <__aeabi_uldivmod>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	4619      	mov	r1, r3
 800b4da:	f04f 0200 	mov.w	r2, #0
 800b4de:	f04f 0300 	mov.w	r3, #0
 800b4e2:	020b      	lsls	r3, r1, #8
 800b4e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b4e8:	0202      	lsls	r2, r0, #8
 800b4ea:	6979      	ldr	r1, [r7, #20]
 800b4ec:	6849      	ldr	r1, [r1, #4]
 800b4ee:	0849      	lsrs	r1, r1, #1
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	eb12 0804 	adds.w	r8, r2, r4
 800b4fa:	eb43 0905 	adc.w	r9, r3, r5
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	469a      	mov	sl, r3
 800b506:	4693      	mov	fp, r2
 800b508:	4652      	mov	r2, sl
 800b50a:	465b      	mov	r3, fp
 800b50c:	4640      	mov	r0, r8
 800b50e:	4649      	mov	r1, r9
 800b510:	f7f5 fbe2 	bl	8000cd8 <__aeabi_uldivmod>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4613      	mov	r3, r2
 800b51a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b522:	d308      	bcc.n	800b536 <UART_SetConfig+0x3d2>
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b52a:	d204      	bcs.n	800b536 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6a3a      	ldr	r2, [r7, #32]
 800b532:	60da      	str	r2, [r3, #12]
 800b534:	e0c8      	b.n	800b6c8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b53c:	e0c4      	b.n	800b6c8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b546:	d167      	bne.n	800b618 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b548:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b54c:	2b08      	cmp	r3, #8
 800b54e:	d828      	bhi.n	800b5a2 <UART_SetConfig+0x43e>
 800b550:	a201      	add	r2, pc, #4	@ (adr r2, 800b558 <UART_SetConfig+0x3f4>)
 800b552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b556:	bf00      	nop
 800b558:	0800b57d 	.word	0x0800b57d
 800b55c:	0800b585 	.word	0x0800b585
 800b560:	0800b58d 	.word	0x0800b58d
 800b564:	0800b5a3 	.word	0x0800b5a3
 800b568:	0800b593 	.word	0x0800b593
 800b56c:	0800b5a3 	.word	0x0800b5a3
 800b570:	0800b5a3 	.word	0x0800b5a3
 800b574:	0800b5a3 	.word	0x0800b5a3
 800b578:	0800b59b 	.word	0x0800b59b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b57c:	f7fc ff32 	bl	80083e4 <HAL_RCC_GetPCLK1Freq>
 800b580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b582:	e014      	b.n	800b5ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b584:	f7fc ff44 	bl	8008410 <HAL_RCC_GetPCLK2Freq>
 800b588:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b58a:	e010      	b.n	800b5ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b58c:	4b5a      	ldr	r3, [pc, #360]	@ (800b6f8 <UART_SetConfig+0x594>)
 800b58e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b590:	e00d      	b.n	800b5ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b592:	f7fc febb 	bl	800830c <HAL_RCC_GetSysClockFreq>
 800b596:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b598:	e009      	b.n	800b5ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b59a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b59e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5a0:	e005      	b.n	800b5ae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b5ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 8089 	beq.w	800b6c8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ba:	4a4e      	ldr	r2, [pc, #312]	@ (800b6f4 <UART_SetConfig+0x590>)
 800b5bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5c8:	005a      	lsls	r2, r3, #1
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	085b      	lsrs	r3, r3, #1
 800b5d0:	441a      	add	r2, r3
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	2b0f      	cmp	r3, #15
 800b5e0:	d916      	bls.n	800b610 <UART_SetConfig+0x4ac>
 800b5e2:	6a3b      	ldr	r3, [r7, #32]
 800b5e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5e8:	d212      	bcs.n	800b610 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	f023 030f 	bic.w	r3, r3, #15
 800b5f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
 800b5f6:	085b      	lsrs	r3, r3, #1
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	f003 0307 	and.w	r3, r3, #7
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	8bfb      	ldrh	r3, [r7, #30]
 800b602:	4313      	orrs	r3, r2
 800b604:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	8bfa      	ldrh	r2, [r7, #30]
 800b60c:	60da      	str	r2, [r3, #12]
 800b60e:	e05b      	b.n	800b6c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b616:	e057      	b.n	800b6c8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b618:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b61c:	2b08      	cmp	r3, #8
 800b61e:	d828      	bhi.n	800b672 <UART_SetConfig+0x50e>
 800b620:	a201      	add	r2, pc, #4	@ (adr r2, 800b628 <UART_SetConfig+0x4c4>)
 800b622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b626:	bf00      	nop
 800b628:	0800b64d 	.word	0x0800b64d
 800b62c:	0800b655 	.word	0x0800b655
 800b630:	0800b65d 	.word	0x0800b65d
 800b634:	0800b673 	.word	0x0800b673
 800b638:	0800b663 	.word	0x0800b663
 800b63c:	0800b673 	.word	0x0800b673
 800b640:	0800b673 	.word	0x0800b673
 800b644:	0800b673 	.word	0x0800b673
 800b648:	0800b66b 	.word	0x0800b66b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b64c:	f7fc feca 	bl	80083e4 <HAL_RCC_GetPCLK1Freq>
 800b650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b652:	e014      	b.n	800b67e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b654:	f7fc fedc 	bl	8008410 <HAL_RCC_GetPCLK2Freq>
 800b658:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b65a:	e010      	b.n	800b67e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b65c:	4b26      	ldr	r3, [pc, #152]	@ (800b6f8 <UART_SetConfig+0x594>)
 800b65e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b660:	e00d      	b.n	800b67e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b662:	f7fc fe53 	bl	800830c <HAL_RCC_GetSysClockFreq>
 800b666:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b668:	e009      	b.n	800b67e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b66a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b66e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b670:	e005      	b.n	800b67e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b67c:	bf00      	nop
    }

    if (pclk != 0U)
 800b67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b680:	2b00      	cmp	r3, #0
 800b682:	d021      	beq.n	800b6c8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b688:	4a1a      	ldr	r2, [pc, #104]	@ (800b6f4 <UART_SetConfig+0x590>)
 800b68a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b68e:	461a      	mov	r2, r3
 800b690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b692:	fbb3 f2f2 	udiv	r2, r3, r2
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	085b      	lsrs	r3, r3, #1
 800b69c:	441a      	add	r2, r3
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	2b0f      	cmp	r3, #15
 800b6ac:	d909      	bls.n	800b6c2 <UART_SetConfig+0x55e>
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6b4:	d205      	bcs.n	800b6c2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	60da      	str	r2, [r3, #12]
 800b6c0:	e002      	b.n	800b6c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b6e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3730      	adds	r7, #48	@ 0x30
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6f2:	bf00      	nop
 800b6f4:	08010ca8 	.word	0x08010ca8
 800b6f8:	00f42400 	.word	0x00f42400

0800b6fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b708:	f003 0308 	and.w	r3, r3, #8
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00a      	beq.n	800b726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	430a      	orrs	r2, r1
 800b724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00a      	beq.n	800b748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	430a      	orrs	r2, r1
 800b746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74c:	f003 0302 	and.w	r3, r3, #2
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00a      	beq.n	800b76a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	430a      	orrs	r2, r1
 800b768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76e:	f003 0304 	and.w	r3, r3, #4
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00a      	beq.n	800b78c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	430a      	orrs	r2, r1
 800b78a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b790:	f003 0310 	and.w	r3, r3, #16
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00a      	beq.n	800b7ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	430a      	orrs	r2, r1
 800b7ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7b2:	f003 0320 	and.w	r3, r3, #32
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d01a      	beq.n	800b812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	430a      	orrs	r2, r1
 800b7f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7fa:	d10a      	bne.n	800b812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	430a      	orrs	r2, r1
 800b810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	430a      	orrs	r2, r1
 800b832:	605a      	str	r2, [r3, #4]
  }
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b098      	sub	sp, #96	@ 0x60
 800b844:	af02      	add	r7, sp, #8
 800b846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b850:	f7f8 ff20 	bl	8004694 <HAL_GetTick>
 800b854:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0308 	and.w	r3, r3, #8
 800b860:	2b08      	cmp	r3, #8
 800b862:	d12f      	bne.n	800b8c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b864:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b86c:	2200      	movs	r2, #0
 800b86e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f88e 	bl	800b994 <UART_WaitOnFlagUntilTimeout>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d022      	beq.n	800b8c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b886:	e853 3f00 	ldrex	r3, [r3]
 800b88a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b88e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b892:	653b      	str	r3, [r7, #80]	@ 0x50
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	461a      	mov	r2, r3
 800b89a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b89c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b89e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8a4:	e841 2300 	strex	r3, r2, [r1]
 800b8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1e6      	bne.n	800b87e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2220      	movs	r2, #32
 800b8b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e063      	b.n	800b98c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f003 0304 	and.w	r3, r3, #4
 800b8ce:	2b04      	cmp	r3, #4
 800b8d0:	d149      	bne.n	800b966 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f857 	bl	800b994 <UART_WaitOnFlagUntilTimeout>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d03c      	beq.n	800b966 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	623b      	str	r3, [r7, #32]
   return(result);
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b900:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b90a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b90c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b912:	e841 2300 	strex	r3, r2, [r1]
 800b916:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e6      	bne.n	800b8ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3308      	adds	r3, #8
 800b924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	e853 3f00 	ldrex	r3, [r3]
 800b92c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f023 0301 	bic.w	r3, r3, #1
 800b934:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3308      	adds	r3, #8
 800b93c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b93e:	61fa      	str	r2, [r7, #28]
 800b940:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	69b9      	ldr	r1, [r7, #24]
 800b944:	69fa      	ldr	r2, [r7, #28]
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	617b      	str	r3, [r7, #20]
   return(result);
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e5      	bne.n	800b91e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e012      	b.n	800b98c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2220      	movs	r2, #32
 800b96a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2220      	movs	r2, #32
 800b972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3758      	adds	r7, #88	@ 0x58
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	603b      	str	r3, [r7, #0]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9a4:	e04f      	b.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ac:	d04b      	beq.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9ae:	f7f8 fe71 	bl	8004694 <HAL_GetTick>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	69ba      	ldr	r2, [r7, #24]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d302      	bcc.n	800b9c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e04e      	b.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 0304 	and.w	r3, r3, #4
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d037      	beq.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b80      	cmp	r3, #128	@ 0x80
 800b9da:	d034      	beq.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b40      	cmp	r3, #64	@ 0x40
 800b9e0:	d031      	beq.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	f003 0308 	and.w	r3, r3, #8
 800b9ec:	2b08      	cmp	r3, #8
 800b9ee:	d110      	bne.n	800ba12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2208      	movs	r2, #8
 800b9f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 f920 	bl	800bc3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2208      	movs	r2, #8
 800ba02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e029      	b.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba20:	d111      	bne.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f000 f906 	bl	800bc3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2220      	movs	r2, #32
 800ba36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ba42:	2303      	movs	r3, #3
 800ba44:	e00f      	b.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	69da      	ldr	r2, [r3, #28]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	4013      	ands	r3, r2
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	bf0c      	ite	eq
 800ba56:	2301      	moveq	r3, #1
 800ba58:	2300      	movne	r3, #0
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d0a0      	beq.n	800b9a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b096      	sub	sp, #88	@ 0x58
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	88fa      	ldrh	r2, [r7, #6]
 800ba88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2222      	movs	r2, #34	@ 0x22
 800ba98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d02d      	beq.n	800bb02 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baac:	4a40      	ldr	r2, [pc, #256]	@ (800bbb0 <UART_Start_Receive_DMA+0x140>)
 800baae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bab6:	4a3f      	ldr	r2, [pc, #252]	@ (800bbb4 <UART_Start_Receive_DMA+0x144>)
 800bab8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bac0:	4a3d      	ldr	r2, [pc, #244]	@ (800bbb8 <UART_Start_Receive_DMA+0x148>)
 800bac2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baca:	2200      	movs	r2, #0
 800bacc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3324      	adds	r3, #36	@ 0x24
 800bada:	4619      	mov	r1, r3
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bae0:	461a      	mov	r2, r3
 800bae2:	88fb      	ldrh	r3, [r7, #6]
 800bae4:	f7fa fc72 	bl	80063cc <HAL_DMA_Start_IT>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d009      	beq.n	800bb02 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2210      	movs	r2, #16
 800baf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2220      	movs	r2, #32
 800bafa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e051      	b.n	800bba6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d018      	beq.n	800bb3c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb12:	e853 3f00 	ldrex	r3, [r3]
 800bb16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb1e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	461a      	mov	r2, r3
 800bb26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb2a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bb2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb30:	e841 2300 	strex	r3, r2, [r1]
 800bb34:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bb36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e6      	bne.n	800bb0a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3308      	adds	r3, #8
 800bb42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb46:	e853 3f00 	ldrex	r3, [r3]
 800bb4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4e:	f043 0301 	orr.w	r3, r3, #1
 800bb52:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3308      	adds	r3, #8
 800bb5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb5c:	637a      	str	r2, [r7, #52]	@ 0x34
 800bb5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb64:	e841 2300 	strex	r3, r2, [r1]
 800bb68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1e5      	bne.n	800bb3c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3308      	adds	r3, #8
 800bb76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	e853 3f00 	ldrex	r3, [r3]
 800bb7e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3308      	adds	r3, #8
 800bb8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb90:	623a      	str	r2, [r7, #32]
 800bb92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb94:	69f9      	ldr	r1, [r7, #28]
 800bb96:	6a3a      	ldr	r2, [r7, #32]
 800bb98:	e841 2300 	strex	r3, r2, [r1]
 800bb9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1e5      	bne.n	800bb70 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3758      	adds	r7, #88	@ 0x58
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	0800bd0b 	.word	0x0800bd0b
 800bbb4:	0800be37 	.word	0x0800be37
 800bbb8:	0800be75 	.word	0x0800be75

0800bbbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b08f      	sub	sp, #60	@ 0x3c
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	e853 3f00 	ldrex	r3, [r3]
 800bbd0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bbd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbe4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbea:	e841 2300 	strex	r3, r2, [r1]
 800bbee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1e6      	bne.n	800bbc4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	e853 3f00 	ldrex	r3, [r3]
 800bc04:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bc0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3308      	adds	r3, #8
 800bc14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc16:	61ba      	str	r2, [r7, #24]
 800bc18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	6979      	ldr	r1, [r7, #20]
 800bc1c:	69ba      	ldr	r2, [r7, #24]
 800bc1e:	e841 2300 	strex	r3, r2, [r1]
 800bc22:	613b      	str	r3, [r7, #16]
   return(result);
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1e5      	bne.n	800bbf6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bc32:	bf00      	nop
 800bc34:	373c      	adds	r7, #60	@ 0x3c
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b095      	sub	sp, #84	@ 0x54
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc4e:	e853 3f00 	ldrex	r3, [r3]
 800bc52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	461a      	mov	r2, r3
 800bc62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc64:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc6c:	e841 2300 	strex	r3, r2, [r1]
 800bc70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1e6      	bne.n	800bc46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3308      	adds	r3, #8
 800bc7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	e853 3f00 	ldrex	r3, [r3]
 800bc86:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc8e:	f023 0301 	bic.w	r3, r3, #1
 800bc92:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3308      	adds	r3, #8
 800bc9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bca4:	e841 2300 	strex	r3, r2, [r1]
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1e3      	bne.n	800bc78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d118      	bne.n	800bcea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	e853 3f00 	ldrex	r3, [r3]
 800bcc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	f023 0310 	bic.w	r3, r3, #16
 800bccc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd6:	61bb      	str	r3, [r7, #24]
 800bcd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcda:	6979      	ldr	r1, [r7, #20]
 800bcdc:	69ba      	ldr	r2, [r7, #24]
 800bcde:	e841 2300 	strex	r3, r2, [r1]
 800bce2:	613b      	str	r3, [r7, #16]
   return(result);
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e6      	bne.n	800bcb8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bcfe:	bf00      	nop
 800bd00:	3754      	adds	r7, #84	@ 0x54
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b09c      	sub	sp, #112	@ 0x70
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd16:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 0320 	and.w	r3, r3, #32
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d171      	bne.n	800be0a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bd26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd36:	e853 3f00 	ldrex	r3, [r3]
 800bd3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd42:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	461a      	mov	r2, r3
 800bd4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd4e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd54:	e841 2300 	strex	r3, r2, [r1]
 800bd58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1e6      	bne.n	800bd2e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3308      	adds	r3, #8
 800bd66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6a:	e853 3f00 	ldrex	r3, [r3]
 800bd6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd72:	f023 0301 	bic.w	r3, r3, #1
 800bd76:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bd80:	647a      	str	r2, [r7, #68]	@ 0x44
 800bd82:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd88:	e841 2300 	strex	r3, r2, [r1]
 800bd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e5      	bne.n	800bd60 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3308      	adds	r3, #8
 800bd9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	e853 3f00 	ldrex	r3, [r3]
 800bda2:	623b      	str	r3, [r7, #32]
   return(result);
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdaa:	663b      	str	r3, [r7, #96]	@ 0x60
 800bdac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bdb4:	633a      	str	r2, [r7, #48]	@ 0x30
 800bdb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdbc:	e841 2300 	strex	r3, r2, [r1]
 800bdc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1e5      	bne.n	800bd94 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bdc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdca:	2220      	movs	r2, #32
 800bdcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d118      	bne.n	800be0a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f023 0310 	bic.w	r3, r3, #16
 800bdec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bdee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdf6:	61fb      	str	r3, [r7, #28]
 800bdf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	69b9      	ldr	r1, [r7, #24]
 800bdfc:	69fa      	ldr	r2, [r7, #28]
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	617b      	str	r3, [r7, #20]
   return(result);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e6      	bne.n	800bdd8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be0c:	2200      	movs	r2, #0
 800be0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be14:	2b01      	cmp	r3, #1
 800be16:	d107      	bne.n	800be28 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be1e:	4619      	mov	r1, r3
 800be20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800be22:	f7ff f993 	bl	800b14c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be26:	e002      	b.n	800be2e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800be28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800be2a:	f7f8 fb0f 	bl	800444c <HAL_UART_RxCpltCallback>
}
 800be2e:	bf00      	nop
 800be30:	3770      	adds	r7, #112	@ 0x70
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be42:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2201      	movs	r2, #1
 800be48:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d109      	bne.n	800be66 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be58:	085b      	lsrs	r3, r3, #1
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	4619      	mov	r1, r3
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f7ff f974 	bl	800b14c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be64:	e002      	b.n	800be6c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff f95c 	bl	800b124 <HAL_UART_RxHalfCpltCallback>
}
 800be6c:	bf00      	nop
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be80:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be90:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be9c:	2b80      	cmp	r3, #128	@ 0x80
 800be9e:	d109      	bne.n	800beb4 <UART_DMAError+0x40>
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2b21      	cmp	r3, #33	@ 0x21
 800bea4:	d106      	bne.n	800beb4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800beae:	6978      	ldr	r0, [r7, #20]
 800beb0:	f7ff fe84 	bl	800bbbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bebe:	2b40      	cmp	r3, #64	@ 0x40
 800bec0:	d109      	bne.n	800bed6 <UART_DMAError+0x62>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b22      	cmp	r3, #34	@ 0x22
 800bec6:	d106      	bne.n	800bed6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	2200      	movs	r2, #0
 800becc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bed0:	6978      	ldr	r0, [r7, #20]
 800bed2:	f7ff feb4 	bl	800bc3e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bedc:	f043 0210 	orr.w	r2, r3, #16
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bee6:	6978      	ldr	r0, [r7, #20]
 800bee8:	f7ff f926 	bl	800b138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beec:	bf00      	nop
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f7ff f914 	bl	800b138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf10:	bf00      	nop
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b088      	sub	sp, #32
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	e853 3f00 	ldrex	r3, [r3]
 800bf2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf34:	61fb      	str	r3, [r7, #28]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	61bb      	str	r3, [r7, #24]
 800bf40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf42:	6979      	ldr	r1, [r7, #20]
 800bf44:	69ba      	ldr	r2, [r7, #24]
 800bf46:	e841 2300 	strex	r3, r2, [r1]
 800bf4a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e6      	bne.n	800bf20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2220      	movs	r2, #32
 800bf56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff f8d5 	bl	800b110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf66:	bf00      	nop
 800bf68:	3720      	adds	r7, #32
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b083      	sub	sp, #12
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf76:	bf00      	nop
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b083      	sub	sp, #12
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bf8a:	bf00      	nop
 800bf8c:	370c      	adds	r7, #12
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b083      	sub	sp, #12
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bf9e:	bf00      	nop
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b085      	sub	sp, #20
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d101      	bne.n	800bfc0 <HAL_UARTEx_DisableFifoMode+0x16>
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	e027      	b.n	800c010 <HAL_UARTEx_DisableFifoMode+0x66>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2224      	movs	r2, #36	@ 0x24
 800bfcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f022 0201 	bic.w	r2, r2, #1
 800bfe6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bfee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2220      	movs	r2, #32
 800c002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d101      	bne.n	800c034 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c030:	2302      	movs	r3, #2
 800c032:	e02d      	b.n	800c090 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2224      	movs	r2, #36	@ 0x24
 800c040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f022 0201 	bic.w	r2, r2, #1
 800c05a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 f84f 	bl	800c114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2220      	movs	r2, #32
 800c082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d101      	bne.n	800c0b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0ac:	2302      	movs	r3, #2
 800c0ae:	e02d      	b.n	800c10c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2224      	movs	r2, #36	@ 0x24
 800c0bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 0201 	bic.w	r2, r2, #1
 800c0d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f811 	bl	800c114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c120:	2b00      	cmp	r3, #0
 800c122:	d108      	bne.n	800c136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c134:	e031      	b.n	800c19a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c136:	2308      	movs	r3, #8
 800c138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c13a:	2308      	movs	r3, #8
 800c13c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	0e5b      	lsrs	r3, r3, #25
 800c146:	b2db      	uxtb	r3, r3
 800c148:	f003 0307 	and.w	r3, r3, #7
 800c14c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	0f5b      	lsrs	r3, r3, #29
 800c156:	b2db      	uxtb	r3, r3
 800c158:	f003 0307 	and.w	r3, r3, #7
 800c15c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	7b3a      	ldrb	r2, [r7, #12]
 800c162:	4911      	ldr	r1, [pc, #68]	@ (800c1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c164:	5c8a      	ldrb	r2, [r1, r2]
 800c166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c16a:	7b3a      	ldrb	r2, [r7, #12]
 800c16c:	490f      	ldr	r1, [pc, #60]	@ (800c1ac <UARTEx_SetNbDataToProcess+0x98>)
 800c16e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c170:	fb93 f3f2 	sdiv	r3, r3, r2
 800c174:	b29a      	uxth	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	7b7a      	ldrb	r2, [r7, #13]
 800c180:	4909      	ldr	r1, [pc, #36]	@ (800c1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c182:	5c8a      	ldrb	r2, [r1, r2]
 800c184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c188:	7b7a      	ldrb	r2, [r7, #13]
 800c18a:	4908      	ldr	r1, [pc, #32]	@ (800c1ac <UARTEx_SetNbDataToProcess+0x98>)
 800c18c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c18e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c192:	b29a      	uxth	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c19a:	bf00      	nop
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	08010cc0 	.word	0x08010cc0
 800c1ac:	08010cc8 	.word	0x08010cc8

0800c1b0 <malloc>:
 800c1b0:	4b02      	ldr	r3, [pc, #8]	@ (800c1bc <malloc+0xc>)
 800c1b2:	4601      	mov	r1, r0
 800c1b4:	6818      	ldr	r0, [r3, #0]
 800c1b6:	f000 b82d 	b.w	800c214 <_malloc_r>
 800c1ba:	bf00      	nop
 800c1bc:	20000194 	.word	0x20000194

0800c1c0 <free>:
 800c1c0:	4b02      	ldr	r3, [pc, #8]	@ (800c1cc <free+0xc>)
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	6818      	ldr	r0, [r3, #0]
 800c1c6:	f001 bb1b 	b.w	800d800 <_free_r>
 800c1ca:	bf00      	nop
 800c1cc:	20000194 	.word	0x20000194

0800c1d0 <sbrk_aligned>:
 800c1d0:	b570      	push	{r4, r5, r6, lr}
 800c1d2:	4e0f      	ldr	r6, [pc, #60]	@ (800c210 <sbrk_aligned+0x40>)
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	6831      	ldr	r1, [r6, #0]
 800c1d8:	4605      	mov	r5, r0
 800c1da:	b911      	cbnz	r1, 800c1e2 <sbrk_aligned+0x12>
 800c1dc:	f001 fa7e 	bl	800d6dc <_sbrk_r>
 800c1e0:	6030      	str	r0, [r6, #0]
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	f001 fa79 	bl	800d6dc <_sbrk_r>
 800c1ea:	1c43      	adds	r3, r0, #1
 800c1ec:	d103      	bne.n	800c1f6 <sbrk_aligned+0x26>
 800c1ee:	f04f 34ff 	mov.w	r4, #4294967295
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	bd70      	pop	{r4, r5, r6, pc}
 800c1f6:	1cc4      	adds	r4, r0, #3
 800c1f8:	f024 0403 	bic.w	r4, r4, #3
 800c1fc:	42a0      	cmp	r0, r4
 800c1fe:	d0f8      	beq.n	800c1f2 <sbrk_aligned+0x22>
 800c200:	1a21      	subs	r1, r4, r0
 800c202:	4628      	mov	r0, r5
 800c204:	f001 fa6a 	bl	800d6dc <_sbrk_r>
 800c208:	3001      	adds	r0, #1
 800c20a:	d1f2      	bne.n	800c1f2 <sbrk_aligned+0x22>
 800c20c:	e7ef      	b.n	800c1ee <sbrk_aligned+0x1e>
 800c20e:	bf00      	nop
 800c210:	20001184 	.word	0x20001184

0800c214 <_malloc_r>:
 800c214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c218:	1ccd      	adds	r5, r1, #3
 800c21a:	f025 0503 	bic.w	r5, r5, #3
 800c21e:	3508      	adds	r5, #8
 800c220:	2d0c      	cmp	r5, #12
 800c222:	bf38      	it	cc
 800c224:	250c      	movcc	r5, #12
 800c226:	2d00      	cmp	r5, #0
 800c228:	4606      	mov	r6, r0
 800c22a:	db01      	blt.n	800c230 <_malloc_r+0x1c>
 800c22c:	42a9      	cmp	r1, r5
 800c22e:	d904      	bls.n	800c23a <_malloc_r+0x26>
 800c230:	230c      	movs	r3, #12
 800c232:	6033      	str	r3, [r6, #0]
 800c234:	2000      	movs	r0, #0
 800c236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c23a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c310 <_malloc_r+0xfc>
 800c23e:	f000 f869 	bl	800c314 <__malloc_lock>
 800c242:	f8d8 3000 	ldr.w	r3, [r8]
 800c246:	461c      	mov	r4, r3
 800c248:	bb44      	cbnz	r4, 800c29c <_malloc_r+0x88>
 800c24a:	4629      	mov	r1, r5
 800c24c:	4630      	mov	r0, r6
 800c24e:	f7ff ffbf 	bl	800c1d0 <sbrk_aligned>
 800c252:	1c43      	adds	r3, r0, #1
 800c254:	4604      	mov	r4, r0
 800c256:	d158      	bne.n	800c30a <_malloc_r+0xf6>
 800c258:	f8d8 4000 	ldr.w	r4, [r8]
 800c25c:	4627      	mov	r7, r4
 800c25e:	2f00      	cmp	r7, #0
 800c260:	d143      	bne.n	800c2ea <_malloc_r+0xd6>
 800c262:	2c00      	cmp	r4, #0
 800c264:	d04b      	beq.n	800c2fe <_malloc_r+0xea>
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	4639      	mov	r1, r7
 800c26a:	4630      	mov	r0, r6
 800c26c:	eb04 0903 	add.w	r9, r4, r3
 800c270:	f001 fa34 	bl	800d6dc <_sbrk_r>
 800c274:	4581      	cmp	r9, r0
 800c276:	d142      	bne.n	800c2fe <_malloc_r+0xea>
 800c278:	6821      	ldr	r1, [r4, #0]
 800c27a:	1a6d      	subs	r5, r5, r1
 800c27c:	4629      	mov	r1, r5
 800c27e:	4630      	mov	r0, r6
 800c280:	f7ff ffa6 	bl	800c1d0 <sbrk_aligned>
 800c284:	3001      	adds	r0, #1
 800c286:	d03a      	beq.n	800c2fe <_malloc_r+0xea>
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	442b      	add	r3, r5
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	f8d8 3000 	ldr.w	r3, [r8]
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	bb62      	cbnz	r2, 800c2f0 <_malloc_r+0xdc>
 800c296:	f8c8 7000 	str.w	r7, [r8]
 800c29a:	e00f      	b.n	800c2bc <_malloc_r+0xa8>
 800c29c:	6822      	ldr	r2, [r4, #0]
 800c29e:	1b52      	subs	r2, r2, r5
 800c2a0:	d420      	bmi.n	800c2e4 <_malloc_r+0xd0>
 800c2a2:	2a0b      	cmp	r2, #11
 800c2a4:	d917      	bls.n	800c2d6 <_malloc_r+0xc2>
 800c2a6:	1961      	adds	r1, r4, r5
 800c2a8:	42a3      	cmp	r3, r4
 800c2aa:	6025      	str	r5, [r4, #0]
 800c2ac:	bf18      	it	ne
 800c2ae:	6059      	strne	r1, [r3, #4]
 800c2b0:	6863      	ldr	r3, [r4, #4]
 800c2b2:	bf08      	it	eq
 800c2b4:	f8c8 1000 	streq.w	r1, [r8]
 800c2b8:	5162      	str	r2, [r4, r5]
 800c2ba:	604b      	str	r3, [r1, #4]
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f000 f82f 	bl	800c320 <__malloc_unlock>
 800c2c2:	f104 000b 	add.w	r0, r4, #11
 800c2c6:	1d23      	adds	r3, r4, #4
 800c2c8:	f020 0007 	bic.w	r0, r0, #7
 800c2cc:	1ac2      	subs	r2, r0, r3
 800c2ce:	bf1c      	itt	ne
 800c2d0:	1a1b      	subne	r3, r3, r0
 800c2d2:	50a3      	strne	r3, [r4, r2]
 800c2d4:	e7af      	b.n	800c236 <_malloc_r+0x22>
 800c2d6:	6862      	ldr	r2, [r4, #4]
 800c2d8:	42a3      	cmp	r3, r4
 800c2da:	bf0c      	ite	eq
 800c2dc:	f8c8 2000 	streq.w	r2, [r8]
 800c2e0:	605a      	strne	r2, [r3, #4]
 800c2e2:	e7eb      	b.n	800c2bc <_malloc_r+0xa8>
 800c2e4:	4623      	mov	r3, r4
 800c2e6:	6864      	ldr	r4, [r4, #4]
 800c2e8:	e7ae      	b.n	800c248 <_malloc_r+0x34>
 800c2ea:	463c      	mov	r4, r7
 800c2ec:	687f      	ldr	r7, [r7, #4]
 800c2ee:	e7b6      	b.n	800c25e <_malloc_r+0x4a>
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	d1fb      	bne.n	800c2f0 <_malloc_r+0xdc>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	6053      	str	r3, [r2, #4]
 800c2fc:	e7de      	b.n	800c2bc <_malloc_r+0xa8>
 800c2fe:	230c      	movs	r3, #12
 800c300:	6033      	str	r3, [r6, #0]
 800c302:	4630      	mov	r0, r6
 800c304:	f000 f80c 	bl	800c320 <__malloc_unlock>
 800c308:	e794      	b.n	800c234 <_malloc_r+0x20>
 800c30a:	6005      	str	r5, [r0, #0]
 800c30c:	e7d6      	b.n	800c2bc <_malloc_r+0xa8>
 800c30e:	bf00      	nop
 800c310:	20001188 	.word	0x20001188

0800c314 <__malloc_lock>:
 800c314:	4801      	ldr	r0, [pc, #4]	@ (800c31c <__malloc_lock+0x8>)
 800c316:	f001 ba2e 	b.w	800d776 <__retarget_lock_acquire_recursive>
 800c31a:	bf00      	nop
 800c31c:	200012cc 	.word	0x200012cc

0800c320 <__malloc_unlock>:
 800c320:	4801      	ldr	r0, [pc, #4]	@ (800c328 <__malloc_unlock+0x8>)
 800c322:	f001 ba29 	b.w	800d778 <__retarget_lock_release_recursive>
 800c326:	bf00      	nop
 800c328:	200012cc 	.word	0x200012cc

0800c32c <sulp>:
 800c32c:	b570      	push	{r4, r5, r6, lr}
 800c32e:	4604      	mov	r4, r0
 800c330:	460d      	mov	r5, r1
 800c332:	ec45 4b10 	vmov	d0, r4, r5
 800c336:	4616      	mov	r6, r2
 800c338:	f002 f964 	bl	800e604 <__ulp>
 800c33c:	ec51 0b10 	vmov	r0, r1, d0
 800c340:	b17e      	cbz	r6, 800c362 <sulp+0x36>
 800c342:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c346:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	dd09      	ble.n	800c362 <sulp+0x36>
 800c34e:	051b      	lsls	r3, r3, #20
 800c350:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c354:	2400      	movs	r4, #0
 800c356:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c35a:	4622      	mov	r2, r4
 800c35c:	462b      	mov	r3, r5
 800c35e:	f7f4 f973 	bl	8000648 <__aeabi_dmul>
 800c362:	ec41 0b10 	vmov	d0, r0, r1
 800c366:	bd70      	pop	{r4, r5, r6, pc}

0800c368 <_strtod_l>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	b09f      	sub	sp, #124	@ 0x7c
 800c36e:	460c      	mov	r4, r1
 800c370:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c372:	2200      	movs	r2, #0
 800c374:	921a      	str	r2, [sp, #104]	@ 0x68
 800c376:	9005      	str	r0, [sp, #20]
 800c378:	f04f 0a00 	mov.w	sl, #0
 800c37c:	f04f 0b00 	mov.w	fp, #0
 800c380:	460a      	mov	r2, r1
 800c382:	9219      	str	r2, [sp, #100]	@ 0x64
 800c384:	7811      	ldrb	r1, [r2, #0]
 800c386:	292b      	cmp	r1, #43	@ 0x2b
 800c388:	d04a      	beq.n	800c420 <_strtod_l+0xb8>
 800c38a:	d838      	bhi.n	800c3fe <_strtod_l+0x96>
 800c38c:	290d      	cmp	r1, #13
 800c38e:	d832      	bhi.n	800c3f6 <_strtod_l+0x8e>
 800c390:	2908      	cmp	r1, #8
 800c392:	d832      	bhi.n	800c3fa <_strtod_l+0x92>
 800c394:	2900      	cmp	r1, #0
 800c396:	d03b      	beq.n	800c410 <_strtod_l+0xa8>
 800c398:	2200      	movs	r2, #0
 800c39a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c39c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c39e:	782a      	ldrb	r2, [r5, #0]
 800c3a0:	2a30      	cmp	r2, #48	@ 0x30
 800c3a2:	f040 80b2 	bne.w	800c50a <_strtod_l+0x1a2>
 800c3a6:	786a      	ldrb	r2, [r5, #1]
 800c3a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c3ac:	2a58      	cmp	r2, #88	@ 0x58
 800c3ae:	d16e      	bne.n	800c48e <_strtod_l+0x126>
 800c3b0:	9302      	str	r3, [sp, #8]
 800c3b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	4a8f      	ldr	r2, [pc, #572]	@ (800c5f8 <_strtod_l+0x290>)
 800c3bc:	9805      	ldr	r0, [sp, #20]
 800c3be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c3c0:	a919      	add	r1, sp, #100	@ 0x64
 800c3c2:	f001 facf 	bl	800d964 <__gethex>
 800c3c6:	f010 060f 	ands.w	r6, r0, #15
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	d005      	beq.n	800c3da <_strtod_l+0x72>
 800c3ce:	2e06      	cmp	r6, #6
 800c3d0:	d128      	bne.n	800c424 <_strtod_l+0xbc>
 800c3d2:	3501      	adds	r5, #1
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c3d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c3da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f040 858e 	bne.w	800cefe <_strtod_l+0xb96>
 800c3e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3e4:	b1cb      	cbz	r3, 800c41a <_strtod_l+0xb2>
 800c3e6:	4652      	mov	r2, sl
 800c3e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c3ec:	ec43 2b10 	vmov	d0, r2, r3
 800c3f0:	b01f      	add	sp, #124	@ 0x7c
 800c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f6:	2920      	cmp	r1, #32
 800c3f8:	d1ce      	bne.n	800c398 <_strtod_l+0x30>
 800c3fa:	3201      	adds	r2, #1
 800c3fc:	e7c1      	b.n	800c382 <_strtod_l+0x1a>
 800c3fe:	292d      	cmp	r1, #45	@ 0x2d
 800c400:	d1ca      	bne.n	800c398 <_strtod_l+0x30>
 800c402:	2101      	movs	r1, #1
 800c404:	910e      	str	r1, [sp, #56]	@ 0x38
 800c406:	1c51      	adds	r1, r2, #1
 800c408:	9119      	str	r1, [sp, #100]	@ 0x64
 800c40a:	7852      	ldrb	r2, [r2, #1]
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	d1c5      	bne.n	800c39c <_strtod_l+0x34>
 800c410:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c412:	9419      	str	r4, [sp, #100]	@ 0x64
 800c414:	2b00      	cmp	r3, #0
 800c416:	f040 8570 	bne.w	800cefa <_strtod_l+0xb92>
 800c41a:	4652      	mov	r2, sl
 800c41c:	465b      	mov	r3, fp
 800c41e:	e7e5      	b.n	800c3ec <_strtod_l+0x84>
 800c420:	2100      	movs	r1, #0
 800c422:	e7ef      	b.n	800c404 <_strtod_l+0x9c>
 800c424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c426:	b13a      	cbz	r2, 800c438 <_strtod_l+0xd0>
 800c428:	2135      	movs	r1, #53	@ 0x35
 800c42a:	a81c      	add	r0, sp, #112	@ 0x70
 800c42c:	f002 f9e4 	bl	800e7f8 <__copybits>
 800c430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c432:	9805      	ldr	r0, [sp, #20]
 800c434:	f001 fdba 	bl	800dfac <_Bfree>
 800c438:	3e01      	subs	r6, #1
 800c43a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c43c:	2e04      	cmp	r6, #4
 800c43e:	d806      	bhi.n	800c44e <_strtod_l+0xe6>
 800c440:	e8df f006 	tbb	[pc, r6]
 800c444:	201d0314 	.word	0x201d0314
 800c448:	14          	.byte	0x14
 800c449:	00          	.byte	0x00
 800c44a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c44e:	05e1      	lsls	r1, r4, #23
 800c450:	bf48      	it	mi
 800c452:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c456:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c45a:	0d1b      	lsrs	r3, r3, #20
 800c45c:	051b      	lsls	r3, r3, #20
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1bb      	bne.n	800c3da <_strtod_l+0x72>
 800c462:	f001 f95d 	bl	800d720 <__errno>
 800c466:	2322      	movs	r3, #34	@ 0x22
 800c468:	6003      	str	r3, [r0, #0]
 800c46a:	e7b6      	b.n	800c3da <_strtod_l+0x72>
 800c46c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c470:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c474:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c478:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c47c:	e7e7      	b.n	800c44e <_strtod_l+0xe6>
 800c47e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c600 <_strtod_l+0x298>
 800c482:	e7e4      	b.n	800c44e <_strtod_l+0xe6>
 800c484:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c488:	f04f 3aff 	mov.w	sl, #4294967295
 800c48c:	e7df      	b.n	800c44e <_strtod_l+0xe6>
 800c48e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c490:	1c5a      	adds	r2, r3, #1
 800c492:	9219      	str	r2, [sp, #100]	@ 0x64
 800c494:	785b      	ldrb	r3, [r3, #1]
 800c496:	2b30      	cmp	r3, #48	@ 0x30
 800c498:	d0f9      	beq.n	800c48e <_strtod_l+0x126>
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d09d      	beq.n	800c3da <_strtod_l+0x72>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	2700      	movs	r7, #0
 800c4a2:	9308      	str	r3, [sp, #32]
 800c4a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c4aa:	46b9      	mov	r9, r7
 800c4ac:	220a      	movs	r2, #10
 800c4ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c4b0:	7805      	ldrb	r5, [r0, #0]
 800c4b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c4b6:	b2d9      	uxtb	r1, r3
 800c4b8:	2909      	cmp	r1, #9
 800c4ba:	d928      	bls.n	800c50e <_strtod_l+0x1a6>
 800c4bc:	494f      	ldr	r1, [pc, #316]	@ (800c5fc <_strtod_l+0x294>)
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f001 f854 	bl	800d56c <strncmp>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d032      	beq.n	800c52e <_strtod_l+0x1c6>
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	462a      	mov	r2, r5
 800c4cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c4ce:	464d      	mov	r5, r9
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2a65      	cmp	r2, #101	@ 0x65
 800c4d4:	d001      	beq.n	800c4da <_strtod_l+0x172>
 800c4d6:	2a45      	cmp	r2, #69	@ 0x45
 800c4d8:	d114      	bne.n	800c504 <_strtod_l+0x19c>
 800c4da:	b91d      	cbnz	r5, 800c4e4 <_strtod_l+0x17c>
 800c4dc:	9a08      	ldr	r2, [sp, #32]
 800c4de:	4302      	orrs	r2, r0
 800c4e0:	d096      	beq.n	800c410 <_strtod_l+0xa8>
 800c4e2:	2500      	movs	r5, #0
 800c4e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c4e6:	1c62      	adds	r2, r4, #1
 800c4e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4ea:	7862      	ldrb	r2, [r4, #1]
 800c4ec:	2a2b      	cmp	r2, #43	@ 0x2b
 800c4ee:	d07a      	beq.n	800c5e6 <_strtod_l+0x27e>
 800c4f0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c4f2:	d07e      	beq.n	800c5f2 <_strtod_l+0x28a>
 800c4f4:	f04f 0c00 	mov.w	ip, #0
 800c4f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c4fc:	2909      	cmp	r1, #9
 800c4fe:	f240 8085 	bls.w	800c60c <_strtod_l+0x2a4>
 800c502:	9419      	str	r4, [sp, #100]	@ 0x64
 800c504:	f04f 0800 	mov.w	r8, #0
 800c508:	e0a5      	b.n	800c656 <_strtod_l+0x2ee>
 800c50a:	2300      	movs	r3, #0
 800c50c:	e7c8      	b.n	800c4a0 <_strtod_l+0x138>
 800c50e:	f1b9 0f08 	cmp.w	r9, #8
 800c512:	bfd8      	it	le
 800c514:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c516:	f100 0001 	add.w	r0, r0, #1
 800c51a:	bfda      	itte	le
 800c51c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c520:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c522:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c526:	f109 0901 	add.w	r9, r9, #1
 800c52a:	9019      	str	r0, [sp, #100]	@ 0x64
 800c52c:	e7bf      	b.n	800c4ae <_strtod_l+0x146>
 800c52e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c530:	1c5a      	adds	r2, r3, #1
 800c532:	9219      	str	r2, [sp, #100]	@ 0x64
 800c534:	785a      	ldrb	r2, [r3, #1]
 800c536:	f1b9 0f00 	cmp.w	r9, #0
 800c53a:	d03b      	beq.n	800c5b4 <_strtod_l+0x24c>
 800c53c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c53e:	464d      	mov	r5, r9
 800c540:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c544:	2b09      	cmp	r3, #9
 800c546:	d912      	bls.n	800c56e <_strtod_l+0x206>
 800c548:	2301      	movs	r3, #1
 800c54a:	e7c2      	b.n	800c4d2 <_strtod_l+0x16a>
 800c54c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	9219      	str	r2, [sp, #100]	@ 0x64
 800c552:	785a      	ldrb	r2, [r3, #1]
 800c554:	3001      	adds	r0, #1
 800c556:	2a30      	cmp	r2, #48	@ 0x30
 800c558:	d0f8      	beq.n	800c54c <_strtod_l+0x1e4>
 800c55a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c55e:	2b08      	cmp	r3, #8
 800c560:	f200 84d2 	bhi.w	800cf08 <_strtod_l+0xba0>
 800c564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c566:	900a      	str	r0, [sp, #40]	@ 0x28
 800c568:	2000      	movs	r0, #0
 800c56a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c56c:	4605      	mov	r5, r0
 800c56e:	3a30      	subs	r2, #48	@ 0x30
 800c570:	f100 0301 	add.w	r3, r0, #1
 800c574:	d018      	beq.n	800c5a8 <_strtod_l+0x240>
 800c576:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c578:	4419      	add	r1, r3
 800c57a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c57c:	462e      	mov	r6, r5
 800c57e:	f04f 0e0a 	mov.w	lr, #10
 800c582:	1c71      	adds	r1, r6, #1
 800c584:	eba1 0c05 	sub.w	ip, r1, r5
 800c588:	4563      	cmp	r3, ip
 800c58a:	dc15      	bgt.n	800c5b8 <_strtod_l+0x250>
 800c58c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c590:	182b      	adds	r3, r5, r0
 800c592:	2b08      	cmp	r3, #8
 800c594:	f105 0501 	add.w	r5, r5, #1
 800c598:	4405      	add	r5, r0
 800c59a:	dc1a      	bgt.n	800c5d2 <_strtod_l+0x26a>
 800c59c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c59e:	230a      	movs	r3, #10
 800c5a0:	fb03 2301 	mla	r3, r3, r1, r2
 800c5a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c5aa:	1c51      	adds	r1, r2, #1
 800c5ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800c5ae:	7852      	ldrb	r2, [r2, #1]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	e7c5      	b.n	800c540 <_strtod_l+0x1d8>
 800c5b4:	4648      	mov	r0, r9
 800c5b6:	e7ce      	b.n	800c556 <_strtod_l+0x1ee>
 800c5b8:	2e08      	cmp	r6, #8
 800c5ba:	dc05      	bgt.n	800c5c8 <_strtod_l+0x260>
 800c5bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c5be:	fb0e f606 	mul.w	r6, lr, r6
 800c5c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c5c4:	460e      	mov	r6, r1
 800c5c6:	e7dc      	b.n	800c582 <_strtod_l+0x21a>
 800c5c8:	2910      	cmp	r1, #16
 800c5ca:	bfd8      	it	le
 800c5cc:	fb0e f707 	mulle.w	r7, lr, r7
 800c5d0:	e7f8      	b.n	800c5c4 <_strtod_l+0x25c>
 800c5d2:	2b0f      	cmp	r3, #15
 800c5d4:	bfdc      	itt	le
 800c5d6:	230a      	movle	r3, #10
 800c5d8:	fb03 2707 	mlale	r7, r3, r7, r2
 800c5dc:	e7e3      	b.n	800c5a6 <_strtod_l+0x23e>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e77a      	b.n	800c4dc <_strtod_l+0x174>
 800c5e6:	f04f 0c00 	mov.w	ip, #0
 800c5ea:	1ca2      	adds	r2, r4, #2
 800c5ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5ee:	78a2      	ldrb	r2, [r4, #2]
 800c5f0:	e782      	b.n	800c4f8 <_strtod_l+0x190>
 800c5f2:	f04f 0c01 	mov.w	ip, #1
 800c5f6:	e7f8      	b.n	800c5ea <_strtod_l+0x282>
 800c5f8:	08010ea4 	.word	0x08010ea4
 800c5fc:	08010cd0 	.word	0x08010cd0
 800c600:	7ff00000 	.word	0x7ff00000
 800c604:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c606:	1c51      	adds	r1, r2, #1
 800c608:	9119      	str	r1, [sp, #100]	@ 0x64
 800c60a:	7852      	ldrb	r2, [r2, #1]
 800c60c:	2a30      	cmp	r2, #48	@ 0x30
 800c60e:	d0f9      	beq.n	800c604 <_strtod_l+0x29c>
 800c610:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c614:	2908      	cmp	r1, #8
 800c616:	f63f af75 	bhi.w	800c504 <_strtod_l+0x19c>
 800c61a:	3a30      	subs	r2, #48	@ 0x30
 800c61c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c61e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c620:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c622:	f04f 080a 	mov.w	r8, #10
 800c626:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c628:	1c56      	adds	r6, r2, #1
 800c62a:	9619      	str	r6, [sp, #100]	@ 0x64
 800c62c:	7852      	ldrb	r2, [r2, #1]
 800c62e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c632:	f1be 0f09 	cmp.w	lr, #9
 800c636:	d939      	bls.n	800c6ac <_strtod_l+0x344>
 800c638:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c63a:	1a76      	subs	r6, r6, r1
 800c63c:	2e08      	cmp	r6, #8
 800c63e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c642:	dc03      	bgt.n	800c64c <_strtod_l+0x2e4>
 800c644:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c646:	4588      	cmp	r8, r1
 800c648:	bfa8      	it	ge
 800c64a:	4688      	movge	r8, r1
 800c64c:	f1bc 0f00 	cmp.w	ip, #0
 800c650:	d001      	beq.n	800c656 <_strtod_l+0x2ee>
 800c652:	f1c8 0800 	rsb	r8, r8, #0
 800c656:	2d00      	cmp	r5, #0
 800c658:	d14e      	bne.n	800c6f8 <_strtod_l+0x390>
 800c65a:	9908      	ldr	r1, [sp, #32]
 800c65c:	4308      	orrs	r0, r1
 800c65e:	f47f aebc 	bne.w	800c3da <_strtod_l+0x72>
 800c662:	2b00      	cmp	r3, #0
 800c664:	f47f aed4 	bne.w	800c410 <_strtod_l+0xa8>
 800c668:	2a69      	cmp	r2, #105	@ 0x69
 800c66a:	d028      	beq.n	800c6be <_strtod_l+0x356>
 800c66c:	dc25      	bgt.n	800c6ba <_strtod_l+0x352>
 800c66e:	2a49      	cmp	r2, #73	@ 0x49
 800c670:	d025      	beq.n	800c6be <_strtod_l+0x356>
 800c672:	2a4e      	cmp	r2, #78	@ 0x4e
 800c674:	f47f aecc 	bne.w	800c410 <_strtod_l+0xa8>
 800c678:	499a      	ldr	r1, [pc, #616]	@ (800c8e4 <_strtod_l+0x57c>)
 800c67a:	a819      	add	r0, sp, #100	@ 0x64
 800c67c:	f001 fb94 	bl	800dda8 <__match>
 800c680:	2800      	cmp	r0, #0
 800c682:	f43f aec5 	beq.w	800c410 <_strtod_l+0xa8>
 800c686:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	2b28      	cmp	r3, #40	@ 0x28
 800c68c:	d12e      	bne.n	800c6ec <_strtod_l+0x384>
 800c68e:	4996      	ldr	r1, [pc, #600]	@ (800c8e8 <_strtod_l+0x580>)
 800c690:	aa1c      	add	r2, sp, #112	@ 0x70
 800c692:	a819      	add	r0, sp, #100	@ 0x64
 800c694:	f001 fb9c 	bl	800ddd0 <__hexnan>
 800c698:	2805      	cmp	r0, #5
 800c69a:	d127      	bne.n	800c6ec <_strtod_l+0x384>
 800c69c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c69e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c6a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c6a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c6aa:	e696      	b.n	800c3da <_strtod_l+0x72>
 800c6ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6ae:	fb08 2101 	mla	r1, r8, r1, r2
 800c6b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c6b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6b8:	e7b5      	b.n	800c626 <_strtod_l+0x2be>
 800c6ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800c6bc:	e7da      	b.n	800c674 <_strtod_l+0x30c>
 800c6be:	498b      	ldr	r1, [pc, #556]	@ (800c8ec <_strtod_l+0x584>)
 800c6c0:	a819      	add	r0, sp, #100	@ 0x64
 800c6c2:	f001 fb71 	bl	800dda8 <__match>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f43f aea2 	beq.w	800c410 <_strtod_l+0xa8>
 800c6cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6ce:	4988      	ldr	r1, [pc, #544]	@ (800c8f0 <_strtod_l+0x588>)
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	a819      	add	r0, sp, #100	@ 0x64
 800c6d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c6d6:	f001 fb67 	bl	800dda8 <__match>
 800c6da:	b910      	cbnz	r0, 800c6e2 <_strtod_l+0x37a>
 800c6dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6de:	3301      	adds	r3, #1
 800c6e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c6e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c900 <_strtod_l+0x598>
 800c6e6:	f04f 0a00 	mov.w	sl, #0
 800c6ea:	e676      	b.n	800c3da <_strtod_l+0x72>
 800c6ec:	4881      	ldr	r0, [pc, #516]	@ (800c8f4 <_strtod_l+0x58c>)
 800c6ee:	f001 f85b 	bl	800d7a8 <nan>
 800c6f2:	ec5b ab10 	vmov	sl, fp, d0
 800c6f6:	e670      	b.n	800c3da <_strtod_l+0x72>
 800c6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c6fc:	eba8 0303 	sub.w	r3, r8, r3
 800c700:	f1b9 0f00 	cmp.w	r9, #0
 800c704:	bf08      	it	eq
 800c706:	46a9      	moveq	r9, r5
 800c708:	2d10      	cmp	r5, #16
 800c70a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c70c:	462c      	mov	r4, r5
 800c70e:	bfa8      	it	ge
 800c710:	2410      	movge	r4, #16
 800c712:	f7f3 ff1f 	bl	8000554 <__aeabi_ui2d>
 800c716:	2d09      	cmp	r5, #9
 800c718:	4682      	mov	sl, r0
 800c71a:	468b      	mov	fp, r1
 800c71c:	dc13      	bgt.n	800c746 <_strtod_l+0x3de>
 800c71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c720:	2b00      	cmp	r3, #0
 800c722:	f43f ae5a 	beq.w	800c3da <_strtod_l+0x72>
 800c726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c728:	dd78      	ble.n	800c81c <_strtod_l+0x4b4>
 800c72a:	2b16      	cmp	r3, #22
 800c72c:	dc5f      	bgt.n	800c7ee <_strtod_l+0x486>
 800c72e:	4972      	ldr	r1, [pc, #456]	@ (800c8f8 <_strtod_l+0x590>)
 800c730:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c734:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c738:	4652      	mov	r2, sl
 800c73a:	465b      	mov	r3, fp
 800c73c:	f7f3 ff84 	bl	8000648 <__aeabi_dmul>
 800c740:	4682      	mov	sl, r0
 800c742:	468b      	mov	fp, r1
 800c744:	e649      	b.n	800c3da <_strtod_l+0x72>
 800c746:	4b6c      	ldr	r3, [pc, #432]	@ (800c8f8 <_strtod_l+0x590>)
 800c748:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c74c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c750:	f7f3 ff7a 	bl	8000648 <__aeabi_dmul>
 800c754:	4682      	mov	sl, r0
 800c756:	4638      	mov	r0, r7
 800c758:	468b      	mov	fp, r1
 800c75a:	f7f3 fefb 	bl	8000554 <__aeabi_ui2d>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4650      	mov	r0, sl
 800c764:	4659      	mov	r1, fp
 800c766:	f7f3 fdb9 	bl	80002dc <__adddf3>
 800c76a:	2d0f      	cmp	r5, #15
 800c76c:	4682      	mov	sl, r0
 800c76e:	468b      	mov	fp, r1
 800c770:	ddd5      	ble.n	800c71e <_strtod_l+0x3b6>
 800c772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c774:	1b2c      	subs	r4, r5, r4
 800c776:	441c      	add	r4, r3
 800c778:	2c00      	cmp	r4, #0
 800c77a:	f340 8093 	ble.w	800c8a4 <_strtod_l+0x53c>
 800c77e:	f014 030f 	ands.w	r3, r4, #15
 800c782:	d00a      	beq.n	800c79a <_strtod_l+0x432>
 800c784:	495c      	ldr	r1, [pc, #368]	@ (800c8f8 <_strtod_l+0x590>)
 800c786:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c78a:	4652      	mov	r2, sl
 800c78c:	465b      	mov	r3, fp
 800c78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c792:	f7f3 ff59 	bl	8000648 <__aeabi_dmul>
 800c796:	4682      	mov	sl, r0
 800c798:	468b      	mov	fp, r1
 800c79a:	f034 040f 	bics.w	r4, r4, #15
 800c79e:	d073      	beq.n	800c888 <_strtod_l+0x520>
 800c7a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c7a4:	dd49      	ble.n	800c83a <_strtod_l+0x4d2>
 800c7a6:	2400      	movs	r4, #0
 800c7a8:	46a0      	mov	r8, r4
 800c7aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c7ac:	46a1      	mov	r9, r4
 800c7ae:	9a05      	ldr	r2, [sp, #20]
 800c7b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c900 <_strtod_l+0x598>
 800c7b4:	2322      	movs	r3, #34	@ 0x22
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	f04f 0a00 	mov.w	sl, #0
 800c7bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f43f ae0b 	beq.w	800c3da <_strtod_l+0x72>
 800c7c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7c6:	9805      	ldr	r0, [sp, #20]
 800c7c8:	f001 fbf0 	bl	800dfac <_Bfree>
 800c7cc:	9805      	ldr	r0, [sp, #20]
 800c7ce:	4649      	mov	r1, r9
 800c7d0:	f001 fbec 	bl	800dfac <_Bfree>
 800c7d4:	9805      	ldr	r0, [sp, #20]
 800c7d6:	4641      	mov	r1, r8
 800c7d8:	f001 fbe8 	bl	800dfac <_Bfree>
 800c7dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7de:	9805      	ldr	r0, [sp, #20]
 800c7e0:	f001 fbe4 	bl	800dfac <_Bfree>
 800c7e4:	9805      	ldr	r0, [sp, #20]
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	f001 fbe0 	bl	800dfac <_Bfree>
 800c7ec:	e5f5      	b.n	800c3da <_strtod_l+0x72>
 800c7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	dbbc      	blt.n	800c772 <_strtod_l+0x40a>
 800c7f8:	4c3f      	ldr	r4, [pc, #252]	@ (800c8f8 <_strtod_l+0x590>)
 800c7fa:	f1c5 050f 	rsb	r5, r5, #15
 800c7fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c802:	4652      	mov	r2, sl
 800c804:	465b      	mov	r3, fp
 800c806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c80a:	f7f3 ff1d 	bl	8000648 <__aeabi_dmul>
 800c80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c810:	1b5d      	subs	r5, r3, r5
 800c812:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c816:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c81a:	e78f      	b.n	800c73c <_strtod_l+0x3d4>
 800c81c:	3316      	adds	r3, #22
 800c81e:	dba8      	blt.n	800c772 <_strtod_l+0x40a>
 800c820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c822:	eba3 0808 	sub.w	r8, r3, r8
 800c826:	4b34      	ldr	r3, [pc, #208]	@ (800c8f8 <_strtod_l+0x590>)
 800c828:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c82c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c830:	4650      	mov	r0, sl
 800c832:	4659      	mov	r1, fp
 800c834:	f7f4 f832 	bl	800089c <__aeabi_ddiv>
 800c838:	e782      	b.n	800c740 <_strtod_l+0x3d8>
 800c83a:	2300      	movs	r3, #0
 800c83c:	4f2f      	ldr	r7, [pc, #188]	@ (800c8fc <_strtod_l+0x594>)
 800c83e:	1124      	asrs	r4, r4, #4
 800c840:	4650      	mov	r0, sl
 800c842:	4659      	mov	r1, fp
 800c844:	461e      	mov	r6, r3
 800c846:	2c01      	cmp	r4, #1
 800c848:	dc21      	bgt.n	800c88e <_strtod_l+0x526>
 800c84a:	b10b      	cbz	r3, 800c850 <_strtod_l+0x4e8>
 800c84c:	4682      	mov	sl, r0
 800c84e:	468b      	mov	fp, r1
 800c850:	492a      	ldr	r1, [pc, #168]	@ (800c8fc <_strtod_l+0x594>)
 800c852:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c856:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c85a:	4652      	mov	r2, sl
 800c85c:	465b      	mov	r3, fp
 800c85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c862:	f7f3 fef1 	bl	8000648 <__aeabi_dmul>
 800c866:	4b26      	ldr	r3, [pc, #152]	@ (800c900 <_strtod_l+0x598>)
 800c868:	460a      	mov	r2, r1
 800c86a:	400b      	ands	r3, r1
 800c86c:	4925      	ldr	r1, [pc, #148]	@ (800c904 <_strtod_l+0x59c>)
 800c86e:	428b      	cmp	r3, r1
 800c870:	4682      	mov	sl, r0
 800c872:	d898      	bhi.n	800c7a6 <_strtod_l+0x43e>
 800c874:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c878:	428b      	cmp	r3, r1
 800c87a:	bf86      	itte	hi
 800c87c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c908 <_strtod_l+0x5a0>
 800c880:	f04f 3aff 	movhi.w	sl, #4294967295
 800c884:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c888:	2300      	movs	r3, #0
 800c88a:	9308      	str	r3, [sp, #32]
 800c88c:	e076      	b.n	800c97c <_strtod_l+0x614>
 800c88e:	07e2      	lsls	r2, r4, #31
 800c890:	d504      	bpl.n	800c89c <_strtod_l+0x534>
 800c892:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c896:	f7f3 fed7 	bl	8000648 <__aeabi_dmul>
 800c89a:	2301      	movs	r3, #1
 800c89c:	3601      	adds	r6, #1
 800c89e:	1064      	asrs	r4, r4, #1
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	e7d0      	b.n	800c846 <_strtod_l+0x4de>
 800c8a4:	d0f0      	beq.n	800c888 <_strtod_l+0x520>
 800c8a6:	4264      	negs	r4, r4
 800c8a8:	f014 020f 	ands.w	r2, r4, #15
 800c8ac:	d00a      	beq.n	800c8c4 <_strtod_l+0x55c>
 800c8ae:	4b12      	ldr	r3, [pc, #72]	@ (800c8f8 <_strtod_l+0x590>)
 800c8b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8b4:	4650      	mov	r0, sl
 800c8b6:	4659      	mov	r1, fp
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	f7f3 ffee 	bl	800089c <__aeabi_ddiv>
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	468b      	mov	fp, r1
 800c8c4:	1124      	asrs	r4, r4, #4
 800c8c6:	d0df      	beq.n	800c888 <_strtod_l+0x520>
 800c8c8:	2c1f      	cmp	r4, #31
 800c8ca:	dd1f      	ble.n	800c90c <_strtod_l+0x5a4>
 800c8cc:	2400      	movs	r4, #0
 800c8ce:	46a0      	mov	r8, r4
 800c8d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c8d2:	46a1      	mov	r9, r4
 800c8d4:	9a05      	ldr	r2, [sp, #20]
 800c8d6:	2322      	movs	r3, #34	@ 0x22
 800c8d8:	f04f 0a00 	mov.w	sl, #0
 800c8dc:	f04f 0b00 	mov.w	fp, #0
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	e76b      	b.n	800c7bc <_strtod_l+0x454>
 800c8e4:	08010cdb 	.word	0x08010cdb
 800c8e8:	08010e90 	.word	0x08010e90
 800c8ec:	08010cd2 	.word	0x08010cd2
 800c8f0:	08010cd5 	.word	0x08010cd5
 800c8f4:	08010d92 	.word	0x08010d92
 800c8f8:	08011018 	.word	0x08011018
 800c8fc:	08010ff0 	.word	0x08010ff0
 800c900:	7ff00000 	.word	0x7ff00000
 800c904:	7ca00000 	.word	0x7ca00000
 800c908:	7fefffff 	.word	0x7fefffff
 800c90c:	f014 0310 	ands.w	r3, r4, #16
 800c910:	bf18      	it	ne
 800c912:	236a      	movne	r3, #106	@ 0x6a
 800c914:	4ea9      	ldr	r6, [pc, #676]	@ (800cbbc <_strtod_l+0x854>)
 800c916:	9308      	str	r3, [sp, #32]
 800c918:	4650      	mov	r0, sl
 800c91a:	4659      	mov	r1, fp
 800c91c:	2300      	movs	r3, #0
 800c91e:	07e7      	lsls	r7, r4, #31
 800c920:	d504      	bpl.n	800c92c <_strtod_l+0x5c4>
 800c922:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c926:	f7f3 fe8f 	bl	8000648 <__aeabi_dmul>
 800c92a:	2301      	movs	r3, #1
 800c92c:	1064      	asrs	r4, r4, #1
 800c92e:	f106 0608 	add.w	r6, r6, #8
 800c932:	d1f4      	bne.n	800c91e <_strtod_l+0x5b6>
 800c934:	b10b      	cbz	r3, 800c93a <_strtod_l+0x5d2>
 800c936:	4682      	mov	sl, r0
 800c938:	468b      	mov	fp, r1
 800c93a:	9b08      	ldr	r3, [sp, #32]
 800c93c:	b1b3      	cbz	r3, 800c96c <_strtod_l+0x604>
 800c93e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c942:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c946:	2b00      	cmp	r3, #0
 800c948:	4659      	mov	r1, fp
 800c94a:	dd0f      	ble.n	800c96c <_strtod_l+0x604>
 800c94c:	2b1f      	cmp	r3, #31
 800c94e:	dd56      	ble.n	800c9fe <_strtod_l+0x696>
 800c950:	2b34      	cmp	r3, #52	@ 0x34
 800c952:	bfde      	ittt	le
 800c954:	f04f 33ff 	movle.w	r3, #4294967295
 800c958:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c95c:	4093      	lslle	r3, r2
 800c95e:	f04f 0a00 	mov.w	sl, #0
 800c962:	bfcc      	ite	gt
 800c964:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c968:	ea03 0b01 	andle.w	fp, r3, r1
 800c96c:	2200      	movs	r2, #0
 800c96e:	2300      	movs	r3, #0
 800c970:	4650      	mov	r0, sl
 800c972:	4659      	mov	r1, fp
 800c974:	f7f4 f8d0 	bl	8000b18 <__aeabi_dcmpeq>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d1a7      	bne.n	800c8cc <_strtod_l+0x564>
 800c97c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c97e:	9300      	str	r3, [sp, #0]
 800c980:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c982:	9805      	ldr	r0, [sp, #20]
 800c984:	462b      	mov	r3, r5
 800c986:	464a      	mov	r2, r9
 800c988:	f001 fb78 	bl	800e07c <__s2b>
 800c98c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c98e:	2800      	cmp	r0, #0
 800c990:	f43f af09 	beq.w	800c7a6 <_strtod_l+0x43e>
 800c994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c998:	2a00      	cmp	r2, #0
 800c99a:	eba3 0308 	sub.w	r3, r3, r8
 800c99e:	bfa8      	it	ge
 800c9a0:	2300      	movge	r3, #0
 800c9a2:	9312      	str	r3, [sp, #72]	@ 0x48
 800c9a4:	2400      	movs	r4, #0
 800c9a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c9aa:	9316      	str	r3, [sp, #88]	@ 0x58
 800c9ac:	46a0      	mov	r8, r4
 800c9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9b0:	9805      	ldr	r0, [sp, #20]
 800c9b2:	6859      	ldr	r1, [r3, #4]
 800c9b4:	f001 faba 	bl	800df2c <_Balloc>
 800c9b8:	4681      	mov	r9, r0
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	f43f aef7 	beq.w	800c7ae <_strtod_l+0x446>
 800c9c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9c2:	691a      	ldr	r2, [r3, #16]
 800c9c4:	3202      	adds	r2, #2
 800c9c6:	f103 010c 	add.w	r1, r3, #12
 800c9ca:	0092      	lsls	r2, r2, #2
 800c9cc:	300c      	adds	r0, #12
 800c9ce:	f000 fedc 	bl	800d78a <memcpy>
 800c9d2:	ec4b ab10 	vmov	d0, sl, fp
 800c9d6:	9805      	ldr	r0, [sp, #20]
 800c9d8:	aa1c      	add	r2, sp, #112	@ 0x70
 800c9da:	a91b      	add	r1, sp, #108	@ 0x6c
 800c9dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c9e0:	f001 fe80 	bl	800e6e4 <__d2b>
 800c9e4:	901a      	str	r0, [sp, #104]	@ 0x68
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f43f aee1 	beq.w	800c7ae <_strtod_l+0x446>
 800c9ec:	9805      	ldr	r0, [sp, #20]
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	f001 fbda 	bl	800e1a8 <__i2b>
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	b948      	cbnz	r0, 800ca0c <_strtod_l+0x6a4>
 800c9f8:	f04f 0800 	mov.w	r8, #0
 800c9fc:	e6d7      	b.n	800c7ae <_strtod_l+0x446>
 800c9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ca02:	fa02 f303 	lsl.w	r3, r2, r3
 800ca06:	ea03 0a0a 	and.w	sl, r3, sl
 800ca0a:	e7af      	b.n	800c96c <_strtod_l+0x604>
 800ca0c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ca0e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ca10:	2d00      	cmp	r5, #0
 800ca12:	bfab      	itete	ge
 800ca14:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ca16:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ca18:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ca1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ca1c:	bfac      	ite	ge
 800ca1e:	18ef      	addge	r7, r5, r3
 800ca20:	1b5e      	sublt	r6, r3, r5
 800ca22:	9b08      	ldr	r3, [sp, #32]
 800ca24:	1aed      	subs	r5, r5, r3
 800ca26:	4415      	add	r5, r2
 800ca28:	4b65      	ldr	r3, [pc, #404]	@ (800cbc0 <_strtod_l+0x858>)
 800ca2a:	3d01      	subs	r5, #1
 800ca2c:	429d      	cmp	r5, r3
 800ca2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ca32:	da50      	bge.n	800cad6 <_strtod_l+0x76e>
 800ca34:	1b5b      	subs	r3, r3, r5
 800ca36:	2b1f      	cmp	r3, #31
 800ca38:	eba2 0203 	sub.w	r2, r2, r3
 800ca3c:	f04f 0101 	mov.w	r1, #1
 800ca40:	dc3d      	bgt.n	800cabe <_strtod_l+0x756>
 800ca42:	fa01 f303 	lsl.w	r3, r1, r3
 800ca46:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca48:	2300      	movs	r3, #0
 800ca4a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca4c:	18bd      	adds	r5, r7, r2
 800ca4e:	9b08      	ldr	r3, [sp, #32]
 800ca50:	42af      	cmp	r7, r5
 800ca52:	4416      	add	r6, r2
 800ca54:	441e      	add	r6, r3
 800ca56:	463b      	mov	r3, r7
 800ca58:	bfa8      	it	ge
 800ca5a:	462b      	movge	r3, r5
 800ca5c:	42b3      	cmp	r3, r6
 800ca5e:	bfa8      	it	ge
 800ca60:	4633      	movge	r3, r6
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	bfc2      	ittt	gt
 800ca66:	1aed      	subgt	r5, r5, r3
 800ca68:	1af6      	subgt	r6, r6, r3
 800ca6a:	1aff      	subgt	r7, r7, r3
 800ca6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dd16      	ble.n	800caa0 <_strtod_l+0x738>
 800ca72:	4641      	mov	r1, r8
 800ca74:	9805      	ldr	r0, [sp, #20]
 800ca76:	461a      	mov	r2, r3
 800ca78:	f001 fc4e 	bl	800e318 <__pow5mult>
 800ca7c:	4680      	mov	r8, r0
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d0ba      	beq.n	800c9f8 <_strtod_l+0x690>
 800ca82:	4601      	mov	r1, r0
 800ca84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ca86:	9805      	ldr	r0, [sp, #20]
 800ca88:	f001 fba4 	bl	800e1d4 <__multiply>
 800ca8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	f43f ae8d 	beq.w	800c7ae <_strtod_l+0x446>
 800ca94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca96:	9805      	ldr	r0, [sp, #20]
 800ca98:	f001 fa88 	bl	800dfac <_Bfree>
 800ca9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	dc1d      	bgt.n	800cae0 <_strtod_l+0x778>
 800caa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	dd23      	ble.n	800caf2 <_strtod_l+0x78a>
 800caaa:	4649      	mov	r1, r9
 800caac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800caae:	9805      	ldr	r0, [sp, #20]
 800cab0:	f001 fc32 	bl	800e318 <__pow5mult>
 800cab4:	4681      	mov	r9, r0
 800cab6:	b9e0      	cbnz	r0, 800caf2 <_strtod_l+0x78a>
 800cab8:	f04f 0900 	mov.w	r9, #0
 800cabc:	e677      	b.n	800c7ae <_strtod_l+0x446>
 800cabe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cac2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cac6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800caca:	35e2      	adds	r5, #226	@ 0xe2
 800cacc:	fa01 f305 	lsl.w	r3, r1, r5
 800cad0:	9310      	str	r3, [sp, #64]	@ 0x40
 800cad2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cad4:	e7ba      	b.n	800ca4c <_strtod_l+0x6e4>
 800cad6:	2300      	movs	r3, #0
 800cad8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cada:	2301      	movs	r3, #1
 800cadc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cade:	e7b5      	b.n	800ca4c <_strtod_l+0x6e4>
 800cae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cae2:	9805      	ldr	r0, [sp, #20]
 800cae4:	462a      	mov	r2, r5
 800cae6:	f001 fc71 	bl	800e3cc <__lshift>
 800caea:	901a      	str	r0, [sp, #104]	@ 0x68
 800caec:	2800      	cmp	r0, #0
 800caee:	d1d9      	bne.n	800caa4 <_strtod_l+0x73c>
 800caf0:	e65d      	b.n	800c7ae <_strtod_l+0x446>
 800caf2:	2e00      	cmp	r6, #0
 800caf4:	dd07      	ble.n	800cb06 <_strtod_l+0x79e>
 800caf6:	4649      	mov	r1, r9
 800caf8:	9805      	ldr	r0, [sp, #20]
 800cafa:	4632      	mov	r2, r6
 800cafc:	f001 fc66 	bl	800e3cc <__lshift>
 800cb00:	4681      	mov	r9, r0
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d0d8      	beq.n	800cab8 <_strtod_l+0x750>
 800cb06:	2f00      	cmp	r7, #0
 800cb08:	dd08      	ble.n	800cb1c <_strtod_l+0x7b4>
 800cb0a:	4641      	mov	r1, r8
 800cb0c:	9805      	ldr	r0, [sp, #20]
 800cb0e:	463a      	mov	r2, r7
 800cb10:	f001 fc5c 	bl	800e3cc <__lshift>
 800cb14:	4680      	mov	r8, r0
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f43f ae49 	beq.w	800c7ae <_strtod_l+0x446>
 800cb1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb1e:	9805      	ldr	r0, [sp, #20]
 800cb20:	464a      	mov	r2, r9
 800cb22:	f001 fcdb 	bl	800e4dc <__mdiff>
 800cb26:	4604      	mov	r4, r0
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	f43f ae40 	beq.w	800c7ae <_strtod_l+0x446>
 800cb2e:	68c3      	ldr	r3, [r0, #12]
 800cb30:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb32:	2300      	movs	r3, #0
 800cb34:	60c3      	str	r3, [r0, #12]
 800cb36:	4641      	mov	r1, r8
 800cb38:	f001 fcb4 	bl	800e4a4 <__mcmp>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	da45      	bge.n	800cbcc <_strtod_l+0x864>
 800cb40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb42:	ea53 030a 	orrs.w	r3, r3, sl
 800cb46:	d16b      	bne.n	800cc20 <_strtod_l+0x8b8>
 800cb48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d167      	bne.n	800cc20 <_strtod_l+0x8b8>
 800cb50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb54:	0d1b      	lsrs	r3, r3, #20
 800cb56:	051b      	lsls	r3, r3, #20
 800cb58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cb5c:	d960      	bls.n	800cc20 <_strtod_l+0x8b8>
 800cb5e:	6963      	ldr	r3, [r4, #20]
 800cb60:	b913      	cbnz	r3, 800cb68 <_strtod_l+0x800>
 800cb62:	6923      	ldr	r3, [r4, #16]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	dd5b      	ble.n	800cc20 <_strtod_l+0x8b8>
 800cb68:	4621      	mov	r1, r4
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	9805      	ldr	r0, [sp, #20]
 800cb6e:	f001 fc2d 	bl	800e3cc <__lshift>
 800cb72:	4641      	mov	r1, r8
 800cb74:	4604      	mov	r4, r0
 800cb76:	f001 fc95 	bl	800e4a4 <__mcmp>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	dd50      	ble.n	800cc20 <_strtod_l+0x8b8>
 800cb7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb82:	9a08      	ldr	r2, [sp, #32]
 800cb84:	0d1b      	lsrs	r3, r3, #20
 800cb86:	051b      	lsls	r3, r3, #20
 800cb88:	2a00      	cmp	r2, #0
 800cb8a:	d06a      	beq.n	800cc62 <_strtod_l+0x8fa>
 800cb8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cb90:	d867      	bhi.n	800cc62 <_strtod_l+0x8fa>
 800cb92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cb96:	f67f ae9d 	bls.w	800c8d4 <_strtod_l+0x56c>
 800cb9a:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc4 <_strtod_l+0x85c>)
 800cb9c:	4650      	mov	r0, sl
 800cb9e:	4659      	mov	r1, fp
 800cba0:	2200      	movs	r2, #0
 800cba2:	f7f3 fd51 	bl	8000648 <__aeabi_dmul>
 800cba6:	4b08      	ldr	r3, [pc, #32]	@ (800cbc8 <_strtod_l+0x860>)
 800cba8:	400b      	ands	r3, r1
 800cbaa:	4682      	mov	sl, r0
 800cbac:	468b      	mov	fp, r1
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f47f ae08 	bne.w	800c7c4 <_strtod_l+0x45c>
 800cbb4:	9a05      	ldr	r2, [sp, #20]
 800cbb6:	2322      	movs	r3, #34	@ 0x22
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	e603      	b.n	800c7c4 <_strtod_l+0x45c>
 800cbbc:	08010eb8 	.word	0x08010eb8
 800cbc0:	fffffc02 	.word	0xfffffc02
 800cbc4:	39500000 	.word	0x39500000
 800cbc8:	7ff00000 	.word	0x7ff00000
 800cbcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cbd0:	d165      	bne.n	800cc9e <_strtod_l+0x936>
 800cbd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cbd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbd8:	b35a      	cbz	r2, 800cc32 <_strtod_l+0x8ca>
 800cbda:	4a9f      	ldr	r2, [pc, #636]	@ (800ce58 <_strtod_l+0xaf0>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d12b      	bne.n	800cc38 <_strtod_l+0x8d0>
 800cbe0:	9b08      	ldr	r3, [sp, #32]
 800cbe2:	4651      	mov	r1, sl
 800cbe4:	b303      	cbz	r3, 800cc28 <_strtod_l+0x8c0>
 800cbe6:	4b9d      	ldr	r3, [pc, #628]	@ (800ce5c <_strtod_l+0xaf4>)
 800cbe8:	465a      	mov	r2, fp
 800cbea:	4013      	ands	r3, r2
 800cbec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cbf0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf4:	d81b      	bhi.n	800cc2e <_strtod_l+0x8c6>
 800cbf6:	0d1b      	lsrs	r3, r3, #20
 800cbf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cbfc:	fa02 f303 	lsl.w	r3, r2, r3
 800cc00:	4299      	cmp	r1, r3
 800cc02:	d119      	bne.n	800cc38 <_strtod_l+0x8d0>
 800cc04:	4b96      	ldr	r3, [pc, #600]	@ (800ce60 <_strtod_l+0xaf8>)
 800cc06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d102      	bne.n	800cc12 <_strtod_l+0x8aa>
 800cc0c:	3101      	adds	r1, #1
 800cc0e:	f43f adce 	beq.w	800c7ae <_strtod_l+0x446>
 800cc12:	4b92      	ldr	r3, [pc, #584]	@ (800ce5c <_strtod_l+0xaf4>)
 800cc14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc16:	401a      	ands	r2, r3
 800cc18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cc1c:	f04f 0a00 	mov.w	sl, #0
 800cc20:	9b08      	ldr	r3, [sp, #32]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1b9      	bne.n	800cb9a <_strtod_l+0x832>
 800cc26:	e5cd      	b.n	800c7c4 <_strtod_l+0x45c>
 800cc28:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2c:	e7e8      	b.n	800cc00 <_strtod_l+0x898>
 800cc2e:	4613      	mov	r3, r2
 800cc30:	e7e6      	b.n	800cc00 <_strtod_l+0x898>
 800cc32:	ea53 030a 	orrs.w	r3, r3, sl
 800cc36:	d0a2      	beq.n	800cb7e <_strtod_l+0x816>
 800cc38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cc3a:	b1db      	cbz	r3, 800cc74 <_strtod_l+0x90c>
 800cc3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc3e:	4213      	tst	r3, r2
 800cc40:	d0ee      	beq.n	800cc20 <_strtod_l+0x8b8>
 800cc42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc44:	9a08      	ldr	r2, [sp, #32]
 800cc46:	4650      	mov	r0, sl
 800cc48:	4659      	mov	r1, fp
 800cc4a:	b1bb      	cbz	r3, 800cc7c <_strtod_l+0x914>
 800cc4c:	f7ff fb6e 	bl	800c32c <sulp>
 800cc50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc54:	ec53 2b10 	vmov	r2, r3, d0
 800cc58:	f7f3 fb40 	bl	80002dc <__adddf3>
 800cc5c:	4682      	mov	sl, r0
 800cc5e:	468b      	mov	fp, r1
 800cc60:	e7de      	b.n	800cc20 <_strtod_l+0x8b8>
 800cc62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cc66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cc6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cc6e:	f04f 3aff 	mov.w	sl, #4294967295
 800cc72:	e7d5      	b.n	800cc20 <_strtod_l+0x8b8>
 800cc74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc76:	ea13 0f0a 	tst.w	r3, sl
 800cc7a:	e7e1      	b.n	800cc40 <_strtod_l+0x8d8>
 800cc7c:	f7ff fb56 	bl	800c32c <sulp>
 800cc80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc84:	ec53 2b10 	vmov	r2, r3, d0
 800cc88:	f7f3 fb26 	bl	80002d8 <__aeabi_dsub>
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2300      	movs	r3, #0
 800cc90:	4682      	mov	sl, r0
 800cc92:	468b      	mov	fp, r1
 800cc94:	f7f3 ff40 	bl	8000b18 <__aeabi_dcmpeq>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d0c1      	beq.n	800cc20 <_strtod_l+0x8b8>
 800cc9c:	e61a      	b.n	800c8d4 <_strtod_l+0x56c>
 800cc9e:	4641      	mov	r1, r8
 800cca0:	4620      	mov	r0, r4
 800cca2:	f001 fd77 	bl	800e794 <__ratio>
 800cca6:	ec57 6b10 	vmov	r6, r7, d0
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	f7f3 ff44 	bl	8000b40 <__aeabi_dcmple>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d06f      	beq.n	800cd9c <_strtod_l+0xa34>
 800ccbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d17a      	bne.n	800cdb8 <_strtod_l+0xa50>
 800ccc2:	f1ba 0f00 	cmp.w	sl, #0
 800ccc6:	d158      	bne.n	800cd7a <_strtod_l+0xa12>
 800ccc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d15a      	bne.n	800cd88 <_strtod_l+0xa20>
 800ccd2:	4b64      	ldr	r3, [pc, #400]	@ (800ce64 <_strtod_l+0xafc>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	4639      	mov	r1, r7
 800ccda:	f7f3 ff27 	bl	8000b2c <__aeabi_dcmplt>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d159      	bne.n	800cd96 <_strtod_l+0xa2e>
 800cce2:	4630      	mov	r0, r6
 800cce4:	4639      	mov	r1, r7
 800cce6:	4b60      	ldr	r3, [pc, #384]	@ (800ce68 <_strtod_l+0xb00>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	f7f3 fcad 	bl	8000648 <__aeabi_dmul>
 800ccee:	4606      	mov	r6, r0
 800ccf0:	460f      	mov	r7, r1
 800ccf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ccf6:	9606      	str	r6, [sp, #24]
 800ccf8:	9307      	str	r3, [sp, #28]
 800ccfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccfe:	4d57      	ldr	r5, [pc, #348]	@ (800ce5c <_strtod_l+0xaf4>)
 800cd00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd06:	401d      	ands	r5, r3
 800cd08:	4b58      	ldr	r3, [pc, #352]	@ (800ce6c <_strtod_l+0xb04>)
 800cd0a:	429d      	cmp	r5, r3
 800cd0c:	f040 80b2 	bne.w	800ce74 <_strtod_l+0xb0c>
 800cd10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cd16:	ec4b ab10 	vmov	d0, sl, fp
 800cd1a:	f001 fc73 	bl	800e604 <__ulp>
 800cd1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd22:	ec51 0b10 	vmov	r0, r1, d0
 800cd26:	f7f3 fc8f 	bl	8000648 <__aeabi_dmul>
 800cd2a:	4652      	mov	r2, sl
 800cd2c:	465b      	mov	r3, fp
 800cd2e:	f7f3 fad5 	bl	80002dc <__adddf3>
 800cd32:	460b      	mov	r3, r1
 800cd34:	4949      	ldr	r1, [pc, #292]	@ (800ce5c <_strtod_l+0xaf4>)
 800cd36:	4a4e      	ldr	r2, [pc, #312]	@ (800ce70 <_strtod_l+0xb08>)
 800cd38:	4019      	ands	r1, r3
 800cd3a:	4291      	cmp	r1, r2
 800cd3c:	4682      	mov	sl, r0
 800cd3e:	d942      	bls.n	800cdc6 <_strtod_l+0xa5e>
 800cd40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd42:	4b47      	ldr	r3, [pc, #284]	@ (800ce60 <_strtod_l+0xaf8>)
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d103      	bne.n	800cd50 <_strtod_l+0x9e8>
 800cd48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	f43f ad2f 	beq.w	800c7ae <_strtod_l+0x446>
 800cd50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ce60 <_strtod_l+0xaf8>
 800cd54:	f04f 3aff 	mov.w	sl, #4294967295
 800cd58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd5a:	9805      	ldr	r0, [sp, #20]
 800cd5c:	f001 f926 	bl	800dfac <_Bfree>
 800cd60:	9805      	ldr	r0, [sp, #20]
 800cd62:	4649      	mov	r1, r9
 800cd64:	f001 f922 	bl	800dfac <_Bfree>
 800cd68:	9805      	ldr	r0, [sp, #20]
 800cd6a:	4641      	mov	r1, r8
 800cd6c:	f001 f91e 	bl	800dfac <_Bfree>
 800cd70:	9805      	ldr	r0, [sp, #20]
 800cd72:	4621      	mov	r1, r4
 800cd74:	f001 f91a 	bl	800dfac <_Bfree>
 800cd78:	e619      	b.n	800c9ae <_strtod_l+0x646>
 800cd7a:	f1ba 0f01 	cmp.w	sl, #1
 800cd7e:	d103      	bne.n	800cd88 <_strtod_l+0xa20>
 800cd80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f43f ada6 	beq.w	800c8d4 <_strtod_l+0x56c>
 800cd88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ce38 <_strtod_l+0xad0>
 800cd8c:	4f35      	ldr	r7, [pc, #212]	@ (800ce64 <_strtod_l+0xafc>)
 800cd8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd92:	2600      	movs	r6, #0
 800cd94:	e7b1      	b.n	800ccfa <_strtod_l+0x992>
 800cd96:	4f34      	ldr	r7, [pc, #208]	@ (800ce68 <_strtod_l+0xb00>)
 800cd98:	2600      	movs	r6, #0
 800cd9a:	e7aa      	b.n	800ccf2 <_strtod_l+0x98a>
 800cd9c:	4b32      	ldr	r3, [pc, #200]	@ (800ce68 <_strtod_l+0xb00>)
 800cd9e:	4630      	mov	r0, r6
 800cda0:	4639      	mov	r1, r7
 800cda2:	2200      	movs	r2, #0
 800cda4:	f7f3 fc50 	bl	8000648 <__aeabi_dmul>
 800cda8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdaa:	4606      	mov	r6, r0
 800cdac:	460f      	mov	r7, r1
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d09f      	beq.n	800ccf2 <_strtod_l+0x98a>
 800cdb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cdb6:	e7a0      	b.n	800ccfa <_strtod_l+0x992>
 800cdb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ce40 <_strtod_l+0xad8>
 800cdbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cdc0:	ec57 6b17 	vmov	r6, r7, d7
 800cdc4:	e799      	b.n	800ccfa <_strtod_l+0x992>
 800cdc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cdca:	9b08      	ldr	r3, [sp, #32]
 800cdcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1c1      	bne.n	800cd58 <_strtod_l+0x9f0>
 800cdd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cdd8:	0d1b      	lsrs	r3, r3, #20
 800cdda:	051b      	lsls	r3, r3, #20
 800cddc:	429d      	cmp	r5, r3
 800cdde:	d1bb      	bne.n	800cd58 <_strtod_l+0x9f0>
 800cde0:	4630      	mov	r0, r6
 800cde2:	4639      	mov	r1, r7
 800cde4:	f7f3 ff90 	bl	8000d08 <__aeabi_d2lz>
 800cde8:	f7f3 fc00 	bl	80005ec <__aeabi_l2d>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	f7f3 fa70 	bl	80002d8 <__aeabi_dsub>
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ce00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ce04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce06:	ea46 060a 	orr.w	r6, r6, sl
 800ce0a:	431e      	orrs	r6, r3
 800ce0c:	d06f      	beq.n	800ceee <_strtod_l+0xb86>
 800ce0e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce48 <_strtod_l+0xae0>)
 800ce10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce14:	f7f3 fe8a 	bl	8000b2c <__aeabi_dcmplt>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	f47f acd3 	bne.w	800c7c4 <_strtod_l+0x45c>
 800ce1e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ce50 <_strtod_l+0xae8>)
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce28:	f7f3 fe9e 	bl	8000b68 <__aeabi_dcmpgt>
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d093      	beq.n	800cd58 <_strtod_l+0x9f0>
 800ce30:	e4c8      	b.n	800c7c4 <_strtod_l+0x45c>
 800ce32:	bf00      	nop
 800ce34:	f3af 8000 	nop.w
 800ce38:	00000000 	.word	0x00000000
 800ce3c:	bff00000 	.word	0xbff00000
 800ce40:	00000000 	.word	0x00000000
 800ce44:	3ff00000 	.word	0x3ff00000
 800ce48:	94a03595 	.word	0x94a03595
 800ce4c:	3fdfffff 	.word	0x3fdfffff
 800ce50:	35afe535 	.word	0x35afe535
 800ce54:	3fe00000 	.word	0x3fe00000
 800ce58:	000fffff 	.word	0x000fffff
 800ce5c:	7ff00000 	.word	0x7ff00000
 800ce60:	7fefffff 	.word	0x7fefffff
 800ce64:	3ff00000 	.word	0x3ff00000
 800ce68:	3fe00000 	.word	0x3fe00000
 800ce6c:	7fe00000 	.word	0x7fe00000
 800ce70:	7c9fffff 	.word	0x7c9fffff
 800ce74:	9b08      	ldr	r3, [sp, #32]
 800ce76:	b323      	cbz	r3, 800cec2 <_strtod_l+0xb5a>
 800ce78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ce7c:	d821      	bhi.n	800cec2 <_strtod_l+0xb5a>
 800ce7e:	a328      	add	r3, pc, #160	@ (adr r3, 800cf20 <_strtod_l+0xbb8>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	4630      	mov	r0, r6
 800ce86:	4639      	mov	r1, r7
 800ce88:	f7f3 fe5a 	bl	8000b40 <__aeabi_dcmple>
 800ce8c:	b1a0      	cbz	r0, 800ceb8 <_strtod_l+0xb50>
 800ce8e:	4639      	mov	r1, r7
 800ce90:	4630      	mov	r0, r6
 800ce92:	f7f3 feb1 	bl	8000bf8 <__aeabi_d2uiz>
 800ce96:	2801      	cmp	r0, #1
 800ce98:	bf38      	it	cc
 800ce9a:	2001      	movcc	r0, #1
 800ce9c:	f7f3 fb5a 	bl	8000554 <__aeabi_ui2d>
 800cea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cea2:	4606      	mov	r6, r0
 800cea4:	460f      	mov	r7, r1
 800cea6:	b9fb      	cbnz	r3, 800cee8 <_strtod_l+0xb80>
 800cea8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ceac:	9014      	str	r0, [sp, #80]	@ 0x50
 800ceae:	9315      	str	r3, [sp, #84]	@ 0x54
 800ceb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ceb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ceb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ceba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cebe:	1b5b      	subs	r3, r3, r5
 800cec0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cec2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cec6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ceca:	f001 fb9b 	bl	800e604 <__ulp>
 800cece:	4650      	mov	r0, sl
 800ced0:	ec53 2b10 	vmov	r2, r3, d0
 800ced4:	4659      	mov	r1, fp
 800ced6:	f7f3 fbb7 	bl	8000648 <__aeabi_dmul>
 800ceda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cede:	f7f3 f9fd 	bl	80002dc <__adddf3>
 800cee2:	4682      	mov	sl, r0
 800cee4:	468b      	mov	fp, r1
 800cee6:	e770      	b.n	800cdca <_strtod_l+0xa62>
 800cee8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ceec:	e7e0      	b.n	800ceb0 <_strtod_l+0xb48>
 800ceee:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf28 <_strtod_l+0xbc0>)
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f7f3 fe1a 	bl	8000b2c <__aeabi_dcmplt>
 800cef8:	e798      	b.n	800ce2c <_strtod_l+0xac4>
 800cefa:	2300      	movs	r3, #0
 800cefc:	930e      	str	r3, [sp, #56]	@ 0x38
 800cefe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cf00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	f7ff ba6d 	b.w	800c3e2 <_strtod_l+0x7a>
 800cf08:	2a65      	cmp	r2, #101	@ 0x65
 800cf0a:	f43f ab68 	beq.w	800c5de <_strtod_l+0x276>
 800cf0e:	2a45      	cmp	r2, #69	@ 0x45
 800cf10:	f43f ab65 	beq.w	800c5de <_strtod_l+0x276>
 800cf14:	2301      	movs	r3, #1
 800cf16:	f7ff bba0 	b.w	800c65a <_strtod_l+0x2f2>
 800cf1a:	bf00      	nop
 800cf1c:	f3af 8000 	nop.w
 800cf20:	ffc00000 	.word	0xffc00000
 800cf24:	41dfffff 	.word	0x41dfffff
 800cf28:	94a03595 	.word	0x94a03595
 800cf2c:	3fcfffff 	.word	0x3fcfffff

0800cf30 <strtof>:
 800cf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf34:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800cff4 <strtof+0xc4>
 800cf38:	4b29      	ldr	r3, [pc, #164]	@ (800cfe0 <strtof+0xb0>)
 800cf3a:	460a      	mov	r2, r1
 800cf3c:	ed2d 8b02 	vpush	{d8}
 800cf40:	4601      	mov	r1, r0
 800cf42:	f8d8 0000 	ldr.w	r0, [r8]
 800cf46:	f7ff fa0f 	bl	800c368 <_strtod_l>
 800cf4a:	ec55 4b10 	vmov	r4, r5, d0
 800cf4e:	4622      	mov	r2, r4
 800cf50:	462b      	mov	r3, r5
 800cf52:	4620      	mov	r0, r4
 800cf54:	4629      	mov	r1, r5
 800cf56:	f7f3 fe11 	bl	8000b7c <__aeabi_dcmpun>
 800cf5a:	b190      	cbz	r0, 800cf82 <strtof+0x52>
 800cf5c:	2d00      	cmp	r5, #0
 800cf5e:	4821      	ldr	r0, [pc, #132]	@ (800cfe4 <strtof+0xb4>)
 800cf60:	da09      	bge.n	800cf76 <strtof+0x46>
 800cf62:	f000 fc29 	bl	800d7b8 <nanf>
 800cf66:	eeb1 8a40 	vneg.f32	s16, s0
 800cf6a:	eeb0 0a48 	vmov.f32	s0, s16
 800cf6e:	ecbd 8b02 	vpop	{d8}
 800cf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf76:	ecbd 8b02 	vpop	{d8}
 800cf7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7e:	f000 bc1b 	b.w	800d7b8 <nanf>
 800cf82:	4620      	mov	r0, r4
 800cf84:	4629      	mov	r1, r5
 800cf86:	f7f3 fe57 	bl	8000c38 <__aeabi_d2f>
 800cf8a:	ee08 0a10 	vmov	s16, r0
 800cf8e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800cfe8 <strtof+0xb8>
 800cf92:	eeb0 7ac8 	vabs.f32	s14, s16
 800cf96:	eeb4 7a67 	vcmp.f32	s14, s15
 800cf9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf9e:	dd11      	ble.n	800cfc4 <strtof+0x94>
 800cfa0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800cfa4:	4b11      	ldr	r3, [pc, #68]	@ (800cfec <strtof+0xbc>)
 800cfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfaa:	4620      	mov	r0, r4
 800cfac:	4639      	mov	r1, r7
 800cfae:	f7f3 fde5 	bl	8000b7c <__aeabi_dcmpun>
 800cfb2:	b980      	cbnz	r0, 800cfd6 <strtof+0xa6>
 800cfb4:	4b0d      	ldr	r3, [pc, #52]	@ (800cfec <strtof+0xbc>)
 800cfb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfba:	4620      	mov	r0, r4
 800cfbc:	4639      	mov	r1, r7
 800cfbe:	f7f3 fdbf 	bl	8000b40 <__aeabi_dcmple>
 800cfc2:	b940      	cbnz	r0, 800cfd6 <strtof+0xa6>
 800cfc4:	ee18 3a10 	vmov	r3, s16
 800cfc8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800cfcc:	d1cd      	bne.n	800cf6a <strtof+0x3a>
 800cfce:	4b08      	ldr	r3, [pc, #32]	@ (800cff0 <strtof+0xc0>)
 800cfd0:	402b      	ands	r3, r5
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0c9      	beq.n	800cf6a <strtof+0x3a>
 800cfd6:	f8d8 3000 	ldr.w	r3, [r8]
 800cfda:	2222      	movs	r2, #34	@ 0x22
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	e7c4      	b.n	800cf6a <strtof+0x3a>
 800cfe0:	20000028 	.word	0x20000028
 800cfe4:	08010d92 	.word	0x08010d92
 800cfe8:	7f7fffff 	.word	0x7f7fffff
 800cfec:	7fefffff 	.word	0x7fefffff
 800cff0:	7ff00000 	.word	0x7ff00000
 800cff4:	20000194 	.word	0x20000194

0800cff8 <_strtol_l.isra.0>:
 800cff8:	2b24      	cmp	r3, #36	@ 0x24
 800cffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cffe:	4686      	mov	lr, r0
 800d000:	4690      	mov	r8, r2
 800d002:	d801      	bhi.n	800d008 <_strtol_l.isra.0+0x10>
 800d004:	2b01      	cmp	r3, #1
 800d006:	d106      	bne.n	800d016 <_strtol_l.isra.0+0x1e>
 800d008:	f000 fb8a 	bl	800d720 <__errno>
 800d00c:	2316      	movs	r3, #22
 800d00e:	6003      	str	r3, [r0, #0]
 800d010:	2000      	movs	r0, #0
 800d012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d016:	4834      	ldr	r0, [pc, #208]	@ (800d0e8 <_strtol_l.isra.0+0xf0>)
 800d018:	460d      	mov	r5, r1
 800d01a:	462a      	mov	r2, r5
 800d01c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d020:	5d06      	ldrb	r6, [r0, r4]
 800d022:	f016 0608 	ands.w	r6, r6, #8
 800d026:	d1f8      	bne.n	800d01a <_strtol_l.isra.0+0x22>
 800d028:	2c2d      	cmp	r4, #45	@ 0x2d
 800d02a:	d110      	bne.n	800d04e <_strtol_l.isra.0+0x56>
 800d02c:	782c      	ldrb	r4, [r5, #0]
 800d02e:	2601      	movs	r6, #1
 800d030:	1c95      	adds	r5, r2, #2
 800d032:	f033 0210 	bics.w	r2, r3, #16
 800d036:	d115      	bne.n	800d064 <_strtol_l.isra.0+0x6c>
 800d038:	2c30      	cmp	r4, #48	@ 0x30
 800d03a:	d10d      	bne.n	800d058 <_strtol_l.isra.0+0x60>
 800d03c:	782a      	ldrb	r2, [r5, #0]
 800d03e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d042:	2a58      	cmp	r2, #88	@ 0x58
 800d044:	d108      	bne.n	800d058 <_strtol_l.isra.0+0x60>
 800d046:	786c      	ldrb	r4, [r5, #1]
 800d048:	3502      	adds	r5, #2
 800d04a:	2310      	movs	r3, #16
 800d04c:	e00a      	b.n	800d064 <_strtol_l.isra.0+0x6c>
 800d04e:	2c2b      	cmp	r4, #43	@ 0x2b
 800d050:	bf04      	itt	eq
 800d052:	782c      	ldrbeq	r4, [r5, #0]
 800d054:	1c95      	addeq	r5, r2, #2
 800d056:	e7ec      	b.n	800d032 <_strtol_l.isra.0+0x3a>
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1f6      	bne.n	800d04a <_strtol_l.isra.0+0x52>
 800d05c:	2c30      	cmp	r4, #48	@ 0x30
 800d05e:	bf14      	ite	ne
 800d060:	230a      	movne	r3, #10
 800d062:	2308      	moveq	r3, #8
 800d064:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d068:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d06c:	2200      	movs	r2, #0
 800d06e:	fbbc f9f3 	udiv	r9, ip, r3
 800d072:	4610      	mov	r0, r2
 800d074:	fb03 ca19 	mls	sl, r3, r9, ip
 800d078:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d07c:	2f09      	cmp	r7, #9
 800d07e:	d80f      	bhi.n	800d0a0 <_strtol_l.isra.0+0xa8>
 800d080:	463c      	mov	r4, r7
 800d082:	42a3      	cmp	r3, r4
 800d084:	dd1b      	ble.n	800d0be <_strtol_l.isra.0+0xc6>
 800d086:	1c57      	adds	r7, r2, #1
 800d088:	d007      	beq.n	800d09a <_strtol_l.isra.0+0xa2>
 800d08a:	4581      	cmp	r9, r0
 800d08c:	d314      	bcc.n	800d0b8 <_strtol_l.isra.0+0xc0>
 800d08e:	d101      	bne.n	800d094 <_strtol_l.isra.0+0x9c>
 800d090:	45a2      	cmp	sl, r4
 800d092:	db11      	blt.n	800d0b8 <_strtol_l.isra.0+0xc0>
 800d094:	fb00 4003 	mla	r0, r0, r3, r4
 800d098:	2201      	movs	r2, #1
 800d09a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d09e:	e7eb      	b.n	800d078 <_strtol_l.isra.0+0x80>
 800d0a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d0a4:	2f19      	cmp	r7, #25
 800d0a6:	d801      	bhi.n	800d0ac <_strtol_l.isra.0+0xb4>
 800d0a8:	3c37      	subs	r4, #55	@ 0x37
 800d0aa:	e7ea      	b.n	800d082 <_strtol_l.isra.0+0x8a>
 800d0ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d0b0:	2f19      	cmp	r7, #25
 800d0b2:	d804      	bhi.n	800d0be <_strtol_l.isra.0+0xc6>
 800d0b4:	3c57      	subs	r4, #87	@ 0x57
 800d0b6:	e7e4      	b.n	800d082 <_strtol_l.isra.0+0x8a>
 800d0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0bc:	e7ed      	b.n	800d09a <_strtol_l.isra.0+0xa2>
 800d0be:	1c53      	adds	r3, r2, #1
 800d0c0:	d108      	bne.n	800d0d4 <_strtol_l.isra.0+0xdc>
 800d0c2:	2322      	movs	r3, #34	@ 0x22
 800d0c4:	f8ce 3000 	str.w	r3, [lr]
 800d0c8:	4660      	mov	r0, ip
 800d0ca:	f1b8 0f00 	cmp.w	r8, #0
 800d0ce:	d0a0      	beq.n	800d012 <_strtol_l.isra.0+0x1a>
 800d0d0:	1e69      	subs	r1, r5, #1
 800d0d2:	e006      	b.n	800d0e2 <_strtol_l.isra.0+0xea>
 800d0d4:	b106      	cbz	r6, 800d0d8 <_strtol_l.isra.0+0xe0>
 800d0d6:	4240      	negs	r0, r0
 800d0d8:	f1b8 0f00 	cmp.w	r8, #0
 800d0dc:	d099      	beq.n	800d012 <_strtol_l.isra.0+0x1a>
 800d0de:	2a00      	cmp	r2, #0
 800d0e0:	d1f6      	bne.n	800d0d0 <_strtol_l.isra.0+0xd8>
 800d0e2:	f8c8 1000 	str.w	r1, [r8]
 800d0e6:	e794      	b.n	800d012 <_strtol_l.isra.0+0x1a>
 800d0e8:	08010ee1 	.word	0x08010ee1

0800d0ec <strtol>:
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	460a      	mov	r2, r1
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	4802      	ldr	r0, [pc, #8]	@ (800d0fc <strtol+0x10>)
 800d0f4:	6800      	ldr	r0, [r0, #0]
 800d0f6:	f7ff bf7f 	b.w	800cff8 <_strtol_l.isra.0>
 800d0fa:	bf00      	nop
 800d0fc:	20000194 	.word	0x20000194

0800d100 <std>:
 800d100:	2300      	movs	r3, #0
 800d102:	b510      	push	{r4, lr}
 800d104:	4604      	mov	r4, r0
 800d106:	e9c0 3300 	strd	r3, r3, [r0]
 800d10a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d10e:	6083      	str	r3, [r0, #8]
 800d110:	8181      	strh	r1, [r0, #12]
 800d112:	6643      	str	r3, [r0, #100]	@ 0x64
 800d114:	81c2      	strh	r2, [r0, #14]
 800d116:	6183      	str	r3, [r0, #24]
 800d118:	4619      	mov	r1, r3
 800d11a:	2208      	movs	r2, #8
 800d11c:	305c      	adds	r0, #92	@ 0x5c
 800d11e:	f000 fa1d 	bl	800d55c <memset>
 800d122:	4b0d      	ldr	r3, [pc, #52]	@ (800d158 <std+0x58>)
 800d124:	6263      	str	r3, [r4, #36]	@ 0x24
 800d126:	4b0d      	ldr	r3, [pc, #52]	@ (800d15c <std+0x5c>)
 800d128:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d12a:	4b0d      	ldr	r3, [pc, #52]	@ (800d160 <std+0x60>)
 800d12c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d12e:	4b0d      	ldr	r3, [pc, #52]	@ (800d164 <std+0x64>)
 800d130:	6323      	str	r3, [r4, #48]	@ 0x30
 800d132:	4b0d      	ldr	r3, [pc, #52]	@ (800d168 <std+0x68>)
 800d134:	6224      	str	r4, [r4, #32]
 800d136:	429c      	cmp	r4, r3
 800d138:	d006      	beq.n	800d148 <std+0x48>
 800d13a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d13e:	4294      	cmp	r4, r2
 800d140:	d002      	beq.n	800d148 <std+0x48>
 800d142:	33d0      	adds	r3, #208	@ 0xd0
 800d144:	429c      	cmp	r4, r3
 800d146:	d105      	bne.n	800d154 <std+0x54>
 800d148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d150:	f000 bb10 	b.w	800d774 <__retarget_lock_init_recursive>
 800d154:	bd10      	pop	{r4, pc}
 800d156:	bf00      	nop
 800d158:	0800d3ad 	.word	0x0800d3ad
 800d15c:	0800d3cf 	.word	0x0800d3cf
 800d160:	0800d407 	.word	0x0800d407
 800d164:	0800d42b 	.word	0x0800d42b
 800d168:	2000118c 	.word	0x2000118c

0800d16c <stdio_exit_handler>:
 800d16c:	4a02      	ldr	r2, [pc, #8]	@ (800d178 <stdio_exit_handler+0xc>)
 800d16e:	4903      	ldr	r1, [pc, #12]	@ (800d17c <stdio_exit_handler+0x10>)
 800d170:	4803      	ldr	r0, [pc, #12]	@ (800d180 <stdio_exit_handler+0x14>)
 800d172:	f000 b869 	b.w	800d248 <_fwalk_sglue>
 800d176:	bf00      	nop
 800d178:	2000001c 	.word	0x2000001c
 800d17c:	0800ef69 	.word	0x0800ef69
 800d180:	20000198 	.word	0x20000198

0800d184 <cleanup_stdio>:
 800d184:	6841      	ldr	r1, [r0, #4]
 800d186:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b8 <cleanup_stdio+0x34>)
 800d188:	4299      	cmp	r1, r3
 800d18a:	b510      	push	{r4, lr}
 800d18c:	4604      	mov	r4, r0
 800d18e:	d001      	beq.n	800d194 <cleanup_stdio+0x10>
 800d190:	f001 feea 	bl	800ef68 <_fflush_r>
 800d194:	68a1      	ldr	r1, [r4, #8]
 800d196:	4b09      	ldr	r3, [pc, #36]	@ (800d1bc <cleanup_stdio+0x38>)
 800d198:	4299      	cmp	r1, r3
 800d19a:	d002      	beq.n	800d1a2 <cleanup_stdio+0x1e>
 800d19c:	4620      	mov	r0, r4
 800d19e:	f001 fee3 	bl	800ef68 <_fflush_r>
 800d1a2:	68e1      	ldr	r1, [r4, #12]
 800d1a4:	4b06      	ldr	r3, [pc, #24]	@ (800d1c0 <cleanup_stdio+0x3c>)
 800d1a6:	4299      	cmp	r1, r3
 800d1a8:	d004      	beq.n	800d1b4 <cleanup_stdio+0x30>
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1b0:	f001 beda 	b.w	800ef68 <_fflush_r>
 800d1b4:	bd10      	pop	{r4, pc}
 800d1b6:	bf00      	nop
 800d1b8:	2000118c 	.word	0x2000118c
 800d1bc:	200011f4 	.word	0x200011f4
 800d1c0:	2000125c 	.word	0x2000125c

0800d1c4 <global_stdio_init.part.0>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f4 <global_stdio_init.part.0+0x30>)
 800d1c8:	4c0b      	ldr	r4, [pc, #44]	@ (800d1f8 <global_stdio_init.part.0+0x34>)
 800d1ca:	4a0c      	ldr	r2, [pc, #48]	@ (800d1fc <global_stdio_init.part.0+0x38>)
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2104      	movs	r1, #4
 800d1d4:	f7ff ff94 	bl	800d100 <std>
 800d1d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d1dc:	2201      	movs	r2, #1
 800d1de:	2109      	movs	r1, #9
 800d1e0:	f7ff ff8e 	bl	800d100 <std>
 800d1e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1ee:	2112      	movs	r1, #18
 800d1f0:	f7ff bf86 	b.w	800d100 <std>
 800d1f4:	200012c4 	.word	0x200012c4
 800d1f8:	2000118c 	.word	0x2000118c
 800d1fc:	0800d16d 	.word	0x0800d16d

0800d200 <__sfp_lock_acquire>:
 800d200:	4801      	ldr	r0, [pc, #4]	@ (800d208 <__sfp_lock_acquire+0x8>)
 800d202:	f000 bab8 	b.w	800d776 <__retarget_lock_acquire_recursive>
 800d206:	bf00      	nop
 800d208:	200012cd 	.word	0x200012cd

0800d20c <__sfp_lock_release>:
 800d20c:	4801      	ldr	r0, [pc, #4]	@ (800d214 <__sfp_lock_release+0x8>)
 800d20e:	f000 bab3 	b.w	800d778 <__retarget_lock_release_recursive>
 800d212:	bf00      	nop
 800d214:	200012cd 	.word	0x200012cd

0800d218 <__sinit>:
 800d218:	b510      	push	{r4, lr}
 800d21a:	4604      	mov	r4, r0
 800d21c:	f7ff fff0 	bl	800d200 <__sfp_lock_acquire>
 800d220:	6a23      	ldr	r3, [r4, #32]
 800d222:	b11b      	cbz	r3, 800d22c <__sinit+0x14>
 800d224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d228:	f7ff bff0 	b.w	800d20c <__sfp_lock_release>
 800d22c:	4b04      	ldr	r3, [pc, #16]	@ (800d240 <__sinit+0x28>)
 800d22e:	6223      	str	r3, [r4, #32]
 800d230:	4b04      	ldr	r3, [pc, #16]	@ (800d244 <__sinit+0x2c>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1f5      	bne.n	800d224 <__sinit+0xc>
 800d238:	f7ff ffc4 	bl	800d1c4 <global_stdio_init.part.0>
 800d23c:	e7f2      	b.n	800d224 <__sinit+0xc>
 800d23e:	bf00      	nop
 800d240:	0800d185 	.word	0x0800d185
 800d244:	200012c4 	.word	0x200012c4

0800d248 <_fwalk_sglue>:
 800d248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d24c:	4607      	mov	r7, r0
 800d24e:	4688      	mov	r8, r1
 800d250:	4614      	mov	r4, r2
 800d252:	2600      	movs	r6, #0
 800d254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d258:	f1b9 0901 	subs.w	r9, r9, #1
 800d25c:	d505      	bpl.n	800d26a <_fwalk_sglue+0x22>
 800d25e:	6824      	ldr	r4, [r4, #0]
 800d260:	2c00      	cmp	r4, #0
 800d262:	d1f7      	bne.n	800d254 <_fwalk_sglue+0xc>
 800d264:	4630      	mov	r0, r6
 800d266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d26a:	89ab      	ldrh	r3, [r5, #12]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d907      	bls.n	800d280 <_fwalk_sglue+0x38>
 800d270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d274:	3301      	adds	r3, #1
 800d276:	d003      	beq.n	800d280 <_fwalk_sglue+0x38>
 800d278:	4629      	mov	r1, r5
 800d27a:	4638      	mov	r0, r7
 800d27c:	47c0      	blx	r8
 800d27e:	4306      	orrs	r6, r0
 800d280:	3568      	adds	r5, #104	@ 0x68
 800d282:	e7e9      	b.n	800d258 <_fwalk_sglue+0x10>

0800d284 <_puts_r>:
 800d284:	6a03      	ldr	r3, [r0, #32]
 800d286:	b570      	push	{r4, r5, r6, lr}
 800d288:	6884      	ldr	r4, [r0, #8]
 800d28a:	4605      	mov	r5, r0
 800d28c:	460e      	mov	r6, r1
 800d28e:	b90b      	cbnz	r3, 800d294 <_puts_r+0x10>
 800d290:	f7ff ffc2 	bl	800d218 <__sinit>
 800d294:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d296:	07db      	lsls	r3, r3, #31
 800d298:	d405      	bmi.n	800d2a6 <_puts_r+0x22>
 800d29a:	89a3      	ldrh	r3, [r4, #12]
 800d29c:	0598      	lsls	r0, r3, #22
 800d29e:	d402      	bmi.n	800d2a6 <_puts_r+0x22>
 800d2a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2a2:	f000 fa68 	bl	800d776 <__retarget_lock_acquire_recursive>
 800d2a6:	89a3      	ldrh	r3, [r4, #12]
 800d2a8:	0719      	lsls	r1, r3, #28
 800d2aa:	d502      	bpl.n	800d2b2 <_puts_r+0x2e>
 800d2ac:	6923      	ldr	r3, [r4, #16]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d135      	bne.n	800d31e <_puts_r+0x9a>
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	f000 f8fb 	bl	800d4b0 <__swsetup_r>
 800d2ba:	b380      	cbz	r0, 800d31e <_puts_r+0x9a>
 800d2bc:	f04f 35ff 	mov.w	r5, #4294967295
 800d2c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2c2:	07da      	lsls	r2, r3, #31
 800d2c4:	d405      	bmi.n	800d2d2 <_puts_r+0x4e>
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	059b      	lsls	r3, r3, #22
 800d2ca:	d402      	bmi.n	800d2d2 <_puts_r+0x4e>
 800d2cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2ce:	f000 fa53 	bl	800d778 <__retarget_lock_release_recursive>
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	bd70      	pop	{r4, r5, r6, pc}
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	da04      	bge.n	800d2e4 <_puts_r+0x60>
 800d2da:	69a2      	ldr	r2, [r4, #24]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	dc17      	bgt.n	800d310 <_puts_r+0x8c>
 800d2e0:	290a      	cmp	r1, #10
 800d2e2:	d015      	beq.n	800d310 <_puts_r+0x8c>
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	1c5a      	adds	r2, r3, #1
 800d2e8:	6022      	str	r2, [r4, #0]
 800d2ea:	7019      	strb	r1, [r3, #0]
 800d2ec:	68a3      	ldr	r3, [r4, #8]
 800d2ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	60a3      	str	r3, [r4, #8]
 800d2f6:	2900      	cmp	r1, #0
 800d2f8:	d1ed      	bne.n	800d2d6 <_puts_r+0x52>
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	da11      	bge.n	800d322 <_puts_r+0x9e>
 800d2fe:	4622      	mov	r2, r4
 800d300:	210a      	movs	r1, #10
 800d302:	4628      	mov	r0, r5
 800d304:	f000 f895 	bl	800d432 <__swbuf_r>
 800d308:	3001      	adds	r0, #1
 800d30a:	d0d7      	beq.n	800d2bc <_puts_r+0x38>
 800d30c:	250a      	movs	r5, #10
 800d30e:	e7d7      	b.n	800d2c0 <_puts_r+0x3c>
 800d310:	4622      	mov	r2, r4
 800d312:	4628      	mov	r0, r5
 800d314:	f000 f88d 	bl	800d432 <__swbuf_r>
 800d318:	3001      	adds	r0, #1
 800d31a:	d1e7      	bne.n	800d2ec <_puts_r+0x68>
 800d31c:	e7ce      	b.n	800d2bc <_puts_r+0x38>
 800d31e:	3e01      	subs	r6, #1
 800d320:	e7e4      	b.n	800d2ec <_puts_r+0x68>
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	1c5a      	adds	r2, r3, #1
 800d326:	6022      	str	r2, [r4, #0]
 800d328:	220a      	movs	r2, #10
 800d32a:	701a      	strb	r2, [r3, #0]
 800d32c:	e7ee      	b.n	800d30c <_puts_r+0x88>
	...

0800d330 <puts>:
 800d330:	4b02      	ldr	r3, [pc, #8]	@ (800d33c <puts+0xc>)
 800d332:	4601      	mov	r1, r0
 800d334:	6818      	ldr	r0, [r3, #0]
 800d336:	f7ff bfa5 	b.w	800d284 <_puts_r>
 800d33a:	bf00      	nop
 800d33c:	20000194 	.word	0x20000194

0800d340 <sniprintf>:
 800d340:	b40c      	push	{r2, r3}
 800d342:	b530      	push	{r4, r5, lr}
 800d344:	4b18      	ldr	r3, [pc, #96]	@ (800d3a8 <sniprintf+0x68>)
 800d346:	1e0c      	subs	r4, r1, #0
 800d348:	681d      	ldr	r5, [r3, #0]
 800d34a:	b09d      	sub	sp, #116	@ 0x74
 800d34c:	da08      	bge.n	800d360 <sniprintf+0x20>
 800d34e:	238b      	movs	r3, #139	@ 0x8b
 800d350:	602b      	str	r3, [r5, #0]
 800d352:	f04f 30ff 	mov.w	r0, #4294967295
 800d356:	b01d      	add	sp, #116	@ 0x74
 800d358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d35c:	b002      	add	sp, #8
 800d35e:	4770      	bx	lr
 800d360:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d364:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d368:	f04f 0300 	mov.w	r3, #0
 800d36c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d36e:	bf14      	ite	ne
 800d370:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d374:	4623      	moveq	r3, r4
 800d376:	9304      	str	r3, [sp, #16]
 800d378:	9307      	str	r3, [sp, #28]
 800d37a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d37e:	9002      	str	r0, [sp, #8]
 800d380:	9006      	str	r0, [sp, #24]
 800d382:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d386:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d388:	ab21      	add	r3, sp, #132	@ 0x84
 800d38a:	a902      	add	r1, sp, #8
 800d38c:	4628      	mov	r0, r5
 800d38e:	9301      	str	r3, [sp, #4]
 800d390:	f001 fade 	bl	800e950 <_svfiprintf_r>
 800d394:	1c43      	adds	r3, r0, #1
 800d396:	bfbc      	itt	lt
 800d398:	238b      	movlt	r3, #139	@ 0x8b
 800d39a:	602b      	strlt	r3, [r5, #0]
 800d39c:	2c00      	cmp	r4, #0
 800d39e:	d0da      	beq.n	800d356 <sniprintf+0x16>
 800d3a0:	9b02      	ldr	r3, [sp, #8]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	701a      	strb	r2, [r3, #0]
 800d3a6:	e7d6      	b.n	800d356 <sniprintf+0x16>
 800d3a8:	20000194 	.word	0x20000194

0800d3ac <__sread>:
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b4:	f000 f980 	bl	800d6b8 <_read_r>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	bfab      	itete	ge
 800d3bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d3be:	89a3      	ldrhlt	r3, [r4, #12]
 800d3c0:	181b      	addge	r3, r3, r0
 800d3c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d3c6:	bfac      	ite	ge
 800d3c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d3ca:	81a3      	strhlt	r3, [r4, #12]
 800d3cc:	bd10      	pop	{r4, pc}

0800d3ce <__swrite>:
 800d3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d2:	461f      	mov	r7, r3
 800d3d4:	898b      	ldrh	r3, [r1, #12]
 800d3d6:	05db      	lsls	r3, r3, #23
 800d3d8:	4605      	mov	r5, r0
 800d3da:	460c      	mov	r4, r1
 800d3dc:	4616      	mov	r6, r2
 800d3de:	d505      	bpl.n	800d3ec <__swrite+0x1e>
 800d3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f000 f954 	bl	800d694 <_lseek_r>
 800d3ec:	89a3      	ldrh	r3, [r4, #12]
 800d3ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d3f6:	81a3      	strh	r3, [r4, #12]
 800d3f8:	4632      	mov	r2, r6
 800d3fa:	463b      	mov	r3, r7
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d402:	f000 b97b 	b.w	800d6fc <_write_r>

0800d406 <__sseek>:
 800d406:	b510      	push	{r4, lr}
 800d408:	460c      	mov	r4, r1
 800d40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d40e:	f000 f941 	bl	800d694 <_lseek_r>
 800d412:	1c43      	adds	r3, r0, #1
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	bf15      	itete	ne
 800d418:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d41a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d41e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d422:	81a3      	strheq	r3, [r4, #12]
 800d424:	bf18      	it	ne
 800d426:	81a3      	strhne	r3, [r4, #12]
 800d428:	bd10      	pop	{r4, pc}

0800d42a <__sclose>:
 800d42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42e:	f000 b921 	b.w	800d674 <_close_r>

0800d432 <__swbuf_r>:
 800d432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d434:	460e      	mov	r6, r1
 800d436:	4614      	mov	r4, r2
 800d438:	4605      	mov	r5, r0
 800d43a:	b118      	cbz	r0, 800d444 <__swbuf_r+0x12>
 800d43c:	6a03      	ldr	r3, [r0, #32]
 800d43e:	b90b      	cbnz	r3, 800d444 <__swbuf_r+0x12>
 800d440:	f7ff feea 	bl	800d218 <__sinit>
 800d444:	69a3      	ldr	r3, [r4, #24]
 800d446:	60a3      	str	r3, [r4, #8]
 800d448:	89a3      	ldrh	r3, [r4, #12]
 800d44a:	071a      	lsls	r2, r3, #28
 800d44c:	d501      	bpl.n	800d452 <__swbuf_r+0x20>
 800d44e:	6923      	ldr	r3, [r4, #16]
 800d450:	b943      	cbnz	r3, 800d464 <__swbuf_r+0x32>
 800d452:	4621      	mov	r1, r4
 800d454:	4628      	mov	r0, r5
 800d456:	f000 f82b 	bl	800d4b0 <__swsetup_r>
 800d45a:	b118      	cbz	r0, 800d464 <__swbuf_r+0x32>
 800d45c:	f04f 37ff 	mov.w	r7, #4294967295
 800d460:	4638      	mov	r0, r7
 800d462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	6922      	ldr	r2, [r4, #16]
 800d468:	1a98      	subs	r0, r3, r2
 800d46a:	6963      	ldr	r3, [r4, #20]
 800d46c:	b2f6      	uxtb	r6, r6
 800d46e:	4283      	cmp	r3, r0
 800d470:	4637      	mov	r7, r6
 800d472:	dc05      	bgt.n	800d480 <__swbuf_r+0x4e>
 800d474:	4621      	mov	r1, r4
 800d476:	4628      	mov	r0, r5
 800d478:	f001 fd76 	bl	800ef68 <_fflush_r>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d1ed      	bne.n	800d45c <__swbuf_r+0x2a>
 800d480:	68a3      	ldr	r3, [r4, #8]
 800d482:	3b01      	subs	r3, #1
 800d484:	60a3      	str	r3, [r4, #8]
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	1c5a      	adds	r2, r3, #1
 800d48a:	6022      	str	r2, [r4, #0]
 800d48c:	701e      	strb	r6, [r3, #0]
 800d48e:	6962      	ldr	r2, [r4, #20]
 800d490:	1c43      	adds	r3, r0, #1
 800d492:	429a      	cmp	r2, r3
 800d494:	d004      	beq.n	800d4a0 <__swbuf_r+0x6e>
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	07db      	lsls	r3, r3, #31
 800d49a:	d5e1      	bpl.n	800d460 <__swbuf_r+0x2e>
 800d49c:	2e0a      	cmp	r6, #10
 800d49e:	d1df      	bne.n	800d460 <__swbuf_r+0x2e>
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	f001 fd60 	bl	800ef68 <_fflush_r>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	d0d9      	beq.n	800d460 <__swbuf_r+0x2e>
 800d4ac:	e7d6      	b.n	800d45c <__swbuf_r+0x2a>
	...

0800d4b0 <__swsetup_r>:
 800d4b0:	b538      	push	{r3, r4, r5, lr}
 800d4b2:	4b29      	ldr	r3, [pc, #164]	@ (800d558 <__swsetup_r+0xa8>)
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	460c      	mov	r4, r1
 800d4ba:	b118      	cbz	r0, 800d4c4 <__swsetup_r+0x14>
 800d4bc:	6a03      	ldr	r3, [r0, #32]
 800d4be:	b90b      	cbnz	r3, 800d4c4 <__swsetup_r+0x14>
 800d4c0:	f7ff feaa 	bl	800d218 <__sinit>
 800d4c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4c8:	0719      	lsls	r1, r3, #28
 800d4ca:	d422      	bmi.n	800d512 <__swsetup_r+0x62>
 800d4cc:	06da      	lsls	r2, r3, #27
 800d4ce:	d407      	bmi.n	800d4e0 <__swsetup_r+0x30>
 800d4d0:	2209      	movs	r2, #9
 800d4d2:	602a      	str	r2, [r5, #0]
 800d4d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4d8:	81a3      	strh	r3, [r4, #12]
 800d4da:	f04f 30ff 	mov.w	r0, #4294967295
 800d4de:	e033      	b.n	800d548 <__swsetup_r+0x98>
 800d4e0:	0758      	lsls	r0, r3, #29
 800d4e2:	d512      	bpl.n	800d50a <__swsetup_r+0x5a>
 800d4e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4e6:	b141      	cbz	r1, 800d4fa <__swsetup_r+0x4a>
 800d4e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4ec:	4299      	cmp	r1, r3
 800d4ee:	d002      	beq.n	800d4f6 <__swsetup_r+0x46>
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f000 f985 	bl	800d800 <_free_r>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4fa:	89a3      	ldrh	r3, [r4, #12]
 800d4fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d500:	81a3      	strh	r3, [r4, #12]
 800d502:	2300      	movs	r3, #0
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	6923      	ldr	r3, [r4, #16]
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f043 0308 	orr.w	r3, r3, #8
 800d510:	81a3      	strh	r3, [r4, #12]
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	b94b      	cbnz	r3, 800d52a <__swsetup_r+0x7a>
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d51c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d520:	d003      	beq.n	800d52a <__swsetup_r+0x7a>
 800d522:	4621      	mov	r1, r4
 800d524:	4628      	mov	r0, r5
 800d526:	f001 fd7f 	bl	800f028 <__smakebuf_r>
 800d52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d52e:	f013 0201 	ands.w	r2, r3, #1
 800d532:	d00a      	beq.n	800d54a <__swsetup_r+0x9a>
 800d534:	2200      	movs	r2, #0
 800d536:	60a2      	str	r2, [r4, #8]
 800d538:	6962      	ldr	r2, [r4, #20]
 800d53a:	4252      	negs	r2, r2
 800d53c:	61a2      	str	r2, [r4, #24]
 800d53e:	6922      	ldr	r2, [r4, #16]
 800d540:	b942      	cbnz	r2, 800d554 <__swsetup_r+0xa4>
 800d542:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d546:	d1c5      	bne.n	800d4d4 <__swsetup_r+0x24>
 800d548:	bd38      	pop	{r3, r4, r5, pc}
 800d54a:	0799      	lsls	r1, r3, #30
 800d54c:	bf58      	it	pl
 800d54e:	6962      	ldrpl	r2, [r4, #20]
 800d550:	60a2      	str	r2, [r4, #8]
 800d552:	e7f4      	b.n	800d53e <__swsetup_r+0x8e>
 800d554:	2000      	movs	r0, #0
 800d556:	e7f7      	b.n	800d548 <__swsetup_r+0x98>
 800d558:	20000194 	.word	0x20000194

0800d55c <memset>:
 800d55c:	4402      	add	r2, r0
 800d55e:	4603      	mov	r3, r0
 800d560:	4293      	cmp	r3, r2
 800d562:	d100      	bne.n	800d566 <memset+0xa>
 800d564:	4770      	bx	lr
 800d566:	f803 1b01 	strb.w	r1, [r3], #1
 800d56a:	e7f9      	b.n	800d560 <memset+0x4>

0800d56c <strncmp>:
 800d56c:	b510      	push	{r4, lr}
 800d56e:	b16a      	cbz	r2, 800d58c <strncmp+0x20>
 800d570:	3901      	subs	r1, #1
 800d572:	1884      	adds	r4, r0, r2
 800d574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d578:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d103      	bne.n	800d588 <strncmp+0x1c>
 800d580:	42a0      	cmp	r0, r4
 800d582:	d001      	beq.n	800d588 <strncmp+0x1c>
 800d584:	2a00      	cmp	r2, #0
 800d586:	d1f5      	bne.n	800d574 <strncmp+0x8>
 800d588:	1ad0      	subs	r0, r2, r3
 800d58a:	bd10      	pop	{r4, pc}
 800d58c:	4610      	mov	r0, r2
 800d58e:	e7fc      	b.n	800d58a <strncmp+0x1e>

0800d590 <strtok>:
 800d590:	4b16      	ldr	r3, [pc, #88]	@ (800d5ec <strtok+0x5c>)
 800d592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d596:	681f      	ldr	r7, [r3, #0]
 800d598:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d59a:	4605      	mov	r5, r0
 800d59c:	460e      	mov	r6, r1
 800d59e:	b9ec      	cbnz	r4, 800d5dc <strtok+0x4c>
 800d5a0:	2050      	movs	r0, #80	@ 0x50
 800d5a2:	f7fe fe05 	bl	800c1b0 <malloc>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	6478      	str	r0, [r7, #68]	@ 0x44
 800d5aa:	b920      	cbnz	r0, 800d5b6 <strtok+0x26>
 800d5ac:	4b10      	ldr	r3, [pc, #64]	@ (800d5f0 <strtok+0x60>)
 800d5ae:	4811      	ldr	r0, [pc, #68]	@ (800d5f4 <strtok+0x64>)
 800d5b0:	215b      	movs	r1, #91	@ 0x5b
 800d5b2:	f000 f907 	bl	800d7c4 <__assert_func>
 800d5b6:	e9c0 4400 	strd	r4, r4, [r0]
 800d5ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d5be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d5c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d5c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d5ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d5ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d5d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d5d6:	6184      	str	r4, [r0, #24]
 800d5d8:	7704      	strb	r4, [r0, #28]
 800d5da:	6244      	str	r4, [r0, #36]	@ 0x24
 800d5dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5de:	4631      	mov	r1, r6
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e8:	f000 b806 	b.w	800d5f8 <__strtok_r>
 800d5ec:	20000194 	.word	0x20000194
 800d5f0:	08010cde 	.word	0x08010cde
 800d5f4:	08010cf5 	.word	0x08010cf5

0800d5f8 <__strtok_r>:
 800d5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	b908      	cbnz	r0, 800d602 <__strtok_r+0xa>
 800d5fe:	6814      	ldr	r4, [r2, #0]
 800d600:	b144      	cbz	r4, 800d614 <__strtok_r+0x1c>
 800d602:	4620      	mov	r0, r4
 800d604:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d608:	460f      	mov	r7, r1
 800d60a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d60e:	b91e      	cbnz	r6, 800d618 <__strtok_r+0x20>
 800d610:	b965      	cbnz	r5, 800d62c <__strtok_r+0x34>
 800d612:	6015      	str	r5, [r2, #0]
 800d614:	2000      	movs	r0, #0
 800d616:	e005      	b.n	800d624 <__strtok_r+0x2c>
 800d618:	42b5      	cmp	r5, r6
 800d61a:	d1f6      	bne.n	800d60a <__strtok_r+0x12>
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1f0      	bne.n	800d602 <__strtok_r+0xa>
 800d620:	6014      	str	r4, [r2, #0]
 800d622:	7003      	strb	r3, [r0, #0]
 800d624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d626:	461c      	mov	r4, r3
 800d628:	e00c      	b.n	800d644 <__strtok_r+0x4c>
 800d62a:	b91d      	cbnz	r5, 800d634 <__strtok_r+0x3c>
 800d62c:	4627      	mov	r7, r4
 800d62e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d632:	460e      	mov	r6, r1
 800d634:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d638:	42ab      	cmp	r3, r5
 800d63a:	d1f6      	bne.n	800d62a <__strtok_r+0x32>
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d0f2      	beq.n	800d626 <__strtok_r+0x2e>
 800d640:	2300      	movs	r3, #0
 800d642:	703b      	strb	r3, [r7, #0]
 800d644:	6014      	str	r4, [r2, #0]
 800d646:	e7ed      	b.n	800d624 <__strtok_r+0x2c>

0800d648 <strstr>:
 800d648:	780a      	ldrb	r2, [r1, #0]
 800d64a:	b570      	push	{r4, r5, r6, lr}
 800d64c:	b96a      	cbnz	r2, 800d66a <strstr+0x22>
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
 800d650:	429a      	cmp	r2, r3
 800d652:	d109      	bne.n	800d668 <strstr+0x20>
 800d654:	460c      	mov	r4, r1
 800d656:	4605      	mov	r5, r0
 800d658:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d0f6      	beq.n	800d64e <strstr+0x6>
 800d660:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d664:	429e      	cmp	r6, r3
 800d666:	d0f7      	beq.n	800d658 <strstr+0x10>
 800d668:	3001      	adds	r0, #1
 800d66a:	7803      	ldrb	r3, [r0, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1ef      	bne.n	800d650 <strstr+0x8>
 800d670:	4618      	mov	r0, r3
 800d672:	e7ec      	b.n	800d64e <strstr+0x6>

0800d674 <_close_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	4d06      	ldr	r5, [pc, #24]	@ (800d690 <_close_r+0x1c>)
 800d678:	2300      	movs	r3, #0
 800d67a:	4604      	mov	r4, r0
 800d67c:	4608      	mov	r0, r1
 800d67e:	602b      	str	r3, [r5, #0]
 800d680:	f7f6 f848 	bl	8003714 <_close>
 800d684:	1c43      	adds	r3, r0, #1
 800d686:	d102      	bne.n	800d68e <_close_r+0x1a>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	b103      	cbz	r3, 800d68e <_close_r+0x1a>
 800d68c:	6023      	str	r3, [r4, #0]
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
 800d690:	200012c8 	.word	0x200012c8

0800d694 <_lseek_r>:
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	4d07      	ldr	r5, [pc, #28]	@ (800d6b4 <_lseek_r+0x20>)
 800d698:	4604      	mov	r4, r0
 800d69a:	4608      	mov	r0, r1
 800d69c:	4611      	mov	r1, r2
 800d69e:	2200      	movs	r2, #0
 800d6a0:	602a      	str	r2, [r5, #0]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	f7f6 f85d 	bl	8003762 <_lseek>
 800d6a8:	1c43      	adds	r3, r0, #1
 800d6aa:	d102      	bne.n	800d6b2 <_lseek_r+0x1e>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	b103      	cbz	r3, 800d6b2 <_lseek_r+0x1e>
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	bd38      	pop	{r3, r4, r5, pc}
 800d6b4:	200012c8 	.word	0x200012c8

0800d6b8 <_read_r>:
 800d6b8:	b538      	push	{r3, r4, r5, lr}
 800d6ba:	4d07      	ldr	r5, [pc, #28]	@ (800d6d8 <_read_r+0x20>)
 800d6bc:	4604      	mov	r4, r0
 800d6be:	4608      	mov	r0, r1
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	602a      	str	r2, [r5, #0]
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	f7f5 ffeb 	bl	80036a2 <_read>
 800d6cc:	1c43      	adds	r3, r0, #1
 800d6ce:	d102      	bne.n	800d6d6 <_read_r+0x1e>
 800d6d0:	682b      	ldr	r3, [r5, #0]
 800d6d2:	b103      	cbz	r3, 800d6d6 <_read_r+0x1e>
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	bd38      	pop	{r3, r4, r5, pc}
 800d6d8:	200012c8 	.word	0x200012c8

0800d6dc <_sbrk_r>:
 800d6dc:	b538      	push	{r3, r4, r5, lr}
 800d6de:	4d06      	ldr	r5, [pc, #24]	@ (800d6f8 <_sbrk_r+0x1c>)
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	4608      	mov	r0, r1
 800d6e6:	602b      	str	r3, [r5, #0]
 800d6e8:	f7f6 f848 	bl	800377c <_sbrk>
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	d102      	bne.n	800d6f6 <_sbrk_r+0x1a>
 800d6f0:	682b      	ldr	r3, [r5, #0]
 800d6f2:	b103      	cbz	r3, 800d6f6 <_sbrk_r+0x1a>
 800d6f4:	6023      	str	r3, [r4, #0]
 800d6f6:	bd38      	pop	{r3, r4, r5, pc}
 800d6f8:	200012c8 	.word	0x200012c8

0800d6fc <_write_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d07      	ldr	r5, [pc, #28]	@ (800d71c <_write_r+0x20>)
 800d700:	4604      	mov	r4, r0
 800d702:	4608      	mov	r0, r1
 800d704:	4611      	mov	r1, r2
 800d706:	2200      	movs	r2, #0
 800d708:	602a      	str	r2, [r5, #0]
 800d70a:	461a      	mov	r2, r3
 800d70c:	f7f5 ffe6 	bl	80036dc <_write>
 800d710:	1c43      	adds	r3, r0, #1
 800d712:	d102      	bne.n	800d71a <_write_r+0x1e>
 800d714:	682b      	ldr	r3, [r5, #0]
 800d716:	b103      	cbz	r3, 800d71a <_write_r+0x1e>
 800d718:	6023      	str	r3, [r4, #0]
 800d71a:	bd38      	pop	{r3, r4, r5, pc}
 800d71c:	200012c8 	.word	0x200012c8

0800d720 <__errno>:
 800d720:	4b01      	ldr	r3, [pc, #4]	@ (800d728 <__errno+0x8>)
 800d722:	6818      	ldr	r0, [r3, #0]
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	20000194 	.word	0x20000194

0800d72c <__libc_init_array>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	4d0d      	ldr	r5, [pc, #52]	@ (800d764 <__libc_init_array+0x38>)
 800d730:	4c0d      	ldr	r4, [pc, #52]	@ (800d768 <__libc_init_array+0x3c>)
 800d732:	1b64      	subs	r4, r4, r5
 800d734:	10a4      	asrs	r4, r4, #2
 800d736:	2600      	movs	r6, #0
 800d738:	42a6      	cmp	r6, r4
 800d73a:	d109      	bne.n	800d750 <__libc_init_array+0x24>
 800d73c:	4d0b      	ldr	r5, [pc, #44]	@ (800d76c <__libc_init_array+0x40>)
 800d73e:	4c0c      	ldr	r4, [pc, #48]	@ (800d770 <__libc_init_array+0x44>)
 800d740:	f002 fde6 	bl	8010310 <_init>
 800d744:	1b64      	subs	r4, r4, r5
 800d746:	10a4      	asrs	r4, r4, #2
 800d748:	2600      	movs	r6, #0
 800d74a:	42a6      	cmp	r6, r4
 800d74c:	d105      	bne.n	800d75a <__libc_init_array+0x2e>
 800d74e:	bd70      	pop	{r4, r5, r6, pc}
 800d750:	f855 3b04 	ldr.w	r3, [r5], #4
 800d754:	4798      	blx	r3
 800d756:	3601      	adds	r6, #1
 800d758:	e7ee      	b.n	800d738 <__libc_init_array+0xc>
 800d75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d75e:	4798      	blx	r3
 800d760:	3601      	adds	r6, #1
 800d762:	e7f2      	b.n	800d74a <__libc_init_array+0x1e>
 800d764:	080114b8 	.word	0x080114b8
 800d768:	080114b8 	.word	0x080114b8
 800d76c:	080114b8 	.word	0x080114b8
 800d770:	080114bc 	.word	0x080114bc

0800d774 <__retarget_lock_init_recursive>:
 800d774:	4770      	bx	lr

0800d776 <__retarget_lock_acquire_recursive>:
 800d776:	4770      	bx	lr

0800d778 <__retarget_lock_release_recursive>:
 800d778:	4770      	bx	lr

0800d77a <strcpy>:
 800d77a:	4603      	mov	r3, r0
 800d77c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d780:	f803 2b01 	strb.w	r2, [r3], #1
 800d784:	2a00      	cmp	r2, #0
 800d786:	d1f9      	bne.n	800d77c <strcpy+0x2>
 800d788:	4770      	bx	lr

0800d78a <memcpy>:
 800d78a:	440a      	add	r2, r1
 800d78c:	4291      	cmp	r1, r2
 800d78e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d792:	d100      	bne.n	800d796 <memcpy+0xc>
 800d794:	4770      	bx	lr
 800d796:	b510      	push	{r4, lr}
 800d798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d79c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7a0:	4291      	cmp	r1, r2
 800d7a2:	d1f9      	bne.n	800d798 <memcpy+0xe>
 800d7a4:	bd10      	pop	{r4, pc}
	...

0800d7a8 <nan>:
 800d7a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7b0 <nan+0x8>
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	00000000 	.word	0x00000000
 800d7b4:	7ff80000 	.word	0x7ff80000

0800d7b8 <nanf>:
 800d7b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d7c0 <nanf+0x8>
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop
 800d7c0:	7fc00000 	.word	0x7fc00000

0800d7c4 <__assert_func>:
 800d7c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7c6:	4614      	mov	r4, r2
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	4b09      	ldr	r3, [pc, #36]	@ (800d7f0 <__assert_func+0x2c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	68d8      	ldr	r0, [r3, #12]
 800d7d2:	b14c      	cbz	r4, 800d7e8 <__assert_func+0x24>
 800d7d4:	4b07      	ldr	r3, [pc, #28]	@ (800d7f4 <__assert_func+0x30>)
 800d7d6:	9100      	str	r1, [sp, #0]
 800d7d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7dc:	4906      	ldr	r1, [pc, #24]	@ (800d7f8 <__assert_func+0x34>)
 800d7de:	462b      	mov	r3, r5
 800d7e0:	f001 fbea 	bl	800efb8 <fiprintf>
 800d7e4:	f001 fc98 	bl	800f118 <abort>
 800d7e8:	4b04      	ldr	r3, [pc, #16]	@ (800d7fc <__assert_func+0x38>)
 800d7ea:	461c      	mov	r4, r3
 800d7ec:	e7f3      	b.n	800d7d6 <__assert_func+0x12>
 800d7ee:	bf00      	nop
 800d7f0:	20000194 	.word	0x20000194
 800d7f4:	08010d57 	.word	0x08010d57
 800d7f8:	08010d64 	.word	0x08010d64
 800d7fc:	08010d92 	.word	0x08010d92

0800d800 <_free_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	4605      	mov	r5, r0
 800d804:	2900      	cmp	r1, #0
 800d806:	d041      	beq.n	800d88c <_free_r+0x8c>
 800d808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d80c:	1f0c      	subs	r4, r1, #4
 800d80e:	2b00      	cmp	r3, #0
 800d810:	bfb8      	it	lt
 800d812:	18e4      	addlt	r4, r4, r3
 800d814:	f7fe fd7e 	bl	800c314 <__malloc_lock>
 800d818:	4a1d      	ldr	r2, [pc, #116]	@ (800d890 <_free_r+0x90>)
 800d81a:	6813      	ldr	r3, [r2, #0]
 800d81c:	b933      	cbnz	r3, 800d82c <_free_r+0x2c>
 800d81e:	6063      	str	r3, [r4, #4]
 800d820:	6014      	str	r4, [r2, #0]
 800d822:	4628      	mov	r0, r5
 800d824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d828:	f7fe bd7a 	b.w	800c320 <__malloc_unlock>
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	d908      	bls.n	800d842 <_free_r+0x42>
 800d830:	6820      	ldr	r0, [r4, #0]
 800d832:	1821      	adds	r1, r4, r0
 800d834:	428b      	cmp	r3, r1
 800d836:	bf01      	itttt	eq
 800d838:	6819      	ldreq	r1, [r3, #0]
 800d83a:	685b      	ldreq	r3, [r3, #4]
 800d83c:	1809      	addeq	r1, r1, r0
 800d83e:	6021      	streq	r1, [r4, #0]
 800d840:	e7ed      	b.n	800d81e <_free_r+0x1e>
 800d842:	461a      	mov	r2, r3
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	b10b      	cbz	r3, 800d84c <_free_r+0x4c>
 800d848:	42a3      	cmp	r3, r4
 800d84a:	d9fa      	bls.n	800d842 <_free_r+0x42>
 800d84c:	6811      	ldr	r1, [r2, #0]
 800d84e:	1850      	adds	r0, r2, r1
 800d850:	42a0      	cmp	r0, r4
 800d852:	d10b      	bne.n	800d86c <_free_r+0x6c>
 800d854:	6820      	ldr	r0, [r4, #0]
 800d856:	4401      	add	r1, r0
 800d858:	1850      	adds	r0, r2, r1
 800d85a:	4283      	cmp	r3, r0
 800d85c:	6011      	str	r1, [r2, #0]
 800d85e:	d1e0      	bne.n	800d822 <_free_r+0x22>
 800d860:	6818      	ldr	r0, [r3, #0]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	6053      	str	r3, [r2, #4]
 800d866:	4408      	add	r0, r1
 800d868:	6010      	str	r0, [r2, #0]
 800d86a:	e7da      	b.n	800d822 <_free_r+0x22>
 800d86c:	d902      	bls.n	800d874 <_free_r+0x74>
 800d86e:	230c      	movs	r3, #12
 800d870:	602b      	str	r3, [r5, #0]
 800d872:	e7d6      	b.n	800d822 <_free_r+0x22>
 800d874:	6820      	ldr	r0, [r4, #0]
 800d876:	1821      	adds	r1, r4, r0
 800d878:	428b      	cmp	r3, r1
 800d87a:	bf04      	itt	eq
 800d87c:	6819      	ldreq	r1, [r3, #0]
 800d87e:	685b      	ldreq	r3, [r3, #4]
 800d880:	6063      	str	r3, [r4, #4]
 800d882:	bf04      	itt	eq
 800d884:	1809      	addeq	r1, r1, r0
 800d886:	6021      	streq	r1, [r4, #0]
 800d888:	6054      	str	r4, [r2, #4]
 800d88a:	e7ca      	b.n	800d822 <_free_r+0x22>
 800d88c:	bd38      	pop	{r3, r4, r5, pc}
 800d88e:	bf00      	nop
 800d890:	20001188 	.word	0x20001188

0800d894 <rshift>:
 800d894:	6903      	ldr	r3, [r0, #16]
 800d896:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d89a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d89e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d8a2:	f100 0414 	add.w	r4, r0, #20
 800d8a6:	dd45      	ble.n	800d934 <rshift+0xa0>
 800d8a8:	f011 011f 	ands.w	r1, r1, #31
 800d8ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d8b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d8b4:	d10c      	bne.n	800d8d0 <rshift+0x3c>
 800d8b6:	f100 0710 	add.w	r7, r0, #16
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	42b1      	cmp	r1, r6
 800d8be:	d334      	bcc.n	800d92a <rshift+0x96>
 800d8c0:	1a9b      	subs	r3, r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	1eea      	subs	r2, r5, #3
 800d8c6:	4296      	cmp	r6, r2
 800d8c8:	bf38      	it	cc
 800d8ca:	2300      	movcc	r3, #0
 800d8cc:	4423      	add	r3, r4
 800d8ce:	e015      	b.n	800d8fc <rshift+0x68>
 800d8d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d8d4:	f1c1 0820 	rsb	r8, r1, #32
 800d8d8:	40cf      	lsrs	r7, r1
 800d8da:	f105 0e04 	add.w	lr, r5, #4
 800d8de:	46a1      	mov	r9, r4
 800d8e0:	4576      	cmp	r6, lr
 800d8e2:	46f4      	mov	ip, lr
 800d8e4:	d815      	bhi.n	800d912 <rshift+0x7e>
 800d8e6:	1a9a      	subs	r2, r3, r2
 800d8e8:	0092      	lsls	r2, r2, #2
 800d8ea:	3a04      	subs	r2, #4
 800d8ec:	3501      	adds	r5, #1
 800d8ee:	42ae      	cmp	r6, r5
 800d8f0:	bf38      	it	cc
 800d8f2:	2200      	movcc	r2, #0
 800d8f4:	18a3      	adds	r3, r4, r2
 800d8f6:	50a7      	str	r7, [r4, r2]
 800d8f8:	b107      	cbz	r7, 800d8fc <rshift+0x68>
 800d8fa:	3304      	adds	r3, #4
 800d8fc:	1b1a      	subs	r2, r3, r4
 800d8fe:	42a3      	cmp	r3, r4
 800d900:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d904:	bf08      	it	eq
 800d906:	2300      	moveq	r3, #0
 800d908:	6102      	str	r2, [r0, #16]
 800d90a:	bf08      	it	eq
 800d90c:	6143      	streq	r3, [r0, #20]
 800d90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d912:	f8dc c000 	ldr.w	ip, [ip]
 800d916:	fa0c fc08 	lsl.w	ip, ip, r8
 800d91a:	ea4c 0707 	orr.w	r7, ip, r7
 800d91e:	f849 7b04 	str.w	r7, [r9], #4
 800d922:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d926:	40cf      	lsrs	r7, r1
 800d928:	e7da      	b.n	800d8e0 <rshift+0x4c>
 800d92a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d92e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d932:	e7c3      	b.n	800d8bc <rshift+0x28>
 800d934:	4623      	mov	r3, r4
 800d936:	e7e1      	b.n	800d8fc <rshift+0x68>

0800d938 <__hexdig_fun>:
 800d938:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d93c:	2b09      	cmp	r3, #9
 800d93e:	d802      	bhi.n	800d946 <__hexdig_fun+0xe>
 800d940:	3820      	subs	r0, #32
 800d942:	b2c0      	uxtb	r0, r0
 800d944:	4770      	bx	lr
 800d946:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d94a:	2b05      	cmp	r3, #5
 800d94c:	d801      	bhi.n	800d952 <__hexdig_fun+0x1a>
 800d94e:	3847      	subs	r0, #71	@ 0x47
 800d950:	e7f7      	b.n	800d942 <__hexdig_fun+0xa>
 800d952:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d956:	2b05      	cmp	r3, #5
 800d958:	d801      	bhi.n	800d95e <__hexdig_fun+0x26>
 800d95a:	3827      	subs	r0, #39	@ 0x27
 800d95c:	e7f1      	b.n	800d942 <__hexdig_fun+0xa>
 800d95e:	2000      	movs	r0, #0
 800d960:	4770      	bx	lr
	...

0800d964 <__gethex>:
 800d964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d968:	b085      	sub	sp, #20
 800d96a:	468a      	mov	sl, r1
 800d96c:	9302      	str	r3, [sp, #8]
 800d96e:	680b      	ldr	r3, [r1, #0]
 800d970:	9001      	str	r0, [sp, #4]
 800d972:	4690      	mov	r8, r2
 800d974:	1c9c      	adds	r4, r3, #2
 800d976:	46a1      	mov	r9, r4
 800d978:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d97c:	2830      	cmp	r0, #48	@ 0x30
 800d97e:	d0fa      	beq.n	800d976 <__gethex+0x12>
 800d980:	eba9 0303 	sub.w	r3, r9, r3
 800d984:	f1a3 0b02 	sub.w	fp, r3, #2
 800d988:	f7ff ffd6 	bl	800d938 <__hexdig_fun>
 800d98c:	4605      	mov	r5, r0
 800d98e:	2800      	cmp	r0, #0
 800d990:	d168      	bne.n	800da64 <__gethex+0x100>
 800d992:	49a0      	ldr	r1, [pc, #640]	@ (800dc14 <__gethex+0x2b0>)
 800d994:	2201      	movs	r2, #1
 800d996:	4648      	mov	r0, r9
 800d998:	f7ff fde8 	bl	800d56c <strncmp>
 800d99c:	4607      	mov	r7, r0
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d167      	bne.n	800da72 <__gethex+0x10e>
 800d9a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d9a6:	4626      	mov	r6, r4
 800d9a8:	f7ff ffc6 	bl	800d938 <__hexdig_fun>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	d062      	beq.n	800da76 <__gethex+0x112>
 800d9b0:	4623      	mov	r3, r4
 800d9b2:	7818      	ldrb	r0, [r3, #0]
 800d9b4:	2830      	cmp	r0, #48	@ 0x30
 800d9b6:	4699      	mov	r9, r3
 800d9b8:	f103 0301 	add.w	r3, r3, #1
 800d9bc:	d0f9      	beq.n	800d9b2 <__gethex+0x4e>
 800d9be:	f7ff ffbb 	bl	800d938 <__hexdig_fun>
 800d9c2:	fab0 f580 	clz	r5, r0
 800d9c6:	096d      	lsrs	r5, r5, #5
 800d9c8:	f04f 0b01 	mov.w	fp, #1
 800d9cc:	464a      	mov	r2, r9
 800d9ce:	4616      	mov	r6, r2
 800d9d0:	3201      	adds	r2, #1
 800d9d2:	7830      	ldrb	r0, [r6, #0]
 800d9d4:	f7ff ffb0 	bl	800d938 <__hexdig_fun>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d1f8      	bne.n	800d9ce <__gethex+0x6a>
 800d9dc:	498d      	ldr	r1, [pc, #564]	@ (800dc14 <__gethex+0x2b0>)
 800d9de:	2201      	movs	r2, #1
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	f7ff fdc3 	bl	800d56c <strncmp>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d13f      	bne.n	800da6a <__gethex+0x106>
 800d9ea:	b944      	cbnz	r4, 800d9fe <__gethex+0x9a>
 800d9ec:	1c74      	adds	r4, r6, #1
 800d9ee:	4622      	mov	r2, r4
 800d9f0:	4616      	mov	r6, r2
 800d9f2:	3201      	adds	r2, #1
 800d9f4:	7830      	ldrb	r0, [r6, #0]
 800d9f6:	f7ff ff9f 	bl	800d938 <__hexdig_fun>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d1f8      	bne.n	800d9f0 <__gethex+0x8c>
 800d9fe:	1ba4      	subs	r4, r4, r6
 800da00:	00a7      	lsls	r7, r4, #2
 800da02:	7833      	ldrb	r3, [r6, #0]
 800da04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800da08:	2b50      	cmp	r3, #80	@ 0x50
 800da0a:	d13e      	bne.n	800da8a <__gethex+0x126>
 800da0c:	7873      	ldrb	r3, [r6, #1]
 800da0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800da10:	d033      	beq.n	800da7a <__gethex+0x116>
 800da12:	2b2d      	cmp	r3, #45	@ 0x2d
 800da14:	d034      	beq.n	800da80 <__gethex+0x11c>
 800da16:	1c71      	adds	r1, r6, #1
 800da18:	2400      	movs	r4, #0
 800da1a:	7808      	ldrb	r0, [r1, #0]
 800da1c:	f7ff ff8c 	bl	800d938 <__hexdig_fun>
 800da20:	1e43      	subs	r3, r0, #1
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2b18      	cmp	r3, #24
 800da26:	d830      	bhi.n	800da8a <__gethex+0x126>
 800da28:	f1a0 0210 	sub.w	r2, r0, #16
 800da2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da30:	f7ff ff82 	bl	800d938 <__hexdig_fun>
 800da34:	f100 3cff 	add.w	ip, r0, #4294967295
 800da38:	fa5f fc8c 	uxtb.w	ip, ip
 800da3c:	f1bc 0f18 	cmp.w	ip, #24
 800da40:	f04f 030a 	mov.w	r3, #10
 800da44:	d91e      	bls.n	800da84 <__gethex+0x120>
 800da46:	b104      	cbz	r4, 800da4a <__gethex+0xe6>
 800da48:	4252      	negs	r2, r2
 800da4a:	4417      	add	r7, r2
 800da4c:	f8ca 1000 	str.w	r1, [sl]
 800da50:	b1ed      	cbz	r5, 800da8e <__gethex+0x12a>
 800da52:	f1bb 0f00 	cmp.w	fp, #0
 800da56:	bf0c      	ite	eq
 800da58:	2506      	moveq	r5, #6
 800da5a:	2500      	movne	r5, #0
 800da5c:	4628      	mov	r0, r5
 800da5e:	b005      	add	sp, #20
 800da60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da64:	2500      	movs	r5, #0
 800da66:	462c      	mov	r4, r5
 800da68:	e7b0      	b.n	800d9cc <__gethex+0x68>
 800da6a:	2c00      	cmp	r4, #0
 800da6c:	d1c7      	bne.n	800d9fe <__gethex+0x9a>
 800da6e:	4627      	mov	r7, r4
 800da70:	e7c7      	b.n	800da02 <__gethex+0x9e>
 800da72:	464e      	mov	r6, r9
 800da74:	462f      	mov	r7, r5
 800da76:	2501      	movs	r5, #1
 800da78:	e7c3      	b.n	800da02 <__gethex+0x9e>
 800da7a:	2400      	movs	r4, #0
 800da7c:	1cb1      	adds	r1, r6, #2
 800da7e:	e7cc      	b.n	800da1a <__gethex+0xb6>
 800da80:	2401      	movs	r4, #1
 800da82:	e7fb      	b.n	800da7c <__gethex+0x118>
 800da84:	fb03 0002 	mla	r0, r3, r2, r0
 800da88:	e7ce      	b.n	800da28 <__gethex+0xc4>
 800da8a:	4631      	mov	r1, r6
 800da8c:	e7de      	b.n	800da4c <__gethex+0xe8>
 800da8e:	eba6 0309 	sub.w	r3, r6, r9
 800da92:	3b01      	subs	r3, #1
 800da94:	4629      	mov	r1, r5
 800da96:	2b07      	cmp	r3, #7
 800da98:	dc0a      	bgt.n	800dab0 <__gethex+0x14c>
 800da9a:	9801      	ldr	r0, [sp, #4]
 800da9c:	f000 fa46 	bl	800df2c <_Balloc>
 800daa0:	4604      	mov	r4, r0
 800daa2:	b940      	cbnz	r0, 800dab6 <__gethex+0x152>
 800daa4:	4b5c      	ldr	r3, [pc, #368]	@ (800dc18 <__gethex+0x2b4>)
 800daa6:	4602      	mov	r2, r0
 800daa8:	21e4      	movs	r1, #228	@ 0xe4
 800daaa:	485c      	ldr	r0, [pc, #368]	@ (800dc1c <__gethex+0x2b8>)
 800daac:	f7ff fe8a 	bl	800d7c4 <__assert_func>
 800dab0:	3101      	adds	r1, #1
 800dab2:	105b      	asrs	r3, r3, #1
 800dab4:	e7ef      	b.n	800da96 <__gethex+0x132>
 800dab6:	f100 0a14 	add.w	sl, r0, #20
 800daba:	2300      	movs	r3, #0
 800dabc:	4655      	mov	r5, sl
 800dabe:	469b      	mov	fp, r3
 800dac0:	45b1      	cmp	r9, r6
 800dac2:	d337      	bcc.n	800db34 <__gethex+0x1d0>
 800dac4:	f845 bb04 	str.w	fp, [r5], #4
 800dac8:	eba5 050a 	sub.w	r5, r5, sl
 800dacc:	10ad      	asrs	r5, r5, #2
 800dace:	6125      	str	r5, [r4, #16]
 800dad0:	4658      	mov	r0, fp
 800dad2:	f000 fb1d 	bl	800e110 <__hi0bits>
 800dad6:	016d      	lsls	r5, r5, #5
 800dad8:	f8d8 6000 	ldr.w	r6, [r8]
 800dadc:	1a2d      	subs	r5, r5, r0
 800dade:	42b5      	cmp	r5, r6
 800dae0:	dd54      	ble.n	800db8c <__gethex+0x228>
 800dae2:	1bad      	subs	r5, r5, r6
 800dae4:	4629      	mov	r1, r5
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 fea9 	bl	800e83e <__any_on>
 800daec:	4681      	mov	r9, r0
 800daee:	b178      	cbz	r0, 800db10 <__gethex+0x1ac>
 800daf0:	1e6b      	subs	r3, r5, #1
 800daf2:	1159      	asrs	r1, r3, #5
 800daf4:	f003 021f 	and.w	r2, r3, #31
 800daf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dafc:	f04f 0901 	mov.w	r9, #1
 800db00:	fa09 f202 	lsl.w	r2, r9, r2
 800db04:	420a      	tst	r2, r1
 800db06:	d003      	beq.n	800db10 <__gethex+0x1ac>
 800db08:	454b      	cmp	r3, r9
 800db0a:	dc36      	bgt.n	800db7a <__gethex+0x216>
 800db0c:	f04f 0902 	mov.w	r9, #2
 800db10:	4629      	mov	r1, r5
 800db12:	4620      	mov	r0, r4
 800db14:	f7ff febe 	bl	800d894 <rshift>
 800db18:	442f      	add	r7, r5
 800db1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db1e:	42bb      	cmp	r3, r7
 800db20:	da42      	bge.n	800dba8 <__gethex+0x244>
 800db22:	9801      	ldr	r0, [sp, #4]
 800db24:	4621      	mov	r1, r4
 800db26:	f000 fa41 	bl	800dfac <_Bfree>
 800db2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db2c:	2300      	movs	r3, #0
 800db2e:	6013      	str	r3, [r2, #0]
 800db30:	25a3      	movs	r5, #163	@ 0xa3
 800db32:	e793      	b.n	800da5c <__gethex+0xf8>
 800db34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800db38:	2a2e      	cmp	r2, #46	@ 0x2e
 800db3a:	d012      	beq.n	800db62 <__gethex+0x1fe>
 800db3c:	2b20      	cmp	r3, #32
 800db3e:	d104      	bne.n	800db4a <__gethex+0x1e6>
 800db40:	f845 bb04 	str.w	fp, [r5], #4
 800db44:	f04f 0b00 	mov.w	fp, #0
 800db48:	465b      	mov	r3, fp
 800db4a:	7830      	ldrb	r0, [r6, #0]
 800db4c:	9303      	str	r3, [sp, #12]
 800db4e:	f7ff fef3 	bl	800d938 <__hexdig_fun>
 800db52:	9b03      	ldr	r3, [sp, #12]
 800db54:	f000 000f 	and.w	r0, r0, #15
 800db58:	4098      	lsls	r0, r3
 800db5a:	ea4b 0b00 	orr.w	fp, fp, r0
 800db5e:	3304      	adds	r3, #4
 800db60:	e7ae      	b.n	800dac0 <__gethex+0x15c>
 800db62:	45b1      	cmp	r9, r6
 800db64:	d8ea      	bhi.n	800db3c <__gethex+0x1d8>
 800db66:	492b      	ldr	r1, [pc, #172]	@ (800dc14 <__gethex+0x2b0>)
 800db68:	9303      	str	r3, [sp, #12]
 800db6a:	2201      	movs	r2, #1
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7ff fcfd 	bl	800d56c <strncmp>
 800db72:	9b03      	ldr	r3, [sp, #12]
 800db74:	2800      	cmp	r0, #0
 800db76:	d1e1      	bne.n	800db3c <__gethex+0x1d8>
 800db78:	e7a2      	b.n	800dac0 <__gethex+0x15c>
 800db7a:	1ea9      	subs	r1, r5, #2
 800db7c:	4620      	mov	r0, r4
 800db7e:	f000 fe5e 	bl	800e83e <__any_on>
 800db82:	2800      	cmp	r0, #0
 800db84:	d0c2      	beq.n	800db0c <__gethex+0x1a8>
 800db86:	f04f 0903 	mov.w	r9, #3
 800db8a:	e7c1      	b.n	800db10 <__gethex+0x1ac>
 800db8c:	da09      	bge.n	800dba2 <__gethex+0x23e>
 800db8e:	1b75      	subs	r5, r6, r5
 800db90:	4621      	mov	r1, r4
 800db92:	9801      	ldr	r0, [sp, #4]
 800db94:	462a      	mov	r2, r5
 800db96:	f000 fc19 	bl	800e3cc <__lshift>
 800db9a:	1b7f      	subs	r7, r7, r5
 800db9c:	4604      	mov	r4, r0
 800db9e:	f100 0a14 	add.w	sl, r0, #20
 800dba2:	f04f 0900 	mov.w	r9, #0
 800dba6:	e7b8      	b.n	800db1a <__gethex+0x1b6>
 800dba8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dbac:	42bd      	cmp	r5, r7
 800dbae:	dd6f      	ble.n	800dc90 <__gethex+0x32c>
 800dbb0:	1bed      	subs	r5, r5, r7
 800dbb2:	42ae      	cmp	r6, r5
 800dbb4:	dc34      	bgt.n	800dc20 <__gethex+0x2bc>
 800dbb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d022      	beq.n	800dc04 <__gethex+0x2a0>
 800dbbe:	2b03      	cmp	r3, #3
 800dbc0:	d024      	beq.n	800dc0c <__gethex+0x2a8>
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d115      	bne.n	800dbf2 <__gethex+0x28e>
 800dbc6:	42ae      	cmp	r6, r5
 800dbc8:	d113      	bne.n	800dbf2 <__gethex+0x28e>
 800dbca:	2e01      	cmp	r6, #1
 800dbcc:	d10b      	bne.n	800dbe6 <__gethex+0x282>
 800dbce:	9a02      	ldr	r2, [sp, #8]
 800dbd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbd4:	6013      	str	r3, [r2, #0]
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	6123      	str	r3, [r4, #16]
 800dbda:	f8ca 3000 	str.w	r3, [sl]
 800dbde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbe0:	2562      	movs	r5, #98	@ 0x62
 800dbe2:	601c      	str	r4, [r3, #0]
 800dbe4:	e73a      	b.n	800da5c <__gethex+0xf8>
 800dbe6:	1e71      	subs	r1, r6, #1
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f000 fe28 	bl	800e83e <__any_on>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d1ed      	bne.n	800dbce <__gethex+0x26a>
 800dbf2:	9801      	ldr	r0, [sp, #4]
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	f000 f9d9 	bl	800dfac <_Bfree>
 800dbfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	6013      	str	r3, [r2, #0]
 800dc00:	2550      	movs	r5, #80	@ 0x50
 800dc02:	e72b      	b.n	800da5c <__gethex+0xf8>
 800dc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1f3      	bne.n	800dbf2 <__gethex+0x28e>
 800dc0a:	e7e0      	b.n	800dbce <__gethex+0x26a>
 800dc0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1dd      	bne.n	800dbce <__gethex+0x26a>
 800dc12:	e7ee      	b.n	800dbf2 <__gethex+0x28e>
 800dc14:	08010cd0 	.word	0x08010cd0
 800dc18:	08010d93 	.word	0x08010d93
 800dc1c:	08010da4 	.word	0x08010da4
 800dc20:	1e6f      	subs	r7, r5, #1
 800dc22:	f1b9 0f00 	cmp.w	r9, #0
 800dc26:	d130      	bne.n	800dc8a <__gethex+0x326>
 800dc28:	b127      	cbz	r7, 800dc34 <__gethex+0x2d0>
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	f000 fe06 	bl	800e83e <__any_on>
 800dc32:	4681      	mov	r9, r0
 800dc34:	117a      	asrs	r2, r7, #5
 800dc36:	2301      	movs	r3, #1
 800dc38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dc3c:	f007 071f 	and.w	r7, r7, #31
 800dc40:	40bb      	lsls	r3, r7
 800dc42:	4213      	tst	r3, r2
 800dc44:	4629      	mov	r1, r5
 800dc46:	4620      	mov	r0, r4
 800dc48:	bf18      	it	ne
 800dc4a:	f049 0902 	orrne.w	r9, r9, #2
 800dc4e:	f7ff fe21 	bl	800d894 <rshift>
 800dc52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dc56:	1b76      	subs	r6, r6, r5
 800dc58:	2502      	movs	r5, #2
 800dc5a:	f1b9 0f00 	cmp.w	r9, #0
 800dc5e:	d047      	beq.n	800dcf0 <__gethex+0x38c>
 800dc60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d015      	beq.n	800dc94 <__gethex+0x330>
 800dc68:	2b03      	cmp	r3, #3
 800dc6a:	d017      	beq.n	800dc9c <__gethex+0x338>
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d109      	bne.n	800dc84 <__gethex+0x320>
 800dc70:	f019 0f02 	tst.w	r9, #2
 800dc74:	d006      	beq.n	800dc84 <__gethex+0x320>
 800dc76:	f8da 3000 	ldr.w	r3, [sl]
 800dc7a:	ea49 0903 	orr.w	r9, r9, r3
 800dc7e:	f019 0f01 	tst.w	r9, #1
 800dc82:	d10e      	bne.n	800dca2 <__gethex+0x33e>
 800dc84:	f045 0510 	orr.w	r5, r5, #16
 800dc88:	e032      	b.n	800dcf0 <__gethex+0x38c>
 800dc8a:	f04f 0901 	mov.w	r9, #1
 800dc8e:	e7d1      	b.n	800dc34 <__gethex+0x2d0>
 800dc90:	2501      	movs	r5, #1
 800dc92:	e7e2      	b.n	800dc5a <__gethex+0x2f6>
 800dc94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc96:	f1c3 0301 	rsb	r3, r3, #1
 800dc9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d0f0      	beq.n	800dc84 <__gethex+0x320>
 800dca2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dca6:	f104 0314 	add.w	r3, r4, #20
 800dcaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dcae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dcb2:	f04f 0c00 	mov.w	ip, #0
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dcc0:	d01b      	beq.n	800dcfa <__gethex+0x396>
 800dcc2:	3201      	adds	r2, #1
 800dcc4:	6002      	str	r2, [r0, #0]
 800dcc6:	2d02      	cmp	r5, #2
 800dcc8:	f104 0314 	add.w	r3, r4, #20
 800dccc:	d13c      	bne.n	800dd48 <__gethex+0x3e4>
 800dcce:	f8d8 2000 	ldr.w	r2, [r8]
 800dcd2:	3a01      	subs	r2, #1
 800dcd4:	42b2      	cmp	r2, r6
 800dcd6:	d109      	bne.n	800dcec <__gethex+0x388>
 800dcd8:	1171      	asrs	r1, r6, #5
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dce0:	f006 061f 	and.w	r6, r6, #31
 800dce4:	fa02 f606 	lsl.w	r6, r2, r6
 800dce8:	421e      	tst	r6, r3
 800dcea:	d13a      	bne.n	800dd62 <__gethex+0x3fe>
 800dcec:	f045 0520 	orr.w	r5, r5, #32
 800dcf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcf2:	601c      	str	r4, [r3, #0]
 800dcf4:	9b02      	ldr	r3, [sp, #8]
 800dcf6:	601f      	str	r7, [r3, #0]
 800dcf8:	e6b0      	b.n	800da5c <__gethex+0xf8>
 800dcfa:	4299      	cmp	r1, r3
 800dcfc:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd00:	d8d9      	bhi.n	800dcb6 <__gethex+0x352>
 800dd02:	68a3      	ldr	r3, [r4, #8]
 800dd04:	459b      	cmp	fp, r3
 800dd06:	db17      	blt.n	800dd38 <__gethex+0x3d4>
 800dd08:	6861      	ldr	r1, [r4, #4]
 800dd0a:	9801      	ldr	r0, [sp, #4]
 800dd0c:	3101      	adds	r1, #1
 800dd0e:	f000 f90d 	bl	800df2c <_Balloc>
 800dd12:	4681      	mov	r9, r0
 800dd14:	b918      	cbnz	r0, 800dd1e <__gethex+0x3ba>
 800dd16:	4b1a      	ldr	r3, [pc, #104]	@ (800dd80 <__gethex+0x41c>)
 800dd18:	4602      	mov	r2, r0
 800dd1a:	2184      	movs	r1, #132	@ 0x84
 800dd1c:	e6c5      	b.n	800daaa <__gethex+0x146>
 800dd1e:	6922      	ldr	r2, [r4, #16]
 800dd20:	3202      	adds	r2, #2
 800dd22:	f104 010c 	add.w	r1, r4, #12
 800dd26:	0092      	lsls	r2, r2, #2
 800dd28:	300c      	adds	r0, #12
 800dd2a:	f7ff fd2e 	bl	800d78a <memcpy>
 800dd2e:	4621      	mov	r1, r4
 800dd30:	9801      	ldr	r0, [sp, #4]
 800dd32:	f000 f93b 	bl	800dfac <_Bfree>
 800dd36:	464c      	mov	r4, r9
 800dd38:	6923      	ldr	r3, [r4, #16]
 800dd3a:	1c5a      	adds	r2, r3, #1
 800dd3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd40:	6122      	str	r2, [r4, #16]
 800dd42:	2201      	movs	r2, #1
 800dd44:	615a      	str	r2, [r3, #20]
 800dd46:	e7be      	b.n	800dcc6 <__gethex+0x362>
 800dd48:	6922      	ldr	r2, [r4, #16]
 800dd4a:	455a      	cmp	r2, fp
 800dd4c:	dd0b      	ble.n	800dd66 <__gethex+0x402>
 800dd4e:	2101      	movs	r1, #1
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7ff fd9f 	bl	800d894 <rshift>
 800dd56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd5a:	3701      	adds	r7, #1
 800dd5c:	42bb      	cmp	r3, r7
 800dd5e:	f6ff aee0 	blt.w	800db22 <__gethex+0x1be>
 800dd62:	2501      	movs	r5, #1
 800dd64:	e7c2      	b.n	800dcec <__gethex+0x388>
 800dd66:	f016 061f 	ands.w	r6, r6, #31
 800dd6a:	d0fa      	beq.n	800dd62 <__gethex+0x3fe>
 800dd6c:	4453      	add	r3, sl
 800dd6e:	f1c6 0620 	rsb	r6, r6, #32
 800dd72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dd76:	f000 f9cb 	bl	800e110 <__hi0bits>
 800dd7a:	42b0      	cmp	r0, r6
 800dd7c:	dbe7      	blt.n	800dd4e <__gethex+0x3ea>
 800dd7e:	e7f0      	b.n	800dd62 <__gethex+0x3fe>
 800dd80:	08010d93 	.word	0x08010d93

0800dd84 <L_shift>:
 800dd84:	f1c2 0208 	rsb	r2, r2, #8
 800dd88:	0092      	lsls	r2, r2, #2
 800dd8a:	b570      	push	{r4, r5, r6, lr}
 800dd8c:	f1c2 0620 	rsb	r6, r2, #32
 800dd90:	6843      	ldr	r3, [r0, #4]
 800dd92:	6804      	ldr	r4, [r0, #0]
 800dd94:	fa03 f506 	lsl.w	r5, r3, r6
 800dd98:	432c      	orrs	r4, r5
 800dd9a:	40d3      	lsrs	r3, r2
 800dd9c:	6004      	str	r4, [r0, #0]
 800dd9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800dda2:	4288      	cmp	r0, r1
 800dda4:	d3f4      	bcc.n	800dd90 <L_shift+0xc>
 800dda6:	bd70      	pop	{r4, r5, r6, pc}

0800dda8 <__match>:
 800dda8:	b530      	push	{r4, r5, lr}
 800ddaa:	6803      	ldr	r3, [r0, #0]
 800ddac:	3301      	adds	r3, #1
 800ddae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddb2:	b914      	cbnz	r4, 800ddba <__match+0x12>
 800ddb4:	6003      	str	r3, [r0, #0]
 800ddb6:	2001      	movs	r0, #1
 800ddb8:	bd30      	pop	{r4, r5, pc}
 800ddba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ddc2:	2d19      	cmp	r5, #25
 800ddc4:	bf98      	it	ls
 800ddc6:	3220      	addls	r2, #32
 800ddc8:	42a2      	cmp	r2, r4
 800ddca:	d0f0      	beq.n	800ddae <__match+0x6>
 800ddcc:	2000      	movs	r0, #0
 800ddce:	e7f3      	b.n	800ddb8 <__match+0x10>

0800ddd0 <__hexnan>:
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	680b      	ldr	r3, [r1, #0]
 800ddd6:	6801      	ldr	r1, [r0, #0]
 800ddd8:	115e      	asrs	r6, r3, #5
 800ddda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ddde:	f013 031f 	ands.w	r3, r3, #31
 800dde2:	b087      	sub	sp, #28
 800dde4:	bf18      	it	ne
 800dde6:	3604      	addne	r6, #4
 800dde8:	2500      	movs	r5, #0
 800ddea:	1f37      	subs	r7, r6, #4
 800ddec:	4682      	mov	sl, r0
 800ddee:	4690      	mov	r8, r2
 800ddf0:	9301      	str	r3, [sp, #4]
 800ddf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ddf6:	46b9      	mov	r9, r7
 800ddf8:	463c      	mov	r4, r7
 800ddfa:	9502      	str	r5, [sp, #8]
 800ddfc:	46ab      	mov	fp, r5
 800ddfe:	784a      	ldrb	r2, [r1, #1]
 800de00:	1c4b      	adds	r3, r1, #1
 800de02:	9303      	str	r3, [sp, #12]
 800de04:	b342      	cbz	r2, 800de58 <__hexnan+0x88>
 800de06:	4610      	mov	r0, r2
 800de08:	9105      	str	r1, [sp, #20]
 800de0a:	9204      	str	r2, [sp, #16]
 800de0c:	f7ff fd94 	bl	800d938 <__hexdig_fun>
 800de10:	2800      	cmp	r0, #0
 800de12:	d151      	bne.n	800deb8 <__hexnan+0xe8>
 800de14:	9a04      	ldr	r2, [sp, #16]
 800de16:	9905      	ldr	r1, [sp, #20]
 800de18:	2a20      	cmp	r2, #32
 800de1a:	d818      	bhi.n	800de4e <__hexnan+0x7e>
 800de1c:	9b02      	ldr	r3, [sp, #8]
 800de1e:	459b      	cmp	fp, r3
 800de20:	dd13      	ble.n	800de4a <__hexnan+0x7a>
 800de22:	454c      	cmp	r4, r9
 800de24:	d206      	bcs.n	800de34 <__hexnan+0x64>
 800de26:	2d07      	cmp	r5, #7
 800de28:	dc04      	bgt.n	800de34 <__hexnan+0x64>
 800de2a:	462a      	mov	r2, r5
 800de2c:	4649      	mov	r1, r9
 800de2e:	4620      	mov	r0, r4
 800de30:	f7ff ffa8 	bl	800dd84 <L_shift>
 800de34:	4544      	cmp	r4, r8
 800de36:	d952      	bls.n	800dede <__hexnan+0x10e>
 800de38:	2300      	movs	r3, #0
 800de3a:	f1a4 0904 	sub.w	r9, r4, #4
 800de3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800de42:	f8cd b008 	str.w	fp, [sp, #8]
 800de46:	464c      	mov	r4, r9
 800de48:	461d      	mov	r5, r3
 800de4a:	9903      	ldr	r1, [sp, #12]
 800de4c:	e7d7      	b.n	800ddfe <__hexnan+0x2e>
 800de4e:	2a29      	cmp	r2, #41	@ 0x29
 800de50:	d157      	bne.n	800df02 <__hexnan+0x132>
 800de52:	3102      	adds	r1, #2
 800de54:	f8ca 1000 	str.w	r1, [sl]
 800de58:	f1bb 0f00 	cmp.w	fp, #0
 800de5c:	d051      	beq.n	800df02 <__hexnan+0x132>
 800de5e:	454c      	cmp	r4, r9
 800de60:	d206      	bcs.n	800de70 <__hexnan+0xa0>
 800de62:	2d07      	cmp	r5, #7
 800de64:	dc04      	bgt.n	800de70 <__hexnan+0xa0>
 800de66:	462a      	mov	r2, r5
 800de68:	4649      	mov	r1, r9
 800de6a:	4620      	mov	r0, r4
 800de6c:	f7ff ff8a 	bl	800dd84 <L_shift>
 800de70:	4544      	cmp	r4, r8
 800de72:	d936      	bls.n	800dee2 <__hexnan+0x112>
 800de74:	f1a8 0204 	sub.w	r2, r8, #4
 800de78:	4623      	mov	r3, r4
 800de7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800de7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800de82:	429f      	cmp	r7, r3
 800de84:	d2f9      	bcs.n	800de7a <__hexnan+0xaa>
 800de86:	1b3b      	subs	r3, r7, r4
 800de88:	f023 0303 	bic.w	r3, r3, #3
 800de8c:	3304      	adds	r3, #4
 800de8e:	3401      	adds	r4, #1
 800de90:	3e03      	subs	r6, #3
 800de92:	42b4      	cmp	r4, r6
 800de94:	bf88      	it	hi
 800de96:	2304      	movhi	r3, #4
 800de98:	4443      	add	r3, r8
 800de9a:	2200      	movs	r2, #0
 800de9c:	f843 2b04 	str.w	r2, [r3], #4
 800dea0:	429f      	cmp	r7, r3
 800dea2:	d2fb      	bcs.n	800de9c <__hexnan+0xcc>
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	b91b      	cbnz	r3, 800deb0 <__hexnan+0xe0>
 800dea8:	4547      	cmp	r7, r8
 800deaa:	d128      	bne.n	800defe <__hexnan+0x12e>
 800deac:	2301      	movs	r3, #1
 800deae:	603b      	str	r3, [r7, #0]
 800deb0:	2005      	movs	r0, #5
 800deb2:	b007      	add	sp, #28
 800deb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb8:	3501      	adds	r5, #1
 800deba:	2d08      	cmp	r5, #8
 800debc:	f10b 0b01 	add.w	fp, fp, #1
 800dec0:	dd06      	ble.n	800ded0 <__hexnan+0x100>
 800dec2:	4544      	cmp	r4, r8
 800dec4:	d9c1      	bls.n	800de4a <__hexnan+0x7a>
 800dec6:	2300      	movs	r3, #0
 800dec8:	f844 3c04 	str.w	r3, [r4, #-4]
 800decc:	2501      	movs	r5, #1
 800dece:	3c04      	subs	r4, #4
 800ded0:	6822      	ldr	r2, [r4, #0]
 800ded2:	f000 000f 	and.w	r0, r0, #15
 800ded6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800deda:	6020      	str	r0, [r4, #0]
 800dedc:	e7b5      	b.n	800de4a <__hexnan+0x7a>
 800dede:	2508      	movs	r5, #8
 800dee0:	e7b3      	b.n	800de4a <__hexnan+0x7a>
 800dee2:	9b01      	ldr	r3, [sp, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d0dd      	beq.n	800dea4 <__hexnan+0xd4>
 800dee8:	f1c3 0320 	rsb	r3, r3, #32
 800deec:	f04f 32ff 	mov.w	r2, #4294967295
 800def0:	40da      	lsrs	r2, r3
 800def2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800def6:	4013      	ands	r3, r2
 800def8:	f846 3c04 	str.w	r3, [r6, #-4]
 800defc:	e7d2      	b.n	800dea4 <__hexnan+0xd4>
 800defe:	3f04      	subs	r7, #4
 800df00:	e7d0      	b.n	800dea4 <__hexnan+0xd4>
 800df02:	2004      	movs	r0, #4
 800df04:	e7d5      	b.n	800deb2 <__hexnan+0xe2>

0800df06 <__ascii_mbtowc>:
 800df06:	b082      	sub	sp, #8
 800df08:	b901      	cbnz	r1, 800df0c <__ascii_mbtowc+0x6>
 800df0a:	a901      	add	r1, sp, #4
 800df0c:	b142      	cbz	r2, 800df20 <__ascii_mbtowc+0x1a>
 800df0e:	b14b      	cbz	r3, 800df24 <__ascii_mbtowc+0x1e>
 800df10:	7813      	ldrb	r3, [r2, #0]
 800df12:	600b      	str	r3, [r1, #0]
 800df14:	7812      	ldrb	r2, [r2, #0]
 800df16:	1e10      	subs	r0, r2, #0
 800df18:	bf18      	it	ne
 800df1a:	2001      	movne	r0, #1
 800df1c:	b002      	add	sp, #8
 800df1e:	4770      	bx	lr
 800df20:	4610      	mov	r0, r2
 800df22:	e7fb      	b.n	800df1c <__ascii_mbtowc+0x16>
 800df24:	f06f 0001 	mvn.w	r0, #1
 800df28:	e7f8      	b.n	800df1c <__ascii_mbtowc+0x16>
	...

0800df2c <_Balloc>:
 800df2c:	b570      	push	{r4, r5, r6, lr}
 800df2e:	69c6      	ldr	r6, [r0, #28]
 800df30:	4604      	mov	r4, r0
 800df32:	460d      	mov	r5, r1
 800df34:	b976      	cbnz	r6, 800df54 <_Balloc+0x28>
 800df36:	2010      	movs	r0, #16
 800df38:	f7fe f93a 	bl	800c1b0 <malloc>
 800df3c:	4602      	mov	r2, r0
 800df3e:	61e0      	str	r0, [r4, #28]
 800df40:	b920      	cbnz	r0, 800df4c <_Balloc+0x20>
 800df42:	4b18      	ldr	r3, [pc, #96]	@ (800dfa4 <_Balloc+0x78>)
 800df44:	4818      	ldr	r0, [pc, #96]	@ (800dfa8 <_Balloc+0x7c>)
 800df46:	216b      	movs	r1, #107	@ 0x6b
 800df48:	f7ff fc3c 	bl	800d7c4 <__assert_func>
 800df4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df50:	6006      	str	r6, [r0, #0]
 800df52:	60c6      	str	r6, [r0, #12]
 800df54:	69e6      	ldr	r6, [r4, #28]
 800df56:	68f3      	ldr	r3, [r6, #12]
 800df58:	b183      	cbz	r3, 800df7c <_Balloc+0x50>
 800df5a:	69e3      	ldr	r3, [r4, #28]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df62:	b9b8      	cbnz	r0, 800df94 <_Balloc+0x68>
 800df64:	2101      	movs	r1, #1
 800df66:	fa01 f605 	lsl.w	r6, r1, r5
 800df6a:	1d72      	adds	r2, r6, #5
 800df6c:	0092      	lsls	r2, r2, #2
 800df6e:	4620      	mov	r0, r4
 800df70:	f001 f8d9 	bl	800f126 <_calloc_r>
 800df74:	b160      	cbz	r0, 800df90 <_Balloc+0x64>
 800df76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df7a:	e00e      	b.n	800df9a <_Balloc+0x6e>
 800df7c:	2221      	movs	r2, #33	@ 0x21
 800df7e:	2104      	movs	r1, #4
 800df80:	4620      	mov	r0, r4
 800df82:	f001 f8d0 	bl	800f126 <_calloc_r>
 800df86:	69e3      	ldr	r3, [r4, #28]
 800df88:	60f0      	str	r0, [r6, #12]
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1e4      	bne.n	800df5a <_Balloc+0x2e>
 800df90:	2000      	movs	r0, #0
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	6802      	ldr	r2, [r0, #0]
 800df96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df9a:	2300      	movs	r3, #0
 800df9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfa0:	e7f7      	b.n	800df92 <_Balloc+0x66>
 800dfa2:	bf00      	nop
 800dfa4:	08010cde 	.word	0x08010cde
 800dfa8:	08010e04 	.word	0x08010e04

0800dfac <_Bfree>:
 800dfac:	b570      	push	{r4, r5, r6, lr}
 800dfae:	69c6      	ldr	r6, [r0, #28]
 800dfb0:	4605      	mov	r5, r0
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	b976      	cbnz	r6, 800dfd4 <_Bfree+0x28>
 800dfb6:	2010      	movs	r0, #16
 800dfb8:	f7fe f8fa 	bl	800c1b0 <malloc>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	61e8      	str	r0, [r5, #28]
 800dfc0:	b920      	cbnz	r0, 800dfcc <_Bfree+0x20>
 800dfc2:	4b09      	ldr	r3, [pc, #36]	@ (800dfe8 <_Bfree+0x3c>)
 800dfc4:	4809      	ldr	r0, [pc, #36]	@ (800dfec <_Bfree+0x40>)
 800dfc6:	218f      	movs	r1, #143	@ 0x8f
 800dfc8:	f7ff fbfc 	bl	800d7c4 <__assert_func>
 800dfcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfd0:	6006      	str	r6, [r0, #0]
 800dfd2:	60c6      	str	r6, [r0, #12]
 800dfd4:	b13c      	cbz	r4, 800dfe6 <_Bfree+0x3a>
 800dfd6:	69eb      	ldr	r3, [r5, #28]
 800dfd8:	6862      	ldr	r2, [r4, #4]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfe0:	6021      	str	r1, [r4, #0]
 800dfe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dfe6:	bd70      	pop	{r4, r5, r6, pc}
 800dfe8:	08010cde 	.word	0x08010cde
 800dfec:	08010e04 	.word	0x08010e04

0800dff0 <__multadd>:
 800dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff4:	690d      	ldr	r5, [r1, #16]
 800dff6:	4607      	mov	r7, r0
 800dff8:	460c      	mov	r4, r1
 800dffa:	461e      	mov	r6, r3
 800dffc:	f101 0c14 	add.w	ip, r1, #20
 800e000:	2000      	movs	r0, #0
 800e002:	f8dc 3000 	ldr.w	r3, [ip]
 800e006:	b299      	uxth	r1, r3
 800e008:	fb02 6101 	mla	r1, r2, r1, r6
 800e00c:	0c1e      	lsrs	r6, r3, #16
 800e00e:	0c0b      	lsrs	r3, r1, #16
 800e010:	fb02 3306 	mla	r3, r2, r6, r3
 800e014:	b289      	uxth	r1, r1
 800e016:	3001      	adds	r0, #1
 800e018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e01c:	4285      	cmp	r5, r0
 800e01e:	f84c 1b04 	str.w	r1, [ip], #4
 800e022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e026:	dcec      	bgt.n	800e002 <__multadd+0x12>
 800e028:	b30e      	cbz	r6, 800e06e <__multadd+0x7e>
 800e02a:	68a3      	ldr	r3, [r4, #8]
 800e02c:	42ab      	cmp	r3, r5
 800e02e:	dc19      	bgt.n	800e064 <__multadd+0x74>
 800e030:	6861      	ldr	r1, [r4, #4]
 800e032:	4638      	mov	r0, r7
 800e034:	3101      	adds	r1, #1
 800e036:	f7ff ff79 	bl	800df2c <_Balloc>
 800e03a:	4680      	mov	r8, r0
 800e03c:	b928      	cbnz	r0, 800e04a <__multadd+0x5a>
 800e03e:	4602      	mov	r2, r0
 800e040:	4b0c      	ldr	r3, [pc, #48]	@ (800e074 <__multadd+0x84>)
 800e042:	480d      	ldr	r0, [pc, #52]	@ (800e078 <__multadd+0x88>)
 800e044:	21ba      	movs	r1, #186	@ 0xba
 800e046:	f7ff fbbd 	bl	800d7c4 <__assert_func>
 800e04a:	6922      	ldr	r2, [r4, #16]
 800e04c:	3202      	adds	r2, #2
 800e04e:	f104 010c 	add.w	r1, r4, #12
 800e052:	0092      	lsls	r2, r2, #2
 800e054:	300c      	adds	r0, #12
 800e056:	f7ff fb98 	bl	800d78a <memcpy>
 800e05a:	4621      	mov	r1, r4
 800e05c:	4638      	mov	r0, r7
 800e05e:	f7ff ffa5 	bl	800dfac <_Bfree>
 800e062:	4644      	mov	r4, r8
 800e064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e068:	3501      	adds	r5, #1
 800e06a:	615e      	str	r6, [r3, #20]
 800e06c:	6125      	str	r5, [r4, #16]
 800e06e:	4620      	mov	r0, r4
 800e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e074:	08010d93 	.word	0x08010d93
 800e078:	08010e04 	.word	0x08010e04

0800e07c <__s2b>:
 800e07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e080:	460c      	mov	r4, r1
 800e082:	4615      	mov	r5, r2
 800e084:	461f      	mov	r7, r3
 800e086:	2209      	movs	r2, #9
 800e088:	3308      	adds	r3, #8
 800e08a:	4606      	mov	r6, r0
 800e08c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e090:	2100      	movs	r1, #0
 800e092:	2201      	movs	r2, #1
 800e094:	429a      	cmp	r2, r3
 800e096:	db09      	blt.n	800e0ac <__s2b+0x30>
 800e098:	4630      	mov	r0, r6
 800e09a:	f7ff ff47 	bl	800df2c <_Balloc>
 800e09e:	b940      	cbnz	r0, 800e0b2 <__s2b+0x36>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	4b19      	ldr	r3, [pc, #100]	@ (800e108 <__s2b+0x8c>)
 800e0a4:	4819      	ldr	r0, [pc, #100]	@ (800e10c <__s2b+0x90>)
 800e0a6:	21d3      	movs	r1, #211	@ 0xd3
 800e0a8:	f7ff fb8c 	bl	800d7c4 <__assert_func>
 800e0ac:	0052      	lsls	r2, r2, #1
 800e0ae:	3101      	adds	r1, #1
 800e0b0:	e7f0      	b.n	800e094 <__s2b+0x18>
 800e0b2:	9b08      	ldr	r3, [sp, #32]
 800e0b4:	6143      	str	r3, [r0, #20]
 800e0b6:	2d09      	cmp	r5, #9
 800e0b8:	f04f 0301 	mov.w	r3, #1
 800e0bc:	6103      	str	r3, [r0, #16]
 800e0be:	dd16      	ble.n	800e0ee <__s2b+0x72>
 800e0c0:	f104 0909 	add.w	r9, r4, #9
 800e0c4:	46c8      	mov	r8, r9
 800e0c6:	442c      	add	r4, r5
 800e0c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0cc:	4601      	mov	r1, r0
 800e0ce:	3b30      	subs	r3, #48	@ 0x30
 800e0d0:	220a      	movs	r2, #10
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f7ff ff8c 	bl	800dff0 <__multadd>
 800e0d8:	45a0      	cmp	r8, r4
 800e0da:	d1f5      	bne.n	800e0c8 <__s2b+0x4c>
 800e0dc:	f1a5 0408 	sub.w	r4, r5, #8
 800e0e0:	444c      	add	r4, r9
 800e0e2:	1b2d      	subs	r5, r5, r4
 800e0e4:	1963      	adds	r3, r4, r5
 800e0e6:	42bb      	cmp	r3, r7
 800e0e8:	db04      	blt.n	800e0f4 <__s2b+0x78>
 800e0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0ee:	340a      	adds	r4, #10
 800e0f0:	2509      	movs	r5, #9
 800e0f2:	e7f6      	b.n	800e0e2 <__s2b+0x66>
 800e0f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e0f8:	4601      	mov	r1, r0
 800e0fa:	3b30      	subs	r3, #48	@ 0x30
 800e0fc:	220a      	movs	r2, #10
 800e0fe:	4630      	mov	r0, r6
 800e100:	f7ff ff76 	bl	800dff0 <__multadd>
 800e104:	e7ee      	b.n	800e0e4 <__s2b+0x68>
 800e106:	bf00      	nop
 800e108:	08010d93 	.word	0x08010d93
 800e10c:	08010e04 	.word	0x08010e04

0800e110 <__hi0bits>:
 800e110:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e114:	4603      	mov	r3, r0
 800e116:	bf36      	itet	cc
 800e118:	0403      	lslcc	r3, r0, #16
 800e11a:	2000      	movcs	r0, #0
 800e11c:	2010      	movcc	r0, #16
 800e11e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e122:	bf3c      	itt	cc
 800e124:	021b      	lslcc	r3, r3, #8
 800e126:	3008      	addcc	r0, #8
 800e128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e12c:	bf3c      	itt	cc
 800e12e:	011b      	lslcc	r3, r3, #4
 800e130:	3004      	addcc	r0, #4
 800e132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e136:	bf3c      	itt	cc
 800e138:	009b      	lslcc	r3, r3, #2
 800e13a:	3002      	addcc	r0, #2
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	db05      	blt.n	800e14c <__hi0bits+0x3c>
 800e140:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e144:	f100 0001 	add.w	r0, r0, #1
 800e148:	bf08      	it	eq
 800e14a:	2020      	moveq	r0, #32
 800e14c:	4770      	bx	lr

0800e14e <__lo0bits>:
 800e14e:	6803      	ldr	r3, [r0, #0]
 800e150:	4602      	mov	r2, r0
 800e152:	f013 0007 	ands.w	r0, r3, #7
 800e156:	d00b      	beq.n	800e170 <__lo0bits+0x22>
 800e158:	07d9      	lsls	r1, r3, #31
 800e15a:	d421      	bmi.n	800e1a0 <__lo0bits+0x52>
 800e15c:	0798      	lsls	r0, r3, #30
 800e15e:	bf49      	itett	mi
 800e160:	085b      	lsrmi	r3, r3, #1
 800e162:	089b      	lsrpl	r3, r3, #2
 800e164:	2001      	movmi	r0, #1
 800e166:	6013      	strmi	r3, [r2, #0]
 800e168:	bf5c      	itt	pl
 800e16a:	6013      	strpl	r3, [r2, #0]
 800e16c:	2002      	movpl	r0, #2
 800e16e:	4770      	bx	lr
 800e170:	b299      	uxth	r1, r3
 800e172:	b909      	cbnz	r1, 800e178 <__lo0bits+0x2a>
 800e174:	0c1b      	lsrs	r3, r3, #16
 800e176:	2010      	movs	r0, #16
 800e178:	b2d9      	uxtb	r1, r3
 800e17a:	b909      	cbnz	r1, 800e180 <__lo0bits+0x32>
 800e17c:	3008      	adds	r0, #8
 800e17e:	0a1b      	lsrs	r3, r3, #8
 800e180:	0719      	lsls	r1, r3, #28
 800e182:	bf04      	itt	eq
 800e184:	091b      	lsreq	r3, r3, #4
 800e186:	3004      	addeq	r0, #4
 800e188:	0799      	lsls	r1, r3, #30
 800e18a:	bf04      	itt	eq
 800e18c:	089b      	lsreq	r3, r3, #2
 800e18e:	3002      	addeq	r0, #2
 800e190:	07d9      	lsls	r1, r3, #31
 800e192:	d403      	bmi.n	800e19c <__lo0bits+0x4e>
 800e194:	085b      	lsrs	r3, r3, #1
 800e196:	f100 0001 	add.w	r0, r0, #1
 800e19a:	d003      	beq.n	800e1a4 <__lo0bits+0x56>
 800e19c:	6013      	str	r3, [r2, #0]
 800e19e:	4770      	bx	lr
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	4770      	bx	lr
 800e1a4:	2020      	movs	r0, #32
 800e1a6:	4770      	bx	lr

0800e1a8 <__i2b>:
 800e1a8:	b510      	push	{r4, lr}
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	f7ff febd 	bl	800df2c <_Balloc>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	b928      	cbnz	r0, 800e1c2 <__i2b+0x1a>
 800e1b6:	4b05      	ldr	r3, [pc, #20]	@ (800e1cc <__i2b+0x24>)
 800e1b8:	4805      	ldr	r0, [pc, #20]	@ (800e1d0 <__i2b+0x28>)
 800e1ba:	f240 1145 	movw	r1, #325	@ 0x145
 800e1be:	f7ff fb01 	bl	800d7c4 <__assert_func>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	6144      	str	r4, [r0, #20]
 800e1c6:	6103      	str	r3, [r0, #16]
 800e1c8:	bd10      	pop	{r4, pc}
 800e1ca:	bf00      	nop
 800e1cc:	08010d93 	.word	0x08010d93
 800e1d0:	08010e04 	.word	0x08010e04

0800e1d4 <__multiply>:
 800e1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d8:	4617      	mov	r7, r2
 800e1da:	690a      	ldr	r2, [r1, #16]
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	bfa8      	it	ge
 800e1e2:	463b      	movge	r3, r7
 800e1e4:	4689      	mov	r9, r1
 800e1e6:	bfa4      	itt	ge
 800e1e8:	460f      	movge	r7, r1
 800e1ea:	4699      	movge	r9, r3
 800e1ec:	693d      	ldr	r5, [r7, #16]
 800e1ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	eb05 060a 	add.w	r6, r5, sl
 800e1fa:	42b3      	cmp	r3, r6
 800e1fc:	b085      	sub	sp, #20
 800e1fe:	bfb8      	it	lt
 800e200:	3101      	addlt	r1, #1
 800e202:	f7ff fe93 	bl	800df2c <_Balloc>
 800e206:	b930      	cbnz	r0, 800e216 <__multiply+0x42>
 800e208:	4602      	mov	r2, r0
 800e20a:	4b41      	ldr	r3, [pc, #260]	@ (800e310 <__multiply+0x13c>)
 800e20c:	4841      	ldr	r0, [pc, #260]	@ (800e314 <__multiply+0x140>)
 800e20e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e212:	f7ff fad7 	bl	800d7c4 <__assert_func>
 800e216:	f100 0414 	add.w	r4, r0, #20
 800e21a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e21e:	4623      	mov	r3, r4
 800e220:	2200      	movs	r2, #0
 800e222:	4573      	cmp	r3, lr
 800e224:	d320      	bcc.n	800e268 <__multiply+0x94>
 800e226:	f107 0814 	add.w	r8, r7, #20
 800e22a:	f109 0114 	add.w	r1, r9, #20
 800e22e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e232:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e236:	9302      	str	r3, [sp, #8]
 800e238:	1beb      	subs	r3, r5, r7
 800e23a:	3b15      	subs	r3, #21
 800e23c:	f023 0303 	bic.w	r3, r3, #3
 800e240:	3304      	adds	r3, #4
 800e242:	3715      	adds	r7, #21
 800e244:	42bd      	cmp	r5, r7
 800e246:	bf38      	it	cc
 800e248:	2304      	movcc	r3, #4
 800e24a:	9301      	str	r3, [sp, #4]
 800e24c:	9b02      	ldr	r3, [sp, #8]
 800e24e:	9103      	str	r1, [sp, #12]
 800e250:	428b      	cmp	r3, r1
 800e252:	d80c      	bhi.n	800e26e <__multiply+0x9a>
 800e254:	2e00      	cmp	r6, #0
 800e256:	dd03      	ble.n	800e260 <__multiply+0x8c>
 800e258:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d055      	beq.n	800e30c <__multiply+0x138>
 800e260:	6106      	str	r6, [r0, #16]
 800e262:	b005      	add	sp, #20
 800e264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e268:	f843 2b04 	str.w	r2, [r3], #4
 800e26c:	e7d9      	b.n	800e222 <__multiply+0x4e>
 800e26e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e272:	f1ba 0f00 	cmp.w	sl, #0
 800e276:	d01f      	beq.n	800e2b8 <__multiply+0xe4>
 800e278:	46c4      	mov	ip, r8
 800e27a:	46a1      	mov	r9, r4
 800e27c:	2700      	movs	r7, #0
 800e27e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e282:	f8d9 3000 	ldr.w	r3, [r9]
 800e286:	fa1f fb82 	uxth.w	fp, r2
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e290:	443b      	add	r3, r7
 800e292:	f8d9 7000 	ldr.w	r7, [r9]
 800e296:	0c12      	lsrs	r2, r2, #16
 800e298:	0c3f      	lsrs	r7, r7, #16
 800e29a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e29e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2a8:	4565      	cmp	r5, ip
 800e2aa:	f849 3b04 	str.w	r3, [r9], #4
 800e2ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e2b2:	d8e4      	bhi.n	800e27e <__multiply+0xaa>
 800e2b4:	9b01      	ldr	r3, [sp, #4]
 800e2b6:	50e7      	str	r7, [r4, r3]
 800e2b8:	9b03      	ldr	r3, [sp, #12]
 800e2ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e2be:	3104      	adds	r1, #4
 800e2c0:	f1b9 0f00 	cmp.w	r9, #0
 800e2c4:	d020      	beq.n	800e308 <__multiply+0x134>
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	4647      	mov	r7, r8
 800e2ca:	46a4      	mov	ip, r4
 800e2cc:	f04f 0a00 	mov.w	sl, #0
 800e2d0:	f8b7 b000 	ldrh.w	fp, [r7]
 800e2d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e2d8:	fb09 220b 	mla	r2, r9, fp, r2
 800e2dc:	4452      	add	r2, sl
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2e4:	f84c 3b04 	str.w	r3, [ip], #4
 800e2e8:	f857 3b04 	ldr.w	r3, [r7], #4
 800e2ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2f0:	f8bc 3000 	ldrh.w	r3, [ip]
 800e2f4:	fb09 330a 	mla	r3, r9, sl, r3
 800e2f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e2fc:	42bd      	cmp	r5, r7
 800e2fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e302:	d8e5      	bhi.n	800e2d0 <__multiply+0xfc>
 800e304:	9a01      	ldr	r2, [sp, #4]
 800e306:	50a3      	str	r3, [r4, r2]
 800e308:	3404      	adds	r4, #4
 800e30a:	e79f      	b.n	800e24c <__multiply+0x78>
 800e30c:	3e01      	subs	r6, #1
 800e30e:	e7a1      	b.n	800e254 <__multiply+0x80>
 800e310:	08010d93 	.word	0x08010d93
 800e314:	08010e04 	.word	0x08010e04

0800e318 <__pow5mult>:
 800e318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e31c:	4615      	mov	r5, r2
 800e31e:	f012 0203 	ands.w	r2, r2, #3
 800e322:	4607      	mov	r7, r0
 800e324:	460e      	mov	r6, r1
 800e326:	d007      	beq.n	800e338 <__pow5mult+0x20>
 800e328:	4c25      	ldr	r4, [pc, #148]	@ (800e3c0 <__pow5mult+0xa8>)
 800e32a:	3a01      	subs	r2, #1
 800e32c:	2300      	movs	r3, #0
 800e32e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e332:	f7ff fe5d 	bl	800dff0 <__multadd>
 800e336:	4606      	mov	r6, r0
 800e338:	10ad      	asrs	r5, r5, #2
 800e33a:	d03d      	beq.n	800e3b8 <__pow5mult+0xa0>
 800e33c:	69fc      	ldr	r4, [r7, #28]
 800e33e:	b97c      	cbnz	r4, 800e360 <__pow5mult+0x48>
 800e340:	2010      	movs	r0, #16
 800e342:	f7fd ff35 	bl	800c1b0 <malloc>
 800e346:	4602      	mov	r2, r0
 800e348:	61f8      	str	r0, [r7, #28]
 800e34a:	b928      	cbnz	r0, 800e358 <__pow5mult+0x40>
 800e34c:	4b1d      	ldr	r3, [pc, #116]	@ (800e3c4 <__pow5mult+0xac>)
 800e34e:	481e      	ldr	r0, [pc, #120]	@ (800e3c8 <__pow5mult+0xb0>)
 800e350:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e354:	f7ff fa36 	bl	800d7c4 <__assert_func>
 800e358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e35c:	6004      	str	r4, [r0, #0]
 800e35e:	60c4      	str	r4, [r0, #12]
 800e360:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e368:	b94c      	cbnz	r4, 800e37e <__pow5mult+0x66>
 800e36a:	f240 2171 	movw	r1, #625	@ 0x271
 800e36e:	4638      	mov	r0, r7
 800e370:	f7ff ff1a 	bl	800e1a8 <__i2b>
 800e374:	2300      	movs	r3, #0
 800e376:	f8c8 0008 	str.w	r0, [r8, #8]
 800e37a:	4604      	mov	r4, r0
 800e37c:	6003      	str	r3, [r0, #0]
 800e37e:	f04f 0900 	mov.w	r9, #0
 800e382:	07eb      	lsls	r3, r5, #31
 800e384:	d50a      	bpl.n	800e39c <__pow5mult+0x84>
 800e386:	4631      	mov	r1, r6
 800e388:	4622      	mov	r2, r4
 800e38a:	4638      	mov	r0, r7
 800e38c:	f7ff ff22 	bl	800e1d4 <__multiply>
 800e390:	4631      	mov	r1, r6
 800e392:	4680      	mov	r8, r0
 800e394:	4638      	mov	r0, r7
 800e396:	f7ff fe09 	bl	800dfac <_Bfree>
 800e39a:	4646      	mov	r6, r8
 800e39c:	106d      	asrs	r5, r5, #1
 800e39e:	d00b      	beq.n	800e3b8 <__pow5mult+0xa0>
 800e3a0:	6820      	ldr	r0, [r4, #0]
 800e3a2:	b938      	cbnz	r0, 800e3b4 <__pow5mult+0x9c>
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	4638      	mov	r0, r7
 800e3aa:	f7ff ff13 	bl	800e1d4 <__multiply>
 800e3ae:	6020      	str	r0, [r4, #0]
 800e3b0:	f8c0 9000 	str.w	r9, [r0]
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	e7e4      	b.n	800e382 <__pow5mult+0x6a>
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3be:	bf00      	nop
 800e3c0:	08010fe4 	.word	0x08010fe4
 800e3c4:	08010cde 	.word	0x08010cde
 800e3c8:	08010e04 	.word	0x08010e04

0800e3cc <__lshift>:
 800e3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	6849      	ldr	r1, [r1, #4]
 800e3d4:	6923      	ldr	r3, [r4, #16]
 800e3d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3da:	68a3      	ldr	r3, [r4, #8]
 800e3dc:	4607      	mov	r7, r0
 800e3de:	4691      	mov	r9, r2
 800e3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3e4:	f108 0601 	add.w	r6, r8, #1
 800e3e8:	42b3      	cmp	r3, r6
 800e3ea:	db0b      	blt.n	800e404 <__lshift+0x38>
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	f7ff fd9d 	bl	800df2c <_Balloc>
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	b948      	cbnz	r0, 800e40a <__lshift+0x3e>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	4b28      	ldr	r3, [pc, #160]	@ (800e49c <__lshift+0xd0>)
 800e3fa:	4829      	ldr	r0, [pc, #164]	@ (800e4a0 <__lshift+0xd4>)
 800e3fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e400:	f7ff f9e0 	bl	800d7c4 <__assert_func>
 800e404:	3101      	adds	r1, #1
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	e7ee      	b.n	800e3e8 <__lshift+0x1c>
 800e40a:	2300      	movs	r3, #0
 800e40c:	f100 0114 	add.w	r1, r0, #20
 800e410:	f100 0210 	add.w	r2, r0, #16
 800e414:	4618      	mov	r0, r3
 800e416:	4553      	cmp	r3, sl
 800e418:	db33      	blt.n	800e482 <__lshift+0xb6>
 800e41a:	6920      	ldr	r0, [r4, #16]
 800e41c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e420:	f104 0314 	add.w	r3, r4, #20
 800e424:	f019 091f 	ands.w	r9, r9, #31
 800e428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e42c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e430:	d02b      	beq.n	800e48a <__lshift+0xbe>
 800e432:	f1c9 0e20 	rsb	lr, r9, #32
 800e436:	468a      	mov	sl, r1
 800e438:	2200      	movs	r2, #0
 800e43a:	6818      	ldr	r0, [r3, #0]
 800e43c:	fa00 f009 	lsl.w	r0, r0, r9
 800e440:	4310      	orrs	r0, r2
 800e442:	f84a 0b04 	str.w	r0, [sl], #4
 800e446:	f853 2b04 	ldr.w	r2, [r3], #4
 800e44a:	459c      	cmp	ip, r3
 800e44c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e450:	d8f3      	bhi.n	800e43a <__lshift+0x6e>
 800e452:	ebac 0304 	sub.w	r3, ip, r4
 800e456:	3b15      	subs	r3, #21
 800e458:	f023 0303 	bic.w	r3, r3, #3
 800e45c:	3304      	adds	r3, #4
 800e45e:	f104 0015 	add.w	r0, r4, #21
 800e462:	4560      	cmp	r0, ip
 800e464:	bf88      	it	hi
 800e466:	2304      	movhi	r3, #4
 800e468:	50ca      	str	r2, [r1, r3]
 800e46a:	b10a      	cbz	r2, 800e470 <__lshift+0xa4>
 800e46c:	f108 0602 	add.w	r6, r8, #2
 800e470:	3e01      	subs	r6, #1
 800e472:	4638      	mov	r0, r7
 800e474:	612e      	str	r6, [r5, #16]
 800e476:	4621      	mov	r1, r4
 800e478:	f7ff fd98 	bl	800dfac <_Bfree>
 800e47c:	4628      	mov	r0, r5
 800e47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e482:	f842 0f04 	str.w	r0, [r2, #4]!
 800e486:	3301      	adds	r3, #1
 800e488:	e7c5      	b.n	800e416 <__lshift+0x4a>
 800e48a:	3904      	subs	r1, #4
 800e48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e490:	f841 2f04 	str.w	r2, [r1, #4]!
 800e494:	459c      	cmp	ip, r3
 800e496:	d8f9      	bhi.n	800e48c <__lshift+0xc0>
 800e498:	e7ea      	b.n	800e470 <__lshift+0xa4>
 800e49a:	bf00      	nop
 800e49c:	08010d93 	.word	0x08010d93
 800e4a0:	08010e04 	.word	0x08010e04

0800e4a4 <__mcmp>:
 800e4a4:	690a      	ldr	r2, [r1, #16]
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	6900      	ldr	r0, [r0, #16]
 800e4aa:	1a80      	subs	r0, r0, r2
 800e4ac:	b530      	push	{r4, r5, lr}
 800e4ae:	d10e      	bne.n	800e4ce <__mcmp+0x2a>
 800e4b0:	3314      	adds	r3, #20
 800e4b2:	3114      	adds	r1, #20
 800e4b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e4b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e4bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e4c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e4c4:	4295      	cmp	r5, r2
 800e4c6:	d003      	beq.n	800e4d0 <__mcmp+0x2c>
 800e4c8:	d205      	bcs.n	800e4d6 <__mcmp+0x32>
 800e4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ce:	bd30      	pop	{r4, r5, pc}
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	d3f3      	bcc.n	800e4bc <__mcmp+0x18>
 800e4d4:	e7fb      	b.n	800e4ce <__mcmp+0x2a>
 800e4d6:	2001      	movs	r0, #1
 800e4d8:	e7f9      	b.n	800e4ce <__mcmp+0x2a>
	...

0800e4dc <__mdiff>:
 800e4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e0:	4689      	mov	r9, r1
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4648      	mov	r0, r9
 800e4e8:	4614      	mov	r4, r2
 800e4ea:	f7ff ffdb 	bl	800e4a4 <__mcmp>
 800e4ee:	1e05      	subs	r5, r0, #0
 800e4f0:	d112      	bne.n	800e518 <__mdiff+0x3c>
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f7ff fd19 	bl	800df2c <_Balloc>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	b928      	cbnz	r0, 800e50a <__mdiff+0x2e>
 800e4fe:	4b3f      	ldr	r3, [pc, #252]	@ (800e5fc <__mdiff+0x120>)
 800e500:	f240 2137 	movw	r1, #567	@ 0x237
 800e504:	483e      	ldr	r0, [pc, #248]	@ (800e600 <__mdiff+0x124>)
 800e506:	f7ff f95d 	bl	800d7c4 <__assert_func>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e510:	4610      	mov	r0, r2
 800e512:	b003      	add	sp, #12
 800e514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e518:	bfbc      	itt	lt
 800e51a:	464b      	movlt	r3, r9
 800e51c:	46a1      	movlt	r9, r4
 800e51e:	4630      	mov	r0, r6
 800e520:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e524:	bfba      	itte	lt
 800e526:	461c      	movlt	r4, r3
 800e528:	2501      	movlt	r5, #1
 800e52a:	2500      	movge	r5, #0
 800e52c:	f7ff fcfe 	bl	800df2c <_Balloc>
 800e530:	4602      	mov	r2, r0
 800e532:	b918      	cbnz	r0, 800e53c <__mdiff+0x60>
 800e534:	4b31      	ldr	r3, [pc, #196]	@ (800e5fc <__mdiff+0x120>)
 800e536:	f240 2145 	movw	r1, #581	@ 0x245
 800e53a:	e7e3      	b.n	800e504 <__mdiff+0x28>
 800e53c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e540:	6926      	ldr	r6, [r4, #16]
 800e542:	60c5      	str	r5, [r0, #12]
 800e544:	f109 0310 	add.w	r3, r9, #16
 800e548:	f109 0514 	add.w	r5, r9, #20
 800e54c:	f104 0e14 	add.w	lr, r4, #20
 800e550:	f100 0b14 	add.w	fp, r0, #20
 800e554:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e558:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	46d9      	mov	r9, fp
 800e560:	f04f 0c00 	mov.w	ip, #0
 800e564:	9b01      	ldr	r3, [sp, #4]
 800e566:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e56a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	fa1f f38a 	uxth.w	r3, sl
 800e574:	4619      	mov	r1, r3
 800e576:	b283      	uxth	r3, r0
 800e578:	1acb      	subs	r3, r1, r3
 800e57a:	0c00      	lsrs	r0, r0, #16
 800e57c:	4463      	add	r3, ip
 800e57e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e582:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e586:	b29b      	uxth	r3, r3
 800e588:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e58c:	4576      	cmp	r6, lr
 800e58e:	f849 3b04 	str.w	r3, [r9], #4
 800e592:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e596:	d8e5      	bhi.n	800e564 <__mdiff+0x88>
 800e598:	1b33      	subs	r3, r6, r4
 800e59a:	3b15      	subs	r3, #21
 800e59c:	f023 0303 	bic.w	r3, r3, #3
 800e5a0:	3415      	adds	r4, #21
 800e5a2:	3304      	adds	r3, #4
 800e5a4:	42a6      	cmp	r6, r4
 800e5a6:	bf38      	it	cc
 800e5a8:	2304      	movcc	r3, #4
 800e5aa:	441d      	add	r5, r3
 800e5ac:	445b      	add	r3, fp
 800e5ae:	461e      	mov	r6, r3
 800e5b0:	462c      	mov	r4, r5
 800e5b2:	4544      	cmp	r4, r8
 800e5b4:	d30e      	bcc.n	800e5d4 <__mdiff+0xf8>
 800e5b6:	f108 0103 	add.w	r1, r8, #3
 800e5ba:	1b49      	subs	r1, r1, r5
 800e5bc:	f021 0103 	bic.w	r1, r1, #3
 800e5c0:	3d03      	subs	r5, #3
 800e5c2:	45a8      	cmp	r8, r5
 800e5c4:	bf38      	it	cc
 800e5c6:	2100      	movcc	r1, #0
 800e5c8:	440b      	add	r3, r1
 800e5ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5ce:	b191      	cbz	r1, 800e5f6 <__mdiff+0x11a>
 800e5d0:	6117      	str	r7, [r2, #16]
 800e5d2:	e79d      	b.n	800e510 <__mdiff+0x34>
 800e5d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e5d8:	46e6      	mov	lr, ip
 800e5da:	0c08      	lsrs	r0, r1, #16
 800e5dc:	fa1c fc81 	uxtah	ip, ip, r1
 800e5e0:	4471      	add	r1, lr
 800e5e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e5e6:	b289      	uxth	r1, r1
 800e5e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e5ec:	f846 1b04 	str.w	r1, [r6], #4
 800e5f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5f4:	e7dd      	b.n	800e5b2 <__mdiff+0xd6>
 800e5f6:	3f01      	subs	r7, #1
 800e5f8:	e7e7      	b.n	800e5ca <__mdiff+0xee>
 800e5fa:	bf00      	nop
 800e5fc:	08010d93 	.word	0x08010d93
 800e600:	08010e04 	.word	0x08010e04

0800e604 <__ulp>:
 800e604:	b082      	sub	sp, #8
 800e606:	ed8d 0b00 	vstr	d0, [sp]
 800e60a:	9a01      	ldr	r2, [sp, #4]
 800e60c:	4b0f      	ldr	r3, [pc, #60]	@ (800e64c <__ulp+0x48>)
 800e60e:	4013      	ands	r3, r2
 800e610:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e614:	2b00      	cmp	r3, #0
 800e616:	dc08      	bgt.n	800e62a <__ulp+0x26>
 800e618:	425b      	negs	r3, r3
 800e61a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e61e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e622:	da04      	bge.n	800e62e <__ulp+0x2a>
 800e624:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e628:	4113      	asrs	r3, r2
 800e62a:	2200      	movs	r2, #0
 800e62c:	e008      	b.n	800e640 <__ulp+0x3c>
 800e62e:	f1a2 0314 	sub.w	r3, r2, #20
 800e632:	2b1e      	cmp	r3, #30
 800e634:	bfda      	itte	le
 800e636:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e63a:	40da      	lsrle	r2, r3
 800e63c:	2201      	movgt	r2, #1
 800e63e:	2300      	movs	r3, #0
 800e640:	4619      	mov	r1, r3
 800e642:	4610      	mov	r0, r2
 800e644:	ec41 0b10 	vmov	d0, r0, r1
 800e648:	b002      	add	sp, #8
 800e64a:	4770      	bx	lr
 800e64c:	7ff00000 	.word	0x7ff00000

0800e650 <__b2d>:
 800e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e654:	6906      	ldr	r6, [r0, #16]
 800e656:	f100 0814 	add.w	r8, r0, #20
 800e65a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e65e:	1f37      	subs	r7, r6, #4
 800e660:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e664:	4610      	mov	r0, r2
 800e666:	f7ff fd53 	bl	800e110 <__hi0bits>
 800e66a:	f1c0 0320 	rsb	r3, r0, #32
 800e66e:	280a      	cmp	r0, #10
 800e670:	600b      	str	r3, [r1, #0]
 800e672:	491b      	ldr	r1, [pc, #108]	@ (800e6e0 <__b2d+0x90>)
 800e674:	dc15      	bgt.n	800e6a2 <__b2d+0x52>
 800e676:	f1c0 0c0b 	rsb	ip, r0, #11
 800e67a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e67e:	45b8      	cmp	r8, r7
 800e680:	ea43 0501 	orr.w	r5, r3, r1
 800e684:	bf34      	ite	cc
 800e686:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e68a:	2300      	movcs	r3, #0
 800e68c:	3015      	adds	r0, #21
 800e68e:	fa02 f000 	lsl.w	r0, r2, r0
 800e692:	fa23 f30c 	lsr.w	r3, r3, ip
 800e696:	4303      	orrs	r3, r0
 800e698:	461c      	mov	r4, r3
 800e69a:	ec45 4b10 	vmov	d0, r4, r5
 800e69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a2:	45b8      	cmp	r8, r7
 800e6a4:	bf3a      	itte	cc
 800e6a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e6aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800e6ae:	2300      	movcs	r3, #0
 800e6b0:	380b      	subs	r0, #11
 800e6b2:	d012      	beq.n	800e6da <__b2d+0x8a>
 800e6b4:	f1c0 0120 	rsb	r1, r0, #32
 800e6b8:	fa23 f401 	lsr.w	r4, r3, r1
 800e6bc:	4082      	lsls	r2, r0
 800e6be:	4322      	orrs	r2, r4
 800e6c0:	4547      	cmp	r7, r8
 800e6c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e6c6:	bf8c      	ite	hi
 800e6c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e6cc:	2200      	movls	r2, #0
 800e6ce:	4083      	lsls	r3, r0
 800e6d0:	40ca      	lsrs	r2, r1
 800e6d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	e7de      	b.n	800e698 <__b2d+0x48>
 800e6da:	ea42 0501 	orr.w	r5, r2, r1
 800e6de:	e7db      	b.n	800e698 <__b2d+0x48>
 800e6e0:	3ff00000 	.word	0x3ff00000

0800e6e4 <__d2b>:
 800e6e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6e8:	460f      	mov	r7, r1
 800e6ea:	2101      	movs	r1, #1
 800e6ec:	ec59 8b10 	vmov	r8, r9, d0
 800e6f0:	4616      	mov	r6, r2
 800e6f2:	f7ff fc1b 	bl	800df2c <_Balloc>
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	b930      	cbnz	r0, 800e708 <__d2b+0x24>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	4b23      	ldr	r3, [pc, #140]	@ (800e78c <__d2b+0xa8>)
 800e6fe:	4824      	ldr	r0, [pc, #144]	@ (800e790 <__d2b+0xac>)
 800e700:	f240 310f 	movw	r1, #783	@ 0x30f
 800e704:	f7ff f85e 	bl	800d7c4 <__assert_func>
 800e708:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e70c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e710:	b10d      	cbz	r5, 800e716 <__d2b+0x32>
 800e712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e716:	9301      	str	r3, [sp, #4]
 800e718:	f1b8 0300 	subs.w	r3, r8, #0
 800e71c:	d023      	beq.n	800e766 <__d2b+0x82>
 800e71e:	4668      	mov	r0, sp
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	f7ff fd14 	bl	800e14e <__lo0bits>
 800e726:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e72a:	b1d0      	cbz	r0, 800e762 <__d2b+0x7e>
 800e72c:	f1c0 0320 	rsb	r3, r0, #32
 800e730:	fa02 f303 	lsl.w	r3, r2, r3
 800e734:	430b      	orrs	r3, r1
 800e736:	40c2      	lsrs	r2, r0
 800e738:	6163      	str	r3, [r4, #20]
 800e73a:	9201      	str	r2, [sp, #4]
 800e73c:	9b01      	ldr	r3, [sp, #4]
 800e73e:	61a3      	str	r3, [r4, #24]
 800e740:	2b00      	cmp	r3, #0
 800e742:	bf0c      	ite	eq
 800e744:	2201      	moveq	r2, #1
 800e746:	2202      	movne	r2, #2
 800e748:	6122      	str	r2, [r4, #16]
 800e74a:	b1a5      	cbz	r5, 800e776 <__d2b+0x92>
 800e74c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e750:	4405      	add	r5, r0
 800e752:	603d      	str	r5, [r7, #0]
 800e754:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e758:	6030      	str	r0, [r6, #0]
 800e75a:	4620      	mov	r0, r4
 800e75c:	b003      	add	sp, #12
 800e75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e762:	6161      	str	r1, [r4, #20]
 800e764:	e7ea      	b.n	800e73c <__d2b+0x58>
 800e766:	a801      	add	r0, sp, #4
 800e768:	f7ff fcf1 	bl	800e14e <__lo0bits>
 800e76c:	9b01      	ldr	r3, [sp, #4]
 800e76e:	6163      	str	r3, [r4, #20]
 800e770:	3020      	adds	r0, #32
 800e772:	2201      	movs	r2, #1
 800e774:	e7e8      	b.n	800e748 <__d2b+0x64>
 800e776:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e77a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e77e:	6038      	str	r0, [r7, #0]
 800e780:	6918      	ldr	r0, [r3, #16]
 800e782:	f7ff fcc5 	bl	800e110 <__hi0bits>
 800e786:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e78a:	e7e5      	b.n	800e758 <__d2b+0x74>
 800e78c:	08010d93 	.word	0x08010d93
 800e790:	08010e04 	.word	0x08010e04

0800e794 <__ratio>:
 800e794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e798:	b085      	sub	sp, #20
 800e79a:	e9cd 1000 	strd	r1, r0, [sp]
 800e79e:	a902      	add	r1, sp, #8
 800e7a0:	f7ff ff56 	bl	800e650 <__b2d>
 800e7a4:	9800      	ldr	r0, [sp, #0]
 800e7a6:	a903      	add	r1, sp, #12
 800e7a8:	ec55 4b10 	vmov	r4, r5, d0
 800e7ac:	f7ff ff50 	bl	800e650 <__b2d>
 800e7b0:	9b01      	ldr	r3, [sp, #4]
 800e7b2:	6919      	ldr	r1, [r3, #16]
 800e7b4:	9b00      	ldr	r3, [sp, #0]
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	1ac9      	subs	r1, r1, r3
 800e7ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e7be:	1a9b      	subs	r3, r3, r2
 800e7c0:	ec5b ab10 	vmov	sl, fp, d0
 800e7c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	bfce      	itee	gt
 800e7cc:	462a      	movgt	r2, r5
 800e7ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e7d2:	465a      	movle	r2, fp
 800e7d4:	462f      	mov	r7, r5
 800e7d6:	46d9      	mov	r9, fp
 800e7d8:	bfcc      	ite	gt
 800e7da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e7de:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e7e2:	464b      	mov	r3, r9
 800e7e4:	4652      	mov	r2, sl
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	4639      	mov	r1, r7
 800e7ea:	f7f2 f857 	bl	800089c <__aeabi_ddiv>
 800e7ee:	ec41 0b10 	vmov	d0, r0, r1
 800e7f2:	b005      	add	sp, #20
 800e7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7f8 <__copybits>:
 800e7f8:	3901      	subs	r1, #1
 800e7fa:	b570      	push	{r4, r5, r6, lr}
 800e7fc:	1149      	asrs	r1, r1, #5
 800e7fe:	6914      	ldr	r4, [r2, #16]
 800e800:	3101      	adds	r1, #1
 800e802:	f102 0314 	add.w	r3, r2, #20
 800e806:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e80a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e80e:	1f05      	subs	r5, r0, #4
 800e810:	42a3      	cmp	r3, r4
 800e812:	d30c      	bcc.n	800e82e <__copybits+0x36>
 800e814:	1aa3      	subs	r3, r4, r2
 800e816:	3b11      	subs	r3, #17
 800e818:	f023 0303 	bic.w	r3, r3, #3
 800e81c:	3211      	adds	r2, #17
 800e81e:	42a2      	cmp	r2, r4
 800e820:	bf88      	it	hi
 800e822:	2300      	movhi	r3, #0
 800e824:	4418      	add	r0, r3
 800e826:	2300      	movs	r3, #0
 800e828:	4288      	cmp	r0, r1
 800e82a:	d305      	bcc.n	800e838 <__copybits+0x40>
 800e82c:	bd70      	pop	{r4, r5, r6, pc}
 800e82e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e832:	f845 6f04 	str.w	r6, [r5, #4]!
 800e836:	e7eb      	b.n	800e810 <__copybits+0x18>
 800e838:	f840 3b04 	str.w	r3, [r0], #4
 800e83c:	e7f4      	b.n	800e828 <__copybits+0x30>

0800e83e <__any_on>:
 800e83e:	f100 0214 	add.w	r2, r0, #20
 800e842:	6900      	ldr	r0, [r0, #16]
 800e844:	114b      	asrs	r3, r1, #5
 800e846:	4298      	cmp	r0, r3
 800e848:	b510      	push	{r4, lr}
 800e84a:	db11      	blt.n	800e870 <__any_on+0x32>
 800e84c:	dd0a      	ble.n	800e864 <__any_on+0x26>
 800e84e:	f011 011f 	ands.w	r1, r1, #31
 800e852:	d007      	beq.n	800e864 <__any_on+0x26>
 800e854:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e858:	fa24 f001 	lsr.w	r0, r4, r1
 800e85c:	fa00 f101 	lsl.w	r1, r0, r1
 800e860:	428c      	cmp	r4, r1
 800e862:	d10b      	bne.n	800e87c <__any_on+0x3e>
 800e864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e868:	4293      	cmp	r3, r2
 800e86a:	d803      	bhi.n	800e874 <__any_on+0x36>
 800e86c:	2000      	movs	r0, #0
 800e86e:	bd10      	pop	{r4, pc}
 800e870:	4603      	mov	r3, r0
 800e872:	e7f7      	b.n	800e864 <__any_on+0x26>
 800e874:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e878:	2900      	cmp	r1, #0
 800e87a:	d0f5      	beq.n	800e868 <__any_on+0x2a>
 800e87c:	2001      	movs	r0, #1
 800e87e:	e7f6      	b.n	800e86e <__any_on+0x30>

0800e880 <__ascii_wctomb>:
 800e880:	4603      	mov	r3, r0
 800e882:	4608      	mov	r0, r1
 800e884:	b141      	cbz	r1, 800e898 <__ascii_wctomb+0x18>
 800e886:	2aff      	cmp	r2, #255	@ 0xff
 800e888:	d904      	bls.n	800e894 <__ascii_wctomb+0x14>
 800e88a:	228a      	movs	r2, #138	@ 0x8a
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	f04f 30ff 	mov.w	r0, #4294967295
 800e892:	4770      	bx	lr
 800e894:	700a      	strb	r2, [r1, #0]
 800e896:	2001      	movs	r0, #1
 800e898:	4770      	bx	lr

0800e89a <__ssputs_r>:
 800e89a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e89e:	688e      	ldr	r6, [r1, #8]
 800e8a0:	461f      	mov	r7, r3
 800e8a2:	42be      	cmp	r6, r7
 800e8a4:	680b      	ldr	r3, [r1, #0]
 800e8a6:	4682      	mov	sl, r0
 800e8a8:	460c      	mov	r4, r1
 800e8aa:	4690      	mov	r8, r2
 800e8ac:	d82d      	bhi.n	800e90a <__ssputs_r+0x70>
 800e8ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8b2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e8b6:	d026      	beq.n	800e906 <__ssputs_r+0x6c>
 800e8b8:	6965      	ldr	r5, [r4, #20]
 800e8ba:	6909      	ldr	r1, [r1, #16]
 800e8bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8c0:	eba3 0901 	sub.w	r9, r3, r1
 800e8c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8c8:	1c7b      	adds	r3, r7, #1
 800e8ca:	444b      	add	r3, r9
 800e8cc:	106d      	asrs	r5, r5, #1
 800e8ce:	429d      	cmp	r5, r3
 800e8d0:	bf38      	it	cc
 800e8d2:	461d      	movcc	r5, r3
 800e8d4:	0553      	lsls	r3, r2, #21
 800e8d6:	d527      	bpl.n	800e928 <__ssputs_r+0x8e>
 800e8d8:	4629      	mov	r1, r5
 800e8da:	f7fd fc9b 	bl	800c214 <_malloc_r>
 800e8de:	4606      	mov	r6, r0
 800e8e0:	b360      	cbz	r0, 800e93c <__ssputs_r+0xa2>
 800e8e2:	6921      	ldr	r1, [r4, #16]
 800e8e4:	464a      	mov	r2, r9
 800e8e6:	f7fe ff50 	bl	800d78a <memcpy>
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e8f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8f4:	81a3      	strh	r3, [r4, #12]
 800e8f6:	6126      	str	r6, [r4, #16]
 800e8f8:	6165      	str	r5, [r4, #20]
 800e8fa:	444e      	add	r6, r9
 800e8fc:	eba5 0509 	sub.w	r5, r5, r9
 800e900:	6026      	str	r6, [r4, #0]
 800e902:	60a5      	str	r5, [r4, #8]
 800e904:	463e      	mov	r6, r7
 800e906:	42be      	cmp	r6, r7
 800e908:	d900      	bls.n	800e90c <__ssputs_r+0x72>
 800e90a:	463e      	mov	r6, r7
 800e90c:	6820      	ldr	r0, [r4, #0]
 800e90e:	4632      	mov	r2, r6
 800e910:	4641      	mov	r1, r8
 800e912:	f000 fbc5 	bl	800f0a0 <memmove>
 800e916:	68a3      	ldr	r3, [r4, #8]
 800e918:	1b9b      	subs	r3, r3, r6
 800e91a:	60a3      	str	r3, [r4, #8]
 800e91c:	6823      	ldr	r3, [r4, #0]
 800e91e:	4433      	add	r3, r6
 800e920:	6023      	str	r3, [r4, #0]
 800e922:	2000      	movs	r0, #0
 800e924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e928:	462a      	mov	r2, r5
 800e92a:	f000 fc10 	bl	800f14e <_realloc_r>
 800e92e:	4606      	mov	r6, r0
 800e930:	2800      	cmp	r0, #0
 800e932:	d1e0      	bne.n	800e8f6 <__ssputs_r+0x5c>
 800e934:	6921      	ldr	r1, [r4, #16]
 800e936:	4650      	mov	r0, sl
 800e938:	f7fe ff62 	bl	800d800 <_free_r>
 800e93c:	230c      	movs	r3, #12
 800e93e:	f8ca 3000 	str.w	r3, [sl]
 800e942:	89a3      	ldrh	r3, [r4, #12]
 800e944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e948:	81a3      	strh	r3, [r4, #12]
 800e94a:	f04f 30ff 	mov.w	r0, #4294967295
 800e94e:	e7e9      	b.n	800e924 <__ssputs_r+0x8a>

0800e950 <_svfiprintf_r>:
 800e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e954:	4698      	mov	r8, r3
 800e956:	898b      	ldrh	r3, [r1, #12]
 800e958:	061b      	lsls	r3, r3, #24
 800e95a:	b09d      	sub	sp, #116	@ 0x74
 800e95c:	4607      	mov	r7, r0
 800e95e:	460d      	mov	r5, r1
 800e960:	4614      	mov	r4, r2
 800e962:	d510      	bpl.n	800e986 <_svfiprintf_r+0x36>
 800e964:	690b      	ldr	r3, [r1, #16]
 800e966:	b973      	cbnz	r3, 800e986 <_svfiprintf_r+0x36>
 800e968:	2140      	movs	r1, #64	@ 0x40
 800e96a:	f7fd fc53 	bl	800c214 <_malloc_r>
 800e96e:	6028      	str	r0, [r5, #0]
 800e970:	6128      	str	r0, [r5, #16]
 800e972:	b930      	cbnz	r0, 800e982 <_svfiprintf_r+0x32>
 800e974:	230c      	movs	r3, #12
 800e976:	603b      	str	r3, [r7, #0]
 800e978:	f04f 30ff 	mov.w	r0, #4294967295
 800e97c:	b01d      	add	sp, #116	@ 0x74
 800e97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e982:	2340      	movs	r3, #64	@ 0x40
 800e984:	616b      	str	r3, [r5, #20]
 800e986:	2300      	movs	r3, #0
 800e988:	9309      	str	r3, [sp, #36]	@ 0x24
 800e98a:	2320      	movs	r3, #32
 800e98c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e990:	f8cd 800c 	str.w	r8, [sp, #12]
 800e994:	2330      	movs	r3, #48	@ 0x30
 800e996:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eb34 <_svfiprintf_r+0x1e4>
 800e99a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e99e:	f04f 0901 	mov.w	r9, #1
 800e9a2:	4623      	mov	r3, r4
 800e9a4:	469a      	mov	sl, r3
 800e9a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9aa:	b10a      	cbz	r2, 800e9b0 <_svfiprintf_r+0x60>
 800e9ac:	2a25      	cmp	r2, #37	@ 0x25
 800e9ae:	d1f9      	bne.n	800e9a4 <_svfiprintf_r+0x54>
 800e9b0:	ebba 0b04 	subs.w	fp, sl, r4
 800e9b4:	d00b      	beq.n	800e9ce <_svfiprintf_r+0x7e>
 800e9b6:	465b      	mov	r3, fp
 800e9b8:	4622      	mov	r2, r4
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	4638      	mov	r0, r7
 800e9be:	f7ff ff6c 	bl	800e89a <__ssputs_r>
 800e9c2:	3001      	adds	r0, #1
 800e9c4:	f000 80a7 	beq.w	800eb16 <_svfiprintf_r+0x1c6>
 800e9c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9ca:	445a      	add	r2, fp
 800e9cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9ce:	f89a 3000 	ldrb.w	r3, [sl]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 809f 	beq.w	800eb16 <_svfiprintf_r+0x1c6>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f04f 32ff 	mov.w	r2, #4294967295
 800e9de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9e2:	f10a 0a01 	add.w	sl, sl, #1
 800e9e6:	9304      	str	r3, [sp, #16]
 800e9e8:	9307      	str	r3, [sp, #28]
 800e9ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9f0:	4654      	mov	r4, sl
 800e9f2:	2205      	movs	r2, #5
 800e9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9f8:	484e      	ldr	r0, [pc, #312]	@ (800eb34 <_svfiprintf_r+0x1e4>)
 800e9fa:	f7f1 fc19 	bl	8000230 <memchr>
 800e9fe:	9a04      	ldr	r2, [sp, #16]
 800ea00:	b9d8      	cbnz	r0, 800ea3a <_svfiprintf_r+0xea>
 800ea02:	06d0      	lsls	r0, r2, #27
 800ea04:	bf44      	itt	mi
 800ea06:	2320      	movmi	r3, #32
 800ea08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea0c:	0711      	lsls	r1, r2, #28
 800ea0e:	bf44      	itt	mi
 800ea10:	232b      	movmi	r3, #43	@ 0x2b
 800ea12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea16:	f89a 3000 	ldrb.w	r3, [sl]
 800ea1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea1c:	d015      	beq.n	800ea4a <_svfiprintf_r+0xfa>
 800ea1e:	9a07      	ldr	r2, [sp, #28]
 800ea20:	4654      	mov	r4, sl
 800ea22:	2000      	movs	r0, #0
 800ea24:	f04f 0c0a 	mov.w	ip, #10
 800ea28:	4621      	mov	r1, r4
 800ea2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea2e:	3b30      	subs	r3, #48	@ 0x30
 800ea30:	2b09      	cmp	r3, #9
 800ea32:	d94b      	bls.n	800eacc <_svfiprintf_r+0x17c>
 800ea34:	b1b0      	cbz	r0, 800ea64 <_svfiprintf_r+0x114>
 800ea36:	9207      	str	r2, [sp, #28]
 800ea38:	e014      	b.n	800ea64 <_svfiprintf_r+0x114>
 800ea3a:	eba0 0308 	sub.w	r3, r0, r8
 800ea3e:	fa09 f303 	lsl.w	r3, r9, r3
 800ea42:	4313      	orrs	r3, r2
 800ea44:	9304      	str	r3, [sp, #16]
 800ea46:	46a2      	mov	sl, r4
 800ea48:	e7d2      	b.n	800e9f0 <_svfiprintf_r+0xa0>
 800ea4a:	9b03      	ldr	r3, [sp, #12]
 800ea4c:	1d19      	adds	r1, r3, #4
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	9103      	str	r1, [sp, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	bfbb      	ittet	lt
 800ea56:	425b      	neglt	r3, r3
 800ea58:	f042 0202 	orrlt.w	r2, r2, #2
 800ea5c:	9307      	strge	r3, [sp, #28]
 800ea5e:	9307      	strlt	r3, [sp, #28]
 800ea60:	bfb8      	it	lt
 800ea62:	9204      	strlt	r2, [sp, #16]
 800ea64:	7823      	ldrb	r3, [r4, #0]
 800ea66:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea68:	d10a      	bne.n	800ea80 <_svfiprintf_r+0x130>
 800ea6a:	7863      	ldrb	r3, [r4, #1]
 800ea6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea6e:	d132      	bne.n	800ead6 <_svfiprintf_r+0x186>
 800ea70:	9b03      	ldr	r3, [sp, #12]
 800ea72:	1d1a      	adds	r2, r3, #4
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	9203      	str	r2, [sp, #12]
 800ea78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea7c:	3402      	adds	r4, #2
 800ea7e:	9305      	str	r3, [sp, #20]
 800ea80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eb44 <_svfiprintf_r+0x1f4>
 800ea84:	7821      	ldrb	r1, [r4, #0]
 800ea86:	2203      	movs	r2, #3
 800ea88:	4650      	mov	r0, sl
 800ea8a:	f7f1 fbd1 	bl	8000230 <memchr>
 800ea8e:	b138      	cbz	r0, 800eaa0 <_svfiprintf_r+0x150>
 800ea90:	9b04      	ldr	r3, [sp, #16]
 800ea92:	eba0 000a 	sub.w	r0, r0, sl
 800ea96:	2240      	movs	r2, #64	@ 0x40
 800ea98:	4082      	lsls	r2, r0
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	3401      	adds	r4, #1
 800ea9e:	9304      	str	r3, [sp, #16]
 800eaa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaa4:	4824      	ldr	r0, [pc, #144]	@ (800eb38 <_svfiprintf_r+0x1e8>)
 800eaa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eaaa:	2206      	movs	r2, #6
 800eaac:	f7f1 fbc0 	bl	8000230 <memchr>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d036      	beq.n	800eb22 <_svfiprintf_r+0x1d2>
 800eab4:	4b21      	ldr	r3, [pc, #132]	@ (800eb3c <_svfiprintf_r+0x1ec>)
 800eab6:	bb1b      	cbnz	r3, 800eb00 <_svfiprintf_r+0x1b0>
 800eab8:	9b03      	ldr	r3, [sp, #12]
 800eaba:	3307      	adds	r3, #7
 800eabc:	f023 0307 	bic.w	r3, r3, #7
 800eac0:	3308      	adds	r3, #8
 800eac2:	9303      	str	r3, [sp, #12]
 800eac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac6:	4433      	add	r3, r6
 800eac8:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaca:	e76a      	b.n	800e9a2 <_svfiprintf_r+0x52>
 800eacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ead0:	460c      	mov	r4, r1
 800ead2:	2001      	movs	r0, #1
 800ead4:	e7a8      	b.n	800ea28 <_svfiprintf_r+0xd8>
 800ead6:	2300      	movs	r3, #0
 800ead8:	3401      	adds	r4, #1
 800eada:	9305      	str	r3, [sp, #20]
 800eadc:	4619      	mov	r1, r3
 800eade:	f04f 0c0a 	mov.w	ip, #10
 800eae2:	4620      	mov	r0, r4
 800eae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eae8:	3a30      	subs	r2, #48	@ 0x30
 800eaea:	2a09      	cmp	r2, #9
 800eaec:	d903      	bls.n	800eaf6 <_svfiprintf_r+0x1a6>
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d0c6      	beq.n	800ea80 <_svfiprintf_r+0x130>
 800eaf2:	9105      	str	r1, [sp, #20]
 800eaf4:	e7c4      	b.n	800ea80 <_svfiprintf_r+0x130>
 800eaf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eafa:	4604      	mov	r4, r0
 800eafc:	2301      	movs	r3, #1
 800eafe:	e7f0      	b.n	800eae2 <_svfiprintf_r+0x192>
 800eb00:	ab03      	add	r3, sp, #12
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	462a      	mov	r2, r5
 800eb06:	4b0e      	ldr	r3, [pc, #56]	@ (800eb40 <_svfiprintf_r+0x1f0>)
 800eb08:	a904      	add	r1, sp, #16
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	f3af 8000 	nop.w
 800eb10:	1c42      	adds	r2, r0, #1
 800eb12:	4606      	mov	r6, r0
 800eb14:	d1d6      	bne.n	800eac4 <_svfiprintf_r+0x174>
 800eb16:	89ab      	ldrh	r3, [r5, #12]
 800eb18:	065b      	lsls	r3, r3, #25
 800eb1a:	f53f af2d 	bmi.w	800e978 <_svfiprintf_r+0x28>
 800eb1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb20:	e72c      	b.n	800e97c <_svfiprintf_r+0x2c>
 800eb22:	ab03      	add	r3, sp, #12
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	462a      	mov	r2, r5
 800eb28:	4b05      	ldr	r3, [pc, #20]	@ (800eb40 <_svfiprintf_r+0x1f0>)
 800eb2a:	a904      	add	r1, sp, #16
 800eb2c:	4638      	mov	r0, r7
 800eb2e:	f000 f879 	bl	800ec24 <_printf_i>
 800eb32:	e7ed      	b.n	800eb10 <_svfiprintf_r+0x1c0>
 800eb34:	08010e5d 	.word	0x08010e5d
 800eb38:	08010e67 	.word	0x08010e67
 800eb3c:	00000000 	.word	0x00000000
 800eb40:	0800e89b 	.word	0x0800e89b
 800eb44:	08010e63 	.word	0x08010e63

0800eb48 <_printf_common>:
 800eb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb4c:	4616      	mov	r6, r2
 800eb4e:	4698      	mov	r8, r3
 800eb50:	688a      	ldr	r2, [r1, #8]
 800eb52:	690b      	ldr	r3, [r1, #16]
 800eb54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	bfb8      	it	lt
 800eb5c:	4613      	movlt	r3, r2
 800eb5e:	6033      	str	r3, [r6, #0]
 800eb60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb64:	4607      	mov	r7, r0
 800eb66:	460c      	mov	r4, r1
 800eb68:	b10a      	cbz	r2, 800eb6e <_printf_common+0x26>
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	6033      	str	r3, [r6, #0]
 800eb6e:	6823      	ldr	r3, [r4, #0]
 800eb70:	0699      	lsls	r1, r3, #26
 800eb72:	bf42      	ittt	mi
 800eb74:	6833      	ldrmi	r3, [r6, #0]
 800eb76:	3302      	addmi	r3, #2
 800eb78:	6033      	strmi	r3, [r6, #0]
 800eb7a:	6825      	ldr	r5, [r4, #0]
 800eb7c:	f015 0506 	ands.w	r5, r5, #6
 800eb80:	d106      	bne.n	800eb90 <_printf_common+0x48>
 800eb82:	f104 0a19 	add.w	sl, r4, #25
 800eb86:	68e3      	ldr	r3, [r4, #12]
 800eb88:	6832      	ldr	r2, [r6, #0]
 800eb8a:	1a9b      	subs	r3, r3, r2
 800eb8c:	42ab      	cmp	r3, r5
 800eb8e:	dc26      	bgt.n	800ebde <_printf_common+0x96>
 800eb90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb94:	6822      	ldr	r2, [r4, #0]
 800eb96:	3b00      	subs	r3, #0
 800eb98:	bf18      	it	ne
 800eb9a:	2301      	movne	r3, #1
 800eb9c:	0692      	lsls	r2, r2, #26
 800eb9e:	d42b      	bmi.n	800ebf8 <_printf_common+0xb0>
 800eba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eba4:	4641      	mov	r1, r8
 800eba6:	4638      	mov	r0, r7
 800eba8:	47c8      	blx	r9
 800ebaa:	3001      	adds	r0, #1
 800ebac:	d01e      	beq.n	800ebec <_printf_common+0xa4>
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	6922      	ldr	r2, [r4, #16]
 800ebb2:	f003 0306 	and.w	r3, r3, #6
 800ebb6:	2b04      	cmp	r3, #4
 800ebb8:	bf02      	ittt	eq
 800ebba:	68e5      	ldreq	r5, [r4, #12]
 800ebbc:	6833      	ldreq	r3, [r6, #0]
 800ebbe:	1aed      	subeq	r5, r5, r3
 800ebc0:	68a3      	ldr	r3, [r4, #8]
 800ebc2:	bf0c      	ite	eq
 800ebc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebc8:	2500      	movne	r5, #0
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	bfc4      	itt	gt
 800ebce:	1a9b      	subgt	r3, r3, r2
 800ebd0:	18ed      	addgt	r5, r5, r3
 800ebd2:	2600      	movs	r6, #0
 800ebd4:	341a      	adds	r4, #26
 800ebd6:	42b5      	cmp	r5, r6
 800ebd8:	d11a      	bne.n	800ec10 <_printf_common+0xc8>
 800ebda:	2000      	movs	r0, #0
 800ebdc:	e008      	b.n	800ebf0 <_printf_common+0xa8>
 800ebde:	2301      	movs	r3, #1
 800ebe0:	4652      	mov	r2, sl
 800ebe2:	4641      	mov	r1, r8
 800ebe4:	4638      	mov	r0, r7
 800ebe6:	47c8      	blx	r9
 800ebe8:	3001      	adds	r0, #1
 800ebea:	d103      	bne.n	800ebf4 <_printf_common+0xac>
 800ebec:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebf4:	3501      	adds	r5, #1
 800ebf6:	e7c6      	b.n	800eb86 <_printf_common+0x3e>
 800ebf8:	18e1      	adds	r1, r4, r3
 800ebfa:	1c5a      	adds	r2, r3, #1
 800ebfc:	2030      	movs	r0, #48	@ 0x30
 800ebfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec02:	4422      	add	r2, r4
 800ec04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ec08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec0c:	3302      	adds	r3, #2
 800ec0e:	e7c7      	b.n	800eba0 <_printf_common+0x58>
 800ec10:	2301      	movs	r3, #1
 800ec12:	4622      	mov	r2, r4
 800ec14:	4641      	mov	r1, r8
 800ec16:	4638      	mov	r0, r7
 800ec18:	47c8      	blx	r9
 800ec1a:	3001      	adds	r0, #1
 800ec1c:	d0e6      	beq.n	800ebec <_printf_common+0xa4>
 800ec1e:	3601      	adds	r6, #1
 800ec20:	e7d9      	b.n	800ebd6 <_printf_common+0x8e>
	...

0800ec24 <_printf_i>:
 800ec24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec28:	7e0f      	ldrb	r7, [r1, #24]
 800ec2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec2c:	2f78      	cmp	r7, #120	@ 0x78
 800ec2e:	4691      	mov	r9, r2
 800ec30:	4680      	mov	r8, r0
 800ec32:	460c      	mov	r4, r1
 800ec34:	469a      	mov	sl, r3
 800ec36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec3a:	d807      	bhi.n	800ec4c <_printf_i+0x28>
 800ec3c:	2f62      	cmp	r7, #98	@ 0x62
 800ec3e:	d80a      	bhi.n	800ec56 <_printf_i+0x32>
 800ec40:	2f00      	cmp	r7, #0
 800ec42:	f000 80d1 	beq.w	800ede8 <_printf_i+0x1c4>
 800ec46:	2f58      	cmp	r7, #88	@ 0x58
 800ec48:	f000 80b8 	beq.w	800edbc <_printf_i+0x198>
 800ec4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec54:	e03a      	b.n	800eccc <_printf_i+0xa8>
 800ec56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec5a:	2b15      	cmp	r3, #21
 800ec5c:	d8f6      	bhi.n	800ec4c <_printf_i+0x28>
 800ec5e:	a101      	add	r1, pc, #4	@ (adr r1, 800ec64 <_printf_i+0x40>)
 800ec60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec64:	0800ecbd 	.word	0x0800ecbd
 800ec68:	0800ecd1 	.word	0x0800ecd1
 800ec6c:	0800ec4d 	.word	0x0800ec4d
 800ec70:	0800ec4d 	.word	0x0800ec4d
 800ec74:	0800ec4d 	.word	0x0800ec4d
 800ec78:	0800ec4d 	.word	0x0800ec4d
 800ec7c:	0800ecd1 	.word	0x0800ecd1
 800ec80:	0800ec4d 	.word	0x0800ec4d
 800ec84:	0800ec4d 	.word	0x0800ec4d
 800ec88:	0800ec4d 	.word	0x0800ec4d
 800ec8c:	0800ec4d 	.word	0x0800ec4d
 800ec90:	0800edcf 	.word	0x0800edcf
 800ec94:	0800ecfb 	.word	0x0800ecfb
 800ec98:	0800ed89 	.word	0x0800ed89
 800ec9c:	0800ec4d 	.word	0x0800ec4d
 800eca0:	0800ec4d 	.word	0x0800ec4d
 800eca4:	0800edf1 	.word	0x0800edf1
 800eca8:	0800ec4d 	.word	0x0800ec4d
 800ecac:	0800ecfb 	.word	0x0800ecfb
 800ecb0:	0800ec4d 	.word	0x0800ec4d
 800ecb4:	0800ec4d 	.word	0x0800ec4d
 800ecb8:	0800ed91 	.word	0x0800ed91
 800ecbc:	6833      	ldr	r3, [r6, #0]
 800ecbe:	1d1a      	adds	r2, r3, #4
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	6032      	str	r2, [r6, #0]
 800ecc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eccc:	2301      	movs	r3, #1
 800ecce:	e09c      	b.n	800ee0a <_printf_i+0x1e6>
 800ecd0:	6833      	ldr	r3, [r6, #0]
 800ecd2:	6820      	ldr	r0, [r4, #0]
 800ecd4:	1d19      	adds	r1, r3, #4
 800ecd6:	6031      	str	r1, [r6, #0]
 800ecd8:	0606      	lsls	r6, r0, #24
 800ecda:	d501      	bpl.n	800ece0 <_printf_i+0xbc>
 800ecdc:	681d      	ldr	r5, [r3, #0]
 800ecde:	e003      	b.n	800ece8 <_printf_i+0xc4>
 800ece0:	0645      	lsls	r5, r0, #25
 800ece2:	d5fb      	bpl.n	800ecdc <_printf_i+0xb8>
 800ece4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ece8:	2d00      	cmp	r5, #0
 800ecea:	da03      	bge.n	800ecf4 <_printf_i+0xd0>
 800ecec:	232d      	movs	r3, #45	@ 0x2d
 800ecee:	426d      	negs	r5, r5
 800ecf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecf4:	4858      	ldr	r0, [pc, #352]	@ (800ee58 <_printf_i+0x234>)
 800ecf6:	230a      	movs	r3, #10
 800ecf8:	e011      	b.n	800ed1e <_printf_i+0xfa>
 800ecfa:	6821      	ldr	r1, [r4, #0]
 800ecfc:	6833      	ldr	r3, [r6, #0]
 800ecfe:	0608      	lsls	r0, r1, #24
 800ed00:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed04:	d402      	bmi.n	800ed0c <_printf_i+0xe8>
 800ed06:	0649      	lsls	r1, r1, #25
 800ed08:	bf48      	it	mi
 800ed0a:	b2ad      	uxthmi	r5, r5
 800ed0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed0e:	4852      	ldr	r0, [pc, #328]	@ (800ee58 <_printf_i+0x234>)
 800ed10:	6033      	str	r3, [r6, #0]
 800ed12:	bf14      	ite	ne
 800ed14:	230a      	movne	r3, #10
 800ed16:	2308      	moveq	r3, #8
 800ed18:	2100      	movs	r1, #0
 800ed1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed1e:	6866      	ldr	r6, [r4, #4]
 800ed20:	60a6      	str	r6, [r4, #8]
 800ed22:	2e00      	cmp	r6, #0
 800ed24:	db05      	blt.n	800ed32 <_printf_i+0x10e>
 800ed26:	6821      	ldr	r1, [r4, #0]
 800ed28:	432e      	orrs	r6, r5
 800ed2a:	f021 0104 	bic.w	r1, r1, #4
 800ed2e:	6021      	str	r1, [r4, #0]
 800ed30:	d04b      	beq.n	800edca <_printf_i+0x1a6>
 800ed32:	4616      	mov	r6, r2
 800ed34:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed38:	fb03 5711 	mls	r7, r3, r1, r5
 800ed3c:	5dc7      	ldrb	r7, [r0, r7]
 800ed3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed42:	462f      	mov	r7, r5
 800ed44:	42bb      	cmp	r3, r7
 800ed46:	460d      	mov	r5, r1
 800ed48:	d9f4      	bls.n	800ed34 <_printf_i+0x110>
 800ed4a:	2b08      	cmp	r3, #8
 800ed4c:	d10b      	bne.n	800ed66 <_printf_i+0x142>
 800ed4e:	6823      	ldr	r3, [r4, #0]
 800ed50:	07df      	lsls	r7, r3, #31
 800ed52:	d508      	bpl.n	800ed66 <_printf_i+0x142>
 800ed54:	6923      	ldr	r3, [r4, #16]
 800ed56:	6861      	ldr	r1, [r4, #4]
 800ed58:	4299      	cmp	r1, r3
 800ed5a:	bfde      	ittt	le
 800ed5c:	2330      	movle	r3, #48	@ 0x30
 800ed5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed66:	1b92      	subs	r2, r2, r6
 800ed68:	6122      	str	r2, [r4, #16]
 800ed6a:	f8cd a000 	str.w	sl, [sp]
 800ed6e:	464b      	mov	r3, r9
 800ed70:	aa03      	add	r2, sp, #12
 800ed72:	4621      	mov	r1, r4
 800ed74:	4640      	mov	r0, r8
 800ed76:	f7ff fee7 	bl	800eb48 <_printf_common>
 800ed7a:	3001      	adds	r0, #1
 800ed7c:	d14a      	bne.n	800ee14 <_printf_i+0x1f0>
 800ed7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed82:	b004      	add	sp, #16
 800ed84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	f043 0320 	orr.w	r3, r3, #32
 800ed8e:	6023      	str	r3, [r4, #0]
 800ed90:	4832      	ldr	r0, [pc, #200]	@ (800ee5c <_printf_i+0x238>)
 800ed92:	2778      	movs	r7, #120	@ 0x78
 800ed94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed98:	6823      	ldr	r3, [r4, #0]
 800ed9a:	6831      	ldr	r1, [r6, #0]
 800ed9c:	061f      	lsls	r7, r3, #24
 800ed9e:	f851 5b04 	ldr.w	r5, [r1], #4
 800eda2:	d402      	bmi.n	800edaa <_printf_i+0x186>
 800eda4:	065f      	lsls	r7, r3, #25
 800eda6:	bf48      	it	mi
 800eda8:	b2ad      	uxthmi	r5, r5
 800edaa:	6031      	str	r1, [r6, #0]
 800edac:	07d9      	lsls	r1, r3, #31
 800edae:	bf44      	itt	mi
 800edb0:	f043 0320 	orrmi.w	r3, r3, #32
 800edb4:	6023      	strmi	r3, [r4, #0]
 800edb6:	b11d      	cbz	r5, 800edc0 <_printf_i+0x19c>
 800edb8:	2310      	movs	r3, #16
 800edba:	e7ad      	b.n	800ed18 <_printf_i+0xf4>
 800edbc:	4826      	ldr	r0, [pc, #152]	@ (800ee58 <_printf_i+0x234>)
 800edbe:	e7e9      	b.n	800ed94 <_printf_i+0x170>
 800edc0:	6823      	ldr	r3, [r4, #0]
 800edc2:	f023 0320 	bic.w	r3, r3, #32
 800edc6:	6023      	str	r3, [r4, #0]
 800edc8:	e7f6      	b.n	800edb8 <_printf_i+0x194>
 800edca:	4616      	mov	r6, r2
 800edcc:	e7bd      	b.n	800ed4a <_printf_i+0x126>
 800edce:	6833      	ldr	r3, [r6, #0]
 800edd0:	6825      	ldr	r5, [r4, #0]
 800edd2:	6961      	ldr	r1, [r4, #20]
 800edd4:	1d18      	adds	r0, r3, #4
 800edd6:	6030      	str	r0, [r6, #0]
 800edd8:	062e      	lsls	r6, r5, #24
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	d501      	bpl.n	800ede2 <_printf_i+0x1be>
 800edde:	6019      	str	r1, [r3, #0]
 800ede0:	e002      	b.n	800ede8 <_printf_i+0x1c4>
 800ede2:	0668      	lsls	r0, r5, #25
 800ede4:	d5fb      	bpl.n	800edde <_printf_i+0x1ba>
 800ede6:	8019      	strh	r1, [r3, #0]
 800ede8:	2300      	movs	r3, #0
 800edea:	6123      	str	r3, [r4, #16]
 800edec:	4616      	mov	r6, r2
 800edee:	e7bc      	b.n	800ed6a <_printf_i+0x146>
 800edf0:	6833      	ldr	r3, [r6, #0]
 800edf2:	1d1a      	adds	r2, r3, #4
 800edf4:	6032      	str	r2, [r6, #0]
 800edf6:	681e      	ldr	r6, [r3, #0]
 800edf8:	6862      	ldr	r2, [r4, #4]
 800edfa:	2100      	movs	r1, #0
 800edfc:	4630      	mov	r0, r6
 800edfe:	f7f1 fa17 	bl	8000230 <memchr>
 800ee02:	b108      	cbz	r0, 800ee08 <_printf_i+0x1e4>
 800ee04:	1b80      	subs	r0, r0, r6
 800ee06:	6060      	str	r0, [r4, #4]
 800ee08:	6863      	ldr	r3, [r4, #4]
 800ee0a:	6123      	str	r3, [r4, #16]
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee12:	e7aa      	b.n	800ed6a <_printf_i+0x146>
 800ee14:	6923      	ldr	r3, [r4, #16]
 800ee16:	4632      	mov	r2, r6
 800ee18:	4649      	mov	r1, r9
 800ee1a:	4640      	mov	r0, r8
 800ee1c:	47d0      	blx	sl
 800ee1e:	3001      	adds	r0, #1
 800ee20:	d0ad      	beq.n	800ed7e <_printf_i+0x15a>
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	079b      	lsls	r3, r3, #30
 800ee26:	d413      	bmi.n	800ee50 <_printf_i+0x22c>
 800ee28:	68e0      	ldr	r0, [r4, #12]
 800ee2a:	9b03      	ldr	r3, [sp, #12]
 800ee2c:	4298      	cmp	r0, r3
 800ee2e:	bfb8      	it	lt
 800ee30:	4618      	movlt	r0, r3
 800ee32:	e7a6      	b.n	800ed82 <_printf_i+0x15e>
 800ee34:	2301      	movs	r3, #1
 800ee36:	4632      	mov	r2, r6
 800ee38:	4649      	mov	r1, r9
 800ee3a:	4640      	mov	r0, r8
 800ee3c:	47d0      	blx	sl
 800ee3e:	3001      	adds	r0, #1
 800ee40:	d09d      	beq.n	800ed7e <_printf_i+0x15a>
 800ee42:	3501      	adds	r5, #1
 800ee44:	68e3      	ldr	r3, [r4, #12]
 800ee46:	9903      	ldr	r1, [sp, #12]
 800ee48:	1a5b      	subs	r3, r3, r1
 800ee4a:	42ab      	cmp	r3, r5
 800ee4c:	dcf2      	bgt.n	800ee34 <_printf_i+0x210>
 800ee4e:	e7eb      	b.n	800ee28 <_printf_i+0x204>
 800ee50:	2500      	movs	r5, #0
 800ee52:	f104 0619 	add.w	r6, r4, #25
 800ee56:	e7f5      	b.n	800ee44 <_printf_i+0x220>
 800ee58:	08010e6e 	.word	0x08010e6e
 800ee5c:	08010e7f 	.word	0x08010e7f

0800ee60 <__sflush_r>:
 800ee60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee68:	0716      	lsls	r6, r2, #28
 800ee6a:	4605      	mov	r5, r0
 800ee6c:	460c      	mov	r4, r1
 800ee6e:	d454      	bmi.n	800ef1a <__sflush_r+0xba>
 800ee70:	684b      	ldr	r3, [r1, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	dc02      	bgt.n	800ee7c <__sflush_r+0x1c>
 800ee76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	dd48      	ble.n	800ef0e <__sflush_r+0xae>
 800ee7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee7e:	2e00      	cmp	r6, #0
 800ee80:	d045      	beq.n	800ef0e <__sflush_r+0xae>
 800ee82:	2300      	movs	r3, #0
 800ee84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee88:	682f      	ldr	r7, [r5, #0]
 800ee8a:	6a21      	ldr	r1, [r4, #32]
 800ee8c:	602b      	str	r3, [r5, #0]
 800ee8e:	d030      	beq.n	800eef2 <__sflush_r+0x92>
 800ee90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee92:	89a3      	ldrh	r3, [r4, #12]
 800ee94:	0759      	lsls	r1, r3, #29
 800ee96:	d505      	bpl.n	800eea4 <__sflush_r+0x44>
 800ee98:	6863      	ldr	r3, [r4, #4]
 800ee9a:	1ad2      	subs	r2, r2, r3
 800ee9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee9e:	b10b      	cbz	r3, 800eea4 <__sflush_r+0x44>
 800eea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eea2:	1ad2      	subs	r2, r2, r3
 800eea4:	2300      	movs	r3, #0
 800eea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eea8:	6a21      	ldr	r1, [r4, #32]
 800eeaa:	4628      	mov	r0, r5
 800eeac:	47b0      	blx	r6
 800eeae:	1c43      	adds	r3, r0, #1
 800eeb0:	89a3      	ldrh	r3, [r4, #12]
 800eeb2:	d106      	bne.n	800eec2 <__sflush_r+0x62>
 800eeb4:	6829      	ldr	r1, [r5, #0]
 800eeb6:	291d      	cmp	r1, #29
 800eeb8:	d82b      	bhi.n	800ef12 <__sflush_r+0xb2>
 800eeba:	4a2a      	ldr	r2, [pc, #168]	@ (800ef64 <__sflush_r+0x104>)
 800eebc:	40ca      	lsrs	r2, r1
 800eebe:	07d6      	lsls	r6, r2, #31
 800eec0:	d527      	bpl.n	800ef12 <__sflush_r+0xb2>
 800eec2:	2200      	movs	r2, #0
 800eec4:	6062      	str	r2, [r4, #4]
 800eec6:	04d9      	lsls	r1, r3, #19
 800eec8:	6922      	ldr	r2, [r4, #16]
 800eeca:	6022      	str	r2, [r4, #0]
 800eecc:	d504      	bpl.n	800eed8 <__sflush_r+0x78>
 800eece:	1c42      	adds	r2, r0, #1
 800eed0:	d101      	bne.n	800eed6 <__sflush_r+0x76>
 800eed2:	682b      	ldr	r3, [r5, #0]
 800eed4:	b903      	cbnz	r3, 800eed8 <__sflush_r+0x78>
 800eed6:	6560      	str	r0, [r4, #84]	@ 0x54
 800eed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eeda:	602f      	str	r7, [r5, #0]
 800eedc:	b1b9      	cbz	r1, 800ef0e <__sflush_r+0xae>
 800eede:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eee2:	4299      	cmp	r1, r3
 800eee4:	d002      	beq.n	800eeec <__sflush_r+0x8c>
 800eee6:	4628      	mov	r0, r5
 800eee8:	f7fe fc8a 	bl	800d800 <_free_r>
 800eeec:	2300      	movs	r3, #0
 800eeee:	6363      	str	r3, [r4, #52]	@ 0x34
 800eef0:	e00d      	b.n	800ef0e <__sflush_r+0xae>
 800eef2:	2301      	movs	r3, #1
 800eef4:	4628      	mov	r0, r5
 800eef6:	47b0      	blx	r6
 800eef8:	4602      	mov	r2, r0
 800eefa:	1c50      	adds	r0, r2, #1
 800eefc:	d1c9      	bne.n	800ee92 <__sflush_r+0x32>
 800eefe:	682b      	ldr	r3, [r5, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d0c6      	beq.n	800ee92 <__sflush_r+0x32>
 800ef04:	2b1d      	cmp	r3, #29
 800ef06:	d001      	beq.n	800ef0c <__sflush_r+0xac>
 800ef08:	2b16      	cmp	r3, #22
 800ef0a:	d11e      	bne.n	800ef4a <__sflush_r+0xea>
 800ef0c:	602f      	str	r7, [r5, #0]
 800ef0e:	2000      	movs	r0, #0
 800ef10:	e022      	b.n	800ef58 <__sflush_r+0xf8>
 800ef12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef16:	b21b      	sxth	r3, r3
 800ef18:	e01b      	b.n	800ef52 <__sflush_r+0xf2>
 800ef1a:	690f      	ldr	r7, [r1, #16]
 800ef1c:	2f00      	cmp	r7, #0
 800ef1e:	d0f6      	beq.n	800ef0e <__sflush_r+0xae>
 800ef20:	0793      	lsls	r3, r2, #30
 800ef22:	680e      	ldr	r6, [r1, #0]
 800ef24:	bf08      	it	eq
 800ef26:	694b      	ldreq	r3, [r1, #20]
 800ef28:	600f      	str	r7, [r1, #0]
 800ef2a:	bf18      	it	ne
 800ef2c:	2300      	movne	r3, #0
 800ef2e:	eba6 0807 	sub.w	r8, r6, r7
 800ef32:	608b      	str	r3, [r1, #8]
 800ef34:	f1b8 0f00 	cmp.w	r8, #0
 800ef38:	dde9      	ble.n	800ef0e <__sflush_r+0xae>
 800ef3a:	6a21      	ldr	r1, [r4, #32]
 800ef3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ef3e:	4643      	mov	r3, r8
 800ef40:	463a      	mov	r2, r7
 800ef42:	4628      	mov	r0, r5
 800ef44:	47b0      	blx	r6
 800ef46:	2800      	cmp	r0, #0
 800ef48:	dc08      	bgt.n	800ef5c <__sflush_r+0xfc>
 800ef4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef52:	81a3      	strh	r3, [r4, #12]
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef5c:	4407      	add	r7, r0
 800ef5e:	eba8 0800 	sub.w	r8, r8, r0
 800ef62:	e7e7      	b.n	800ef34 <__sflush_r+0xd4>
 800ef64:	20400001 	.word	0x20400001

0800ef68 <_fflush_r>:
 800ef68:	b538      	push	{r3, r4, r5, lr}
 800ef6a:	690b      	ldr	r3, [r1, #16]
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	460c      	mov	r4, r1
 800ef70:	b913      	cbnz	r3, 800ef78 <_fflush_r+0x10>
 800ef72:	2500      	movs	r5, #0
 800ef74:	4628      	mov	r0, r5
 800ef76:	bd38      	pop	{r3, r4, r5, pc}
 800ef78:	b118      	cbz	r0, 800ef82 <_fflush_r+0x1a>
 800ef7a:	6a03      	ldr	r3, [r0, #32]
 800ef7c:	b90b      	cbnz	r3, 800ef82 <_fflush_r+0x1a>
 800ef7e:	f7fe f94b 	bl	800d218 <__sinit>
 800ef82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d0f3      	beq.n	800ef72 <_fflush_r+0xa>
 800ef8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef8c:	07d0      	lsls	r0, r2, #31
 800ef8e:	d404      	bmi.n	800ef9a <_fflush_r+0x32>
 800ef90:	0599      	lsls	r1, r3, #22
 800ef92:	d402      	bmi.n	800ef9a <_fflush_r+0x32>
 800ef94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef96:	f7fe fbee 	bl	800d776 <__retarget_lock_acquire_recursive>
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	4621      	mov	r1, r4
 800ef9e:	f7ff ff5f 	bl	800ee60 <__sflush_r>
 800efa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efa4:	07da      	lsls	r2, r3, #31
 800efa6:	4605      	mov	r5, r0
 800efa8:	d4e4      	bmi.n	800ef74 <_fflush_r+0xc>
 800efaa:	89a3      	ldrh	r3, [r4, #12]
 800efac:	059b      	lsls	r3, r3, #22
 800efae:	d4e1      	bmi.n	800ef74 <_fflush_r+0xc>
 800efb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efb2:	f7fe fbe1 	bl	800d778 <__retarget_lock_release_recursive>
 800efb6:	e7dd      	b.n	800ef74 <_fflush_r+0xc>

0800efb8 <fiprintf>:
 800efb8:	b40e      	push	{r1, r2, r3}
 800efba:	b503      	push	{r0, r1, lr}
 800efbc:	4601      	mov	r1, r0
 800efbe:	ab03      	add	r3, sp, #12
 800efc0:	4805      	ldr	r0, [pc, #20]	@ (800efd8 <fiprintf+0x20>)
 800efc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc6:	6800      	ldr	r0, [r0, #0]
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	f000 f917 	bl	800f1fc <_vfiprintf_r>
 800efce:	b002      	add	sp, #8
 800efd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efd4:	b003      	add	sp, #12
 800efd6:	4770      	bx	lr
 800efd8:	20000194 	.word	0x20000194

0800efdc <__swhatbuf_r>:
 800efdc:	b570      	push	{r4, r5, r6, lr}
 800efde:	460c      	mov	r4, r1
 800efe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efe4:	2900      	cmp	r1, #0
 800efe6:	b096      	sub	sp, #88	@ 0x58
 800efe8:	4615      	mov	r5, r2
 800efea:	461e      	mov	r6, r3
 800efec:	da0d      	bge.n	800f00a <__swhatbuf_r+0x2e>
 800efee:	89a3      	ldrh	r3, [r4, #12]
 800eff0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eff4:	f04f 0100 	mov.w	r1, #0
 800eff8:	bf14      	ite	ne
 800effa:	2340      	movne	r3, #64	@ 0x40
 800effc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f000:	2000      	movs	r0, #0
 800f002:	6031      	str	r1, [r6, #0]
 800f004:	602b      	str	r3, [r5, #0]
 800f006:	b016      	add	sp, #88	@ 0x58
 800f008:	bd70      	pop	{r4, r5, r6, pc}
 800f00a:	466a      	mov	r2, sp
 800f00c:	f000 f862 	bl	800f0d4 <_fstat_r>
 800f010:	2800      	cmp	r0, #0
 800f012:	dbec      	blt.n	800efee <__swhatbuf_r+0x12>
 800f014:	9901      	ldr	r1, [sp, #4]
 800f016:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f01a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f01e:	4259      	negs	r1, r3
 800f020:	4159      	adcs	r1, r3
 800f022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f026:	e7eb      	b.n	800f000 <__swhatbuf_r+0x24>

0800f028 <__smakebuf_r>:
 800f028:	898b      	ldrh	r3, [r1, #12]
 800f02a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f02c:	079d      	lsls	r5, r3, #30
 800f02e:	4606      	mov	r6, r0
 800f030:	460c      	mov	r4, r1
 800f032:	d507      	bpl.n	800f044 <__smakebuf_r+0x1c>
 800f034:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	6123      	str	r3, [r4, #16]
 800f03c:	2301      	movs	r3, #1
 800f03e:	6163      	str	r3, [r4, #20]
 800f040:	b003      	add	sp, #12
 800f042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f044:	ab01      	add	r3, sp, #4
 800f046:	466a      	mov	r2, sp
 800f048:	f7ff ffc8 	bl	800efdc <__swhatbuf_r>
 800f04c:	9f00      	ldr	r7, [sp, #0]
 800f04e:	4605      	mov	r5, r0
 800f050:	4639      	mov	r1, r7
 800f052:	4630      	mov	r0, r6
 800f054:	f7fd f8de 	bl	800c214 <_malloc_r>
 800f058:	b948      	cbnz	r0, 800f06e <__smakebuf_r+0x46>
 800f05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f05e:	059a      	lsls	r2, r3, #22
 800f060:	d4ee      	bmi.n	800f040 <__smakebuf_r+0x18>
 800f062:	f023 0303 	bic.w	r3, r3, #3
 800f066:	f043 0302 	orr.w	r3, r3, #2
 800f06a:	81a3      	strh	r3, [r4, #12]
 800f06c:	e7e2      	b.n	800f034 <__smakebuf_r+0xc>
 800f06e:	89a3      	ldrh	r3, [r4, #12]
 800f070:	6020      	str	r0, [r4, #0]
 800f072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f076:	81a3      	strh	r3, [r4, #12]
 800f078:	9b01      	ldr	r3, [sp, #4]
 800f07a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f07e:	b15b      	cbz	r3, 800f098 <__smakebuf_r+0x70>
 800f080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f084:	4630      	mov	r0, r6
 800f086:	f000 f837 	bl	800f0f8 <_isatty_r>
 800f08a:	b128      	cbz	r0, 800f098 <__smakebuf_r+0x70>
 800f08c:	89a3      	ldrh	r3, [r4, #12]
 800f08e:	f023 0303 	bic.w	r3, r3, #3
 800f092:	f043 0301 	orr.w	r3, r3, #1
 800f096:	81a3      	strh	r3, [r4, #12]
 800f098:	89a3      	ldrh	r3, [r4, #12]
 800f09a:	431d      	orrs	r5, r3
 800f09c:	81a5      	strh	r5, [r4, #12]
 800f09e:	e7cf      	b.n	800f040 <__smakebuf_r+0x18>

0800f0a0 <memmove>:
 800f0a0:	4288      	cmp	r0, r1
 800f0a2:	b510      	push	{r4, lr}
 800f0a4:	eb01 0402 	add.w	r4, r1, r2
 800f0a8:	d902      	bls.n	800f0b0 <memmove+0x10>
 800f0aa:	4284      	cmp	r4, r0
 800f0ac:	4623      	mov	r3, r4
 800f0ae:	d807      	bhi.n	800f0c0 <memmove+0x20>
 800f0b0:	1e43      	subs	r3, r0, #1
 800f0b2:	42a1      	cmp	r1, r4
 800f0b4:	d008      	beq.n	800f0c8 <memmove+0x28>
 800f0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0be:	e7f8      	b.n	800f0b2 <memmove+0x12>
 800f0c0:	4402      	add	r2, r0
 800f0c2:	4601      	mov	r1, r0
 800f0c4:	428a      	cmp	r2, r1
 800f0c6:	d100      	bne.n	800f0ca <memmove+0x2a>
 800f0c8:	bd10      	pop	{r4, pc}
 800f0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0d2:	e7f7      	b.n	800f0c4 <memmove+0x24>

0800f0d4 <_fstat_r>:
 800f0d4:	b538      	push	{r3, r4, r5, lr}
 800f0d6:	4d07      	ldr	r5, [pc, #28]	@ (800f0f4 <_fstat_r+0x20>)
 800f0d8:	2300      	movs	r3, #0
 800f0da:	4604      	mov	r4, r0
 800f0dc:	4608      	mov	r0, r1
 800f0de:	4611      	mov	r1, r2
 800f0e0:	602b      	str	r3, [r5, #0]
 800f0e2:	f7f4 fb23 	bl	800372c <_fstat>
 800f0e6:	1c43      	adds	r3, r0, #1
 800f0e8:	d102      	bne.n	800f0f0 <_fstat_r+0x1c>
 800f0ea:	682b      	ldr	r3, [r5, #0]
 800f0ec:	b103      	cbz	r3, 800f0f0 <_fstat_r+0x1c>
 800f0ee:	6023      	str	r3, [r4, #0]
 800f0f0:	bd38      	pop	{r3, r4, r5, pc}
 800f0f2:	bf00      	nop
 800f0f4:	200012c8 	.word	0x200012c8

0800f0f8 <_isatty_r>:
 800f0f8:	b538      	push	{r3, r4, r5, lr}
 800f0fa:	4d06      	ldr	r5, [pc, #24]	@ (800f114 <_isatty_r+0x1c>)
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	4604      	mov	r4, r0
 800f100:	4608      	mov	r0, r1
 800f102:	602b      	str	r3, [r5, #0]
 800f104:	f7f4 fb22 	bl	800374c <_isatty>
 800f108:	1c43      	adds	r3, r0, #1
 800f10a:	d102      	bne.n	800f112 <_isatty_r+0x1a>
 800f10c:	682b      	ldr	r3, [r5, #0]
 800f10e:	b103      	cbz	r3, 800f112 <_isatty_r+0x1a>
 800f110:	6023      	str	r3, [r4, #0]
 800f112:	bd38      	pop	{r3, r4, r5, pc}
 800f114:	200012c8 	.word	0x200012c8

0800f118 <abort>:
 800f118:	b508      	push	{r3, lr}
 800f11a:	2006      	movs	r0, #6
 800f11c:	f000 f9ae 	bl	800f47c <raise>
 800f120:	2001      	movs	r0, #1
 800f122:	f7f4 fab3 	bl	800368c <_exit>

0800f126 <_calloc_r>:
 800f126:	b570      	push	{r4, r5, r6, lr}
 800f128:	fba1 5402 	umull	r5, r4, r1, r2
 800f12c:	b934      	cbnz	r4, 800f13c <_calloc_r+0x16>
 800f12e:	4629      	mov	r1, r5
 800f130:	f7fd f870 	bl	800c214 <_malloc_r>
 800f134:	4606      	mov	r6, r0
 800f136:	b928      	cbnz	r0, 800f144 <_calloc_r+0x1e>
 800f138:	4630      	mov	r0, r6
 800f13a:	bd70      	pop	{r4, r5, r6, pc}
 800f13c:	220c      	movs	r2, #12
 800f13e:	6002      	str	r2, [r0, #0]
 800f140:	2600      	movs	r6, #0
 800f142:	e7f9      	b.n	800f138 <_calloc_r+0x12>
 800f144:	462a      	mov	r2, r5
 800f146:	4621      	mov	r1, r4
 800f148:	f7fe fa08 	bl	800d55c <memset>
 800f14c:	e7f4      	b.n	800f138 <_calloc_r+0x12>

0800f14e <_realloc_r>:
 800f14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f152:	4607      	mov	r7, r0
 800f154:	4614      	mov	r4, r2
 800f156:	460d      	mov	r5, r1
 800f158:	b921      	cbnz	r1, 800f164 <_realloc_r+0x16>
 800f15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f15e:	4611      	mov	r1, r2
 800f160:	f7fd b858 	b.w	800c214 <_malloc_r>
 800f164:	b92a      	cbnz	r2, 800f172 <_realloc_r+0x24>
 800f166:	f7fe fb4b 	bl	800d800 <_free_r>
 800f16a:	4625      	mov	r5, r4
 800f16c:	4628      	mov	r0, r5
 800f16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f172:	f000 f99f 	bl	800f4b4 <_malloc_usable_size_r>
 800f176:	4284      	cmp	r4, r0
 800f178:	4606      	mov	r6, r0
 800f17a:	d802      	bhi.n	800f182 <_realloc_r+0x34>
 800f17c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f180:	d8f4      	bhi.n	800f16c <_realloc_r+0x1e>
 800f182:	4621      	mov	r1, r4
 800f184:	4638      	mov	r0, r7
 800f186:	f7fd f845 	bl	800c214 <_malloc_r>
 800f18a:	4680      	mov	r8, r0
 800f18c:	b908      	cbnz	r0, 800f192 <_realloc_r+0x44>
 800f18e:	4645      	mov	r5, r8
 800f190:	e7ec      	b.n	800f16c <_realloc_r+0x1e>
 800f192:	42b4      	cmp	r4, r6
 800f194:	4622      	mov	r2, r4
 800f196:	4629      	mov	r1, r5
 800f198:	bf28      	it	cs
 800f19a:	4632      	movcs	r2, r6
 800f19c:	f7fe faf5 	bl	800d78a <memcpy>
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	4638      	mov	r0, r7
 800f1a4:	f7fe fb2c 	bl	800d800 <_free_r>
 800f1a8:	e7f1      	b.n	800f18e <_realloc_r+0x40>

0800f1aa <__sfputc_r>:
 800f1aa:	6893      	ldr	r3, [r2, #8]
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	b410      	push	{r4}
 800f1b2:	6093      	str	r3, [r2, #8]
 800f1b4:	da08      	bge.n	800f1c8 <__sfputc_r+0x1e>
 800f1b6:	6994      	ldr	r4, [r2, #24]
 800f1b8:	42a3      	cmp	r3, r4
 800f1ba:	db01      	blt.n	800f1c0 <__sfputc_r+0x16>
 800f1bc:	290a      	cmp	r1, #10
 800f1be:	d103      	bne.n	800f1c8 <__sfputc_r+0x1e>
 800f1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1c4:	f7fe b935 	b.w	800d432 <__swbuf_r>
 800f1c8:	6813      	ldr	r3, [r2, #0]
 800f1ca:	1c58      	adds	r0, r3, #1
 800f1cc:	6010      	str	r0, [r2, #0]
 800f1ce:	7019      	strb	r1, [r3, #0]
 800f1d0:	4608      	mov	r0, r1
 800f1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <__sfputs_r>:
 800f1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1da:	4606      	mov	r6, r0
 800f1dc:	460f      	mov	r7, r1
 800f1de:	4614      	mov	r4, r2
 800f1e0:	18d5      	adds	r5, r2, r3
 800f1e2:	42ac      	cmp	r4, r5
 800f1e4:	d101      	bne.n	800f1ea <__sfputs_r+0x12>
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	e007      	b.n	800f1fa <__sfputs_r+0x22>
 800f1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1ee:	463a      	mov	r2, r7
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	f7ff ffda 	bl	800f1aa <__sfputc_r>
 800f1f6:	1c43      	adds	r3, r0, #1
 800f1f8:	d1f3      	bne.n	800f1e2 <__sfputs_r+0xa>
 800f1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1fc <_vfiprintf_r>:
 800f1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f200:	460d      	mov	r5, r1
 800f202:	b09d      	sub	sp, #116	@ 0x74
 800f204:	4614      	mov	r4, r2
 800f206:	4698      	mov	r8, r3
 800f208:	4606      	mov	r6, r0
 800f20a:	b118      	cbz	r0, 800f214 <_vfiprintf_r+0x18>
 800f20c:	6a03      	ldr	r3, [r0, #32]
 800f20e:	b90b      	cbnz	r3, 800f214 <_vfiprintf_r+0x18>
 800f210:	f7fe f802 	bl	800d218 <__sinit>
 800f214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f216:	07d9      	lsls	r1, r3, #31
 800f218:	d405      	bmi.n	800f226 <_vfiprintf_r+0x2a>
 800f21a:	89ab      	ldrh	r3, [r5, #12]
 800f21c:	059a      	lsls	r2, r3, #22
 800f21e:	d402      	bmi.n	800f226 <_vfiprintf_r+0x2a>
 800f220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f222:	f7fe faa8 	bl	800d776 <__retarget_lock_acquire_recursive>
 800f226:	89ab      	ldrh	r3, [r5, #12]
 800f228:	071b      	lsls	r3, r3, #28
 800f22a:	d501      	bpl.n	800f230 <_vfiprintf_r+0x34>
 800f22c:	692b      	ldr	r3, [r5, #16]
 800f22e:	b99b      	cbnz	r3, 800f258 <_vfiprintf_r+0x5c>
 800f230:	4629      	mov	r1, r5
 800f232:	4630      	mov	r0, r6
 800f234:	f7fe f93c 	bl	800d4b0 <__swsetup_r>
 800f238:	b170      	cbz	r0, 800f258 <_vfiprintf_r+0x5c>
 800f23a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f23c:	07dc      	lsls	r4, r3, #31
 800f23e:	d504      	bpl.n	800f24a <_vfiprintf_r+0x4e>
 800f240:	f04f 30ff 	mov.w	r0, #4294967295
 800f244:	b01d      	add	sp, #116	@ 0x74
 800f246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f24a:	89ab      	ldrh	r3, [r5, #12]
 800f24c:	0598      	lsls	r0, r3, #22
 800f24e:	d4f7      	bmi.n	800f240 <_vfiprintf_r+0x44>
 800f250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f252:	f7fe fa91 	bl	800d778 <__retarget_lock_release_recursive>
 800f256:	e7f3      	b.n	800f240 <_vfiprintf_r+0x44>
 800f258:	2300      	movs	r3, #0
 800f25a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f25c:	2320      	movs	r3, #32
 800f25e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f262:	f8cd 800c 	str.w	r8, [sp, #12]
 800f266:	2330      	movs	r3, #48	@ 0x30
 800f268:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f418 <_vfiprintf_r+0x21c>
 800f26c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f270:	f04f 0901 	mov.w	r9, #1
 800f274:	4623      	mov	r3, r4
 800f276:	469a      	mov	sl, r3
 800f278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f27c:	b10a      	cbz	r2, 800f282 <_vfiprintf_r+0x86>
 800f27e:	2a25      	cmp	r2, #37	@ 0x25
 800f280:	d1f9      	bne.n	800f276 <_vfiprintf_r+0x7a>
 800f282:	ebba 0b04 	subs.w	fp, sl, r4
 800f286:	d00b      	beq.n	800f2a0 <_vfiprintf_r+0xa4>
 800f288:	465b      	mov	r3, fp
 800f28a:	4622      	mov	r2, r4
 800f28c:	4629      	mov	r1, r5
 800f28e:	4630      	mov	r0, r6
 800f290:	f7ff ffa2 	bl	800f1d8 <__sfputs_r>
 800f294:	3001      	adds	r0, #1
 800f296:	f000 80a7 	beq.w	800f3e8 <_vfiprintf_r+0x1ec>
 800f29a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f29c:	445a      	add	r2, fp
 800f29e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 809f 	beq.w	800f3e8 <_vfiprintf_r+0x1ec>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2b4:	f10a 0a01 	add.w	sl, sl, #1
 800f2b8:	9304      	str	r3, [sp, #16]
 800f2ba:	9307      	str	r3, [sp, #28]
 800f2bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2c2:	4654      	mov	r4, sl
 800f2c4:	2205      	movs	r2, #5
 800f2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ca:	4853      	ldr	r0, [pc, #332]	@ (800f418 <_vfiprintf_r+0x21c>)
 800f2cc:	f7f0 ffb0 	bl	8000230 <memchr>
 800f2d0:	9a04      	ldr	r2, [sp, #16]
 800f2d2:	b9d8      	cbnz	r0, 800f30c <_vfiprintf_r+0x110>
 800f2d4:	06d1      	lsls	r1, r2, #27
 800f2d6:	bf44      	itt	mi
 800f2d8:	2320      	movmi	r3, #32
 800f2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2de:	0713      	lsls	r3, r2, #28
 800f2e0:	bf44      	itt	mi
 800f2e2:	232b      	movmi	r3, #43	@ 0x2b
 800f2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2ee:	d015      	beq.n	800f31c <_vfiprintf_r+0x120>
 800f2f0:	9a07      	ldr	r2, [sp, #28]
 800f2f2:	4654      	mov	r4, sl
 800f2f4:	2000      	movs	r0, #0
 800f2f6:	f04f 0c0a 	mov.w	ip, #10
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f300:	3b30      	subs	r3, #48	@ 0x30
 800f302:	2b09      	cmp	r3, #9
 800f304:	d94b      	bls.n	800f39e <_vfiprintf_r+0x1a2>
 800f306:	b1b0      	cbz	r0, 800f336 <_vfiprintf_r+0x13a>
 800f308:	9207      	str	r2, [sp, #28]
 800f30a:	e014      	b.n	800f336 <_vfiprintf_r+0x13a>
 800f30c:	eba0 0308 	sub.w	r3, r0, r8
 800f310:	fa09 f303 	lsl.w	r3, r9, r3
 800f314:	4313      	orrs	r3, r2
 800f316:	9304      	str	r3, [sp, #16]
 800f318:	46a2      	mov	sl, r4
 800f31a:	e7d2      	b.n	800f2c2 <_vfiprintf_r+0xc6>
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	1d19      	adds	r1, r3, #4
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	9103      	str	r1, [sp, #12]
 800f324:	2b00      	cmp	r3, #0
 800f326:	bfbb      	ittet	lt
 800f328:	425b      	neglt	r3, r3
 800f32a:	f042 0202 	orrlt.w	r2, r2, #2
 800f32e:	9307      	strge	r3, [sp, #28]
 800f330:	9307      	strlt	r3, [sp, #28]
 800f332:	bfb8      	it	lt
 800f334:	9204      	strlt	r2, [sp, #16]
 800f336:	7823      	ldrb	r3, [r4, #0]
 800f338:	2b2e      	cmp	r3, #46	@ 0x2e
 800f33a:	d10a      	bne.n	800f352 <_vfiprintf_r+0x156>
 800f33c:	7863      	ldrb	r3, [r4, #1]
 800f33e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f340:	d132      	bne.n	800f3a8 <_vfiprintf_r+0x1ac>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	1d1a      	adds	r2, r3, #4
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	9203      	str	r2, [sp, #12]
 800f34a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f34e:	3402      	adds	r4, #2
 800f350:	9305      	str	r3, [sp, #20]
 800f352:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f428 <_vfiprintf_r+0x22c>
 800f356:	7821      	ldrb	r1, [r4, #0]
 800f358:	2203      	movs	r2, #3
 800f35a:	4650      	mov	r0, sl
 800f35c:	f7f0 ff68 	bl	8000230 <memchr>
 800f360:	b138      	cbz	r0, 800f372 <_vfiprintf_r+0x176>
 800f362:	9b04      	ldr	r3, [sp, #16]
 800f364:	eba0 000a 	sub.w	r0, r0, sl
 800f368:	2240      	movs	r2, #64	@ 0x40
 800f36a:	4082      	lsls	r2, r0
 800f36c:	4313      	orrs	r3, r2
 800f36e:	3401      	adds	r4, #1
 800f370:	9304      	str	r3, [sp, #16]
 800f372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f376:	4829      	ldr	r0, [pc, #164]	@ (800f41c <_vfiprintf_r+0x220>)
 800f378:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f37c:	2206      	movs	r2, #6
 800f37e:	f7f0 ff57 	bl	8000230 <memchr>
 800f382:	2800      	cmp	r0, #0
 800f384:	d03f      	beq.n	800f406 <_vfiprintf_r+0x20a>
 800f386:	4b26      	ldr	r3, [pc, #152]	@ (800f420 <_vfiprintf_r+0x224>)
 800f388:	bb1b      	cbnz	r3, 800f3d2 <_vfiprintf_r+0x1d6>
 800f38a:	9b03      	ldr	r3, [sp, #12]
 800f38c:	3307      	adds	r3, #7
 800f38e:	f023 0307 	bic.w	r3, r3, #7
 800f392:	3308      	adds	r3, #8
 800f394:	9303      	str	r3, [sp, #12]
 800f396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f398:	443b      	add	r3, r7
 800f39a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f39c:	e76a      	b.n	800f274 <_vfiprintf_r+0x78>
 800f39e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3a2:	460c      	mov	r4, r1
 800f3a4:	2001      	movs	r0, #1
 800f3a6:	e7a8      	b.n	800f2fa <_vfiprintf_r+0xfe>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	3401      	adds	r4, #1
 800f3ac:	9305      	str	r3, [sp, #20]
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	f04f 0c0a 	mov.w	ip, #10
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3ba:	3a30      	subs	r2, #48	@ 0x30
 800f3bc:	2a09      	cmp	r2, #9
 800f3be:	d903      	bls.n	800f3c8 <_vfiprintf_r+0x1cc>
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d0c6      	beq.n	800f352 <_vfiprintf_r+0x156>
 800f3c4:	9105      	str	r1, [sp, #20]
 800f3c6:	e7c4      	b.n	800f352 <_vfiprintf_r+0x156>
 800f3c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	e7f0      	b.n	800f3b4 <_vfiprintf_r+0x1b8>
 800f3d2:	ab03      	add	r3, sp, #12
 800f3d4:	9300      	str	r3, [sp, #0]
 800f3d6:	462a      	mov	r2, r5
 800f3d8:	4b12      	ldr	r3, [pc, #72]	@ (800f424 <_vfiprintf_r+0x228>)
 800f3da:	a904      	add	r1, sp, #16
 800f3dc:	4630      	mov	r0, r6
 800f3de:	f3af 8000 	nop.w
 800f3e2:	4607      	mov	r7, r0
 800f3e4:	1c78      	adds	r0, r7, #1
 800f3e6:	d1d6      	bne.n	800f396 <_vfiprintf_r+0x19a>
 800f3e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3ea:	07d9      	lsls	r1, r3, #31
 800f3ec:	d405      	bmi.n	800f3fa <_vfiprintf_r+0x1fe>
 800f3ee:	89ab      	ldrh	r3, [r5, #12]
 800f3f0:	059a      	lsls	r2, r3, #22
 800f3f2:	d402      	bmi.n	800f3fa <_vfiprintf_r+0x1fe>
 800f3f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3f6:	f7fe f9bf 	bl	800d778 <__retarget_lock_release_recursive>
 800f3fa:	89ab      	ldrh	r3, [r5, #12]
 800f3fc:	065b      	lsls	r3, r3, #25
 800f3fe:	f53f af1f 	bmi.w	800f240 <_vfiprintf_r+0x44>
 800f402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f404:	e71e      	b.n	800f244 <_vfiprintf_r+0x48>
 800f406:	ab03      	add	r3, sp, #12
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	462a      	mov	r2, r5
 800f40c:	4b05      	ldr	r3, [pc, #20]	@ (800f424 <_vfiprintf_r+0x228>)
 800f40e:	a904      	add	r1, sp, #16
 800f410:	4630      	mov	r0, r6
 800f412:	f7ff fc07 	bl	800ec24 <_printf_i>
 800f416:	e7e4      	b.n	800f3e2 <_vfiprintf_r+0x1e6>
 800f418:	08010e5d 	.word	0x08010e5d
 800f41c:	08010e67 	.word	0x08010e67
 800f420:	00000000 	.word	0x00000000
 800f424:	0800f1d9 	.word	0x0800f1d9
 800f428:	08010e63 	.word	0x08010e63

0800f42c <_raise_r>:
 800f42c:	291f      	cmp	r1, #31
 800f42e:	b538      	push	{r3, r4, r5, lr}
 800f430:	4605      	mov	r5, r0
 800f432:	460c      	mov	r4, r1
 800f434:	d904      	bls.n	800f440 <_raise_r+0x14>
 800f436:	2316      	movs	r3, #22
 800f438:	6003      	str	r3, [r0, #0]
 800f43a:	f04f 30ff 	mov.w	r0, #4294967295
 800f43e:	bd38      	pop	{r3, r4, r5, pc}
 800f440:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f442:	b112      	cbz	r2, 800f44a <_raise_r+0x1e>
 800f444:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f448:	b94b      	cbnz	r3, 800f45e <_raise_r+0x32>
 800f44a:	4628      	mov	r0, r5
 800f44c:	f000 f830 	bl	800f4b0 <_getpid_r>
 800f450:	4622      	mov	r2, r4
 800f452:	4601      	mov	r1, r0
 800f454:	4628      	mov	r0, r5
 800f456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f45a:	f000 b817 	b.w	800f48c <_kill_r>
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d00a      	beq.n	800f478 <_raise_r+0x4c>
 800f462:	1c59      	adds	r1, r3, #1
 800f464:	d103      	bne.n	800f46e <_raise_r+0x42>
 800f466:	2316      	movs	r3, #22
 800f468:	6003      	str	r3, [r0, #0]
 800f46a:	2001      	movs	r0, #1
 800f46c:	e7e7      	b.n	800f43e <_raise_r+0x12>
 800f46e:	2100      	movs	r1, #0
 800f470:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f474:	4620      	mov	r0, r4
 800f476:	4798      	blx	r3
 800f478:	2000      	movs	r0, #0
 800f47a:	e7e0      	b.n	800f43e <_raise_r+0x12>

0800f47c <raise>:
 800f47c:	4b02      	ldr	r3, [pc, #8]	@ (800f488 <raise+0xc>)
 800f47e:	4601      	mov	r1, r0
 800f480:	6818      	ldr	r0, [r3, #0]
 800f482:	f7ff bfd3 	b.w	800f42c <_raise_r>
 800f486:	bf00      	nop
 800f488:	20000194 	.word	0x20000194

0800f48c <_kill_r>:
 800f48c:	b538      	push	{r3, r4, r5, lr}
 800f48e:	4d07      	ldr	r5, [pc, #28]	@ (800f4ac <_kill_r+0x20>)
 800f490:	2300      	movs	r3, #0
 800f492:	4604      	mov	r4, r0
 800f494:	4608      	mov	r0, r1
 800f496:	4611      	mov	r1, r2
 800f498:	602b      	str	r3, [r5, #0]
 800f49a:	f7f4 f8e7 	bl	800366c <_kill>
 800f49e:	1c43      	adds	r3, r0, #1
 800f4a0:	d102      	bne.n	800f4a8 <_kill_r+0x1c>
 800f4a2:	682b      	ldr	r3, [r5, #0]
 800f4a4:	b103      	cbz	r3, 800f4a8 <_kill_r+0x1c>
 800f4a6:	6023      	str	r3, [r4, #0]
 800f4a8:	bd38      	pop	{r3, r4, r5, pc}
 800f4aa:	bf00      	nop
 800f4ac:	200012c8 	.word	0x200012c8

0800f4b0 <_getpid_r>:
 800f4b0:	f7f4 b8d4 	b.w	800365c <_getpid>

0800f4b4 <_malloc_usable_size_r>:
 800f4b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4b8:	1f18      	subs	r0, r3, #4
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	bfbc      	itt	lt
 800f4be:	580b      	ldrlt	r3, [r1, r0]
 800f4c0:	18c0      	addlt	r0, r0, r3
 800f4c2:	4770      	bx	lr
 800f4c4:	0000      	movs	r0, r0
	...

0800f4c8 <log>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	ed2d 8b02 	vpush	{d8}
 800f4ce:	ec55 4b10 	vmov	r4, r5, d0
 800f4d2:	f000 f87d 	bl	800f5d0 <__ieee754_log>
 800f4d6:	4622      	mov	r2, r4
 800f4d8:	462b      	mov	r3, r5
 800f4da:	4620      	mov	r0, r4
 800f4dc:	4629      	mov	r1, r5
 800f4de:	eeb0 8a40 	vmov.f32	s16, s0
 800f4e2:	eef0 8a60 	vmov.f32	s17, s1
 800f4e6:	f7f1 fb49 	bl	8000b7c <__aeabi_dcmpun>
 800f4ea:	b998      	cbnz	r0, 800f514 <log+0x4c>
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	f7f1 fb38 	bl	8000b68 <__aeabi_dcmpgt>
 800f4f8:	b960      	cbnz	r0, 800f514 <log+0x4c>
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4620      	mov	r0, r4
 800f500:	4629      	mov	r1, r5
 800f502:	f7f1 fb09 	bl	8000b18 <__aeabi_dcmpeq>
 800f506:	b160      	cbz	r0, 800f522 <log+0x5a>
 800f508:	f7fe f90a 	bl	800d720 <__errno>
 800f50c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800f538 <log+0x70>
 800f510:	2322      	movs	r3, #34	@ 0x22
 800f512:	6003      	str	r3, [r0, #0]
 800f514:	eeb0 0a48 	vmov.f32	s0, s16
 800f518:	eef0 0a68 	vmov.f32	s1, s17
 800f51c:	ecbd 8b02 	vpop	{d8}
 800f520:	bd38      	pop	{r3, r4, r5, pc}
 800f522:	f7fe f8fd 	bl	800d720 <__errno>
 800f526:	ecbd 8b02 	vpop	{d8}
 800f52a:	2321      	movs	r3, #33	@ 0x21
 800f52c:	6003      	str	r3, [r0, #0]
 800f52e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f532:	4803      	ldr	r0, [pc, #12]	@ (800f540 <log+0x78>)
 800f534:	f7fe b938 	b.w	800d7a8 <nan>
 800f538:	00000000 	.word	0x00000000
 800f53c:	fff00000 	.word	0xfff00000
 800f540:	08010d92 	.word	0x08010d92

0800f544 <cosf>:
 800f544:	ee10 3a10 	vmov	r3, s0
 800f548:	b507      	push	{r0, r1, r2, lr}
 800f54a:	4a1e      	ldr	r2, [pc, #120]	@ (800f5c4 <cosf+0x80>)
 800f54c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f550:	4293      	cmp	r3, r2
 800f552:	d806      	bhi.n	800f562 <cosf+0x1e>
 800f554:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f5c8 <cosf+0x84>
 800f558:	b003      	add	sp, #12
 800f55a:	f85d eb04 	ldr.w	lr, [sp], #4
 800f55e:	f000 b9ed 	b.w	800f93c <__kernel_cosf>
 800f562:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f566:	d304      	bcc.n	800f572 <cosf+0x2e>
 800f568:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f56c:	b003      	add	sp, #12
 800f56e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f572:	4668      	mov	r0, sp
 800f574:	f000 fa82 	bl	800fa7c <__ieee754_rem_pio2f>
 800f578:	f000 0003 	and.w	r0, r0, #3
 800f57c:	2801      	cmp	r0, #1
 800f57e:	d009      	beq.n	800f594 <cosf+0x50>
 800f580:	2802      	cmp	r0, #2
 800f582:	d010      	beq.n	800f5a6 <cosf+0x62>
 800f584:	b9b0      	cbnz	r0, 800f5b4 <cosf+0x70>
 800f586:	eddd 0a01 	vldr	s1, [sp, #4]
 800f58a:	ed9d 0a00 	vldr	s0, [sp]
 800f58e:	f000 f9d5 	bl	800f93c <__kernel_cosf>
 800f592:	e7eb      	b.n	800f56c <cosf+0x28>
 800f594:	eddd 0a01 	vldr	s1, [sp, #4]
 800f598:	ed9d 0a00 	vldr	s0, [sp]
 800f59c:	f000 fa26 	bl	800f9ec <__kernel_sinf>
 800f5a0:	eeb1 0a40 	vneg.f32	s0, s0
 800f5a4:	e7e2      	b.n	800f56c <cosf+0x28>
 800f5a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5aa:	ed9d 0a00 	vldr	s0, [sp]
 800f5ae:	f000 f9c5 	bl	800f93c <__kernel_cosf>
 800f5b2:	e7f5      	b.n	800f5a0 <cosf+0x5c>
 800f5b4:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5b8:	ed9d 0a00 	vldr	s0, [sp]
 800f5bc:	2001      	movs	r0, #1
 800f5be:	f000 fa15 	bl	800f9ec <__kernel_sinf>
 800f5c2:	e7d3      	b.n	800f56c <cosf+0x28>
 800f5c4:	3f490fd8 	.word	0x3f490fd8
	...

0800f5d0 <__ieee754_log>:
 800f5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d4:	ec51 0b10 	vmov	r0, r1, d0
 800f5d8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800f5dc:	b087      	sub	sp, #28
 800f5de:	460d      	mov	r5, r1
 800f5e0:	da26      	bge.n	800f630 <__ieee754_log+0x60>
 800f5e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f5e6:	4303      	orrs	r3, r0
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	d10a      	bne.n	800f602 <__ieee754_log+0x32>
 800f5ec:	49ce      	ldr	r1, [pc, #824]	@ (800f928 <__ieee754_log+0x358>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	f7f1 f952 	bl	800089c <__aeabi_ddiv>
 800f5f8:	ec41 0b10 	vmov	d0, r0, r1
 800f5fc:	b007      	add	sp, #28
 800f5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f602:	2900      	cmp	r1, #0
 800f604:	da05      	bge.n	800f612 <__ieee754_log+0x42>
 800f606:	460b      	mov	r3, r1
 800f608:	f7f0 fe66 	bl	80002d8 <__aeabi_dsub>
 800f60c:	2200      	movs	r2, #0
 800f60e:	2300      	movs	r3, #0
 800f610:	e7f0      	b.n	800f5f4 <__ieee754_log+0x24>
 800f612:	4bc6      	ldr	r3, [pc, #792]	@ (800f92c <__ieee754_log+0x35c>)
 800f614:	2200      	movs	r2, #0
 800f616:	f7f1 f817 	bl	8000648 <__aeabi_dmul>
 800f61a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800f61e:	460d      	mov	r5, r1
 800f620:	4ac3      	ldr	r2, [pc, #780]	@ (800f930 <__ieee754_log+0x360>)
 800f622:	4295      	cmp	r5, r2
 800f624:	dd06      	ble.n	800f634 <__ieee754_log+0x64>
 800f626:	4602      	mov	r2, r0
 800f628:	460b      	mov	r3, r1
 800f62a:	f7f0 fe57 	bl	80002dc <__adddf3>
 800f62e:	e7e3      	b.n	800f5f8 <__ieee754_log+0x28>
 800f630:	2300      	movs	r3, #0
 800f632:	e7f5      	b.n	800f620 <__ieee754_log+0x50>
 800f634:	152c      	asrs	r4, r5, #20
 800f636:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800f63a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f63e:	441c      	add	r4, r3
 800f640:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800f644:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800f648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f64c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800f650:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800f654:	ea42 0105 	orr.w	r1, r2, r5
 800f658:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f65c:	2200      	movs	r2, #0
 800f65e:	4bb5      	ldr	r3, [pc, #724]	@ (800f934 <__ieee754_log+0x364>)
 800f660:	f7f0 fe3a 	bl	80002d8 <__aeabi_dsub>
 800f664:	1cab      	adds	r3, r5, #2
 800f666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f66a:	2b02      	cmp	r3, #2
 800f66c:	4682      	mov	sl, r0
 800f66e:	468b      	mov	fp, r1
 800f670:	f04f 0200 	mov.w	r2, #0
 800f674:	dc53      	bgt.n	800f71e <__ieee754_log+0x14e>
 800f676:	2300      	movs	r3, #0
 800f678:	f7f1 fa4e 	bl	8000b18 <__aeabi_dcmpeq>
 800f67c:	b1d0      	cbz	r0, 800f6b4 <__ieee754_log+0xe4>
 800f67e:	2c00      	cmp	r4, #0
 800f680:	f000 8120 	beq.w	800f8c4 <__ieee754_log+0x2f4>
 800f684:	4620      	mov	r0, r4
 800f686:	f7f0 ff75 	bl	8000574 <__aeabi_i2d>
 800f68a:	a391      	add	r3, pc, #580	@ (adr r3, 800f8d0 <__ieee754_log+0x300>)
 800f68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f690:	4606      	mov	r6, r0
 800f692:	460f      	mov	r7, r1
 800f694:	f7f0 ffd8 	bl	8000648 <__aeabi_dmul>
 800f698:	a38f      	add	r3, pc, #572	@ (adr r3, 800f8d8 <__ieee754_log+0x308>)
 800f69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69e:	4604      	mov	r4, r0
 800f6a0:	460d      	mov	r5, r1
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	f7f0 ffcf 	bl	8000648 <__aeabi_dmul>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	e7ba      	b.n	800f62a <__ieee754_log+0x5a>
 800f6b4:	a38a      	add	r3, pc, #552	@ (adr r3, 800f8e0 <__ieee754_log+0x310>)
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	4650      	mov	r0, sl
 800f6bc:	4659      	mov	r1, fp
 800f6be:	f7f0 ffc3 	bl	8000648 <__aeabi_dmul>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	499b      	ldr	r1, [pc, #620]	@ (800f938 <__ieee754_log+0x368>)
 800f6ca:	f7f0 fe05 	bl	80002d8 <__aeabi_dsub>
 800f6ce:	4652      	mov	r2, sl
 800f6d0:	4606      	mov	r6, r0
 800f6d2:	460f      	mov	r7, r1
 800f6d4:	465b      	mov	r3, fp
 800f6d6:	4650      	mov	r0, sl
 800f6d8:	4659      	mov	r1, fp
 800f6da:	f7f0 ffb5 	bl	8000648 <__aeabi_dmul>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	4639      	mov	r1, r7
 800f6e6:	f7f0 ffaf 	bl	8000648 <__aeabi_dmul>
 800f6ea:	4606      	mov	r6, r0
 800f6ec:	460f      	mov	r7, r1
 800f6ee:	b914      	cbnz	r4, 800f6f6 <__ieee754_log+0x126>
 800f6f0:	4632      	mov	r2, r6
 800f6f2:	463b      	mov	r3, r7
 800f6f4:	e0a0      	b.n	800f838 <__ieee754_log+0x268>
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f7f0 ff3c 	bl	8000574 <__aeabi_i2d>
 800f6fc:	a374      	add	r3, pc, #464	@ (adr r3, 800f8d0 <__ieee754_log+0x300>)
 800f6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f702:	4680      	mov	r8, r0
 800f704:	4689      	mov	r9, r1
 800f706:	f7f0 ff9f 	bl	8000648 <__aeabi_dmul>
 800f70a:	a373      	add	r3, pc, #460	@ (adr r3, 800f8d8 <__ieee754_log+0x308>)
 800f70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f710:	4604      	mov	r4, r0
 800f712:	460d      	mov	r5, r1
 800f714:	4640      	mov	r0, r8
 800f716:	4649      	mov	r1, r9
 800f718:	f7f0 ff96 	bl	8000648 <__aeabi_dmul>
 800f71c:	e0a5      	b.n	800f86a <__ieee754_log+0x29a>
 800f71e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f722:	f7f0 fddb 	bl	80002dc <__adddf3>
 800f726:	4602      	mov	r2, r0
 800f728:	460b      	mov	r3, r1
 800f72a:	4650      	mov	r0, sl
 800f72c:	4659      	mov	r1, fp
 800f72e:	f7f1 f8b5 	bl	800089c <__aeabi_ddiv>
 800f732:	e9cd 0100 	strd	r0, r1, [sp]
 800f736:	4620      	mov	r0, r4
 800f738:	f7f0 ff1c 	bl	8000574 <__aeabi_i2d>
 800f73c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f744:	4610      	mov	r0, r2
 800f746:	4619      	mov	r1, r3
 800f748:	f7f0 ff7e 	bl	8000648 <__aeabi_dmul>
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f754:	f7f0 ff78 	bl	8000648 <__aeabi_dmul>
 800f758:	a363      	add	r3, pc, #396	@ (adr r3, 800f8e8 <__ieee754_log+0x318>)
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	4680      	mov	r8, r0
 800f760:	4689      	mov	r9, r1
 800f762:	f7f0 ff71 	bl	8000648 <__aeabi_dmul>
 800f766:	a362      	add	r3, pc, #392	@ (adr r3, 800f8f0 <__ieee754_log+0x320>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	f7f0 fdb6 	bl	80002dc <__adddf3>
 800f770:	4642      	mov	r2, r8
 800f772:	464b      	mov	r3, r9
 800f774:	f7f0 ff68 	bl	8000648 <__aeabi_dmul>
 800f778:	a35f      	add	r3, pc, #380	@ (adr r3, 800f8f8 <__ieee754_log+0x328>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	f7f0 fdad 	bl	80002dc <__adddf3>
 800f782:	4642      	mov	r2, r8
 800f784:	464b      	mov	r3, r9
 800f786:	f7f0 ff5f 	bl	8000648 <__aeabi_dmul>
 800f78a:	a35d      	add	r3, pc, #372	@ (adr r3, 800f900 <__ieee754_log+0x330>)
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	f7f0 fda4 	bl	80002dc <__adddf3>
 800f794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f798:	f7f0 ff56 	bl	8000648 <__aeabi_dmul>
 800f79c:	a35a      	add	r3, pc, #360	@ (adr r3, 800f908 <__ieee754_log+0x338>)
 800f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	4649      	mov	r1, r9
 800f7aa:	f7f0 ff4d 	bl	8000648 <__aeabi_dmul>
 800f7ae:	a358      	add	r3, pc, #352	@ (adr r3, 800f910 <__ieee754_log+0x340>)
 800f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b4:	f7f0 fd92 	bl	80002dc <__adddf3>
 800f7b8:	4642      	mov	r2, r8
 800f7ba:	464b      	mov	r3, r9
 800f7bc:	f7f0 ff44 	bl	8000648 <__aeabi_dmul>
 800f7c0:	a355      	add	r3, pc, #340	@ (adr r3, 800f918 <__ieee754_log+0x348>)
 800f7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c6:	f7f0 fd89 	bl	80002dc <__adddf3>
 800f7ca:	4642      	mov	r2, r8
 800f7cc:	464b      	mov	r3, r9
 800f7ce:	f7f0 ff3b 	bl	8000648 <__aeabi_dmul>
 800f7d2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	460b      	mov	r3, r1
 800f7da:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800f7de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7e2:	f7f0 fd7b 	bl	80002dc <__adddf3>
 800f7e6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800f7ea:	3551      	adds	r5, #81	@ 0x51
 800f7ec:	4335      	orrs	r5, r6
 800f7ee:	2d00      	cmp	r5, #0
 800f7f0:	4680      	mov	r8, r0
 800f7f2:	4689      	mov	r9, r1
 800f7f4:	dd48      	ble.n	800f888 <__ieee754_log+0x2b8>
 800f7f6:	4b50      	ldr	r3, [pc, #320]	@ (800f938 <__ieee754_log+0x368>)
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	4650      	mov	r0, sl
 800f7fc:	4659      	mov	r1, fp
 800f7fe:	f7f0 ff23 	bl	8000648 <__aeabi_dmul>
 800f802:	4652      	mov	r2, sl
 800f804:	465b      	mov	r3, fp
 800f806:	f7f0 ff1f 	bl	8000648 <__aeabi_dmul>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	4606      	mov	r6, r0
 800f810:	460f      	mov	r7, r1
 800f812:	4640      	mov	r0, r8
 800f814:	4649      	mov	r1, r9
 800f816:	f7f0 fd61 	bl	80002dc <__adddf3>
 800f81a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f81e:	f7f0 ff13 	bl	8000648 <__aeabi_dmul>
 800f822:	4680      	mov	r8, r0
 800f824:	4689      	mov	r9, r1
 800f826:	b964      	cbnz	r4, 800f842 <__ieee754_log+0x272>
 800f828:	4602      	mov	r2, r0
 800f82a:	460b      	mov	r3, r1
 800f82c:	4630      	mov	r0, r6
 800f82e:	4639      	mov	r1, r7
 800f830:	f7f0 fd52 	bl	80002d8 <__aeabi_dsub>
 800f834:	4602      	mov	r2, r0
 800f836:	460b      	mov	r3, r1
 800f838:	4650      	mov	r0, sl
 800f83a:	4659      	mov	r1, fp
 800f83c:	f7f0 fd4c 	bl	80002d8 <__aeabi_dsub>
 800f840:	e6da      	b.n	800f5f8 <__ieee754_log+0x28>
 800f842:	a323      	add	r3, pc, #140	@ (adr r3, 800f8d0 <__ieee754_log+0x300>)
 800f844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f84c:	f7f0 fefc 	bl	8000648 <__aeabi_dmul>
 800f850:	a321      	add	r3, pc, #132	@ (adr r3, 800f8d8 <__ieee754_log+0x308>)
 800f852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f856:	4604      	mov	r4, r0
 800f858:	460d      	mov	r5, r1
 800f85a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f85e:	f7f0 fef3 	bl	8000648 <__aeabi_dmul>
 800f862:	4642      	mov	r2, r8
 800f864:	464b      	mov	r3, r9
 800f866:	f7f0 fd39 	bl	80002dc <__adddf3>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	4630      	mov	r0, r6
 800f870:	4639      	mov	r1, r7
 800f872:	f7f0 fd31 	bl	80002d8 <__aeabi_dsub>
 800f876:	4652      	mov	r2, sl
 800f878:	465b      	mov	r3, fp
 800f87a:	f7f0 fd2d 	bl	80002d8 <__aeabi_dsub>
 800f87e:	4602      	mov	r2, r0
 800f880:	460b      	mov	r3, r1
 800f882:	4620      	mov	r0, r4
 800f884:	4629      	mov	r1, r5
 800f886:	e7d9      	b.n	800f83c <__ieee754_log+0x26c>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	4650      	mov	r0, sl
 800f88e:	4659      	mov	r1, fp
 800f890:	f7f0 fd22 	bl	80002d8 <__aeabi_dsub>
 800f894:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f898:	f7f0 fed6 	bl	8000648 <__aeabi_dmul>
 800f89c:	4606      	mov	r6, r0
 800f89e:	460f      	mov	r7, r1
 800f8a0:	2c00      	cmp	r4, #0
 800f8a2:	f43f af25 	beq.w	800f6f0 <__ieee754_log+0x120>
 800f8a6:	a30a      	add	r3, pc, #40	@ (adr r3, 800f8d0 <__ieee754_log+0x300>)
 800f8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8b0:	f7f0 feca 	bl	8000648 <__aeabi_dmul>
 800f8b4:	a308      	add	r3, pc, #32	@ (adr r3, 800f8d8 <__ieee754_log+0x308>)
 800f8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ba:	4604      	mov	r4, r0
 800f8bc:	460d      	mov	r5, r1
 800f8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8c2:	e729      	b.n	800f718 <__ieee754_log+0x148>
 800f8c4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800f920 <__ieee754_log+0x350>
 800f8c8:	e698      	b.n	800f5fc <__ieee754_log+0x2c>
 800f8ca:	bf00      	nop
 800f8cc:	f3af 8000 	nop.w
 800f8d0:	fee00000 	.word	0xfee00000
 800f8d4:	3fe62e42 	.word	0x3fe62e42
 800f8d8:	35793c76 	.word	0x35793c76
 800f8dc:	3dea39ef 	.word	0x3dea39ef
 800f8e0:	55555555 	.word	0x55555555
 800f8e4:	3fd55555 	.word	0x3fd55555
 800f8e8:	df3e5244 	.word	0xdf3e5244
 800f8ec:	3fc2f112 	.word	0x3fc2f112
 800f8f0:	96cb03de 	.word	0x96cb03de
 800f8f4:	3fc74664 	.word	0x3fc74664
 800f8f8:	94229359 	.word	0x94229359
 800f8fc:	3fd24924 	.word	0x3fd24924
 800f900:	55555593 	.word	0x55555593
 800f904:	3fe55555 	.word	0x3fe55555
 800f908:	d078c69f 	.word	0xd078c69f
 800f90c:	3fc39a09 	.word	0x3fc39a09
 800f910:	1d8e78af 	.word	0x1d8e78af
 800f914:	3fcc71c5 	.word	0x3fcc71c5
 800f918:	9997fa04 	.word	0x9997fa04
 800f91c:	3fd99999 	.word	0x3fd99999
	...
 800f928:	c3500000 	.word	0xc3500000
 800f92c:	43500000 	.word	0x43500000
 800f930:	7fefffff 	.word	0x7fefffff
 800f934:	3ff00000 	.word	0x3ff00000
 800f938:	3fe00000 	.word	0x3fe00000

0800f93c <__kernel_cosf>:
 800f93c:	ee10 3a10 	vmov	r3, s0
 800f940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f944:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f948:	eef0 6a40 	vmov.f32	s13, s0
 800f94c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f950:	d204      	bcs.n	800f95c <__kernel_cosf+0x20>
 800f952:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f956:	ee17 2a90 	vmov	r2, s15
 800f95a:	b342      	cbz	r2, 800f9ae <__kernel_cosf+0x72>
 800f95c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f960:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f9cc <__kernel_cosf+0x90>
 800f964:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f9d0 <__kernel_cosf+0x94>
 800f968:	4a1a      	ldr	r2, [pc, #104]	@ (800f9d4 <__kernel_cosf+0x98>)
 800f96a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f96e:	4293      	cmp	r3, r2
 800f970:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f9d8 <__kernel_cosf+0x9c>
 800f974:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f978:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f9dc <__kernel_cosf+0xa0>
 800f97c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f980:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f9e0 <__kernel_cosf+0xa4>
 800f984:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f988:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f9e4 <__kernel_cosf+0xa8>
 800f98c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f990:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f994:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f998:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f99c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f9a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9a4:	d804      	bhi.n	800f9b0 <__kernel_cosf+0x74>
 800f9a6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f9aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f9ae:	4770      	bx	lr
 800f9b0:	4a0d      	ldr	r2, [pc, #52]	@ (800f9e8 <__kernel_cosf+0xac>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	bf9a      	itte	ls
 800f9b6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f9ba:	ee07 3a10 	vmovls	s14, r3
 800f9be:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f9c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f9c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9ca:	e7ec      	b.n	800f9a6 <__kernel_cosf+0x6a>
 800f9cc:	ad47d74e 	.word	0xad47d74e
 800f9d0:	310f74f6 	.word	0x310f74f6
 800f9d4:	3e999999 	.word	0x3e999999
 800f9d8:	b493f27c 	.word	0xb493f27c
 800f9dc:	37d00d01 	.word	0x37d00d01
 800f9e0:	bab60b61 	.word	0xbab60b61
 800f9e4:	3d2aaaab 	.word	0x3d2aaaab
 800f9e8:	3f480000 	.word	0x3f480000

0800f9ec <__kernel_sinf>:
 800f9ec:	ee10 3a10 	vmov	r3, s0
 800f9f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f9f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f9f8:	d204      	bcs.n	800fa04 <__kernel_sinf+0x18>
 800f9fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f9fe:	ee17 3a90 	vmov	r3, s15
 800fa02:	b35b      	cbz	r3, 800fa5c <__kernel_sinf+0x70>
 800fa04:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fa08:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fa60 <__kernel_sinf+0x74>
 800fa0c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800fa64 <__kernel_sinf+0x78>
 800fa10:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fa14:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800fa68 <__kernel_sinf+0x7c>
 800fa18:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fa1c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800fa6c <__kernel_sinf+0x80>
 800fa20:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fa24:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800fa70 <__kernel_sinf+0x84>
 800fa28:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fa2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fa30:	b930      	cbnz	r0, 800fa40 <__kernel_sinf+0x54>
 800fa32:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800fa74 <__kernel_sinf+0x88>
 800fa36:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fa3a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fa3e:	4770      	bx	lr
 800fa40:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fa44:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fa48:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fa4c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fa50:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800fa78 <__kernel_sinf+0x8c>
 800fa54:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fa58:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop
 800fa60:	2f2ec9d3 	.word	0x2f2ec9d3
 800fa64:	b2d72f34 	.word	0xb2d72f34
 800fa68:	3638ef1b 	.word	0x3638ef1b
 800fa6c:	b9500d01 	.word	0xb9500d01
 800fa70:	3c088889 	.word	0x3c088889
 800fa74:	be2aaaab 	.word	0xbe2aaaab
 800fa78:	3e2aaaab 	.word	0x3e2aaaab

0800fa7c <__ieee754_rem_pio2f>:
 800fa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa7e:	ee10 6a10 	vmov	r6, s0
 800fa82:	4b88      	ldr	r3, [pc, #544]	@ (800fca4 <__ieee754_rem_pio2f+0x228>)
 800fa84:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800fa88:	429d      	cmp	r5, r3
 800fa8a:	b087      	sub	sp, #28
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	d805      	bhi.n	800fa9c <__ieee754_rem_pio2f+0x20>
 800fa90:	2300      	movs	r3, #0
 800fa92:	ed80 0a00 	vstr	s0, [r0]
 800fa96:	6043      	str	r3, [r0, #4]
 800fa98:	2000      	movs	r0, #0
 800fa9a:	e022      	b.n	800fae2 <__ieee754_rem_pio2f+0x66>
 800fa9c:	4b82      	ldr	r3, [pc, #520]	@ (800fca8 <__ieee754_rem_pio2f+0x22c>)
 800fa9e:	429d      	cmp	r5, r3
 800faa0:	d83a      	bhi.n	800fb18 <__ieee754_rem_pio2f+0x9c>
 800faa2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800faa6:	2e00      	cmp	r6, #0
 800faa8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800fcac <__ieee754_rem_pio2f+0x230>
 800faac:	4a80      	ldr	r2, [pc, #512]	@ (800fcb0 <__ieee754_rem_pio2f+0x234>)
 800faae:	f023 030f 	bic.w	r3, r3, #15
 800fab2:	dd18      	ble.n	800fae6 <__ieee754_rem_pio2f+0x6a>
 800fab4:	4293      	cmp	r3, r2
 800fab6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800faba:	bf09      	itett	eq
 800fabc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800fcb4 <__ieee754_rem_pio2f+0x238>
 800fac0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800fcb8 <__ieee754_rem_pio2f+0x23c>
 800fac4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800fcbc <__ieee754_rem_pio2f+0x240>
 800fac8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800facc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800fad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fad4:	ed80 7a00 	vstr	s14, [r0]
 800fad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fadc:	edc0 7a01 	vstr	s15, [r0, #4]
 800fae0:	2001      	movs	r0, #1
 800fae2:	b007      	add	sp, #28
 800fae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fae6:	4293      	cmp	r3, r2
 800fae8:	ee70 7a07 	vadd.f32	s15, s0, s14
 800faec:	bf09      	itett	eq
 800faee:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800fcb4 <__ieee754_rem_pio2f+0x238>
 800faf2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800fcb8 <__ieee754_rem_pio2f+0x23c>
 800faf6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800fcbc <__ieee754_rem_pio2f+0x240>
 800fafa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800fafe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb06:	ed80 7a00 	vstr	s14, [r0]
 800fb0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb0e:	edc0 7a01 	vstr	s15, [r0, #4]
 800fb12:	f04f 30ff 	mov.w	r0, #4294967295
 800fb16:	e7e4      	b.n	800fae2 <__ieee754_rem_pio2f+0x66>
 800fb18:	4b69      	ldr	r3, [pc, #420]	@ (800fcc0 <__ieee754_rem_pio2f+0x244>)
 800fb1a:	429d      	cmp	r5, r3
 800fb1c:	d873      	bhi.n	800fc06 <__ieee754_rem_pio2f+0x18a>
 800fb1e:	f000 f8dd 	bl	800fcdc <fabsf>
 800fb22:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800fcc4 <__ieee754_rem_pio2f+0x248>
 800fb26:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fb2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fb2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fb36:	ee17 0a90 	vmov	r0, s15
 800fb3a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fcac <__ieee754_rem_pio2f+0x230>
 800fb3e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800fb42:	281f      	cmp	r0, #31
 800fb44:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fcb8 <__ieee754_rem_pio2f+0x23c>
 800fb48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb4c:	eeb1 6a47 	vneg.f32	s12, s14
 800fb50:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fb54:	ee16 1a90 	vmov	r1, s13
 800fb58:	dc09      	bgt.n	800fb6e <__ieee754_rem_pio2f+0xf2>
 800fb5a:	4a5b      	ldr	r2, [pc, #364]	@ (800fcc8 <__ieee754_rem_pio2f+0x24c>)
 800fb5c:	1e47      	subs	r7, r0, #1
 800fb5e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fb62:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800fb66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800fb6a:	4293      	cmp	r3, r2
 800fb6c:	d107      	bne.n	800fb7e <__ieee754_rem_pio2f+0x102>
 800fb6e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800fb72:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800fb76:	2a08      	cmp	r2, #8
 800fb78:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800fb7c:	dc14      	bgt.n	800fba8 <__ieee754_rem_pio2f+0x12c>
 800fb7e:	6021      	str	r1, [r4, #0]
 800fb80:	ed94 7a00 	vldr	s14, [r4]
 800fb84:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fb88:	2e00      	cmp	r6, #0
 800fb8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb8e:	ed84 0a01 	vstr	s0, [r4, #4]
 800fb92:	daa6      	bge.n	800fae2 <__ieee754_rem_pio2f+0x66>
 800fb94:	eeb1 7a47 	vneg.f32	s14, s14
 800fb98:	eeb1 0a40 	vneg.f32	s0, s0
 800fb9c:	ed84 7a00 	vstr	s14, [r4]
 800fba0:	ed84 0a01 	vstr	s0, [r4, #4]
 800fba4:	4240      	negs	r0, r0
 800fba6:	e79c      	b.n	800fae2 <__ieee754_rem_pio2f+0x66>
 800fba8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800fcb4 <__ieee754_rem_pio2f+0x238>
 800fbac:	eef0 6a40 	vmov.f32	s13, s0
 800fbb0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fbb4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800fbb8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fbbc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fcbc <__ieee754_rem_pio2f+0x240>
 800fbc0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800fbc4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fbc8:	ee15 2a90 	vmov	r2, s11
 800fbcc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fbd0:	1a5b      	subs	r3, r3, r1
 800fbd2:	2b19      	cmp	r3, #25
 800fbd4:	dc04      	bgt.n	800fbe0 <__ieee754_rem_pio2f+0x164>
 800fbd6:	edc4 5a00 	vstr	s11, [r4]
 800fbda:	eeb0 0a66 	vmov.f32	s0, s13
 800fbde:	e7cf      	b.n	800fb80 <__ieee754_rem_pio2f+0x104>
 800fbe0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800fccc <__ieee754_rem_pio2f+0x250>
 800fbe4:	eeb0 0a66 	vmov.f32	s0, s13
 800fbe8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800fbec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fbf0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800fcd0 <__ieee754_rem_pio2f+0x254>
 800fbf4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fbf8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fbfc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fc00:	ed84 7a00 	vstr	s14, [r4]
 800fc04:	e7bc      	b.n	800fb80 <__ieee754_rem_pio2f+0x104>
 800fc06:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800fc0a:	d306      	bcc.n	800fc1a <__ieee754_rem_pio2f+0x19e>
 800fc0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fc10:	edc0 7a01 	vstr	s15, [r0, #4]
 800fc14:	edc0 7a00 	vstr	s15, [r0]
 800fc18:	e73e      	b.n	800fa98 <__ieee754_rem_pio2f+0x1c>
 800fc1a:	15ea      	asrs	r2, r5, #23
 800fc1c:	3a86      	subs	r2, #134	@ 0x86
 800fc1e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fc22:	ee07 3a90 	vmov	s15, r3
 800fc26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fc2a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800fcd4 <__ieee754_rem_pio2f+0x258>
 800fc2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fc32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc36:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fc3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fc3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fc42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fc46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc4a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fc4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fc52:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5a:	edcd 7a05 	vstr	s15, [sp, #20]
 800fc5e:	d11e      	bne.n	800fc9e <__ieee754_rem_pio2f+0x222>
 800fc60:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc68:	bf0c      	ite	eq
 800fc6a:	2301      	moveq	r3, #1
 800fc6c:	2302      	movne	r3, #2
 800fc6e:	491a      	ldr	r1, [pc, #104]	@ (800fcd8 <__ieee754_rem_pio2f+0x25c>)
 800fc70:	9101      	str	r1, [sp, #4]
 800fc72:	2102      	movs	r1, #2
 800fc74:	9100      	str	r1, [sp, #0]
 800fc76:	a803      	add	r0, sp, #12
 800fc78:	4621      	mov	r1, r4
 800fc7a:	f000 f837 	bl	800fcec <__kernel_rem_pio2f>
 800fc7e:	2e00      	cmp	r6, #0
 800fc80:	f6bf af2f 	bge.w	800fae2 <__ieee754_rem_pio2f+0x66>
 800fc84:	edd4 7a00 	vldr	s15, [r4]
 800fc88:	eef1 7a67 	vneg.f32	s15, s15
 800fc8c:	edc4 7a00 	vstr	s15, [r4]
 800fc90:	edd4 7a01 	vldr	s15, [r4, #4]
 800fc94:	eef1 7a67 	vneg.f32	s15, s15
 800fc98:	edc4 7a01 	vstr	s15, [r4, #4]
 800fc9c:	e782      	b.n	800fba4 <__ieee754_rem_pio2f+0x128>
 800fc9e:	2303      	movs	r3, #3
 800fca0:	e7e5      	b.n	800fc6e <__ieee754_rem_pio2f+0x1f2>
 800fca2:	bf00      	nop
 800fca4:	3f490fd8 	.word	0x3f490fd8
 800fca8:	4016cbe3 	.word	0x4016cbe3
 800fcac:	3fc90f80 	.word	0x3fc90f80
 800fcb0:	3fc90fd0 	.word	0x3fc90fd0
 800fcb4:	37354400 	.word	0x37354400
 800fcb8:	37354443 	.word	0x37354443
 800fcbc:	2e85a308 	.word	0x2e85a308
 800fcc0:	43490f80 	.word	0x43490f80
 800fcc4:	3f22f984 	.word	0x3f22f984
 800fcc8:	080110e0 	.word	0x080110e0
 800fccc:	2e85a300 	.word	0x2e85a300
 800fcd0:	248d3132 	.word	0x248d3132
 800fcd4:	43800000 	.word	0x43800000
 800fcd8:	08011160 	.word	0x08011160

0800fcdc <fabsf>:
 800fcdc:	ee10 3a10 	vmov	r3, s0
 800fce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fce4:	ee00 3a10 	vmov	s0, r3
 800fce8:	4770      	bx	lr
	...

0800fcec <__kernel_rem_pio2f>:
 800fcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf0:	ed2d 8b04 	vpush	{d8-d9}
 800fcf4:	b0d9      	sub	sp, #356	@ 0x164
 800fcf6:	4690      	mov	r8, r2
 800fcf8:	9001      	str	r0, [sp, #4]
 800fcfa:	4ab6      	ldr	r2, [pc, #728]	@ (800ffd4 <__kernel_rem_pio2f+0x2e8>)
 800fcfc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800fcfe:	f118 0f04 	cmn.w	r8, #4
 800fd02:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800fd06:	460f      	mov	r7, r1
 800fd08:	f103 3bff 	add.w	fp, r3, #4294967295
 800fd0c:	db26      	blt.n	800fd5c <__kernel_rem_pio2f+0x70>
 800fd0e:	f1b8 0203 	subs.w	r2, r8, #3
 800fd12:	bf48      	it	mi
 800fd14:	f108 0204 	addmi.w	r2, r8, #4
 800fd18:	10d2      	asrs	r2, r2, #3
 800fd1a:	1c55      	adds	r5, r2, #1
 800fd1c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fd1e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ffe4 <__kernel_rem_pio2f+0x2f8>
 800fd22:	00e8      	lsls	r0, r5, #3
 800fd24:	eba2 060b 	sub.w	r6, r2, fp
 800fd28:	9002      	str	r0, [sp, #8]
 800fd2a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800fd2e:	eb0a 0c0b 	add.w	ip, sl, fp
 800fd32:	ac1c      	add	r4, sp, #112	@ 0x70
 800fd34:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800fd38:	2000      	movs	r0, #0
 800fd3a:	4560      	cmp	r0, ip
 800fd3c:	dd10      	ble.n	800fd60 <__kernel_rem_pio2f+0x74>
 800fd3e:	a91c      	add	r1, sp, #112	@ 0x70
 800fd40:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800fd44:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800fd48:	2600      	movs	r6, #0
 800fd4a:	4556      	cmp	r6, sl
 800fd4c:	dc24      	bgt.n	800fd98 <__kernel_rem_pio2f+0xac>
 800fd4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fd52:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ffe4 <__kernel_rem_pio2f+0x2f8>
 800fd56:	4684      	mov	ip, r0
 800fd58:	2400      	movs	r4, #0
 800fd5a:	e016      	b.n	800fd8a <__kernel_rem_pio2f+0x9e>
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	e7dc      	b.n	800fd1a <__kernel_rem_pio2f+0x2e>
 800fd60:	42c6      	cmn	r6, r0
 800fd62:	bf5d      	ittte	pl
 800fd64:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800fd68:	ee07 1a90 	vmovpl	s15, r1
 800fd6c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fd70:	eef0 7a47 	vmovmi.f32	s15, s14
 800fd74:	ece4 7a01 	vstmia	r4!, {s15}
 800fd78:	3001      	adds	r0, #1
 800fd7a:	e7de      	b.n	800fd3a <__kernel_rem_pio2f+0x4e>
 800fd7c:	ecfe 6a01 	vldmia	lr!, {s13}
 800fd80:	ed3c 7a01 	vldmdb	ip!, {s14}
 800fd84:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd88:	3401      	adds	r4, #1
 800fd8a:	455c      	cmp	r4, fp
 800fd8c:	ddf6      	ble.n	800fd7c <__kernel_rem_pio2f+0x90>
 800fd8e:	ece9 7a01 	vstmia	r9!, {s15}
 800fd92:	3601      	adds	r6, #1
 800fd94:	3004      	adds	r0, #4
 800fd96:	e7d8      	b.n	800fd4a <__kernel_rem_pio2f+0x5e>
 800fd98:	a908      	add	r1, sp, #32
 800fd9a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd9e:	9104      	str	r1, [sp, #16]
 800fda0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fda2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ffe0 <__kernel_rem_pio2f+0x2f4>
 800fda6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ffdc <__kernel_rem_pio2f+0x2f0>
 800fdaa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fdae:	9203      	str	r2, [sp, #12]
 800fdb0:	4654      	mov	r4, sl
 800fdb2:	00a2      	lsls	r2, r4, #2
 800fdb4:	9205      	str	r2, [sp, #20]
 800fdb6:	aa58      	add	r2, sp, #352	@ 0x160
 800fdb8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fdbc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800fdc0:	a944      	add	r1, sp, #272	@ 0x110
 800fdc2:	aa08      	add	r2, sp, #32
 800fdc4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800fdc8:	4694      	mov	ip, r2
 800fdca:	4626      	mov	r6, r4
 800fdcc:	2e00      	cmp	r6, #0
 800fdce:	dc4c      	bgt.n	800fe6a <__kernel_rem_pio2f+0x17e>
 800fdd0:	4628      	mov	r0, r5
 800fdd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fdd6:	f000 f9f1 	bl	80101bc <scalbnf>
 800fdda:	eeb0 8a40 	vmov.f32	s16, s0
 800fdde:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800fde2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fde6:	f000 fa4f 	bl	8010288 <floorf>
 800fdea:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800fdee:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fdf2:	2d00      	cmp	r5, #0
 800fdf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fdf8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fdfc:	ee17 9a90 	vmov	r9, s15
 800fe00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe04:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fe08:	dd41      	ble.n	800fe8e <__kernel_rem_pio2f+0x1a2>
 800fe0a:	f104 3cff 	add.w	ip, r4, #4294967295
 800fe0e:	a908      	add	r1, sp, #32
 800fe10:	f1c5 0e08 	rsb	lr, r5, #8
 800fe14:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800fe18:	fa46 f00e 	asr.w	r0, r6, lr
 800fe1c:	4481      	add	r9, r0
 800fe1e:	fa00 f00e 	lsl.w	r0, r0, lr
 800fe22:	1a36      	subs	r6, r6, r0
 800fe24:	f1c5 0007 	rsb	r0, r5, #7
 800fe28:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800fe2c:	4106      	asrs	r6, r0
 800fe2e:	2e00      	cmp	r6, #0
 800fe30:	dd3c      	ble.n	800feac <__kernel_rem_pio2f+0x1c0>
 800fe32:	f04f 0e00 	mov.w	lr, #0
 800fe36:	f109 0901 	add.w	r9, r9, #1
 800fe3a:	4670      	mov	r0, lr
 800fe3c:	4574      	cmp	r4, lr
 800fe3e:	dc68      	bgt.n	800ff12 <__kernel_rem_pio2f+0x226>
 800fe40:	2d00      	cmp	r5, #0
 800fe42:	dd03      	ble.n	800fe4c <__kernel_rem_pio2f+0x160>
 800fe44:	2d01      	cmp	r5, #1
 800fe46:	d074      	beq.n	800ff32 <__kernel_rem_pio2f+0x246>
 800fe48:	2d02      	cmp	r5, #2
 800fe4a:	d07d      	beq.n	800ff48 <__kernel_rem_pio2f+0x25c>
 800fe4c:	2e02      	cmp	r6, #2
 800fe4e:	d12d      	bne.n	800feac <__kernel_rem_pio2f+0x1c0>
 800fe50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fe54:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fe58:	b340      	cbz	r0, 800feac <__kernel_rem_pio2f+0x1c0>
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	9306      	str	r3, [sp, #24]
 800fe5e:	f000 f9ad 	bl	80101bc <scalbnf>
 800fe62:	9b06      	ldr	r3, [sp, #24]
 800fe64:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fe68:	e020      	b.n	800feac <__kernel_rem_pio2f+0x1c0>
 800fe6a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fe6e:	3e01      	subs	r6, #1
 800fe70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe78:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fe7c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fe80:	ecac 0a01 	vstmia	ip!, {s0}
 800fe84:	ed30 0a01 	vldmdb	r0!, {s0}
 800fe88:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fe8c:	e79e      	b.n	800fdcc <__kernel_rem_pio2f+0xe0>
 800fe8e:	d105      	bne.n	800fe9c <__kernel_rem_pio2f+0x1b0>
 800fe90:	1e60      	subs	r0, r4, #1
 800fe92:	a908      	add	r1, sp, #32
 800fe94:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800fe98:	11f6      	asrs	r6, r6, #7
 800fe9a:	e7c8      	b.n	800fe2e <__kernel_rem_pio2f+0x142>
 800fe9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fea0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea8:	da31      	bge.n	800ff0e <__kernel_rem_pio2f+0x222>
 800feaa:	2600      	movs	r6, #0
 800feac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800feb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb4:	f040 8098 	bne.w	800ffe8 <__kernel_rem_pio2f+0x2fc>
 800feb8:	1e60      	subs	r0, r4, #1
 800feba:	2200      	movs	r2, #0
 800febc:	4550      	cmp	r0, sl
 800febe:	da4b      	bge.n	800ff58 <__kernel_rem_pio2f+0x26c>
 800fec0:	2a00      	cmp	r2, #0
 800fec2:	d065      	beq.n	800ff90 <__kernel_rem_pio2f+0x2a4>
 800fec4:	3c01      	subs	r4, #1
 800fec6:	ab08      	add	r3, sp, #32
 800fec8:	3d08      	subs	r5, #8
 800feca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d0f8      	beq.n	800fec4 <__kernel_rem_pio2f+0x1d8>
 800fed2:	4628      	mov	r0, r5
 800fed4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fed8:	f000 f970 	bl	80101bc <scalbnf>
 800fedc:	1c63      	adds	r3, r4, #1
 800fede:	aa44      	add	r2, sp, #272	@ 0x110
 800fee0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ffe0 <__kernel_rem_pio2f+0x2f4>
 800fee4:	0099      	lsls	r1, r3, #2
 800fee6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800feea:	4623      	mov	r3, r4
 800feec:	2b00      	cmp	r3, #0
 800feee:	f280 80a9 	bge.w	8010044 <__kernel_rem_pio2f+0x358>
 800fef2:	4623      	mov	r3, r4
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f2c0 80c7 	blt.w	8010088 <__kernel_rem_pio2f+0x39c>
 800fefa:	aa44      	add	r2, sp, #272	@ 0x110
 800fefc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ff00:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ffd8 <__kernel_rem_pio2f+0x2ec>
 800ff04:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ffe4 <__kernel_rem_pio2f+0x2f8>
 800ff08:	2000      	movs	r0, #0
 800ff0a:	1ae2      	subs	r2, r4, r3
 800ff0c:	e0b1      	b.n	8010072 <__kernel_rem_pio2f+0x386>
 800ff0e:	2602      	movs	r6, #2
 800ff10:	e78f      	b.n	800fe32 <__kernel_rem_pio2f+0x146>
 800ff12:	f852 1b04 	ldr.w	r1, [r2], #4
 800ff16:	b948      	cbnz	r0, 800ff2c <__kernel_rem_pio2f+0x240>
 800ff18:	b121      	cbz	r1, 800ff24 <__kernel_rem_pio2f+0x238>
 800ff1a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ff1e:	f842 1c04 	str.w	r1, [r2, #-4]
 800ff22:	2101      	movs	r1, #1
 800ff24:	f10e 0e01 	add.w	lr, lr, #1
 800ff28:	4608      	mov	r0, r1
 800ff2a:	e787      	b.n	800fe3c <__kernel_rem_pio2f+0x150>
 800ff2c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800ff30:	e7f5      	b.n	800ff1e <__kernel_rem_pio2f+0x232>
 800ff32:	f104 3cff 	add.w	ip, r4, #4294967295
 800ff36:	aa08      	add	r2, sp, #32
 800ff38:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ff3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ff40:	a908      	add	r1, sp, #32
 800ff42:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ff46:	e781      	b.n	800fe4c <__kernel_rem_pio2f+0x160>
 800ff48:	f104 3cff 	add.w	ip, r4, #4294967295
 800ff4c:	aa08      	add	r2, sp, #32
 800ff4e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ff52:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ff56:	e7f3      	b.n	800ff40 <__kernel_rem_pio2f+0x254>
 800ff58:	a908      	add	r1, sp, #32
 800ff5a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ff5e:	3801      	subs	r0, #1
 800ff60:	430a      	orrs	r2, r1
 800ff62:	e7ab      	b.n	800febc <__kernel_rem_pio2f+0x1d0>
 800ff64:	3201      	adds	r2, #1
 800ff66:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ff6a:	2e00      	cmp	r6, #0
 800ff6c:	d0fa      	beq.n	800ff64 <__kernel_rem_pio2f+0x278>
 800ff6e:	9905      	ldr	r1, [sp, #20]
 800ff70:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ff74:	eb0d 0001 	add.w	r0, sp, r1
 800ff78:	18e6      	adds	r6, r4, r3
 800ff7a:	a91c      	add	r1, sp, #112	@ 0x70
 800ff7c:	f104 0c01 	add.w	ip, r4, #1
 800ff80:	384c      	subs	r0, #76	@ 0x4c
 800ff82:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ff86:	4422      	add	r2, r4
 800ff88:	4562      	cmp	r2, ip
 800ff8a:	da04      	bge.n	800ff96 <__kernel_rem_pio2f+0x2aa>
 800ff8c:	4614      	mov	r4, r2
 800ff8e:	e710      	b.n	800fdb2 <__kernel_rem_pio2f+0xc6>
 800ff90:	9804      	ldr	r0, [sp, #16]
 800ff92:	2201      	movs	r2, #1
 800ff94:	e7e7      	b.n	800ff66 <__kernel_rem_pio2f+0x27a>
 800ff96:	9903      	ldr	r1, [sp, #12]
 800ff98:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ff9c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ffa0:	9105      	str	r1, [sp, #20]
 800ffa2:	ee07 1a90 	vmov	s15, r1
 800ffa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffaa:	2400      	movs	r4, #0
 800ffac:	ece6 7a01 	vstmia	r6!, {s15}
 800ffb0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ffe4 <__kernel_rem_pio2f+0x2f8>
 800ffb4:	46b1      	mov	r9, r6
 800ffb6:	455c      	cmp	r4, fp
 800ffb8:	dd04      	ble.n	800ffc4 <__kernel_rem_pio2f+0x2d8>
 800ffba:	ece0 7a01 	vstmia	r0!, {s15}
 800ffbe:	f10c 0c01 	add.w	ip, ip, #1
 800ffc2:	e7e1      	b.n	800ff88 <__kernel_rem_pio2f+0x29c>
 800ffc4:	ecfe 6a01 	vldmia	lr!, {s13}
 800ffc8:	ed39 7a01 	vldmdb	r9!, {s14}
 800ffcc:	3401      	adds	r4, #1
 800ffce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ffd2:	e7f0      	b.n	800ffb6 <__kernel_rem_pio2f+0x2ca>
 800ffd4:	080114a4 	.word	0x080114a4
 800ffd8:	08011478 	.word	0x08011478
 800ffdc:	43800000 	.word	0x43800000
 800ffe0:	3b800000 	.word	0x3b800000
 800ffe4:	00000000 	.word	0x00000000
 800ffe8:	9b02      	ldr	r3, [sp, #8]
 800ffea:	eeb0 0a48 	vmov.f32	s0, s16
 800ffee:	eba3 0008 	sub.w	r0, r3, r8
 800fff2:	f000 f8e3 	bl	80101bc <scalbnf>
 800fff6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ffdc <__kernel_rem_pio2f+0x2f0>
 800fffa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010002:	db19      	blt.n	8010038 <__kernel_rem_pio2f+0x34c>
 8010004:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ffe0 <__kernel_rem_pio2f+0x2f4>
 8010008:	ee60 7a27 	vmul.f32	s15, s0, s15
 801000c:	aa08      	add	r2, sp, #32
 801000e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010012:	3508      	adds	r5, #8
 8010014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010018:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801001c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010020:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010024:	ee10 3a10 	vmov	r3, s0
 8010028:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801002c:	ee17 3a90 	vmov	r3, s15
 8010030:	3401      	adds	r4, #1
 8010032:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010036:	e74c      	b.n	800fed2 <__kernel_rem_pio2f+0x1e6>
 8010038:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801003c:	aa08      	add	r2, sp, #32
 801003e:	ee10 3a10 	vmov	r3, s0
 8010042:	e7f6      	b.n	8010032 <__kernel_rem_pio2f+0x346>
 8010044:	a808      	add	r0, sp, #32
 8010046:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801004a:	9001      	str	r0, [sp, #4]
 801004c:	ee07 0a90 	vmov	s15, r0
 8010050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010054:	3b01      	subs	r3, #1
 8010056:	ee67 7a80 	vmul.f32	s15, s15, s0
 801005a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801005e:	ed62 7a01 	vstmdb	r2!, {s15}
 8010062:	e743      	b.n	800feec <__kernel_rem_pio2f+0x200>
 8010064:	ecfc 6a01 	vldmia	ip!, {s13}
 8010068:	ecb5 7a01 	vldmia	r5!, {s14}
 801006c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010070:	3001      	adds	r0, #1
 8010072:	4550      	cmp	r0, sl
 8010074:	dc01      	bgt.n	801007a <__kernel_rem_pio2f+0x38e>
 8010076:	4290      	cmp	r0, r2
 8010078:	ddf4      	ble.n	8010064 <__kernel_rem_pio2f+0x378>
 801007a:	a858      	add	r0, sp, #352	@ 0x160
 801007c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010080:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010084:	3b01      	subs	r3, #1
 8010086:	e735      	b.n	800fef4 <__kernel_rem_pio2f+0x208>
 8010088:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801008a:	2b02      	cmp	r3, #2
 801008c:	dc09      	bgt.n	80100a2 <__kernel_rem_pio2f+0x3b6>
 801008e:	2b00      	cmp	r3, #0
 8010090:	dc27      	bgt.n	80100e2 <__kernel_rem_pio2f+0x3f6>
 8010092:	d040      	beq.n	8010116 <__kernel_rem_pio2f+0x42a>
 8010094:	f009 0007 	and.w	r0, r9, #7
 8010098:	b059      	add	sp, #356	@ 0x164
 801009a:	ecbd 8b04 	vpop	{d8-d9}
 801009e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80100a4:	2b03      	cmp	r3, #3
 80100a6:	d1f5      	bne.n	8010094 <__kernel_rem_pio2f+0x3a8>
 80100a8:	aa30      	add	r2, sp, #192	@ 0xc0
 80100aa:	1f0b      	subs	r3, r1, #4
 80100ac:	4413      	add	r3, r2
 80100ae:	461a      	mov	r2, r3
 80100b0:	4620      	mov	r0, r4
 80100b2:	2800      	cmp	r0, #0
 80100b4:	dc50      	bgt.n	8010158 <__kernel_rem_pio2f+0x46c>
 80100b6:	4622      	mov	r2, r4
 80100b8:	2a01      	cmp	r2, #1
 80100ba:	dc5d      	bgt.n	8010178 <__kernel_rem_pio2f+0x48c>
 80100bc:	ab30      	add	r3, sp, #192	@ 0xc0
 80100be:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ffe4 <__kernel_rem_pio2f+0x2f8>
 80100c2:	440b      	add	r3, r1
 80100c4:	2c01      	cmp	r4, #1
 80100c6:	dc67      	bgt.n	8010198 <__kernel_rem_pio2f+0x4ac>
 80100c8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80100cc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80100d0:	2e00      	cmp	r6, #0
 80100d2:	d167      	bne.n	80101a4 <__kernel_rem_pio2f+0x4b8>
 80100d4:	edc7 6a00 	vstr	s13, [r7]
 80100d8:	ed87 7a01 	vstr	s14, [r7, #4]
 80100dc:	edc7 7a02 	vstr	s15, [r7, #8]
 80100e0:	e7d8      	b.n	8010094 <__kernel_rem_pio2f+0x3a8>
 80100e2:	ab30      	add	r3, sp, #192	@ 0xc0
 80100e4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ffe4 <__kernel_rem_pio2f+0x2f8>
 80100e8:	440b      	add	r3, r1
 80100ea:	4622      	mov	r2, r4
 80100ec:	2a00      	cmp	r2, #0
 80100ee:	da24      	bge.n	801013a <__kernel_rem_pio2f+0x44e>
 80100f0:	b34e      	cbz	r6, 8010146 <__kernel_rem_pio2f+0x45a>
 80100f2:	eef1 7a47 	vneg.f32	s15, s14
 80100f6:	edc7 7a00 	vstr	s15, [r7]
 80100fa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80100fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010102:	aa31      	add	r2, sp, #196	@ 0xc4
 8010104:	2301      	movs	r3, #1
 8010106:	429c      	cmp	r4, r3
 8010108:	da20      	bge.n	801014c <__kernel_rem_pio2f+0x460>
 801010a:	b10e      	cbz	r6, 8010110 <__kernel_rem_pio2f+0x424>
 801010c:	eef1 7a67 	vneg.f32	s15, s15
 8010110:	edc7 7a01 	vstr	s15, [r7, #4]
 8010114:	e7be      	b.n	8010094 <__kernel_rem_pio2f+0x3a8>
 8010116:	ab30      	add	r3, sp, #192	@ 0xc0
 8010118:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ffe4 <__kernel_rem_pio2f+0x2f8>
 801011c:	440b      	add	r3, r1
 801011e:	2c00      	cmp	r4, #0
 8010120:	da05      	bge.n	801012e <__kernel_rem_pio2f+0x442>
 8010122:	b10e      	cbz	r6, 8010128 <__kernel_rem_pio2f+0x43c>
 8010124:	eef1 7a67 	vneg.f32	s15, s15
 8010128:	edc7 7a00 	vstr	s15, [r7]
 801012c:	e7b2      	b.n	8010094 <__kernel_rem_pio2f+0x3a8>
 801012e:	ed33 7a01 	vldmdb	r3!, {s14}
 8010132:	3c01      	subs	r4, #1
 8010134:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010138:	e7f1      	b.n	801011e <__kernel_rem_pio2f+0x432>
 801013a:	ed73 7a01 	vldmdb	r3!, {s15}
 801013e:	3a01      	subs	r2, #1
 8010140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010144:	e7d2      	b.n	80100ec <__kernel_rem_pio2f+0x400>
 8010146:	eef0 7a47 	vmov.f32	s15, s14
 801014a:	e7d4      	b.n	80100f6 <__kernel_rem_pio2f+0x40a>
 801014c:	ecb2 7a01 	vldmia	r2!, {s14}
 8010150:	3301      	adds	r3, #1
 8010152:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010156:	e7d6      	b.n	8010106 <__kernel_rem_pio2f+0x41a>
 8010158:	ed72 7a01 	vldmdb	r2!, {s15}
 801015c:	edd2 6a01 	vldr	s13, [r2, #4]
 8010160:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010164:	3801      	subs	r0, #1
 8010166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801016a:	ed82 7a00 	vstr	s14, [r2]
 801016e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010172:	edc2 7a01 	vstr	s15, [r2, #4]
 8010176:	e79c      	b.n	80100b2 <__kernel_rem_pio2f+0x3c6>
 8010178:	ed73 7a01 	vldmdb	r3!, {s15}
 801017c:	edd3 6a01 	vldr	s13, [r3, #4]
 8010180:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010184:	3a01      	subs	r2, #1
 8010186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801018a:	ed83 7a00 	vstr	s14, [r3]
 801018e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010192:	edc3 7a01 	vstr	s15, [r3, #4]
 8010196:	e78f      	b.n	80100b8 <__kernel_rem_pio2f+0x3cc>
 8010198:	ed33 7a01 	vldmdb	r3!, {s14}
 801019c:	3c01      	subs	r4, #1
 801019e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101a2:	e78f      	b.n	80100c4 <__kernel_rem_pio2f+0x3d8>
 80101a4:	eef1 6a66 	vneg.f32	s13, s13
 80101a8:	eeb1 7a47 	vneg.f32	s14, s14
 80101ac:	edc7 6a00 	vstr	s13, [r7]
 80101b0:	ed87 7a01 	vstr	s14, [r7, #4]
 80101b4:	eef1 7a67 	vneg.f32	s15, s15
 80101b8:	e790      	b.n	80100dc <__kernel_rem_pio2f+0x3f0>
 80101ba:	bf00      	nop

080101bc <scalbnf>:
 80101bc:	ee10 3a10 	vmov	r3, s0
 80101c0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80101c4:	d02b      	beq.n	801021e <scalbnf+0x62>
 80101c6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80101ca:	d302      	bcc.n	80101d2 <scalbnf+0x16>
 80101cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80101d0:	4770      	bx	lr
 80101d2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80101d6:	d123      	bne.n	8010220 <scalbnf+0x64>
 80101d8:	4b24      	ldr	r3, [pc, #144]	@ (801026c <scalbnf+0xb0>)
 80101da:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010270 <scalbnf+0xb4>
 80101de:	4298      	cmp	r0, r3
 80101e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80101e4:	db17      	blt.n	8010216 <scalbnf+0x5a>
 80101e6:	ee10 3a10 	vmov	r3, s0
 80101ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80101ee:	3a19      	subs	r2, #25
 80101f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80101f4:	4288      	cmp	r0, r1
 80101f6:	dd15      	ble.n	8010224 <scalbnf+0x68>
 80101f8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010274 <scalbnf+0xb8>
 80101fc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010278 <scalbnf+0xbc>
 8010200:	ee10 3a10 	vmov	r3, s0
 8010204:	eeb0 7a67 	vmov.f32	s14, s15
 8010208:	2b00      	cmp	r3, #0
 801020a:	bfb8      	it	lt
 801020c:	eef0 7a66 	vmovlt.f32	s15, s13
 8010210:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010214:	4770      	bx	lr
 8010216:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801027c <scalbnf+0xc0>
 801021a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801021e:	4770      	bx	lr
 8010220:	0dd2      	lsrs	r2, r2, #23
 8010222:	e7e5      	b.n	80101f0 <scalbnf+0x34>
 8010224:	4410      	add	r0, r2
 8010226:	28fe      	cmp	r0, #254	@ 0xfe
 8010228:	dce6      	bgt.n	80101f8 <scalbnf+0x3c>
 801022a:	2800      	cmp	r0, #0
 801022c:	dd06      	ble.n	801023c <scalbnf+0x80>
 801022e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010232:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010236:	ee00 3a10 	vmov	s0, r3
 801023a:	4770      	bx	lr
 801023c:	f110 0f16 	cmn.w	r0, #22
 8010240:	da09      	bge.n	8010256 <scalbnf+0x9a>
 8010242:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801027c <scalbnf+0xc0>
 8010246:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010280 <scalbnf+0xc4>
 801024a:	ee10 3a10 	vmov	r3, s0
 801024e:	eeb0 7a67 	vmov.f32	s14, s15
 8010252:	2b00      	cmp	r3, #0
 8010254:	e7d9      	b.n	801020a <scalbnf+0x4e>
 8010256:	3019      	adds	r0, #25
 8010258:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801025c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010260:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010284 <scalbnf+0xc8>
 8010264:	ee07 3a90 	vmov	s15, r3
 8010268:	e7d7      	b.n	801021a <scalbnf+0x5e>
 801026a:	bf00      	nop
 801026c:	ffff3cb0 	.word	0xffff3cb0
 8010270:	4c000000 	.word	0x4c000000
 8010274:	7149f2ca 	.word	0x7149f2ca
 8010278:	f149f2ca 	.word	0xf149f2ca
 801027c:	0da24260 	.word	0x0da24260
 8010280:	8da24260 	.word	0x8da24260
 8010284:	33000000 	.word	0x33000000

08010288 <floorf>:
 8010288:	ee10 3a10 	vmov	r3, s0
 801028c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010290:	3a7f      	subs	r2, #127	@ 0x7f
 8010292:	2a16      	cmp	r2, #22
 8010294:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010298:	dc2b      	bgt.n	80102f2 <floorf+0x6a>
 801029a:	2a00      	cmp	r2, #0
 801029c:	da12      	bge.n	80102c4 <floorf+0x3c>
 801029e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010304 <floorf+0x7c>
 80102a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80102a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80102aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ae:	dd06      	ble.n	80102be <floorf+0x36>
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	da24      	bge.n	80102fe <floorf+0x76>
 80102b4:	2900      	cmp	r1, #0
 80102b6:	4b14      	ldr	r3, [pc, #80]	@ (8010308 <floorf+0x80>)
 80102b8:	bf08      	it	eq
 80102ba:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80102be:	ee00 3a10 	vmov	s0, r3
 80102c2:	4770      	bx	lr
 80102c4:	4911      	ldr	r1, [pc, #68]	@ (801030c <floorf+0x84>)
 80102c6:	4111      	asrs	r1, r2
 80102c8:	420b      	tst	r3, r1
 80102ca:	d0fa      	beq.n	80102c2 <floorf+0x3a>
 80102cc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010304 <floorf+0x7c>
 80102d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80102d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80102d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102dc:	ddef      	ble.n	80102be <floorf+0x36>
 80102de:	2b00      	cmp	r3, #0
 80102e0:	bfbe      	ittt	lt
 80102e2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80102e6:	fa40 f202 	asrlt.w	r2, r0, r2
 80102ea:	189b      	addlt	r3, r3, r2
 80102ec:	ea23 0301 	bic.w	r3, r3, r1
 80102f0:	e7e5      	b.n	80102be <floorf+0x36>
 80102f2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80102f6:	d3e4      	bcc.n	80102c2 <floorf+0x3a>
 80102f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80102fc:	4770      	bx	lr
 80102fe:	2300      	movs	r3, #0
 8010300:	e7dd      	b.n	80102be <floorf+0x36>
 8010302:	bf00      	nop
 8010304:	7149f2ca 	.word	0x7149f2ca
 8010308:	bf800000 	.word	0xbf800000
 801030c:	007fffff 	.word	0x007fffff

08010310 <_init>:
 8010310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010312:	bf00      	nop
 8010314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010316:	bc08      	pop	{r3}
 8010318:	469e      	mov	lr, r3
 801031a:	4770      	bx	lr

0801031c <_fini>:
 801031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801031e:	bf00      	nop
 8010320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010322:	bc08      	pop	{r3}
 8010324:	469e      	mov	lr, r3
 8010326:	4770      	bx	lr
