
mainboardcansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001375c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  08013940  08013940  00014940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014084  08014084  000161f4  2**0
                  CONTENTS
  4 .ARM          00000008  08014084  08014084  00015084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801408c  0801408c  000161f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801408c  0801408c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014090  08014090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08014094  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014dc  200001f8  08014288  000161f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016d4  08014288  000166d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b4a9  00000000  00000000  00016224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006004  00000000  00000000  000416cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  000476d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b33  00000000  00000000  00049a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027751  00000000  00000000  0004b53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003195f  00000000  00000000  00072c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8c2c  00000000  00000000  000a45eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab04  00000000  00000000  0018d25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00197d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013924 	.word	0x08013924

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	08013924 	.word	0x08013924

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800103e:	2354      	movs	r3, #84	@ 0x54
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2210      	movs	r2, #16
 8001054:	21d6      	movs	r1, #214	@ 0xd6
 8001056:	4838      	ldr	r0, [pc, #224]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001058:	f005 ff20 	bl	8006e9c <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 800105c:	234c      	movs	r3, #76	@ 0x4c
 800105e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	2211      	movs	r2, #17
 8001072:	21d6      	movs	r1, #214	@ 0xd6
 8001074:	4830      	ldr	r0, [pc, #192]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001076:	f005 ff11 	bl	8006e9c <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2212      	movs	r2, #18
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4829      	ldr	r0, [pc, #164]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f005 ff02 	bl	8006e9c <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 8001098:	2300      	movs	r3, #0
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2215      	movs	r2, #21
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4821      	ldr	r0, [pc, #132]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f005 fef3 	bl	8006e9c <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2216      	movs	r2, #22
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	481a      	ldr	r0, [pc, #104]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f005 fee4 	bl	8006e9c <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2217      	movs	r2, #23
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4812      	ldr	r0, [pc, #72]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f005 fed5 	bl	8006e9c <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	221e      	movs	r2, #30
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	480b      	ldr	r0, [pc, #44]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f005 ffda 	bl	80070c4 <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 800111a:	4808      	ldr	r0, [pc, #32]	@ (800113c <Init_HighPerf_Mode_6_axis+0x108>)
 800111c:	f00f fe3c 	bl	8010d98 <puts>
        }
        if (status & 0x02) {
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <Init_HighPerf_Mode_6_axis+0x10c>)
 800112c:	f00f fe34 	bl	8010d98 <puts>
        }

}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000408 	.word	0x20000408
 800113c:	0801397c 	.word	0x0801397c
 8001140:	080139b0 	.word	0x080139b0

08001144 <Read_sensor_data>:


HAL_StatusTypeDef Read_sensor_data(AXIS6 *data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	@ 0x38
 8001148:	af04      	add	r7, sp, #16
 800114a:	6078      	str	r0, [r7, #4]
	int16_t accel_data[3],gyro_data[3];
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;
    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 030b 	add.w	r3, r7, #11
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	221e      	movs	r2, #30
 8001160:	21d6      	movs	r1, #214	@ 0xd6
 8001162:	486d      	ldr	r0, [pc, #436]	@ (8001318 <Read_sensor_data+0x1d4>)
 8001164:	f005 ffae 	bl	80070c4 <HAL_I2C_Mem_Read>
 8001168:	4603      	mov	r3, r0
 800116a:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <Read_sensor_data+0x32>
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	e0cc      	b.n	8001310 <Read_sensor_data+0x1cc>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <Read_sensor_data+0x46>
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <Read_sensor_data+0x4a>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0c0      	b.n	8001310 <Read_sensor_data+0x1cc>
    }
	// Lire les données gyro
	for (int i = 0; i < 3; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
 8001192:	e043      	b.n	800121c <Read_sensor_data+0xd8>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 8001194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001196:	3311      	adds	r3, #17
 8001198:	b2db      	uxtb	r3, r3
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	773b      	strb	r3, [r7, #28]
		uint8_t high_addr = low_addr + 1;
 800119e:	7f3b      	ldrb	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	76fb      	strb	r3, [r7, #27]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011a4:	7f3b      	ldrb	r3, [r7, #28]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	f107 030a 	add.w	r3, r7, #10
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	21d6      	movs	r1, #214	@ 0xd6
 80011bc:	4856      	ldr	r0, [pc, #344]	@ (8001318 <Read_sensor_data+0x1d4>)
 80011be:	f005 ff81 	bl	80070c4 <HAL_I2C_Mem_Read>
 80011c2:	4603      	mov	r3, r0
 80011c4:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <Read_sensor_data+0x8c>
 80011cc:	7ffb      	ldrb	r3, [r7, #31]
 80011ce:	e09f      	b.n	8001310 <Read_sensor_data+0x1cc>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80011d0:	7efb      	ldrb	r3, [r7, #27]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	f107 0309 	add.w	r3, r7, #9
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	21d6      	movs	r1, #214	@ 0xd6
 80011e8:	484b      	ldr	r0, [pc, #300]	@ (8001318 <Read_sensor_data+0x1d4>)
 80011ea:	f005 ff6b 	bl	80070c4 <HAL_I2C_Mem_Read>
 80011ee:	4603      	mov	r3, r0
 80011f0:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <Read_sensor_data+0xb8>
 80011f8:	7ffb      	ldrb	r3, [r7, #31]
 80011fa:	e089      	b.n	8001310 <Read_sensor_data+0x1cc>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80011fc:	7a7b      	ldrb	r3, [r7, #9]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	7abb      	ldrb	r3, [r7, #10]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21a      	sxth	r2, r3
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	3328      	adds	r3, #40	@ 0x28
 8001210:	443b      	add	r3, r7
 8001212:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < 3; i++) {
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
 800121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121e:	2b02      	cmp	r3, #2
 8001220:	ddb8      	ble.n	8001194 <Read_sensor_data+0x50>
	}
	// Lire les données accel
	for (int i = 0; i < 3; i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
 8001226:	e043      	b.n	80012b0 <Read_sensor_data+0x16c>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	3314      	adds	r3, #20
 800122c:	b2db      	uxtb	r3, r3
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	77bb      	strb	r3, [r7, #30]
		uint8_t high_addr = low_addr + 1;
 8001232:	7fbb      	ldrb	r3, [r7, #30]
 8001234:	3301      	adds	r3, #1
 8001236:	777b      	strb	r3, [r7, #29]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001238:	7fbb      	ldrb	r3, [r7, #30]
 800123a:	b29a      	uxth	r2, r3
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030a 	add.w	r3, r7, #10
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	21d6      	movs	r1, #214	@ 0xd6
 8001250:	4831      	ldr	r0, [pc, #196]	@ (8001318 <Read_sensor_data+0x1d4>)
 8001252:	f005 ff37 	bl	80070c4 <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 800125a:	7ffb      	ldrb	r3, [r7, #31]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <Read_sensor_data+0x120>
 8001260:	7ffb      	ldrb	r3, [r7, #31]
 8001262:	e055      	b.n	8001310 <Read_sensor_data+0x1cc>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001264:	7f7b      	ldrb	r3, [r7, #29]
 8001266:	b29a      	uxth	r2, r3
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f107 0309 	add.w	r3, r7, #9
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	21d6      	movs	r1, #214	@ 0xd6
 800127c:	4826      	ldr	r0, [pc, #152]	@ (8001318 <Read_sensor_data+0x1d4>)
 800127e:	f005 ff21 	bl	80070c4 <HAL_I2C_Mem_Read>
 8001282:	4603      	mov	r3, r0
 8001284:	77fb      	strb	r3, [r7, #31]
		if (status != HAL_OK) return status;
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <Read_sensor_data+0x14c>
 800128c:	7ffb      	ldrb	r3, [r7, #31]
 800128e:	e03f      	b.n	8001310 <Read_sensor_data+0x1cc>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001290:	7a7b      	ldrb	r3, [r7, #9]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	7abb      	ldrb	r3, [r7, #10]
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21a      	sxth	r2, r3
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	3328      	adds	r3, #40	@ 0x28
 80012a4:	443b      	add	r3, r7
 80012a6:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i < 3; i++) {
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	3301      	adds	r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	ddb8      	ble.n	8001228 <Read_sensor_data+0xe4>
	}
	data->AccelX = accel_data[0];
 80012b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]
	data->AccelY = accel_data[1];
 80012c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	605a      	str	r2, [r3, #4]
	data->AccelZ = accel_data[2];
 80012ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
	data->GyroX = gyro_data[0];
 80012d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012d8:	461a      	mov	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60da      	str	r2, [r3, #12]
	data->GyroY = gyro_data[1];
 80012de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
	data->GyroZ = gyro_data[2];
 80012e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	615a      	str	r2, [r3, #20]
	data->temp  = Read_temp()-8.5;
 80012f2:	f000 f815 	bl	8001320 <Read_temp>
 80012f6:	ec51 0b10 	vmov	r0, r1, d0
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <Read_sensor_data+0x1d8>)
 8001300:	f7fe ffea 	bl	80002d8 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000408 	.word	0x20000408
 800131c:	40210000 	.word	0x40210000

08001320 <Read_temp>:

double Read_temp() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2301      	movs	r3, #1
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	2220      	movs	r2, #32
 8001338:	21d6      	movs	r1, #214	@ 0xd6
 800133a:	481e      	ldr	r0, [pc, #120]	@ (80013b4 <Read_temp+0x94>)
 800133c:	f005 fec2 	bl	80070c4 <HAL_I2C_Mem_Read>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2301      	movs	r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	1dbb      	adds	r3, r7, #6
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2221      	movs	r2, #33	@ 0x21
 8001356:	21d6      	movs	r1, #214	@ 0xd6
 8001358:	4816      	ldr	r0, [pc, #88]	@ (80013b4 <Read_temp+0x94>)
 800135a:	f005 feb3 	bl	80070c4 <HAL_I2C_Mem_Read>
 800135e:	4603      	mov	r3, r0
 8001360:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 8001370:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8fd 	bl	8000574 <__aeabi_i2d>
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <Read_temp+0x98>)
 8001380:	f7ff fa8c 	bl	800089c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <Read_temp+0x9c>)
 8001392:	f7fe ffa3 	bl	80002dc <__adddf3>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 800139e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80013a6:	eeb0 0a47 	vmov.f32	s0, s14
 80013aa:	eef0 0a67 	vmov.f32	s1, s15
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000408 	.word	0x20000408
 80013b8:	40700000 	.word	0x40700000
 80013bc:	40390000 	.word	0x40390000

080013c0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2220      	movs	r2, #32
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f00f fe11 	bl	8011000 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013de:	4b48      	ldr	r3, [pc, #288]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013e6:	4b46      	ldr	r3, [pc, #280]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ee:	4b44      	ldr	r3, [pc, #272]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f4:	4b42      	ldr	r3, [pc, #264]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80013fa:	4b41      	ldr	r3, [pc, #260]	@ (8001500 <MX_ADC1_Init+0x140>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001400:	4b3f      	ldr	r3, [pc, #252]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001402:	2201      	movs	r2, #1
 8001404:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001406:	4b3e      	ldr	r3, [pc, #248]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001408:	2208      	movs	r2, #8
 800140a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800140c:	4b3c      	ldr	r3, [pc, #240]	@ (8001500 <MX_ADC1_Init+0x140>)
 800140e:	2200      	movs	r2, #0
 8001410:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001412:	4b3b      	ldr	r3, [pc, #236]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001414:	2201      	movs	r2, #1
 8001416:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001418:	4b39      	ldr	r3, [pc, #228]	@ (8001500 <MX_ADC1_Init+0x140>)
 800141a:	2204      	movs	r2, #4
 800141c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800141e:	4b38      	ldr	r3, [pc, #224]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001426:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001428:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800142c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800142e:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001430:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001434:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001436:	4b32      	ldr	r3, [pc, #200]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143e:	4b30      	ldr	r3, [pc, #192]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001440:	2200      	movs	r2, #0
 8001442:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001444:	4b2e      	ldr	r3, [pc, #184]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800144c:	482c      	ldr	r0, [pc, #176]	@ (8001500 <MX_ADC1_Init+0x140>)
 800144e:	f003 fe5f 	bl	8005110 <HAL_ADC_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001458:	f001 fe8e 	bl	8003178 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	4826      	ldr	r0, [pc, #152]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001468:	f004 fdce 	bl	8006008 <HAL_ADCEx_MultiModeConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001472:	f001 fe81 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <MX_ADC1_Init+0x144>)
 8001478:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800147a:	2306      	movs	r3, #6
 800147c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800147e:	2307      	movs	r3, #7
 8001480:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001482:	237f      	movs	r3, #127	@ 0x7f
 8001484:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001486:	2304      	movs	r3, #4
 8001488:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	481b      	ldr	r0, [pc, #108]	@ (8001500 <MX_ADC1_Init+0x140>)
 8001494:	f004 f888 	bl	80055a8 <HAL_ADC_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800149e:	f001 fe6b 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_ADC1_Init+0x148>)
 80014a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014a6:	230c      	movs	r3, #12
 80014a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4814      	ldr	r0, [pc, #80]	@ (8001500 <MX_ADC1_Init+0x140>)
 80014b0:	f004 f87a 	bl	80055a8 <HAL_ADC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80014ba:	f001 fe5d 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014be:	4b13      	ldr	r3, [pc, #76]	@ (800150c <MX_ADC1_Init+0x14c>)
 80014c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014c2:	2312      	movs	r3, #18
 80014c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <MX_ADC1_Init+0x140>)
 80014cc:	f004 f86c 	bl	80055a8 <HAL_ADC_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80014d6:	f001 fe4f 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <MX_ADC1_Init+0x150>)
 80014dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014de:	2318      	movs	r3, #24
 80014e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4806      	ldr	r0, [pc, #24]	@ (8001500 <MX_ADC1_Init+0x140>)
 80014e8:	f004 f85e 	bl	80055a8 <HAL_ADC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80014f2:	f001 fe41 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	3730      	adds	r7, #48	@ 0x30
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000214 	.word	0x20000214
 8001504:	cb840000 	.word	0xcb840000
 8001508:	c3210000 	.word	0xc3210000
 800150c:	08600004 	.word	0x08600004
 8001510:	0c900008 	.word	0x0c900008

08001514 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151a:	463b      	mov	r3, r7
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00f fd6d 	bl	8011000 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001526:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001528:	4a2c      	ldr	r2, [pc, #176]	@ (80015dc <MX_ADC2_Init+0xc8>)
 800152a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800152e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001532:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001534:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153a:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001540:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001546:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154c:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800154e:	2204      	movs	r2, #4
 8001550:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001552:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001554:	2200      	movs	r2, #0
 8001556:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001558:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800155a:	2201      	movs	r2, #1
 800155c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001560:	2201      	movs	r2, #1
 8001562:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800156c:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800156e:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800157a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001586:	2200      	movs	r2, #0
 8001588:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800158a:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001592:	4811      	ldr	r0, [pc, #68]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 8001594:	f003 fdbc 	bl	8005110 <HAL_ADC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800159e:	f001 fdeb 	bl	8003178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <MX_ADC2_Init+0xcc>)
 80015a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a6:	2306      	movs	r3, #6
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80015aa:	2307      	movs	r3, #7
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015ae:	237f      	movs	r3, #127	@ 0x7f
 80015b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b2:	2304      	movs	r3, #4
 80015b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <MX_ADC2_Init+0xc4>)
 80015c0:	f003 fff2 	bl	80055a8 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80015ca:	f001 fdd5 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000280 	.word	0x20000280
 80015dc:	50000100 	.word	0x50000100
 80015e0:	47520000 	.word	0x47520000

080015e4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09c      	sub	sp, #112	@ 0x70
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	2244      	movs	r2, #68	@ 0x44
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f00f fcfb 	bl	8011000 <memset>
  if(adcHandle->Instance==ADC1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001612:	d169      	bne.n	80016e8 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001618:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800161a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800161e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	4618      	mov	r0, r3
 8001626:	f007 f897 	bl	8008758 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001630:	f001 fda2 	bl	8003178 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001634:	4b65      	ldr	r3, [pc, #404]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	4a64      	ldr	r2, [pc, #400]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 800163c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800163e:	4b63      	ldr	r3, [pc, #396]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10b      	bne.n	800165e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001646:	4b62      	ldr	r3, [pc, #392]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	4a61      	ldr	r2, [pc, #388]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800164c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001652:	4b5f      	ldr	r3, [pc, #380]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b5c      	ldr	r3, [pc, #368]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	4a5b      	ldr	r2, [pc, #364]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166a:	4b59      	ldr	r3, [pc, #356]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001676:	2306      	movs	r3, #6
 8001678:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167a:	2303      	movs	r3, #3
 800167c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168c:	f005 f9ae 	bl	80069ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001690:	4b50      	ldr	r3, [pc, #320]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 8001692:	4a51      	ldr	r2, [pc, #324]	@ (80017d8 <HAL_ADC_MspInit+0x1f4>)
 8001694:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001696:	4b4f      	ldr	r3, [pc, #316]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 8001698:	2205      	movs	r2, #5
 800169a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800169c:	4b4d      	ldr	r3, [pc, #308]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a2:	4b4c      	ldr	r3, [pc, #304]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a8:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016aa:	2280      	movs	r2, #128	@ 0x80
 80016ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ae:	4b49      	ldr	r3, [pc, #292]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b6:	4b47      	ldr	r3, [pc, #284]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016be:	4b45      	ldr	r3, [pc, #276]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016c0:	2220      	movs	r2, #32
 80016c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016c4:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016ca:	4842      	ldr	r0, [pc, #264]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016cc:	f004 fe50 	bl	8006370 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80016d6:	f001 fd4f 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a3d      	ldr	r2, [pc, #244]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016de:	655a      	str	r2, [r3, #84]	@ 0x54
 80016e0:	4a3c      	ldr	r2, [pc, #240]	@ (80017d4 <HAL_ADC_MspInit+0x1f0>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80016e6:	e06d      	b.n	80017c4 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a3b      	ldr	r2, [pc, #236]	@ (80017dc <HAL_ADC_MspInit+0x1f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d168      	bne.n	80017c4 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016f8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016fc:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4618      	mov	r0, r3
 8001704:	f007 f828 	bl	8008758 <HAL_RCCEx_PeriphCLKConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800170e:	f001 fd33 	bl	8003178 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001712:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	4a2c      	ldr	r2, [pc, #176]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 800171a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800171c:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <HAL_ADC_MspInit+0x1e8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d10b      	bne.n	800173c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001724:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001728:	4a29      	ldr	r2, [pc, #164]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800172a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800172e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	4a23      	ldr	r2, [pc, #140]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001748:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <HAL_ADC_MspInit+0x1ec>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001754:	2310      	movs	r3, #16
 8001756:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001758:	2303      	movs	r3, #3
 800175a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176a:	f005 f93f 	bl	80069ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001770:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <HAL_ADC_MspInit+0x200>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001776:	2224      	movs	r2, #36	@ 0x24
 8001778:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 800178e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001792:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 8001796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800179a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 800179e:	2220      	movs	r2, #32
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017a8:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 80017aa:	f004 fde1 	bl	8006370 <HAL_DMA_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80017b4:	f001 fce0 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a09      	ldr	r2, [pc, #36]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 80017bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <HAL_ADC_MspInit+0x1fc>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80017c4:	bf00      	nop
 80017c6:	3770      	adds	r7, #112	@ 0x70
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200003ac 	.word	0x200003ac
 80017d0:	40021000 	.word	0x40021000
 80017d4:	200002ec 	.word	0x200002ec
 80017d8:	40020030 	.word	0x40020030
 80017dc:	50000100 	.word	0x50000100
 80017e0:	2000034c 	.word	0x2000034c
 80017e4:	40020058 	.word	0x40020058

080017e8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80017e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017fa:	f040 80cd 	bne.w	8001998 <HAL_ADC_ConvCpltCallback+0x1b0>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80017fe:	4b80      	ldr	r3, [pc, #512]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feb6 	bl	8000574 <__aeabi_i2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	a178      	add	r1, pc, #480	@ (adr r1, 80019f0 <HAL_ADC_ConvCpltCallback+0x208>)
 800180e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001812:	f7ff f843 	bl	800089c <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff fa0b 	bl	8000c38 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4a77      	ldr	r2, [pc, #476]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001826:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001828:	4b77      	ldr	r3, [pc, #476]	@ (8001a08 <HAL_ADC_ConvCpltCallback+0x220>)
 800182a:	ed93 7a00 	vldr	s14, [r3]
 800182e:	4b77      	ldr	r3, [pc, #476]	@ (8001a0c <HAL_ADC_ConvCpltCallback+0x224>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001838:	ee17 0a90 	vmov	r0, s15
 800183c:	f7fe feac 	bl	8000598 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	4971      	ldr	r1, [pc, #452]	@ (8001a10 <HAL_ADC_ConvCpltCallback+0x228>)
 800184a:	f7ff f827 	bl	800089c <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4690      	mov	r8, r2
 8001854:	4699      	mov	r9, r3
 8001856:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 8001858:	885b      	ldrh	r3, [r3, #2]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe8a 	bl	8000574 <__aeabi_i2d>
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
 8001864:	4b67      	ldr	r3, [pc, #412]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b68      	ldr	r3, [pc, #416]	@ (8001a14 <HAL_ADC_ConvCpltCallback+0x22c>)
 8001874:	f7ff f812 	bl	800089c <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fee2 	bl	8000648 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	4b5f      	ldr	r3, [pc, #380]	@ (8001a0c <HAL_ADC_ConvCpltCallback+0x224>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe81 	bl	8000598 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fd1b 	bl	80002d8 <__aeabi_dsub>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4640      	mov	r0, r8
 80018a8:	4649      	mov	r1, r9
 80018aa:	f7fe fecd 	bl	8000648 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f9bf 	bl	8000c38 <__aeabi_d2f>
 80018ba:	ee07 0a10 	vmov	s14, r0
 80018be:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	4b54      	ldr	r3, [pc, #336]	@ (8001a18 <HAL_ADC_ConvCpltCallback+0x230>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 80018cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 80018ce:	88db      	ldrh	r3, [r3, #6]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe4f 	bl	8000574 <__aeabi_i2d>
 80018d6:	a348      	add	r3, pc, #288	@ (adr r3, 80019f8 <HAL_ADC_ConvCpltCallback+0x210>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe ffde 	bl	800089c <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b49      	ldr	r3, [pc, #292]	@ (8001a14 <HAL_ADC_ConvCpltCallback+0x22c>)
 80018ee:	f7fe feab 	bl	8000648 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
 80018fa:	4b42      	ldr	r3, [pc, #264]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe4a 	bl	8000598 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fe9c 	bl	8000648 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f98e 	bl	8000c38 <__aeabi_d2f>
 800191c:	4603      	mov	r3, r0
 800191e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a1c <HAL_ADC_ConvCpltCallback+0x234>)
 8001920:	6013      	str	r3, [r2, #0]
		current=(float) 60.0*(rawADCdata[2]/4095.0)*vrefint;
 8001922:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 8001924:	889b      	ldrh	r3, [r3, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe24 	bl	8000574 <__aeabi_i2d>
 800192c:	a332      	add	r3, pc, #200	@ (adr r3, 80019f8 <HAL_ADC_ConvCpltCallback+0x210>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe ffb3 	bl	800089c <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <HAL_ADC_ConvCpltCallback+0x238>)
 8001944:	f7fe fe80 	bl	8000648 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4614      	mov	r4, r2
 800194e:	461d      	mov	r5, r3
 8001950:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe1f 	bl	8000598 <__aeabi_f2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fe71 	bl	8000648 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f963 	bl	8000c38 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	4a2b      	ldr	r2, [pc, #172]	@ (8001a24 <HAL_ADC_ConvCpltCallback+0x23c>)
 8001976:	6013      	str	r3, [r2, #0]
		power=(float) vbat*current;
 8001978:	4b28      	ldr	r3, [pc, #160]	@ (8001a1c <HAL_ADC_ConvCpltCallback+0x234>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <HAL_ADC_ConvCpltCallback+0x23c>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	4b27      	ldr	r3, [pc, #156]	@ (8001a28 <HAL_ADC_ConvCpltCallback+0x240>)
 800198a:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 4);
 800198e:	2204      	movs	r2, #4
 8001990:	491b      	ldr	r1, [pc, #108]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 8001992:	4826      	ldr	r0, [pc, #152]	@ (8001a2c <HAL_ADC_ConvCpltCallback+0x244>)
 8001994:	f003 fd40 	bl	8005418 <HAL_ADC_Start_DMA>

	}
	if(hadc->Instance==ADC2){
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a24      	ldr	r2, [pc, #144]	@ (8001a30 <HAL_ADC_ConvCpltCallback+0x248>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11f      	bne.n	80019e2 <HAL_ADC_ConvCpltCallback+0x1fa>
		vexternalsensor=(float) (rawADCdata[4]/4095.0)*vrefint;
 80019a2:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x218>)
 80019a4:	891b      	ldrh	r3, [r3, #8]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fde4 	bl	8000574 <__aeabi_i2d>
 80019ac:	a312      	add	r3, pc, #72	@ (adr r3, 80019f8 <HAL_ADC_ConvCpltCallback+0x210>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe ff73 	bl	800089c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f93b 	bl	8000c38 <__aeabi_d2f>
 80019c2:	ee07 0a10 	vmov	s14, r0
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x21c>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_ADC_ConvCpltCallback+0x24c>)
 80019d2:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 80019d6:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <HAL_ADC_ConvCpltCallback+0x250>)
 80019d8:	2201      	movs	r2, #1
 80019da:	4619      	mov	r1, r3
 80019dc:	4817      	ldr	r0, [pc, #92]	@ (8001a3c <HAL_ADC_ConvCpltCallback+0x254>)
 80019de:	f003 fd1b 	bl	8005418 <HAL_ADC_Start_DMA>

	}

}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019ec:	f3af 8000 	nop.w
 80019f0:	d70a3d70 	.word	0xd70a3d70
 80019f4:	40b36323 	.word	0x40b36323
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40affe00 	.word	0x40affe00
 8001a00:	20000b40 	.word	0x20000b40
 8001a04:	20000b50 	.word	0x20000b50
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	40590000 	.word	0x40590000
 8001a14:	40080000 	.word	0x40080000
 8001a18:	20000b4c 	.word	0x20000b4c
 8001a1c:	20000b54 	.word	0x20000b54
 8001a20:	404e0000 	.word	0x404e0000
 8001a24:	20000b58 	.word	0x20000b58
 8001a28:	20000b5c 	.word	0x20000b5c
 8001a2c:	20000214 	.word	0x20000214
 8001a30:	50000100 	.word	0x50000100
 8001a34:	20000b60 	.word	0x20000b60
 8001a38:	20000b48 	.word	0x20000b48
 8001a3c:	20000280 	.word	0x20000280

08001a40 <INIT_BARO>:
#define FIFO_SEL 0x18
#define FIFO_CONFIG 0x16
#define FIFO_DATA_ADDR 0x29


void INIT_BARO(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, OSR, I2C_MEMADD_SIZE_8BIT, 0b01111011, 1, HAL_MAX_DELAY);//EN la pression, opti lecture
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	237b      	movs	r3, #123	@ 0x7b
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2301      	movs	r3, #1
 8001a56:	2236      	movs	r2, #54	@ 0x36
 8001a58:	218c      	movs	r1, #140	@ 0x8c
 8001a5a:	4823      	ldr	r0, [pc, #140]	@ (8001ae8 <INIT_BARO+0xa8>)
 8001a5c:	f005 fa1e 	bl	8006e9c <HAL_I2C_Mem_Write>
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(500);
 8001a64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a68:	f003 f912 	bl	8004c90 <HAL_Delay>
    status = HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, ODR, I2C_MEMADD_SIZE_8BIT, 0b00000001, 1, HAL_MAX_DELAY);//240Hz, Normal mode
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	2301      	movs	r3, #1
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2237      	movs	r2, #55	@ 0x37
 8001a7e:	218c      	movs	r1, #140	@ 0x8c
 8001a80:	4819      	ldr	r0, [pc, #100]	@ (8001ae8 <INIT_BARO+0xa8>)
 8001a82:	f005 fa0b 	bl	8006e9c <HAL_I2C_Mem_Write>
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(500);
 8001a8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a8e:	f003 f8ff 	bl	8004c90 <HAL_Delay>
    status = HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, FIFO_SEL, I2C_MEMADD_SIZE_8BIT, 0b00000111, 1, HAL_MAX_DELAY);//EN FIFO
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	2218      	movs	r2, #24
 8001aa4:	218c      	movs	r1, #140	@ 0x8c
 8001aa6:	4810      	ldr	r0, [pc, #64]	@ (8001ae8 <INIT_BARO+0xa8>)
 8001aa8:	f005 f9f8 	bl	8006e9c <HAL_I2C_Mem_Write>
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(500);
 8001ab0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ab4:	f003 f8ec 	bl	8004c90 <HAL_Delay>
    status = HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, FIFO_CONFIG, I2C_MEMADD_SIZE_8BIT, 0b00001111, 1, HAL_MAX_DELAY);//stream-to-FIFO/threshold
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	2216      	movs	r2, #22
 8001aca:	218c      	movs	r1, #140	@ 0x8c
 8001acc:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <INIT_BARO+0xa8>)
 8001ace:	f005 f9e5 	bl	8006e9c <HAL_I2C_Mem_Write>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(500);
 8001ad6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ada:	f003 f8d9 	bl	8004c90 <HAL_Delay>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200003b4 	.word	0x200003b4

08001aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001af2:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <MX_DMA_Init+0xa0>)
 8001af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af6:	4a25      	ldr	r2, [pc, #148]	@ (8001b8c <MX_DMA_Init+0xa0>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001afe:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <MX_DMA_Init+0xa0>)
 8001b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <MX_DMA_Init+0xa0>)
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b8c <MX_DMA_Init+0xa0>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <MX_DMA_Init+0xa0>)
 8001b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	200b      	movs	r0, #11
 8001b28:	f004 fbed 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b2c:	200b      	movs	r0, #11
 8001b2e:	f004 fc04 	bl	800633a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	200c      	movs	r0, #12
 8001b38:	f004 fbe5 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b3c:	200c      	movs	r0, #12
 8001b3e:	f004 fbfc 	bl	800633a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	200d      	movs	r0, #13
 8001b48:	f004 fbdd 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b4c:	200d      	movs	r0, #13
 8001b4e:	f004 fbf4 	bl	800633a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	200e      	movs	r0, #14
 8001b58:	f004 fbd5 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b5c:	200e      	movs	r0, #14
 8001b5e:	f004 fbec 	bl	800633a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	200f      	movs	r0, #15
 8001b68:	f004 fbcd 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b6c:	200f      	movs	r0, #15
 8001b6e:	f004 fbe4 	bl	800633a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2010      	movs	r0, #16
 8001b78:	f004 fbc5 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001b7c:	2010      	movs	r0, #16
 8001b7e:	f004 fbdc 	bl	800633a <HAL_NVIC_EnableIRQ>

}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000

08001b90 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2110      	movs	r1, #16
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <SELECT+0x14>)
 8001b9a:	f005 f8a9 	bl	8006cf0 <HAL_GPIO_WritePin>
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	48000800 	.word	0x48000800

08001ba8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	2110      	movs	r1, #16
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <DESELECT+0x14>)
 8001bb2:	f005 f89d 	bl	8006cf0 <HAL_GPIO_WritePin>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	48000800 	.word	0x48000800

08001bc0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001bca:	bf00      	nop
 8001bcc:	4808      	ldr	r0, [pc, #32]	@ (8001bf0 <SPI_TxByte+0x30>)
 8001bce:	f007 fbf3 	bl	80093b8 <HAL_SPI_GetState>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d1f9      	bne.n	8001bcc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001bd8:	1df9      	adds	r1, r7, #7
 8001bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bde:	2201      	movs	r2, #1
 8001be0:	4803      	ldr	r0, [pc, #12]	@ (8001bf0 <SPI_TxByte+0x30>)
 8001be2:	f007 f854 	bl	8008c8e <HAL_SPI_Transmit>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000e5c 	.word	0x20000e5c

08001bf4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001bfa:	23ff      	movs	r3, #255	@ 0xff
 8001bfc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001c02:	bf00      	nop
 8001c04:	4809      	ldr	r0, [pc, #36]	@ (8001c2c <SPI_RxByte+0x38>)
 8001c06:	f007 fbd7 	bl	80093b8 <HAL_SPI_GetState>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d1f9      	bne.n	8001c04 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001c10:	1dba      	adds	r2, r7, #6
 8001c12:	1df9      	adds	r1, r7, #7
 8001c14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <SPI_RxByte+0x38>)
 8001c1e:	f007 f9ac 	bl	8008f7a <HAL_SPI_TransmitReceive>

  return data;
 8001c22:	79bb      	ldrb	r3, [r7, #6]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000e5c 	.word	0x20000e5c

08001c30 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001c38:	f7ff ffdc 	bl	8001bf4 <SPI_RxByte>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	701a      	strb	r2, [r3, #0]
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <SD_ReadyWait+0x34>)
 8001c54:	2232      	movs	r2, #50	@ 0x32
 8001c56:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001c58:	f7ff ffcc 	bl	8001bf4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001c5c:	f7ff ffca 	bl	8001bf4 <SPI_RxByte>
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2bff      	cmp	r3, #255	@ 0xff
 8001c68:	d004      	beq.n	8001c74 <SD_ReadyWait+0x28>
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <SD_ReadyWait+0x34>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f3      	bne.n	8001c5c <SD_ReadyWait+0x10>

  return res;
 8001c74:	79fb      	ldrb	r3, [r7, #7]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200003b1 	.word	0x200003b1

08001c84 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001c8a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001c90:	f7ff ff8a 	bl	8001ba8 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e005      	b.n	8001ca6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001c9a:	20ff      	movs	r0, #255	@ 0xff
 8001c9c:	f7ff ff90 	bl	8001bc0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b09      	cmp	r3, #9
 8001caa:	ddf6      	ble.n	8001c9a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001cac:	f7ff ff70 	bl	8001b90 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001cb0:	2340      	movs	r3, #64	@ 0x40
 8001cb2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001cc4:	2395      	movs	r3, #149	@ 0x95
 8001cc6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e009      	b.n	8001ce2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001cce:	1d3a      	adds	r2, r7, #4
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff72 	bl	8001bc0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	ddf2      	ble.n	8001cce <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001ce8:	e002      	b.n	8001cf0 <SD_PowerOn+0x6c>
  {
    Count--;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001cf0:	f7ff ff80 	bl	8001bf4 <SPI_RxByte>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d002      	beq.n	8001d00 <SD_PowerOn+0x7c>
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f4      	bne.n	8001cea <SD_PowerOn+0x66>
  }

  DESELECT();
 8001d00:	f7ff ff52 	bl	8001ba8 <DESELECT>
  SPI_TxByte(0XFF);
 8001d04:	20ff      	movs	r0, #255	@ 0xff
 8001d06:	f7ff ff5b 	bl	8001bc0 <SPI_TxByte>

  PowerFlag = 1;
 8001d0a:	4b03      	ldr	r3, [pc, #12]	@ (8001d18 <SD_PowerOn+0x94>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200003b3 	.word	0x200003b3

08001d1c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001d20:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <SD_PowerOff+0x14>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	200003b3 	.word	0x200003b3

08001d34 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <SD_CheckPower+0x14>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	200003b3 	.word	0x200003b3

08001d4c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <SD_RxDataBlock+0x68>)
 8001d58:	220a      	movs	r2, #10
 8001d5a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001d5c:	f7ff ff4a 	bl	8001bf4 <SPI_RxByte>
 8001d60:	4603      	mov	r3, r0
 8001d62:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2bff      	cmp	r3, #255	@ 0xff
 8001d68:	d104      	bne.n	8001d74 <SD_RxDataBlock+0x28>
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <SD_RxDataBlock+0x68>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f3      	bne.n	8001d5c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d78:	d001      	beq.n	8001d7e <SD_RxDataBlock+0x32>
    return FALSE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e016      	b.n	8001dac <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff53 	bl	8001c30 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff4d 	bl	8001c30 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3b02      	subs	r3, #2
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ed      	bne.n	8001d7e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001da2:	f7ff ff27 	bl	8001bf4 <SPI_RxByte>
  SPI_RxByte();
 8001da6:	f7ff ff25 	bl	8001bf4 <SPI_RxByte>

  return TRUE;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200003b0 	.word	0x200003b0

08001db8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001dc8:	f7ff ff40 	bl	8001c4c <SD_ReadyWait>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2bff      	cmp	r3, #255	@ 0xff
 8001dd0:	d001      	beq.n	8001dd6 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e040      	b.n	8001e58 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fef1 	bl	8001bc0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	2bfd      	cmp	r3, #253	@ 0xfd
 8001de2:	d031      	beq.n	8001e48 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fee5 	bl	8001bc0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fede 	bl	8001bc0 <SPI_TxByte>
    } while (--wc);
 8001e04:	7bbb      	ldrb	r3, [r7, #14]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	73bb      	strb	r3, [r7, #14]
 8001e0a:	7bbb      	ldrb	r3, [r7, #14]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1eb      	bne.n	8001de8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001e10:	f7ff fef0 	bl	8001bf4 <SPI_RxByte>
    SPI_RxByte();
 8001e14:	f7ff feee 	bl	8001bf4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001e18:	e00b      	b.n	8001e32 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001e1a:	f7ff feeb 	bl	8001bf4 <SPI_RxByte>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d006      	beq.n	8001e3a <SD_TxDataBlock+0x82>
        break;

      i++;
 8001e2c:	7b7b      	ldrb	r3, [r7, #13]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001e32:	7b7b      	ldrb	r3, [r7, #13]
 8001e34:	2b40      	cmp	r3, #64	@ 0x40
 8001e36:	d9f0      	bls.n	8001e1a <SD_TxDataBlock+0x62>
 8001e38:	e000      	b.n	8001e3c <SD_TxDataBlock+0x84>
        break;
 8001e3a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001e3c:	bf00      	nop
 8001e3e:	f7ff fed9 	bl	8001bf4 <SPI_RxByte>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0fa      	beq.n	8001e3e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d101      	bne.n	8001e56 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001e6c:	f7ff feee 	bl	8001c4c <SD_ReadyWait>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2bff      	cmp	r3, #255	@ 0xff
 8001e74:	d001      	beq.n	8001e7a <SD_SendCmd+0x1a>
    return 0xFF;
 8001e76:	23ff      	movs	r3, #255	@ 0xff
 8001e78:	e040      	b.n	8001efc <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fe9f 	bl	8001bc0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	0e1b      	lsrs	r3, r3, #24
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fe99 	bl	8001bc0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fe93 	bl	8001bc0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fe8d 	bl	8001bc0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe88 	bl	8001bc0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2b40      	cmp	r3, #64	@ 0x40
 8001eb8:	d101      	bne.n	8001ebe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001eba:	2395      	movs	r3, #149	@ 0x95
 8001ebc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	2b48      	cmp	r3, #72	@ 0x48
 8001ec2:	d101      	bne.n	8001ec8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001ec4:	2387      	movs	r3, #135	@ 0x87
 8001ec6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fe78 	bl	8001bc0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	2b4c      	cmp	r3, #76	@ 0x4c
 8001ed4:	d101      	bne.n	8001eda <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001ed6:	f7ff fe8d 	bl	8001bf4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001eda:	230a      	movs	r3, #10
 8001edc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001ede:	f7ff fe89 	bl	8001bf4 <SPI_RxByte>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001ee6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da05      	bge.n	8001efa <SD_SendCmd+0x9a>
 8001eee:	7bbb      	ldrb	r3, [r7, #14]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	73bb      	strb	r3, [r7, #14]
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f1      	bne.n	8001ede <SD_SendCmd+0x7e>

  return res;
 8001efa:	7b7b      	ldrb	r3, [r7, #13]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0d5      	b.n	80020c4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001f18:	4b6c      	ldr	r3, [pc, #432]	@ (80020cc <SD_disk_initialize+0x1c8>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <SD_disk_initialize+0x2a>
    return Stat;
 8001f26:	4b69      	ldr	r3, [pc, #420]	@ (80020cc <SD_disk_initialize+0x1c8>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	e0ca      	b.n	80020c4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001f2e:	f7ff fea9 	bl	8001c84 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001f32:	f7ff fe2d 	bl	8001b90 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2040      	movs	r0, #64	@ 0x40
 8001f3e:	f7ff ff8f 	bl	8001e60 <SD_SendCmd>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	f040 80a5 	bne.w	8002094 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001f4a:	4b61      	ldr	r3, [pc, #388]	@ (80020d0 <SD_disk_initialize+0x1cc>)
 8001f4c:	2264      	movs	r2, #100	@ 0x64
 8001f4e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001f50:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001f54:	2048      	movs	r0, #72	@ 0x48
 8001f56:	f7ff ff83 	bl	8001e60 <SD_SendCmd>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d158      	bne.n	8002012 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e00c      	b.n	8001f80 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001f66:	7bfc      	ldrb	r4, [r7, #15]
 8001f68:	f7ff fe44 	bl	8001bf4 <SPI_RxByte>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f104 0310 	add.w	r3, r4, #16
 8001f74:	443b      	add	r3, r7
 8001f76:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d9ef      	bls.n	8001f66 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001f86:	7abb      	ldrb	r3, [r7, #10]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	f040 8083 	bne.w	8002094 <SD_disk_initialize+0x190>
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	2baa      	cmp	r3, #170	@ 0xaa
 8001f92:	d17f      	bne.n	8002094 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001f94:	2100      	movs	r1, #0
 8001f96:	2077      	movs	r0, #119	@ 0x77
 8001f98:	f7ff ff62 	bl	8001e60 <SD_SendCmd>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d807      	bhi.n	8001fb2 <SD_disk_initialize+0xae>
 8001fa2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001fa6:	2069      	movs	r0, #105	@ 0x69
 8001fa8:	f7ff ff5a 	bl	8001e60 <SD_SendCmd>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001fb2:	4b47      	ldr	r3, [pc, #284]	@ (80020d0 <SD_disk_initialize+0x1cc>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1eb      	bne.n	8001f94 <SD_disk_initialize+0x90>
 8001fbc:	e000      	b.n	8001fc0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001fbe:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001fc0:	4b43      	ldr	r3, [pc, #268]	@ (80020d0 <SD_disk_initialize+0x1cc>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d064      	beq.n	8002094 <SD_disk_initialize+0x190>
 8001fca:	2100      	movs	r1, #0
 8001fcc:	207a      	movs	r0, #122	@ 0x7a
 8001fce:	f7ff ff47 	bl	8001e60 <SD_SendCmd>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d15d      	bne.n	8002094 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e00c      	b.n	8001ff8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001fde:	7bfc      	ldrb	r4, [r7, #15]
 8001fe0:	f7ff fe08 	bl	8001bf4 <SPI_RxByte>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f104 0310 	add.w	r3, r4, #16
 8001fec:	443b      	add	r3, r7
 8001fee:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d9ef      	bls.n	8001fde <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001ffe:	7a3b      	ldrb	r3, [r7, #8]
 8002000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <SD_disk_initialize+0x108>
 8002008:	2306      	movs	r3, #6
 800200a:	e000      	b.n	800200e <SD_disk_initialize+0x10a>
 800200c:	2302      	movs	r3, #2
 800200e:	73bb      	strb	r3, [r7, #14]
 8002010:	e040      	b.n	8002094 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002012:	2100      	movs	r1, #0
 8002014:	2077      	movs	r0, #119	@ 0x77
 8002016:	f7ff ff23 	bl	8001e60 <SD_SendCmd>
 800201a:	4603      	mov	r3, r0
 800201c:	2b01      	cmp	r3, #1
 800201e:	d808      	bhi.n	8002032 <SD_disk_initialize+0x12e>
 8002020:	2100      	movs	r1, #0
 8002022:	2069      	movs	r0, #105	@ 0x69
 8002024:	f7ff ff1c 	bl	8001e60 <SD_SendCmd>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d801      	bhi.n	8002032 <SD_disk_initialize+0x12e>
 800202e:	2302      	movs	r3, #2
 8002030:	e000      	b.n	8002034 <SD_disk_initialize+0x130>
 8002032:	2301      	movs	r3, #1
 8002034:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8002036:	7bbb      	ldrb	r3, [r7, #14]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d10e      	bne.n	800205a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800203c:	2100      	movs	r1, #0
 800203e:	2077      	movs	r0, #119	@ 0x77
 8002040:	f7ff ff0e 	bl	8001e60 <SD_SendCmd>
 8002044:	4603      	mov	r3, r0
 8002046:	2b01      	cmp	r3, #1
 8002048:	d80e      	bhi.n	8002068 <SD_disk_initialize+0x164>
 800204a:	2100      	movs	r1, #0
 800204c:	2069      	movs	r0, #105	@ 0x69
 800204e:	f7ff ff07 	bl	8001e60 <SD_SendCmd>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002058:	e00d      	b.n	8002076 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800205a:	2100      	movs	r1, #0
 800205c:	2041      	movs	r0, #65	@ 0x41
 800205e:	f7ff feff 	bl	8001e60 <SD_SendCmd>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <SD_disk_initialize+0x1cc>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e1      	bne.n	8002036 <SD_disk_initialize+0x132>
 8002072:	e000      	b.n	8002076 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002074:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <SD_disk_initialize+0x1cc>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <SD_disk_initialize+0x18c>
 8002080:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002084:	2050      	movs	r0, #80	@ 0x50
 8002086:	f7ff feeb 	bl	8001e60 <SD_SendCmd>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8002094:	4a0f      	ldr	r2, [pc, #60]	@ (80020d4 <SD_disk_initialize+0x1d0>)
 8002096:	7bbb      	ldrb	r3, [r7, #14]
 8002098:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800209a:	f7ff fd85 	bl	8001ba8 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800209e:	f7ff fda9 	bl	8001bf4 <SPI_RxByte>

  if (type)
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80020a8:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <SD_disk_initialize+0x1c8>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <SD_disk_initialize+0x1c8>)
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e001      	b.n	80020be <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80020ba:	f7ff fe2f 	bl	8001d1c <SD_PowerOff>
  }

  return Stat;
 80020be:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <SD_disk_initialize+0x1c8>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b2db      	uxtb	r3, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd90      	pop	{r4, r7, pc}
 80020cc:	20000008 	.word	0x20000008
 80020d0:	200003b0 	.word	0x200003b0
 80020d4:	200003b2 	.word	0x200003b2

080020d8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <SD_disk_status+0x14>
    return STA_NOINIT;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e002      	b.n	80020f2 <SD_disk_status+0x1a>

  return Stat;
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <SD_disk_status+0x28>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008

08002104 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <SD_disk_read+0x1c>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <SD_disk_read+0x20>
    return RES_PARERR;
 8002120:	2304      	movs	r3, #4
 8002122:	e051      	b.n	80021c8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002124:	4b2a      	ldr	r3, [pc, #168]	@ (80021d0 <SD_disk_read+0xcc>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002132:	2303      	movs	r3, #3
 8002134:	e048      	b.n	80021c8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8002136:	4b27      	ldr	r3, [pc, #156]	@ (80021d4 <SD_disk_read+0xd0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	025b      	lsls	r3, r3, #9
 8002146:	607b      	str	r3, [r7, #4]

  SELECT();
 8002148:	f7ff fd22 	bl	8001b90 <SELECT>

  if (count == 1)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d111      	bne.n	8002176 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	2051      	movs	r0, #81	@ 0x51
 8002156:	f7ff fe83 	bl	8001e60 <SD_SendCmd>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d129      	bne.n	80021b4 <SD_disk_read+0xb0>
 8002160:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	f7ff fdf1 	bl	8001d4c <SD_RxDataBlock>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d021      	beq.n	80021b4 <SD_disk_read+0xb0>
      count = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	e01e      	b.n	80021b4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	2052      	movs	r0, #82	@ 0x52
 800217a:	f7ff fe71 	bl	8001e60 <SD_SendCmd>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d117      	bne.n	80021b4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002184:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002188:	68b8      	ldr	r0, [r7, #8]
 800218a:	f7ff fddf 	bl	8001d4c <SD_RxDataBlock>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <SD_disk_read+0xa6>
          break;

        buff += 512;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800219a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ed      	bne.n	8002184 <SD_disk_read+0x80>
 80021a8:	e000      	b.n	80021ac <SD_disk_read+0xa8>
          break;
 80021aa:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80021ac:	2100      	movs	r1, #0
 80021ae:	204c      	movs	r0, #76	@ 0x4c
 80021b0:	f7ff fe56 	bl	8001e60 <SD_SendCmd>
    }
  }

  DESELECT();
 80021b4:	f7ff fcf8 	bl	8001ba8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80021b8:	f7ff fd1c 	bl	8001bf4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000008 	.word	0x20000008
 80021d4:	200003b2 	.word	0x200003b2

080021d8 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <SD_disk_write+0x1c>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <SD_disk_write+0x20>
    return RES_PARERR;
 80021f4:	2304      	movs	r3, #4
 80021f6:	e06b      	b.n	80022d0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80021f8:	4b37      	ldr	r3, [pc, #220]	@ (80022d8 <SD_disk_write+0x100>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002206:	2303      	movs	r3, #3
 8002208:	e062      	b.n	80022d0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800220a:	4b33      	ldr	r3, [pc, #204]	@ (80022d8 <SD_disk_write+0x100>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <SD_disk_write+0x44>
    return RES_WRPRT;
 8002218:	2302      	movs	r3, #2
 800221a:	e059      	b.n	80022d0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800221c:	4b2f      	ldr	r3, [pc, #188]	@ (80022dc <SD_disk_write+0x104>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	607b      	str	r3, [r7, #4]

  SELECT();
 800222e:	f7ff fcaf 	bl	8001b90 <SELECT>

  if (count == 1)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d110      	bne.n	800225a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	2058      	movs	r0, #88	@ 0x58
 800223c:	f7ff fe10 	bl	8001e60 <SD_SendCmd>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d13a      	bne.n	80022bc <SD_disk_write+0xe4>
 8002246:	21fe      	movs	r1, #254	@ 0xfe
 8002248:	68b8      	ldr	r0, [r7, #8]
 800224a:	f7ff fdb5 	bl	8001db8 <SD_TxDataBlock>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d033      	beq.n	80022bc <SD_disk_write+0xe4>
      count = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	e030      	b.n	80022bc <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800225a:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <SD_disk_write+0x104>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002266:	2100      	movs	r1, #0
 8002268:	2077      	movs	r0, #119	@ 0x77
 800226a:	f7ff fdf9 	bl	8001e60 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800226e:	6839      	ldr	r1, [r7, #0]
 8002270:	2057      	movs	r0, #87	@ 0x57
 8002272:	f7ff fdf5 	bl	8001e60 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	2059      	movs	r0, #89	@ 0x59
 800227a:	f7ff fdf1 	bl	8001e60 <SD_SendCmd>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11b      	bne.n	80022bc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002284:	21fc      	movs	r1, #252	@ 0xfc
 8002286:	68b8      	ldr	r0, [r7, #8]
 8002288:	f7ff fd96 	bl	8001db8 <SD_TxDataBlock>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002298:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3b01      	subs	r3, #1
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ee      	bne.n	8002284 <SD_disk_write+0xac>
 80022a6:	e000      	b.n	80022aa <SD_disk_write+0xd2>
          break;
 80022a8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80022aa:	21fd      	movs	r1, #253	@ 0xfd
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff fd83 	bl	8001db8 <SD_TxDataBlock>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <SD_disk_write+0xe4>
      {
        count = 1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80022bc:	f7ff fc74 	bl	8001ba8 <DESELECT>
  SPI_RxByte();
 80022c0:	f7ff fc98 	bl	8001bf4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000008 	.word	0x20000008
 80022dc:	200003b2 	.word	0x200003b2

080022e0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b08b      	sub	sp, #44	@ 0x2c
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	603a      	str	r2, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
 80022ec:	460b      	mov	r3, r1
 80022ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80022fa:	2304      	movs	r3, #4
 80022fc:	e119      	b.n	8002532 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d129      	bne.n	800235e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d017      	beq.n	8002342 <SD_disk_ioctl+0x62>
 8002312:	2b02      	cmp	r3, #2
 8002314:	dc1f      	bgt.n	8002356 <SD_disk_ioctl+0x76>
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <SD_disk_ioctl+0x40>
 800231a:	2b01      	cmp	r3, #1
 800231c:	d00b      	beq.n	8002336 <SD_disk_ioctl+0x56>
 800231e:	e01a      	b.n	8002356 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002320:	f7ff fd08 	bl	8001d34 <SD_CheckPower>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800232a:	f7ff fcf7 	bl	8001d1c <SD_PowerOff>
      res = RES_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002334:	e0fb      	b.n	800252e <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8002336:	f7ff fca5 	bl	8001c84 <SD_PowerOn>
      res = RES_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002340:	e0f5      	b.n	800252e <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	1c5c      	adds	r4, r3, #1
 8002346:	f7ff fcf5 	bl	8001d34 <SD_CheckPower>
 800234a:	4603      	mov	r3, r0
 800234c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002354:	e0eb      	b.n	800252e <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8002356:	2304      	movs	r3, #4
 8002358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800235c:	e0e7      	b.n	800252e <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800235e:	4b77      	ldr	r3, [pc, #476]	@ (800253c <SD_disk_ioctl+0x25c>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800236c:	2303      	movs	r3, #3
 800236e:	e0e0      	b.n	8002532 <SD_disk_ioctl+0x252>

    SELECT();
 8002370:	f7ff fc0e 	bl	8001b90 <SELECT>

    switch (ctrl)
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	2b0d      	cmp	r3, #13
 8002378:	f200 80ca 	bhi.w	8002510 <SD_disk_ioctl+0x230>
 800237c:	a201      	add	r2, pc, #4	@ (adr r2, 8002384 <SD_disk_ioctl+0xa4>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	0800247b 	.word	0x0800247b
 8002388:	080023bd 	.word	0x080023bd
 800238c:	0800246b 	.word	0x0800246b
 8002390:	08002511 	.word	0x08002511
 8002394:	08002511 	.word	0x08002511
 8002398:	08002511 	.word	0x08002511
 800239c:	08002511 	.word	0x08002511
 80023a0:	08002511 	.word	0x08002511
 80023a4:	08002511 	.word	0x08002511
 80023a8:	08002511 	.word	0x08002511
 80023ac:	08002511 	.word	0x08002511
 80023b0:	0800248d 	.word	0x0800248d
 80023b4:	080024b1 	.word	0x080024b1
 80023b8:	080024d5 	.word	0x080024d5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80023bc:	2100      	movs	r1, #0
 80023be:	2049      	movs	r0, #73	@ 0x49
 80023c0:	f7ff fd4e 	bl	8001e60 <SD_SendCmd>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 80a6 	bne.w	8002518 <SD_disk_ioctl+0x238>
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2110      	movs	r1, #16
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fcba 	bl	8001d4c <SD_RxDataBlock>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 809c 	beq.w	8002518 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 80023e0:	7b3b      	ldrb	r3, [r7, #12]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10d      	bne.n	8002406 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80023ea:	7d7b      	ldrb	r3, [r7, #21]
 80023ec:	461a      	mov	r2, r3
 80023ee:	7d3b      	ldrb	r3, [r7, #20]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80023fc:	8bfb      	ldrh	r3, [r7, #30]
 80023fe:	029a      	lsls	r2, r3, #10
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e02d      	b.n	8002462 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002406:	7c7b      	ldrb	r3, [r7, #17]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	b2da      	uxtb	r2, r3
 800240e:	7dbb      	ldrb	r3, [r7, #22]
 8002410:	09db      	lsrs	r3, r3, #7
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4413      	add	r3, r2
 8002416:	b2da      	uxtb	r2, r3
 8002418:	7d7b      	ldrb	r3, [r7, #21]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 0306 	and.w	r3, r3, #6
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4413      	add	r3, r2
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3302      	adds	r3, #2
 800242a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800242e:	7d3b      	ldrb	r3, [r7, #20]
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	b29b      	uxth	r3, r3
 800243c:	4413      	add	r3, r2
 800243e:	b29a      	uxth	r2, r3
 8002440:	7cbb      	ldrb	r3, [r7, #18]
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	b29b      	uxth	r3, r3
 8002446:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800244a:	b29b      	uxth	r3, r3
 800244c:	4413      	add	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002454:	8bfa      	ldrh	r2, [r7, #30]
 8002456:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800245a:	3b09      	subs	r3, #9
 800245c:	409a      	lsls	r2, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8002468:	e056      	b.n	8002518 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002470:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002478:	e055      	b.n	8002526 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800247a:	f7ff fbe7 	bl	8001c4c <SD_ReadyWait>
 800247e:	4603      	mov	r3, r0
 8002480:	2bff      	cmp	r3, #255	@ 0xff
 8002482:	d14b      	bne.n	800251c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800248a:	e047      	b.n	800251c <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800248c:	2100      	movs	r1, #0
 800248e:	2049      	movs	r0, #73	@ 0x49
 8002490:	f7ff fce6 	bl	8001e60 <SD_SendCmd>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d142      	bne.n	8002520 <SD_disk_ioctl+0x240>
 800249a:	2110      	movs	r1, #16
 800249c:	6a38      	ldr	r0, [r7, #32]
 800249e:	f7ff fc55 	bl	8001d4c <SD_RxDataBlock>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d03b      	beq.n	8002520 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80024ae:	e037      	b.n	8002520 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80024b0:	2100      	movs	r1, #0
 80024b2:	204a      	movs	r0, #74	@ 0x4a
 80024b4:	f7ff fcd4 	bl	8001e60 <SD_SendCmd>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d132      	bne.n	8002524 <SD_disk_ioctl+0x244>
 80024be:	2110      	movs	r1, #16
 80024c0:	6a38      	ldr	r0, [r7, #32]
 80024c2:	f7ff fc43 	bl	8001d4c <SD_RxDataBlock>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02b      	beq.n	8002524 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80024d2:	e027      	b.n	8002524 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80024d4:	2100      	movs	r1, #0
 80024d6:	207a      	movs	r0, #122	@ 0x7a
 80024d8:	f7ff fcc2 	bl	8001e60 <SD_SendCmd>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80024e8:	e00b      	b.n	8002502 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80024ea:	6a3c      	ldr	r4, [r7, #32]
 80024ec:	1c63      	adds	r3, r4, #1
 80024ee:	623b      	str	r3, [r7, #32]
 80024f0:	f7ff fb80 	bl	8001bf4 <SPI_RxByte>
 80024f4:	4603      	mov	r3, r0
 80024f6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80024f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024fc:	3301      	adds	r3, #1
 80024fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002502:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002506:	2b03      	cmp	r3, #3
 8002508:	d9ef      	bls.n	80024ea <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8002510:	2304      	movs	r3, #4
 8002512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002516:	e006      	b.n	8002526 <SD_disk_ioctl+0x246>
      break;
 8002518:	bf00      	nop
 800251a:	e004      	b.n	8002526 <SD_disk_ioctl+0x246>
      break;
 800251c:	bf00      	nop
 800251e:	e002      	b.n	8002526 <SD_disk_ioctl+0x246>
      break;
 8002520:	bf00      	nop
 8002522:	e000      	b.n	8002526 <SD_disk_ioctl+0x246>
      break;
 8002524:	bf00      	nop
    }

    DESELECT();
 8002526:	f7ff fb3f 	bl	8001ba8 <DESELECT>
    SPI_RxByte();
 800252a:	f7ff fb63 	bl	8001bf4 <SPI_RxByte>
  }

  return res;
 800252e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002532:	4618      	mov	r0, r3
 8002534:	372c      	adds	r7, #44	@ 0x2c
 8002536:	46bd      	mov	sp, r7
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	bf00      	nop
 800253c:	20000008 	.word	0x20000008

08002540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	@ 0x28
 8002544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002556:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <MX_GPIO_Init+0x134>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255a:	4a46      	ldr	r2, [pc, #280]	@ (8002674 <MX_GPIO_Init+0x134>)
 800255c:	f043 0320 	orr.w	r3, r3, #32
 8002560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002562:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <MX_GPIO_Init+0x134>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	4b41      	ldr	r3, [pc, #260]	@ (8002674 <MX_GPIO_Init+0x134>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002572:	4a40      	ldr	r2, [pc, #256]	@ (8002674 <MX_GPIO_Init+0x134>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257a:	4b3e      	ldr	r3, [pc, #248]	@ (8002674 <MX_GPIO_Init+0x134>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <MX_GPIO_Init+0x134>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	4a3a      	ldr	r2, [pc, #232]	@ (8002674 <MX_GPIO_Init+0x134>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002592:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <MX_GPIO_Init+0x134>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	4b35      	ldr	r3, [pc, #212]	@ (8002674 <MX_GPIO_Init+0x134>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	4a34      	ldr	r2, [pc, #208]	@ (8002674 <MX_GPIO_Init+0x134>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025aa:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <MX_GPIO_Init+0x134>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2110      	movs	r1, #16
 80025ba:	482f      	ldr	r0, [pc, #188]	@ (8002678 <MX_GPIO_Init+0x138>)
 80025bc:	f004 fb98 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80025c6:	482d      	ldr	r0, [pc, #180]	@ (800267c <MX_GPIO_Init+0x13c>)
 80025c8:	f004 fb92 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025cc:	2301      	movs	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e4:	f004 fa02 	bl	80069ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025e8:	2310      	movs	r3, #16
 80025ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	481e      	ldr	r0, [pc, #120]	@ (8002678 <MX_GPIO_Init+0x138>)
 8002600:	f004 f9f4 	bl	80069ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002604:	2306      	movs	r3, #6
 8002606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002608:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4818      	ldr	r0, [pc, #96]	@ (800267c <MX_GPIO_Init+0x13c>)
 800261a:	f004 f9e7 	bl	80069ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800261e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002624:	2301      	movs	r3, #1
 8002626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	4811      	ldr	r0, [pc, #68]	@ (800267c <MX_GPIO_Init+0x13c>)
 8002638:	f004 f9d8 	bl	80069ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	2006      	movs	r0, #6
 8002642:	f003 fe60 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002646:	2006      	movs	r0, #6
 8002648:	f003 fe77 	bl	800633a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2100      	movs	r1, #0
 8002650:	2007      	movs	r0, #7
 8002652:	f003 fe58 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002656:	2007      	movs	r0, #7
 8002658:	f003 fe6f 	bl	800633a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	2008      	movs	r0, #8
 8002662:	f003 fe50 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002666:	2008      	movs	r0, #8
 8002668:	f003 fe67 	bl	800633a <HAL_NVIC_EnableIRQ>

}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	@ 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	48000800 	.word	0x48000800
 800267c:	48000400 	.word	0x48000400

08002680 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002684:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <MX_I2C1_Init+0x74>)
 8002686:	4a1c      	ldr	r2, [pc, #112]	@ (80026f8 <MX_I2C1_Init+0x78>)
 8002688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800268a:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <MX_I2C1_Init+0x74>)
 800268c:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <MX_I2C1_Init+0x7c>)
 800268e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002690:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <MX_I2C1_Init+0x74>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002696:	4b17      	ldr	r3, [pc, #92]	@ (80026f4 <MX_I2C1_Init+0x74>)
 8002698:	2201      	movs	r2, #1
 800269a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800269c:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <MX_I2C1_Init+0x74>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026a2:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <MX_I2C1_Init+0x74>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026a8:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <MX_I2C1_Init+0x74>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ae:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <MX_I2C1_Init+0x74>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026b4:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <MX_I2C1_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ba:	480e      	ldr	r0, [pc, #56]	@ (80026f4 <MX_I2C1_Init+0x74>)
 80026bc:	f004 fb53 	bl	8006d66 <HAL_I2C_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026c6:	f000 fd57 	bl	8003178 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026ca:	2100      	movs	r1, #0
 80026cc:	4809      	ldr	r0, [pc, #36]	@ (80026f4 <MX_I2C1_Init+0x74>)
 80026ce:	f005 f8d5 	bl	800787c <HAL_I2CEx_ConfigAnalogFilter>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026d8:	f000 fd4e 	bl	8003178 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026dc:	2100      	movs	r1, #0
 80026de:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <MX_I2C1_Init+0x74>)
 80026e0:	f005 f917 	bl	8007912 <HAL_I2CEx_ConfigDigitalFilter>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026ea:	f000 fd45 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200003b4 	.word	0x200003b4
 80026f8:	40005400 	.word	0x40005400
 80026fc:	10b17db5 	.word	0x10b17db5

08002700 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <MX_I2C3_Init+0x74>)
 8002706:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <MX_I2C3_Init+0x78>)
 8002708:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 800270a:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <MX_I2C3_Init+0x74>)
 800270c:	4a1b      	ldr	r2, [pc, #108]	@ (800277c <MX_I2C3_Init+0x7c>)
 800270e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002710:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <MX_I2C3_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002716:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <MX_I2C3_Init+0x74>)
 8002718:	2201      	movs	r2, #1
 800271a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800271c:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <MX_I2C3_Init+0x74>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002722:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <MX_I2C3_Init+0x74>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002728:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <MX_I2C3_Init+0x74>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <MX_I2C3_Init+0x74>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002734:	4b0f      	ldr	r3, [pc, #60]	@ (8002774 <MX_I2C3_Init+0x74>)
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800273a:	480e      	ldr	r0, [pc, #56]	@ (8002774 <MX_I2C3_Init+0x74>)
 800273c:	f004 fb13 	bl	8006d66 <HAL_I2C_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002746:	f000 fd17 	bl	8003178 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800274a:	2100      	movs	r1, #0
 800274c:	4809      	ldr	r0, [pc, #36]	@ (8002774 <MX_I2C3_Init+0x74>)
 800274e:	f005 f895 	bl	800787c <HAL_I2CEx_ConfigAnalogFilter>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002758:	f000 fd0e 	bl	8003178 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800275c:	2100      	movs	r1, #0
 800275e:	4805      	ldr	r0, [pc, #20]	@ (8002774 <MX_I2C3_Init+0x74>)
 8002760:	f005 f8d7 	bl	8007912 <HAL_I2CEx_ConfigDigitalFilter>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800276a:	f000 fd05 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000408 	.word	0x20000408
 8002778:	40007800 	.word	0x40007800
 800277c:	10b17db5 	.word	0x10b17db5

08002780 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b09e      	sub	sp, #120	@ 0x78
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002798:	f107 0320 	add.w	r3, r7, #32
 800279c:	2244      	movs	r2, #68	@ 0x44
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00e fc2d 	bl	8011000 <memset>
  if(i2cHandle->Instance==I2C1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5c      	ldr	r2, [pc, #368]	@ (800291c <HAL_I2C_MspInit+0x19c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d155      	bne.n	800285c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027b0:	2340      	movs	r3, #64	@ 0x40
 80027b2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027b8:	f107 0320 	add.w	r3, r7, #32
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 ffcb 	bl	8008758 <HAL_RCCEx_PeriphCLKConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80027c8:	f000 fcd6 	bl	8003178 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027cc:	4b54      	ldr	r3, [pc, #336]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 80027ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d0:	4a53      	ldr	r2, [pc, #332]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027d8:	4b51      	ldr	r3, [pc, #324]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 80027da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 80027e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 80027f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002800:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002802:	2312      	movs	r3, #18
 8002804:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800280e:	2304      	movs	r3, #4
 8002810:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800281c:	f004 f8e6 	bl	80069ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002820:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002824:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002826:	2312      	movs	r3, #18
 8002828:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002832:	2304      	movs	r3, #4
 8002834:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002836:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800283a:	4619      	mov	r1, r3
 800283c:	4839      	ldr	r0, [pc, #228]	@ (8002924 <HAL_I2C_MspInit+0x1a4>)
 800283e:	f004 f8d5 	bl	80069ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002842:	4b37      	ldr	r3, [pc, #220]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	4a36      	ldr	r2, [pc, #216]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 8002848:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800284c:	6593      	str	r3, [r2, #88]	@ 0x58
 800284e:	4b34      	ldr	r3, [pc, #208]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800285a:	e05a      	b.n	8002912 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a31      	ldr	r2, [pc, #196]	@ (8002928 <HAL_I2C_MspInit+0x1a8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d155      	bne.n	8002912 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800286a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800286c:	2300      	movs	r3, #0
 800286e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002870:	f107 0320 	add.w	r3, r7, #32
 8002874:	4618      	mov	r0, r3
 8002876:	f005 ff6f 	bl	8008758 <HAL_RCCEx_PeriphCLKConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8002880:	f000 fc7a 	bl	8003178 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4b26      	ldr	r3, [pc, #152]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 8002886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002888:	4a25      	ldr	r2, [pc, #148]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002890:	4b23      	ldr	r3, [pc, #140]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 8002892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289c:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ba:	2312      	movs	r3, #18
 80028bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80028c6:	2302      	movs	r3, #2
 80028c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028d4:	f004 f88a 	bl	80069ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028de:	2312      	movs	r3, #18
 80028e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80028ea:	2308      	movs	r3, #8
 80028ec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028f2:	4619      	mov	r1, r3
 80028f4:	480d      	ldr	r0, [pc, #52]	@ (800292c <HAL_I2C_MspInit+0x1ac>)
 80028f6:	f004 f879 	bl	80069ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	4a08      	ldr	r2, [pc, #32]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 8002900:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002904:	6593      	str	r3, [r2, #88]	@ 0x58
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_I2C_MspInit+0x1a0>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
}
 8002912:	bf00      	nop
 8002914:	3778      	adds	r7, #120	@ 0x78
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40005400 	.word	0x40005400
 8002920:	40021000 	.word	0x40021000
 8002924:	48000400 	.word	0x48000400
 8002928:	40007800 	.word	0x40007800
 800292c:	48000800 	.word	0x48000800

08002930 <LED_Init>:


extern LEDDATARGB LEDDATA[LED_NUM];
extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8002936:	480d      	ldr	r0, [pc, #52]	@ (800296c <LED_Init+0x3c>)
 8002938:	f006 ff72 	bl	8009820 <HAL_TIM_PWM_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8002940:	2300      	movs	r3, #0
 8002942:	80fb      	strh	r3, [r7, #6]
 8002944:	e006      	b.n	8002954 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4a09      	ldr	r2, [pc, #36]	@ (8002970 <LED_Init+0x40>)
 800294a:	2100      	movs	r1, #0
 800294c:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	3301      	adds	r3, #1
 8002952:	80fb      	strh	r3, [r7, #6]
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	2bf9      	cmp	r3, #249	@ 0xf9
 8002958:	d9f5      	bls.n	8002946 <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <LED_Init+0x44>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8002960:	797b      	ldrb	r3, [r7, #5]




}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000ed8 	.word	0x20000ed8
 8002970:	20000d24 	.word	0x20000d24
 8002974:	20000e1e 	.word	0x20000e1e

08002978 <LED_Setcolour>:



void LED_Setcolour(uint8_t index, uint8_t r, uint8_t g, uint8_t b){
 8002978:	b490      	push	{r4, r7}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	4604      	mov	r4, r0
 8002980:	4608      	mov	r0, r1
 8002982:	4611      	mov	r1, r2
 8002984:	461a      	mov	r2, r3
 8002986:	4623      	mov	r3, r4
 8002988:	71fb      	strb	r3, [r7, #7]
 800298a:	4603      	mov	r3, r0
 800298c:	71bb      	strb	r3, [r7, #6]
 800298e:	460b      	mov	r3, r1
 8002990:	717b      	strb	r3, [r7, #5]
 8002992:	4613      	mov	r3, r2
 8002994:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8002996:	2300      	movs	r3, #0
 8002998:	81fb      	strh	r3, [r7, #14]

	LEDDATA[index].COLOUR.b=b;
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a1c <LED_Setcolour+0xa4>)
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	793a      	ldrb	r2, [r7, #4]
 80029a4:	709a      	strb	r2, [r3, #2]
	LEDDATA[index].COLOUR.r=r;
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <LED_Setcolour+0xa4>)
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	79ba      	ldrb	r2, [r7, #6]
 80029b0:	705a      	strb	r2, [r3, #1]
	LEDDATA[index].COLOUR.g=g;
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4919      	ldr	r1, [pc, #100]	@ (8002a1c <LED_Setcolour+0xa4>)
 80029b6:	797a      	ldrb	r2, [r7, #5]
 80029b8:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]



	for(uint8_t i=0; i<LED_NUM;i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	737b      	strb	r3, [r7, #13]
 80029c0:	e022      	b.n	8002a08 <LED_Setcolour+0x90>
		for(uint8_t j=0; j<BIT_PER_LED;j++){
 80029c2:	2300      	movs	r3, #0
 80029c4:	733b      	strb	r3, [r7, #12]
 80029c6:	e019      	b.n	80029fc <LED_Setcolour+0x84>
			if((LEDDATA[i].data>>j)&0x01){
 80029c8:	7b7b      	ldrb	r3, [r7, #13]
 80029ca:	4a14      	ldr	r2, [pc, #80]	@ (8002a1c <LED_Setcolour+0xa4>)
 80029cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029d0:	7b3b      	ldrb	r3, [r7, #12]
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <LED_Setcolour+0x70>
				LEDDMABUF[dmabufindex]=HI_VAL;
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002a20 <LED_Setcolour+0xa8>)
 80029e2:	213a      	movs	r1, #58	@ 0x3a
 80029e4:	54d1      	strb	r1, [r2, r3]
 80029e6:	e003      	b.n	80029f0 <LED_Setcolour+0x78>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 80029e8:	89fb      	ldrh	r3, [r7, #14]
 80029ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002a20 <LED_Setcolour+0xa8>)
 80029ec:	2113      	movs	r1, #19
 80029ee:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 80029f0:	89fb      	ldrh	r3, [r7, #14]
 80029f2:	3301      	adds	r3, #1
 80029f4:	81fb      	strh	r3, [r7, #14]
		for(uint8_t j=0; j<BIT_PER_LED;j++){
 80029f6:	7b3b      	ldrb	r3, [r7, #12]
 80029f8:	3301      	adds	r3, #1
 80029fa:	733b      	strb	r3, [r7, #12]
 80029fc:	7b3b      	ldrb	r3, [r7, #12]
 80029fe:	2b17      	cmp	r3, #23
 8002a00:	d9e2      	bls.n	80029c8 <LED_Setcolour+0x50>
	for(uint8_t i=0; i<LED_NUM;i++){
 8002a02:	7b7b      	ldrb	r3, [r7, #13]
 8002a04:	3301      	adds	r3, #1
 8002a06:	737b      	strb	r3, [r7, #13]
 8002a08:	7b7b      	ldrb	r3, [r7, #13]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d9d9      	bls.n	80029c2 <LED_Setcolour+0x4a>


		}
	}

}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc90      	pop	{r4, r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000d1c 	.word	0x20000d1c
 8002a20:	20000d24 	.word	0x20000d24

08002a24 <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8002a2a:	23fa      	movs	r3, #250	@ 0xfa
 8002a2c:	4a06      	ldr	r2, [pc, #24]	@ (8002a48 <LED_Update+0x24>)
 8002a2e:	210c      	movs	r1, #12
 8002a30:	4806      	ldr	r0, [pc, #24]	@ (8002a4c <LED_Update+0x28>)
 8002a32:	f007 f84d 	bl	8009ad0 <HAL_TIM_PWM_Start_DMA>
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]

	if(halStatus=HAL_OK){
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	71fb      	strb	r3, [r7, #7]
		DMA_COMPLETE_FLAG=0;
	}


	return halStatus;
 8002a3e:	79fb      	ldrb	r3, [r7, #7]

}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000d24 	.word	0x20000d24
 8002a4c:	20000ed8 	.word	0x20000ed8

08002a50 <LED_Callback>:



void LED_Callback(){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8002a54:	210c      	movs	r1, #12
 8002a56:	4804      	ldr	r0, [pc, #16]	@ (8002a68 <LED_Callback+0x18>)
 8002a58:	f007 fa52 	bl	8009f00 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <LED_Callback+0x1c>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]


}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000ed8 	.word	0x20000ed8
 8002a6c:	20000e1e 	.word	0x20000e1e

08002a70 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8002a78:	f7ff ffea 	bl	8002a50 <LED_Callback>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	b092      	sub	sp, #72	@ 0x48
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a8a:	f002 f890 	bl	8004bae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a8e:	f000 f95f 	bl	8002d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a92:	f7ff fd55 	bl	8002540 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a96:	f7ff f829 	bl	8001aec <MX_DMA_Init>
  MX_SPI1_Init();
 8002a9a:	f000 ff3b 	bl	8003914 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8002a9e:	f002 f801 	bl	8004aa4 <MX_USB_PCD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002aa2:	f00a fab1 	bl	800d008 <MX_FATFS_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <main+0x2c>
    Error_Handler();
 8002aac:	f000 fb64 	bl	8003178 <Error_Handler>
  }
  MX_I2C3_Init();
 8002ab0:	f7ff fe26 	bl	8002700 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002ab4:	f001 fd66 	bl	8004584 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8002ab8:	f7fe fc82 	bl	80013c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002abc:	f001 fdac 	bl	8004618 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002ac0:	f001 fb86 	bl	80041d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ac4:	f001 fbfc 	bl	80042c0 <MX_TIM4_Init>
  MX_ADC2_Init();
 8002ac8:	f7fe fd24 	bl	8001514 <MX_ADC2_Init>
  MX_I2C1_Init();
 8002acc:	f7ff fdd8 	bl	8002680 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002ad0:	f001 fb26 	bl	8004120 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 5);
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	497f      	ldr	r1, [pc, #508]	@ (8002cd4 <main+0x250>)
 8002ad8:	487f      	ldr	r0, [pc, #508]	@ (8002cd8 <main+0x254>)
 8002ada:	f002 fc9d 	bl	8005418 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 8002ade:	4b7f      	ldr	r3, [pc, #508]	@ (8002cdc <main+0x258>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	487e      	ldr	r0, [pc, #504]	@ (8002ce0 <main+0x25c>)
 8002ae6:	f002 fc97 	bl	8005418 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim4);
 8002aea:	487e      	ldr	r0, [pc, #504]	@ (8002ce4 <main+0x260>)
 8002aec:	f006 fe2e 	bl	800974c <HAL_TIM_Base_Start_IT>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,1520);
 8002af0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ce8 <main+0x264>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8002af8:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002afa:	2100      	movs	r1, #0
 8002afc:	487a      	ldr	r0, [pc, #488]	@ (8002ce8 <main+0x264>)
 8002afe:	f006 fee7 	bl	80098d0 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB,PIN_ENABLE,GPIO_PIN_SET);
 8002b02:	2201      	movs	r2, #1
 8002b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b08:	4878      	ldr	r0, [pc, #480]	@ (8002cec <main+0x268>)
 8002b0a:	f004 f8f1 	bl	8006cf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,LED_ROUGE,GPIO_PIN_RESET);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b14:	4875      	ldr	r0, [pc, #468]	@ (8002cec <main+0x268>)
 8002b16:	f004 f8eb 	bl	8006cf0 <HAL_GPIO_WritePin>



  HAL_Delay(100);
 8002b1a:	2064      	movs	r0, #100	@ 0x64
 8002b1c:	f002 f8b8 	bl	8004c90 <HAL_Delay>
  HAL_UART_Abort(&huart1);
 8002b20:	4873      	ldr	r0, [pc, #460]	@ (8002cf0 <main+0x26c>)
 8002b22:	f008 fd97 	bl	800b654 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 8002b26:	2240      	movs	r2, #64	@ 0x40
 8002b28:	4972      	ldr	r1, [pc, #456]	@ (8002cf4 <main+0x270>)
 8002b2a:	4871      	ldr	r0, [pc, #452]	@ (8002cf0 <main+0x26c>)
 8002b2c:	f008 fd46 	bl	800b5bc <HAL_UART_Receive_DMA>

  HAL_Delay(100);
 8002b30:	2064      	movs	r0, #100	@ 0x64
 8002b32:	f002 f8ad 	bl	8004c90 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8002b36:	4870      	ldr	r0, [pc, #448]	@ (8002cf8 <main+0x274>)
 8002b38:	f008 fd8c 	bl	800b654 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&hlpuart1, (char*)usart_buffer, BUFFER_SIZE);
 8002b3c:	2214      	movs	r2, #20
 8002b3e:	496f      	ldr	r1, [pc, #444]	@ (8002cfc <main+0x278>)
 8002b40:	486d      	ldr	r0, [pc, #436]	@ (8002cf8 <main+0x274>)
 8002b42:	f008 fd3b 	bl	800b5bc <HAL_UART_Receive_DMA>

  LED_Init();
 8002b46:	f7ff fef3 	bl	8002930 <LED_Init>




  f_mount(&fs, "", 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	496c      	ldr	r1, [pc, #432]	@ (8002d00 <main+0x27c>)
 8002b4e:	486d      	ldr	r0, [pc, #436]	@ (8002d04 <main+0x280>)
 8002b50:	f00b fed8 	bl	800e904 <f_mount>
//  f_close(&fil);
//  /* Unmount SDCARD */
//  f_mount(NULL, "", 1);


  int indexboucle=0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	@ 0x44
  int tarvosen=0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  f_open(&fil, "adc.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002b5c:	2213      	movs	r2, #19
 8002b5e:	496a      	ldr	r1, [pc, #424]	@ (8002d08 <main+0x284>)
 8002b60:	486a      	ldr	r0, [pc, #424]	@ (8002d0c <main+0x288>)
 8002b62:	f00b ff15 	bl	800e990 <f_open>

  		   f_getfree("", &fre_clust, &pfs);
 8002b66:	4a6a      	ldr	r2, [pc, #424]	@ (8002d10 <main+0x28c>)
 8002b68:	496a      	ldr	r1, [pc, #424]	@ (8002d14 <main+0x290>)
 8002b6a:	4865      	ldr	r0, [pc, #404]	@ (8002d00 <main+0x27c>)
 8002b6c:	f00c f8ca 	bl	800ed04 <f_getfree>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Init_HighPerf_Mode_6_axis();
 8002b70:	f7fe fa60 	bl	8001034 <Init_HighPerf_Mode_6_axis>
  INIT_PERM_TARVOS(0x15, 0x16); //mon adresse est 1° et on envoit à 2°
 8002b74:	2116      	movs	r1, #22
 8002b76:	2015      	movs	r0, #21
 8002b78:	f001 f952 	bl	8003e20 <INIT_PERM_TARVOS>
  INIT_BARO();
 8002b7c:	f7fe ff60 	bl	8001a40 <INIT_BARO>

  while (1)
   {
	//Servo entre 1350 et 1550

	nmea_parse(&myDataGPS,(uint8_t*) GPS_RX_Buffer);
 8002b80:	4965      	ldr	r1, [pc, #404]	@ (8002d18 <main+0x294>)
 8002b82:	4866      	ldr	r0, [pc, #408]	@ (8002d1c <main+0x298>)
 8002b84:	f000 fe16 	bl	80037b4 <nmea_parse>
	//Évitement de l'ouverture
	if (myDataGPS.altitude - hauteur_0 > 60 && flag_ouverture == 0){
 8002b88:	4b64      	ldr	r3, [pc, #400]	@ (8002d1c <main+0x298>)
 8002b8a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b8e:	4b64      	ldr	r3, [pc, #400]	@ (8002d20 <main+0x29c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9e:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8002d24 <main+0x2a0>
 8002ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002baa:	dd06      	ble.n	8002bba <main+0x136>
 8002bac:	4b5e      	ldr	r3, [pc, #376]	@ (8002d28 <main+0x2a4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <main+0x136>
		flag_ouverture = 1 ;
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	@ (8002d28 <main+0x2a4>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
	}
	//Séparation des parties du CANSAT
	if (myDataGPS.altitude - hauteur_0 < 60 && myDataGPS.altitude != 0 && flag_ouverture == 1) {
 8002bba:	4b58      	ldr	r3, [pc, #352]	@ (8002d1c <main+0x298>)
 8002bbc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bc0:	4b57      	ldr	r3, [pc, #348]	@ (8002d20 <main+0x29c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	ee07 3a90 	vmov	s15, r3
 8002bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd0:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002d24 <main+0x2a0>
 8002bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	d541      	bpl.n	8002c62 <main+0x1de>
 8002bde:	4b4f      	ldr	r3, [pc, #316]	@ (8002d1c <main+0x298>)
 8002be0:	edd3 7a07 	vldr	s15, [r3, #28]
 8002be4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bec:	d039      	beq.n	8002c62 <main+0x1de>
 8002bee:	4b4e      	ldr	r3, [pc, #312]	@ (8002d28 <main+0x2a4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d135      	bne.n	8002c62 <main+0x1de>
	    char trame[51];  // Augmenté pour inclure l'astérisque et le '\0'
	    char altitude_str[10];

	    // Conversion de l'altitude en chaîne de caractères
	    strcpy(altitude_str, conv_float_to_char(myDataGPS.altitude));
 8002bf6:	4b49      	ldr	r3, [pc, #292]	@ (8002d1c <main+0x298>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fccc 	bl	8000598 <__aeabi_f2d>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	ec43 2b10 	vmov	d0, r2, r3
 8002c08:	f000 fa64 	bl	80030d4 <conv_float_to_char>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f00e fb15 	bl	8011246 <strcpy>

	    // Construction du message
	    strcpy(trame, "$2,le parachute s'est ouvert à ");
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	4a43      	ldr	r2, [pc, #268]	@ (8002d2c <main+0x2a8>)
 8002c20:	461c      	mov	r4, r3
 8002c22:	4615      	mov	r5, r2
 8002c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c2c:	682b      	ldr	r3, [r5, #0]
 8002c2e:	7023      	strb	r3, [r4, #0]
	    strcat(trame, altitude_str);
 8002c30:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002c34:	463b      	mov	r3, r7
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f00e f9e9 	bl	8011010 <strcat>
	    strcat(trame, "*");
 8002c3e:	463b      	mov	r3, r7
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fb3d 	bl	80002c0 <strlen>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	4413      	add	r3, r2
 8002c4e:	4938      	ldr	r1, [pc, #224]	@ (8002d30 <main+0x2ac>)
 8002c50:	461a      	mov	r2, r3
 8002c52:	460b      	mov	r3, r1
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	8013      	strh	r3, [r2, #0]


	    // Action sur le timer
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1350);
 8002c58:	4b23      	ldr	r3, [pc, #140]	@ (8002ce8 <main+0x264>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f240 5246 	movw	r2, #1350	@ 0x546
 8002c60:	635a      	str	r2, [r3, #52]	@ 0x34

	    // Envoi du message
	    //SEND_DATA_NETW(trame, 0x82, 0x16, strlen(trame));
	}
	//Lecture de la valeur du servo
	if (flag_servo == 1){
 8002c62:	4b34      	ldr	r3, [pc, #208]	@ (8002d34 <main+0x2b0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <main+0x1f6>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,position_servo);
 8002c6a:	4b33      	ldr	r3, [pc, #204]	@ (8002d38 <main+0x2b4>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce8 <main+0x264>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	635a      	str	r2, [r3, #52]	@ 0x34
		//HAL_Delay(1000);
		flag_servo = 0 ;
 8002c74:	4b2f      	ldr	r3, [pc, #188]	@ (8002d34 <main+0x2b0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
	//Batterie faible
	if (vbat <= 7){
		//SEND_DATA_NETW("$2,batterie faible#", 0x82, 0x16, strlen("$2,batterie faible#"));
	}
	// Problème de GPS
	if (myDataGPS.fix == 0){
 8002c7a:	4b28      	ldr	r3, [pc, #160]	@ (8002d1c <main+0x298>)
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d105      	bne.n	8002c8e <main+0x20a>
		SEND_DATA_NETW("$2,pas de GPS#", 0x82, 0x16, strlen("$2,pas de GPS#"));
 8002c82:	230e      	movs	r3, #14
 8002c84:	2216      	movs	r2, #22
 8002c86:	2182      	movs	r1, #130	@ 0x82
 8002c88:	482c      	ldr	r0, [pc, #176]	@ (8002d3c <main+0x2b8>)
 8002c8a:	f001 f991 	bl	8003fb0 <SEND_DATA_NETW>
	}
	//Envoi des données selon le timer
	if (flag_sensor == 1){
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d40 <main+0x2bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d10e      	bne.n	8002cb4 <main+0x230>
		Read_sensor_data(&myData6AXIS);
 8002c96:	482b      	ldr	r0, [pc, #172]	@ (8002d44 <main+0x2c0>)
 8002c98:	f7fe fa54 	bl	8001144 <Read_sensor_data>
//		BARO_FILL(&myDataBaro);
		conversion_char(envoi);
 8002c9c:	482a      	ldr	r0, [pc, #168]	@ (8002d48 <main+0x2c4>)
 8002c9e:	f000 f8a9 	bl	8002df4 <conversion_char>
		SEND_DATA_NETW("$23,42,N,2,E,14,120,1013,2025,01,18,14,30,45*", 0x82, 0x16, strlen("$23,42,N,2,E,14,120,1013,2025,01,18,14,30,45*"));
 8002ca2:	232d      	movs	r3, #45	@ 0x2d
 8002ca4:	2216      	movs	r2, #22
 8002ca6:	2182      	movs	r1, #130	@ 0x82
 8002ca8:	4828      	ldr	r0, [pc, #160]	@ (8002d4c <main+0x2c8>)
 8002caa:	f001 f981 	bl	8003fb0 <SEND_DATA_NETW>

		//SEND_DATA_NETW(envoi, 0x82, 0x16, strlen(envoi));
		flag_sensor = 0;
 8002cae:	4b24      	ldr	r3, [pc, #144]	@ (8002d40 <main+0x2bc>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
	}


	LED_Setcolour(0, 255, 0, 0);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	21ff      	movs	r1, #255	@ 0xff
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7ff fe5c 	bl	8002978 <LED_Setcolour>
	LED_Setcolour(1, 0, 255, 255);
 8002cc0:	23ff      	movs	r3, #255	@ 0xff
 8002cc2:	22ff      	movs	r2, #255	@ 0xff
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7ff fe56 	bl	8002978 <LED_Setcolour>
	LED_Update();
 8002ccc:	f7ff feaa 	bl	8002a24 <LED_Update>
	nmea_parse(&myDataGPS,(uint8_t*) GPS_RX_Buffer);
 8002cd0:	e756      	b.n	8002b80 <main+0xfc>
 8002cd2:	bf00      	nop
 8002cd4:	20000b40 	.word	0x20000b40
 8002cd8:	20000214 	.word	0x20000214
 8002cdc:	20000b48 	.word	0x20000b48
 8002ce0:	20000280 	.word	0x20000280
 8002ce4:	20000f70 	.word	0x20000f70
 8002ce8:	20000f24 	.word	0x20000f24
 8002cec:	48000400 	.word	0x48000400
 8002cf0:	200010b8 	.word	0x200010b8
 8002cf4:	20000ae4 	.word	0x20000ae4
 8002cf8:	20001024 	.word	0x20001024
 8002cfc:	20000b24 	.word	0x20000b24
 8002d00:	080139dc 	.word	0x080139dc
 8002d04:	2000045c 	.word	0x2000045c
 8002d08:	080139e0 	.word	0x080139e0
 8002d0c:	20000690 	.word	0x20000690
 8002d10:	2000068c 	.word	0x2000068c
 8002d14:	200008c0 	.word	0x200008c0
 8002d18:	200008e4 	.word	0x200008e4
 8002d1c:	20000c90 	.word	0x20000c90
 8002d20:	20000d18 	.word	0x20000d18
 8002d24:	42700000 	.word	0x42700000
 8002d28:	20000d14 	.word	0x20000d14
 8002d2c:	080139e8 	.word	0x080139e8
 8002d30:	08013a0c 	.word	0x08013a0c
 8002d34:	20001020 	.word	0x20001020
 8002d38:	2000101c 	.word	0x2000101c
 8002d3c:	08013a10 	.word	0x08013a10
 8002d40:	20000ec0 	.word	0x20000ec0
 8002d44:	20000cd0 	.word	0x20000cd0
 8002d48:	20000b64 	.word	0x20000b64
 8002d4c:	08013a20 	.word	0x08013a20

08002d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b094      	sub	sp, #80	@ 0x50
 8002d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d56:	f107 0318 	add.w	r3, r7, #24
 8002d5a:	2238      	movs	r2, #56	@ 0x38
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f00e f94e 	bl	8011000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002d76:	f004 ff11 	bl	8007b9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8002d7a:	2323      	movs	r3, #35	@ 0x23
 8002d7c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d8a:	2340      	movs	r3, #64	@ 0x40
 8002d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d92:	2302      	movs	r3, #2
 8002d94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d96:	2303      	movs	r3, #3
 8002d98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002d9e:	2308      	movs	r3, #8
 8002da0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002da2:	2302      	movs	r3, #2
 8002da4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002da6:	2302      	movs	r3, #2
 8002da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002daa:	2302      	movs	r3, #2
 8002dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dae:	f107 0318 	add.w	r3, r7, #24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f004 ffa6 	bl	8007d04 <HAL_RCC_OscConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002dbe:	f000 f9db 	bl	8003178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc2:	230f      	movs	r3, #15
 8002dc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	2102      	movs	r1, #2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f005 faa4 	bl	8008328 <HAL_RCC_ClockConfig>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002de6:	f000 f9c7 	bl	8003178 <Error_Handler>
  }
}
 8002dea:	bf00      	nop
 8002dec:	3750      	adds	r7, #80	@ 0x50
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <conversion_char>:
  for (size_t i = 0; i < taille; i++) {
    destination[i] = (char)source[i];
  }
}

void conversion_char(char *envoi){
 8002df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df6:	b091      	sub	sp, #68	@ 0x44
 8002df8:	af06      	add	r7, sp, #24
 8002dfa:	6078      	str	r0, [r7, #4]
    size_t len;
    memset(envoi, '0', strlen(envoi));  // Remplit la chaîne de '0'
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7fd fa5f 	bl	80002c0 <strlen>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	2130      	movs	r1, #48	@ 0x30
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f00e f8f9 	bl	8011000 <memset>
    envoi[0]='$';
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2224      	movs	r2, #36	@ 0x24
 8002e12:	701a      	strb	r2, [r3, #0]
    envoi[1]='1';
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3301      	adds	r3, #1
 8002e18:	2231      	movs	r2, #49	@ 0x31
 8002e1a:	701a      	strb	r2, [r3, #0]
    envoi[2]=',';
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3302      	adds	r3, #2
 8002e20:	222c      	movs	r2, #44	@ 0x2c
 8002e22:	701a      	strb	r2, [r3, #0]
    snprintf(accel_gyro, accel_gyro, "%u , %u , %u , %u,%u,%u,",
 8002e24:	4ea1      	ldr	r6, [pc, #644]	@ (80030ac <conversion_char+0x2b8>)
 8002e26:	4ba2      	ldr	r3, [pc, #648]	@ (80030b0 <conversion_char+0x2bc>)
 8002e28:	681d      	ldr	r5, [r3, #0]
 8002e2a:	4ba1      	ldr	r3, [pc, #644]	@ (80030b0 <conversion_char+0x2bc>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4aa0      	ldr	r2, [pc, #640]	@ (80030b0 <conversion_char+0x2bc>)
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	499f      	ldr	r1, [pc, #636]	@ (80030b0 <conversion_char+0x2bc>)
 8002e34:	68c9      	ldr	r1, [r1, #12]
 8002e36:	489e      	ldr	r0, [pc, #632]	@ (80030b0 <conversion_char+0x2bc>)
 8002e38:	6900      	ldr	r0, [r0, #16]
 8002e3a:	4c9d      	ldr	r4, [pc, #628]	@ (80030b0 <conversion_char+0x2bc>)
 8002e3c:	6964      	ldr	r4, [r4, #20]
 8002e3e:	9404      	str	r4, [sp, #16]
 8002e40:	9003      	str	r0, [sp, #12]
 8002e42:	9102      	str	r1, [sp, #8]
 8002e44:	9201      	str	r2, [sp, #4]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	462b      	mov	r3, r5
 8002e4a:	4a9a      	ldr	r2, [pc, #616]	@ (80030b4 <conversion_char+0x2c0>)
 8002e4c:	4631      	mov	r1, r6
 8002e4e:	4897      	ldr	r0, [pc, #604]	@ (80030ac <conversion_char+0x2b8>)
 8002e50:	f00d ffaa 	bl	8010da8 <sniprintf>
                           myData6AXIS.AccelX, myData6AXIS.AccelY, myData6AXIS.AccelZ,
    					   myData6AXIS.GyroX, myData6AXIS.GyroY, myData6AXIS.GyroZ);
    convertIntToChar(myData6AXIS, accel_gyro, 20);
 8002e54:	4c96      	ldr	r4, [pc, #600]	@ (80030b0 <conversion_char+0x2bc>)
 8002e56:	2314      	movs	r3, #20
 8002e58:	9305      	str	r3, [sp, #20]
 8002e5a:	4b94      	ldr	r3, [pc, #592]	@ (80030ac <conversion_char+0x2b8>)
 8002e5c:	9304      	str	r3, [sp, #16]
 8002e5e:	466d      	mov	r5, sp
 8002e60:	f104 0310 	add.w	r3, r4, #16
 8002e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002e6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e6e:	f000 f961 	bl	8003134 <convertIntToChar>
    len = strlen(envoi);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd fa24 	bl	80002c0 <strlen>
 8002e78:	60b8      	str	r0, [r7, #8]
    for (int i = 0; i<(sizeof(accel_gyro));i++){
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7e:	e00c      	b.n	8002e9a <conversion_char+0xa6>
    	envoi[i+len] = accel_gyro[i];
 8002e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4413      	add	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	4988      	ldr	r1, [pc, #544]	@ (80030ac <conversion_char+0x2b8>)
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8e:	440a      	add	r2, r1
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(accel_gyro));i++){
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	3301      	adds	r3, #1
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d9ef      	bls.n	8002e80 <conversion_char+0x8c>
    }
    len = strlen(envoi);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fd fa0d 	bl	80002c0 <strlen>
 8002ea6:	60b8      	str	r0, [r7, #8]
    conv_float_to_char(temperature_6axis, sizeof(temperature_6axis),myData6AXIS.temp);
 8002ea8:	4b81      	ldr	r3, [pc, #516]	@ (80030b0 <conversion_char+0x2bc>)
 8002eaa:	ed93 7b06 	vldr	d7, [r3, #24]
 8002eae:	eeb0 0a47 	vmov.f32	s0, s14
 8002eb2:	eef0 0a67 	vmov.f32	s1, s15
 8002eb6:	2114      	movs	r1, #20
 8002eb8:	487f      	ldr	r0, [pc, #508]	@ (80030b8 <conversion_char+0x2c4>)
 8002eba:	f000 f90b 	bl	80030d4 <conv_float_to_char>
    for (int i = 0; i<(sizeof(temperature_6axis));i++){
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	e00c      	b.n	8002ede <conversion_char+0xea>
        	envoi[i+len] = temperature_6axis[i];
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4413      	add	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	497a      	ldr	r1, [pc, #488]	@ (80030b8 <conversion_char+0x2c4>)
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(temperature_6axis));i++){
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	3301      	adds	r3, #1
 8002edc:	623b      	str	r3, [r7, #32]
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	2b13      	cmp	r3, #19
 8002ee2:	d9ef      	bls.n	8002ec4 <conversion_char+0xd0>
    }
    envoi[strlen(envoi)]=',';
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fd f9eb 	bl	80002c0 <strlen>
 8002eea:	4602      	mov	r2, r0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	222c      	movs	r2, #44	@ 0x2c
 8002ef2:	701a      	strb	r2, [r3, #0]
    len = strlen(envoi);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7fd f9e3 	bl	80002c0 <strlen>
 8002efa:	60b8      	str	r0, [r7, #8]
    mef_pos(pos, sizeof(pos),myDataGPS.latitude);
 8002efc:	4b6f      	ldr	r3, [pc, #444]	@ (80030bc <conversion_char+0x2c8>)
 8002efe:	ed93 7b00 	vldr	d7, [r3]
 8002f02:	eeb0 0a47 	vmov.f32	s0, s14
 8002f06:	eef0 0a67 	vmov.f32	s1, s15
 8002f0a:	210a      	movs	r1, #10
 8002f0c:	486c      	ldr	r0, [pc, #432]	@ (80030c0 <conversion_char+0x2cc>)
 8002f0e:	f000 f8fb 	bl	8003108 <mef_pos>
    for (int i = 0; i<(sizeof(pos));i++){
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e00c      	b.n	8002f32 <conversion_char+0x13e>
            	envoi[i+len] = pos[i];
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	4967      	ldr	r1, [pc, #412]	@ (80030c0 <conversion_char+0x2cc>)
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	440a      	add	r2, r1
 8002f28:	7812      	ldrb	r2, [r2, #0]
 8002f2a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(pos));i++){
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2b09      	cmp	r3, #9
 8002f36:	d9ef      	bls.n	8002f18 <conversion_char+0x124>
    }
    envoi[strlen(envoi)]=',';
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7fd f9c1 	bl	80002c0 <strlen>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	222c      	movs	r2, #44	@ 0x2c
 8002f46:	701a      	strb	r2, [r3, #0]
    len = strlen(envoi);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fd f9b9 	bl	80002c0 <strlen>
 8002f4e:	60b8      	str	r0, [r7, #8]
	mef_pos(pos, sizeof(pos),myDataGPS.longitude);
 8002f50:	4b5a      	ldr	r3, [pc, #360]	@ (80030bc <conversion_char+0x2c8>)
 8002f52:	ed93 7b04 	vldr	d7, [r3, #16]
 8002f56:	eeb0 0a47 	vmov.f32	s0, s14
 8002f5a:	eef0 0a67 	vmov.f32	s1, s15
 8002f5e:	210a      	movs	r1, #10
 8002f60:	4857      	ldr	r0, [pc, #348]	@ (80030c0 <conversion_char+0x2cc>)
 8002f62:	f000 f8d1 	bl	8003108 <mef_pos>
	for (int i = 0; i<(sizeof(pos));i++){
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	e00c      	b.n	8002f86 <conversion_char+0x192>
				envoi[i+len] = pos[i];
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4413      	add	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	4952      	ldr	r1, [pc, #328]	@ (80030c0 <conversion_char+0x2cc>)
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	440a      	add	r2, r1
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<(sizeof(pos));i++){
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	3301      	adds	r3, #1
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b09      	cmp	r3, #9
 8002f8a:	d9ef      	bls.n	8002f6c <conversion_char+0x178>
	}
    envoi[strlen(envoi)]=',';
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd f997 	bl	80002c0 <strlen>
 8002f92:	4602      	mov	r2, r0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	222c      	movs	r2, #44	@ 0x2c
 8002f9a:	701a      	strb	r2, [r3, #0]
    len = strlen(envoi);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fd f98f 	bl	80002c0 <strlen>
 8002fa2:	60b8      	str	r0, [r7, #8]
    conv_float_to_char(altitude,sizeof(altitude),myDataGPS.altitude);
 8002fa4:	4b45      	ldr	r3, [pc, #276]	@ (80030bc <conversion_char+0x2c8>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd faf5 	bl	8000598 <__aeabi_f2d>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	ec43 2b10 	vmov	d0, r2, r3
 8002fb6:	210a      	movs	r1, #10
 8002fb8:	4842      	ldr	r0, [pc, #264]	@ (80030c4 <conversion_char+0x2d0>)
 8002fba:	f000 f88b 	bl	80030d4 <conv_float_to_char>
    for (int i = 0; i<(sizeof(altitude));i++){
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e00c      	b.n	8002fde <conversion_char+0x1ea>
    				envoi[i+len] = altitude[i];
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4413      	add	r3, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	493d      	ldr	r1, [pc, #244]	@ (80030c4 <conversion_char+0x2d0>)
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	440a      	add	r2, r1
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(altitude));i++){
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b09      	cmp	r3, #9
 8002fe2:	d9ef      	bls.n	8002fc4 <conversion_char+0x1d0>
    }
    envoi[strlen(envoi)]=',';
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fd f96b 	bl	80002c0 <strlen>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	222c      	movs	r2, #44	@ 0x2c
 8002ff2:	701a      	strb	r2, [r3, #0]
	len = strlen(envoi);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fd f963 	bl	80002c0 <strlen>
 8002ffa:	60b8      	str	r0, [r7, #8]
	conv_float_to_char(pression,sizeof(pression),myDataBaro.Pression);
 8002ffc:	4b32      	ldr	r3, [pc, #200]	@ (80030c8 <conversion_char+0x2d4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fac9 	bl	8000598 <__aeabi_f2d>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	ec43 2b10 	vmov	d0, r2, r3
 800300e:	2114      	movs	r1, #20
 8003010:	482e      	ldr	r0, [pc, #184]	@ (80030cc <conversion_char+0x2d8>)
 8003012:	f000 f85f 	bl	80030d4 <conv_float_to_char>
	for (int i = 0; i<(sizeof(pression));i++){
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	e00c      	b.n	8003036 <conversion_char+0x242>
					envoi[i+len] = pression[i];
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4413      	add	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	4929      	ldr	r1, [pc, #164]	@ (80030cc <conversion_char+0x2d8>)
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	440a      	add	r2, r1
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<(sizeof(pression));i++){
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	3301      	adds	r3, #1
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b13      	cmp	r3, #19
 800303a:	d9ef      	bls.n	800301c <conversion_char+0x228>
	}
	envoi[strlen(envoi)]=',';
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fd f93f 	bl	80002c0 <strlen>
 8003042:	4602      	mov	r2, r0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	222c      	movs	r2, #44	@ 0x2c
 800304a:	701a      	strb	r2, [r3, #0]
	len = strlen(envoi);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fd f937 	bl	80002c0 <strlen>
 8003052:	60b8      	str	r0, [r7, #8]
	conv_float_to_char(temperature_baro,sizeof(temperature_baro),myDataBaro.Temperature);
 8003054:	4b1c      	ldr	r3, [pc, #112]	@ (80030c8 <conversion_char+0x2d4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fa9d 	bl	8000598 <__aeabi_f2d>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	ec43 2b10 	vmov	d0, r2, r3
 8003066:	2114      	movs	r1, #20
 8003068:	4819      	ldr	r0, [pc, #100]	@ (80030d0 <conversion_char+0x2dc>)
 800306a:	f000 f833 	bl	80030d4 <conv_float_to_char>
	for (int i = 0; i<(sizeof(temperature_baro));i++){
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e00c      	b.n	800308e <conversion_char+0x29a>
					envoi[i+len] = temperature_baro[i];
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4413      	add	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	4914      	ldr	r1, [pc, #80]	@ (80030d0 <conversion_char+0x2dc>)
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	440a      	add	r2, r1
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<(sizeof(temperature_baro));i++){
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b13      	cmp	r3, #19
 8003092:	d9ef      	bls.n	8003074 <conversion_char+0x280>
	}
    envoi[strlen(envoi)]='#';
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fd f913 	bl	80002c0 <strlen>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4413      	add	r3, r2
 80030a0:	2223      	movs	r2, #35	@ 0x23
 80030a2:	701a      	strb	r2, [r3, #0]
}
 80030a4:	bf00      	nop
 80030a6:	372c      	adds	r7, #44	@ 0x2c
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ac:	20000c2c 	.word	0x20000c2c
 80030b0:	20000cd0 	.word	0x20000cd0
 80030b4:	08013a50 	.word	0x08013a50
 80030b8:	20000c50 	.word	0x20000c50
 80030bc:	20000c90 	.word	0x20000c90
 80030c0:	20000cfc 	.word	0x20000cfc
 80030c4:	20000d08 	.word	0x20000d08
 80030c8:	20000cf0 	.word	0x20000cf0
 80030cc:	20000c78 	.word	0x20000c78
 80030d0:	20000c64 	.word	0x20000c64

080030d4 <conv_float_to_char>:



void conv_float_to_char(char *buffer, size_t buffer_size, float temperature) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	ed87 0a01 	vstr	s0, [r7, #4]
    snprintf(buffer, buffer_size, "%.1f", temperature);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd fa58 	bl	8000598 <__aeabi_f2d>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	e9cd 2300 	strd	r2, r3, [sp]
 80030f0:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <conv_float_to_char+0x30>)
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f00d fe57 	bl	8010da8 <sniprintf>
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	08013a6c 	.word	0x08013a6c

08003108 <mef_pos>:

void mef_pos(char *buffer, size_t buffer_size, double position) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	ed87 0b00 	vstr	d0, [r7]
    snprintf(buffer, buffer_size, "%.7f", position);
 8003116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800311a:	e9cd 2300 	strd	r2, r3, [sp]
 800311e:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <mef_pos+0x28>)
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f00d fe40 	bl	8010da8 <sniprintf>
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	08013a74 	.word	0x08013a74

08003134 <convertIntToChar>:

void Set_Servo_Position(uint16_t pulse_width) {
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_width);
}

void convertIntToChar(AXIS6 data, char *buffer, size_t buffer_size) {
 8003134:	b084      	sub	sp, #16
 8003136:	b5b0      	push	{r4, r5, r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af06      	add	r7, sp, #24
 800313c:	f107 0410 	add.w	r4, r7, #16
 8003140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    snprintf(buffer, buffer_size,
 8003144:	693d      	ldr	r5, [r7, #16]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	69f9      	ldr	r1, [r7, #28]
 800314c:	6a38      	ldr	r0, [r7, #32]
 800314e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003150:	9404      	str	r4, [sp, #16]
 8003152:	9003      	str	r0, [sp, #12]
 8003154:	9102      	str	r1, [sp, #8]
 8003156:	9201      	str	r2, [sp, #4]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	462b      	mov	r3, r5
 800315c:	4a05      	ldr	r2, [pc, #20]	@ (8003174 <convertIntToChar+0x40>)
 800315e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003162:	f00d fe21 	bl	8010da8 <sniprintf>
             "%d,%d,%d,%d,%d,%d",
             data.AccelX, data.AccelY, data.AccelZ,
             data.GyroX, data.GyroY, data.GyroZ);
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800316e:	b004      	add	sp, #16
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	08013a7c 	.word	0x08013a7c

08003178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800317c:	b672      	cpsid	i
}
 800317e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <Error_Handler+0x8>

08003184 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7fd f897 	bl	80002c0 <strlen>
 8003192:	4603      	mov	r3, r0
 8003194:	2b04      	cmp	r3, #4
 8003196:	d801      	bhi.n	800319c <gps_checksum+0x18>
 8003198:	2300      	movs	r3, #0
 800319a:	e038      	b.n	800320e <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fd f88f 	bl	80002c0 <strlen>
 80031a2:	4603      	mov	r3, r0
 80031a4:	3b04      	subs	r3, #4
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd f886 	bl	80002c0 <strlen>
 80031b4:	4603      	mov	r3, r0
 80031b6:	3b03      	subs	r3, #3
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e00a      	b.n	80031e0 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	4053      	eors	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	3301      	adds	r3, #1
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fd f86d 	bl	80002c0 <strlen>
 80031e6:	4603      	mov	r3, r0
 80031e8:	1f5a      	subs	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d8ec      	bhi.n	80031ca <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80031f0:	f107 0308 	add.w	r3, r7, #8
 80031f4:	2210      	movs	r2, #16
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f00c fe3f 	bl	800fe7c <strtol>
 80031fe:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	429a      	cmp	r2, r3
 8003206:	d101      	bne.n	800320c <gps_checksum+0x88>
        return 1;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <gps_checksum+0x8a>
    }
    else{
        return 0;
 800320c:	2300      	movs	r3, #0
    }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b0b7      	sub	sp, #220	@ 0xdc
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8003228:	f107 0320 	add.w	r3, r7, #32
 800322c:	2264      	movs	r2, #100	@ 0x64
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f00d fee5 	bl	8011000 <memset>
    char *marker = strtok(inputString, ",");
 8003236:	49c2      	ldr	r1, [pc, #776]	@ (8003540 <nmea_GPGGA+0x328>)
 8003238:	6838      	ldr	r0, [r7, #0]
 800323a:	f00d ff0b 	bl	8011054 <strtok>
 800323e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8003242:	e027      	b.n	8003294 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003244:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003248:	f7fd f83a 	bl	80002c0 <strlen>
 800324c:	4603      	mov	r3, r0
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8003254:	1c63      	adds	r3, r4, #1
 8003256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800325a:	4610      	mov	r0, r2
 800325c:	f00b fe68 	bl	800ef30 <malloc>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	00a3      	lsls	r3, r4, #2
 8003266:	33d8      	adds	r3, #216	@ 0xd8
 8003268:	443b      	add	r3, r7
 800326a:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800326e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003272:	3b01      	subs	r3, #1
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	33d8      	adds	r3, #216	@ 0xd8
 8003278:	443b      	add	r3, r7
 800327a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800327e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003282:	4618      	mov	r0, r3
 8003284:	f00d ffdf 	bl	8011246 <strcpy>
        marker = strtok(NULL, ",");
 8003288:	49ad      	ldr	r1, [pc, #692]	@ (8003540 <nmea_GPGGA+0x328>)
 800328a:	2000      	movs	r0, #0
 800328c:	f00d fee2 	bl	8011054 <strtok>
 8003290:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8003294:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1d3      	bne.n	8003244 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 800329c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 80032a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	332c      	adds	r3, #44	@ 0x2c
 80032b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f00d ffc6 	bl	8011246 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80032ba:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80032be:	2b53      	cmp	r3, #83	@ 0x53
 80032c0:	d004      	beq.n	80032cc <nmea_GPGGA+0xb4>
 80032c2:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80032c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80032c8:	f040 8159 	bne.w	800357e <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032d2:	e010      	b.n	80032f6 <nmea_GPGGA+0xde>
 80032d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032da:	4413      	add	r3, r2
 80032dc:	7819      	ldrb	r1, [r3, #0]
 80032de:	f107 021c 	add.w	r2, r7, #28
 80032e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032e6:	4413      	add	r3, r2
 80032e8:	460a      	mov	r2, r1
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032f0:	3301      	adds	r3, #1
 80032f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	ddea      	ble.n	80032d4 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003304:	e011      	b.n	800332a <nmea_GPGGA+0x112>
 8003306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800330c:	3302      	adds	r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	7819      	ldrb	r1, [r3, #0]
 8003312:	f107 0214 	add.w	r2, r7, #20
 8003316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800331a:	4413      	add	r3, r2
 800331c:	460a      	mov	r2, r1
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003324:	3301      	adds	r3, #1
 8003326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800332a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800332e:	2b05      	cmp	r3, #5
 8003330:	dde9      	ble.n	8003306 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003332:	f107 031c 	add.w	r3, r7, #28
 8003336:	220a      	movs	r2, #10
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f00c fd9e 	bl	800fe7c <strtol>
 8003340:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f00c fcb6 	bl	800fcbc <strtof>
 8003350:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003354:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003360:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8003364:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 8003544 <nmea_GPGGA+0x32c>
 8003368:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800336c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003370:	ee17 0a90 	vmov	r0, s15
 8003374:	f7fd f910 	bl	8000598 <__aeabi_f2d>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003386:	e010      	b.n	80033aa <nmea_GPGGA+0x192>
 8003388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800338a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800338e:	4413      	add	r3, r2
 8003390:	7819      	ldrb	r1, [r3, #0]
 8003392:	f107 0210 	add.w	r2, r7, #16
 8003396:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800339a:	4413      	add	r3, r2
 800339c:	460a      	mov	r2, r1
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033a4:	3301      	adds	r3, #1
 80033a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	ddea      	ble.n	8003388 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033b8:	e011      	b.n	80033de <nmea_GPGGA+0x1c6>
 80033ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033c0:	3303      	adds	r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	7819      	ldrb	r1, [r3, #0]
 80033c6:	f107 0208 	add.w	r2, r7, #8
 80033ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033ce:	4413      	add	r3, r2
 80033d0:	460a      	mov	r2, r1
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033d8:	3301      	adds	r3, #1
 80033da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	dde9      	ble.n	80033ba <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80033e6:	f107 0310 	add.w	r3, r7, #16
 80033ea:	220a      	movs	r2, #10
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f00c fd44 	bl	800fe7c <strtol>
 80033f4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80033f8:	f107 0308 	add.w	r3, r7, #8
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f00c fc5c 	bl	800fcbc <strtof>
 8003404:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003408:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003414:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8003418:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 8003544 <nmea_GPGGA+0x32c>
 800341c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003424:	ee17 0a90 	vmov	r0, s15
 8003428:	f7fd f8b6 	bl	8000598 <__aeabi_f2d>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003440:	f7fd fb6a 	bl	8000b18 <__aeabi_dcmpeq>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d176      	bne.n	8003538 <nmea_GPGGA+0x320>
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003456:	f7fd fb5f 	bl	8000b18 <__aeabi_dcmpeq>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d16b      	bne.n	8003538 <nmea_GPGGA+0x320>
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	4b38      	ldr	r3, [pc, #224]	@ (8003548 <nmea_GPGGA+0x330>)
 8003466:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800346a:	f7fd fb5f 	bl	8000b2c <__aeabi_dcmplt>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d061      	beq.n	8003538 <nmea_GPGGA+0x320>
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	4b34      	ldr	r3, [pc, #208]	@ (800354c <nmea_GPGGA+0x334>)
 800347a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800347e:	f7fd fb55 	bl	8000b2c <__aeabi_dcmplt>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d057      	beq.n	8003538 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800348e:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8003498:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80034a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80034aa:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80034ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f00c fc03 	bl	800fcbc <strtof>
 80034b6:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80034ba:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80034be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c6:	d102      	bne.n	80034ce <nmea_GPGGA+0x2b6>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	e001      	b.n	80034d2 <nmea_GPGGA+0x2ba>
 80034ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80034d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d8:	220a      	movs	r2, #10
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f00c fccd 	bl	800fe7c <strtol>
 80034e2:	4602      	mov	r2, r0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80034e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ea:	220a      	movs	r2, #10
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f00c fcc4 	bl	800fe7c <strtol>
 80034f4:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80034f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bfcc      	ite	gt
 8003500:	2301      	movgt	r3, #1
 8003502:	2300      	movle	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 800350c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f00c fbd3 	bl	800fcbc <strtof>
 8003516:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800351a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800351e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	d102      	bne.n	800352e <nmea_GPGGA+0x316>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	e001      	b.n	8003532 <nmea_GPGGA+0x31a>
 800352e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003536:	e022      	b.n	800357e <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800353e:	e016      	b.n	800356e <nmea_GPGGA+0x356>
 8003540:	08013a90 	.word	0x08013a90
 8003544:	42700000 	.word	0x42700000
 8003548:	40568000 	.word	0x40568000
 800354c:	40668000 	.word	0x40668000
 8003550:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	33d8      	adds	r3, #216	@ 0xd8
 8003558:	443b      	add	r3, r7
 800355a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800355e:	4618      	mov	r0, r3
 8003560:	f00b fcee 	bl	800ef40 <free>
 8003564:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003568:	3301      	adds	r3, #1
 800356a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800356e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003576:	429a      	cmp	r2, r3
 8003578:	dbea      	blt.n	8003550 <nmea_GPGGA+0x338>
            return 0;
 800357a:	2300      	movs	r3, #0
 800357c:	e019      	b.n	80035b2 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003584:	e00e      	b.n	80035a4 <nmea_GPGGA+0x38c>
 8003586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	33d8      	adds	r3, #216	@ 0xd8
 800358e:	443b      	add	r3, r7
 8003590:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003594:	4618      	mov	r0, r3
 8003596:	f00b fcd3 	bl	800ef40 <free>
 800359a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800359e:	3301      	adds	r3, #1
 80035a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ac:	429a      	cmp	r2, r3
 80035ae:	dbea      	blt.n	8003586 <nmea_GPGGA+0x36e>
    return 1;
 80035b0:	2301      	movs	r3, #1
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	37dc      	adds	r7, #220	@ 0xdc
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}
 80035ba:	bf00      	nop

080035bc <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b0a3      	sub	sp, #140	@ 0x8c
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	2264      	movs	r2, #100	@ 0x64
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f00d fd13 	bl	8011000 <memset>
    char *marker = strtok(inputString, ",");
 80035da:	493b      	ldr	r1, [pc, #236]	@ (80036c8 <nmea_GPGSA+0x10c>)
 80035dc:	6838      	ldr	r0, [r7, #0]
 80035de:	f00d fd39 	bl	8011054 <strtok>
 80035e2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 80035e6:	e027      	b.n	8003638 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80035e8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80035ec:	f7fc fe68 	bl	80002c0 <strlen>
 80035f0:	4603      	mov	r3, r0
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 80035f8:	1c63      	adds	r3, r4, #1
 80035fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035fe:	4610      	mov	r0, r2
 8003600:	f00b fc96 	bl	800ef30 <malloc>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	00a3      	lsls	r3, r4, #2
 800360a:	3388      	adds	r3, #136	@ 0x88
 800360c:	443b      	add	r3, r7
 800360e:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8003612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003616:	3b01      	subs	r3, #1
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3388      	adds	r3, #136	@ 0x88
 800361c:	443b      	add	r3, r7
 800361e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003622:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003626:	4618      	mov	r0, r3
 8003628:	f00d fe0d 	bl	8011246 <strcpy>
        marker = strtok(NULL, ",");
 800362c:	4926      	ldr	r1, [pc, #152]	@ (80036c8 <nmea_GPGSA+0x10c>)
 800362e:	2000      	movs	r0, #0
 8003630:	f00d fd10 	bl	8011054 <strtok>
 8003634:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8003638:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1d3      	bne.n	80035e8 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	220a      	movs	r2, #10
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f00c fc18 	bl	800fe7c <strtol>
 800364c:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 800364e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003650:	2b01      	cmp	r3, #1
 8003652:	bfcc      	ite	gt
 8003654:	2301      	movgt	r3, #1
 8003656:	2300      	movle	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8003664:	2303      	movs	r3, #3
 8003666:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003668:	e00e      	b.n	8003688 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 800366a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	3388      	adds	r3, #136	@ 0x88
 8003670:	443b      	add	r3, r7
 8003672:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <nmea_GPGSA+0xc6>
            satelliteCount++;
 800367c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800367e:	3301      	adds	r3, #1
 8003680:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8003682:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003684:	3301      	adds	r3, #1
 8003686:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800368a:	2b0e      	cmp	r3, #14
 800368c:	dded      	ble.n	800366a <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8003694:	2300      	movs	r3, #0
 8003696:	677b      	str	r3, [r7, #116]	@ 0x74
 8003698:	e00b      	b.n	80036b2 <nmea_GPGSA+0xf6>
 800369a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	3388      	adds	r3, #136	@ 0x88
 80036a0:	443b      	add	r3, r7
 80036a2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f00b fc4a 	bl	800ef40 <free>
 80036ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ae:	3301      	adds	r3, #1
 80036b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80036b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80036b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036b8:	429a      	cmp	r2, r3
 80036ba:	dbee      	blt.n	800369a <nmea_GPGSA+0xde>
    return 1;
 80036bc:	2301      	movs	r3, #1
}
 80036be:	4618      	mov	r0, r3
 80036c0:	378c      	adds	r7, #140	@ 0x8c
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd90      	pop	{r4, r7, pc}
 80036c6:	bf00      	nop
 80036c8:	08013a90 	.word	0x08013a90
 80036cc:	00000000 	.word	0x00000000

080036d0 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b0a1      	sub	sp, #132	@ 0x84
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 80036de:	f107 030c 	add.w	r3, r7, #12
 80036e2:	2264      	movs	r2, #100	@ 0x64
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f00d fc8a 	bl	8011000 <memset>
    char *marker = strtok(inputString, ",");
 80036ec:	4930      	ldr	r1, [pc, #192]	@ (80037b0 <nmea_GNRMC+0xe0>)
 80036ee:	6838      	ldr	r0, [r7, #0]
 80036f0:	f00d fcb0 	bl	8011054 <strtok>
 80036f4:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 80036f6:	e021      	b.n	800373c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80036f8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80036fa:	f7fc fde1 	bl	80002c0 <strlen>
 80036fe:	4603      	mov	r3, r0
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8003704:	1c63      	adds	r3, r4, #1
 8003706:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003708:	4610      	mov	r0, r2
 800370a:	f00b fc11 	bl	800ef30 <malloc>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	00a3      	lsls	r3, r4, #2
 8003714:	3380      	adds	r3, #128	@ 0x80
 8003716:	443b      	add	r3, r7
 8003718:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 800371c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800371e:	3b01      	subs	r3, #1
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	3380      	adds	r3, #128	@ 0x80
 8003724:	443b      	add	r3, r7
 8003726:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800372a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800372c:	4618      	mov	r0, r3
 800372e:	f00d fd8a 	bl	8011246 <strcpy>
        marker = strtok(NULL, ",");
 8003732:	491f      	ldr	r1, [pc, #124]	@ (80037b0 <nmea_GNRMC+0xe0>)
 8003734:	2000      	movs	r0, #0
 8003736:	f00d fc8d 	bl	8011054 <strtok>
 800373a:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800373c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1da      	bne.n	80036f8 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8003742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f00c fab8 	bl	800fcbc <strtof>
 800374c:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 8003750:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003752:	f7fc ff21 	bl	8000598 <__aeabi_f2d>
 8003756:	a314      	add	r3, pc, #80	@ (adr r3, 80037a8 <nmea_GNRMC+0xd8>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fd f89e 	bl	800089c <__aeabi_ddiv>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	f7fd fa66 	bl	8000c38 <__aeabi_d2f>
 800376c:	4602      	mov	r2, r0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8003772:	2300      	movs	r3, #0
 8003774:	677b      	str	r3, [r7, #116]	@ 0x74
 8003776:	e00b      	b.n	8003790 <nmea_GNRMC+0xc0>
 8003778:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	3380      	adds	r3, #128	@ 0x80
 800377e:	443b      	add	r3, r7
 8003780:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003784:	4618      	mov	r0, r3
 8003786:	f00b fbdb 	bl	800ef40 <free>
 800378a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800378c:	3301      	adds	r3, #1
 800378e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003790:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003792:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003794:	429a      	cmp	r2, r3
 8003796:	dbef      	blt.n	8003778 <nmea_GNRMC+0xa8>
    return 1;
 8003798:	2301      	movs	r3, #1
}
 800379a:	4618      	mov	r0, r3
 800379c:	3784      	adds	r7, #132	@ 0x84
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	bf00      	nop
 80037a4:	f3af 8000 	nop.w
 80037a8:	be76c8b4 	.word	0xbe76c8b4
 80037ac:	3fff1a9f 	.word	0x3fff1a9f
 80037b0:	08013a90 	.word	0x08013a90

080037b4 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 80037be:	223c      	movs	r2, #60	@ 0x3c
 80037c0:	2100      	movs	r1, #0
 80037c2:	484e      	ldr	r0, [pc, #312]	@ (80038fc <nmea_parse+0x148>)
 80037c4:	f00d fc1c 	bl	8011000 <memset>
    char * token = strtok(buffer, "$");
 80037c8:	494d      	ldr	r1, [pc, #308]	@ (8003900 <nmea_parse+0x14c>)
 80037ca:	6838      	ldr	r0, [r7, #0]
 80037cc:	f00d fc42 	bl	8011054 <strtok>
 80037d0:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80037d6:	e01d      	b.n	8003814 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f7fc fd71 	bl	80002c0 <strlen>
 80037de:	4603      	mov	r3, r0
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	693c      	ldr	r4, [r7, #16]
 80037e4:	1c63      	adds	r3, r4, #1
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	4610      	mov	r0, r2
 80037ea:	f00b fba1 	bl	800ef30 <malloc>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b42      	ldr	r3, [pc, #264]	@ (80038fc <nmea_parse+0x148>)
 80037f4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	4a3f      	ldr	r2, [pc, #252]	@ (80038fc <nmea_parse+0x148>)
 80037fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003802:	6979      	ldr	r1, [r7, #20]
 8003804:	4618      	mov	r0, r3
 8003806:	f00d fd1e 	bl	8011246 <strcpy>
        token = strtok(NULL, "$");
 800380a:	493d      	ldr	r1, [pc, #244]	@ (8003900 <nmea_parse+0x14c>)
 800380c:	2000      	movs	r0, #0
 800380e:	f00d fc21 	bl	8011054 <strtok>
 8003812:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1de      	bne.n	80037d8 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	e052      	b.n	80038c6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003820:	4a36      	ldr	r2, [pc, #216]	@ (80038fc <nmea_parse+0x148>)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	4936      	ldr	r1, [pc, #216]	@ (8003904 <nmea_parse+0x150>)
 800382a:	4618      	mov	r0, r3
 800382c:	f00d fc6e 	bl	801110c <strstr>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d044      	beq.n	80038c0 <nmea_parse+0x10c>
 8003836:	4a31      	ldr	r2, [pc, #196]	@ (80038fc <nmea_parse+0x148>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fca0 	bl	8003184 <gps_checksum>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d03a      	beq.n	80038c0 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 800384a:	4a2c      	ldr	r2, [pc, #176]	@ (80038fc <nmea_parse+0x148>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003852:	492d      	ldr	r1, [pc, #180]	@ (8003908 <nmea_parse+0x154>)
 8003854:	4618      	mov	r0, r3
 8003856:	f00d fc59 	bl	801110c <strstr>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8003860:	4a26      	ldr	r2, [pc, #152]	@ (80038fc <nmea_parse+0x148>)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff30 	bl	80036d0 <nmea_GNRMC>
 8003870:	e026      	b.n	80038c0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8003872:	4a22      	ldr	r2, [pc, #136]	@ (80038fc <nmea_parse+0x148>)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387a:	4924      	ldr	r1, [pc, #144]	@ (800390c <nmea_parse+0x158>)
 800387c:	4618      	mov	r0, r3
 800387e:	f00d fc45 	bl	801110c <strstr>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8003888:	4a1c      	ldr	r2, [pc, #112]	@ (80038fc <nmea_parse+0x148>)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fe92 	bl	80035bc <nmea_GPGSA>
 8003898:	e012      	b.n	80038c0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 800389a:	4a18      	ldr	r2, [pc, #96]	@ (80038fc <nmea_parse+0x148>)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a2:	491b      	ldr	r1, [pc, #108]	@ (8003910 <nmea_parse+0x15c>)
 80038a4:	4618      	mov	r0, r3
 80038a6:	f00d fc31 	bl	801110c <strstr>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 80038b0:	4a12      	ldr	r2, [pc, #72]	@ (80038fc <nmea_parse+0x148>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fcac 	bl	8003218 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	dba8      	blt.n	8003820 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	e009      	b.n	80038e8 <nmea_parse+0x134>
 80038d4:	4a09      	ldr	r2, [pc, #36]	@ (80038fc <nmea_parse+0x148>)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038dc:	4618      	mov	r0, r3
 80038de:	f00b fb2f 	bl	800ef40 <free>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	dbf1      	blt.n	80038d4 <nmea_parse+0x120>


}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000e20 	.word	0x20000e20
 8003900:	08013a94 	.word	0x08013a94
 8003904:	08013a98 	.word	0x08013a98
 8003908:	08013a9c 	.word	0x08013a9c
 800390c:	08013aa4 	.word	0x08013aa4
 8003910:	08013aac 	.word	0x08013aac

08003914 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003918:	4b1b      	ldr	r3, [pc, #108]	@ (8003988 <MX_SPI1_Init+0x74>)
 800391a:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <MX_SPI1_Init+0x78>)
 800391c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800391e:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <MX_SPI1_Init+0x74>)
 8003920:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003926:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <MX_SPI1_Init+0x74>)
 8003928:	2200      	movs	r2, #0
 800392a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800392c:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <MX_SPI1_Init+0x74>)
 800392e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003932:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003934:	4b14      	ldr	r3, [pc, #80]	@ (8003988 <MX_SPI1_Init+0x74>)
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800393a:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <MX_SPI1_Init+0x74>)
 800393c:	2200      	movs	r2, #0
 800393e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003940:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <MX_SPI1_Init+0x74>)
 8003942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003946:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003948:	4b0f      	ldr	r3, [pc, #60]	@ (8003988 <MX_SPI1_Init+0x74>)
 800394a:	2210      	movs	r2, #16
 800394c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800394e:	4b0e      	ldr	r3, [pc, #56]	@ (8003988 <MX_SPI1_Init+0x74>)
 8003950:	2200      	movs	r2, #0
 8003952:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003954:	4b0c      	ldr	r3, [pc, #48]	@ (8003988 <MX_SPI1_Init+0x74>)
 8003956:	2200      	movs	r2, #0
 8003958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800395a:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <MX_SPI1_Init+0x74>)
 800395c:	2200      	movs	r2, #0
 800395e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003960:	4b09      	ldr	r3, [pc, #36]	@ (8003988 <MX_SPI1_Init+0x74>)
 8003962:	2207      	movs	r2, #7
 8003964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003966:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <MX_SPI1_Init+0x74>)
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <MX_SPI1_Init+0x74>)
 800396e:	2208      	movs	r2, #8
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003972:	4805      	ldr	r0, [pc, #20]	@ (8003988 <MX_SPI1_Init+0x74>)
 8003974:	f005 f8e0 	bl	8008b38 <HAL_SPI_Init>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800397e:	f7ff fbfb 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000e5c 	.word	0x20000e5c
 800398c:	40013000 	.word	0x40013000

08003990 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	@ 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a17      	ldr	r2, [pc, #92]	@ (8003a0c <HAL_SPI_MspInit+0x7c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d128      	bne.n	8003a04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039b2:	4b17      	ldr	r3, [pc, #92]	@ (8003a10 <HAL_SPI_MspInit+0x80>)
 80039b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b6:	4a16      	ldr	r2, [pc, #88]	@ (8003a10 <HAL_SPI_MspInit+0x80>)
 80039b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80039be:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <HAL_SPI_MspInit+0x80>)
 80039c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ca:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <HAL_SPI_MspInit+0x80>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ce:	4a10      	ldr	r2, [pc, #64]	@ (8003a10 <HAL_SPI_MspInit+0x80>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <HAL_SPI_MspInit+0x80>)
 80039d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039e2:	23e0      	movs	r3, #224	@ 0xe0
 80039e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e6:	2302      	movs	r3, #2
 80039e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	2300      	movs	r3, #0
 80039f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039f2:	2305      	movs	r3, #5
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	4619      	mov	r1, r3
 80039fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a00:	f002 fff4 	bl	80069ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a04:	bf00      	nop
 8003a06:	3728      	adds	r7, #40	@ 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40013000 	.word	0x40013000
 8003a10:	40021000 	.word	0x40021000

08003a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a26:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	4a08      	ldr	r2, [pc, #32]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003a4a:	f004 f94b 	bl	8007ce4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000

08003a5c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003a60:	4b0e      	ldr	r3, [pc, #56]	@ (8003a9c <SDTimer_Handler+0x40>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <SDTimer_Handler+0x1c>
    Timer1--;
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <SDTimer_Handler+0x40>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <SDTimer_Handler+0x40>)
 8003a76:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <SDTimer_Handler+0x44>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <SDTimer_Handler+0x34>
    Timer2--;
 8003a82:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <SDTimer_Handler+0x44>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <SDTimer_Handler+0x44>)
 8003a8e:	701a      	strb	r2, [r3, #0]
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	200003b0 	.word	0x200003b0
 8003aa0:	200003b1 	.word	0x200003b1

08003aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003aa8:	bf00      	nop
 8003aaa:	e7fd      	b.n	8003aa8 <NMI_Handler+0x4>

08003aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <HardFault_Handler+0x4>

08003ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <MemManage_Handler+0x4>

08003abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <BusFault_Handler+0x4>

08003ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <UsageFault_Handler+0x4>

08003acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <SysTick_Handler+0x30>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <SysTick_Handler+0x30>)
 8003b08:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8003b0a:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <SysTick_Handler+0x30>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b09      	cmp	r3, #9
 8003b12:	d904      	bls.n	8003b1e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8003b14:	4b04      	ldr	r3, [pc, #16]	@ (8003b28 <SysTick_Handler+0x30>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8003b1a:	f7ff ff9f 	bl	8003a5c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b1e:	f001 f899 	bl	8004c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000ec8 	.word	0x20000ec8

08003b2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003b30:	2001      	movs	r0, #1
 8003b32:	f003 f8f5 	bl	8006d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  hauteur_0 = myDataGPS.altitude;
 8003b36:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <EXTI0_IRQHandler+0x20>)
 8003b38:	edd3 7a07 	vldr	s15, [r3, #28]
 8003b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b40:	ee17 2a90 	vmov	r2, s15
 8003b44:	4b02      	ldr	r3, [pc, #8]	@ (8003b50 <EXTI0_IRQHandler+0x24>)
 8003b46:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000c90 	.word	0x20000c90
 8003b50:	20000d18 	.word	0x20000d18

08003b54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b58:	2002      	movs	r0, #2
 8003b5a:	f003 f8e1 	bl	8006d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003b66:	2004      	movs	r0, #4
 8003b68:	f003 f8da 	bl	8006d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003b6c:	bf00      	nop
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003b74:	4802      	ldr	r0, [pc, #8]	@ (8003b80 <DMA1_Channel1_IRQHandler+0x10>)
 8003b76:	f002 fdde 	bl	8006736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	2000114c 	.word	0x2000114c

08003b84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003b88:	4802      	ldr	r0, [pc, #8]	@ (8003b94 <DMA1_Channel2_IRQHandler+0x10>)
 8003b8a:	f002 fdd4 	bl	8006736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200011ac 	.word	0x200011ac

08003b98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b9c:	4802      	ldr	r0, [pc, #8]	@ (8003ba8 <DMA1_Channel3_IRQHandler+0x10>)
 8003b9e:	f002 fdca 	bl	8006736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200002ec 	.word	0x200002ec

08003bac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003bb0:	4802      	ldr	r0, [pc, #8]	@ (8003bbc <DMA1_Channel4_IRQHandler+0x10>)
 8003bb2:	f002 fdc0 	bl	8006736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	2000120c 	.word	0x2000120c

08003bc0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003bc4:	4802      	ldr	r0, [pc, #8]	@ (8003bd0 <DMA1_Channel5_IRQHandler+0x10>)
 8003bc6:	f002 fdb6 	bl	8006736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	2000034c 	.word	0x2000034c

08003bd4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8003bd8:	4802      	ldr	r0, [pc, #8]	@ (8003be4 <DMA1_Channel6_IRQHandler+0x10>)
 8003bda:	f002 fdac 	bl	8006736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000fbc 	.word	0x20000fbc

08003be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bec:	4802      	ldr	r0, [pc, #8]	@ (8003bf8 <TIM2_IRQHandler+0x10>)
 8003bee:	f006 fa7f 	bl	800a0f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000ed8 	.word	0x20000ed8

08003bfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c00:	4802      	ldr	r0, [pc, #8]	@ (8003c0c <TIM3_IRQHandler+0x10>)
 8003c02:	f006 fa75 	bl	800a0f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000f24 	.word	0x20000f24

08003c10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c14:	4809      	ldr	r0, [pc, #36]	@ (8003c3c <TIM4_IRQHandler+0x2c>)
 8003c16:	f006 fa6b 	bl	800a0f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  compteur += 1 ;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	@ (8003c40 <TIM4_IRQHandler+0x30>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	4a07      	ldr	r2, [pc, #28]	@ (8003c40 <TIM4_IRQHandler+0x30>)
 8003c22:	6013      	str	r3, [r2, #0]
  if (compteur == 100){
 8003c24:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <TIM4_IRQHandler+0x30>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b64      	cmp	r3, #100	@ 0x64
 8003c2a:	d105      	bne.n	8003c38 <TIM4_IRQHandler+0x28>
	  flag_sensor = 1;
 8003c2c:	4b05      	ldr	r3, [pc, #20]	@ (8003c44 <TIM4_IRQHandler+0x34>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
	  compteur = 0;
 8003c32:	4b03      	ldr	r3, [pc, #12]	@ (8003c40 <TIM4_IRQHandler+0x30>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
  }


  /* USER CODE END TIM4_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000f70 	.word	0x20000f70
 8003c40:	20000ec4 	.word	0x20000ec4
 8003c44:	20000ec0 	.word	0x20000ec0

08003c48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c4c:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <USART1_IRQHandler+0x10>)
 8003c4e:	f007 fe0f 	bl	800b870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200010b8 	.word	0x200010b8

08003c5c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003c60:	4802      	ldr	r0, [pc, #8]	@ (8003c6c <LPUART1_IRQHandler+0x10>)
 8003c62:	f007 fe05 	bl	800b870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20001024 	.word	0x20001024

08003c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return 1;
 8003c74:	2301      	movs	r3, #1
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_kill>:

int _kill(int pid, int sig)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c8a:	f00d faaf 	bl	80111ec <__errno>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2216      	movs	r2, #22
 8003c92:	601a      	str	r2, [r3, #0]
  return -1;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <_exit>:

void _exit (int status)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ffe7 	bl	8003c80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cb2:	bf00      	nop
 8003cb4:	e7fd      	b.n	8003cb2 <_exit+0x12>

08003cb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b086      	sub	sp, #24
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e00a      	b.n	8003cde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cc8:	f3af 8000 	nop.w
 8003ccc:	4601      	mov	r1, r0
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	60ba      	str	r2, [r7, #8]
 8003cd4:	b2ca      	uxtb	r2, r1
 8003cd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	dbf0      	blt.n	8003cc8 <_read+0x12>
  }

  return len;
 8003ce6:	687b      	ldr	r3, [r7, #4]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e009      	b.n	8003d16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	60ba      	str	r2, [r7, #8]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	3301      	adds	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	dbf1      	blt.n	8003d02 <_write+0x12>
  }
  return len;
 8003d1e:	687b      	ldr	r3, [r7, #4]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_close>:

int _close(int file)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d50:	605a      	str	r2, [r3, #4]
  return 0;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <_isatty>:

int _isatty(int file)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d68:	2301      	movs	r3, #1
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d98:	4a14      	ldr	r2, [pc, #80]	@ (8003dec <_sbrk+0x5c>)
 8003d9a:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <_sbrk+0x60>)
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003da4:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <_sbrk+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <_sbrk+0x64>)
 8003dae:	4a12      	ldr	r2, [pc, #72]	@ (8003df8 <_sbrk+0x68>)
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003db2:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <_sbrk+0x64>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d207      	bcs.n	8003dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dc0:	f00d fa14 	bl	80111ec <__errno>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	e009      	b.n	8003de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dd0:	4b08      	ldr	r3, [pc, #32]	@ (8003df4 <_sbrk+0x64>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dd6:	4b07      	ldr	r3, [pc, #28]	@ (8003df4 <_sbrk+0x64>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	4a05      	ldr	r2, [pc, #20]	@ (8003df4 <_sbrk+0x64>)
 8003de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20008000 	.word	0x20008000
 8003df0:	00000400 	.word	0x00000400
 8003df4:	20000ecc 	.word	0x20000ecc
 8003df8:	200016d8 	.word	0x200016d8

08003dfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e00:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <SystemInit+0x20>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	4a05      	ldr	r2, [pc, #20]	@ (8003e1c <SystemInit+0x20>)
 8003e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <INIT_PERM_TARVOS>:

	HAL_UART_Transmit(&hlpuart1,"yo",sizeof("yo"),100);
	HAL_Delay(1000);
}

void INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08e      	sub	sp, #56	@ 0x38
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	460a      	mov	r2, r1
 8003e2a:	71fb      	strb	r3, [r7, #7]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71bb      	strb	r3, [r7, #6]
    // On passe le module en mode 1 byte (sécurité)
    uint8_t mode1[6] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 8003e30:	4a4a      	ldr	r2, [pc, #296]	@ (8003f5c <INIT_PERM_TARVOS+0x13c>)
 8003e32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e3a:	6018      	str	r0, [r3, #0]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	8019      	strh	r1, [r3, #0]
    mode1[5] = Get_CRC8(mode1, 5); // Ajout du CRC
 8003e40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003e44:	2105      	movs	r1, #5
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f892 	bl	8003f70 <Get_CRC8>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, sizeof(mode1), 500);
 8003e52:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8003e56:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e5a:	2206      	movs	r2, #6
 8003e5c:	4840      	ldr	r0, [pc, #256]	@ (8003f60 <INIT_PERM_TARVOS+0x140>)
 8003e5e:	f007 fb1f 	bl	800b4a0 <HAL_UART_Transmit>

    // On change le canal (la fréquence du module)
    uint8_t frequence[6] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 8003e62:	4a40      	ldr	r2, [pc, #256]	@ (8003f64 <INIT_PERM_TARVOS+0x144>)
 8003e64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e6c:	6018      	str	r0, [r3, #0]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	8019      	strh	r1, [r3, #0]
    frequence[5] = Get_CRC8(frequence, 5); // Ajout du CRC
 8003e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e76:	2105      	movs	r1, #5
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 f879 	bl	8003f70 <Get_CRC8>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    HAL_UART_Transmit(&hlpuart1, frequence, sizeof(frequence), 500);
 8003e84:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003e88:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e8c:	2206      	movs	r2, #6
 8003e8e:	4834      	ldr	r0, [pc, #208]	@ (8003f60 <INIT_PERM_TARVOS+0x140>)
 8003e90:	f007 fb06 	bl	800b4a0 <HAL_UART_Transmit>

    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[6] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8003e94:	4a34      	ldr	r2, [pc, #208]	@ (8003f68 <INIT_PERM_TARVOS+0x148>)
 8003e96:	f107 0320 	add.w	r3, r7, #32
 8003e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e9e:	6018      	str	r0, [r3, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	8019      	strh	r1, [r3, #0]
    puissance[5] = Get_CRC8(puissance, 5); // Ajout du CRC
 8003ea4:	f107 0320 	add.w	r3, r7, #32
 8003ea8:	2105      	movs	r1, #5
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f860 	bl	8003f70 <Get_CRC8>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    HAL_UART_Transmit(&hlpuart1, puissance, sizeof(puissance), 500);
 8003eb6:	f107 0120 	add.w	r1, r7, #32
 8003eba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ebe:	2206      	movs	r2, #6
 8003ec0:	4827      	ldr	r0, [pc, #156]	@ (8003f60 <INIT_PERM_TARVOS+0x140>)
 8003ec2:	f007 faed 	bl	800b4a0 <HAL_UART_Transmit>

    // On modifie l'adresse de la source
    uint8_t Sadrr[6] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	763b      	strb	r3, [r7, #24]
 8003eca:	2309      	movs	r3, #9
 8003ecc:	767b      	strb	r3, [r7, #25]
 8003ece:	2302      	movs	r3, #2
 8003ed0:	76bb      	strb	r3, [r7, #26]
 8003ed2:	230b      	movs	r3, #11
 8003ed4:	76fb      	strb	r3, [r7, #27]
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	773b      	strb	r3, [r7, #28]
 8003eda:	2300      	movs	r3, #0
 8003edc:	777b      	strb	r3, [r7, #29]
    Sadrr[5] = Get_CRC8(Sadrr, 5); // Ajout du CRC
 8003ede:	f107 0318 	add.w	r3, r7, #24
 8003ee2:	2105      	movs	r1, #5
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 f843 	bl	8003f70 <Get_CRC8>
 8003eea:	4603      	mov	r3, r0
 8003eec:	777b      	strb	r3, [r7, #29]
    HAL_UART_Transmit(&hlpuart1, Sadrr, sizeof(Sadrr), 500);
 8003eee:	f107 0118 	add.w	r1, r7, #24
 8003ef2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ef6:	2206      	movs	r2, #6
 8003ef8:	4819      	ldr	r0, [pc, #100]	@ (8003f60 <INIT_PERM_TARVOS+0x140>)
 8003efa:	f007 fad1 	bl	800b4a0 <HAL_UART_Transmit>

    // On modifie l'adresse avec qui on veut communiquer
	uint8_t send[6] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8003efe:	2302      	movs	r3, #2
 8003f00:	743b      	strb	r3, [r7, #16]
 8003f02:	2309      	movs	r3, #9
 8003f04:	747b      	strb	r3, [r7, #17]
 8003f06:	2302      	movs	r3, #2
 8003f08:	74bb      	strb	r3, [r7, #18]
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	74fb      	strb	r3, [r7, #19]
 8003f0e:	79bb      	ldrb	r3, [r7, #6]
 8003f10:	753b      	strb	r3, [r7, #20]
 8003f12:	2300      	movs	r3, #0
 8003f14:	757b      	strb	r3, [r7, #21]
	send[5] = Get_CRC8(send, 5); // Ajout du CRC
 8003f16:	f107 0310 	add.w	r3, r7, #16
 8003f1a:	2105      	movs	r1, #5
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f827 	bl	8003f70 <Get_CRC8>
 8003f22:	4603      	mov	r3, r0
 8003f24:	757b      	strb	r3, [r7, #21]
	HAL_UART_Transmit(&hlpuart1, send, sizeof(send), 500);
 8003f26:	f107 0110 	add.w	r1, r7, #16
 8003f2a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003f2e:	2206      	movs	r2, #6
 8003f30:	480b      	ldr	r0, [pc, #44]	@ (8003f60 <INIT_PERM_TARVOS+0x140>)
 8003f32:	f007 fab5 	bl	800b4a0 <HAL_UART_Transmit>

    // On redémarre le module pour mettre à jour les paramètres
    uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <INIT_PERM_TARVOS+0x14c>)
 8003f38:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, restart, sizeof(restart), 500);
 8003f3a:	f107 010c 	add.w	r1, r7, #12
 8003f3e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003f42:	2204      	movs	r2, #4
 8003f44:	4806      	ldr	r0, [pc, #24]	@ (8003f60 <INIT_PERM_TARVOS+0x140>)
 8003f46:	f007 faab 	bl	800b4a0 <HAL_UART_Transmit>

    HAL_Delay(1000);
 8003f4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f4e:	f000 fe9f 	bl	8004c90 <HAL_Delay>
}
 8003f52:	bf00      	nop
 8003f54:	3738      	adds	r7, #56	@ 0x38
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	08013ac0 	.word	0x08013ac0
 8003f60:	20001024 	.word	0x20001024
 8003f64:	08013ac8 	.word	0x08013ac8
 8003f68:	08013ad0 	.word	0x08013ad0
 8003f6c:	07000502 	.word	0x07000502

08003f70 <Get_CRC8>:
		HAL_UART_Transmit(&hlpuart1,command,sizeof(command),500);
	}
}
//Calcule du CRC
uint8_t Get_CRC8(uint8_t * bufP, uint16_t len)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
uint8_t crc = 0x00;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	81bb      	strh	r3, [r7, #12]
 8003f84:	e009      	b.n	8003f9a <Get_CRC8+0x2a>
{
crc ^= bufP[i];
 8003f86:	89bb      	ldrh	r3, [r7, #12]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	4053      	eors	r3, r2
 8003f92:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8003f94:	89bb      	ldrh	r3, [r7, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	81bb      	strh	r3, [r7, #12]
 8003f9a:	89ba      	ldrh	r2, [r7, #12]
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3f1      	bcc.n	8003f86 <Get_CRC8+0x16>
}
return crc;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <SEND_DATA_NETW>:

int SEND_DATA_NETW(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 8003fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb4:	b08a      	sub	sp, #40	@ 0x28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	72fb      	strb	r3, [r7, #11]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	72bb      	strb	r3, [r7, #10]
 8003fc4:	466b      	mov	r3, sp
 8003fc6:	469a      	mov	sl, r3
	uint8_t trame_reception[5];
	// Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[HEAD + length + CRC]; // +1 pour le CRC
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1d9e      	adds	r6, r3, #6
 8003fcc:	1e73      	subs	r3, r6, #1
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4690      	mov	r8, r2
 8003fd6:	4699      	mov	r9, r3
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fec:	4632      	mov	r2, r6
 8003fee:	2300      	movs	r3, #0
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	461d      	mov	r5, r3
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	00eb      	lsls	r3, r5, #3
 8003ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	4633      	mov	r3, r6
 8004006:	3307      	adds	r3, #7
 8004008:	08db      	lsrs	r3, r3, #3
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	ebad 0d03 	sub.w	sp, sp, r3
 8004010:	466b      	mov	r3, sp
 8004012:	3300      	adds	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	2202      	movs	r2, #2
 800401a:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2201      	movs	r2, #1
 8004020:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	3302      	adds	r3, #2
 8004028:	b2da      	uxtb	r2, r3
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	7afa      	ldrb	r2, [r7, #11]
 8004032:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	7aba      	ldrb	r2, [r7, #10]
 8004038:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (int i = 0; i < length; i++) {
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	e00a      	b.n	8004056 <SEND_DATA_NETW+0xa6>
        trame[5 + i] = data[i];
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	441a      	add	r2, r3
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	3305      	adds	r3, #5
 800404a:	7811      	ldrb	r1, [r2, #0]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; i++) {
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	3301      	adds	r3, #1
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
 8004056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	dbf0      	blt.n	8004040 <SEND_DATA_NETW+0x90>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	b29b      	uxth	r3, r3
 8004062:	3305      	adds	r3, #5
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	1d5c      	adds	r4, r3, #5
 800406a:	4611      	mov	r1, r2
 800406c:	69f8      	ldr	r0, [r7, #28]
 800406e:	f7ff ff7f 	bl	8003f70 <Get_CRC8>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 800407a:	b2b2      	uxth	r2, r6
 800407c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004080:	69f9      	ldr	r1, [r7, #28]
 8004082:	480a      	ldr	r0, [pc, #40]	@ (80040ac <SEND_DATA_NETW+0xfc>)
 8004084:	f007 fa0c 	bl	800b4a0 <HAL_UART_Transmit>

    if (copyTarvosBuffer(tarvos_RX_Tampon)[3]== FAIL){
 8004088:	4809      	ldr	r0, [pc, #36]	@ (80040b0 <SEND_DATA_NETW+0x100>)
 800408a:	f000 f813 	bl	80040b4 <copyTarvosBuffer>
 800408e:	4603      	mov	r3, r0
 8004090:	3303      	adds	r3, #3
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <SEND_DATA_NETW+0xec>
    	return ERROR;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <SEND_DATA_NETW+0xee>
    }
    else { return SUCCESS;}
 800409c:	2301      	movs	r3, #1
 800409e:	46d5      	mov	sp, sl

}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3728      	adds	r7, #40	@ 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040aa:	bf00      	nop
 80040ac:	20001024 	.word	0x20001024
 80040b0:	200008c4 	.word	0x200008c4

080040b4 <copyTarvosBuffer>:


uint8_t* copyTarvosBuffer() {
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
    static uint8_t buffer[5];  // Utilisation de static pour éviter la perte des données
    int p = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
    uint8_t a;
    for (int i = 0; i < TarvosRxTamponSize; i++) {
 80040be:	2300      	movs	r3, #0
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	e01e      	b.n	8004102 <copyTarvosBuffer+0x4e>
        if (tarvos_RX_Tampon[i] == 0x02 && p == 0 && tarvos_RX_Tampon[i+1] == 0x40) {
 80040c4:	4a14      	ldr	r2, [pc, #80]	@ (8004118 <copyTarvosBuffer+0x64>)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d115      	bne.n	80040fc <copyTarvosBuffer+0x48>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d112      	bne.n	80040fc <copyTarvosBuffer+0x48>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	3301      	adds	r3, #1
 80040da:	4a0f      	ldr	r2, [pc, #60]	@ (8004118 <copyTarvosBuffer+0x64>)
 80040dc:	5cd3      	ldrb	r3, [r2, r3]
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d10c      	bne.n	80040fc <copyTarvosBuffer+0x48>
            if (i + 5 <= TarvosRxTamponSize) {  // Vérification pour éviter un dépassement de mémoire
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b19      	cmp	r3, #25
 80040e6:	dc09      	bgt.n	80040fc <copyTarvosBuffer+0x48>
                memcpy(buffer, &tarvos_RX_Tampon[i], 5);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004118 <copyTarvosBuffer+0x64>)
 80040ec:	441a      	add	r2, r3
 80040ee:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <copyTarvosBuffer+0x68>)
 80040f0:	6810      	ldr	r0, [r2, #0]
 80040f2:	6018      	str	r0, [r3, #0]
 80040f4:	7912      	ldrb	r2, [r2, #4]
 80040f6:	711a      	strb	r2, [r3, #4]
                p = 1;
 80040f8:	2301      	movs	r3, #1
 80040fa:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < TarvosRxTamponSize; i++) {
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	3301      	adds	r3, #1
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b1d      	cmp	r3, #29
 8004106:	dddd      	ble.n	80040c4 <copyTarvosBuffer+0x10>
            }
        }
    }
    return buffer;
 8004108:	4b04      	ldr	r3, [pc, #16]	@ (800411c <copyTarvosBuffer+0x68>)
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	200008c4 	.word	0x200008c4
 800411c:	20000ed0 	.word	0x20000ed0

08004120 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004126:	f107 031c 	add.w	r3, r7, #28
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004132:	463b      	mov	r3, r7
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	611a      	str	r2, [r3, #16]
 8004140:	615a      	str	r2, [r3, #20]
 8004142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004144:	4b21      	ldr	r3, [pc, #132]	@ (80041cc <MX_TIM2_Init+0xac>)
 8004146:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800414a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800414c:	4b1f      	ldr	r3, [pc, #124]	@ (80041cc <MX_TIM2_Init+0xac>)
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004152:	4b1e      	ldr	r3, [pc, #120]	@ (80041cc <MX_TIM2_Init+0xac>)
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8004158:	4b1c      	ldr	r3, [pc, #112]	@ (80041cc <MX_TIM2_Init+0xac>)
 800415a:	224f      	movs	r2, #79	@ 0x4f
 800415c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800415e:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <MX_TIM2_Init+0xac>)
 8004160:	2200      	movs	r2, #0
 8004162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004164:	4b19      	ldr	r3, [pc, #100]	@ (80041cc <MX_TIM2_Init+0xac>)
 8004166:	2200      	movs	r2, #0
 8004168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800416a:	4818      	ldr	r0, [pc, #96]	@ (80041cc <MX_TIM2_Init+0xac>)
 800416c:	f005 fb58 	bl	8009820 <HAL_TIM_PWM_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004176:	f7fe ffff 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800417e:	2300      	movs	r3, #0
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004182:	f107 031c 	add.w	r3, r7, #28
 8004186:	4619      	mov	r1, r3
 8004188:	4810      	ldr	r0, [pc, #64]	@ (80041cc <MX_TIM2_Init+0xac>)
 800418a:	f007 f871 	bl	800b270 <HAL_TIMEx_MasterConfigSynchronization>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004194:	f7fe fff0 	bl	8003178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004198:	2360      	movs	r3, #96	@ 0x60
 800419a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041a8:	463b      	mov	r3, r7
 80041aa:	220c      	movs	r2, #12
 80041ac:	4619      	mov	r1, r3
 80041ae:	4807      	ldr	r0, [pc, #28]	@ (80041cc <MX_TIM2_Init+0xac>)
 80041b0:	f006 f8ee 	bl	800a390 <HAL_TIM_PWM_ConfigChannel>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80041ba:	f7fe ffdd 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80041be:	4803      	ldr	r0, [pc, #12]	@ (80041cc <MX_TIM2_Init+0xac>)
 80041c0:	f000 f986 	bl	80044d0 <HAL_TIM_MspPostInit>

}
 80041c4:	bf00      	nop
 80041c6:	3728      	adds	r7, #40	@ 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000ed8 	.word	0x20000ed8

080041d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	@ 0x38
 80041d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	605a      	str	r2, [r3, #4]
 80041e0:	609a      	str	r2, [r3, #8]
 80041e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041e4:	f107 031c 	add.w	r3, r7, #28
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041f0:	463b      	mov	r3, r7
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	611a      	str	r2, [r3, #16]
 80041fe:	615a      	str	r2, [r3, #20]
 8004200:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004202:	4b2d      	ldr	r3, [pc, #180]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 8004204:	4a2d      	ldr	r2, [pc, #180]	@ (80042bc <MX_TIM3_Init+0xec>)
 8004206:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8004208:	4b2b      	ldr	r3, [pc, #172]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 800420a:	223f      	movs	r2, #63	@ 0x3f
 800420c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800420e:	4b2a      	ldr	r3, [pc, #168]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 8004210:	2200      	movs	r2, #0
 8004212:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8004214:	4b28      	ldr	r3, [pc, #160]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 8004216:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800421a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800421c:	4b26      	ldr	r3, [pc, #152]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 800421e:	2200      	movs	r2, #0
 8004220:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004222:	4b25      	ldr	r3, [pc, #148]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 8004224:	2200      	movs	r2, #0
 8004226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004228:	4823      	ldr	r0, [pc, #140]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 800422a:	f005 fa37 	bl	800969c <HAL_TIM_Base_Init>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004234:	f7fe ffa0 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800423e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004242:	4619      	mov	r1, r3
 8004244:	481c      	ldr	r0, [pc, #112]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 8004246:	f006 f9b7 	bl	800a5b8 <HAL_TIM_ConfigClockSource>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004250:	f7fe ff92 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004254:	4818      	ldr	r0, [pc, #96]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 8004256:	f005 fae3 	bl	8009820 <HAL_TIM_PWM_Init>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004260:	f7fe ff8a 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800426c:	f107 031c 	add.w	r3, r7, #28
 8004270:	4619      	mov	r1, r3
 8004272:	4811      	ldr	r0, [pc, #68]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 8004274:	f006 fffc 	bl	800b270 <HAL_TIMEx_MasterConfigSynchronization>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800427e:	f7fe ff7b 	bl	8003178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004282:	2360      	movs	r3, #96	@ 0x60
 8004284:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8004286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800428a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800428c:	2300      	movs	r3, #0
 800428e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004294:	463b      	mov	r3, r7
 8004296:	2200      	movs	r2, #0
 8004298:	4619      	mov	r1, r3
 800429a:	4807      	ldr	r0, [pc, #28]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 800429c:	f006 f878 	bl	800a390 <HAL_TIM_PWM_ConfigChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80042a6:	f7fe ff67 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80042aa:	4803      	ldr	r0, [pc, #12]	@ (80042b8 <MX_TIM3_Init+0xe8>)
 80042ac:	f000 f910 	bl	80044d0 <HAL_TIM_MspPostInit>

}
 80042b0:	bf00      	nop
 80042b2:	3738      	adds	r7, #56	@ 0x38
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20000f24 	.word	0x20000f24
 80042bc:	40000400 	.word	0x40000400

080042c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08e      	sub	sp, #56	@ 0x38
 80042c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042d4:	f107 031c 	add.w	r3, r7, #28
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042e0:	463b      	mov	r3, r7
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	609a      	str	r2, [r3, #8]
 80042ea:	60da      	str	r2, [r3, #12]
 80042ec:	611a      	str	r2, [r3, #16]
 80042ee:	615a      	str	r2, [r3, #20]
 80042f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042f2:	4b2b      	ldr	r3, [pc, #172]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 80042f4:	4a2b      	ldr	r2, [pc, #172]	@ (80043a4 <MX_TIM4_Init+0xe4>)
 80042f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 80042f8:	4b29      	ldr	r3, [pc, #164]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 80042fa:	223f      	movs	r2, #63	@ 0x3f
 80042fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042fe:	4b28      	ldr	r3, [pc, #160]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 8004300:	2200      	movs	r2, #0
 8004302:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004304:	4b26      	ldr	r3, [pc, #152]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 8004306:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800430a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800430c:	4b24      	ldr	r3, [pc, #144]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 800430e:	2200      	movs	r2, #0
 8004310:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004312:	4b23      	ldr	r3, [pc, #140]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 8004314:	2200      	movs	r2, #0
 8004316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004318:	4821      	ldr	r0, [pc, #132]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 800431a:	f005 f9bf 	bl	800969c <HAL_TIM_Base_Init>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004324:	f7fe ff28 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800432e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004332:	4619      	mov	r1, r3
 8004334:	481a      	ldr	r0, [pc, #104]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 8004336:	f006 f93f 	bl	800a5b8 <HAL_TIM_ConfigClockSource>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004340:	f7fe ff1a 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004344:	4816      	ldr	r0, [pc, #88]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 8004346:	f005 fa6b 	bl	8009820 <HAL_TIM_PWM_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004350:	f7fe ff12 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004354:	2320      	movs	r3, #32
 8004356:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800435c:	f107 031c 	add.w	r3, r7, #28
 8004360:	4619      	mov	r1, r3
 8004362:	480f      	ldr	r0, [pc, #60]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 8004364:	f006 ff84 	bl	800b270 <HAL_TIMEx_MasterConfigSynchronization>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800436e:	f7fe ff03 	bl	8003178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004372:	2360      	movs	r3, #96	@ 0x60
 8004374:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004382:	463b      	mov	r3, r7
 8004384:	2208      	movs	r2, #8
 8004386:	4619      	mov	r1, r3
 8004388:	4805      	ldr	r0, [pc, #20]	@ (80043a0 <MX_TIM4_Init+0xe0>)
 800438a:	f006 f801 	bl	800a390 <HAL_TIM_PWM_ConfigChannel>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004394:	f7fe fef0 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004398:	bf00      	nop
 800439a:	3738      	adds	r7, #56	@ 0x38
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000f70 	.word	0x20000f70
 80043a4:	40000800 	.word	0x40000800

080043a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b8:	d13e      	bne.n	8004438 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043ba:	4b21      	ldr	r3, [pc, #132]	@ (8004440 <HAL_TIM_PWM_MspInit+0x98>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043be:	4a20      	ldr	r2, [pc, #128]	@ (8004440 <HAL_TIM_PWM_MspInit+0x98>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004440 <HAL_TIM_PWM_MspInit+0x98>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel6;
 80043d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 80043d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004448 <HAL_TIM_PWM_MspInit+0xa0>)
 80043d6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_TIM2_CH4;
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 80043da:	223b      	movs	r2, #59	@ 0x3b
 80043dc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043de:	4b19      	ldr	r3, [pc, #100]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 80043e0:	2210      	movs	r2, #16
 80043e2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e4:	4b17      	ldr	r3, [pc, #92]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80043ea:	4b16      	ldr	r3, [pc, #88]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 80043ec:	2280      	movs	r2, #128	@ 0x80
 80043ee:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80043f0:	4b14      	ldr	r3, [pc, #80]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 80043f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043f6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80043f8:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 80043fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043fe:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8004400:	4b10      	ldr	r3, [pc, #64]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 8004402:	2200      	movs	r2, #0
 8004404:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8004406:	4b0f      	ldr	r3, [pc, #60]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 8004408:	2200      	movs	r2, #0
 800440a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 800440c:	480d      	ldr	r0, [pc, #52]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 800440e:	f001 ffaf 	bl	8006370 <HAL_DMA_Init>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8004418:	f7fe feae 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a09      	ldr	r2, [pc, #36]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30
 8004422:	4a08      	ldr	r2, [pc, #32]	@ (8004444 <HAL_TIM_PWM_MspInit+0x9c>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004428:	2200      	movs	r2, #0
 800442a:	2100      	movs	r1, #0
 800442c:	201c      	movs	r0, #28
 800442e:	f001 ff6a 	bl	8006306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004432:	201c      	movs	r0, #28
 8004434:	f001 ff81 	bl	800633a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000
 8004444:	20000fbc 	.word	0x20000fbc
 8004448:	4002006c 	.word	0x4002006c

0800444c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1a      	ldr	r2, [pc, #104]	@ (80044c4 <HAL_TIM_Base_MspInit+0x78>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d114      	bne.n	8004488 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800445e:	4b1a      	ldr	r3, [pc, #104]	@ (80044c8 <HAL_TIM_Base_MspInit+0x7c>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	4a19      	ldr	r2, [pc, #100]	@ (80044c8 <HAL_TIM_Base_MspInit+0x7c>)
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	6593      	str	r3, [r2, #88]	@ 0x58
 800446a:	4b17      	ldr	r3, [pc, #92]	@ (80044c8 <HAL_TIM_Base_MspInit+0x7c>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004476:	2200      	movs	r2, #0
 8004478:	2100      	movs	r1, #0
 800447a:	201d      	movs	r0, #29
 800447c:	f001 ff43 	bl	8006306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004480:	201d      	movs	r0, #29
 8004482:	f001 ff5a 	bl	800633a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004486:	e018      	b.n	80044ba <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0f      	ldr	r2, [pc, #60]	@ (80044cc <HAL_TIM_Base_MspInit+0x80>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d113      	bne.n	80044ba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004492:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <HAL_TIM_Base_MspInit+0x7c>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004496:	4a0c      	ldr	r2, [pc, #48]	@ (80044c8 <HAL_TIM_Base_MspInit+0x7c>)
 8004498:	f043 0304 	orr.w	r3, r3, #4
 800449c:	6593      	str	r3, [r2, #88]	@ 0x58
 800449e:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <HAL_TIM_Base_MspInit+0x7c>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80044aa:	2200      	movs	r2, #0
 80044ac:	2100      	movs	r1, #0
 80044ae:	201e      	movs	r0, #30
 80044b0:	f001 ff29 	bl	8006306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80044b4:	201e      	movs	r0, #30
 80044b6:	f001 ff40 	bl	800633a <HAL_NVIC_EnableIRQ>
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40000800 	.word	0x40000800

080044d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	@ 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f0:	d11d      	bne.n	800452e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f2:	4b21      	ldr	r3, [pc, #132]	@ (8004578 <HAL_TIM_MspPostInit+0xa8>)
 80044f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f6:	4a20      	ldr	r2, [pc, #128]	@ (8004578 <HAL_TIM_MspPostInit+0xa8>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004578 <HAL_TIM_MspPostInit+0xa8>)
 8004500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800450a:	2308      	movs	r3, #8
 800450c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450e:	2302      	movs	r3, #2
 8004510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004516:	2300      	movs	r3, #0
 8004518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800451a:	2301      	movs	r3, #1
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451e:	f107 0314 	add.w	r3, r7, #20
 8004522:	4619      	mov	r1, r3
 8004524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004528:	f002 fa60 	bl	80069ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800452c:	e020      	b.n	8004570 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a12      	ldr	r2, [pc, #72]	@ (800457c <HAL_TIM_MspPostInit+0xac>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d11b      	bne.n	8004570 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004538:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <HAL_TIM_MspPostInit+0xa8>)
 800453a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453c:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <HAL_TIM_MspPostInit+0xa8>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004544:	4b0c      	ldr	r3, [pc, #48]	@ (8004578 <HAL_TIM_MspPostInit+0xa8>)
 8004546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004550:	2340      	movs	r3, #64	@ 0x40
 8004552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004554:	2302      	movs	r3, #2
 8004556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455c:	2300      	movs	r3, #0
 800455e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004560:	2302      	movs	r3, #2
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004564:	f107 0314 	add.w	r3, r7, #20
 8004568:	4619      	mov	r1, r3
 800456a:	4805      	ldr	r0, [pc, #20]	@ (8004580 <HAL_TIM_MspPostInit+0xb0>)
 800456c:	f002 fa3e 	bl	80069ec <HAL_GPIO_Init>
}
 8004570:	bf00      	nop
 8004572:	3728      	adds	r7, #40	@ 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	40000400 	.word	0x40000400
 8004580:	48000800 	.word	0x48000800

08004584 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004588:	4b21      	ldr	r3, [pc, #132]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 800458a:	4a22      	ldr	r2, [pc, #136]	@ (8004614 <MX_LPUART1_UART_Init+0x90>)
 800458c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800458e:	4b20      	ldr	r3, [pc, #128]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 8004590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004594:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004596:	4b1e      	ldr	r3, [pc, #120]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 8004598:	2200      	movs	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800459c:	4b1c      	ldr	r3, [pc, #112]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 800459e:	2200      	movs	r2, #0
 80045a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80045a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045aa:	220c      	movs	r2, #12
 80045ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ae:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045b4:	4b16      	ldr	r3, [pc, #88]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045ba:	4b15      	ldr	r3, [pc, #84]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045bc:	2200      	movs	r2, #0
 80045be:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045c0:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80045c6:	4812      	ldr	r0, [pc, #72]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045c8:	f006 ff1a 	bl	800b400 <HAL_UART_Init>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80045d2:	f7fe fdd1 	bl	8003178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045d6:	2100      	movs	r1, #0
 80045d8:	480d      	ldr	r0, [pc, #52]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045da:	f008 fc11 	bl	800ce00 <HAL_UARTEx_SetTxFifoThreshold>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80045e4:	f7fe fdc8 	bl	8003178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045e8:	2100      	movs	r1, #0
 80045ea:	4809      	ldr	r0, [pc, #36]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045ec:	f008 fc46 	bl	800ce7c <HAL_UARTEx_SetRxFifoThreshold>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80045f6:	f7fe fdbf 	bl	8003178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80045fa:	4805      	ldr	r0, [pc, #20]	@ (8004610 <MX_LPUART1_UART_Init+0x8c>)
 80045fc:	f008 fbc7 	bl	800cd8e <HAL_UARTEx_DisableFifoMode>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8004606:	f7fe fdb7 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20001024 	.word	0x20001024
 8004614:	40008000 	.word	0x40008000

08004618 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800461c:	4b22      	ldr	r3, [pc, #136]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 800461e:	4a23      	ldr	r2, [pc, #140]	@ (80046ac <MX_USART1_UART_Init+0x94>)
 8004620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004622:	4b21      	ldr	r3, [pc, #132]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800462a:	4b1f      	ldr	r3, [pc, #124]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004630:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004632:	2200      	movs	r2, #0
 8004634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004636:	4b1c      	ldr	r3, [pc, #112]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004638:	2200      	movs	r2, #0
 800463a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800463c:	4b1a      	ldr	r3, [pc, #104]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 800463e:	220c      	movs	r2, #12
 8004640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004642:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004644:	2200      	movs	r2, #0
 8004646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004648:	4b17      	ldr	r3, [pc, #92]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 800464a:	2200      	movs	r2, #0
 800464c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800464e:	4b16      	ldr	r3, [pc, #88]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004650:	2200      	movs	r2, #0
 8004652:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004654:	4b14      	ldr	r3, [pc, #80]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004656:	2200      	movs	r2, #0
 8004658:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800465a:	4b13      	ldr	r3, [pc, #76]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 800465c:	2200      	movs	r2, #0
 800465e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004660:	4811      	ldr	r0, [pc, #68]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004662:	f006 fecd 	bl	800b400 <HAL_UART_Init>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800466c:	f7fe fd84 	bl	8003178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004670:	2100      	movs	r1, #0
 8004672:	480d      	ldr	r0, [pc, #52]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004674:	f008 fbc4 	bl	800ce00 <HAL_UARTEx_SetTxFifoThreshold>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800467e:	f7fe fd7b 	bl	8003178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004682:	2100      	movs	r1, #0
 8004684:	4808      	ldr	r0, [pc, #32]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004686:	f008 fbf9 	bl	800ce7c <HAL_UARTEx_SetRxFifoThreshold>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004690:	f7fe fd72 	bl	8003178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004694:	4804      	ldr	r0, [pc, #16]	@ (80046a8 <MX_USART1_UART_Init+0x90>)
 8004696:	f008 fb7a 	bl	800cd8e <HAL_UARTEx_DisableFifoMode>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80046a0:	f7fe fd6a 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80046a4:	bf00      	nop
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	200010b8 	.word	0x200010b8
 80046ac:	40013800 	.word	0x40013800

080046b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b09c      	sub	sp, #112	@ 0x70
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046c8:	f107 0318 	add.w	r3, r7, #24
 80046cc:	2244      	movs	r2, #68	@ 0x44
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f00c fc95 	bl	8011000 <memset>
  if(uartHandle->Instance==LPUART1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a84      	ldr	r2, [pc, #528]	@ (80048ec <HAL_UART_MspInit+0x23c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	f040 8093 	bne.w	8004808 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80046e2:	2320      	movs	r3, #32
 80046e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80046e6:	2300      	movs	r3, #0
 80046e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046ea:	f107 0318 	add.w	r3, r7, #24
 80046ee:	4618      	mov	r0, r3
 80046f0:	f004 f832 	bl	8008758 <HAL_RCCEx_PeriphCLKConfig>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80046fa:	f7fe fd3d 	bl	8003178 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80046fe:	4b7c      	ldr	r3, [pc, #496]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 8004700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004702:	4a7b      	ldr	r2, [pc, #492]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800470a:	4b79      	ldr	r3, [pc, #484]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 800470c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004716:	4b76      	ldr	r3, [pc, #472]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 8004718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471a:	4a75      	ldr	r2, [pc, #468]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004722:	4b73      	ldr	r3, [pc, #460]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 8004724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800472e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004732:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004734:	2302      	movs	r3, #2
 8004736:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473c:	2300      	movs	r3, #0
 800473e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004740:	2308      	movs	r3, #8
 8004742:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004744:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004748:	4619      	mov	r1, r3
 800474a:	486a      	ldr	r0, [pc, #424]	@ (80048f4 <HAL_UART_MspInit+0x244>)
 800474c:	f002 f94e 	bl	80069ec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8004750:	4b69      	ldr	r3, [pc, #420]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 8004752:	4a6a      	ldr	r2, [pc, #424]	@ (80048fc <HAL_UART_MspInit+0x24c>)
 8004754:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004756:	4b68      	ldr	r3, [pc, #416]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 8004758:	2222      	movs	r2, #34	@ 0x22
 800475a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800475c:	4b66      	ldr	r3, [pc, #408]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 800475e:	2200      	movs	r2, #0
 8004760:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004762:	4b65      	ldr	r3, [pc, #404]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 8004764:	2200      	movs	r2, #0
 8004766:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004768:	4b63      	ldr	r3, [pc, #396]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 800476a:	2280      	movs	r2, #128	@ 0x80
 800476c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800476e:	4b62      	ldr	r3, [pc, #392]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 8004770:	2200      	movs	r2, #0
 8004772:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004774:	4b60      	ldr	r3, [pc, #384]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 8004776:	2200      	movs	r2, #0
 8004778:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800477a:	4b5f      	ldr	r3, [pc, #380]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 800477c:	2220      	movs	r2, #32
 800477e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004780:	4b5d      	ldr	r3, [pc, #372]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 8004782:	2200      	movs	r2, #0
 8004784:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004786:	485c      	ldr	r0, [pc, #368]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 8004788:	f001 fdf2 	bl	8006370 <HAL_DMA_Init>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004792:	f7fe fcf1 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a57      	ldr	r2, [pc, #348]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 800479a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800479e:	4a56      	ldr	r2, [pc, #344]	@ (80048f8 <HAL_UART_MspInit+0x248>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80047a4:	4b56      	ldr	r3, [pc, #344]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047a6:	4a57      	ldr	r2, [pc, #348]	@ (8004904 <HAL_UART_MspInit+0x254>)
 80047a8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80047aa:	4b55      	ldr	r3, [pc, #340]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047ac:	2223      	movs	r2, #35	@ 0x23
 80047ae:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047b0:	4b53      	ldr	r3, [pc, #332]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047b2:	2210      	movs	r2, #16
 80047b4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047b6:	4b52      	ldr	r3, [pc, #328]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047bc:	4b50      	ldr	r3, [pc, #320]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047be:	2280      	movs	r2, #128	@ 0x80
 80047c0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80047ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80047da:	4849      	ldr	r0, [pc, #292]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047dc:	f001 fdc8 	bl	8006370 <HAL_DMA_Init>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80047e6:	f7fe fcc7 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a44      	ldr	r2, [pc, #272]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047ee:	67da      	str	r2, [r3, #124]	@ 0x7c
 80047f0:	4a43      	ldr	r2, [pc, #268]	@ (8004900 <HAL_UART_MspInit+0x250>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80047f6:	2200      	movs	r2, #0
 80047f8:	2100      	movs	r1, #0
 80047fa:	205b      	movs	r0, #91	@ 0x5b
 80047fc:	f001 fd83 	bl	8006306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004800:	205b      	movs	r0, #91	@ 0x5b
 8004802:	f001 fd9a 	bl	800633a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004806:	e06c      	b.n	80048e2 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a3e      	ldr	r2, [pc, #248]	@ (8004908 <HAL_UART_MspInit+0x258>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d167      	bne.n	80048e2 <HAL_UART_MspInit+0x232>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004812:	2301      	movs	r3, #1
 8004814:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8004816:	2302      	movs	r3, #2
 8004818:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800481a:	f107 0318 	add.w	r3, r7, #24
 800481e:	4618      	mov	r0, r3
 8004820:	f003 ff9a 	bl	8008758 <HAL_RCCEx_PeriphCLKConfig>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_UART_MspInit+0x17e>
      Error_Handler();
 800482a:	f7fe fca5 	bl	8003178 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800482e:	4b30      	ldr	r3, [pc, #192]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 8004830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004832:	4a2f      	ldr	r2, [pc, #188]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 8004834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004838:	6613      	str	r3, [r2, #96]	@ 0x60
 800483a:	4b2d      	ldr	r3, [pc, #180]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 800483c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004846:	4b2a      	ldr	r3, [pc, #168]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 8004848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484a:	4a29      	ldr	r2, [pc, #164]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 800484c:	f043 0302 	orr.w	r3, r3, #2
 8004850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004852:	4b27      	ldr	r3, [pc, #156]	@ (80048f0 <HAL_UART_MspInit+0x240>)
 8004854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800485e:	23c0      	movs	r3, #192	@ 0xc0
 8004860:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004862:	2302      	movs	r3, #2
 8004864:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004866:	2300      	movs	r3, #0
 8004868:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	2300      	movs	r3, #0
 800486c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800486e:	2307      	movs	r3, #7
 8004870:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004872:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004876:	4619      	mov	r1, r3
 8004878:	481e      	ldr	r0, [pc, #120]	@ (80048f4 <HAL_UART_MspInit+0x244>)
 800487a:	f002 f8b7 	bl	80069ec <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 800487e:	4b23      	ldr	r3, [pc, #140]	@ (800490c <HAL_UART_MspInit+0x25c>)
 8004880:	4a23      	ldr	r2, [pc, #140]	@ (8004910 <HAL_UART_MspInit+0x260>)
 8004882:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004884:	4b21      	ldr	r3, [pc, #132]	@ (800490c <HAL_UART_MspInit+0x25c>)
 8004886:	2218      	movs	r2, #24
 8004888:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800488a:	4b20      	ldr	r3, [pc, #128]	@ (800490c <HAL_UART_MspInit+0x25c>)
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004890:	4b1e      	ldr	r3, [pc, #120]	@ (800490c <HAL_UART_MspInit+0x25c>)
 8004892:	2200      	movs	r2, #0
 8004894:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004896:	4b1d      	ldr	r3, [pc, #116]	@ (800490c <HAL_UART_MspInit+0x25c>)
 8004898:	2280      	movs	r2, #128	@ 0x80
 800489a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800489c:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <HAL_UART_MspInit+0x25c>)
 800489e:	2200      	movs	r2, #0
 80048a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048a2:	4b1a      	ldr	r3, [pc, #104]	@ (800490c <HAL_UART_MspInit+0x25c>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80048a8:	4b18      	ldr	r3, [pc, #96]	@ (800490c <HAL_UART_MspInit+0x25c>)
 80048aa:	2220      	movs	r2, #32
 80048ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048ae:	4b17      	ldr	r3, [pc, #92]	@ (800490c <HAL_UART_MspInit+0x25c>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80048b4:	4815      	ldr	r0, [pc, #84]	@ (800490c <HAL_UART_MspInit+0x25c>)
 80048b6:	f001 fd5b 	bl	8006370 <HAL_DMA_Init>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_UART_MspInit+0x214>
      Error_Handler();
 80048c0:	f7fe fc5a 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a11      	ldr	r2, [pc, #68]	@ (800490c <HAL_UART_MspInit+0x25c>)
 80048c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80048cc:	4a0f      	ldr	r2, [pc, #60]	@ (800490c <HAL_UART_MspInit+0x25c>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80048d2:	2200      	movs	r2, #0
 80048d4:	2100      	movs	r1, #0
 80048d6:	2025      	movs	r0, #37	@ 0x25
 80048d8:	f001 fd15 	bl	8006306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80048dc:	2025      	movs	r0, #37	@ 0x25
 80048de:	f001 fd2c 	bl	800633a <HAL_NVIC_EnableIRQ>
}
 80048e2:	bf00      	nop
 80048e4:	3770      	adds	r7, #112	@ 0x70
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40008000 	.word	0x40008000
 80048f0:	40021000 	.word	0x40021000
 80048f4:	48000400 	.word	0x48000400
 80048f8:	2000114c 	.word	0x2000114c
 80048fc:	40020008 	.word	0x40020008
 8004900:	200011ac 	.word	0x200011ac
 8004904:	4002001c 	.word	0x4002001c
 8004908:	40013800 	.word	0x40013800
 800490c:	2000120c 	.word	0x2000120c
 8004910:	40020044 	.word	0x40020044

08004914 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a53      	ldr	r2, [pc, #332]	@ (8004a70 <HAL_UART_RxCpltCallback+0x15c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d15b      	bne.n	80049de <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 8004926:	4b53      	ldr	r3, [pc, #332]	@ (8004a74 <HAL_UART_RxCpltCallback+0x160>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a53      	ldr	r2, [pc, #332]	@ (8004a78 <HAL_UART_RxCpltCallback+0x164>)
 800492c:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 800492e:	4b52      	ldr	r3, [pc, #328]	@ (8004a78 <HAL_UART_RxCpltCallback+0x164>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8004936:	dd22      	ble.n	800497e <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 8004938:	4b4f      	ldr	r3, [pc, #316]	@ (8004a78 <HAL_UART_RxCpltCallback+0x164>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004942:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 8004944:	4b4c      	ldr	r3, [pc, #304]	@ (8004a78 <HAL_UART_RxCpltCallback+0x164>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a7c <HAL_UART_RxCpltCallback+0x168>)
 800494c:	4413      	add	r3, r2
 800494e:	89fa      	ldrh	r2, [r7, #14]
 8004950:	494b      	ldr	r1, [pc, #300]	@ (8004a80 <HAL_UART_RxCpltCallback+0x16c>)
 8004952:	4618      	mov	r0, r3
 8004954:	f00c fc7f 	bl	8011256 <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 8004958:	4b47      	ldr	r3, [pc, #284]	@ (8004a78 <HAL_UART_RxCpltCallback+0x164>)
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 800495e:	89fb      	ldrh	r3, [r7, #14]
 8004960:	4a47      	ldr	r2, [pc, #284]	@ (8004a80 <HAL_UART_RxCpltCallback+0x16c>)
 8004962:	1899      	adds	r1, r3, r2
 8004964:	89fb      	ldrh	r3, [r7, #14]
 8004966:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800496a:	461a      	mov	r2, r3
 800496c:	4843      	ldr	r0, [pc, #268]	@ (8004a7c <HAL_UART_RxCpltCallback+0x168>)
 800496e:	f00c fc72 	bl	8011256 <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 8004972:	89fb      	ldrh	r3, [r7, #14]
 8004974:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8004978:	4a3e      	ldr	r2, [pc, #248]	@ (8004a74 <HAL_UART_RxCpltCallback+0x160>)
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e01d      	b.n	80049ba <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 800497e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a78 <HAL_UART_RxCpltCallback+0x164>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	4b3d      	ldr	r3, [pc, #244]	@ (8004a7c <HAL_UART_RxCpltCallback+0x168>)
 8004986:	441a      	add	r2, r3
 8004988:	4b3d      	ldr	r3, [pc, #244]	@ (8004a80 <HAL_UART_RxCpltCallback+0x16c>)
 800498a:	4610      	mov	r0, r2
 800498c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8004990:	4602      	mov	r2, r0
 8004992:	4619      	mov	r1, r3
 8004994:	f8d1 c000 	ldr.w	ip, [r1]
 8004998:	684e      	ldr	r6, [r1, #4]
 800499a:	688d      	ldr	r5, [r1, #8]
 800499c:	68c9      	ldr	r1, [r1, #12]
 800499e:	f8c2 c000 	str.w	ip, [r2]
 80049a2:	6056      	str	r6, [r2, #4]
 80049a4:	6095      	str	r5, [r2, #8]
 80049a6:	60d1      	str	r1, [r2, #12]
 80049a8:	3310      	adds	r3, #16
 80049aa:	3010      	adds	r0, #16
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d1ef      	bne.n	8004990 <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 80049b0:	4b31      	ldr	r3, [pc, #196]	@ (8004a78 <HAL_UART_RxCpltCallback+0x164>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3340      	adds	r3, #64	@ 0x40
 80049b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a74 <HAL_UART_RxCpltCallback+0x160>)
 80049b8:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 80049ba:	2240      	movs	r2, #64	@ 0x40
 80049bc:	4930      	ldr	r1, [pc, #192]	@ (8004a80 <HAL_UART_RxCpltCallback+0x16c>)
 80049be:	4831      	ldr	r0, [pc, #196]	@ (8004a84 <HAL_UART_RxCpltCallback+0x170>)
 80049c0:	f006 fdfc 	bl	800b5bc <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80049c4:	4b30      	ldr	r3, [pc, #192]	@ (8004a88 <HAL_UART_RxCpltCallback+0x174>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004a88 <HAL_UART_RxCpltCallback+0x174>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 80049d4:	2240      	movs	r2, #64	@ 0x40
 80049d6:	492a      	ldr	r1, [pc, #168]	@ (8004a80 <HAL_UART_RxCpltCallback+0x16c>)
 80049d8:	482a      	ldr	r0, [pc, #168]	@ (8004a84 <HAL_UART_RxCpltCallback+0x170>)
 80049da:	f006 fdef 	bl	800b5bc <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a8c <HAL_UART_RxCpltCallback+0x178>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d13f      	bne.n	8004a68 <HAL_UART_RxCpltCallback+0x154>
			for (int i;i<20;i++){
 80049e8:	e02e      	b.n	8004a48 <HAL_UART_RxCpltCallback+0x134>
				char buffer_servo[4];
				if (usart_buffer[i]=='$' && usart_buffer[i+1]=='3'){
 80049ea:	4a29      	ldr	r2, [pc, #164]	@ (8004a90 <HAL_UART_RxCpltCallback+0x17c>)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b24      	cmp	r3, #36	@ 0x24
 80049f4:	d11d      	bne.n	8004a32 <HAL_UART_RxCpltCallback+0x11e>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	3301      	adds	r3, #1
 80049fa:	4a25      	ldr	r2, [pc, #148]	@ (8004a90 <HAL_UART_RxCpltCallback+0x17c>)
 80049fc:	5cd3      	ldrb	r3, [r2, r3]
 80049fe:	2b33      	cmp	r3, #51	@ 0x33
 8004a00:	d117      	bne.n	8004a32 <HAL_UART_RxCpltCallback+0x11e>
					flag_servo = 1;
 8004a02:	4b24      	ldr	r3, [pc, #144]	@ (8004a94 <HAL_UART_RxCpltCallback+0x180>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
					for (int j;j<4;j++){
 8004a08:	e00e      	b.n	8004a28 <HAL_UART_RxCpltCallback+0x114>
						buffer_servo[j]=usart_buffer[i+3+j];
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	1cda      	adds	r2, r3, #3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4413      	add	r3, r2
 8004a12:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <HAL_UART_RxCpltCallback+0x17c>)
 8004a14:	5cd1      	ldrb	r1, [r2, r3]
 8004a16:	f107 0208 	add.w	r2, r7, #8
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	460a      	mov	r2, r1
 8004a20:	701a      	strb	r2, [r3, #0]
					for (int j;j<4;j++){
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	dded      	ble.n	8004a0a <HAL_UART_RxCpltCallback+0xf6>
					}
					buffer_servo[5]='\0';
 8004a2e:	2300      	movs	r3, #0
 8004a30:	737b      	strb	r3, [r7, #13]
				}
				position_servo = atoi(buffer_servo);
 8004a32:	f107 0308 	add.w	r3, r7, #8
 8004a36:	4618      	mov	r0, r3
 8004a38:	f00a fa75 	bl	800ef26 <atoi>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	4a16      	ldr	r2, [pc, #88]	@ (8004a98 <HAL_UART_RxCpltCallback+0x184>)
 8004a40:	6013      	str	r3, [r2, #0]
			for (int i;i<20;i++){
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3301      	adds	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b13      	cmp	r3, #19
 8004a4c:	ddcd      	ble.n	80049ea <HAL_UART_RxCpltCallback+0xd6>
				//break;
			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)usart_buffer, BUFFER_SIZE);//on recoit par dma à nouveau 64 caractères
 8004a4e:	2214      	movs	r2, #20
 8004a50:	490f      	ldr	r1, [pc, #60]	@ (8004a90 <HAL_UART_RxCpltCallback+0x17c>)
 8004a52:	4812      	ldr	r0, [pc, #72]	@ (8004a9c <HAL_UART_RxCpltCallback+0x188>)
 8004a54:	f006 fdb2 	bl	800b5bc <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8004a58:	4b11      	ldr	r3, [pc, #68]	@ (8004aa0 <HAL_UART_RxCpltCallback+0x18c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b10      	ldr	r3, [pc, #64]	@ (8004aa0 <HAL_UART_RxCpltCallback+0x18c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0204 	bic.w	r2, r2, #4
 8004a66:	601a      	str	r2, [r3, #0]
			}

}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a70:	40013800 	.word	0x40013800
 8004a74:	20000b3c 	.word	0x20000b3c
 8004a78:	20000b38 	.word	0x20000b38
 8004a7c:	200008e4 	.word	0x200008e4
 8004a80:	20000ae4 	.word	0x20000ae4
 8004a84:	200010b8 	.word	0x200010b8
 8004a88:	2000120c 	.word	0x2000120c
 8004a8c:	40008000 	.word	0x40008000
 8004a90:	20000b24 	.word	0x20000b24
 8004a94:	20001020 	.word	0x20001020
 8004a98:	2000101c 	.word	0x2000101c
 8004a9c:	20001024 	.word	0x20001024
 8004aa0:	2000114c 	.word	0x2000114c

08004aa4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004aa8:	4b10      	ldr	r3, [pc, #64]	@ (8004aec <MX_USB_PCD_Init+0x48>)
 8004aaa:	4a11      	ldr	r2, [pc, #68]	@ (8004af0 <MX_USB_PCD_Init+0x4c>)
 8004aac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004aae:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <MX_USB_PCD_Init+0x48>)
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <MX_USB_PCD_Init+0x48>)
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <MX_USB_PCD_Init+0x48>)
 8004abc:	2202      	movs	r2, #2
 8004abe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <MX_USB_PCD_Init+0x48>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004ac6:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <MX_USB_PCD_Init+0x48>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <MX_USB_PCD_Init+0x48>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <MX_USB_PCD_Init+0x48>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004ad8:	4804      	ldr	r0, [pc, #16]	@ (8004aec <MX_USB_PCD_Init+0x48>)
 8004ada:	f002 ff66 	bl	80079aa <HAL_PCD_Init>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8004ae4:	f7fe fb48 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004ae8:	bf00      	nop
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	2000126c 	.word	0x2000126c
 8004af0:	40005c00 	.word	0x40005c00

08004af4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b094      	sub	sp, #80	@ 0x50
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004afc:	f107 030c 	add.w	r3, r7, #12
 8004b00:	2244      	movs	r2, #68	@ 0x44
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f00c fa7b 	bl	8011000 <memset>
  if(pcdHandle->Instance==USB)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a11      	ldr	r2, [pc, #68]	@ (8004b54 <HAL_PCD_MspInit+0x60>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d11a      	bne.n	8004b4a <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b18:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b1e:	f107 030c 	add.w	r3, r7, #12
 8004b22:	4618      	mov	r0, r3
 8004b24:	f003 fe18 	bl	8008758 <HAL_RCCEx_PeriphCLKConfig>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8004b2e:	f7fe fb23 	bl	8003178 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004b32:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <HAL_PCD_MspInit+0x64>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b36:	4a08      	ldr	r2, [pc, #32]	@ (8004b58 <HAL_PCD_MspInit+0x64>)
 8004b38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b3e:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <HAL_PCD_MspInit+0x64>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	3750      	adds	r7, #80	@ 0x50
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40005c00 	.word	0x40005c00
 8004b58:	40021000 	.word	0x40021000

08004b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b5c:	480d      	ldr	r0, [pc, #52]	@ (8004b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b60:	f7ff f94c 	bl	8003dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b64:	480c      	ldr	r0, [pc, #48]	@ (8004b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b66:	490d      	ldr	r1, [pc, #52]	@ (8004b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b68:	4a0d      	ldr	r2, [pc, #52]	@ (8004ba0 <LoopForever+0xe>)
  movs r3, #0
 8004b6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004b6c:	e002      	b.n	8004b74 <LoopCopyDataInit>

08004b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b72:	3304      	adds	r3, #4

08004b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b78:	d3f9      	bcc.n	8004b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8004ba8 <LoopForever+0x16>)
  movs r3, #0
 8004b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b80:	e001      	b.n	8004b86 <LoopFillZerobss>

08004b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b84:	3204      	adds	r2, #4

08004b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b88:	d3fb      	bcc.n	8004b82 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8004b8a:	f00c fb35 	bl	80111f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b8e:	f7fd ff79 	bl	8002a84 <main>

08004b92 <LoopForever>:

LoopForever:
    b LoopForever
 8004b92:	e7fe      	b.n	8004b92 <LoopForever>
  ldr   r0, =_estack
 8004b94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b9c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004ba0:	08014094 	.word	0x08014094
  ldr r2, =_sbss
 8004ba4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004ba8:	200016d4 	.word	0x200016d4

08004bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bac:	e7fe      	b.n	8004bac <ADC1_2_IRQHandler>

08004bae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bb8:	2003      	movs	r0, #3
 8004bba:	f001 fb99 	bl	80062f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004bbe:	200f      	movs	r0, #15
 8004bc0:	f000 f80e 	bl	8004be0 <HAL_InitTick>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	71fb      	strb	r3, [r7, #7]
 8004bce:	e001      	b.n	8004bd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004bd0:	f7fe ff20 	bl	8003a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bd4:	79fb      	ldrb	r3, [r7, #7]

}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004bec:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <HAL_InitTick+0x68>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d022      	beq.n	8004c3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004bf4:	4b15      	ldr	r3, [pc, #84]	@ (8004c4c <HAL_InitTick+0x6c>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b13      	ldr	r3, [pc, #76]	@ (8004c48 <HAL_InitTick+0x68>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 fba4 	bl	8006356 <HAL_SYSTICK_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10f      	bne.n	8004c34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	d809      	bhi.n	8004c2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c22:	f001 fb70 	bl	8006306 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c26:	4a0a      	ldr	r2, [pc, #40]	@ (8004c50 <HAL_InitTick+0x70>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e007      	b.n	8004c3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73fb      	strb	r3, [r7, #15]
 8004c32:	e004      	b.n	8004c3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
 8004c38:	e001      	b.n	8004c3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000014 	.word	0x20000014
 8004c4c:	2000000c 	.word	0x2000000c
 8004c50:	20000010 	.word	0x20000010

08004c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_IncTick+0x1c>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <HAL_IncTick+0x20>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4413      	add	r3, r2
 8004c62:	4a03      	ldr	r2, [pc, #12]	@ (8004c70 <HAL_IncTick+0x1c>)
 8004c64:	6013      	str	r3, [r2, #0]
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20001548 	.word	0x20001548
 8004c74:	20000014 	.word	0x20000014

08004c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	@ (8004c8c <HAL_GetTick+0x14>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20001548 	.word	0x20001548

08004c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c98:	f7ff ffee 	bl	8004c78 <HAL_GetTick>
 8004c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d004      	beq.n	8004cb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004caa:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <HAL_Delay+0x40>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cb4:	bf00      	nop
 8004cb6:	f7ff ffdf 	bl	8004c78 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d8f7      	bhi.n	8004cb6 <HAL_Delay+0x26>
  {
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000014 	.word	0x20000014

08004cd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	609a      	str	r2, [r3, #8]
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3360      	adds	r3, #96	@ 0x60
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b08      	ldr	r3, [pc, #32]	@ (8004d80 <LL_ADC_SetOffset+0x44>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	03fff000 	.word	0x03fff000

08004d84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3360      	adds	r3, #96	@ 0x60
 8004d92:	461a      	mov	r2, r3
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3360      	adds	r3, #96	@ 0x60
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3360      	adds	r3, #96	@ 0x60
 8004df6:	461a      	mov	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3360      	adds	r3, #96	@ 0x60
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	615a      	str	r2, [r3, #20]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b087      	sub	sp, #28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3330      	adds	r3, #48	@ 0x30
 8004eae:	461a      	mov	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	4413      	add	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	211f      	movs	r1, #31
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	0e9b      	lsrs	r3, r3, #26
 8004ed6:	f003 011f 	and.w	r1, r3, #31
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b087      	sub	sp, #28
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3314      	adds	r3, #20
 8004f06:	461a      	mov	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	0e5b      	lsrs	r3, r3, #25
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	4413      	add	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	0d1b      	lsrs	r3, r3, #20
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	2107      	movs	r1, #7
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	0d1b      	lsrs	r3, r3, #20
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f64:	43db      	mvns	r3, r3
 8004f66:	401a      	ands	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f003 0318 	and.w	r3, r3, #24
 8004f6e:	4908      	ldr	r1, [pc, #32]	@ (8004f90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004f70:	40d9      	lsrs	r1, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	400b      	ands	r3, r1
 8004f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	0007ffff 	.word	0x0007ffff

08004f94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004fc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6093      	str	r3, [r2, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fe8:	d101      	bne.n	8004fee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800500c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005010:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005038:	d101      	bne.n	800503e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800505c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005060:	f043 0201 	orr.w	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <LL_ADC_IsEnabled+0x18>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <LL_ADC_IsEnabled+0x1a>
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050ae:	f043 0204 	orr.w	r2, r3, #4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d101      	bne.n	80050da <LL_ADC_REG_IsConversionOngoing+0x18>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d101      	bne.n	8005100 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b089      	sub	sp, #36	@ 0x24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e167      	b.n	80053fa <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7fc fa53 	bl	80015e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ff3f 	bl	8004fd4 <LL_ADC_IsDeepPowerDownEnabled>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff ff25 	bl	8004fb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff ff5a 	bl	8005024 <LL_ADC_IsInternalRegulatorEnabled>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d115      	bne.n	80051a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ff3e 	bl	8004ffc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005180:	4ba0      	ldr	r3, [pc, #640]	@ (8005404 <HAL_ADC_Init+0x2f4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	099b      	lsrs	r3, r3, #6
 8005186:	4aa0      	ldr	r2, [pc, #640]	@ (8005408 <HAL_ADC_Init+0x2f8>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	099b      	lsrs	r3, r3, #6
 800518e:	3301      	adds	r3, #1
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005194:	e002      	b.n	800519c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3b01      	subs	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f9      	bne.n	8005196 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ff3c 	bl	8005024 <LL_ADC_IsInternalRegulatorEnabled>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10d      	bne.n	80051ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b6:	f043 0210 	orr.w	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c2:	f043 0201 	orr.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff ff75 	bl	80050c2 <LL_ADC_REG_IsConversionOngoing>
 80051d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 8100 	bne.w	80053e8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f040 80fc 	bne.w	80053e8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80051f8:	f043 0202 	orr.w	r2, r3, #2
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ff35 	bl	8005074 <LL_ADC_IsEnabled>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d111      	bne.n	8005234 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005210:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005214:	f7ff ff2e 	bl	8005074 <LL_ADC_IsEnabled>
 8005218:	4604      	mov	r4, r0
 800521a:	487c      	ldr	r0, [pc, #496]	@ (800540c <HAL_ADC_Init+0x2fc>)
 800521c:	f7ff ff2a 	bl	8005074 <LL_ADC_IsEnabled>
 8005220:	4603      	mov	r3, r0
 8005222:	4323      	orrs	r3, r4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4619      	mov	r1, r3
 800522e:	4878      	ldr	r0, [pc, #480]	@ (8005410 <HAL_ADC_Init+0x300>)
 8005230:	f7ff fd50 	bl	8004cd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7f5b      	ldrb	r3, [r3, #29]
 8005238:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800523e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005244:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800524a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005252:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800525e:	2b01      	cmp	r3, #1
 8005260:	d106      	bne.n	8005270 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	3b01      	subs	r3, #1
 8005268:	045b      	lsls	r3, r3, #17
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4313      	orrs	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005284:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	4b60      	ldr	r3, [pc, #384]	@ (8005414 <HAL_ADC_Init+0x304>)
 8005294:	4013      	ands	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	69b9      	ldr	r1, [r7, #24]
 800529c:	430b      	orrs	r3, r1
 800529e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff ff14 	bl	80050e8 <LL_ADC_INJ_IsConversionOngoing>
 80052c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d16d      	bne.n	80053a4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d16a      	bne.n	80053a4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80052d2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052ea:	f023 0302 	bic.w	r3, r3, #2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	69b9      	ldr	r1, [r7, #24]
 80052f4:	430b      	orrs	r3, r1
 80052f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d017      	beq.n	8005330 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800530e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005318:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800531c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6911      	ldr	r1, [r2, #16]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	430b      	orrs	r3, r1
 800532a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800532e:	e013      	b.n	8005358 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800533e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005350:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005354:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800535e:	2b01      	cmp	r3, #1
 8005360:	d118      	bne.n	8005394 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800536c:	f023 0304 	bic.w	r3, r3, #4
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005378:	4311      	orrs	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800537e:	4311      	orrs	r1, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005384:	430a      	orrs	r2, r1
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	611a      	str	r2, [r3, #16]
 8005392:	e007      	b.n	80053a4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10c      	bne.n	80053c6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	f023 010f 	bic.w	r1, r3, #15
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	1e5a      	subs	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80053c4:	e007      	b.n	80053d6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 020f 	bic.w	r2, r2, #15
 80053d4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	f043 0201 	orr.w	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053e6:	e007      	b.n	80053f8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ec:	f043 0210 	orr.w	r2, r3, #16
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80053f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3724      	adds	r7, #36	@ 0x24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd90      	pop	{r4, r7, pc}
 8005402:	bf00      	nop
 8005404:	2000000c 	.word	0x2000000c
 8005408:	053e2d63 	.word	0x053e2d63
 800540c:	50000100 	.word	0x50000100
 8005410:	50000300 	.word	0x50000300
 8005414:	fff04007 	.word	0xfff04007

08005418 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005424:	4851      	ldr	r0, [pc, #324]	@ (800556c <HAL_ADC_Start_DMA+0x154>)
 8005426:	f7ff fdb5 	bl	8004f94 <LL_ADC_GetMultimode>
 800542a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fe46 	bl	80050c2 <LL_ADC_REG_IsConversionOngoing>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	f040 808f 	bne.w	800555c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_ADC_Start_DMA+0x34>
 8005448:	2302      	movs	r3, #2
 800544a:	e08a      	b.n	8005562 <HAL_ADC_Start_DMA+0x14a>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b05      	cmp	r3, #5
 800545e:	d002      	beq.n	8005466 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b09      	cmp	r3, #9
 8005464:	d173      	bne.n	800554e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fc8e 	bl	8005d88 <ADC_Enable>
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d166      	bne.n	8005544 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a38      	ldr	r2, [pc, #224]	@ (8005570 <HAL_ADC_Start_DMA+0x158>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d002      	beq.n	800549a <HAL_ADC_Start_DMA+0x82>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	e001      	b.n	800549e <HAL_ADC_Start_DMA+0x86>
 800549a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d002      	beq.n	80054ac <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d105      	bne.n	80054b8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d006      	beq.n	80054d2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c8:	f023 0206 	bic.w	r2, r3, #6
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80054d0:	e002      	b.n	80054d8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054dc:	4a25      	ldr	r2, [pc, #148]	@ (8005574 <HAL_ADC_Start_DMA+0x15c>)
 80054de:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e4:	4a24      	ldr	r2, [pc, #144]	@ (8005578 <HAL_ADC_Start_DMA+0x160>)
 80054e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ec:	4a23      	ldr	r2, [pc, #140]	@ (800557c <HAL_ADC_Start_DMA+0x164>)
 80054ee:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	221c      	movs	r2, #28
 80054f6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0210 	orr.w	r2, r2, #16
 800550e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3340      	adds	r3, #64	@ 0x40
 800552a:	4619      	mov	r1, r3
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f000 ffc6 	bl	80064c0 <HAL_DMA_Start_IT>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fdac 	bl	800509a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005542:	e00d      	b.n	8005560 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800554c:	e008      	b.n	8005560 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800555a:	e001      	b.n	8005560 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800555c:	2302      	movs	r3, #2
 800555e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005560:	7dfb      	ldrb	r3, [r7, #23]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	50000300 	.word	0x50000300
 8005570:	50000100 	.word	0x50000100
 8005574:	08005e95 	.word	0x08005e95
 8005578:	08005f6d 	.word	0x08005f6d
 800557c:	08005f89 	.word	0x08005f89

08005580 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b0b6      	sub	sp, #216	@ 0xd8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d101      	bne.n	80055ca <HAL_ADC_ConfigChannel+0x22>
 80055c6:	2302      	movs	r3, #2
 80055c8:	e3c8      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x7b4>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fd73 	bl	80050c2 <LL_ADC_REG_IsConversionOngoing>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 83ad 	bne.w	8005d3e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	f7ff fc54 	bl	8004e9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fd61 	bl	80050c2 <LL_ADC_REG_IsConversionOngoing>
 8005600:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff fd6d 	bl	80050e8 <LL_ADC_INJ_IsConversionOngoing>
 800560e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 81d9 	bne.w	80059ce <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800561c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005620:	2b00      	cmp	r3, #0
 8005622:	f040 81d4 	bne.w	80059ce <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800562e:	d10f      	bne.n	8005650 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2200      	movs	r2, #0
 800563a:	4619      	mov	r1, r3
 800563c:	f7ff fc5b 	bl	8004ef6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fc02 	bl	8004e52 <LL_ADC_SetSamplingTimeCommonConfig>
 800564e:	e00e      	b.n	800566e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6819      	ldr	r1, [r3, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	461a      	mov	r2, r3
 800565e:	f7ff fc4a 	bl	8004ef6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fbf2 	bl	8004e52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695a      	ldr	r2, [r3, #20]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	08db      	lsrs	r3, r3, #3
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b04      	cmp	r3, #4
 800568e:	d022      	beq.n	80056d6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6919      	ldr	r1, [r3, #16]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80056a0:	f7ff fb4c 	bl	8004d3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6919      	ldr	r1, [r3, #16]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	461a      	mov	r2, r3
 80056b2:	f7ff fb98 	bl	8004de6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d102      	bne.n	80056cc <HAL_ADC_ConfigChannel+0x124>
 80056c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056ca:	e000      	b.n	80056ce <HAL_ADC_ConfigChannel+0x126>
 80056cc:	2300      	movs	r3, #0
 80056ce:	461a      	mov	r2, r3
 80056d0:	f7ff fba4 	bl	8004e1c <LL_ADC_SetOffsetSaturation>
 80056d4:	e17b      	b.n	80059ce <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fb51 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <HAL_ADC_ConfigChannel+0x15a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2100      	movs	r1, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fb46 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 80056f8:	4603      	mov	r3, r0
 80056fa:	0e9b      	lsrs	r3, r3, #26
 80056fc:	f003 021f 	and.w	r2, r3, #31
 8005700:	e01e      	b.n	8005740 <HAL_ADC_ConfigChannel+0x198>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2100      	movs	r1, #0
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fb3b 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 800570e:	4603      	mov	r3, r0
 8005710:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005718:	fa93 f3a3 	rbit	r3, r3
 800571c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005724:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8005730:	2320      	movs	r3, #32
 8005732:	e004      	b.n	800573e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8005734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005738:	fab3 f383 	clz	r3, r3
 800573c:	b2db      	uxtb	r3, r3
 800573e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005748:	2b00      	cmp	r3, #0
 800574a:	d105      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x1b0>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	0e9b      	lsrs	r3, r3, #26
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	e018      	b.n	800578a <HAL_ADC_ConfigChannel+0x1e2>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005764:	fa93 f3a3 	rbit	r3, r3
 8005768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800576c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005774:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800577c:	2320      	movs	r3, #32
 800577e:	e004      	b.n	800578a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8005780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005784:	fab3 f383 	clz	r3, r3
 8005788:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800578a:	429a      	cmp	r2, r3
 800578c:	d106      	bne.n	800579c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fb0a 	bl	8004db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2101      	movs	r1, #1
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff faee 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <HAL_ADC_ConfigChannel+0x220>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2101      	movs	r1, #1
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fae3 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 80057be:	4603      	mov	r3, r0
 80057c0:	0e9b      	lsrs	r3, r3, #26
 80057c2:	f003 021f 	and.w	r2, r3, #31
 80057c6:	e01e      	b.n	8005806 <HAL_ADC_ConfigChannel+0x25e>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2101      	movs	r1, #1
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff fad8 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057de:	fa93 f3a3 	rbit	r3, r3
 80057e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80057e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80057ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80057f6:	2320      	movs	r3, #32
 80057f8:	e004      	b.n	8005804 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80057fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057fe:	fab3 f383 	clz	r3, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <HAL_ADC_ConfigChannel+0x276>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	0e9b      	lsrs	r3, r3, #26
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	e018      	b.n	8005850 <HAL_ADC_ConfigChannel+0x2a8>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005826:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800582a:	fa93 f3a3 	rbit	r3, r3
 800582e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005832:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005836:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800583a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8005842:	2320      	movs	r3, #32
 8005844:	e004      	b.n	8005850 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8005846:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800584a:	fab3 f383 	clz	r3, r3
 800584e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005850:	429a      	cmp	r2, r3
 8005852:	d106      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2200      	movs	r2, #0
 800585a:	2101      	movs	r1, #1
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff faa7 	bl	8004db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2102      	movs	r1, #2
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fa8b 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 800586e:	4603      	mov	r3, r0
 8005870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <HAL_ADC_ConfigChannel+0x2e6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2102      	movs	r1, #2
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fa80 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 8005884:	4603      	mov	r3, r0
 8005886:	0e9b      	lsrs	r3, r3, #26
 8005888:	f003 021f 	and.w	r2, r3, #31
 800588c:	e01e      	b.n	80058cc <HAL_ADC_ConfigChannel+0x324>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2102      	movs	r1, #2
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fa75 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 800589a:	4603      	mov	r3, r0
 800589c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058a4:	fa93 f3a3 	rbit	r3, r3
 80058a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80058ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80058b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80058bc:	2320      	movs	r3, #32
 80058be:	e004      	b.n	80058ca <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80058c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80058c4:	fab3 f383 	clz	r3, r3
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x33c>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	0e9b      	lsrs	r3, r3, #26
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	e016      	b.n	8005912 <HAL_ADC_ConfigChannel+0x36a>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058f0:	fa93 f3a3 	rbit	r3, r3
 80058f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80058f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80058fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005904:	2320      	movs	r3, #32
 8005906:	e004      	b.n	8005912 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005908:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005912:	429a      	cmp	r2, r3
 8005914:	d106      	bne.n	8005924 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	2102      	movs	r1, #2
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff fa46 	bl	8004db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2103      	movs	r1, #3
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fa2a 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 8005930:	4603      	mov	r3, r0
 8005932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x3a8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2103      	movs	r1, #3
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fa1f 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 8005946:	4603      	mov	r3, r0
 8005948:	0e9b      	lsrs	r3, r3, #26
 800594a:	f003 021f 	and.w	r2, r3, #31
 800594e:	e017      	b.n	8005980 <HAL_ADC_ConfigChannel+0x3d8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2103      	movs	r1, #3
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fa14 	bl	8004d84 <LL_ADC_GetOffsetChannel>
 800595c:	4603      	mov	r3, r0
 800595e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005960:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005968:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800596a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800596c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8005972:	2320      	movs	r3, #32
 8005974:	e003      	b.n	800597e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8005976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005978:	fab3 f383 	clz	r3, r3
 800597c:	b2db      	uxtb	r3, r3
 800597e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005988:	2b00      	cmp	r3, #0
 800598a:	d105      	bne.n	8005998 <HAL_ADC_ConfigChannel+0x3f0>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	0e9b      	lsrs	r3, r3, #26
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	e011      	b.n	80059bc <HAL_ADC_ConfigChannel+0x414>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059a0:	fa93 f3a3 	rbit	r3, r3
 80059a4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80059a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80059aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80059b0:	2320      	movs	r3, #32
 80059b2:	e003      	b.n	80059bc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80059b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059b6:	fab3 f383 	clz	r3, r3
 80059ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059bc:	429a      	cmp	r2, r3
 80059be:	d106      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2200      	movs	r2, #0
 80059c6:	2103      	movs	r1, #3
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff f9f1 	bl	8004db0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fb4e 	bl	8005074 <LL_ADC_IsEnabled>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f040 8140 	bne.w	8005c60 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6819      	ldr	r1, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	461a      	mov	r2, r3
 80059ee:	f7ff faad 	bl	8004f4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	4a8f      	ldr	r2, [pc, #572]	@ (8005c34 <HAL_ADC_ConfigChannel+0x68c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	f040 8131 	bne.w	8005c60 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10b      	bne.n	8005a26 <HAL_ADC_ConfigChannel+0x47e>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	0e9b      	lsrs	r3, r3, #26
 8005a14:	3301      	adds	r3, #1
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	2b09      	cmp	r3, #9
 8005a1c:	bf94      	ite	ls
 8005a1e:	2301      	movls	r3, #1
 8005a20:	2300      	movhi	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	e019      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x4b2>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a2e:	fa93 f3a3 	rbit	r3, r3
 8005a32:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005a34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a36:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005a38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8005a3e:	2320      	movs	r3, #32
 8005a40:	e003      	b.n	8005a4a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8005a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a44:	fab3 f383 	clz	r3, r3
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	2b09      	cmp	r3, #9
 8005a52:	bf94      	ite	ls
 8005a54:	2301      	movls	r3, #1
 8005a56:	2300      	movhi	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d079      	beq.n	8005b52 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <HAL_ADC_ConfigChannel+0x4d2>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	0e9b      	lsrs	r3, r3, #26
 8005a70:	3301      	adds	r3, #1
 8005a72:	069b      	lsls	r3, r3, #26
 8005a74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a78:	e015      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0x4fe>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a82:	fa93 f3a3 	rbit	r3, r3
 8005a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005a92:	2320      	movs	r3, #32
 8005a94:	e003      	b.n	8005a9e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a98:	fab3 f383 	clz	r3, r3
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	069b      	lsls	r3, r3, #26
 8005aa2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <HAL_ADC_ConfigChannel+0x51e>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	0e9b      	lsrs	r3, r3, #26
 8005ab8:	3301      	adds	r3, #1
 8005aba:	f003 031f 	and.w	r3, r3, #31
 8005abe:	2101      	movs	r1, #1
 8005ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac4:	e017      	b.n	8005af6 <HAL_ADC_ConfigChannel+0x54e>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ace:	fa93 f3a3 	rbit	r3, r3
 8005ad2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005ade:	2320      	movs	r3, #32
 8005ae0:	e003      	b.n	8005aea <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae4:	fab3 f383 	clz	r3, r3
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	3301      	adds	r3, #1
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	ea42 0103 	orr.w	r1, r2, r3
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10a      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x574>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	0e9b      	lsrs	r3, r3, #26
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	f003 021f 	and.w	r2, r3, #31
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	051b      	lsls	r3, r3, #20
 8005b1a:	e018      	b.n	8005b4e <HAL_ADC_ConfigChannel+0x5a6>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	fa93 f3a3 	rbit	r3, r3
 8005b28:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005b34:	2320      	movs	r3, #32
 8005b36:	e003      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3a:	fab3 f383 	clz	r3, r3
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	3301      	adds	r3, #1
 8005b42:	f003 021f 	and.w	r2, r3, #31
 8005b46:	4613      	mov	r3, r2
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	4413      	add	r3, r2
 8005b4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	e081      	b.n	8005c56 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d107      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x5c6>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	0e9b      	lsrs	r3, r3, #26
 8005b64:	3301      	adds	r3, #1
 8005b66:	069b      	lsls	r3, r3, #26
 8005b68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b6c:	e015      	b.n	8005b9a <HAL_ADC_ConfigChannel+0x5f2>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b76:	fa93 f3a3 	rbit	r3, r3
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005b86:	2320      	movs	r3, #32
 8005b88:	e003      	b.n	8005b92 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	fab3 f383 	clz	r3, r3
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	3301      	adds	r3, #1
 8005b94:	069b      	lsls	r3, r3, #26
 8005b96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <HAL_ADC_ConfigChannel+0x612>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	0e9b      	lsrs	r3, r3, #26
 8005bac:	3301      	adds	r3, #1
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	e017      	b.n	8005bea <HAL_ADC_ConfigChannel+0x642>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	fa93 f3a3 	rbit	r3, r3
 8005bc6:	61fb      	str	r3, [r7, #28]
  return result;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	e003      	b.n	8005bde <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	fab3 f383 	clz	r3, r3
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	3301      	adds	r3, #1
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2101      	movs	r1, #1
 8005be6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bea:	ea42 0103 	orr.w	r1, r2, r3
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10d      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x66e>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	0e9b      	lsrs	r3, r3, #26
 8005c00:	3301      	adds	r3, #1
 8005c02:	f003 021f 	and.w	r2, r3, #31
 8005c06:	4613      	mov	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3b1e      	subs	r3, #30
 8005c0e:	051b      	lsls	r3, r3, #20
 8005c10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c14:	e01e      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x6ac>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	fa93 f3a3 	rbit	r3, r3
 8005c22:	613b      	str	r3, [r7, #16]
  return result;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d104      	bne.n	8005c38 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005c2e:	2320      	movs	r3, #32
 8005c30:	e006      	b.n	8005c40 <HAL_ADC_ConfigChannel+0x698>
 8005c32:	bf00      	nop
 8005c34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	fab3 f383 	clz	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	3301      	adds	r3, #1
 8005c42:	f003 021f 	and.w	r2, r3, #31
 8005c46:	4613      	mov	r3, r2
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3b1e      	subs	r3, #30
 8005c4e:	051b      	lsls	r3, r3, #20
 8005c50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c54:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	f7ff f94b 	bl	8004ef6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4b3f      	ldr	r3, [pc, #252]	@ (8005d64 <HAL_ADC_ConfigChannel+0x7bc>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d071      	beq.n	8005d50 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c6c:	483e      	ldr	r0, [pc, #248]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7c0>)
 8005c6e:	f7ff f857 	bl	8004d20 <LL_ADC_GetCommonPathInternalCh>
 8005c72:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a3c      	ldr	r2, [pc, #240]	@ (8005d6c <HAL_ADC_ConfigChannel+0x7c4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_ADC_ConfigChannel+0x6e2>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a3a      	ldr	r2, [pc, #232]	@ (8005d70 <HAL_ADC_ConfigChannel+0x7c8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d127      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d121      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c9e:	d157      	bne.n	8005d50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ca4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ca8:	4619      	mov	r1, r3
 8005caa:	482f      	ldr	r0, [pc, #188]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7c0>)
 8005cac:	f7ff f825 	bl	8004cfa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cb0:	4b30      	ldr	r3, [pc, #192]	@ (8005d74 <HAL_ADC_ConfigChannel+0x7cc>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	099b      	lsrs	r3, r3, #6
 8005cb6:	4a30      	ldr	r2, [pc, #192]	@ (8005d78 <HAL_ADC_ConfigChannel+0x7d0>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	099b      	lsrs	r3, r3, #6
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005cca:	e002      	b.n	8005cd2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f9      	bne.n	8005ccc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cd8:	e03a      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a27      	ldr	r2, [pc, #156]	@ (8005d7c <HAL_ADC_ConfigChannel+0x7d4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d113      	bne.n	8005d0c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ce8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10d      	bne.n	8005d0c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a22      	ldr	r2, [pc, #136]	@ (8005d80 <HAL_ADC_ConfigChannel+0x7d8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d02a      	beq.n	8005d50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d02:	4619      	mov	r1, r3
 8005d04:	4818      	ldr	r0, [pc, #96]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7c0>)
 8005d06:	f7fe fff8 	bl	8004cfa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d0a:	e021      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1c      	ldr	r2, [pc, #112]	@ (8005d84 <HAL_ADC_ConfigChannel+0x7dc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d11c      	bne.n	8005d50 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d116      	bne.n	8005d50 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a16      	ldr	r2, [pc, #88]	@ (8005d80 <HAL_ADC_ConfigChannel+0x7d8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d011      	beq.n	8005d50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d34:	4619      	mov	r1, r3
 8005d36:	480c      	ldr	r0, [pc, #48]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7c0>)
 8005d38:	f7fe ffdf 	bl	8004cfa <LL_ADC_SetCommonPathInternalCh>
 8005d3c:	e008      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d58:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	37d8      	adds	r7, #216	@ 0xd8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	80080000 	.word	0x80080000
 8005d68:	50000300 	.word	0x50000300
 8005d6c:	c3210000 	.word	0xc3210000
 8005d70:	90c00010 	.word	0x90c00010
 8005d74:	2000000c 	.word	0x2000000c
 8005d78:	053e2d63 	.word	0x053e2d63
 8005d7c:	c7520000 	.word	0xc7520000
 8005d80:	50000100 	.word	0x50000100
 8005d84:	cb840000 	.word	0xcb840000

08005d88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff f96b 	bl	8005074 <LL_ADC_IsEnabled>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d169      	bne.n	8005e78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	4b36      	ldr	r3, [pc, #216]	@ (8005e84 <ADC_Enable+0xfc>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00d      	beq.n	8005dce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db6:	f043 0210 	orr.w	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc2:	f043 0201 	orr.w	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e055      	b.n	8005e7a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff f93a 	bl	800504c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005dd8:	482b      	ldr	r0, [pc, #172]	@ (8005e88 <ADC_Enable+0x100>)
 8005dda:	f7fe ffa1 	bl	8004d20 <LL_ADC_GetCommonPathInternalCh>
 8005dde:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005de0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d013      	beq.n	8005e10 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005de8:	4b28      	ldr	r3, [pc, #160]	@ (8005e8c <ADC_Enable+0x104>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	4a28      	ldr	r2, [pc, #160]	@ (8005e90 <ADC_Enable+0x108>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	099b      	lsrs	r3, r3, #6
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	4613      	mov	r3, r2
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e02:	e002      	b.n	8005e0a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f9      	bne.n	8005e04 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e10:	f7fe ff32 	bl	8004c78 <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e16:	e028      	b.n	8005e6a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff f929 	bl	8005074 <LL_ADC_IsEnabled>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff f90d 	bl	800504c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e32:	f7fe ff21 	bl	8004c78 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d914      	bls.n	8005e6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d00d      	beq.n	8005e6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e52:	f043 0210 	orr.w	r2, r3, #16
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e5e:	f043 0201 	orr.w	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e007      	b.n	8005e7a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d1cf      	bne.n	8005e18 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	8000003f 	.word	0x8000003f
 8005e88:	50000300 	.word	0x50000300
 8005e8c:	2000000c 	.word	0x2000000c
 8005e90:	053e2d63 	.word	0x053e2d63

08005e94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d14b      	bne.n	8005f46 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d021      	beq.n	8005f0c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe ffd3 	bl	8004e78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d032      	beq.n	8005f3e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d12b      	bne.n	8005f3e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d11f      	bne.n	8005f3e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f02:	f043 0201 	orr.w	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f0a:	e018      	b.n	8005f3e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d111      	bne.n	8005f3e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d105      	bne.n	8005f3e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f36:	f043 0201 	orr.w	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7fb fc52 	bl	80017e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005f44:	e00e      	b.n	8005f64 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fb1e 	bl	8005594 <HAL_ADC_ErrorCallback>
}
 8005f58:	e004      	b.n	8005f64 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	4798      	blx	r3
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff fb00 	bl	8005580 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa6:	f043 0204 	orr.w	r2, r3, #4
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff faf0 	bl	8005594 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <LL_ADC_IsEnabled>:
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <LL_ADC_IsEnabled+0x18>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <LL_ADC_IsEnabled+0x1a>
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d101      	bne.n	8005ffa <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b0a1      	sub	sp, #132	@ 0x84
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006022:	2302      	movs	r3, #2
 8006024:	e08b      	b.n	800613e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800602e:	2300      	movs	r3, #0
 8006030:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006032:	2300      	movs	r3, #0
 8006034:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800603e:	d102      	bne.n	8006046 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006040:	4b41      	ldr	r3, [pc, #260]	@ (8006148 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006042:	60bb      	str	r3, [r7, #8]
 8006044:	e001      	b.n	800604a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006054:	f043 0220 	orr.w	r2, r3, #32
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e06a      	b.n	800613e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff ffb9 	bl	8005fe2 <LL_ADC_REG_IsConversionOngoing>
 8006070:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff ffb3 	bl	8005fe2 <LL_ADC_REG_IsConversionOngoing>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d14c      	bne.n	800611c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006084:	2b00      	cmp	r3, #0
 8006086:	d149      	bne.n	800611c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006088:	4b30      	ldr	r3, [pc, #192]	@ (800614c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800608a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d028      	beq.n	80060e6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006094:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	6859      	ldr	r1, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060a6:	035b      	lsls	r3, r3, #13
 80060a8:	430b      	orrs	r3, r1
 80060aa:	431a      	orrs	r2, r3
 80060ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80060b4:	f7ff ff82 	bl	8005fbc <LL_ADC_IsEnabled>
 80060b8:	4604      	mov	r4, r0
 80060ba:	4823      	ldr	r0, [pc, #140]	@ (8006148 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80060bc:	f7ff ff7e 	bl	8005fbc <LL_ADC_IsEnabled>
 80060c0:	4603      	mov	r3, r0
 80060c2:	4323      	orrs	r3, r4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d133      	bne.n	8006130 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80060c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80060d0:	f023 030f 	bic.w	r3, r3, #15
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	6811      	ldr	r1, [r2, #0]
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	6892      	ldr	r2, [r2, #8]
 80060dc:	430a      	orrs	r2, r1
 80060de:	431a      	orrs	r2, r3
 80060e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060e2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060e4:	e024      	b.n	8006130 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80060e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060f2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80060f6:	f7ff ff61 	bl	8005fbc <LL_ADC_IsEnabled>
 80060fa:	4604      	mov	r4, r0
 80060fc:	4812      	ldr	r0, [pc, #72]	@ (8006148 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80060fe:	f7ff ff5d 	bl	8005fbc <LL_ADC_IsEnabled>
 8006102:	4603      	mov	r3, r0
 8006104:	4323      	orrs	r3, r4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d112      	bne.n	8006130 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800610a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006112:	f023 030f 	bic.w	r3, r3, #15
 8006116:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006118:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800611a:	e009      	b.n	8006130 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800612e:	e000      	b.n	8006132 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006130:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800613a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800613e:	4618      	mov	r0, r3
 8006140:	3784      	adds	r7, #132	@ 0x84
 8006142:	46bd      	mov	sp, r7
 8006144:	bd90      	pop	{r4, r7, pc}
 8006146:	bf00      	nop
 8006148:	50000100 	.word	0x50000100
 800614c:	50000300 	.word	0x50000300

08006150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006160:	4b0c      	ldr	r3, [pc, #48]	@ (8006194 <__NVIC_SetPriorityGrouping+0x44>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800616c:	4013      	ands	r3, r2
 800616e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800617c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006182:	4a04      	ldr	r2, [pc, #16]	@ (8006194 <__NVIC_SetPriorityGrouping+0x44>)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	60d3      	str	r3, [r2, #12]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	e000ed00 	.word	0xe000ed00

08006198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <__NVIC_GetPriorityGrouping+0x18>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	0a1b      	lsrs	r3, r3, #8
 80061a2:	f003 0307 	and.w	r3, r3, #7
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	e000ed00 	.word	0xe000ed00

080061b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	db0b      	blt.n	80061de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	f003 021f 	and.w	r2, r3, #31
 80061cc:	4907      	ldr	r1, [pc, #28]	@ (80061ec <__NVIC_EnableIRQ+0x38>)
 80061ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	2001      	movs	r0, #1
 80061d6:	fa00 f202 	lsl.w	r2, r0, r2
 80061da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	e000e100 	.word	0xe000e100

080061f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	6039      	str	r1, [r7, #0]
 80061fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006200:	2b00      	cmp	r3, #0
 8006202:	db0a      	blt.n	800621a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	490c      	ldr	r1, [pc, #48]	@ (800623c <__NVIC_SetPriority+0x4c>)
 800620a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620e:	0112      	lsls	r2, r2, #4
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	440b      	add	r3, r1
 8006214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006218:	e00a      	b.n	8006230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	4908      	ldr	r1, [pc, #32]	@ (8006240 <__NVIC_SetPriority+0x50>)
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	3b04      	subs	r3, #4
 8006228:	0112      	lsls	r2, r2, #4
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	440b      	add	r3, r1
 800622e:	761a      	strb	r2, [r3, #24]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	e000e100 	.word	0xe000e100
 8006240:	e000ed00 	.word	0xe000ed00

08006244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006244:	b480      	push	{r7}
 8006246:	b089      	sub	sp, #36	@ 0x24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f1c3 0307 	rsb	r3, r3, #7
 800625e:	2b04      	cmp	r3, #4
 8006260:	bf28      	it	cs
 8006262:	2304      	movcs	r3, #4
 8006264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	3304      	adds	r3, #4
 800626a:	2b06      	cmp	r3, #6
 800626c:	d902      	bls.n	8006274 <NVIC_EncodePriority+0x30>
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3b03      	subs	r3, #3
 8006272:	e000      	b.n	8006276 <NVIC_EncodePriority+0x32>
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006278:	f04f 32ff 	mov.w	r2, #4294967295
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43da      	mvns	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	401a      	ands	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800628c:	f04f 31ff 	mov.w	r1, #4294967295
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	fa01 f303 	lsl.w	r3, r1, r3
 8006296:	43d9      	mvns	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800629c:	4313      	orrs	r3, r2
         );
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3724      	adds	r7, #36	@ 0x24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062bc:	d301      	bcc.n	80062c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062be:	2301      	movs	r3, #1
 80062c0:	e00f      	b.n	80062e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062c2:	4a0a      	ldr	r2, [pc, #40]	@ (80062ec <SysTick_Config+0x40>)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062ca:	210f      	movs	r1, #15
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	f7ff ff8e 	bl	80061f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <SysTick_Config+0x40>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062da:	4b04      	ldr	r3, [pc, #16]	@ (80062ec <SysTick_Config+0x40>)
 80062dc:	2207      	movs	r2, #7
 80062de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	e000e010 	.word	0xe000e010

080062f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ff29 	bl	8006150 <__NVIC_SetPriorityGrouping>
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	af00      	add	r7, sp, #0
 800630c:	4603      	mov	r3, r0
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006314:	f7ff ff40 	bl	8006198 <__NVIC_GetPriorityGrouping>
 8006318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	6978      	ldr	r0, [r7, #20]
 8006320:	f7ff ff90 	bl	8006244 <NVIC_EncodePriority>
 8006324:	4602      	mov	r2, r0
 8006326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800632a:	4611      	mov	r1, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff ff5f 	bl	80061f0 <__NVIC_SetPriority>
}
 8006332:	bf00      	nop
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	4603      	mov	r3, r0
 8006342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ff33 	bl	80061b4 <__NVIC_EnableIRQ>
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff ffa4 	bl	80062ac <SysTick_Config>
 8006364:	4603      	mov	r3, r0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e08d      	b.n	800649e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	4b47      	ldr	r3, [pc, #284]	@ (80064a8 <HAL_DMA_Init+0x138>)
 800638a:	429a      	cmp	r2, r3
 800638c:	d80f      	bhi.n	80063ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	4b45      	ldr	r3, [pc, #276]	@ (80064ac <HAL_DMA_Init+0x13c>)
 8006396:	4413      	add	r3, r2
 8006398:	4a45      	ldr	r2, [pc, #276]	@ (80064b0 <HAL_DMA_Init+0x140>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	009a      	lsls	r2, r3, #2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a42      	ldr	r2, [pc, #264]	@ (80064b4 <HAL_DMA_Init+0x144>)
 80063aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80063ac:	e00e      	b.n	80063cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	4b40      	ldr	r3, [pc, #256]	@ (80064b8 <HAL_DMA_Init+0x148>)
 80063b6:	4413      	add	r3, r2
 80063b8:	4a3d      	ldr	r2, [pc, #244]	@ (80064b0 <HAL_DMA_Init+0x140>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	091b      	lsrs	r3, r3, #4
 80063c0:	009a      	lsls	r2, r3, #2
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a3c      	ldr	r2, [pc, #240]	@ (80064bc <HAL_DMA_Init+0x14c>)
 80063ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80063e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80063f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa82 	bl	8006928 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800642c:	d102      	bne.n	8006434 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006448:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d010      	beq.n	8006474 <HAL_DMA_Init+0x104>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b04      	cmp	r3, #4
 8006458:	d80c      	bhi.n	8006474 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 faa2 	bl	80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006470:	605a      	str	r2, [r3, #4]
 8006472:	e008      	b.n	8006486 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40020407 	.word	0x40020407
 80064ac:	bffdfff8 	.word	0xbffdfff8
 80064b0:	cccccccd 	.word	0xcccccccd
 80064b4:	40020000 	.word	0x40020000
 80064b8:	bffdfbf8 	.word	0xbffdfbf8
 80064bc:	40020400 	.word	0x40020400

080064c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_DMA_Start_IT+0x20>
 80064dc:	2302      	movs	r3, #2
 80064de:	e066      	b.n	80065ae <HAL_DMA_Start_IT+0xee>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d155      	bne.n	80065a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f9c7 	bl	80068ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006522:	2b00      	cmp	r3, #0
 8006524:	d008      	beq.n	8006538 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 020e 	orr.w	r2, r2, #14
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e00f      	b.n	8006558 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0204 	bic.w	r2, r2, #4
 8006546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 020a 	orr.w	r2, r2, #10
 8006556:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006574:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006588:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800658c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e005      	b.n	80065ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80065a8:	2302      	movs	r3, #2
 80065aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d005      	beq.n	80065da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2204      	movs	r2, #4
 80065d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
 80065d8:	e037      	b.n	800664a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 020e 	bic.w	r2, r2, #14
 80065e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0201 	bic.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660e:	f003 021f 	and.w	r2, r3, #31
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	2101      	movs	r1, #1
 8006618:	fa01 f202 	lsl.w	r2, r1, r2
 800661c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006626:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00c      	beq.n	800664a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800663e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006648:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d00d      	beq.n	800669c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2204      	movs	r2, #4
 8006684:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	73fb      	strb	r3, [r7, #15]
 800669a:	e047      	b.n	800672c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 020e 	bic.w	r2, r2, #14
 80066aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d0:	f003 021f 	and.w	r2, r3, #31
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	2101      	movs	r1, #1
 80066da:	fa01 f202 	lsl.w	r2, r1, r2
 80066de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00c      	beq.n	800670c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006700:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800670a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	4798      	blx	r3
    }
  }
  return status;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	2204      	movs	r2, #4
 8006758:	409a      	lsls	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4013      	ands	r3, r2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d026      	beq.n	80067b0 <HAL_DMA_IRQHandler+0x7a>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d021      	beq.n	80067b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d107      	bne.n	800678a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0204 	bic.w	r2, r2, #4
 8006788:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678e:	f003 021f 	and.w	r2, r3, #31
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	2104      	movs	r1, #4
 8006798:	fa01 f202 	lsl.w	r2, r1, r2
 800679c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d071      	beq.n	800688a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80067ae:	e06c      	b.n	800688a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b4:	f003 031f 	and.w	r3, r3, #31
 80067b8:	2202      	movs	r2, #2
 80067ba:	409a      	lsls	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4013      	ands	r3, r2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d02e      	beq.n	8006822 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d029      	beq.n	8006822 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 020a 	bic.w	r2, r2, #10
 80067ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f8:	f003 021f 	and.w	r2, r3, #31
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006800:	2102      	movs	r1, #2
 8006802:	fa01 f202 	lsl.w	r2, r1, r2
 8006806:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d038      	beq.n	800688a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006820:	e033      	b.n	800688a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	2208      	movs	r2, #8
 800682c:	409a      	lsls	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4013      	ands	r3, r2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d02a      	beq.n	800688c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d025      	beq.n	800688c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 020e 	bic.w	r2, r2, #14
 800684e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006854:	f003 021f 	and.w	r2, r3, #31
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685c:	2101      	movs	r1, #1
 800685e:	fa01 f202 	lsl.w	r2, r1, r2
 8006862:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687e:	2b00      	cmp	r3, #0
 8006880:	d004      	beq.n	800688c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800688a:	bf00      	nop
 800688c:	bf00      	nop
}
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80068c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80068d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068da:	f003 021f 	and.w	r2, r3, #31
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e2:	2101      	movs	r1, #1
 80068e4:	fa01 f202 	lsl.w	r2, r1, r2
 80068e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b10      	cmp	r3, #16
 80068f8:	d108      	bne.n	800690c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800690a:	e007      	b.n	800691c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	60da      	str	r2, [r3, #12]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	4b16      	ldr	r3, [pc, #88]	@ (8006990 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006938:	429a      	cmp	r2, r3
 800693a:	d802      	bhi.n	8006942 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800693c:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e001      	b.n	8006946 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006942:	4b15      	ldr	r3, [pc, #84]	@ (8006998 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006944:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	3b08      	subs	r3, #8
 8006952:	4a12      	ldr	r2, [pc, #72]	@ (800699c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006954:	fba2 2303 	umull	r2, r3, r2, r3
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006960:	089b      	lsrs	r3, r3, #2
 8006962:	009a      	lsls	r2, r3, #2
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4413      	add	r3, r2
 8006968:	461a      	mov	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a0b      	ldr	r2, [pc, #44]	@ (80069a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006972:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2201      	movs	r2, #1
 800697c:	409a      	lsls	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40020407 	.word	0x40020407
 8006994:	40020800 	.word	0x40020800
 8006998:	40020820 	.word	0x40020820
 800699c:	cccccccd 	.word	0xcccccccd
 80069a0:	40020880 	.word	0x40020880

080069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4b0b      	ldr	r3, [pc, #44]	@ (80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	461a      	mov	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a08      	ldr	r2, [pc, #32]	@ (80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80069c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	f003 031f 	and.w	r3, r3, #31
 80069d0:	2201      	movs	r2, #1
 80069d2:	409a      	lsls	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80069d8:	bf00      	nop
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	1000823f 	.word	0x1000823f
 80069e8:	40020940 	.word	0x40020940

080069ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80069fa:	e15a      	b.n	8006cb2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	2101      	movs	r1, #1
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	fa01 f303 	lsl.w	r3, r1, r3
 8006a08:	4013      	ands	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 814c 	beq.w	8006cac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d005      	beq.n	8006a2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d130      	bne.n	8006a8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	2203      	movs	r2, #3
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4013      	ands	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a62:	2201      	movs	r2, #1
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	091b      	lsrs	r3, r3, #4
 8006a78:	f003 0201 	and.w	r2, r3, #1
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d017      	beq.n	8006aca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d123      	bne.n	8006b1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	08da      	lsrs	r2, r3, #3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3208      	adds	r2, #8
 8006ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	220f      	movs	r2, #15
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	43db      	mvns	r3, r3
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4013      	ands	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	08da      	lsrs	r2, r3, #3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3208      	adds	r2, #8
 8006b18:	6939      	ldr	r1, [r7, #16]
 8006b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	2203      	movs	r2, #3
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	43db      	mvns	r3, r3
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4013      	ands	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f003 0203 	and.w	r2, r3, #3
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80a6 	beq.w	8006cac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b60:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd0 <HAL_GPIO_Init+0x2e4>)
 8006b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b64:	4a5a      	ldr	r2, [pc, #360]	@ (8006cd0 <HAL_GPIO_Init+0x2e4>)
 8006b66:	f043 0301 	orr.w	r3, r3, #1
 8006b6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b6c:	4b58      	ldr	r3, [pc, #352]	@ (8006cd0 <HAL_GPIO_Init+0x2e4>)
 8006b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b78:	4a56      	ldr	r2, [pc, #344]	@ (8006cd4 <HAL_GPIO_Init+0x2e8>)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	089b      	lsrs	r3, r3, #2
 8006b7e:	3302      	adds	r3, #2
 8006b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	220f      	movs	r2, #15
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	43db      	mvns	r3, r3
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006ba2:	d01f      	beq.n	8006be4 <HAL_GPIO_Init+0x1f8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a4c      	ldr	r2, [pc, #304]	@ (8006cd8 <HAL_GPIO_Init+0x2ec>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d019      	beq.n	8006be0 <HAL_GPIO_Init+0x1f4>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a4b      	ldr	r2, [pc, #300]	@ (8006cdc <HAL_GPIO_Init+0x2f0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <HAL_GPIO_Init+0x1f0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8006ce0 <HAL_GPIO_Init+0x2f4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00d      	beq.n	8006bd8 <HAL_GPIO_Init+0x1ec>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a49      	ldr	r2, [pc, #292]	@ (8006ce4 <HAL_GPIO_Init+0x2f8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <HAL_GPIO_Init+0x1e8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a48      	ldr	r2, [pc, #288]	@ (8006ce8 <HAL_GPIO_Init+0x2fc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d101      	bne.n	8006bd0 <HAL_GPIO_Init+0x1e4>
 8006bcc:	2305      	movs	r3, #5
 8006bce:	e00a      	b.n	8006be6 <HAL_GPIO_Init+0x1fa>
 8006bd0:	2306      	movs	r3, #6
 8006bd2:	e008      	b.n	8006be6 <HAL_GPIO_Init+0x1fa>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	e006      	b.n	8006be6 <HAL_GPIO_Init+0x1fa>
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e004      	b.n	8006be6 <HAL_GPIO_Init+0x1fa>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e002      	b.n	8006be6 <HAL_GPIO_Init+0x1fa>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <HAL_GPIO_Init+0x1fa>
 8006be4:	2300      	movs	r3, #0
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	f002 0203 	and.w	r2, r2, #3
 8006bec:	0092      	lsls	r2, r2, #2
 8006bee:	4093      	lsls	r3, r2
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bf6:	4937      	ldr	r1, [pc, #220]	@ (8006cd4 <HAL_GPIO_Init+0x2e8>)
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	089b      	lsrs	r3, r3, #2
 8006bfc:	3302      	adds	r3, #2
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c04:	4b39      	ldr	r3, [pc, #228]	@ (8006cec <HAL_GPIO_Init+0x300>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4013      	ands	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c28:	4a30      	ldr	r2, [pc, #192]	@ (8006cec <HAL_GPIO_Init+0x300>)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8006cec <HAL_GPIO_Init+0x300>)
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	43db      	mvns	r3, r3
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c52:	4a26      	ldr	r2, [pc, #152]	@ (8006cec <HAL_GPIO_Init+0x300>)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006c58:	4b24      	ldr	r3, [pc, #144]	@ (8006cec <HAL_GPIO_Init+0x300>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4013      	ands	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cec <HAL_GPIO_Init+0x300>)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006c82:	4b1a      	ldr	r3, [pc, #104]	@ (8006cec <HAL_GPIO_Init+0x300>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ca6:	4a11      	ldr	r2, [pc, #68]	@ (8006cec <HAL_GPIO_Init+0x300>)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f47f ae9d 	bne.w	80069fc <HAL_GPIO_Init+0x10>
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	40010000 	.word	0x40010000
 8006cd8:	48000400 	.word	0x48000400
 8006cdc:	48000800 	.word	0x48000800
 8006ce0:	48000c00 	.word	0x48000c00
 8006ce4:	48001000 	.word	0x48001000
 8006ce8:	48001400 	.word	0x48001400
 8006cec:	40010400 	.word	0x40010400

08006cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	807b      	strh	r3, [r7, #2]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d00:	787b      	ldrb	r3, [r7, #1]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d06:	887a      	ldrh	r2, [r7, #2]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d0c:	e002      	b.n	8006d14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d0e:	887a      	ldrh	r2, [r7, #2]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	4603      	mov	r3, r0
 8006d28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006d2a:	4b08      	ldr	r3, [pc, #32]	@ (8006d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d2c:	695a      	ldr	r2, [r3, #20]
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d006      	beq.n	8006d44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d36:	4a05      	ldr	r2, [pc, #20]	@ (8006d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d38:	88fb      	ldrh	r3, [r7, #6]
 8006d3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f806 	bl	8006d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40010400 	.word	0x40010400

08006d50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e08d      	b.n	8006e94 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d106      	bne.n	8006d92 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7fb fcf7 	bl	8002780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2224      	movs	r2, #36	@ 0x24
 8006d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0201 	bic.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006db6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dc6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d107      	bne.n	8006de0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ddc:	609a      	str	r2, [r3, #8]
 8006dde:	e006      	b.n	8006dee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006dec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d108      	bne.n	8006e08 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e04:	605a      	str	r2, [r3, #4]
 8006e06:	e007      	b.n	8006e18 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e2a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68da      	ldr	r2, [r3, #12]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69d9      	ldr	r1, [r3, #28]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1a      	ldr	r2, [r3, #32]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0201 	orr.w	r2, r2, #1
 8006e74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	817b      	strh	r3, [r7, #10]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	813b      	strh	r3, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	f040 80f9 	bne.w	80070b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <HAL_I2C_Mem_Write+0x34>
 8006eca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d105      	bne.n	8006edc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ed6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0ed      	b.n	80070b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <HAL_I2C_Mem_Write+0x4e>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e0e6      	b.n	80070b8 <HAL_I2C_Mem_Write+0x21c>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ef2:	f7fd fec1 	bl	8004c78 <HAL_GetTick>
 8006ef6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	2319      	movs	r3, #25
 8006efe:	2201      	movs	r2, #1
 8006f00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fac3 	bl	8007490 <I2C_WaitOnFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0d1      	b.n	80070b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2221      	movs	r2, #33	@ 0x21
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2240      	movs	r2, #64	@ 0x40
 8006f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a3a      	ldr	r2, [r7, #32]
 8006f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f3c:	88f8      	ldrh	r0, [r7, #6]
 8006f3e:	893a      	ldrh	r2, [r7, #8]
 8006f40:	8979      	ldrh	r1, [r7, #10]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 f9d3 	bl	80072f8 <I2C_RequestMemoryWrite>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e0a9      	b.n	80070b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2bff      	cmp	r3, #255	@ 0xff
 8006f6c:	d90e      	bls.n	8006f8c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	22ff      	movs	r2, #255	@ 0xff
 8006f72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	8979      	ldrh	r1, [r7, #10]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fc47 	bl	8007818 <I2C_TransferConfig>
 8006f8a:	e00f      	b.n	8006fac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	8979      	ldrh	r1, [r7, #10]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 fc36 	bl	8007818 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fac6 	bl	8007542 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e07b      	b.n	80070b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d034      	beq.n	8007064 <HAL_I2C_Mem_Write+0x1c8>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d130      	bne.n	8007064 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007008:	2200      	movs	r2, #0
 800700a:	2180      	movs	r1, #128	@ 0x80
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fa3f 	bl	8007490 <I2C_WaitOnFlagUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e04d      	b.n	80070b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007020:	b29b      	uxth	r3, r3
 8007022:	2bff      	cmp	r3, #255	@ 0xff
 8007024:	d90e      	bls.n	8007044 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	22ff      	movs	r2, #255	@ 0xff
 800702a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007030:	b2da      	uxtb	r2, r3
 8007032:	8979      	ldrh	r1, [r7, #10]
 8007034:	2300      	movs	r3, #0
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 fbeb 	bl	8007818 <I2C_TransferConfig>
 8007042:	e00f      	b.n	8007064 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007052:	b2da      	uxtb	r2, r3
 8007054:	8979      	ldrh	r1, [r7, #10]
 8007056:	2300      	movs	r3, #0
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fbda 	bl	8007818 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d19e      	bne.n	8006fac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 faac 	bl	80075d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e01a      	b.n	80070b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2220      	movs	r2, #32
 8007088:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6859      	ldr	r1, [r3, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4b0a      	ldr	r3, [pc, #40]	@ (80070c0 <HAL_I2C_Mem_Write+0x224>)
 8007096:	400b      	ands	r3, r1
 8007098:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
  }
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	fe00e800 	.word	0xfe00e800

080070c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	4608      	mov	r0, r1
 80070ce:	4611      	mov	r1, r2
 80070d0:	461a      	mov	r2, r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	817b      	strh	r3, [r7, #10]
 80070d6:	460b      	mov	r3, r1
 80070d8:	813b      	strh	r3, [r7, #8]
 80070da:	4613      	mov	r3, r2
 80070dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	f040 80fd 	bne.w	80072e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <HAL_I2C_Mem_Read+0x34>
 80070f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d105      	bne.n	8007104 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e0f1      	b.n	80072e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_I2C_Mem_Read+0x4e>
 800710e:	2302      	movs	r3, #2
 8007110:	e0ea      	b.n	80072e8 <HAL_I2C_Mem_Read+0x224>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800711a:	f7fd fdad 	bl	8004c78 <HAL_GetTick>
 800711e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	2319      	movs	r3, #25
 8007126:	2201      	movs	r2, #1
 8007128:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f9af 	bl	8007490 <I2C_WaitOnFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0d5      	b.n	80072e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2222      	movs	r2, #34	@ 0x22
 8007140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2240      	movs	r2, #64	@ 0x40
 8007148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a3a      	ldr	r2, [r7, #32]
 8007156:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800715c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007164:	88f8      	ldrh	r0, [r7, #6]
 8007166:	893a      	ldrh	r2, [r7, #8]
 8007168:	8979      	ldrh	r1, [r7, #10]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	4603      	mov	r3, r0
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f913 	bl	80073a0 <I2C_RequestMemoryRead>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e0ad      	b.n	80072e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007190:	b29b      	uxth	r3, r3
 8007192:	2bff      	cmp	r3, #255	@ 0xff
 8007194:	d90e      	bls.n	80071b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	22ff      	movs	r2, #255	@ 0xff
 800719a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	8979      	ldrh	r1, [r7, #10]
 80071a4:	4b52      	ldr	r3, [pc, #328]	@ (80072f0 <HAL_I2C_Mem_Read+0x22c>)
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fb33 	bl	8007818 <I2C_TransferConfig>
 80071b2:	e00f      	b.n	80071d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	8979      	ldrh	r1, [r7, #10]
 80071c6:	4b4a      	ldr	r3, [pc, #296]	@ (80072f0 <HAL_I2C_Mem_Read+0x22c>)
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fb22 	bl	8007818 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	2200      	movs	r2, #0
 80071dc:	2104      	movs	r1, #4
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f956 	bl	8007490 <I2C_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e07c      	b.n	80072e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d034      	beq.n	8007294 <HAL_I2C_Mem_Read+0x1d0>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800722e:	2b00      	cmp	r3, #0
 8007230:	d130      	bne.n	8007294 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007238:	2200      	movs	r2, #0
 800723a:	2180      	movs	r1, #128	@ 0x80
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f927 	bl	8007490 <I2C_WaitOnFlagUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e04d      	b.n	80072e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007250:	b29b      	uxth	r3, r3
 8007252:	2bff      	cmp	r3, #255	@ 0xff
 8007254:	d90e      	bls.n	8007274 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	22ff      	movs	r2, #255	@ 0xff
 800725a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007260:	b2da      	uxtb	r2, r3
 8007262:	8979      	ldrh	r1, [r7, #10]
 8007264:	2300      	movs	r3, #0
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fad3 	bl	8007818 <I2C_TransferConfig>
 8007272:	e00f      	b.n	8007294 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007282:	b2da      	uxtb	r2, r3
 8007284:	8979      	ldrh	r1, [r7, #10]
 8007286:	2300      	movs	r3, #0
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fac2 	bl	8007818 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d19a      	bne.n	80071d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f994 	bl	80075d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e01a      	b.n	80072e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2220      	movs	r2, #32
 80072b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6859      	ldr	r1, [r3, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <HAL_I2C_Mem_Read+0x230>)
 80072c6:	400b      	ands	r3, r1
 80072c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e000      	b.n	80072e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80072e6:	2302      	movs	r3, #2
  }
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	80002400 	.word	0x80002400
 80072f4:	fe00e800 	.word	0xfe00e800

080072f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	4608      	mov	r0, r1
 8007302:	4611      	mov	r1, r2
 8007304:	461a      	mov	r2, r3
 8007306:	4603      	mov	r3, r0
 8007308:	817b      	strh	r3, [r7, #10]
 800730a:	460b      	mov	r3, r1
 800730c:	813b      	strh	r3, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	8979      	ldrh	r1, [r7, #10]
 8007318:	4b20      	ldr	r3, [pc, #128]	@ (800739c <I2C_RequestMemoryWrite+0xa4>)
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 fa79 	bl	8007818 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f909 	bl	8007542 <I2C_WaitOnTXISFlagUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e02c      	b.n	8007394 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d105      	bne.n	800734c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007340:	893b      	ldrh	r3, [r7, #8]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	629a      	str	r2, [r3, #40]	@ 0x28
 800734a:	e015      	b.n	8007378 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800734c:	893b      	ldrh	r3, [r7, #8]
 800734e:	0a1b      	lsrs	r3, r3, #8
 8007350:	b29b      	uxth	r3, r3
 8007352:	b2da      	uxtb	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	69b9      	ldr	r1, [r7, #24]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f8ef 	bl	8007542 <I2C_WaitOnTXISFlagUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e012      	b.n	8007394 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800736e:	893b      	ldrh	r3, [r7, #8]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2200      	movs	r2, #0
 8007380:	2180      	movs	r1, #128	@ 0x80
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 f884 	bl	8007490 <I2C_WaitOnFlagUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e000      	b.n	8007394 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	80002000 	.word	0x80002000

080073a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	4608      	mov	r0, r1
 80073aa:	4611      	mov	r1, r2
 80073ac:	461a      	mov	r2, r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	817b      	strh	r3, [r7, #10]
 80073b2:	460b      	mov	r3, r1
 80073b4:	813b      	strh	r3, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	8979      	ldrh	r1, [r7, #10]
 80073c0:	4b20      	ldr	r3, [pc, #128]	@ (8007444 <I2C_RequestMemoryRead+0xa4>)
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	2300      	movs	r3, #0
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 fa26 	bl	8007818 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	69b9      	ldr	r1, [r7, #24]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f8b6 	bl	8007542 <I2C_WaitOnTXISFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e02c      	b.n	800743a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073e0:	88fb      	ldrh	r3, [r7, #6]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d105      	bne.n	80073f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073e6:	893b      	ldrh	r3, [r7, #8]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80073f0:	e015      	b.n	800741e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80073f2:	893b      	ldrh	r3, [r7, #8]
 80073f4:	0a1b      	lsrs	r3, r3, #8
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	69b9      	ldr	r1, [r7, #24]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f89c 	bl	8007542 <I2C_WaitOnTXISFlagUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e012      	b.n	800743a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007414:	893b      	ldrh	r3, [r7, #8]
 8007416:	b2da      	uxtb	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	2200      	movs	r2, #0
 8007426:	2140      	movs	r1, #64	@ 0x40
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f831 	bl	8007490 <I2C_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	80002000 	.word	0x80002000

08007448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b02      	cmp	r3, #2
 800745c:	d103      	bne.n	8007466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b01      	cmp	r3, #1
 8007472:	d007      	beq.n	8007484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699a      	ldr	r2, [r3, #24]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0201 	orr.w	r2, r2, #1
 8007482:	619a      	str	r2, [r3, #24]
  }
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	4613      	mov	r3, r2
 800749e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074a0:	e03b      	b.n	800751a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f8d6 	bl	8007658 <I2C_IsErrorOccurred>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e041      	b.n	800753a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d02d      	beq.n	800751a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074be:	f7fd fbdb 	bl	8004c78 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d302      	bcc.n	80074d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d122      	bne.n	800751a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bf0c      	ite	eq
 80074e4:	2301      	moveq	r3, #1
 80074e6:	2300      	movne	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d113      	bne.n	800751a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e00f      	b.n	800753a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699a      	ldr	r2, [r3, #24]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4013      	ands	r3, r2
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	429a      	cmp	r2, r3
 8007528:	bf0c      	ite	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	2300      	movne	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	429a      	cmp	r2, r3
 8007536:	d0b4      	beq.n	80074a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800754e:	e033      	b.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f87f 	bl	8007658 <I2C_IsErrorOccurred>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e031      	b.n	80075c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756a:	d025      	beq.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756c:	f7fd fb84 	bl	8004c78 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	429a      	cmp	r2, r3
 800757a:	d302      	bcc.n	8007582 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d11a      	bne.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b02      	cmp	r3, #2
 800758e:	d013      	beq.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e007      	b.n	80075c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d1c4      	bne.n	8007550 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075dc:	e02f      	b.n	800763e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 f838 	bl	8007658 <I2C_IsErrorOccurred>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e02d      	b.n	800764e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f2:	f7fd fb41 	bl	8004c78 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d302      	bcc.n	8007608 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d11a      	bne.n	800763e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b20      	cmp	r3, #32
 8007614:	d013      	beq.n	800763e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800761a:	f043 0220 	orr.w	r2, r3, #32
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e007      	b.n	800764e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b20      	cmp	r3, #32
 800764a:	d1c8      	bne.n	80075de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	@ 0x28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b00      	cmp	r3, #0
 8007682:	d068      	beq.n	8007756 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2210      	movs	r2, #16
 800768a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800768c:	e049      	b.n	8007722 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007694:	d045      	beq.n	8007722 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007696:	f7fd faef 	bl	8004c78 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d302      	bcc.n	80076ac <I2C_IsErrorOccurred+0x54>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d13a      	bne.n	8007722 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076ce:	d121      	bne.n	8007714 <I2C_IsErrorOccurred+0xbc>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076d6:	d01d      	beq.n	8007714 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80076d8:	7cfb      	ldrb	r3, [r7, #19]
 80076da:	2b20      	cmp	r3, #32
 80076dc:	d01a      	beq.n	8007714 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80076ee:	f7fd fac3 	bl	8004c78 <HAL_GetTick>
 80076f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076f4:	e00e      	b.n	8007714 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80076f6:	f7fd fabf 	bl	8004c78 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b19      	cmp	r3, #25
 8007702:	d907      	bls.n	8007714 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	f043 0320 	orr.w	r3, r3, #32
 800770a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007712:	e006      	b.n	8007722 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b20      	cmp	r3, #32
 8007720:	d1e9      	bne.n	80076f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b20      	cmp	r3, #32
 800772e:	d003      	beq.n	8007738 <I2C_IsErrorOccurred+0xe0>
 8007730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0aa      	beq.n	800768e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800773c:	2b00      	cmp	r3, #0
 800773e:	d103      	bne.n	8007748 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2220      	movs	r2, #32
 8007746:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	f043 0304 	orr.w	r3, r3, #4
 800774e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	f043 0301 	orr.w	r3, r3, #1
 800776e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007778:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00b      	beq.n	80077a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	f043 0308 	orr.w	r3, r3, #8
 8007790:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800779a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	f043 0302 	orr.w	r3, r3, #2
 80077b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80077c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01c      	beq.n	8007806 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f7ff fe3b 	bl	8007448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6859      	ldr	r1, [r3, #4]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <I2C_IsErrorOccurred+0x1bc>)
 80077de:	400b      	ands	r3, r1
 80077e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800780a:	4618      	mov	r0, r3
 800780c:	3728      	adds	r7, #40	@ 0x28
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	fe00e800 	.word	0xfe00e800

08007818 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	607b      	str	r3, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	817b      	strh	r3, [r7, #10]
 8007826:	4613      	mov	r3, r2
 8007828:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800782a:	897b      	ldrh	r3, [r7, #10]
 800782c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007830:	7a7b      	ldrb	r3, [r7, #9]
 8007832:	041b      	lsls	r3, r3, #16
 8007834:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007838:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	4313      	orrs	r3, r2
 8007842:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007846:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	0d5b      	lsrs	r3, r3, #21
 8007852:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007856:	4b08      	ldr	r3, [pc, #32]	@ (8007878 <I2C_TransferConfig+0x60>)
 8007858:	430b      	orrs	r3, r1
 800785a:	43db      	mvns	r3, r3
 800785c:	ea02 0103 	and.w	r1, r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	03ff63ff 	.word	0x03ff63ff

0800787c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b20      	cmp	r3, #32
 8007890:	d138      	bne.n	8007904 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800789c:	2302      	movs	r3, #2
 800789e:	e032      	b.n	8007906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2224      	movs	r2, #36	@ 0x24
 80078ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6819      	ldr	r1, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	e000      	b.n	8007906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007904:	2302      	movs	r3, #2
  }
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b20      	cmp	r3, #32
 8007926:	d139      	bne.n	800799c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007932:	2302      	movs	r3, #2
 8007934:	e033      	b.n	800799e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2224      	movs	r2, #36	@ 0x24
 8007942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0201 	bic.w	r2, r2, #1
 8007954:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007964:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4313      	orrs	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0201 	orr.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	e000      	b.n	800799e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800799c:	2302      	movs	r3, #2
  }
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e0c0      	b.n	8007b3e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d106      	bne.n	80079d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7fd f88f 	bl	8004af4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2203      	movs	r2, #3
 80079da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f005 fad6 	bl	800cf94 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
 80079ec:	e03e      	b.n	8007a6c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80079ee:	7bfa      	ldrb	r2, [r7, #15]
 80079f0:	6879      	ldr	r1, [r7, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	440b      	add	r3, r1
 80079fc:	3311      	adds	r3, #17
 80079fe:	2201      	movs	r2, #1
 8007a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007a02:	7bfa      	ldrb	r2, [r7, #15]
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	440b      	add	r3, r1
 8007a10:	3310      	adds	r3, #16
 8007a12:	7bfa      	ldrb	r2, [r7, #15]
 8007a14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a16:	7bfa      	ldrb	r2, [r7, #15]
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	440b      	add	r3, r1
 8007a24:	3313      	adds	r3, #19
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a2a:	7bfa      	ldrb	r2, [r7, #15]
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	440b      	add	r3, r1
 8007a38:	3320      	adds	r3, #32
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007a3e:	7bfa      	ldrb	r2, [r7, #15]
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	4613      	mov	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	440b      	add	r3, r1
 8007a4c:	3324      	adds	r3, #36	@ 0x24
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	440b      	add	r3, r1
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	791b      	ldrb	r3, [r3, #4]
 8007a70:	7bfa      	ldrb	r2, [r7, #15]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d3bb      	bcc.n	80079ee <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
 8007a7a:	e044      	b.n	8007b06 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007a7c:	7bfa      	ldrb	r2, [r7, #15]
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	440b      	add	r3, r1
 8007a8a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007a92:	7bfa      	ldrb	r2, [r7, #15]
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	440b      	add	r3, r1
 8007aa0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007aa4:	7bfa      	ldrb	r2, [r7, #15]
 8007aa6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007aa8:	7bfa      	ldrb	r2, [r7, #15]
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	440b      	add	r3, r1
 8007ab6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007abe:	7bfa      	ldrb	r2, [r7, #15]
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	440b      	add	r3, r1
 8007acc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007ad4:	7bfa      	ldrb	r2, [r7, #15]
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	440b      	add	r3, r1
 8007ae2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007aea:	7bfa      	ldrb	r2, [r7, #15]
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	4613      	mov	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	440b      	add	r3, r1
 8007af8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	3301      	adds	r3, #1
 8007b04:	73fb      	strb	r3, [r7, #15]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	791b      	ldrb	r3, [r3, #4]
 8007b0a:	7bfa      	ldrb	r2, [r7, #15]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d3b5      	bcc.n	8007a7c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007b1c:	f005 fa55 	bl	800cfca <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	7a9b      	ldrb	r3, [r3, #10]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d102      	bne.n	8007b3c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f805 	bl	8007b46 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b085      	sub	sp, #20
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f043 0301 	orr.w	r3, r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f043 0302 	orr.w	r3, r3, #2
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d141      	bne.n	8007c2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007baa:	4b4b      	ldr	r3, [pc, #300]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bb6:	d131      	bne.n	8007c1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bb8:	4b47      	ldr	r3, [pc, #284]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bbe:	4a46      	ldr	r2, [pc, #280]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007bc8:	4b43      	ldr	r3, [pc, #268]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bd0:	4a41      	ldr	r2, [pc, #260]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007bd8:	4b40      	ldr	r3, [pc, #256]	@ (8007cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2232      	movs	r2, #50	@ 0x32
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
 8007be2:	4a3f      	ldr	r2, [pc, #252]	@ (8007ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007be4:	fba2 2303 	umull	r2, r3, r2, r3
 8007be8:	0c9b      	lsrs	r3, r3, #18
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007bee:	e002      	b.n	8007bf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007bf6:	4b38      	ldr	r3, [pc, #224]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c02:	d102      	bne.n	8007c0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f2      	bne.n	8007bf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c0a:	4b33      	ldr	r3, [pc, #204]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c16:	d158      	bne.n	8007cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e057      	b.n	8007ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c22:	4a2d      	ldr	r2, [pc, #180]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c2c:	e04d      	b.n	8007cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c34:	d141      	bne.n	8007cba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c36:	4b28      	ldr	r3, [pc, #160]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c42:	d131      	bne.n	8007ca8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c44:	4b24      	ldr	r3, [pc, #144]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c4a:	4a23      	ldr	r2, [pc, #140]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c54:	4b20      	ldr	r3, [pc, #128]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c64:	4b1d      	ldr	r3, [pc, #116]	@ (8007cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2232      	movs	r2, #50	@ 0x32
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007c70:	fba2 2303 	umull	r2, r3, r2, r3
 8007c74:	0c9b      	lsrs	r3, r3, #18
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c7a:	e002      	b.n	8007c82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c82:	4b15      	ldr	r3, [pc, #84]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c8e:	d102      	bne.n	8007c96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1f2      	bne.n	8007c7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c96:	4b10      	ldr	r3, [pc, #64]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ca2:	d112      	bne.n	8007cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e011      	b.n	8007ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cae:	4a0a      	ldr	r2, [pc, #40]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007cb8:	e007      	b.n	8007cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007cba:	4b07      	ldr	r3, [pc, #28]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007cc2:	4a05      	ldr	r2, [pc, #20]	@ (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007cc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	40007000 	.word	0x40007000
 8007cdc:	2000000c 	.word	0x2000000c
 8007ce0:	431bde83 	.word	0x431bde83

08007ce4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007ce8:	4b05      	ldr	r3, [pc, #20]	@ (8007d00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	4a04      	ldr	r2, [pc, #16]	@ (8007d00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cf2:	6093      	str	r3, [r2, #8]
}
 8007cf4:	bf00      	nop
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	40007000 	.word	0x40007000

08007d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e2fe      	b.n	8008314 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d075      	beq.n	8007e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d22:	4b97      	ldr	r3, [pc, #604]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 030c 	and.w	r3, r3, #12
 8007d2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d2c:	4b94      	ldr	r3, [pc, #592]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d102      	bne.n	8007d42 <HAL_RCC_OscConfig+0x3e>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d002      	beq.n	8007d48 <HAL_RCC_OscConfig+0x44>
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d10b      	bne.n	8007d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d48:	4b8d      	ldr	r3, [pc, #564]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d05b      	beq.n	8007e0c <HAL_RCC_OscConfig+0x108>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d157      	bne.n	8007e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e2d9      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d68:	d106      	bne.n	8007d78 <HAL_RCC_OscConfig+0x74>
 8007d6a:	4b85      	ldr	r3, [pc, #532]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a84      	ldr	r2, [pc, #528]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	e01d      	b.n	8007db4 <HAL_RCC_OscConfig+0xb0>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d80:	d10c      	bne.n	8007d9c <HAL_RCC_OscConfig+0x98>
 8007d82:	4b7f      	ldr	r3, [pc, #508]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a7e      	ldr	r2, [pc, #504]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a7b      	ldr	r2, [pc, #492]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	e00b      	b.n	8007db4 <HAL_RCC_OscConfig+0xb0>
 8007d9c:	4b78      	ldr	r3, [pc, #480]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a77      	ldr	r2, [pc, #476]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	4b75      	ldr	r3, [pc, #468]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a74      	ldr	r2, [pc, #464]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d013      	beq.n	8007de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dbc:	f7fc ff5c 	bl	8004c78 <HAL_GetTick>
 8007dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dc4:	f7fc ff58 	bl	8004c78 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b64      	cmp	r3, #100	@ 0x64
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e29e      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0f0      	beq.n	8007dc4 <HAL_RCC_OscConfig+0xc0>
 8007de2:	e014      	b.n	8007e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de4:	f7fc ff48 	bl	8004c78 <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dec:	f7fc ff44 	bl	8004c78 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b64      	cmp	r3, #100	@ 0x64
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e28a      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dfe:	4b60      	ldr	r3, [pc, #384]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f0      	bne.n	8007dec <HAL_RCC_OscConfig+0xe8>
 8007e0a:	e000      	b.n	8007e0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d075      	beq.n	8007f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e1a:	4b59      	ldr	r3, [pc, #356]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 030c 	and.w	r3, r3, #12
 8007e22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e24:	4b56      	ldr	r3, [pc, #344]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b0c      	cmp	r3, #12
 8007e32:	d102      	bne.n	8007e3a <HAL_RCC_OscConfig+0x136>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d002      	beq.n	8007e40 <HAL_RCC_OscConfig+0x13c>
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d11f      	bne.n	8007e80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e40:	4b4f      	ldr	r3, [pc, #316]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <HAL_RCC_OscConfig+0x154>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e25d      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e58:	4b49      	ldr	r3, [pc, #292]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	061b      	lsls	r3, r3, #24
 8007e66:	4946      	ldr	r1, [pc, #280]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e6c:	4b45      	ldr	r3, [pc, #276]	@ (8007f84 <HAL_RCC_OscConfig+0x280>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fc feb5 	bl	8004be0 <HAL_InitTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d043      	beq.n	8007f04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e249      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d023      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e88:	4b3d      	ldr	r3, [pc, #244]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e94:	f7fc fef0 	bl	8004c78 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e9c:	f7fc feec 	bl	8004c78 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e232      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007eae:	4b34      	ldr	r3, [pc, #208]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eba:	4b31      	ldr	r3, [pc, #196]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	061b      	lsls	r3, r3, #24
 8007ec8:	492d      	ldr	r1, [pc, #180]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	604b      	str	r3, [r1, #4]
 8007ece:	e01a      	b.n	8007f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007ed6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007edc:	f7fc fecc 	bl	8004c78 <HAL_GetTick>
 8007ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ee2:	e008      	b.n	8007ef6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ee4:	f7fc fec8 	bl	8004c78 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e20e      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ef6:	4b22      	ldr	r3, [pc, #136]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f0      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x1e0>
 8007f02:	e000      	b.n	8007f06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d041      	beq.n	8007f96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d01c      	beq.n	8007f54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f1a:	4b19      	ldr	r3, [pc, #100]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f20:	4a17      	ldr	r2, [pc, #92]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007f22:	f043 0301 	orr.w	r3, r3, #1
 8007f26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2a:	f7fc fea5 	bl	8004c78 <HAL_GetTick>
 8007f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f30:	e008      	b.n	8007f44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f32:	f7fc fea1 	bl	8004c78 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e1e7      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f44:	4b0e      	ldr	r3, [pc, #56]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0ef      	beq.n	8007f32 <HAL_RCC_OscConfig+0x22e>
 8007f52:	e020      	b.n	8007f96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f54:	4b0a      	ldr	r3, [pc, #40]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f5a:	4a09      	ldr	r2, [pc, #36]	@ (8007f80 <HAL_RCC_OscConfig+0x27c>)
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f64:	f7fc fe88 	bl	8004c78 <HAL_GetTick>
 8007f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f6a:	e00d      	b.n	8007f88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f6c:	f7fc fe84 	bl	8004c78 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d906      	bls.n	8007f88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e1ca      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
 8007f7e:	bf00      	nop
 8007f80:	40021000 	.word	0x40021000
 8007f84:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f88:	4b8c      	ldr	r3, [pc, #560]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8007f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1ea      	bne.n	8007f6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 80a6 	beq.w	80080f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007fa8:	4b84      	ldr	r3, [pc, #528]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8007faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x2b4>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <HAL_RCC_OscConfig+0x2b6>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00d      	beq.n	8007fda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8007fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fca:	4b7c      	ldr	r3, [pc, #496]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8007fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fda:	4b79      	ldr	r3, [pc, #484]	@ (80081c0 <HAL_RCC_OscConfig+0x4bc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d118      	bne.n	8008018 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fe6:	4b76      	ldr	r3, [pc, #472]	@ (80081c0 <HAL_RCC_OscConfig+0x4bc>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a75      	ldr	r2, [pc, #468]	@ (80081c0 <HAL_RCC_OscConfig+0x4bc>)
 8007fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ff2:	f7fc fe41 	bl	8004c78 <HAL_GetTick>
 8007ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ff8:	e008      	b.n	800800c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ffa:	f7fc fe3d 	bl	8004c78 <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d901      	bls.n	800800c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e183      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800800c:	4b6c      	ldr	r3, [pc, #432]	@ (80081c0 <HAL_RCC_OscConfig+0x4bc>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0f0      	beq.n	8007ffa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d108      	bne.n	8008032 <HAL_RCC_OscConfig+0x32e>
 8008020:	4b66      	ldr	r3, [pc, #408]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008026:	4a65      	ldr	r2, [pc, #404]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008028:	f043 0301 	orr.w	r3, r3, #1
 800802c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008030:	e024      	b.n	800807c <HAL_RCC_OscConfig+0x378>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	2b05      	cmp	r3, #5
 8008038:	d110      	bne.n	800805c <HAL_RCC_OscConfig+0x358>
 800803a:	4b60      	ldr	r3, [pc, #384]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008040:	4a5e      	ldr	r2, [pc, #376]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008042:	f043 0304 	orr.w	r3, r3, #4
 8008046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800804a:	4b5c      	ldr	r3, [pc, #368]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 800804c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008050:	4a5a      	ldr	r2, [pc, #360]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800805a:	e00f      	b.n	800807c <HAL_RCC_OscConfig+0x378>
 800805c:	4b57      	ldr	r3, [pc, #348]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008062:	4a56      	ldr	r2, [pc, #344]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008064:	f023 0301 	bic.w	r3, r3, #1
 8008068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800806c:	4b53      	ldr	r3, [pc, #332]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 800806e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008072:	4a52      	ldr	r2, [pc, #328]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008074:	f023 0304 	bic.w	r3, r3, #4
 8008078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d016      	beq.n	80080b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008084:	f7fc fdf8 	bl	8004c78 <HAL_GetTick>
 8008088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800808a:	e00a      	b.n	80080a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800808c:	f7fc fdf4 	bl	8004c78 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800809a:	4293      	cmp	r3, r2
 800809c:	d901      	bls.n	80080a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e138      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080a2:	4b46      	ldr	r3, [pc, #280]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 80080a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0ed      	beq.n	800808c <HAL_RCC_OscConfig+0x388>
 80080b0:	e015      	b.n	80080de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b2:	f7fc fde1 	bl	8004c78 <HAL_GetTick>
 80080b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080b8:	e00a      	b.n	80080d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ba:	f7fc fddd 	bl	8004c78 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e121      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080d0:	4b3a      	ldr	r3, [pc, #232]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 80080d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1ed      	bne.n	80080ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80080de:	7ffb      	ldrb	r3, [r7, #31]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d105      	bne.n	80080f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080e4:	4b35      	ldr	r3, [pc, #212]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 80080e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e8:	4a34      	ldr	r2, [pc, #208]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 80080ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d03c      	beq.n	8008176 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01c      	beq.n	800813e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008104:	4b2d      	ldr	r3, [pc, #180]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008106:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800810a:	4a2c      	ldr	r2, [pc, #176]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 800810c:	f043 0301 	orr.w	r3, r3, #1
 8008110:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008114:	f7fc fdb0 	bl	8004c78 <HAL_GetTick>
 8008118:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800811a:	e008      	b.n	800812e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800811c:	f7fc fdac 	bl	8004c78 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b02      	cmp	r3, #2
 8008128:	d901      	bls.n	800812e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e0f2      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800812e:	4b23      	ldr	r3, [pc, #140]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008130:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0ef      	beq.n	800811c <HAL_RCC_OscConfig+0x418>
 800813c:	e01b      	b.n	8008176 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800813e:	4b1f      	ldr	r3, [pc, #124]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008140:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008144:	4a1d      	ldr	r2, [pc, #116]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008146:	f023 0301 	bic.w	r3, r3, #1
 800814a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800814e:	f7fc fd93 	bl	8004c78 <HAL_GetTick>
 8008152:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008156:	f7fc fd8f 	bl	8004c78 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e0d5      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008168:	4b14      	ldr	r3, [pc, #80]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 800816a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1ef      	bne.n	8008156 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80c9 	beq.w	8008312 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008180:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f003 030c 	and.w	r3, r3, #12
 8008188:	2b0c      	cmp	r3, #12
 800818a:	f000 8083 	beq.w	8008294 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d15e      	bne.n	8008254 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008196:	4b09      	ldr	r3, [pc, #36]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a08      	ldr	r2, [pc, #32]	@ (80081bc <HAL_RCC_OscConfig+0x4b8>)
 800819c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a2:	f7fc fd69 	bl	8004c78 <HAL_GetTick>
 80081a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081a8:	e00c      	b.n	80081c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081aa:	f7fc fd65 	bl	8004c78 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d905      	bls.n	80081c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e0ab      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
 80081bc:	40021000 	.word	0x40021000
 80081c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081c4:	4b55      	ldr	r3, [pc, #340]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1ec      	bne.n	80081aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081d0:	4b52      	ldr	r3, [pc, #328]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	4b52      	ldr	r3, [pc, #328]	@ (8008320 <HAL_RCC_OscConfig+0x61c>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6a11      	ldr	r1, [r2, #32]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80081e0:	3a01      	subs	r2, #1
 80081e2:	0112      	lsls	r2, r2, #4
 80081e4:	4311      	orrs	r1, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80081ea:	0212      	lsls	r2, r2, #8
 80081ec:	4311      	orrs	r1, r2
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80081f2:	0852      	lsrs	r2, r2, #1
 80081f4:	3a01      	subs	r2, #1
 80081f6:	0552      	lsls	r2, r2, #21
 80081f8:	4311      	orrs	r1, r2
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80081fe:	0852      	lsrs	r2, r2, #1
 8008200:	3a01      	subs	r2, #1
 8008202:	0652      	lsls	r2, r2, #25
 8008204:	4311      	orrs	r1, r2
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800820a:	06d2      	lsls	r2, r2, #27
 800820c:	430a      	orrs	r2, r1
 800820e:	4943      	ldr	r1, [pc, #268]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 8008210:	4313      	orrs	r3, r2
 8008212:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008214:	4b41      	ldr	r3, [pc, #260]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a40      	ldr	r2, [pc, #256]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 800821a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800821e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008220:	4b3e      	ldr	r3, [pc, #248]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	4a3d      	ldr	r2, [pc, #244]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 8008226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800822a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822c:	f7fc fd24 	bl	8004c78 <HAL_GetTick>
 8008230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008232:	e008      	b.n	8008246 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008234:	f7fc fd20 	bl	8004c78 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e066      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008246:	4b35      	ldr	r3, [pc, #212]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0f0      	beq.n	8008234 <HAL_RCC_OscConfig+0x530>
 8008252:	e05e      	b.n	8008312 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008254:	4b31      	ldr	r3, [pc, #196]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a30      	ldr	r2, [pc, #192]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 800825a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800825e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008260:	f7fc fd0a 	bl	8004c78 <HAL_GetTick>
 8008264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008268:	f7fc fd06 	bl	8004c78 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b02      	cmp	r3, #2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e04c      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800827a:	4b28      	ldr	r3, [pc, #160]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1f0      	bne.n	8008268 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008286:	4b25      	ldr	r3, [pc, #148]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	4924      	ldr	r1, [pc, #144]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 800828c:	4b25      	ldr	r3, [pc, #148]	@ (8008324 <HAL_RCC_OscConfig+0x620>)
 800828e:	4013      	ands	r3, r2
 8008290:	60cb      	str	r3, [r1, #12]
 8008292:	e03e      	b.n	8008312 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e039      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80082a0:	4b1e      	ldr	r3, [pc, #120]	@ (800831c <HAL_RCC_OscConfig+0x618>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f003 0203 	and.w	r2, r3, #3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d12c      	bne.n	800830e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082be:	3b01      	subs	r3, #1
 80082c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d123      	bne.n	800830e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d11b      	bne.n	800830e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d113      	bne.n	800830e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f0:	085b      	lsrs	r3, r3, #1
 80082f2:	3b01      	subs	r3, #1
 80082f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d109      	bne.n	800830e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008304:	085b      	lsrs	r3, r3, #1
 8008306:	3b01      	subs	r3, #1
 8008308:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800830a:	429a      	cmp	r2, r3
 800830c:	d001      	beq.n	8008312 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e000      	b.n	8008314 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3720      	adds	r7, #32
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40021000 	.word	0x40021000
 8008320:	019f800c 	.word	0x019f800c
 8008324:	feeefffc 	.word	0xfeeefffc

08008328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008332:	2300      	movs	r3, #0
 8008334:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e11e      	b.n	800857e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008340:	4b91      	ldr	r3, [pc, #580]	@ (8008588 <HAL_RCC_ClockConfig+0x260>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 030f 	and.w	r3, r3, #15
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d910      	bls.n	8008370 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800834e:	4b8e      	ldr	r3, [pc, #568]	@ (8008588 <HAL_RCC_ClockConfig+0x260>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f023 020f 	bic.w	r2, r3, #15
 8008356:	498c      	ldr	r1, [pc, #560]	@ (8008588 <HAL_RCC_ClockConfig+0x260>)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	4313      	orrs	r3, r2
 800835c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800835e:	4b8a      	ldr	r3, [pc, #552]	@ (8008588 <HAL_RCC_ClockConfig+0x260>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	d001      	beq.n	8008370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e106      	b.n	800857e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d073      	beq.n	8008464 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	2b03      	cmp	r3, #3
 8008382:	d129      	bne.n	80083d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008384:	4b81      	ldr	r3, [pc, #516]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e0f4      	b.n	800857e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008394:	f000 f99c 	bl	80086d0 <RCC_GetSysClockFreqFromPLLSource>
 8008398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	4a7c      	ldr	r2, [pc, #496]	@ (8008590 <HAL_RCC_ClockConfig+0x268>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d93f      	bls.n	8008422 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80083a2:	4b7a      	ldr	r3, [pc, #488]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d033      	beq.n	8008422 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d12f      	bne.n	8008422 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80083c2:	4b72      	ldr	r3, [pc, #456]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083ca:	4a70      	ldr	r2, [pc, #448]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 80083cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80083d2:	2380      	movs	r3, #128	@ 0x80
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	e024      	b.n	8008422 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d107      	bne.n	80083f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083e0:	4b6a      	ldr	r3, [pc, #424]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d109      	bne.n	8008400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e0c6      	b.n	800857e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083f0:	4b66      	ldr	r3, [pc, #408]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0be      	b.n	800857e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008400:	f000 f8ce 	bl	80085a0 <HAL_RCC_GetSysClockFreq>
 8008404:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	4a61      	ldr	r2, [pc, #388]	@ (8008590 <HAL_RCC_ClockConfig+0x268>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d909      	bls.n	8008422 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800840e:	4b5f      	ldr	r3, [pc, #380]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008416:	4a5d      	ldr	r2, [pc, #372]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800841c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800841e:	2380      	movs	r3, #128	@ 0x80
 8008420:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008422:	4b5a      	ldr	r3, [pc, #360]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f023 0203 	bic.w	r2, r3, #3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	4957      	ldr	r1, [pc, #348]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008430:	4313      	orrs	r3, r2
 8008432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008434:	f7fc fc20 	bl	8004c78 <HAL_GetTick>
 8008438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800843a:	e00a      	b.n	8008452 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800843c:	f7fc fc1c 	bl	8004c78 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800844a:	4293      	cmp	r3, r2
 800844c:	d901      	bls.n	8008452 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e095      	b.n	800857e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008452:	4b4e      	ldr	r3, [pc, #312]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f003 020c 	and.w	r2, r3, #12
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	429a      	cmp	r2, r3
 8008462:	d1eb      	bne.n	800843c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d023      	beq.n	80084b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800847c:	4b43      	ldr	r3, [pc, #268]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	4a42      	ldr	r2, [pc, #264]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008486:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0308 	and.w	r3, r3, #8
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008494:	4b3d      	ldr	r3, [pc, #244]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800849c:	4a3b      	ldr	r2, [pc, #236]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 800849e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80084a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084a4:	4b39      	ldr	r3, [pc, #228]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	4936      	ldr	r1, [pc, #216]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	608b      	str	r3, [r1, #8]
 80084b6:	e008      	b.n	80084ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2b80      	cmp	r3, #128	@ 0x80
 80084bc:	d105      	bne.n	80084ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80084be:	4b33      	ldr	r3, [pc, #204]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	4a32      	ldr	r2, [pc, #200]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 80084c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008588 <HAL_RCC_ClockConfig+0x260>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 030f 	and.w	r3, r3, #15
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d21d      	bcs.n	8008514 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084d8:	4b2b      	ldr	r3, [pc, #172]	@ (8008588 <HAL_RCC_ClockConfig+0x260>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f023 020f 	bic.w	r2, r3, #15
 80084e0:	4929      	ldr	r1, [pc, #164]	@ (8008588 <HAL_RCC_ClockConfig+0x260>)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80084e8:	f7fc fbc6 	bl	8004c78 <HAL_GetTick>
 80084ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ee:	e00a      	b.n	8008506 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084f0:	f7fc fbc2 	bl	8004c78 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084fe:	4293      	cmp	r3, r2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e03b      	b.n	800857e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008506:	4b20      	ldr	r3, [pc, #128]	@ (8008588 <HAL_RCC_ClockConfig+0x260>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 030f 	and.w	r3, r3, #15
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d1ed      	bne.n	80084f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d008      	beq.n	8008532 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008520:	4b1a      	ldr	r3, [pc, #104]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	4917      	ldr	r1, [pc, #92]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 800852e:	4313      	orrs	r3, r2
 8008530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0308 	and.w	r3, r3, #8
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800853e:	4b13      	ldr	r3, [pc, #76]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	490f      	ldr	r1, [pc, #60]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 800854e:	4313      	orrs	r3, r2
 8008550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008552:	f000 f825 	bl	80085a0 <HAL_RCC_GetSysClockFreq>
 8008556:	4602      	mov	r2, r0
 8008558:	4b0c      	ldr	r3, [pc, #48]	@ (800858c <HAL_RCC_ClockConfig+0x264>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	091b      	lsrs	r3, r3, #4
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	490c      	ldr	r1, [pc, #48]	@ (8008594 <HAL_RCC_ClockConfig+0x26c>)
 8008564:	5ccb      	ldrb	r3, [r1, r3]
 8008566:	f003 031f 	and.w	r3, r3, #31
 800856a:	fa22 f303 	lsr.w	r3, r2, r3
 800856e:	4a0a      	ldr	r2, [pc, #40]	@ (8008598 <HAL_RCC_ClockConfig+0x270>)
 8008570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008572:	4b0a      	ldr	r3, [pc, #40]	@ (800859c <HAL_RCC_ClockConfig+0x274>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7fc fb32 	bl	8004be0 <HAL_InitTick>
 800857c:	4603      	mov	r3, r0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40022000 	.word	0x40022000
 800858c:	40021000 	.word	0x40021000
 8008590:	04c4b400 	.word	0x04c4b400
 8008594:	08013b38 	.word	0x08013b38
 8008598:	2000000c 	.word	0x2000000c
 800859c:	20000010 	.word	0x20000010

080085a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80085a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f003 030c 	and.w	r3, r3, #12
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d102      	bne.n	80085b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80085b2:	4b2a      	ldr	r3, [pc, #168]	@ (800865c <HAL_RCC_GetSysClockFreq+0xbc>)
 80085b4:	613b      	str	r3, [r7, #16]
 80085b6:	e047      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80085b8:	4b27      	ldr	r3, [pc, #156]	@ (8008658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 030c 	and.w	r3, r3, #12
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d102      	bne.n	80085ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80085c4:	4b25      	ldr	r3, [pc, #148]	@ (800865c <HAL_RCC_GetSysClockFreq+0xbc>)
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	e03e      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80085ca:	4b23      	ldr	r3, [pc, #140]	@ (8008658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 030c 	and.w	r3, r3, #12
 80085d2:	2b0c      	cmp	r3, #12
 80085d4:	d136      	bne.n	8008644 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085d6:	4b20      	ldr	r3, [pc, #128]	@ (8008658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	091b      	lsrs	r3, r3, #4
 80085e6:	f003 030f 	and.w	r3, r3, #15
 80085ea:	3301      	adds	r3, #1
 80085ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d10c      	bne.n	800860e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085f4:	4a19      	ldr	r2, [pc, #100]	@ (800865c <HAL_RCC_GetSysClockFreq+0xbc>)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fc:	4a16      	ldr	r2, [pc, #88]	@ (8008658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085fe:	68d2      	ldr	r2, [r2, #12]
 8008600:	0a12      	lsrs	r2, r2, #8
 8008602:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008606:	fb02 f303 	mul.w	r3, r2, r3
 800860a:	617b      	str	r3, [r7, #20]
      break;
 800860c:	e00c      	b.n	8008628 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800860e:	4a13      	ldr	r2, [pc, #76]	@ (800865c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	fbb2 f3f3 	udiv	r3, r2, r3
 8008616:	4a10      	ldr	r2, [pc, #64]	@ (8008658 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008618:	68d2      	ldr	r2, [r2, #12]
 800861a:	0a12      	lsrs	r2, r2, #8
 800861c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008620:	fb02 f303 	mul.w	r3, r2, r3
 8008624:	617b      	str	r3, [r7, #20]
      break;
 8008626:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008628:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <HAL_RCC_GetSysClockFreq+0xb8>)
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	0e5b      	lsrs	r3, r3, #25
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	3301      	adds	r3, #1
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	e001      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008648:	693b      	ldr	r3, [r7, #16]
}
 800864a:	4618      	mov	r0, r3
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40021000 	.word	0x40021000
 800865c:	00f42400 	.word	0x00f42400

08008660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008664:	4b03      	ldr	r3, [pc, #12]	@ (8008674 <HAL_RCC_GetHCLKFreq+0x14>)
 8008666:	681b      	ldr	r3, [r3, #0]
}
 8008668:	4618      	mov	r0, r3
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	2000000c 	.word	0x2000000c

08008678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800867c:	f7ff fff0 	bl	8008660 <HAL_RCC_GetHCLKFreq>
 8008680:	4602      	mov	r2, r0
 8008682:	4b06      	ldr	r3, [pc, #24]	@ (800869c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	4904      	ldr	r1, [pc, #16]	@ (80086a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800868e:	5ccb      	ldrb	r3, [r1, r3]
 8008690:	f003 031f 	and.w	r3, r3, #31
 8008694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008698:	4618      	mov	r0, r3
 800869a:	bd80      	pop	{r7, pc}
 800869c:	40021000 	.word	0x40021000
 80086a0:	08013b48 	.word	0x08013b48

080086a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80086a8:	f7ff ffda 	bl	8008660 <HAL_RCC_GetHCLKFreq>
 80086ac:	4602      	mov	r2, r0
 80086ae:	4b06      	ldr	r3, [pc, #24]	@ (80086c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	0adb      	lsrs	r3, r3, #11
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	4904      	ldr	r1, [pc, #16]	@ (80086cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80086ba:	5ccb      	ldrb	r3, [r1, r3]
 80086bc:	f003 031f 	and.w	r3, r3, #31
 80086c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40021000 	.word	0x40021000
 80086cc:	08013b48 	.word	0x08013b48

080086d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	091b      	lsrs	r3, r3, #4
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	3301      	adds	r3, #1
 80086ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d10c      	bne.n	800870e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086f4:	4a17      	ldr	r2, [pc, #92]	@ (8008754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086fc:	4a14      	ldr	r2, [pc, #80]	@ (8008750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086fe:	68d2      	ldr	r2, [r2, #12]
 8008700:	0a12      	lsrs	r2, r2, #8
 8008702:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	617b      	str	r3, [r7, #20]
    break;
 800870c:	e00c      	b.n	8008728 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800870e:	4a11      	ldr	r2, [pc, #68]	@ (8008754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	fbb2 f3f3 	udiv	r3, r2, r3
 8008716:	4a0e      	ldr	r2, [pc, #56]	@ (8008750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008718:	68d2      	ldr	r2, [r2, #12]
 800871a:	0a12      	lsrs	r2, r2, #8
 800871c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008720:	fb02 f303 	mul.w	r3, r2, r3
 8008724:	617b      	str	r3, [r7, #20]
    break;
 8008726:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008728:	4b09      	ldr	r3, [pc, #36]	@ (8008750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	0e5b      	lsrs	r3, r3, #25
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	3301      	adds	r3, #1
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008740:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008742:	687b      	ldr	r3, [r7, #4]
}
 8008744:	4618      	mov	r0, r3
 8008746:	371c      	adds	r7, #28
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	40021000 	.word	0x40021000
 8008754:	00f42400 	.word	0x00f42400

08008758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008760:	2300      	movs	r3, #0
 8008762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008764:	2300      	movs	r3, #0
 8008766:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8098 	beq.w	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008776:	2300      	movs	r3, #0
 8008778:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800877a:	4b43      	ldr	r3, [pc, #268]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800877c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800877e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10d      	bne.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008786:	4b40      	ldr	r3, [pc, #256]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800878a:	4a3f      	ldr	r2, [pc, #252]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800878c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008790:	6593      	str	r3, [r2, #88]	@ 0x58
 8008792:	4b3d      	ldr	r3, [pc, #244]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800879a:	60bb      	str	r3, [r7, #8]
 800879c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800879e:	2301      	movs	r3, #1
 80087a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087a2:	4b3a      	ldr	r3, [pc, #232]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a39      	ldr	r2, [pc, #228]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80087a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087ae:	f7fc fa63 	bl	8004c78 <HAL_GetTick>
 80087b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087b4:	e009      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087b6:	f7fc fa5f 	bl	8004c78 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d902      	bls.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	74fb      	strb	r3, [r7, #19]
        break;
 80087c8:	e005      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087ca:	4b30      	ldr	r3, [pc, #192]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0ef      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80087d6:	7cfb      	ldrb	r3, [r7, #19]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d159      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80087dc:	4b2a      	ldr	r3, [pc, #168]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01e      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d019      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80087f8:	4b23      	ldr	r3, [pc, #140]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008804:	4b20      	ldr	r3, [pc, #128]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800880a:	4a1f      	ldr	r2, [pc, #124]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800880c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008814:	4b1c      	ldr	r3, [pc, #112]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881a:	4a1b      	ldr	r2, [pc, #108]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800881c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008824:	4a18      	ldr	r2, [pc, #96]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d016      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008836:	f7fc fa1f 	bl	8004c78 <HAL_GetTick>
 800883a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800883c:	e00b      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800883e:	f7fc fa1b 	bl	8004c78 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800884c:	4293      	cmp	r3, r2
 800884e:	d902      	bls.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	74fb      	strb	r3, [r7, #19]
            break;
 8008854:	e006      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008856:	4b0c      	ldr	r3, [pc, #48]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0ec      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008864:	7cfb      	ldrb	r3, [r7, #19]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10b      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800886a:	4b07      	ldr	r3, [pc, #28]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008878:	4903      	ldr	r1, [pc, #12]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800887a:	4313      	orrs	r3, r2
 800887c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008880:	e008      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008882:	7cfb      	ldrb	r3, [r7, #19]
 8008884:	74bb      	strb	r3, [r7, #18]
 8008886:	e005      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008888:	40021000 	.word	0x40021000
 800888c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008890:	7cfb      	ldrb	r3, [r7, #19]
 8008892:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008894:	7c7b      	ldrb	r3, [r7, #17]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d105      	bne.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800889a:	4ba6      	ldr	r3, [pc, #664]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800889c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800889e:	4aa5      	ldr	r2, [pc, #660]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088b2:	4ba0      	ldr	r3, [pc, #640]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b8:	f023 0203 	bic.w	r2, r3, #3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	499c      	ldr	r1, [pc, #624]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088d4:	4b97      	ldr	r3, [pc, #604]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088da:	f023 020c 	bic.w	r2, r3, #12
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	4994      	ldr	r1, [pc, #592]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088f6:	4b8f      	ldr	r3, [pc, #572]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	498b      	ldr	r1, [pc, #556]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008906:	4313      	orrs	r3, r2
 8008908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008918:	4b86      	ldr	r3, [pc, #536]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800891a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	4983      	ldr	r1, [pc, #524]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008928:	4313      	orrs	r3, r2
 800892a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800893a:	4b7e      	ldr	r3, [pc, #504]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800893c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008940:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	497a      	ldr	r1, [pc, #488]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800894a:	4313      	orrs	r3, r2
 800894c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800895c:	4b75      	ldr	r3, [pc, #468]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800895e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008962:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	4972      	ldr	r1, [pc, #456]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800896c:	4313      	orrs	r3, r2
 800896e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800897e:	4b6d      	ldr	r3, [pc, #436]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008984:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	4969      	ldr	r1, [pc, #420]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800898e:	4313      	orrs	r3, r2
 8008990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80089a0:	4b64      	ldr	r3, [pc, #400]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	4961      	ldr	r1, [pc, #388]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089c2:	4b5c      	ldr	r3, [pc, #368]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d0:	4958      	ldr	r1, [pc, #352]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d015      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089e4:	4b53      	ldr	r3, [pc, #332]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f2:	4950      	ldr	r1, [pc, #320]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a02:	d105      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a04:	4b4b      	ldr	r3, [pc, #300]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	4a4a      	ldr	r2, [pc, #296]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a0e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d015      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008a1c:	4b45      	ldr	r3, [pc, #276]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2a:	4942      	ldr	r1, [pc, #264]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a3a:	d105      	bne.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	4a3c      	ldr	r2, [pc, #240]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a46:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d015      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a54:	4b37      	ldr	r3, [pc, #220]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a62:	4934      	ldr	r1, [pc, #208]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a72:	d105      	bne.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a74:	4b2f      	ldr	r3, [pc, #188]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	4a2e      	ldr	r2, [pc, #184]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d015      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a8c:	4b29      	ldr	r3, [pc, #164]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a9a:	4926      	ldr	r1, [pc, #152]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aaa:	d105      	bne.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008aac:	4b21      	ldr	r3, [pc, #132]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	4a20      	ldr	r2, [pc, #128]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ab6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d015      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad2:	4918      	ldr	r1, [pc, #96]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ae2:	d105      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ae4:	4b13      	ldr	r3, [pc, #76]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	4a12      	ldr	r2, [pc, #72]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008aee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d015      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008afc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0a:	490a      	ldr	r1, [pc, #40]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b1a:	d105      	bne.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008b1c:	4b05      	ldr	r3, [pc, #20]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	4a04      	ldr	r2, [pc, #16]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008b28:	7cbb      	ldrb	r3, [r7, #18]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40021000 	.word	0x40021000

08008b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e09d      	b.n	8008c86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d108      	bne.n	8008b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b5a:	d009      	beq.n	8008b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	61da      	str	r2, [r3, #28]
 8008b62:	e005      	b.n	8008b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7fa ff00 	bl	8003990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008bb0:	d902      	bls.n	8008bb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	e002      	b.n	8008bbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008bbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008bc6:	d007      	beq.n	8008bd8 <HAL_SPI_Init+0xa0>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008bd0:	d002      	beq.n	8008bd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1a:	ea42 0103 	orr.w	r1, r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	0c1b      	lsrs	r3, r3, #16
 8008c34:	f003 0204 	and.w	r2, r3, #4
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3c:	f003 0310 	and.w	r3, r3, #16
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c46:	f003 0308 	and.w	r3, r3, #8
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008c54:	ea42 0103 	orr.w	r1, r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69da      	ldr	r2, [r3, #28]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b088      	sub	sp, #32
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	603b      	str	r3, [r7, #0]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c9e:	f7fb ffeb 	bl	8004c78 <HAL_GetTick>
 8008ca2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d001      	beq.n	8008cb8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e15c      	b.n	8008f72 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d002      	beq.n	8008cc4 <HAL_SPI_Transmit+0x36>
 8008cbe:	88fb      	ldrh	r3, [r7, #6]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e154      	b.n	8008f72 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d101      	bne.n	8008cd6 <HAL_SPI_Transmit+0x48>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e14d      	b.n	8008f72 <HAL_SPI_Transmit+0x2e4>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2203      	movs	r2, #3
 8008ce2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	88fa      	ldrh	r2, [r7, #6]
 8008cf6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	88fa      	ldrh	r2, [r7, #6]
 8008cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d28:	d10f      	bne.n	8008d4a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d54:	2b40      	cmp	r3, #64	@ 0x40
 8008d56:	d007      	beq.n	8008d68 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d70:	d952      	bls.n	8008e18 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <HAL_SPI_Transmit+0xf2>
 8008d7a:	8b7b      	ldrh	r3, [r7, #26]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d145      	bne.n	8008e0c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d84:	881a      	ldrh	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d90:	1c9a      	adds	r2, r3, #2
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008da4:	e032      	b.n	8008e0c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d112      	bne.n	8008dda <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db8:	881a      	ldrh	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc4:	1c9a      	adds	r2, r3, #2
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008dd8:	e018      	b.n	8008e0c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dda:	f7fb ff4d 	bl	8004c78 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d803      	bhi.n	8008df2 <HAL_SPI_Transmit+0x164>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d102      	bne.n	8008df8 <HAL_SPI_Transmit+0x16a>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e0b2      	b.n	8008f72 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1c7      	bne.n	8008da6 <HAL_SPI_Transmit+0x118>
 8008e16:	e083      	b.n	8008f20 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <HAL_SPI_Transmit+0x198>
 8008e20:	8b7b      	ldrh	r3, [r7, #26]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d177      	bne.n	8008f16 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d912      	bls.n	8008e56 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e34:	881a      	ldrh	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e40:	1c9a      	adds	r2, r3, #2
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	3b02      	subs	r3, #2
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e54:	e05f      	b.n	8008f16 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	330c      	adds	r3, #12
 8008e60:	7812      	ldrb	r2, [r2, #0]
 8008e62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008e7c:	e04b      	b.n	8008f16 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d12b      	bne.n	8008ee4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d912      	bls.n	8008ebc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9a:	881a      	ldrh	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea6:	1c9a      	adds	r2, r3, #2
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	3b02      	subs	r3, #2
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008eba:	e02c      	b.n	8008f16 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	330c      	adds	r3, #12
 8008ec6:	7812      	ldrb	r2, [r2, #0]
 8008ec8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ee2:	e018      	b.n	8008f16 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ee4:	f7fb fec8 	bl	8004c78 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d803      	bhi.n	8008efc <HAL_SPI_Transmit+0x26e>
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	d102      	bne.n	8008f02 <HAL_SPI_Transmit+0x274>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e02d      	b.n	8008f72 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1ae      	bne.n	8008e7e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 fb73 	bl	8009610 <SPI_EndRxTxTransaction>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2220      	movs	r2, #32
 8008f34:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10a      	bne.n	8008f54 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008f70:	2300      	movs	r3, #0
  }
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3720      	adds	r7, #32
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b08a      	sub	sp, #40	@ 0x28
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
 8008f86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f8c:	f7fb fe74 	bl	8004c78 <HAL_GetTick>
 8008f90:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f98:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008fa0:	887b      	ldrh	r3, [r7, #2]
 8008fa2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008fa4:	887b      	ldrh	r3, [r7, #2]
 8008fa6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fa8:	7ffb      	ldrb	r3, [r7, #31]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d00c      	beq.n	8008fc8 <HAL_SPI_TransmitReceive+0x4e>
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fb4:	d106      	bne.n	8008fc4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d102      	bne.n	8008fc4 <HAL_SPI_TransmitReceive+0x4a>
 8008fbe:	7ffb      	ldrb	r3, [r7, #31]
 8008fc0:	2b04      	cmp	r3, #4
 8008fc2:	d001      	beq.n	8008fc8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e1f3      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d005      	beq.n	8008fda <HAL_SPI_TransmitReceive+0x60>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <HAL_SPI_TransmitReceive+0x60>
 8008fd4:	887b      	ldrh	r3, [r7, #2]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e1e8      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_SPI_TransmitReceive+0x72>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e1e1      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x436>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d003      	beq.n	8009008 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2205      	movs	r2, #5
 8009004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	887a      	ldrh	r2, [r7, #2]
 8009018:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	887a      	ldrh	r2, [r7, #2]
 8009020:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	887a      	ldrh	r2, [r7, #2]
 800902e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	887a      	ldrh	r2, [r7, #2]
 8009034:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800904a:	d802      	bhi.n	8009052 <HAL_SPI_TransmitReceive+0xd8>
 800904c:	8abb      	ldrh	r3, [r7, #20]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d908      	bls.n	8009064 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	e007      	b.n	8009074 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009072:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800907e:	2b40      	cmp	r3, #64	@ 0x40
 8009080:	d007      	beq.n	8009092 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800909a:	f240 8083 	bls.w	80091a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <HAL_SPI_TransmitReceive+0x132>
 80090a6:	8afb      	ldrh	r3, [r7, #22]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d16f      	bne.n	800918c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b0:	881a      	ldrh	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090bc:	1c9a      	adds	r2, r3, #2
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090d0:	e05c      	b.n	800918c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d11b      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x19e>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d016      	beq.n	8009118 <HAL_SPI_TransmitReceive+0x19e>
 80090ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d113      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f4:	881a      	ldrh	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009100:	1c9a      	adds	r2, r3, #2
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800910a:	b29b      	uxth	r3, r3
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b01      	cmp	r3, #1
 8009124:	d11c      	bne.n	8009160 <HAL_SPI_TransmitReceive+0x1e6>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800912c:	b29b      	uxth	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d016      	beq.n	8009160 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913c:	b292      	uxth	r2, r2
 800913e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009144:	1c9a      	adds	r2, r3, #2
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009150:	b29b      	uxth	r3, r3
 8009152:	3b01      	subs	r3, #1
 8009154:	b29a      	uxth	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800915c:	2301      	movs	r3, #1
 800915e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009160:	f7fb fd8a 	bl	8004c78 <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800916c:	429a      	cmp	r2, r3
 800916e:	d80d      	bhi.n	800918c <HAL_SPI_TransmitReceive+0x212>
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d009      	beq.n	800918c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e111      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009190:	b29b      	uxth	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d19d      	bne.n	80090d2 <HAL_SPI_TransmitReceive+0x158>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800919c:	b29b      	uxth	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d197      	bne.n	80090d2 <HAL_SPI_TransmitReceive+0x158>
 80091a2:	e0e5      	b.n	8009370 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <HAL_SPI_TransmitReceive+0x23a>
 80091ac:	8afb      	ldrh	r3, [r7, #22]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	f040 80d1 	bne.w	8009356 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d912      	bls.n	80091e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c2:	881a      	ldrh	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ce:	1c9a      	adds	r2, r3, #2
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	3b02      	subs	r3, #2
 80091dc:	b29a      	uxth	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091e2:	e0b8      	b.n	8009356 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	330c      	adds	r3, #12
 80091ee:	7812      	ldrb	r2, [r2, #0]
 80091f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009200:	b29b      	uxth	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	b29a      	uxth	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800920a:	e0a4      	b.n	8009356 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b02      	cmp	r3, #2
 8009218:	d134      	bne.n	8009284 <HAL_SPI_TransmitReceive+0x30a>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d02f      	beq.n	8009284 <HAL_SPI_TransmitReceive+0x30a>
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	2b01      	cmp	r3, #1
 8009228:	d12c      	bne.n	8009284 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800922e:	b29b      	uxth	r3, r3
 8009230:	2b01      	cmp	r3, #1
 8009232:	d912      	bls.n	800925a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009238:	881a      	ldrh	r2, [r3, #0]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009244:	1c9a      	adds	r2, r3, #2
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b02      	subs	r3, #2
 8009252:	b29a      	uxth	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009258:	e012      	b.n	8009280 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	330c      	adds	r3, #12
 8009264:	7812      	ldrb	r2, [r2, #0]
 8009266:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009276:	b29b      	uxth	r3, r3
 8009278:	3b01      	subs	r3, #1
 800927a:	b29a      	uxth	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b01      	cmp	r3, #1
 8009290:	d148      	bne.n	8009324 <HAL_SPI_TransmitReceive+0x3aa>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009298:	b29b      	uxth	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d042      	beq.n	8009324 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d923      	bls.n	80092f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68da      	ldr	r2, [r3, #12]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b4:	b292      	uxth	r2, r2
 80092b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092bc:	1c9a      	adds	r2, r3, #2
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b02      	subs	r3, #2
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d81f      	bhi.n	8009320 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092ee:	605a      	str	r2, [r3, #4]
 80092f0:	e016      	b.n	8009320 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f103 020c 	add.w	r2, r3, #12
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fe:	7812      	ldrb	r2, [r2, #0]
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29a      	uxth	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009320:	2301      	movs	r3, #1
 8009322:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009324:	f7fb fca8 	bl	8004c78 <HAL_GetTick>
 8009328:	4602      	mov	r2, r0
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009330:	429a      	cmp	r2, r3
 8009332:	d803      	bhi.n	800933c <HAL_SPI_TransmitReceive+0x3c2>
 8009334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933a:	d102      	bne.n	8009342 <HAL_SPI_TransmitReceive+0x3c8>
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	2b00      	cmp	r3, #0
 8009340:	d109      	bne.n	8009356 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e02c      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800935a:	b29b      	uxth	r3, r3
 800935c:	2b00      	cmp	r3, #0
 800935e:	f47f af55 	bne.w	800920c <HAL_SPI_TransmitReceive+0x292>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	f47f af4e 	bne.w	800920c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009370:	6a3a      	ldr	r2, [r7, #32]
 8009372:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f94b 	bl	8009610 <SPI_EndRxTxTransaction>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d008      	beq.n	8009392 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2220      	movs	r2, #32
 8009384:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e00e      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80093ae:	2300      	movs	r3, #0
  }
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3728      	adds	r7, #40	@ 0x28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093c6:	b2db      	uxtb	r3, r3
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	4613      	mov	r3, r2
 80093e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80093e4:	f7fb fc48 	bl	8004c78 <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ec:	1a9b      	subs	r3, r3, r2
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	4413      	add	r3, r2
 80093f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80093f4:	f7fb fc40 	bl	8004c78 <HAL_GetTick>
 80093f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80093fa:	4b39      	ldr	r3, [pc, #228]	@ (80094e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	015b      	lsls	r3, r3, #5
 8009400:	0d1b      	lsrs	r3, r3, #20
 8009402:	69fa      	ldr	r2, [r7, #28]
 8009404:	fb02 f303 	mul.w	r3, r2, r3
 8009408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800940a:	e054      	b.n	80094b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009412:	d050      	beq.n	80094b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009414:	f7fb fc30 	bl	8004c78 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	429a      	cmp	r2, r3
 8009422:	d902      	bls.n	800942a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d13d      	bne.n	80094a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009442:	d111      	bne.n	8009468 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800944c:	d004      	beq.n	8009458 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009456:	d107      	bne.n	8009468 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009470:	d10f      	bne.n	8009492 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e017      	b.n	80094d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	4013      	ands	r3, r2
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	bf0c      	ite	eq
 80094c6:	2301      	moveq	r3, #1
 80094c8:	2300      	movne	r3, #0
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	461a      	mov	r2, r3
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d19b      	bne.n	800940c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3720      	adds	r7, #32
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	2000000c 	.word	0x2000000c

080094e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08a      	sub	sp, #40	@ 0x28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
 80094f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80094f6:	f7fb fbbf 	bl	8004c78 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	1a9b      	subs	r3, r3, r2
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	4413      	add	r3, r2
 8009504:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009506:	f7fb fbb7 	bl	8004c78 <HAL_GetTick>
 800950a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	330c      	adds	r3, #12
 8009512:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009514:	4b3d      	ldr	r3, [pc, #244]	@ (800960c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	4613      	mov	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	00da      	lsls	r2, r3, #3
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	0d1b      	lsrs	r3, r3, #20
 8009524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009526:	fb02 f303 	mul.w	r3, r2, r3
 800952a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800952c:	e060      	b.n	80095f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009534:	d107      	bne.n	8009546 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d104      	bne.n	8009546 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	b2db      	uxtb	r3, r3
 8009542:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009544:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954c:	d050      	beq.n	80095f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800954e:	f7fb fb93 	bl	8004c78 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800955a:	429a      	cmp	r2, r3
 800955c:	d902      	bls.n	8009564 <SPI_WaitFifoStateUntilTimeout+0x80>
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	2b00      	cmp	r3, #0
 8009562:	d13d      	bne.n	80095e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009572:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800957c:	d111      	bne.n	80095a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009586:	d004      	beq.n	8009592 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009590:	d107      	bne.n	80095a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095aa:	d10f      	bne.n	80095cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	e010      	b.n	8009602 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	4013      	ands	r3, r2
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d196      	bne.n	800952e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3728      	adds	r7, #40	@ 0x28
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	2000000c 	.word	0x2000000c

08009610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af02      	add	r7, sp, #8
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2200      	movs	r2, #0
 8009624:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7ff ff5b 	bl	80094e4 <SPI_WaitFifoStateUntilTimeout>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d007      	beq.n	8009644 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009638:	f043 0220 	orr.w	r2, r3, #32
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e027      	b.n	8009694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2200      	movs	r2, #0
 800964c:	2180      	movs	r1, #128	@ 0x80
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fec0 	bl	80093d4 <SPI_WaitFlagStateUntilTimeout>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d007      	beq.n	800966a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800965e:	f043 0220 	orr.w	r2, r3, #32
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e014      	b.n	8009694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f7ff ff34 	bl	80094e4 <SPI_WaitFifoStateUntilTimeout>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009686:	f043 0220 	orr.w	r2, r3, #32
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e000      	b.n	8009694 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e049      	b.n	8009742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7fa fec2 	bl	800444c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4619      	mov	r1, r3
 80096da:	4610      	mov	r0, r2
 80096dc:	f001 f974 	bl	800a9c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b01      	cmp	r3, #1
 800975e:	d001      	beq.n	8009764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e04a      	b.n	80097fa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a21      	ldr	r2, [pc, #132]	@ (8009808 <HAL_TIM_Base_Start_IT+0xbc>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d018      	beq.n	80097b8 <HAL_TIM_Base_Start_IT+0x6c>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800978e:	d013      	beq.n	80097b8 <HAL_TIM_Base_Start_IT+0x6c>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a1d      	ldr	r2, [pc, #116]	@ (800980c <HAL_TIM_Base_Start_IT+0xc0>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d00e      	beq.n	80097b8 <HAL_TIM_Base_Start_IT+0x6c>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a1c      	ldr	r2, [pc, #112]	@ (8009810 <HAL_TIM_Base_Start_IT+0xc4>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d009      	beq.n	80097b8 <HAL_TIM_Base_Start_IT+0x6c>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a1a      	ldr	r2, [pc, #104]	@ (8009814 <HAL_TIM_Base_Start_IT+0xc8>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d004      	beq.n	80097b8 <HAL_TIM_Base_Start_IT+0x6c>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a19      	ldr	r2, [pc, #100]	@ (8009818 <HAL_TIM_Base_Start_IT+0xcc>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d115      	bne.n	80097e4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	4b17      	ldr	r3, [pc, #92]	@ (800981c <HAL_TIM_Base_Start_IT+0xd0>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b06      	cmp	r3, #6
 80097c8:	d015      	beq.n	80097f6 <HAL_TIM_Base_Start_IT+0xaa>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097d0:	d011      	beq.n	80097f6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f042 0201 	orr.w	r2, r2, #1
 80097e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e2:	e008      	b.n	80097f6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e000      	b.n	80097f8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	40012c00 	.word	0x40012c00
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40013400 	.word	0x40013400
 8009818:	40014000 	.word	0x40014000
 800981c:	00010007 	.word	0x00010007

08009820 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e049      	b.n	80098c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7fa fdae 	bl	80043a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f001 f8b2 	bl	800a9c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d109      	bne.n	80098f4 <HAL_TIM_PWM_Start+0x24>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	bf14      	ite	ne
 80098ec:	2301      	movne	r3, #1
 80098ee:	2300      	moveq	r3, #0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	e03c      	b.n	800996e <HAL_TIM_PWM_Start+0x9e>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d109      	bne.n	800990e <HAL_TIM_PWM_Start+0x3e>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b01      	cmp	r3, #1
 8009904:	bf14      	ite	ne
 8009906:	2301      	movne	r3, #1
 8009908:	2300      	moveq	r3, #0
 800990a:	b2db      	uxtb	r3, r3
 800990c:	e02f      	b.n	800996e <HAL_TIM_PWM_Start+0x9e>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b08      	cmp	r3, #8
 8009912:	d109      	bne.n	8009928 <HAL_TIM_PWM_Start+0x58>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b01      	cmp	r3, #1
 800991e:	bf14      	ite	ne
 8009920:	2301      	movne	r3, #1
 8009922:	2300      	moveq	r3, #0
 8009924:	b2db      	uxtb	r3, r3
 8009926:	e022      	b.n	800996e <HAL_TIM_PWM_Start+0x9e>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b0c      	cmp	r3, #12
 800992c:	d109      	bne.n	8009942 <HAL_TIM_PWM_Start+0x72>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b01      	cmp	r3, #1
 8009938:	bf14      	ite	ne
 800993a:	2301      	movne	r3, #1
 800993c:	2300      	moveq	r3, #0
 800993e:	b2db      	uxtb	r3, r3
 8009940:	e015      	b.n	800996e <HAL_TIM_PWM_Start+0x9e>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b10      	cmp	r3, #16
 8009946:	d109      	bne.n	800995c <HAL_TIM_PWM_Start+0x8c>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b01      	cmp	r3, #1
 8009952:	bf14      	ite	ne
 8009954:	2301      	movne	r3, #1
 8009956:	2300      	moveq	r3, #0
 8009958:	b2db      	uxtb	r3, r3
 800995a:	e008      	b.n	800996e <HAL_TIM_PWM_Start+0x9e>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b01      	cmp	r3, #1
 8009966:	bf14      	ite	ne
 8009968:	2301      	movne	r3, #1
 800996a:	2300      	moveq	r3, #0
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e097      	b.n	8009aa6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <HAL_TIM_PWM_Start+0xb6>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009984:	e023      	b.n	80099ce <HAL_TIM_PWM_Start+0xfe>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b04      	cmp	r3, #4
 800998a:	d104      	bne.n	8009996 <HAL_TIM_PWM_Start+0xc6>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009994:	e01b      	b.n	80099ce <HAL_TIM_PWM_Start+0xfe>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b08      	cmp	r3, #8
 800999a:	d104      	bne.n	80099a6 <HAL_TIM_PWM_Start+0xd6>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099a4:	e013      	b.n	80099ce <HAL_TIM_PWM_Start+0xfe>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b0c      	cmp	r3, #12
 80099aa:	d104      	bne.n	80099b6 <HAL_TIM_PWM_Start+0xe6>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099b4:	e00b      	b.n	80099ce <HAL_TIM_PWM_Start+0xfe>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b10      	cmp	r3, #16
 80099ba:	d104      	bne.n	80099c6 <HAL_TIM_PWM_Start+0xf6>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099c4:	e003      	b.n	80099ce <HAL_TIM_PWM_Start+0xfe>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2202      	movs	r2, #2
 80099ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2201      	movs	r2, #1
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f001 fc24 	bl	800b224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a33      	ldr	r2, [pc, #204]	@ (8009ab0 <HAL_TIM_PWM_Start+0x1e0>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d013      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x13e>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a32      	ldr	r2, [pc, #200]	@ (8009ab4 <HAL_TIM_PWM_Start+0x1e4>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00e      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x13e>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a30      	ldr	r2, [pc, #192]	@ (8009ab8 <HAL_TIM_PWM_Start+0x1e8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d009      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x13e>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a2f      	ldr	r2, [pc, #188]	@ (8009abc <HAL_TIM_PWM_Start+0x1ec>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d004      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x13e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a2d      	ldr	r2, [pc, #180]	@ (8009ac0 <HAL_TIM_PWM_Start+0x1f0>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d101      	bne.n	8009a12 <HAL_TIM_PWM_Start+0x142>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e000      	b.n	8009a14 <HAL_TIM_PWM_Start+0x144>
 8009a12:	2300      	movs	r3, #0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d007      	beq.n	8009a28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a20      	ldr	r2, [pc, #128]	@ (8009ab0 <HAL_TIM_PWM_Start+0x1e0>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d018      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x194>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a3a:	d013      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x194>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a20      	ldr	r2, [pc, #128]	@ (8009ac4 <HAL_TIM_PWM_Start+0x1f4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00e      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x194>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ac8 <HAL_TIM_PWM_Start+0x1f8>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d009      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x194>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a17      	ldr	r2, [pc, #92]	@ (8009ab4 <HAL_TIM_PWM_Start+0x1e4>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d004      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x194>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a16      	ldr	r2, [pc, #88]	@ (8009ab8 <HAL_TIM_PWM_Start+0x1e8>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d115      	bne.n	8009a90 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	4b18      	ldr	r3, [pc, #96]	@ (8009acc <HAL_TIM_PWM_Start+0x1fc>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b06      	cmp	r3, #6
 8009a74:	d015      	beq.n	8009aa2 <HAL_TIM_PWM_Start+0x1d2>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a7c:	d011      	beq.n	8009aa2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f042 0201 	orr.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a8e:	e008      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	e000      	b.n	8009aa4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	40012c00 	.word	0x40012c00
 8009ab4:	40013400 	.word	0x40013400
 8009ab8:	40014000 	.word	0x40014000
 8009abc:	40014400 	.word	0x40014400
 8009ac0:	40014800 	.word	0x40014800
 8009ac4:	40000400 	.word	0x40000400
 8009ac8:	40000800 	.word	0x40000800
 8009acc:	00010007 	.word	0x00010007

08009ad0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d109      	bne.n	8009afc <HAL_TIM_PWM_Start_DMA+0x2c>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	bf0c      	ite	eq
 8009af4:	2301      	moveq	r3, #1
 8009af6:	2300      	movne	r3, #0
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	e03c      	b.n	8009b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d109      	bne.n	8009b16 <HAL_TIM_PWM_Start_DMA+0x46>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	bf0c      	ite	eq
 8009b0e:	2301      	moveq	r3, #1
 8009b10:	2300      	movne	r3, #0
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	e02f      	b.n	8009b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d109      	bne.n	8009b30 <HAL_TIM_PWM_Start_DMA+0x60>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	bf0c      	ite	eq
 8009b28:	2301      	moveq	r3, #1
 8009b2a:	2300      	movne	r3, #0
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	e022      	b.n	8009b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	2b0c      	cmp	r3, #12
 8009b34:	d109      	bne.n	8009b4a <HAL_TIM_PWM_Start_DMA+0x7a>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	bf0c      	ite	eq
 8009b42:	2301      	moveq	r3, #1
 8009b44:	2300      	movne	r3, #0
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	e015      	b.n	8009b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2b10      	cmp	r3, #16
 8009b4e:	d109      	bne.n	8009b64 <HAL_TIM_PWM_Start_DMA+0x94>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	bf0c      	ite	eq
 8009b5c:	2301      	moveq	r3, #1
 8009b5e:	2300      	movne	r3, #0
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	e008      	b.n	8009b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	bf0c      	ite	eq
 8009b70:	2301      	moveq	r3, #1
 8009b72:	2300      	movne	r3, #0
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	e1a6      	b.n	8009ecc <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d109      	bne.n	8009b98 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	bf0c      	ite	eq
 8009b90:	2301      	moveq	r3, #1
 8009b92:	2300      	movne	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	e03c      	b.n	8009c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	d109      	bne.n	8009bb2 <HAL_TIM_PWM_Start_DMA+0xe2>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	bf0c      	ite	eq
 8009baa:	2301      	moveq	r3, #1
 8009bac:	2300      	movne	r3, #0
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	e02f      	b.n	8009c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b08      	cmp	r3, #8
 8009bb6:	d109      	bne.n	8009bcc <HAL_TIM_PWM_Start_DMA+0xfc>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	bf0c      	ite	eq
 8009bc4:	2301      	moveq	r3, #1
 8009bc6:	2300      	movne	r3, #0
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	e022      	b.n	8009c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b0c      	cmp	r3, #12
 8009bd0:	d109      	bne.n	8009be6 <HAL_TIM_PWM_Start_DMA+0x116>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	bf0c      	ite	eq
 8009bde:	2301      	moveq	r3, #1
 8009be0:	2300      	movne	r3, #0
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	e015      	b.n	8009c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b10      	cmp	r3, #16
 8009bea:	d109      	bne.n	8009c00 <HAL_TIM_PWM_Start_DMA+0x130>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	bf0c      	ite	eq
 8009bf8:	2301      	moveq	r3, #1
 8009bfa:	2300      	movne	r3, #0
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	e008      	b.n	8009c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	bf0c      	ite	eq
 8009c0c:	2301      	moveq	r3, #1
 8009c0e:	2300      	movne	r3, #0
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d034      	beq.n	8009c80 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <HAL_TIM_PWM_Start_DMA+0x152>
 8009c1c:	887b      	ldrh	r3, [r7, #2]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e152      	b.n	8009ecc <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <HAL_TIM_PWM_Start_DMA+0x166>
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c34:	e026      	b.n	8009c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d104      	bne.n	8009c46 <HAL_TIM_PWM_Start_DMA+0x176>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c44:	e01e      	b.n	8009c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d104      	bne.n	8009c56 <HAL_TIM_PWM_Start_DMA+0x186>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c54:	e016      	b.n	8009c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2b0c      	cmp	r3, #12
 8009c5a:	d104      	bne.n	8009c66 <HAL_TIM_PWM_Start_DMA+0x196>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c64:	e00e      	b.n	8009c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	2b10      	cmp	r3, #16
 8009c6a:	d104      	bne.n	8009c76 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c74:	e006      	b.n	8009c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c7e:	e001      	b.n	8009c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e123      	b.n	8009ecc <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b0c      	cmp	r3, #12
 8009c88:	f200 80ae 	bhi.w	8009de8 <HAL_TIM_PWM_Start_DMA+0x318>
 8009c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c94 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8009c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c92:	bf00      	nop
 8009c94:	08009cc9 	.word	0x08009cc9
 8009c98:	08009de9 	.word	0x08009de9
 8009c9c:	08009de9 	.word	0x08009de9
 8009ca0:	08009de9 	.word	0x08009de9
 8009ca4:	08009d11 	.word	0x08009d11
 8009ca8:	08009de9 	.word	0x08009de9
 8009cac:	08009de9 	.word	0x08009de9
 8009cb0:	08009de9 	.word	0x08009de9
 8009cb4:	08009d59 	.word	0x08009d59
 8009cb8:	08009de9 	.word	0x08009de9
 8009cbc:	08009de9 	.word	0x08009de9
 8009cc0:	08009de9 	.word	0x08009de9
 8009cc4:	08009da1 	.word	0x08009da1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ccc:	4a81      	ldr	r2, [pc, #516]	@ (8009ed4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8009cce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd4:	4a80      	ldr	r2, [pc, #512]	@ (8009ed8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8009cd6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cdc:	4a7f      	ldr	r2, [pc, #508]	@ (8009edc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8009cde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3334      	adds	r3, #52	@ 0x34
 8009cec:	461a      	mov	r2, r3
 8009cee:	887b      	ldrh	r3, [r7, #2]
 8009cf0:	f7fc fbe6 	bl	80064c0 <HAL_DMA_Start_IT>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e0e6      	b.n	8009ecc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68da      	ldr	r2, [r3, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d0c:	60da      	str	r2, [r3, #12]
      break;
 8009d0e:	e06e      	b.n	8009dee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d14:	4a6f      	ldr	r2, [pc, #444]	@ (8009ed4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8009d16:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8009ed8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8009d1e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d24:	4a6d      	ldr	r2, [pc, #436]	@ (8009edc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8009d26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3338      	adds	r3, #56	@ 0x38
 8009d34:	461a      	mov	r2, r3
 8009d36:	887b      	ldrh	r3, [r7, #2]
 8009d38:	f7fc fbc2 	bl	80064c0 <HAL_DMA_Start_IT>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e0c2      	b.n	8009ecc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d54:	60da      	str	r2, [r3, #12]
      break;
 8009d56:	e04a      	b.n	8009dee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	4a5d      	ldr	r2, [pc, #372]	@ (8009ed4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8009d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d64:	4a5c      	ldr	r2, [pc, #368]	@ (8009ed8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8009d66:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d6c:	4a5b      	ldr	r2, [pc, #364]	@ (8009edc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8009d6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009d74:	6879      	ldr	r1, [r7, #4]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	333c      	adds	r3, #60	@ 0x3c
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	887b      	ldrh	r3, [r7, #2]
 8009d80:	f7fc fb9e 	bl	80064c0 <HAL_DMA_Start_IT>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e09e      	b.n	8009ecc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d9c:	60da      	str	r2, [r3, #12]
      break;
 8009d9e:	e026      	b.n	8009dee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da4:	4a4b      	ldr	r2, [pc, #300]	@ (8009ed4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8009da6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dac:	4a4a      	ldr	r2, [pc, #296]	@ (8009ed8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8009dae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009db4:	4a49      	ldr	r2, [pc, #292]	@ (8009edc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8009db6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3340      	adds	r3, #64	@ 0x40
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	887b      	ldrh	r3, [r7, #2]
 8009dc8:	f7fc fb7a 	bl	80064c0 <HAL_DMA_Start_IT>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e07a      	b.n	8009ecc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68da      	ldr	r2, [r3, #12]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009de4:	60da      	str	r2, [r3, #12]
      break;
 8009de6:	e002      	b.n	8009dee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	75fb      	strb	r3, [r7, #23]
      break;
 8009dec:	bf00      	nop
  }

  if (status == HAL_OK)
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d16a      	bne.n	8009eca <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	68b9      	ldr	r1, [r7, #8]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f001 fa11 	bl	800b224 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a36      	ldr	r2, [pc, #216]	@ (8009ee0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d013      	beq.n	8009e34 <HAL_TIM_PWM_Start_DMA+0x364>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a34      	ldr	r2, [pc, #208]	@ (8009ee4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00e      	beq.n	8009e34 <HAL_TIM_PWM_Start_DMA+0x364>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a33      	ldr	r2, [pc, #204]	@ (8009ee8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d009      	beq.n	8009e34 <HAL_TIM_PWM_Start_DMA+0x364>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a31      	ldr	r2, [pc, #196]	@ (8009eec <HAL_TIM_PWM_Start_DMA+0x41c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d004      	beq.n	8009e34 <HAL_TIM_PWM_Start_DMA+0x364>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a30      	ldr	r2, [pc, #192]	@ (8009ef0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d101      	bne.n	8009e38 <HAL_TIM_PWM_Start_DMA+0x368>
 8009e34:	2301      	movs	r3, #1
 8009e36:	e000      	b.n	8009e3a <HAL_TIM_PWM_Start_DMA+0x36a>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a23      	ldr	r2, [pc, #140]	@ (8009ee0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d018      	beq.n	8009e8a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e60:	d013      	beq.n	8009e8a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a23      	ldr	r2, [pc, #140]	@ (8009ef4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d00e      	beq.n	8009e8a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a21      	ldr	r2, [pc, #132]	@ (8009ef8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d009      	beq.n	8009e8a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d004      	beq.n	8009e8a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a18      	ldr	r2, [pc, #96]	@ (8009ee8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d115      	bne.n	8009eb6 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	4b1a      	ldr	r3, [pc, #104]	@ (8009efc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8009e92:	4013      	ands	r3, r2
 8009e94:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	2b06      	cmp	r3, #6
 8009e9a:	d015      	beq.n	8009ec8 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea2:	d011      	beq.n	8009ec8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0201 	orr.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb4:	e008      	b.n	8009ec8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0201 	orr.w	r2, r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	e000      	b.n	8009eca <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ec8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	0800a8b7 	.word	0x0800a8b7
 8009ed8:	0800a95f 	.word	0x0800a95f
 8009edc:	0800a825 	.word	0x0800a825
 8009ee0:	40012c00 	.word	0x40012c00
 8009ee4:	40013400 	.word	0x40013400
 8009ee8:	40014000 	.word	0x40014000
 8009eec:	40014400 	.word	0x40014400
 8009ef0:	40014800 	.word	0x40014800
 8009ef4:	40000400 	.word	0x40000400
 8009ef8:	40000800 	.word	0x40000800
 8009efc:	00010007 	.word	0x00010007

08009f00 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b0c      	cmp	r3, #12
 8009f12:	d855      	bhi.n	8009fc0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8009f14:	a201      	add	r2, pc, #4	@ (adr r2, 8009f1c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8009f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1a:	bf00      	nop
 8009f1c:	08009f51 	.word	0x08009f51
 8009f20:	08009fc1 	.word	0x08009fc1
 8009f24:	08009fc1 	.word	0x08009fc1
 8009f28:	08009fc1 	.word	0x08009fc1
 8009f2c:	08009f6d 	.word	0x08009f6d
 8009f30:	08009fc1 	.word	0x08009fc1
 8009f34:	08009fc1 	.word	0x08009fc1
 8009f38:	08009fc1 	.word	0x08009fc1
 8009f3c:	08009f89 	.word	0x08009f89
 8009f40:	08009fc1 	.word	0x08009fc1
 8009f44:	08009fc1 	.word	0x08009fc1
 8009f48:	08009fc1 	.word	0x08009fc1
 8009f4c:	08009fa5 	.word	0x08009fa5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009f5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fc fb7f 	bl	8006668 <HAL_DMA_Abort_IT>
      break;
 8009f6a:	e02c      	b.n	8009fc6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68da      	ldr	r2, [r3, #12]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fc fb71 	bl	8006668 <HAL_DMA_Abort_IT>
      break;
 8009f86:	e01e      	b.n	8009fc6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fc fb63 	bl	8006668 <HAL_DMA_Abort_IT>
      break;
 8009fa2:	e010      	b.n	8009fc6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009fb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fc fb55 	bl	8006668 <HAL_DMA_Abort_IT>
      break;
 8009fbe:	e002      	b.n	8009fc6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f040 8081 	bne.w	800a0d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 f924 	bl	800b224 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a3e      	ldr	r2, [pc, #248]	@ (800a0dc <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d013      	beq.n	800a00e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a3d      	ldr	r2, [pc, #244]	@ (800a0e0 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d00e      	beq.n	800a00e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a3b      	ldr	r2, [pc, #236]	@ (800a0e4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d009      	beq.n	800a00e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a3a      	ldr	r2, [pc, #232]	@ (800a0e8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d004      	beq.n	800a00e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a38      	ldr	r2, [pc, #224]	@ (800a0ec <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d101      	bne.n	800a012 <HAL_TIM_PWM_Stop_DMA+0x112>
 800a00e:	2301      	movs	r3, #1
 800a010:	e000      	b.n	800a014 <HAL_TIM_PWM_Stop_DMA+0x114>
 800a012:	2300      	movs	r3, #0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d017      	beq.n	800a048 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6a1a      	ldr	r2, [r3, #32]
 800a01e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a022:	4013      	ands	r3, r2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10f      	bne.n	800a048 <HAL_TIM_PWM_Stop_DMA+0x148>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6a1a      	ldr	r2, [r3, #32]
 800a02e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a032:	4013      	ands	r3, r2
 800a034:	2b00      	cmp	r3, #0
 800a036:	d107      	bne.n	800a048 <HAL_TIM_PWM_Stop_DMA+0x148>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a046:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6a1a      	ldr	r2, [r3, #32]
 800a04e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a052:	4013      	ands	r3, r2
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10f      	bne.n	800a078 <HAL_TIM_PWM_Stop_DMA+0x178>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6a1a      	ldr	r2, [r3, #32]
 800a05e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a062:	4013      	ands	r3, r2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d107      	bne.n	800a078 <HAL_TIM_PWM_Stop_DMA+0x178>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0201 	bic.w	r2, r2, #1
 800a076:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d104      	bne.n	800a088 <HAL_TIM_PWM_Stop_DMA+0x188>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a086:	e023      	b.n	800a0d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2b04      	cmp	r3, #4
 800a08c:	d104      	bne.n	800a098 <HAL_TIM_PWM_Stop_DMA+0x198>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a096:	e01b      	b.n	800a0d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2b08      	cmp	r3, #8
 800a09c:	d104      	bne.n	800a0a8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0a6:	e013      	b.n	800a0d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b0c      	cmp	r3, #12
 800a0ac:	d104      	bne.n	800a0b8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0b6:	e00b      	b.n	800a0d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b10      	cmp	r3, #16
 800a0bc:	d104      	bne.n	800a0c8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0c6:	e003      	b.n	800a0d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	40012c00 	.word	0x40012c00
 800a0e0:	40013400 	.word	0x40013400
 800a0e4:	40014000 	.word	0x40014000
 800a0e8:	40014400 	.word	0x40014400
 800a0ec:	40014800 	.word	0x40014800

0800a0f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	f003 0302 	and.w	r3, r3, #2
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d020      	beq.n	800a154 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f003 0302 	and.w	r3, r3, #2
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01b      	beq.n	800a154 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f06f 0202 	mvn.w	r2, #2
 800a124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	f003 0303 	and.w	r3, r3, #3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fb4a 	bl	800a7d4 <HAL_TIM_IC_CaptureCallback>
 800a140:	e005      	b.n	800a14e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fb3c 	bl	800a7c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7f8 fc91 	bl	8002a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f003 0304 	and.w	r3, r3, #4
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d020      	beq.n	800a1a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01b      	beq.n	800a1a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f06f 0204 	mvn.w	r2, #4
 800a170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2202      	movs	r2, #2
 800a176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fb24 	bl	800a7d4 <HAL_TIM_IC_CaptureCallback>
 800a18c:	e005      	b.n	800a19a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fb16 	bl	800a7c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7f8 fc6b 	bl	8002a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f003 0308 	and.w	r3, r3, #8
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d020      	beq.n	800a1ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d01b      	beq.n	800a1ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f06f 0208 	mvn.w	r2, #8
 800a1bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2204      	movs	r2, #4
 800a1c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	f003 0303 	and.w	r3, r3, #3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fafe 	bl	800a7d4 <HAL_TIM_IC_CaptureCallback>
 800a1d8:	e005      	b.n	800a1e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 faf0 	bl	800a7c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7f8 fc45 	bl	8002a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f003 0310 	and.w	r3, r3, #16
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d020      	beq.n	800a238 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f003 0310 	and.w	r3, r3, #16
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01b      	beq.n	800a238 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f06f 0210 	mvn.w	r2, #16
 800a208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2208      	movs	r2, #8
 800a20e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fad8 	bl	800a7d4 <HAL_TIM_IC_CaptureCallback>
 800a224:	e005      	b.n	800a232 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 faca 	bl	800a7c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7f8 fc1f 	bl	8002a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00c      	beq.n	800a25c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d007      	beq.n	800a25c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f06f 0201 	mvn.w	r2, #1
 800a254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 faa8 	bl	800a7ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a262:	2b00      	cmp	r3, #0
 800a264:	d104      	bne.n	800a270 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00c      	beq.n	800a28a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a276:	2b00      	cmp	r3, #0
 800a278:	d007      	beq.n	800a28a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f001 f87f 	bl	800b388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00c      	beq.n	800a2ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d007      	beq.n	800a2ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a2a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f877 	bl	800b39c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00c      	beq.n	800a2d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d007      	beq.n	800a2d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a2ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fa95 	bl	800a7fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f003 0320 	and.w	r3, r3, #32
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00c      	beq.n	800a2f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f003 0320 	and.w	r3, r3, #32
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d007      	beq.n	800a2f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f06f 0220 	mvn.w	r2, #32
 800a2ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 f83f 	bl	800b374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00c      	beq.n	800a31a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a306:	2b00      	cmp	r3, #0
 800a308:	d007      	beq.n	800a31a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f001 f84b 	bl	800b3b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00c      	beq.n	800a33e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d007      	beq.n	800a33e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 f843 	bl	800b3c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00c      	beq.n	800a362 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d007      	beq.n	800a362 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a35a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f001 f83b 	bl	800b3d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00c      	beq.n	800a386 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d007      	beq.n	800a386 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a37e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 f833 	bl	800b3ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
	...

0800a390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d101      	bne.n	800a3ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e0ff      	b.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b14      	cmp	r3, #20
 800a3ba:	f200 80f0 	bhi.w	800a59e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a3be:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a419 	.word	0x0800a419
 800a3c8:	0800a59f 	.word	0x0800a59f
 800a3cc:	0800a59f 	.word	0x0800a59f
 800a3d0:	0800a59f 	.word	0x0800a59f
 800a3d4:	0800a459 	.word	0x0800a459
 800a3d8:	0800a59f 	.word	0x0800a59f
 800a3dc:	0800a59f 	.word	0x0800a59f
 800a3e0:	0800a59f 	.word	0x0800a59f
 800a3e4:	0800a49b 	.word	0x0800a49b
 800a3e8:	0800a59f 	.word	0x0800a59f
 800a3ec:	0800a59f 	.word	0x0800a59f
 800a3f0:	0800a59f 	.word	0x0800a59f
 800a3f4:	0800a4db 	.word	0x0800a4db
 800a3f8:	0800a59f 	.word	0x0800a59f
 800a3fc:	0800a59f 	.word	0x0800a59f
 800a400:	0800a59f 	.word	0x0800a59f
 800a404:	0800a51d 	.word	0x0800a51d
 800a408:	0800a59f 	.word	0x0800a59f
 800a40c:	0800a59f 	.word	0x0800a59f
 800a410:	0800a59f 	.word	0x0800a59f
 800a414:	0800a55d 	.word	0x0800a55d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68b9      	ldr	r1, [r7, #8]
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 fb6e 	bl	800ab00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	699a      	ldr	r2, [r3, #24]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f042 0208 	orr.w	r2, r2, #8
 800a432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	699a      	ldr	r2, [r3, #24]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 0204 	bic.w	r2, r2, #4
 800a442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6999      	ldr	r1, [r3, #24]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	691a      	ldr	r2, [r3, #16]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	430a      	orrs	r2, r1
 800a454:	619a      	str	r2, [r3, #24]
      break;
 800a456:	e0a5      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68b9      	ldr	r1, [r7, #8]
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fbde 	bl	800ac20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	699a      	ldr	r2, [r3, #24]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	699a      	ldr	r2, [r3, #24]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6999      	ldr	r1, [r3, #24]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	021a      	lsls	r2, r3, #8
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	619a      	str	r2, [r3, #24]
      break;
 800a498:	e084      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fc47 	bl	800ad34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69da      	ldr	r2, [r3, #28]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f042 0208 	orr.w	r2, r2, #8
 800a4b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	69da      	ldr	r2, [r3, #28]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f022 0204 	bic.w	r2, r2, #4
 800a4c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	69d9      	ldr	r1, [r3, #28]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	691a      	ldr	r2, [r3, #16]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	61da      	str	r2, [r3, #28]
      break;
 800a4d8:	e064      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68b9      	ldr	r1, [r7, #8]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 fcaf 	bl	800ae44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	69da      	ldr	r2, [r3, #28]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69da      	ldr	r2, [r3, #28]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	69d9      	ldr	r1, [r3, #28]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	021a      	lsls	r2, r3, #8
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	430a      	orrs	r2, r1
 800a518:	61da      	str	r2, [r3, #28]
      break;
 800a51a:	e043      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fd18 	bl	800af58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0208 	orr.w	r2, r2, #8
 800a536:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 0204 	bic.w	r2, r2, #4
 800a546:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	691a      	ldr	r2, [r3, #16]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a55a:	e023      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 fd5c 	bl	800b020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a576:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a586:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	021a      	lsls	r2, r3, #8
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a59c:	e002      	b.n	800a5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a5a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3718      	adds	r7, #24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop

0800a5b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d101      	bne.n	800a5d4 <HAL_TIM_ConfigClockSource+0x1c>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e0de      	b.n	800a792 <HAL_TIM_ConfigClockSource+0x1da>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a5f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a5f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a63      	ldr	r2, [pc, #396]	@ (800a79c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	f000 80a9 	beq.w	800a766 <HAL_TIM_ConfigClockSource+0x1ae>
 800a614:	4a61      	ldr	r2, [pc, #388]	@ (800a79c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a616:	4293      	cmp	r3, r2
 800a618:	f200 80ae 	bhi.w	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a61c:	4a60      	ldr	r2, [pc, #384]	@ (800a7a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	f000 80a1 	beq.w	800a766 <HAL_TIM_ConfigClockSource+0x1ae>
 800a624:	4a5e      	ldr	r2, [pc, #376]	@ (800a7a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a626:	4293      	cmp	r3, r2
 800a628:	f200 80a6 	bhi.w	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a62c:	4a5d      	ldr	r2, [pc, #372]	@ (800a7a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	f000 8099 	beq.w	800a766 <HAL_TIM_ConfigClockSource+0x1ae>
 800a634:	4a5b      	ldr	r2, [pc, #364]	@ (800a7a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a636:	4293      	cmp	r3, r2
 800a638:	f200 809e 	bhi.w	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a63c:	4a5a      	ldr	r2, [pc, #360]	@ (800a7a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	f000 8091 	beq.w	800a766 <HAL_TIM_ConfigClockSource+0x1ae>
 800a644:	4a58      	ldr	r2, [pc, #352]	@ (800a7a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a646:	4293      	cmp	r3, r2
 800a648:	f200 8096 	bhi.w	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a64c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a650:	f000 8089 	beq.w	800a766 <HAL_TIM_ConfigClockSource+0x1ae>
 800a654:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a658:	f200 808e 	bhi.w	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a65c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a660:	d03e      	beq.n	800a6e0 <HAL_TIM_ConfigClockSource+0x128>
 800a662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a666:	f200 8087 	bhi.w	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a66a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a66e:	f000 8086 	beq.w	800a77e <HAL_TIM_ConfigClockSource+0x1c6>
 800a672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a676:	d87f      	bhi.n	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a678:	2b70      	cmp	r3, #112	@ 0x70
 800a67a:	d01a      	beq.n	800a6b2 <HAL_TIM_ConfigClockSource+0xfa>
 800a67c:	2b70      	cmp	r3, #112	@ 0x70
 800a67e:	d87b      	bhi.n	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a680:	2b60      	cmp	r3, #96	@ 0x60
 800a682:	d050      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x16e>
 800a684:	2b60      	cmp	r3, #96	@ 0x60
 800a686:	d877      	bhi.n	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a688:	2b50      	cmp	r3, #80	@ 0x50
 800a68a:	d03c      	beq.n	800a706 <HAL_TIM_ConfigClockSource+0x14e>
 800a68c:	2b50      	cmp	r3, #80	@ 0x50
 800a68e:	d873      	bhi.n	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a690:	2b40      	cmp	r3, #64	@ 0x40
 800a692:	d058      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x18e>
 800a694:	2b40      	cmp	r3, #64	@ 0x40
 800a696:	d86f      	bhi.n	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a698:	2b30      	cmp	r3, #48	@ 0x30
 800a69a:	d064      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x1ae>
 800a69c:	2b30      	cmp	r3, #48	@ 0x30
 800a69e:	d86b      	bhi.n	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a6a0:	2b20      	cmp	r3, #32
 800a6a2:	d060      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x1ae>
 800a6a4:	2b20      	cmp	r3, #32
 800a6a6:	d867      	bhi.n	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d05c      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x1ae>
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	d05a      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x1ae>
 800a6b0:	e062      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a6c2:	f000 fd8f 	bl	800b1e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a6d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	609a      	str	r2, [r3, #8]
      break;
 800a6de:	e04f      	b.n	800a780 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a6f0:	f000 fd78 	bl	800b1e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689a      	ldr	r2, [r3, #8]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a702:	609a      	str	r2, [r3, #8]
      break;
 800a704:	e03c      	b.n	800a780 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a712:	461a      	mov	r2, r3
 800a714:	f000 fcea 	bl	800b0ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2150      	movs	r1, #80	@ 0x50
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 fd43 	bl	800b1aa <TIM_ITRx_SetConfig>
      break;
 800a724:	e02c      	b.n	800a780 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a732:	461a      	mov	r2, r3
 800a734:	f000 fd09 	bl	800b14a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2160      	movs	r1, #96	@ 0x60
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fd33 	bl	800b1aa <TIM_ITRx_SetConfig>
      break;
 800a744:	e01c      	b.n	800a780 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a752:	461a      	mov	r2, r3
 800a754:	f000 fcca 	bl	800b0ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2140      	movs	r1, #64	@ 0x40
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fd23 	bl	800b1aa <TIM_ITRx_SetConfig>
      break;
 800a764:	e00c      	b.n	800a780 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4619      	mov	r1, r3
 800a770:	4610      	mov	r0, r2
 800a772:	f000 fd1a 	bl	800b1aa <TIM_ITRx_SetConfig>
      break;
 800a776:	e003      	b.n	800a780 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	73fb      	strb	r3, [r7, #15]
      break;
 800a77c:	e000      	b.n	800a780 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a77e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a790:	7bfb      	ldrb	r3, [r7, #15]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	00100070 	.word	0x00100070
 800a7a0:	00100040 	.word	0x00100040
 800a7a4:	00100030 	.word	0x00100030
 800a7a8:	00100020 	.word	0x00100020

0800a7ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a830:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d107      	bne.n	800a84c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2201      	movs	r2, #1
 800a840:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a84a:	e02a      	b.n	800a8a2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	429a      	cmp	r2, r3
 800a854:	d107      	bne.n	800a866 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2202      	movs	r2, #2
 800a85a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a864:	e01d      	b.n	800a8a2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d107      	bne.n	800a880 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2204      	movs	r2, #4
 800a874:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a87e:	e010      	b.n	800a8a2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	429a      	cmp	r2, r3
 800a888:	d107      	bne.n	800a89a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2208      	movs	r2, #8
 800a88e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a898:	e003      	b.n	800a8a2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f7ff ffb4 	bl	800a810 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	771a      	strb	r2, [r3, #28]
}
 800a8ae:	bf00      	nop
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d10b      	bne.n	800a8e6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	69db      	ldr	r3, [r3, #28]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d136      	bne.n	800a94a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8e4:	e031      	b.n	800a94a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d10b      	bne.n	800a908 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d125      	bne.n	800a94a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a906:	e020      	b.n	800a94a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d10b      	bne.n	800a92a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2204      	movs	r2, #4
 800a916:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	69db      	ldr	r3, [r3, #28]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d114      	bne.n	800a94a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a928:	e00f      	b.n	800a94a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	429a      	cmp	r2, r3
 800a932:	d10a      	bne.n	800a94a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2208      	movs	r2, #8
 800a938:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d103      	bne.n	800a94a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f7f8 f890 	bl	8002a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	771a      	strb	r2, [r3, #28]
}
 800a956:	bf00      	nop
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a96a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	429a      	cmp	r2, r3
 800a974:	d103      	bne.n	800a97e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2201      	movs	r2, #1
 800a97a:	771a      	strb	r2, [r3, #28]
 800a97c:	e019      	b.n	800a9b2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	429a      	cmp	r2, r3
 800a986:	d103      	bne.n	800a990 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2202      	movs	r2, #2
 800a98c:	771a      	strb	r2, [r3, #28]
 800a98e:	e010      	b.n	800a9b2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	429a      	cmp	r2, r3
 800a998:	d103      	bne.n	800a9a2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2204      	movs	r2, #4
 800a99e:	771a      	strb	r2, [r3, #28]
 800a9a0:	e007      	b.n	800a9b2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d102      	bne.n	800a9b2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2208      	movs	r2, #8
 800a9b0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff ff18 	bl	800a7e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	771a      	strb	r2, [r3, #28]
}
 800a9be:	bf00      	nop
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a42      	ldr	r2, [pc, #264]	@ (800aae4 <TIM_Base_SetConfig+0x11c>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d00f      	beq.n	800aa00 <TIM_Base_SetConfig+0x38>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e6:	d00b      	beq.n	800aa00 <TIM_Base_SetConfig+0x38>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a3f      	ldr	r2, [pc, #252]	@ (800aae8 <TIM_Base_SetConfig+0x120>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d007      	beq.n	800aa00 <TIM_Base_SetConfig+0x38>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a3e      	ldr	r2, [pc, #248]	@ (800aaec <TIM_Base_SetConfig+0x124>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d003      	beq.n	800aa00 <TIM_Base_SetConfig+0x38>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a3d      	ldr	r2, [pc, #244]	@ (800aaf0 <TIM_Base_SetConfig+0x128>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d108      	bne.n	800aa12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a33      	ldr	r2, [pc, #204]	@ (800aae4 <TIM_Base_SetConfig+0x11c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d01b      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa20:	d017      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a30      	ldr	r2, [pc, #192]	@ (800aae8 <TIM_Base_SetConfig+0x120>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d013      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a2f      	ldr	r2, [pc, #188]	@ (800aaec <TIM_Base_SetConfig+0x124>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d00f      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a2e      	ldr	r2, [pc, #184]	@ (800aaf0 <TIM_Base_SetConfig+0x128>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d00b      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a2d      	ldr	r2, [pc, #180]	@ (800aaf4 <TIM_Base_SetConfig+0x12c>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d007      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a2c      	ldr	r2, [pc, #176]	@ (800aaf8 <TIM_Base_SetConfig+0x130>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d003      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a2b      	ldr	r2, [pc, #172]	@ (800aafc <TIM_Base_SetConfig+0x134>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d108      	bne.n	800aa64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a16      	ldr	r2, [pc, #88]	@ (800aae4 <TIM_Base_SetConfig+0x11c>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d00f      	beq.n	800aab0 <TIM_Base_SetConfig+0xe8>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a17      	ldr	r2, [pc, #92]	@ (800aaf0 <TIM_Base_SetConfig+0x128>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d00b      	beq.n	800aab0 <TIM_Base_SetConfig+0xe8>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a16      	ldr	r2, [pc, #88]	@ (800aaf4 <TIM_Base_SetConfig+0x12c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d007      	beq.n	800aab0 <TIM_Base_SetConfig+0xe8>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a15      	ldr	r2, [pc, #84]	@ (800aaf8 <TIM_Base_SetConfig+0x130>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d003      	beq.n	800aab0 <TIM_Base_SetConfig+0xe8>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a14      	ldr	r2, [pc, #80]	@ (800aafc <TIM_Base_SetConfig+0x134>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d103      	bne.n	800aab8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	691a      	ldr	r2, [r3, #16]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d105      	bne.n	800aad6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f023 0201 	bic.w	r2, r3, #1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	611a      	str	r2, [r3, #16]
  }
}
 800aad6:	bf00      	nop
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	40012c00 	.word	0x40012c00
 800aae8:	40000400 	.word	0x40000400
 800aaec:	40000800 	.word	0x40000800
 800aaf0:	40013400 	.word	0x40013400
 800aaf4:	40014000 	.word	0x40014000
 800aaf8:	40014400 	.word	0x40014400
 800aafc:	40014800 	.word	0x40014800

0800ab00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b087      	sub	sp, #28
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	f023 0201 	bic.w	r2, r3, #1
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f023 0303 	bic.w	r3, r3, #3
 800ab3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f023 0302 	bic.w	r3, r3, #2
 800ab4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	4313      	orrs	r3, r2
 800ab56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a2c      	ldr	r2, [pc, #176]	@ (800ac0c <TIM_OC1_SetConfig+0x10c>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d00f      	beq.n	800ab80 <TIM_OC1_SetConfig+0x80>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a2b      	ldr	r2, [pc, #172]	@ (800ac10 <TIM_OC1_SetConfig+0x110>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d00b      	beq.n	800ab80 <TIM_OC1_SetConfig+0x80>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ac14 <TIM_OC1_SetConfig+0x114>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d007      	beq.n	800ab80 <TIM_OC1_SetConfig+0x80>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a29      	ldr	r2, [pc, #164]	@ (800ac18 <TIM_OC1_SetConfig+0x118>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d003      	beq.n	800ab80 <TIM_OC1_SetConfig+0x80>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a28      	ldr	r2, [pc, #160]	@ (800ac1c <TIM_OC1_SetConfig+0x11c>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d10c      	bne.n	800ab9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f023 0308 	bic.w	r3, r3, #8
 800ab86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f023 0304 	bic.w	r3, r3, #4
 800ab98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a1b      	ldr	r2, [pc, #108]	@ (800ac0c <TIM_OC1_SetConfig+0x10c>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d00f      	beq.n	800abc2 <TIM_OC1_SetConfig+0xc2>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a1a      	ldr	r2, [pc, #104]	@ (800ac10 <TIM_OC1_SetConfig+0x110>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d00b      	beq.n	800abc2 <TIM_OC1_SetConfig+0xc2>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a19      	ldr	r2, [pc, #100]	@ (800ac14 <TIM_OC1_SetConfig+0x114>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d007      	beq.n	800abc2 <TIM_OC1_SetConfig+0xc2>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a18      	ldr	r2, [pc, #96]	@ (800ac18 <TIM_OC1_SetConfig+0x118>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d003      	beq.n	800abc2 <TIM_OC1_SetConfig+0xc2>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a17      	ldr	r2, [pc, #92]	@ (800ac1c <TIM_OC1_SetConfig+0x11c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d111      	bne.n	800abe6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	4313      	orrs	r3, r2
 800abda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	621a      	str	r2, [r3, #32]
}
 800ac00:	bf00      	nop
 800ac02:	371c      	adds	r7, #28
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	40012c00 	.word	0x40012c00
 800ac10:	40013400 	.word	0x40013400
 800ac14:	40014000 	.word	0x40014000
 800ac18:	40014400 	.word	0x40014400
 800ac1c:	40014800 	.word	0x40014800

0800ac20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	f023 0210 	bic.w	r2, r3, #16
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	021b      	lsls	r3, r3, #8
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	f023 0320 	bic.w	r3, r3, #32
 800ac6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	011b      	lsls	r3, r3, #4
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a28      	ldr	r2, [pc, #160]	@ (800ad20 <TIM_OC2_SetConfig+0x100>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d003      	beq.n	800ac8c <TIM_OC2_SetConfig+0x6c>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a27      	ldr	r2, [pc, #156]	@ (800ad24 <TIM_OC2_SetConfig+0x104>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d10d      	bne.n	800aca8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	011b      	lsls	r3, r3, #4
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a1d      	ldr	r2, [pc, #116]	@ (800ad20 <TIM_OC2_SetConfig+0x100>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00f      	beq.n	800acd0 <TIM_OC2_SetConfig+0xb0>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a1c      	ldr	r2, [pc, #112]	@ (800ad24 <TIM_OC2_SetConfig+0x104>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d00b      	beq.n	800acd0 <TIM_OC2_SetConfig+0xb0>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a1b      	ldr	r2, [pc, #108]	@ (800ad28 <TIM_OC2_SetConfig+0x108>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d007      	beq.n	800acd0 <TIM_OC2_SetConfig+0xb0>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a1a      	ldr	r2, [pc, #104]	@ (800ad2c <TIM_OC2_SetConfig+0x10c>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d003      	beq.n	800acd0 <TIM_OC2_SetConfig+0xb0>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a19      	ldr	r2, [pc, #100]	@ (800ad30 <TIM_OC2_SetConfig+0x110>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d113      	bne.n	800acf8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800acd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	4313      	orrs	r3, r2
 800acea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	621a      	str	r2, [r3, #32]
}
 800ad12:	bf00      	nop
 800ad14:	371c      	adds	r7, #28
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	40012c00 	.word	0x40012c00
 800ad24:	40013400 	.word	0x40013400
 800ad28:	40014000 	.word	0x40014000
 800ad2c:	40014400 	.word	0x40014400
 800ad30:	40014800 	.word	0x40014800

0800ad34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f023 0303 	bic.w	r3, r3, #3
 800ad6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a27      	ldr	r2, [pc, #156]	@ (800ae30 <TIM_OC3_SetConfig+0xfc>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d003      	beq.n	800ad9e <TIM_OC3_SetConfig+0x6a>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a26      	ldr	r2, [pc, #152]	@ (800ae34 <TIM_OC3_SetConfig+0x100>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d10d      	bne.n	800adba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ada4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	021b      	lsls	r3, r3, #8
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	4313      	orrs	r3, r2
 800adb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800adb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a1c      	ldr	r2, [pc, #112]	@ (800ae30 <TIM_OC3_SetConfig+0xfc>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d00f      	beq.n	800ade2 <TIM_OC3_SetConfig+0xae>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae34 <TIM_OC3_SetConfig+0x100>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d00b      	beq.n	800ade2 <TIM_OC3_SetConfig+0xae>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a1a      	ldr	r2, [pc, #104]	@ (800ae38 <TIM_OC3_SetConfig+0x104>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d007      	beq.n	800ade2 <TIM_OC3_SetConfig+0xae>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a19      	ldr	r2, [pc, #100]	@ (800ae3c <TIM_OC3_SetConfig+0x108>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d003      	beq.n	800ade2 <TIM_OC3_SetConfig+0xae>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a18      	ldr	r2, [pc, #96]	@ (800ae40 <TIM_OC3_SetConfig+0x10c>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d113      	bne.n	800ae0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ade8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800adf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	621a      	str	r2, [r3, #32]
}
 800ae24:	bf00      	nop
 800ae26:	371c      	adds	r7, #28
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	40012c00 	.word	0x40012c00
 800ae34:	40013400 	.word	0x40013400
 800ae38:	40014000 	.word	0x40014000
 800ae3c:	40014400 	.word	0x40014400
 800ae40:	40014800 	.word	0x40014800

0800ae44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b087      	sub	sp, #28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	021b      	lsls	r3, r3, #8
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	031b      	lsls	r3, r3, #12
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a28      	ldr	r2, [pc, #160]	@ (800af44 <TIM_OC4_SetConfig+0x100>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d003      	beq.n	800aeb0 <TIM_OC4_SetConfig+0x6c>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a27      	ldr	r2, [pc, #156]	@ (800af48 <TIM_OC4_SetConfig+0x104>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d10d      	bne.n	800aecc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aeb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	031b      	lsls	r3, r3, #12
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aeca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a1d      	ldr	r2, [pc, #116]	@ (800af44 <TIM_OC4_SetConfig+0x100>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d00f      	beq.n	800aef4 <TIM_OC4_SetConfig+0xb0>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a1c      	ldr	r2, [pc, #112]	@ (800af48 <TIM_OC4_SetConfig+0x104>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d00b      	beq.n	800aef4 <TIM_OC4_SetConfig+0xb0>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a1b      	ldr	r2, [pc, #108]	@ (800af4c <TIM_OC4_SetConfig+0x108>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d007      	beq.n	800aef4 <TIM_OC4_SetConfig+0xb0>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a1a      	ldr	r2, [pc, #104]	@ (800af50 <TIM_OC4_SetConfig+0x10c>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d003      	beq.n	800aef4 <TIM_OC4_SetConfig+0xb0>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a19      	ldr	r2, [pc, #100]	@ (800af54 <TIM_OC4_SetConfig+0x110>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d113      	bne.n	800af1c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aefa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af02:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	019b      	lsls	r3, r3, #6
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	019b      	lsls	r3, r3, #6
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	4313      	orrs	r3, r2
 800af1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	621a      	str	r2, [r3, #32]
}
 800af36:	bf00      	nop
 800af38:	371c      	adds	r7, #28
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	40012c00 	.word	0x40012c00
 800af48:	40013400 	.word	0x40013400
 800af4c:	40014000 	.word	0x40014000
 800af50:	40014400 	.word	0x40014400
 800af54:	40014800 	.word	0x40014800

0800af58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af58:	b480      	push	{r7}
 800af5a:	b087      	sub	sp, #28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a1b      	ldr	r3, [r3, #32]
 800af6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	4313      	orrs	r3, r2
 800af94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800af9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	041b      	lsls	r3, r3, #16
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a17      	ldr	r2, [pc, #92]	@ (800b00c <TIM_OC5_SetConfig+0xb4>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d00f      	beq.n	800afd2 <TIM_OC5_SetConfig+0x7a>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a16      	ldr	r2, [pc, #88]	@ (800b010 <TIM_OC5_SetConfig+0xb8>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d00b      	beq.n	800afd2 <TIM_OC5_SetConfig+0x7a>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a15      	ldr	r2, [pc, #84]	@ (800b014 <TIM_OC5_SetConfig+0xbc>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d007      	beq.n	800afd2 <TIM_OC5_SetConfig+0x7a>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a14      	ldr	r2, [pc, #80]	@ (800b018 <TIM_OC5_SetConfig+0xc0>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d003      	beq.n	800afd2 <TIM_OC5_SetConfig+0x7a>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a13      	ldr	r2, [pc, #76]	@ (800b01c <TIM_OC5_SetConfig+0xc4>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d109      	bne.n	800afe6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	021b      	lsls	r3, r3, #8
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	621a      	str	r2, [r3, #32]
}
 800b000:	bf00      	nop
 800b002:	371c      	adds	r7, #28
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	40012c00 	.word	0x40012c00
 800b010:	40013400 	.word	0x40013400
 800b014:	40014000 	.word	0x40014000
 800b018:	40014400 	.word	0x40014400
 800b01c:	40014800 	.word	0x40014800

0800b020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b020:	b480      	push	{r7}
 800b022:	b087      	sub	sp, #28
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a1b      	ldr	r3, [r3, #32]
 800b034:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b04e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	021b      	lsls	r3, r3, #8
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	051b      	lsls	r3, r3, #20
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	4313      	orrs	r3, r2
 800b072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a18      	ldr	r2, [pc, #96]	@ (800b0d8 <TIM_OC6_SetConfig+0xb8>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d00f      	beq.n	800b09c <TIM_OC6_SetConfig+0x7c>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a17      	ldr	r2, [pc, #92]	@ (800b0dc <TIM_OC6_SetConfig+0xbc>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d00b      	beq.n	800b09c <TIM_OC6_SetConfig+0x7c>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a16      	ldr	r2, [pc, #88]	@ (800b0e0 <TIM_OC6_SetConfig+0xc0>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d007      	beq.n	800b09c <TIM_OC6_SetConfig+0x7c>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a15      	ldr	r2, [pc, #84]	@ (800b0e4 <TIM_OC6_SetConfig+0xc4>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d003      	beq.n	800b09c <TIM_OC6_SetConfig+0x7c>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a14      	ldr	r2, [pc, #80]	@ (800b0e8 <TIM_OC6_SetConfig+0xc8>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d109      	bne.n	800b0b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b0a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	029b      	lsls	r3, r3, #10
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	621a      	str	r2, [r3, #32]
}
 800b0ca:	bf00      	nop
 800b0cc:	371c      	adds	r7, #28
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	40012c00 	.word	0x40012c00
 800b0dc:	40013400 	.word	0x40013400
 800b0e0:	40014000 	.word	0x40014000
 800b0e4:	40014400 	.word	0x40014400
 800b0e8:	40014800 	.word	0x40014800

0800b0ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b087      	sub	sp, #28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6a1b      	ldr	r3, [r3, #32]
 800b0fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	f023 0201 	bic.w	r2, r3, #1
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	011b      	lsls	r3, r3, #4
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	4313      	orrs	r3, r2
 800b120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f023 030a 	bic.w	r3, r3, #10
 800b128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	4313      	orrs	r3, r2
 800b130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	621a      	str	r2, [r3, #32]
}
 800b13e:	bf00      	nop
 800b140:	371c      	adds	r7, #28
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b087      	sub	sp, #28
 800b14e:	af00      	add	r7, sp, #0
 800b150:	60f8      	str	r0, [r7, #12]
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6a1b      	ldr	r3, [r3, #32]
 800b160:	f023 0210 	bic.w	r2, r3, #16
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	031b      	lsls	r3, r3, #12
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	011b      	lsls	r3, r3, #4
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	4313      	orrs	r3, r2
 800b190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	621a      	str	r2, [r3, #32]
}
 800b19e:	bf00      	nop
 800b1a0:	371c      	adds	r7, #28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b085      	sub	sp, #20
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b1c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	f043 0307 	orr.w	r3, r3, #7
 800b1d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	609a      	str	r2, [r3, #8]
}
 800b1d8:	bf00      	nop
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	021a      	lsls	r2, r3, #8
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	431a      	orrs	r2, r3
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	609a      	str	r2, [r3, #8]
}
 800b218:	bf00      	nop
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	f003 031f 	and.w	r3, r3, #31
 800b236:	2201      	movs	r2, #1
 800b238:	fa02 f303 	lsl.w	r3, r2, r3
 800b23c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6a1a      	ldr	r2, [r3, #32]
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	43db      	mvns	r3, r3
 800b246:	401a      	ands	r2, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6a1a      	ldr	r2, [r3, #32]
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f003 031f 	and.w	r3, r3, #31
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	fa01 f303 	lsl.w	r3, r1, r3
 800b25c:	431a      	orrs	r2, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	621a      	str	r2, [r3, #32]
}
 800b262:	bf00      	nop
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
	...

0800b270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b280:	2b01      	cmp	r3, #1
 800b282:	d101      	bne.n	800b288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b284:	2302      	movs	r3, #2
 800b286:	e065      	b.n	800b354 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2202      	movs	r2, #2
 800b294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a2c      	ldr	r2, [pc, #176]	@ (800b360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d004      	beq.n	800b2bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a2b      	ldr	r2, [pc, #172]	@ (800b364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d108      	bne.n	800b2ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b2c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b2d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d018      	beq.n	800b328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2fe:	d013      	beq.n	800b328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a18      	ldr	r2, [pc, #96]	@ (800b368 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00e      	beq.n	800b328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a17      	ldr	r2, [pc, #92]	@ (800b36c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d009      	beq.n	800b328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a12      	ldr	r2, [pc, #72]	@ (800b364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d004      	beq.n	800b328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a13      	ldr	r2, [pc, #76]	@ (800b370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d10c      	bne.n	800b342 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b32e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	4313      	orrs	r3, r2
 800b338:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2201      	movs	r2, #1
 800b346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	40012c00 	.word	0x40012c00
 800b364:	40013400 	.word	0x40013400
 800b368:	40000400 	.word	0x40000400
 800b36c:	40000800 	.word	0x40000800
 800b370:	40014000 	.word	0x40014000

0800b374 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	e042      	b.n	800b498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d106      	bne.n	800b42a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7f9 f943 	bl	80046b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2224      	movs	r2, #36	@ 0x24
 800b42e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f022 0201 	bic.w	r2, r2, #1
 800b440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 f848 	bl	800c4e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fd79 	bl	800bf48 <UART_SetConfig>
 800b456:	4603      	mov	r3, r0
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d101      	bne.n	800b460 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e01b      	b.n	800b498 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b46e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689a      	ldr	r2, [r3, #8]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b47e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f042 0201 	orr.w	r2, r2, #1
 800b48e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f001 f8c7 	bl	800c624 <UART_CheckIdleState>
 800b496:	4603      	mov	r3, r0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	@ 0x28
 800b4a4:	af02      	add	r7, sp, #8
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	603b      	str	r3, [r7, #0]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4b6:	2b20      	cmp	r3, #32
 800b4b8:	d17b      	bne.n	800b5b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <HAL_UART_Transmit+0x26>
 800b4c0:	88fb      	ldrh	r3, [r7, #6]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e074      	b.n	800b5b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2221      	movs	r2, #33	@ 0x21
 800b4d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4da:	f7f9 fbcd 	bl	8004c78 <HAL_GetTick>
 800b4de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	88fa      	ldrh	r2, [r7, #6]
 800b4e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	88fa      	ldrh	r2, [r7, #6]
 800b4ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4f8:	d108      	bne.n	800b50c <HAL_UART_Transmit+0x6c>
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d104      	bne.n	800b50c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b502:	2300      	movs	r3, #0
 800b504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	61bb      	str	r3, [r7, #24]
 800b50a:	e003      	b.n	800b514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b510:	2300      	movs	r3, #0
 800b512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b514:	e030      	b.n	800b578 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2200      	movs	r2, #0
 800b51e:	2180      	movs	r1, #128	@ 0x80
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f001 f929 	bl	800c778 <UART_WaitOnFlagUntilTimeout>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d005      	beq.n	800b538 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2220      	movs	r2, #32
 800b530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b534:	2303      	movs	r3, #3
 800b536:	e03d      	b.n	800b5b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10b      	bne.n	800b556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b54c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	3302      	adds	r3, #2
 800b552:	61bb      	str	r3, [r7, #24]
 800b554:	e007      	b.n	800b566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	781a      	ldrb	r2, [r3, #0]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	3301      	adds	r3, #1
 800b564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	3b01      	subs	r3, #1
 800b570:	b29a      	uxth	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b57e:	b29b      	uxth	r3, r3
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1c8      	bne.n	800b516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	2200      	movs	r2, #0
 800b58c:	2140      	movs	r1, #64	@ 0x40
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f001 f8f2 	bl	800c778 <UART_WaitOnFlagUntilTimeout>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d005      	beq.n	800b5a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2220      	movs	r2, #32
 800b59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e006      	b.n	800b5b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2220      	movs	r2, #32
 800b5aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e000      	b.n	800b5b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b5b2:	2302      	movs	r3, #2
  }
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3720      	adds	r7, #32
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08a      	sub	sp, #40	@ 0x28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	d137      	bne.n	800b644 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d002      	beq.n	800b5e0 <HAL_UART_Receive_DMA+0x24>
 800b5da:	88fb      	ldrh	r3, [r7, #6]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e030      	b.n	800b646 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a18      	ldr	r2, [pc, #96]	@ (800b650 <HAL_UART_Receive_DMA+0x94>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d01f      	beq.n	800b634 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d018      	beq.n	800b634 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	e853 3f00 	ldrex	r3, [r3]
 800b60e:	613b      	str	r3, [r7, #16]
   return(result);
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b616:	627b      	str	r3, [r7, #36]	@ 0x24
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	461a      	mov	r2, r3
 800b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b620:	623b      	str	r3, [r7, #32]
 800b622:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b624:	69f9      	ldr	r1, [r7, #28]
 800b626:	6a3a      	ldr	r2, [r7, #32]
 800b628:	e841 2300 	strex	r3, r2, [r1]
 800b62c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1e6      	bne.n	800b602 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b634:	88fb      	ldrh	r3, [r7, #6]
 800b636:	461a      	mov	r2, r3
 800b638:	68b9      	ldr	r1, [r7, #8]
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f001 f90a 	bl	800c854 <UART_Start_Receive_DMA>
 800b640:	4603      	mov	r3, r0
 800b642:	e000      	b.n	800b646 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b644:	2302      	movs	r3, #2
  }
}
 800b646:	4618      	mov	r0, r3
 800b648:	3728      	adds	r7, #40	@ 0x28
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	40008000 	.word	0x40008000

0800b654 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b0a0      	sub	sp, #128	@ 0x80
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b66a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b66c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800b670:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b67a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b67c:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b680:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b682:	e841 2300 	strex	r3, r2, [r1]
 800b686:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1e6      	bne.n	800b65c <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	3308      	adds	r3, #8
 800b694:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b698:	e853 3f00 	ldrex	r3, [r3]
 800b69c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b69e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6a0:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800b6a4:	f023 0301 	bic.w	r3, r3, #1
 800b6a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3308      	adds	r3, #8
 800b6b0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b6b2:	657a      	str	r2, [r7, #84]	@ 0x54
 800b6b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b6b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b6c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e3      	bne.n	800b68e <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d118      	bne.n	800b700 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d6:	e853 3f00 	ldrex	r3, [r3]
 800b6da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6de:	f023 0310 	bic.w	r3, r3, #16
 800b6e2:	677b      	str	r3, [r7, #116]	@ 0x74
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6f4:	e841 2300 	strex	r3, r2, [r1]
 800b6f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1e6      	bne.n	800b6ce <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b70a:	2b80      	cmp	r3, #128	@ 0x80
 800b70c:	d137      	bne.n	800b77e <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b724:	673b      	str	r3, [r7, #112]	@ 0x70
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3308      	adds	r3, #8
 800b72c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b72e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b730:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e5      	bne.n	800b70e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b746:	2b00      	cmp	r3, #0
 800b748:	d019      	beq.n	800b77e <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b74e:	2200      	movs	r2, #0
 800b750:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b756:	4618      	mov	r0, r3
 800b758:	f7fa ff2d 	bl	80065b6 <HAL_DMA_Abort>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00d      	beq.n	800b77e <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b766:	4618      	mov	r0, r3
 800b768:	f7fb f894 	bl	8006894 <HAL_DMA_GetError>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b20      	cmp	r3, #32
 800b770:	d105      	bne.n	800b77e <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2210      	movs	r2, #16
 800b776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e073      	b.n	800b866 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b788:	2b40      	cmp	r3, #64	@ 0x40
 800b78a:	d13b      	bne.n	800b804 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3308      	adds	r3, #8
 800b792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b7ac:	61ba      	str	r2, [r7, #24]
 800b7ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b0:	6979      	ldr	r1, [r7, #20]
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	e841 2300 	strex	r3, r2, [r1]
 800b7b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e5      	bne.n	800b78c <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d01c      	beq.n	800b804 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fa feeb 	bl	80065b6 <HAL_DMA_Abort>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00e      	beq.n	800b804 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fb f851 	bl	8006894 <HAL_DMA_GetError>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b20      	cmp	r3, #32
 800b7f6:	d105      	bne.n	800b804 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2210      	movs	r2, #16
 800b7fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800b800:	2303      	movs	r3, #3
 800b802:	e030      	b.n	800b866 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	220f      	movs	r2, #15
 800b81a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b824:	d107      	bne.n	800b836 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	699a      	ldr	r2, [r3, #24]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f042 0210 	orr.w	r2, r2, #16
 800b834:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	699a      	ldr	r2, [r3, #24]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f042 0208 	orr.w	r2, r2, #8
 800b844:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2220      	movs	r2, #32
 800b84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2220      	movs	r2, #32
 800b852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3780      	adds	r7, #128	@ 0x80
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b0ba      	sub	sp, #232	@ 0xe8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b896:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b89a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b89e:	4013      	ands	r3, r2
 800b8a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b8a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d11b      	bne.n	800b8e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8b0:	f003 0320 	and.w	r3, r3, #32
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d015      	beq.n	800b8e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8bc:	f003 0320 	and.w	r3, r3, #32
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d105      	bne.n	800b8d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d009      	beq.n	800b8e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 8300 	beq.w	800beda <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	4798      	blx	r3
      }
      return;
 800b8e2:	e2fa      	b.n	800beda <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b8e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f000 8123 	beq.w	800bb34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b8ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b8f2:	4b8d      	ldr	r3, [pc, #564]	@ (800bb28 <HAL_UART_IRQHandler+0x2b8>)
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d106      	bne.n	800b908 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b8fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b8fe:	4b8b      	ldr	r3, [pc, #556]	@ (800bb2c <HAL_UART_IRQHandler+0x2bc>)
 800b900:	4013      	ands	r3, r2
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 8116 	beq.w	800bb34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b90c:	f003 0301 	and.w	r3, r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	d011      	beq.n	800b938 <HAL_UART_IRQHandler+0xc8>
 800b914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00b      	beq.n	800b938 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2201      	movs	r2, #1
 800b926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b92e:	f043 0201 	orr.w	r2, r3, #1
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b93c:	f003 0302 	and.w	r3, r3, #2
 800b940:	2b00      	cmp	r3, #0
 800b942:	d011      	beq.n	800b968 <HAL_UART_IRQHandler+0xf8>
 800b944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00b      	beq.n	800b968 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2202      	movs	r2, #2
 800b956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b95e:	f043 0204 	orr.w	r2, r3, #4
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b96c:	f003 0304 	and.w	r3, r3, #4
 800b970:	2b00      	cmp	r3, #0
 800b972:	d011      	beq.n	800b998 <HAL_UART_IRQHandler+0x128>
 800b974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00b      	beq.n	800b998 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2204      	movs	r2, #4
 800b986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b98e:	f043 0202 	orr.w	r2, r3, #2
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b99c:	f003 0308 	and.w	r3, r3, #8
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d017      	beq.n	800b9d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9a8:	f003 0320 	and.w	r3, r3, #32
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d105      	bne.n	800b9bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b9b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b9b4:	4b5c      	ldr	r3, [pc, #368]	@ (800bb28 <HAL_UART_IRQHandler+0x2b8>)
 800b9b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00b      	beq.n	800b9d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2208      	movs	r2, #8
 800b9c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9ca:	f043 0208 	orr.w	r2, r3, #8
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b9d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d012      	beq.n	800ba06 <HAL_UART_IRQHandler+0x196>
 800b9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00c      	beq.n	800ba06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9fc:	f043 0220 	orr.w	r2, r3, #32
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 8266 	beq.w	800bede <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba16:	f003 0320 	and.w	r3, r3, #32
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d013      	beq.n	800ba46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba22:	f003 0320 	and.w	r3, r3, #32
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d105      	bne.n	800ba36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d007      	beq.n	800ba46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d003      	beq.n	800ba46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba5a:	2b40      	cmp	r3, #64	@ 0x40
 800ba5c:	d005      	beq.n	800ba6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ba62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d054      	beq.n	800bb14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 ffd9 	bl	800ca22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba7a:	2b40      	cmp	r3, #64	@ 0x40
 800ba7c:	d146      	bne.n	800bb0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3308      	adds	r3, #8
 800ba84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba8c:	e853 3f00 	ldrex	r3, [r3]
 800ba90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ba94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	3308      	adds	r3, #8
 800baa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800baaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800baae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bab6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800baba:	e841 2300 	strex	r3, r2, [r1]
 800babe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1d9      	bne.n	800ba7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d017      	beq.n	800bb04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bada:	4a15      	ldr	r2, [pc, #84]	@ (800bb30 <HAL_UART_IRQHandler+0x2c0>)
 800badc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fa fdbf 	bl	8006668 <HAL_DMA_Abort_IT>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d019      	beq.n	800bb24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bafe:	4610      	mov	r0, r2
 800bb00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb02:	e00f      	b.n	800bb24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fa09 	bl	800bf1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb0a:	e00b      	b.n	800bb24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fa05 	bl	800bf1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb12:	e007      	b.n	800bb24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 fa01 	bl	800bf1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bb22:	e1dc      	b.n	800bede <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb24:	bf00      	nop
    return;
 800bb26:	e1da      	b.n	800bede <HAL_UART_IRQHandler+0x66e>
 800bb28:	10000001 	.word	0x10000001
 800bb2c:	04000120 	.word	0x04000120
 800bb30:	0800ccd9 	.word	0x0800ccd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	f040 8170 	bne.w	800be1e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb42:	f003 0310 	and.w	r3, r3, #16
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 8169 	beq.w	800be1e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb50:	f003 0310 	and.w	r3, r3, #16
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 8162 	beq.w	800be1e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2210      	movs	r2, #16
 800bb60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb6c:	2b40      	cmp	r3, #64	@ 0x40
 800bb6e:	f040 80d8 	bne.w	800bd22 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 80af 	beq.w	800bce8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb94:	429a      	cmp	r2, r3
 800bb96:	f080 80a7 	bcs.w	800bce8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bba0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f003 0320 	and.w	r3, r3, #32
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f040 8087 	bne.w	800bcc6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bbc4:	e853 3f00 	ldrex	r3, [r3]
 800bbc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bbcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bbd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbe2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bbe6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bbee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bbf2:	e841 2300 	strex	r3, r2, [r1]
 800bbf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bbfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1da      	bne.n	800bbb8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3308      	adds	r3, #8
 800bc08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc0c:	e853 3f00 	ldrex	r3, [r3]
 800bc10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bc12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc14:	f023 0301 	bic.w	r3, r3, #1
 800bc18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	3308      	adds	r3, #8
 800bc22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bc26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bc2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc32:	e841 2300 	strex	r3, r2, [r1]
 800bc36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1e1      	bne.n	800bc02 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3308      	adds	r3, #8
 800bc44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc48:	e853 3f00 	ldrex	r3, [r3]
 800bc4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bc4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3308      	adds	r3, #8
 800bc5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bc64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc6a:	e841 2300 	strex	r3, r2, [r1]
 800bc6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bc70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1e3      	bne.n	800bc3e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2220      	movs	r2, #32
 800bc7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc8c:	e853 3f00 	ldrex	r3, [r3]
 800bc90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc94:	f023 0310 	bic.w	r3, r3, #16
 800bc98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	461a      	mov	r2, r3
 800bca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bca6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bca8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bcac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcae:	e841 2300 	strex	r3, r2, [r1]
 800bcb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bcb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1e4      	bne.n	800bc84 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fa fc78 	bl	80065b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f925 	bl	800bf30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bce6:	e0fc      	b.n	800bee2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bcee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	f040 80f5 	bne.w	800bee2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f003 0320 	and.w	r3, r3, #32
 800bd06:	2b20      	cmp	r3, #32
 800bd08:	f040 80eb 	bne.w	800bee2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f908 	bl	800bf30 <HAL_UARTEx_RxEventCallback>
      return;
 800bd20:	e0df      	b.n	800bee2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 80d1 	beq.w	800bee6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800bd44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 80cc 	beq.w	800bee6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd56:	e853 3f00 	ldrex	r3, [r3]
 800bd5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd70:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd78:	e841 2300 	strex	r3, r2, [r1]
 800bd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1e4      	bne.n	800bd4e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	3308      	adds	r3, #8
 800bd8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8e:	e853 3f00 	ldrex	r3, [r3]
 800bd92:	623b      	str	r3, [r7, #32]
   return(result);
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd9a:	f023 0301 	bic.w	r3, r3, #1
 800bd9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	3308      	adds	r3, #8
 800bda8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bdac:	633a      	str	r2, [r7, #48]	@ 0x30
 800bdae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e1      	bne.n	800bd84 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	e853 3f00 	ldrex	r3, [r3]
 800bde0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f023 0310 	bic.w	r3, r3, #16
 800bde8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bdf6:	61fb      	str	r3, [r7, #28]
 800bdf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	69b9      	ldr	r1, [r7, #24]
 800bdfc:	69fa      	ldr	r2, [r7, #28]
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	617b      	str	r3, [r7, #20]
   return(result);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e4      	bne.n	800bdd4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2202      	movs	r2, #2
 800be0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f88a 	bl	800bf30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be1c:	e063      	b.n	800bee6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00e      	beq.n	800be48 <HAL_UART_IRQHandler+0x5d8>
 800be2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d008      	beq.n	800be48 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800be3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 ff86 	bl	800cd52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be46:	e051      	b.n	800beec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800be48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be50:	2b00      	cmp	r3, #0
 800be52:	d014      	beq.n	800be7e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d105      	bne.n	800be6c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d008      	beq.n	800be7e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be70:	2b00      	cmp	r3, #0
 800be72:	d03a      	beq.n	800beea <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	4798      	blx	r3
    }
    return;
 800be7c:	e035      	b.n	800beea <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be86:	2b00      	cmp	r3, #0
 800be88:	d009      	beq.n	800be9e <HAL_UART_IRQHandler+0x62e>
 800be8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 ff30 	bl	800ccfc <UART_EndTransmit_IT>
    return;
 800be9c:	e026      	b.n	800beec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d009      	beq.n	800bebe <HAL_UART_IRQHandler+0x64e>
 800beaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 ff5f 	bl	800cd7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bebc:	e016      	b.n	800beec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bec2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d010      	beq.n	800beec <HAL_UART_IRQHandler+0x67c>
 800beca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	da0c      	bge.n	800beec <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 ff47 	bl	800cd66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bed8:	e008      	b.n	800beec <HAL_UART_IRQHandler+0x67c>
      return;
 800beda:	bf00      	nop
 800bedc:	e006      	b.n	800beec <HAL_UART_IRQHandler+0x67c>
    return;
 800bede:	bf00      	nop
 800bee0:	e004      	b.n	800beec <HAL_UART_IRQHandler+0x67c>
      return;
 800bee2:	bf00      	nop
 800bee4:	e002      	b.n	800beec <HAL_UART_IRQHandler+0x67c>
      return;
 800bee6:	bf00      	nop
 800bee8:	e000      	b.n	800beec <HAL_UART_IRQHandler+0x67c>
    return;
 800beea:	bf00      	nop
  }
}
 800beec:	37e8      	adds	r7, #232	@ 0xe8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop

0800bef4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf4c:	b08c      	sub	sp, #48	@ 0x30
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	689a      	ldr	r2, [r3, #8]
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	431a      	orrs	r2, r3
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	431a      	orrs	r2, r3
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	4bab      	ldr	r3, [pc, #684]	@ (800c224 <UART_SetConfig+0x2dc>)
 800bf78:	4013      	ands	r3, r2
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	6812      	ldr	r2, [r2, #0]
 800bf7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf80:	430b      	orrs	r3, r1
 800bf82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	430a      	orrs	r2, r1
 800bf98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	699b      	ldr	r3, [r3, #24]
 800bf9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4aa0      	ldr	r2, [pc, #640]	@ (800c228 <UART_SetConfig+0x2e0>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d004      	beq.n	800bfb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800bfbe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	6812      	ldr	r2, [r2, #0]
 800bfc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfc8:	430b      	orrs	r3, r1
 800bfca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd2:	f023 010f 	bic.w	r1, r3, #15
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a91      	ldr	r2, [pc, #580]	@ (800c22c <UART_SetConfig+0x2e4>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d125      	bne.n	800c038 <UART_SetConfig+0xf0>
 800bfec:	4b90      	ldr	r3, [pc, #576]	@ (800c230 <UART_SetConfig+0x2e8>)
 800bfee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bff2:	f003 0303 	and.w	r3, r3, #3
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d81a      	bhi.n	800c030 <UART_SetConfig+0xe8>
 800bffa:	a201      	add	r2, pc, #4	@ (adr r2, 800c000 <UART_SetConfig+0xb8>)
 800bffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c000:	0800c011 	.word	0x0800c011
 800c004:	0800c021 	.word	0x0800c021
 800c008:	0800c019 	.word	0x0800c019
 800c00c:	0800c029 	.word	0x0800c029
 800c010:	2301      	movs	r3, #1
 800c012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c016:	e0d6      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c018:	2302      	movs	r3, #2
 800c01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c01e:	e0d2      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c020:	2304      	movs	r3, #4
 800c022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c026:	e0ce      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c028:	2308      	movs	r3, #8
 800c02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c02e:	e0ca      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c030:	2310      	movs	r3, #16
 800c032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c036:	e0c6      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a7d      	ldr	r2, [pc, #500]	@ (800c234 <UART_SetConfig+0x2ec>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d138      	bne.n	800c0b4 <UART_SetConfig+0x16c>
 800c042:	4b7b      	ldr	r3, [pc, #492]	@ (800c230 <UART_SetConfig+0x2e8>)
 800c044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c048:	f003 030c 	and.w	r3, r3, #12
 800c04c:	2b0c      	cmp	r3, #12
 800c04e:	d82d      	bhi.n	800c0ac <UART_SetConfig+0x164>
 800c050:	a201      	add	r2, pc, #4	@ (adr r2, 800c058 <UART_SetConfig+0x110>)
 800c052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c056:	bf00      	nop
 800c058:	0800c08d 	.word	0x0800c08d
 800c05c:	0800c0ad 	.word	0x0800c0ad
 800c060:	0800c0ad 	.word	0x0800c0ad
 800c064:	0800c0ad 	.word	0x0800c0ad
 800c068:	0800c09d 	.word	0x0800c09d
 800c06c:	0800c0ad 	.word	0x0800c0ad
 800c070:	0800c0ad 	.word	0x0800c0ad
 800c074:	0800c0ad 	.word	0x0800c0ad
 800c078:	0800c095 	.word	0x0800c095
 800c07c:	0800c0ad 	.word	0x0800c0ad
 800c080:	0800c0ad 	.word	0x0800c0ad
 800c084:	0800c0ad 	.word	0x0800c0ad
 800c088:	0800c0a5 	.word	0x0800c0a5
 800c08c:	2300      	movs	r3, #0
 800c08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c092:	e098      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c094:	2302      	movs	r3, #2
 800c096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c09a:	e094      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c09c:	2304      	movs	r3, #4
 800c09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0a2:	e090      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c0a4:	2308      	movs	r3, #8
 800c0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0aa:	e08c      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c0ac:	2310      	movs	r3, #16
 800c0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0b2:	e088      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a5f      	ldr	r2, [pc, #380]	@ (800c238 <UART_SetConfig+0x2f0>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d125      	bne.n	800c10a <UART_SetConfig+0x1c2>
 800c0be:	4b5c      	ldr	r3, [pc, #368]	@ (800c230 <UART_SetConfig+0x2e8>)
 800c0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c0c8:	2b30      	cmp	r3, #48	@ 0x30
 800c0ca:	d016      	beq.n	800c0fa <UART_SetConfig+0x1b2>
 800c0cc:	2b30      	cmp	r3, #48	@ 0x30
 800c0ce:	d818      	bhi.n	800c102 <UART_SetConfig+0x1ba>
 800c0d0:	2b20      	cmp	r3, #32
 800c0d2:	d00a      	beq.n	800c0ea <UART_SetConfig+0x1a2>
 800c0d4:	2b20      	cmp	r3, #32
 800c0d6:	d814      	bhi.n	800c102 <UART_SetConfig+0x1ba>
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d002      	beq.n	800c0e2 <UART_SetConfig+0x19a>
 800c0dc:	2b10      	cmp	r3, #16
 800c0de:	d008      	beq.n	800c0f2 <UART_SetConfig+0x1aa>
 800c0e0:	e00f      	b.n	800c102 <UART_SetConfig+0x1ba>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0e8:	e06d      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0f0:	e069      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c0f2:	2304      	movs	r3, #4
 800c0f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0f8:	e065      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c0fa:	2308      	movs	r3, #8
 800c0fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c100:	e061      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c102:	2310      	movs	r3, #16
 800c104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c108:	e05d      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a4b      	ldr	r2, [pc, #300]	@ (800c23c <UART_SetConfig+0x2f4>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d125      	bne.n	800c160 <UART_SetConfig+0x218>
 800c114:	4b46      	ldr	r3, [pc, #280]	@ (800c230 <UART_SetConfig+0x2e8>)
 800c116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c11a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c11e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c120:	d016      	beq.n	800c150 <UART_SetConfig+0x208>
 800c122:	2bc0      	cmp	r3, #192	@ 0xc0
 800c124:	d818      	bhi.n	800c158 <UART_SetConfig+0x210>
 800c126:	2b80      	cmp	r3, #128	@ 0x80
 800c128:	d00a      	beq.n	800c140 <UART_SetConfig+0x1f8>
 800c12a:	2b80      	cmp	r3, #128	@ 0x80
 800c12c:	d814      	bhi.n	800c158 <UART_SetConfig+0x210>
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d002      	beq.n	800c138 <UART_SetConfig+0x1f0>
 800c132:	2b40      	cmp	r3, #64	@ 0x40
 800c134:	d008      	beq.n	800c148 <UART_SetConfig+0x200>
 800c136:	e00f      	b.n	800c158 <UART_SetConfig+0x210>
 800c138:	2300      	movs	r3, #0
 800c13a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c13e:	e042      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c140:	2302      	movs	r3, #2
 800c142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c146:	e03e      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c148:	2304      	movs	r3, #4
 800c14a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c14e:	e03a      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c150:	2308      	movs	r3, #8
 800c152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c156:	e036      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c158:	2310      	movs	r3, #16
 800c15a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c15e:	e032      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a30      	ldr	r2, [pc, #192]	@ (800c228 <UART_SetConfig+0x2e0>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d12a      	bne.n	800c1c0 <UART_SetConfig+0x278>
 800c16a:	4b31      	ldr	r3, [pc, #196]	@ (800c230 <UART_SetConfig+0x2e8>)
 800c16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c170:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c174:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c178:	d01a      	beq.n	800c1b0 <UART_SetConfig+0x268>
 800c17a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c17e:	d81b      	bhi.n	800c1b8 <UART_SetConfig+0x270>
 800c180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c184:	d00c      	beq.n	800c1a0 <UART_SetConfig+0x258>
 800c186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c18a:	d815      	bhi.n	800c1b8 <UART_SetConfig+0x270>
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <UART_SetConfig+0x250>
 800c190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c194:	d008      	beq.n	800c1a8 <UART_SetConfig+0x260>
 800c196:	e00f      	b.n	800c1b8 <UART_SetConfig+0x270>
 800c198:	2300      	movs	r3, #0
 800c19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c19e:	e012      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1a6:	e00e      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c1a8:	2304      	movs	r3, #4
 800c1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1ae:	e00a      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c1b0:	2308      	movs	r3, #8
 800c1b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1b6:	e006      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c1b8:	2310      	movs	r3, #16
 800c1ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1be:	e002      	b.n	800c1c6 <UART_SetConfig+0x27e>
 800c1c0:	2310      	movs	r3, #16
 800c1c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a17      	ldr	r2, [pc, #92]	@ (800c228 <UART_SetConfig+0x2e0>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	f040 80a8 	bne.w	800c322 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c1d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c1d6:	2b08      	cmp	r3, #8
 800c1d8:	d834      	bhi.n	800c244 <UART_SetConfig+0x2fc>
 800c1da:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e0 <UART_SetConfig+0x298>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c205 	.word	0x0800c205
 800c1e4:	0800c245 	.word	0x0800c245
 800c1e8:	0800c20d 	.word	0x0800c20d
 800c1ec:	0800c245 	.word	0x0800c245
 800c1f0:	0800c213 	.word	0x0800c213
 800c1f4:	0800c245 	.word	0x0800c245
 800c1f8:	0800c245 	.word	0x0800c245
 800c1fc:	0800c245 	.word	0x0800c245
 800c200:	0800c21b 	.word	0x0800c21b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c204:	f7fc fa38 	bl	8008678 <HAL_RCC_GetPCLK1Freq>
 800c208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c20a:	e021      	b.n	800c250 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c20c:	4b0c      	ldr	r3, [pc, #48]	@ (800c240 <UART_SetConfig+0x2f8>)
 800c20e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c210:	e01e      	b.n	800c250 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c212:	f7fc f9c5 	bl	80085a0 <HAL_RCC_GetSysClockFreq>
 800c216:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c218:	e01a      	b.n	800c250 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c21a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c21e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c220:	e016      	b.n	800c250 <UART_SetConfig+0x308>
 800c222:	bf00      	nop
 800c224:	cfff69f3 	.word	0xcfff69f3
 800c228:	40008000 	.word	0x40008000
 800c22c:	40013800 	.word	0x40013800
 800c230:	40021000 	.word	0x40021000
 800c234:	40004400 	.word	0x40004400
 800c238:	40004800 	.word	0x40004800
 800c23c:	40004c00 	.word	0x40004c00
 800c240:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c24e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c252:	2b00      	cmp	r3, #0
 800c254:	f000 812a 	beq.w	800c4ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25c:	4a9e      	ldr	r2, [pc, #632]	@ (800c4d8 <UART_SetConfig+0x590>)
 800c25e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c262:	461a      	mov	r2, r3
 800c264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c266:	fbb3 f3f2 	udiv	r3, r3, r2
 800c26a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	4613      	mov	r3, r2
 800c272:	005b      	lsls	r3, r3, #1
 800c274:	4413      	add	r3, r2
 800c276:	69ba      	ldr	r2, [r7, #24]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d305      	bcc.n	800c288 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	429a      	cmp	r2, r3
 800c286:	d903      	bls.n	800c290 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c28e:	e10d      	b.n	800c4ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	2200      	movs	r2, #0
 800c294:	60bb      	str	r3, [r7, #8]
 800c296:	60fa      	str	r2, [r7, #12]
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c29c:	4a8e      	ldr	r2, [pc, #568]	@ (800c4d8 <UART_SetConfig+0x590>)
 800c29e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	603b      	str	r3, [r7, #0]
 800c2a8:	607a      	str	r2, [r7, #4]
 800c2aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2b2:	f7f4 fd11 	bl	8000cd8 <__aeabi_uldivmod>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	4619      	mov	r1, r3
 800c2be:	f04f 0200 	mov.w	r2, #0
 800c2c2:	f04f 0300 	mov.w	r3, #0
 800c2c6:	020b      	lsls	r3, r1, #8
 800c2c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2cc:	0202      	lsls	r2, r0, #8
 800c2ce:	6979      	ldr	r1, [r7, #20]
 800c2d0:	6849      	ldr	r1, [r1, #4]
 800c2d2:	0849      	lsrs	r1, r1, #1
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	4605      	mov	r5, r0
 800c2da:	eb12 0804 	adds.w	r8, r2, r4
 800c2de:	eb43 0905 	adc.w	r9, r3, r5
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	469a      	mov	sl, r3
 800c2ea:	4693      	mov	fp, r2
 800c2ec:	4652      	mov	r2, sl
 800c2ee:	465b      	mov	r3, fp
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	f7f4 fcf0 	bl	8000cd8 <__aeabi_uldivmod>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c306:	d308      	bcc.n	800c31a <UART_SetConfig+0x3d2>
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c30e:	d204      	bcs.n	800c31a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6a3a      	ldr	r2, [r7, #32]
 800c316:	60da      	str	r2, [r3, #12]
 800c318:	e0c8      	b.n	800c4ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c320:	e0c4      	b.n	800c4ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	69db      	ldr	r3, [r3, #28]
 800c326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c32a:	d167      	bne.n	800c3fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800c32c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c330:	2b08      	cmp	r3, #8
 800c332:	d828      	bhi.n	800c386 <UART_SetConfig+0x43e>
 800c334:	a201      	add	r2, pc, #4	@ (adr r2, 800c33c <UART_SetConfig+0x3f4>)
 800c336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33a:	bf00      	nop
 800c33c:	0800c361 	.word	0x0800c361
 800c340:	0800c369 	.word	0x0800c369
 800c344:	0800c371 	.word	0x0800c371
 800c348:	0800c387 	.word	0x0800c387
 800c34c:	0800c377 	.word	0x0800c377
 800c350:	0800c387 	.word	0x0800c387
 800c354:	0800c387 	.word	0x0800c387
 800c358:	0800c387 	.word	0x0800c387
 800c35c:	0800c37f 	.word	0x0800c37f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c360:	f7fc f98a 	bl	8008678 <HAL_RCC_GetPCLK1Freq>
 800c364:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c366:	e014      	b.n	800c392 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c368:	f7fc f99c 	bl	80086a4 <HAL_RCC_GetPCLK2Freq>
 800c36c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c36e:	e010      	b.n	800c392 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c370:	4b5a      	ldr	r3, [pc, #360]	@ (800c4dc <UART_SetConfig+0x594>)
 800c372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c374:	e00d      	b.n	800c392 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c376:	f7fc f913 	bl	80085a0 <HAL_RCC_GetSysClockFreq>
 800c37a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c37c:	e009      	b.n	800c392 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c37e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c384:	e005      	b.n	800c392 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800c386:	2300      	movs	r3, #0
 800c388:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 8089 	beq.w	800c4ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c39e:	4a4e      	ldr	r2, [pc, #312]	@ (800c4d8 <UART_SetConfig+0x590>)
 800c3a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3ac:	005a      	lsls	r2, r3, #1
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	085b      	lsrs	r3, r3, #1
 800c3b4:	441a      	add	r2, r3
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3c0:	6a3b      	ldr	r3, [r7, #32]
 800c3c2:	2b0f      	cmp	r3, #15
 800c3c4:	d916      	bls.n	800c3f4 <UART_SetConfig+0x4ac>
 800c3c6:	6a3b      	ldr	r3, [r7, #32]
 800c3c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3cc:	d212      	bcs.n	800c3f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c3ce:	6a3b      	ldr	r3, [r7, #32]
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	f023 030f 	bic.w	r3, r3, #15
 800c3d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	085b      	lsrs	r3, r3, #1
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	f003 0307 	and.w	r3, r3, #7
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	8bfb      	ldrh	r3, [r7, #30]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	8bfa      	ldrh	r2, [r7, #30]
 800c3f0:	60da      	str	r2, [r3, #12]
 800c3f2:	e05b      	b.n	800c4ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c3fa:	e057      	b.n	800c4ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c3fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c400:	2b08      	cmp	r3, #8
 800c402:	d828      	bhi.n	800c456 <UART_SetConfig+0x50e>
 800c404:	a201      	add	r2, pc, #4	@ (adr r2, 800c40c <UART_SetConfig+0x4c4>)
 800c406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c40a:	bf00      	nop
 800c40c:	0800c431 	.word	0x0800c431
 800c410:	0800c439 	.word	0x0800c439
 800c414:	0800c441 	.word	0x0800c441
 800c418:	0800c457 	.word	0x0800c457
 800c41c:	0800c447 	.word	0x0800c447
 800c420:	0800c457 	.word	0x0800c457
 800c424:	0800c457 	.word	0x0800c457
 800c428:	0800c457 	.word	0x0800c457
 800c42c:	0800c44f 	.word	0x0800c44f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c430:	f7fc f922 	bl	8008678 <HAL_RCC_GetPCLK1Freq>
 800c434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c436:	e014      	b.n	800c462 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c438:	f7fc f934 	bl	80086a4 <HAL_RCC_GetPCLK2Freq>
 800c43c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c43e:	e010      	b.n	800c462 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c440:	4b26      	ldr	r3, [pc, #152]	@ (800c4dc <UART_SetConfig+0x594>)
 800c442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c444:	e00d      	b.n	800c462 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c446:	f7fc f8ab 	bl	80085a0 <HAL_RCC_GetSysClockFreq>
 800c44a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c44c:	e009      	b.n	800c462 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c44e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c454:	e005      	b.n	800c462 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800c456:	2300      	movs	r3, #0
 800c458:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c460:	bf00      	nop
    }

    if (pclk != 0U)
 800c462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c464:	2b00      	cmp	r3, #0
 800c466:	d021      	beq.n	800c4ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c46c:	4a1a      	ldr	r2, [pc, #104]	@ (800c4d8 <UART_SetConfig+0x590>)
 800c46e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c472:	461a      	mov	r2, r3
 800c474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c476:	fbb3 f2f2 	udiv	r2, r3, r2
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	085b      	lsrs	r3, r3, #1
 800c480:	441a      	add	r2, r3
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	fbb2 f3f3 	udiv	r3, r2, r3
 800c48a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	2b0f      	cmp	r3, #15
 800c490:	d909      	bls.n	800c4a6 <UART_SetConfig+0x55e>
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c498:	d205      	bcs.n	800c4a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c49a:	6a3b      	ldr	r3, [r7, #32]
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	60da      	str	r2, [r3, #12]
 800c4a4:	e002      	b.n	800c4ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c4c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3730      	adds	r7, #48	@ 0x30
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4d6:	bf00      	nop
 800c4d8:	08013b50 	.word	0x08013b50
 800c4dc:	00f42400 	.word	0x00f42400

0800c4e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ec:	f003 0308 	and.w	r3, r3, #8
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00a      	beq.n	800c50a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	430a      	orrs	r2, r1
 800c508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c50e:	f003 0301 	and.w	r3, r3, #1
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	430a      	orrs	r2, r1
 800c52a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c530:	f003 0302 	and.w	r3, r3, #2
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00a      	beq.n	800c54e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	430a      	orrs	r2, r1
 800c54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c552:	f003 0304 	and.w	r3, r3, #4
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00a      	beq.n	800c570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	430a      	orrs	r2, r1
 800c56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c574:	f003 0310 	and.w	r3, r3, #16
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00a      	beq.n	800c592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	430a      	orrs	r2, r1
 800c590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c596:	f003 0320 	and.w	r3, r3, #32
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00a      	beq.n	800c5b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	430a      	orrs	r2, r1
 800c5b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01a      	beq.n	800c5f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5de:	d10a      	bne.n	800c5f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00a      	beq.n	800c618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	430a      	orrs	r2, r1
 800c616:	605a      	str	r2, [r3, #4]
  }
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b098      	sub	sp, #96	@ 0x60
 800c628:	af02      	add	r7, sp, #8
 800c62a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c634:	f7f8 fb20 	bl	8004c78 <HAL_GetTick>
 800c638:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 0308 	and.w	r3, r3, #8
 800c644:	2b08      	cmp	r3, #8
 800c646:	d12f      	bne.n	800c6a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c648:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c650:	2200      	movs	r2, #0
 800c652:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f88e 	bl	800c778 <UART_WaitOnFlagUntilTimeout>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d022      	beq.n	800c6a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66a:	e853 3f00 	ldrex	r3, [r3]
 800c66e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c676:	653b      	str	r3, [r7, #80]	@ 0x50
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	461a      	mov	r2, r3
 800c67e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c680:	647b      	str	r3, [r7, #68]	@ 0x44
 800c682:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c684:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c686:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c688:	e841 2300 	strex	r3, r2, [r1]
 800c68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1e6      	bne.n	800c662 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2220      	movs	r2, #32
 800c698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e063      	b.n	800c770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 0304 	and.w	r3, r3, #4
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d149      	bne.n	800c74a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f857 	bl	800c778 <UART_WaitOnFlagUntilTimeout>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d03c      	beq.n	800c74a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	e853 3f00 	ldrex	r3, [r3]
 800c6dc:	623b      	str	r3, [r7, #32]
   return(result);
 800c6de:	6a3b      	ldr	r3, [r7, #32]
 800c6e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6f6:	e841 2300 	strex	r3, r2, [r1]
 800c6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1e6      	bne.n	800c6d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3308      	adds	r3, #8
 800c708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	e853 3f00 	ldrex	r3, [r3]
 800c710:	60fb      	str	r3, [r7, #12]
   return(result);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f023 0301 	bic.w	r3, r3, #1
 800c718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3308      	adds	r3, #8
 800c720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c722:	61fa      	str	r2, [r7, #28]
 800c724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c726:	69b9      	ldr	r1, [r7, #24]
 800c728:	69fa      	ldr	r2, [r7, #28]
 800c72a:	e841 2300 	strex	r3, r2, [r1]
 800c72e:	617b      	str	r3, [r7, #20]
   return(result);
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1e5      	bne.n	800c702 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2220      	movs	r2, #32
 800c73a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e012      	b.n	800c770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2220      	movs	r2, #32
 800c74e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2220      	movs	r2, #32
 800c756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3758      	adds	r7, #88	@ 0x58
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	603b      	str	r3, [r7, #0]
 800c784:	4613      	mov	r3, r2
 800c786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c788:	e04f      	b.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c790:	d04b      	beq.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c792:	f7f8 fa71 	bl	8004c78 <HAL_GetTick>
 800c796:	4602      	mov	r2, r0
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	69ba      	ldr	r2, [r7, #24]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d302      	bcc.n	800c7a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e04e      	b.n	800c84a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 0304 	and.w	r3, r3, #4
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d037      	beq.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2b80      	cmp	r3, #128	@ 0x80
 800c7be:	d034      	beq.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2b40      	cmp	r3, #64	@ 0x40
 800c7c4:	d031      	beq.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	f003 0308 	and.w	r3, r3, #8
 800c7d0:	2b08      	cmp	r3, #8
 800c7d2:	d110      	bne.n	800c7f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2208      	movs	r2, #8
 800c7da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 f920 	bl	800ca22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2208      	movs	r2, #8
 800c7e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e029      	b.n	800c84a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	69db      	ldr	r3, [r3, #28]
 800c7fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c804:	d111      	bne.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c80e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f000 f906 	bl	800ca22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2220      	movs	r2, #32
 800c81a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c826:	2303      	movs	r3, #3
 800c828:	e00f      	b.n	800c84a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	69da      	ldr	r2, [r3, #28]
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	4013      	ands	r3, r2
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	429a      	cmp	r2, r3
 800c838:	bf0c      	ite	eq
 800c83a:	2301      	moveq	r3, #1
 800c83c:	2300      	movne	r3, #0
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	461a      	mov	r2, r3
 800c842:	79fb      	ldrb	r3, [r7, #7]
 800c844:	429a      	cmp	r2, r3
 800c846:	d0a0      	beq.n	800c78a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
	...

0800c854 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b096      	sub	sp, #88	@ 0x58
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	4613      	mov	r3, r2
 800c860:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	88fa      	ldrh	r2, [r7, #6]
 800c86c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2200      	movs	r2, #0
 800c874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2222      	movs	r2, #34	@ 0x22
 800c87c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c886:	2b00      	cmp	r3, #0
 800c888:	d02d      	beq.n	800c8e6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c890:	4a40      	ldr	r2, [pc, #256]	@ (800c994 <UART_Start_Receive_DMA+0x140>)
 800c892:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c89a:	4a3f      	ldr	r2, [pc, #252]	@ (800c998 <UART_Start_Receive_DMA+0x144>)
 800c89c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8a4:	4a3d      	ldr	r2, [pc, #244]	@ (800c99c <UART_Start_Receive_DMA+0x148>)
 800c8a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3324      	adds	r3, #36	@ 0x24
 800c8be:	4619      	mov	r1, r3
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	88fb      	ldrh	r3, [r7, #6]
 800c8c8:	f7f9 fdfa 	bl	80064c0 <HAL_DMA_Start_IT>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d009      	beq.n	800c8e6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2210      	movs	r2, #16
 800c8d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e051      	b.n	800c98a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d018      	beq.n	800c920 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f6:	e853 3f00 	ldrex	r3, [r3]
 800c8fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c902:	657b      	str	r3, [r7, #84]	@ 0x54
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	461a      	mov	r2, r3
 800c90a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c90c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c90e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c910:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c914:	e841 2300 	strex	r3, r2, [r1]
 800c918:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c91a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1e6      	bne.n	800c8ee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3308      	adds	r3, #8
 800c926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92a:	e853 3f00 	ldrex	r3, [r3]
 800c92e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c932:	f043 0301 	orr.w	r3, r3, #1
 800c936:	653b      	str	r3, [r7, #80]	@ 0x50
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3308      	adds	r3, #8
 800c93e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c940:	637a      	str	r2, [r7, #52]	@ 0x34
 800c942:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c944:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c946:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c948:	e841 2300 	strex	r3, r2, [r1]
 800c94c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1e5      	bne.n	800c920 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3308      	adds	r3, #8
 800c95a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	e853 3f00 	ldrex	r3, [r3]
 800c962:	613b      	str	r3, [r7, #16]
   return(result);
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3308      	adds	r3, #8
 800c972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c974:	623a      	str	r2, [r7, #32]
 800c976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c978:	69f9      	ldr	r1, [r7, #28]
 800c97a:	6a3a      	ldr	r2, [r7, #32]
 800c97c:	e841 2300 	strex	r3, r2, [r1]
 800c980:	61bb      	str	r3, [r7, #24]
   return(result);
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1e5      	bne.n	800c954 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3758      	adds	r7, #88	@ 0x58
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	0800caef 	.word	0x0800caef
 800c998:	0800cc1b 	.word	0x0800cc1b
 800c99c:	0800cc59 	.word	0x0800cc59

0800c9a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b08f      	sub	sp, #60	@ 0x3c
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	e853 3f00 	ldrex	r3, [r3]
 800c9b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c9bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9ce:	e841 2300 	strex	r3, r2, [r1]
 800c9d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1e6      	bne.n	800c9a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3308      	adds	r3, #8
 800c9e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	e853 3f00 	ldrex	r3, [r3]
 800c9e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c9f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9fa:	61ba      	str	r2, [r7, #24]
 800c9fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fe:	6979      	ldr	r1, [r7, #20]
 800ca00:	69ba      	ldr	r2, [r7, #24]
 800ca02:	e841 2300 	strex	r3, r2, [r1]
 800ca06:	613b      	str	r3, [r7, #16]
   return(result);
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1e5      	bne.n	800c9da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2220      	movs	r2, #32
 800ca12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ca16:	bf00      	nop
 800ca18:	373c      	adds	r7, #60	@ 0x3c
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b095      	sub	sp, #84	@ 0x54
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca32:	e853 3f00 	ldrex	r3, [r3]
 800ca36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	461a      	mov	r2, r3
 800ca46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca48:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca50:	e841 2300 	strex	r3, r2, [r1]
 800ca54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1e6      	bne.n	800ca2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3308      	adds	r3, #8
 800ca62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca64:	6a3b      	ldr	r3, [r7, #32]
 800ca66:	e853 3f00 	ldrex	r3, [r3]
 800ca6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca72:	f023 0301 	bic.w	r3, r3, #1
 800ca76:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	3308      	adds	r3, #8
 800ca7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca88:	e841 2300 	strex	r3, r2, [r1]
 800ca8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1e3      	bne.n	800ca5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d118      	bne.n	800cace <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	e853 3f00 	ldrex	r3, [r3]
 800caa8:	60bb      	str	r3, [r7, #8]
   return(result);
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	f023 0310 	bic.w	r3, r3, #16
 800cab0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caba:	61bb      	str	r3, [r7, #24]
 800cabc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabe:	6979      	ldr	r1, [r7, #20]
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	e841 2300 	strex	r3, r2, [r1]
 800cac6:	613b      	str	r3, [r7, #16]
   return(result);
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1e6      	bne.n	800ca9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2220      	movs	r2, #32
 800cad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cae2:	bf00      	nop
 800cae4:	3754      	adds	r7, #84	@ 0x54
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b09c      	sub	sp, #112	@ 0x70
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cafa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 0320 	and.w	r3, r3, #32
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d171      	bne.n	800cbee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800cb0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb1a:	e853 3f00 	ldrex	r3, [r3]
 800cb1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cb20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb26:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb30:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb38:	e841 2300 	strex	r3, r2, [r1]
 800cb3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1e6      	bne.n	800cb12 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	3308      	adds	r3, #8
 800cb4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4e:	e853 3f00 	ldrex	r3, [r3]
 800cb52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb56:	f023 0301 	bic.w	r3, r3, #1
 800cb5a:	667b      	str	r3, [r7, #100]	@ 0x64
 800cb5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3308      	adds	r3, #8
 800cb62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cb64:	647a      	str	r2, [r7, #68]	@ 0x44
 800cb66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb6c:	e841 2300 	strex	r3, r2, [r1]
 800cb70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1e5      	bne.n	800cb44 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	3308      	adds	r3, #8
 800cb7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	e853 3f00 	ldrex	r3, [r3]
 800cb86:	623b      	str	r3, [r7, #32]
   return(result);
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb8e:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3308      	adds	r3, #8
 800cb96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cb98:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cba0:	e841 2300 	strex	r3, r2, [r1]
 800cba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1e5      	bne.n	800cb78 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cbac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbae:	2220      	movs	r2, #32
 800cbb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d118      	bne.n	800cbee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	e853 3f00 	ldrex	r3, [r3]
 800cbc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f023 0310 	bic.w	r3, r3, #16
 800cbd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cbd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbda:	61fb      	str	r3, [r7, #28]
 800cbdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbde:	69b9      	ldr	r1, [r7, #24]
 800cbe0:	69fa      	ldr	r2, [r7, #28]
 800cbe2:	e841 2300 	strex	r3, r2, [r1]
 800cbe6:	617b      	str	r3, [r7, #20]
   return(result);
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1e6      	bne.n	800cbbc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d107      	bne.n	800cc0c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc02:	4619      	mov	r1, r3
 800cc04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc06:	f7ff f993 	bl	800bf30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc0a:	e002      	b.n	800cc12 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cc0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc0e:	f7f7 fe81 	bl	8004914 <HAL_UART_RxCpltCallback>
}
 800cc12:	bf00      	nop
 800cc14:	3770      	adds	r7, #112	@ 0x70
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d109      	bne.n	800cc4a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc3c:	085b      	lsrs	r3, r3, #1
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	4619      	mov	r1, r3
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f7ff f974 	bl	800bf30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc48:	e002      	b.n	800cc50 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7ff f95c 	bl	800bf08 <HAL_UART_RxHalfCpltCallback>
}
 800cc50:	bf00      	nop
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc6c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc74:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc80:	2b80      	cmp	r3, #128	@ 0x80
 800cc82:	d109      	bne.n	800cc98 <UART_DMAError+0x40>
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	2b21      	cmp	r3, #33	@ 0x21
 800cc88:	d106      	bne.n	800cc98 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cc92:	6978      	ldr	r0, [r7, #20]
 800cc94:	f7ff fe84 	bl	800c9a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cca2:	2b40      	cmp	r3, #64	@ 0x40
 800cca4:	d109      	bne.n	800ccba <UART_DMAError+0x62>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2b22      	cmp	r3, #34	@ 0x22
 800ccaa:	d106      	bne.n	800ccba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ccb4:	6978      	ldr	r0, [r7, #20]
 800ccb6:	f7ff feb4 	bl	800ca22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccc0:	f043 0210 	orr.w	r2, r3, #16
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccca:	6978      	ldr	r0, [r7, #20]
 800cccc:	f7ff f926 	bl	800bf1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccd0:	bf00      	nop
 800ccd2:	3718      	adds	r7, #24
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f7ff f914 	bl	800bf1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccf4:	bf00      	nop
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b088      	sub	sp, #32
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	61bb      	str	r3, [r7, #24]
 800cd24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd26:	6979      	ldr	r1, [r7, #20]
 800cd28:	69ba      	ldr	r2, [r7, #24]
 800cd2a:	e841 2300 	strex	r3, r2, [r1]
 800cd2e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e6      	bne.n	800cd04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2220      	movs	r2, #32
 800cd3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff f8d5 	bl	800bef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd4a:	bf00      	nop
 800cd4c:	3720      	adds	r7, #32
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd5a:	bf00      	nop
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b083      	sub	sp, #12
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cd6e:	bf00      	nop
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cd7a:	b480      	push	{r7}
 800cd7c:	b083      	sub	sp, #12
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cd82:	bf00      	nop
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b085      	sub	sp, #20
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d101      	bne.n	800cda4 <HAL_UARTEx_DisableFifoMode+0x16>
 800cda0:	2302      	movs	r3, #2
 800cda2:	e027      	b.n	800cdf4 <HAL_UARTEx_DisableFifoMode+0x66>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2224      	movs	r2, #36	@ 0x24
 800cdb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f022 0201 	bic.w	r2, r2, #1
 800cdca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cdd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2220      	movs	r2, #32
 800cde6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d101      	bne.n	800ce18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce14:	2302      	movs	r3, #2
 800ce16:	e02d      	b.n	800ce74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2224      	movs	r2, #36	@ 0x24
 800ce24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f022 0201 	bic.w	r2, r2, #1
 800ce3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	430a      	orrs	r2, r1
 800ce52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f84f 	bl	800cef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2220      	movs	r2, #32
 800ce66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d101      	bne.n	800ce94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e02d      	b.n	800cef0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2224      	movs	r2, #36	@ 0x24
 800cea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0201 	bic.w	r2, r2, #1
 800ceba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	430a      	orrs	r2, r1
 800cece:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f811 	bl	800cef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2220      	movs	r2, #32
 800cee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d108      	bne.n	800cf1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf18:	e031      	b.n	800cf7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf1a:	2308      	movs	r3, #8
 800cf1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf1e:	2308      	movs	r3, #8
 800cf20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	0e5b      	lsrs	r3, r3, #25
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	f003 0307 	and.w	r3, r3, #7
 800cf30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	0f5b      	lsrs	r3, r3, #29
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	f003 0307 	and.w	r3, r3, #7
 800cf40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf42:	7bbb      	ldrb	r3, [r7, #14]
 800cf44:	7b3a      	ldrb	r2, [r7, #12]
 800cf46:	4911      	ldr	r1, [pc, #68]	@ (800cf8c <UARTEx_SetNbDataToProcess+0x94>)
 800cf48:	5c8a      	ldrb	r2, [r1, r2]
 800cf4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf4e:	7b3a      	ldrb	r2, [r7, #12]
 800cf50:	490f      	ldr	r1, [pc, #60]	@ (800cf90 <UARTEx_SetNbDataToProcess+0x98>)
 800cf52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf54:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	7b7a      	ldrb	r2, [r7, #13]
 800cf64:	4909      	ldr	r1, [pc, #36]	@ (800cf8c <UARTEx_SetNbDataToProcess+0x94>)
 800cf66:	5c8a      	ldrb	r2, [r1, r2]
 800cf68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf6c:	7b7a      	ldrb	r2, [r7, #13]
 800cf6e:	4908      	ldr	r1, [pc, #32]	@ (800cf90 <UARTEx_SetNbDataToProcess+0x98>)
 800cf70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf72:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cf7e:	bf00      	nop
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	08013b68 	.word	0x08013b68
 800cf90:	08013b70 	.word	0x08013b70

0800cf94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf9c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cfa0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	43db      	mvns	r3, r3
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cfca:	b480      	push	{r7}
 800cfcc:	b085      	sub	sp, #20
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	60f8      	str	r0, [r7, #12]
 800cfd2:	1d3b      	adds	r3, r7, #4
 800cfd4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
	...

0800d008 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800d00c:	4907      	ldr	r1, [pc, #28]	@ (800d02c <MX_FATFS_Init+0x24>)
 800d00e:	4808      	ldr	r0, [pc, #32]	@ (800d030 <MX_FATFS_Init+0x28>)
 800d010:	f001 ff7a 	bl	800ef08 <FATFS_LinkDriver>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d002      	beq.n	800d020 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800d01a:	f04f 33ff 	mov.w	r3, #4294967295
 800d01e:	e003      	b.n	800d028 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800d020:	4b04      	ldr	r3, [pc, #16]	@ (800d034 <MX_FATFS_Init+0x2c>)
 800d022:	2201      	movs	r2, #1
 800d024:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800d026:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800d028:	4618      	mov	r0, r3
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	2000154c 	.word	0x2000154c
 800d030:	20000018 	.word	0x20000018
 800d034:	20001550 	.word	0x20001550

0800d038 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d038:	b480      	push	{r7}
 800d03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d03c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d03e:	4618      	mov	r0, r3
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	4603      	mov	r3, r0
 800d050:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800d052:	79fb      	ldrb	r3, [r7, #7]
 800d054:	4618      	mov	r0, r3
 800d056:	f7f4 ff55 	bl	8001f04 <SD_disk_initialize>
 800d05a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	4603      	mov	r3, r0
 800d06c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800d06e:	79fb      	ldrb	r3, [r7, #7]
 800d070:	4618      	mov	r0, r3
 800d072:	f7f5 f831 	bl	80020d8 <SD_disk_status>
 800d076:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	60b9      	str	r1, [r7, #8]
 800d088:	607a      	str	r2, [r7, #4]
 800d08a:	603b      	str	r3, [r7, #0]
 800d08c:	4603      	mov	r3, r0
 800d08e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800d090:	7bf8      	ldrb	r0, [r7, #15]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	68b9      	ldr	r1, [r7, #8]
 800d098:	f7f5 f834 	bl	8002104 <SD_disk_read>
 800d09c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b084      	sub	sp, #16
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
 800d0b0:	603b      	str	r3, [r7, #0]
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800d0b6:	7bf8      	ldrb	r0, [r7, #15]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	68b9      	ldr	r1, [r7, #8]
 800d0be:	f7f5 f88b 	bl	80021d8 <SD_disk_write>
 800d0c2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	603a      	str	r2, [r7, #0]
 800d0d6:	71fb      	strb	r3, [r7, #7]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800d0dc:	79b9      	ldrb	r1, [r7, #6]
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7f5 f8fc 	bl	80022e0 <SD_disk_ioctl>
 800d0e8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
	...

0800d0f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d0fe:	79fb      	ldrb	r3, [r7, #7]
 800d100:	4a08      	ldr	r2, [pc, #32]	@ (800d124 <disk_status+0x30>)
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	79fa      	ldrb	r2, [r7, #7]
 800d10c:	4905      	ldr	r1, [pc, #20]	@ (800d124 <disk_status+0x30>)
 800d10e:	440a      	add	r2, r1
 800d110:	7a12      	ldrb	r2, [r2, #8]
 800d112:	4610      	mov	r0, r2
 800d114:	4798      	blx	r3
 800d116:	4603      	mov	r3, r0
 800d118:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	2000157c 	.word	0x2000157c

0800d128 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	4603      	mov	r3, r0
 800d130:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d136:	79fb      	ldrb	r3, [r7, #7]
 800d138:	4a0d      	ldr	r2, [pc, #52]	@ (800d170 <disk_initialize+0x48>)
 800d13a:	5cd3      	ldrb	r3, [r2, r3]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d111      	bne.n	800d164 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d140:	79fb      	ldrb	r3, [r7, #7]
 800d142:	4a0b      	ldr	r2, [pc, #44]	@ (800d170 <disk_initialize+0x48>)
 800d144:	2101      	movs	r1, #1
 800d146:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d148:	79fb      	ldrb	r3, [r7, #7]
 800d14a:	4a09      	ldr	r2, [pc, #36]	@ (800d170 <disk_initialize+0x48>)
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4413      	add	r3, r2
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	79fa      	ldrb	r2, [r7, #7]
 800d156:	4906      	ldr	r1, [pc, #24]	@ (800d170 <disk_initialize+0x48>)
 800d158:	440a      	add	r2, r1
 800d15a:	7a12      	ldrb	r2, [r2, #8]
 800d15c:	4610      	mov	r0, r2
 800d15e:	4798      	blx	r3
 800d160:	4603      	mov	r3, r0
 800d162:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d164:	7bfb      	ldrb	r3, [r7, #15]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	2000157c 	.word	0x2000157c

0800d174 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d174:	b590      	push	{r4, r7, lr}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60b9      	str	r1, [r7, #8]
 800d17c:	607a      	str	r2, [r7, #4]
 800d17e:	603b      	str	r3, [r7, #0]
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	4a0a      	ldr	r2, [pc, #40]	@ (800d1b0 <disk_read+0x3c>)
 800d188:	009b      	lsls	r3, r3, #2
 800d18a:	4413      	add	r3, r2
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	689c      	ldr	r4, [r3, #8]
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	4a07      	ldr	r2, [pc, #28]	@ (800d1b0 <disk_read+0x3c>)
 800d194:	4413      	add	r3, r2
 800d196:	7a18      	ldrb	r0, [r3, #8]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	68b9      	ldr	r1, [r7, #8]
 800d19e:	47a0      	blx	r4
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd90      	pop	{r4, r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2000157c 	.word	0x2000157c

0800d1b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d1b4:	b590      	push	{r4, r7, lr}
 800d1b6:	b087      	sub	sp, #28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60b9      	str	r1, [r7, #8]
 800d1bc:	607a      	str	r2, [r7, #4]
 800d1be:	603b      	str	r3, [r7, #0]
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
 800d1c6:	4a0a      	ldr	r2, [pc, #40]	@ (800d1f0 <disk_write+0x3c>)
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	4413      	add	r3, r2
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	68dc      	ldr	r4, [r3, #12]
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
 800d1d2:	4a07      	ldr	r2, [pc, #28]	@ (800d1f0 <disk_write+0x3c>)
 800d1d4:	4413      	add	r3, r2
 800d1d6:	7a18      	ldrb	r0, [r3, #8]
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	68b9      	ldr	r1, [r7, #8]
 800d1de:	47a0      	blx	r4
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	371c      	adds	r7, #28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd90      	pop	{r4, r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	2000157c 	.word	0x2000157c

0800d1f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3301      	adds	r3, #1
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d204:	89fb      	ldrh	r3, [r7, #14]
 800d206:	021b      	lsls	r3, r3, #8
 800d208:	b21a      	sxth	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	b21b      	sxth	r3, r3
 800d210:	4313      	orrs	r3, r2
 800d212:	b21b      	sxth	r3, r3
 800d214:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d216:	89fb      	ldrh	r3, [r7, #14]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	3303      	adds	r3, #3
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	021b      	lsls	r3, r3, #8
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	3202      	adds	r2, #2
 800d23c:	7812      	ldrb	r2, [r2, #0]
 800d23e:	4313      	orrs	r3, r2
 800d240:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	021b      	lsls	r3, r3, #8
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	3201      	adds	r2, #1
 800d24a:	7812      	ldrb	r2, [r2, #0]
 800d24c:	4313      	orrs	r3, r2
 800d24e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	021b      	lsls	r3, r3, #8
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	7812      	ldrb	r2, [r2, #0]
 800d258:	4313      	orrs	r3, r2
 800d25a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d25c:	68fb      	ldr	r3, [r7, #12]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d26a:	b480      	push	{r7}
 800d26c:	b083      	sub	sp, #12
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
 800d272:	460b      	mov	r3, r1
 800d274:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	1c5a      	adds	r2, r3, #1
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	887a      	ldrh	r2, [r7, #2]
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	887b      	ldrh	r3, [r7, #2]
 800d284:	0a1b      	lsrs	r3, r3, #8
 800d286:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	607a      	str	r2, [r7, #4]
 800d28e:	887a      	ldrh	r2, [r7, #2]
 800d290:	b2d2      	uxtb	r2, r2
 800d292:	701a      	strb	r2, [r3, #0]
}
 800d294:	bf00      	nop
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	607a      	str	r2, [r7, #4]
 800d2b0:	683a      	ldr	r2, [r7, #0]
 800d2b2:	b2d2      	uxtb	r2, r2
 800d2b4:	701a      	strb	r2, [r3, #0]
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	0a1b      	lsrs	r3, r3, #8
 800d2ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	1c5a      	adds	r2, r3, #1
 800d2c0:	607a      	str	r2, [r7, #4]
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	b2d2      	uxtb	r2, r2
 800d2c6:	701a      	strb	r2, [r3, #0]
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	0a1b      	lsrs	r3, r3, #8
 800d2cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	1c5a      	adds	r2, r3, #1
 800d2d2:	607a      	str	r2, [r7, #4]
 800d2d4:	683a      	ldr	r2, [r7, #0]
 800d2d6:	b2d2      	uxtb	r2, r2
 800d2d8:	701a      	strb	r2, [r3, #0]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	0a1b      	lsrs	r3, r3, #8
 800d2de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	607a      	str	r2, [r7, #4]
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	b2d2      	uxtb	r2, r2
 800d2ea:	701a      	strb	r2, [r3, #0]
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d2f8:	b480      	push	{r7}
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00d      	beq.n	800d32e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d312:	693a      	ldr	r2, [r7, #16]
 800d314:	1c53      	adds	r3, r2, #1
 800d316:	613b      	str	r3, [r7, #16]
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	1c59      	adds	r1, r3, #1
 800d31c:	6179      	str	r1, [r7, #20]
 800d31e:	7812      	ldrb	r2, [r2, #0]
 800d320:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	3b01      	subs	r3, #1
 800d326:	607b      	str	r3, [r7, #4]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1f1      	bne.n	800d312 <mem_cpy+0x1a>
	}
}
 800d32e:	bf00      	nop
 800d330:	371c      	adds	r7, #28
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr

0800d33a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d33a:	b480      	push	{r7}
 800d33c:	b087      	sub	sp, #28
 800d33e:	af00      	add	r7, sp, #0
 800d340:	60f8      	str	r0, [r7, #12]
 800d342:	60b9      	str	r1, [r7, #8]
 800d344:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	1c5a      	adds	r2, r3, #1
 800d34e:	617a      	str	r2, [r7, #20]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	b2d2      	uxtb	r2, r2
 800d354:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	3b01      	subs	r3, #1
 800d35a:	607b      	str	r3, [r7, #4]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1f3      	bne.n	800d34a <mem_set+0x10>
}
 800d362:	bf00      	nop
 800d364:	bf00      	nop
 800d366:	371c      	adds	r7, #28
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d370:	b480      	push	{r7}
 800d372:	b089      	sub	sp, #36	@ 0x24
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	61fb      	str	r3, [r7, #28]
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d384:	2300      	movs	r3, #0
 800d386:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	1c5a      	adds	r2, r3, #1
 800d38c:	61fa      	str	r2, [r7, #28]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	4619      	mov	r1, r3
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	1c5a      	adds	r2, r3, #1
 800d396:	61ba      	str	r2, [r7, #24]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	1acb      	subs	r3, r1, r3
 800d39c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	607b      	str	r3, [r7, #4]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d002      	beq.n	800d3b0 <mem_cmp+0x40>
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d0eb      	beq.n	800d388 <mem_cmp+0x18>

	return r;
 800d3b0:	697b      	ldr	r3, [r7, #20]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3724      	adds	r7, #36	@ 0x24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d3be:	b480      	push	{r7}
 800d3c0:	b083      	sub	sp, #12
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d3c8:	e002      	b.n	800d3d0 <chk_chr+0x12>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	607b      	str	r3, [r7, #4]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d005      	beq.n	800d3e4 <chk_chr+0x26>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d1f2      	bne.n	800d3ca <chk_chr+0xc>
	return *str;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d3fe:	2300      	movs	r3, #0
 800d400:	60bb      	str	r3, [r7, #8]
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	60fb      	str	r3, [r7, #12]
 800d406:	e029      	b.n	800d45c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d408:	4a27      	ldr	r2, [pc, #156]	@ (800d4a8 <chk_lock+0xb4>)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	011b      	lsls	r3, r3, #4
 800d40e:	4413      	add	r3, r2
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d01d      	beq.n	800d452 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d416:	4a24      	ldr	r2, [pc, #144]	@ (800d4a8 <chk_lock+0xb4>)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	011b      	lsls	r3, r3, #4
 800d41c:	4413      	add	r3, r2
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	429a      	cmp	r2, r3
 800d426:	d116      	bne.n	800d456 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d428:	4a1f      	ldr	r2, [pc, #124]	@ (800d4a8 <chk_lock+0xb4>)
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	011b      	lsls	r3, r3, #4
 800d42e:	4413      	add	r3, r2
 800d430:	3304      	adds	r3, #4
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d438:	429a      	cmp	r2, r3
 800d43a:	d10c      	bne.n	800d456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d43c:	4a1a      	ldr	r2, [pc, #104]	@ (800d4a8 <chk_lock+0xb4>)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	4413      	add	r3, r2
 800d444:	3308      	adds	r3, #8
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d102      	bne.n	800d456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d450:	e007      	b.n	800d462 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d452:	2301      	movs	r3, #1
 800d454:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	3301      	adds	r3, #1
 800d45a:	60fb      	str	r3, [r7, #12]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d9d2      	bls.n	800d408 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2b02      	cmp	r3, #2
 800d466:	d109      	bne.n	800d47c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d102      	bne.n	800d474 <chk_lock+0x80>
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	2b02      	cmp	r3, #2
 800d472:	d101      	bne.n	800d478 <chk_lock+0x84>
 800d474:	2300      	movs	r3, #0
 800d476:	e010      	b.n	800d49a <chk_lock+0xa6>
 800d478:	2312      	movs	r3, #18
 800d47a:	e00e      	b.n	800d49a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d108      	bne.n	800d494 <chk_lock+0xa0>
 800d482:	4a09      	ldr	r2, [pc, #36]	@ (800d4a8 <chk_lock+0xb4>)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	011b      	lsls	r3, r3, #4
 800d488:	4413      	add	r3, r2
 800d48a:	330c      	adds	r3, #12
 800d48c:	881b      	ldrh	r3, [r3, #0]
 800d48e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d492:	d101      	bne.n	800d498 <chk_lock+0xa4>
 800d494:	2310      	movs	r3, #16
 800d496:	e000      	b.n	800d49a <chk_lock+0xa6>
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	2000155c 	.word	0x2000155c

0800d4ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	607b      	str	r3, [r7, #4]
 800d4b6:	e002      	b.n	800d4be <enq_lock+0x12>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	607b      	str	r3, [r7, #4]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d806      	bhi.n	800d4d2 <enq_lock+0x26>
 800d4c4:	4a09      	ldr	r2, [pc, #36]	@ (800d4ec <enq_lock+0x40>)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	011b      	lsls	r3, r3, #4
 800d4ca:	4413      	add	r3, r2
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1f2      	bne.n	800d4b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	bf14      	ite	ne
 800d4d8:	2301      	movne	r3, #1
 800d4da:	2300      	moveq	r3, #0
 800d4dc:	b2db      	uxtb	r3, r3
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	370c      	adds	r7, #12
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr
 800d4ea:	bf00      	nop
 800d4ec:	2000155c 	.word	0x2000155c

0800d4f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	e01f      	b.n	800d540 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d500:	4a41      	ldr	r2, [pc, #260]	@ (800d608 <inc_lock+0x118>)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	011b      	lsls	r3, r3, #4
 800d506:	4413      	add	r3, r2
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d113      	bne.n	800d53a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d512:	4a3d      	ldr	r2, [pc, #244]	@ (800d608 <inc_lock+0x118>)
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	011b      	lsls	r3, r3, #4
 800d518:	4413      	add	r3, r2
 800d51a:	3304      	adds	r3, #4
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d522:	429a      	cmp	r2, r3
 800d524:	d109      	bne.n	800d53a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d526:	4a38      	ldr	r2, [pc, #224]	@ (800d608 <inc_lock+0x118>)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	011b      	lsls	r3, r3, #4
 800d52c:	4413      	add	r3, r2
 800d52e:	3308      	adds	r3, #8
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d536:	429a      	cmp	r2, r3
 800d538:	d006      	beq.n	800d548 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3301      	adds	r3, #1
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d9dc      	bls.n	800d500 <inc_lock+0x10>
 800d546:	e000      	b.n	800d54a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d548:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d132      	bne.n	800d5b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d550:	2300      	movs	r3, #0
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	e002      	b.n	800d55c <inc_lock+0x6c>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	3301      	adds	r3, #1
 800d55a:	60fb      	str	r3, [r7, #12]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d806      	bhi.n	800d570 <inc_lock+0x80>
 800d562:	4a29      	ldr	r2, [pc, #164]	@ (800d608 <inc_lock+0x118>)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	011b      	lsls	r3, r3, #4
 800d568:	4413      	add	r3, r2
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1f2      	bne.n	800d556 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b02      	cmp	r3, #2
 800d574:	d101      	bne.n	800d57a <inc_lock+0x8a>
 800d576:	2300      	movs	r3, #0
 800d578:	e040      	b.n	800d5fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	4922      	ldr	r1, [pc, #136]	@ (800d608 <inc_lock+0x118>)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	011b      	lsls	r3, r3, #4
 800d584:	440b      	add	r3, r1
 800d586:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689a      	ldr	r2, [r3, #8]
 800d58c:	491e      	ldr	r1, [pc, #120]	@ (800d608 <inc_lock+0x118>)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	011b      	lsls	r3, r3, #4
 800d592:	440b      	add	r3, r1
 800d594:	3304      	adds	r3, #4
 800d596:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	695a      	ldr	r2, [r3, #20]
 800d59c:	491a      	ldr	r1, [pc, #104]	@ (800d608 <inc_lock+0x118>)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	011b      	lsls	r3, r3, #4
 800d5a2:	440b      	add	r3, r1
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d5a8:	4a17      	ldr	r2, [pc, #92]	@ (800d608 <inc_lock+0x118>)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	011b      	lsls	r3, r3, #4
 800d5ae:	4413      	add	r3, r2
 800d5b0:	330c      	adds	r3, #12
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d009      	beq.n	800d5d0 <inc_lock+0xe0>
 800d5bc:	4a12      	ldr	r2, [pc, #72]	@ (800d608 <inc_lock+0x118>)
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	011b      	lsls	r3, r3, #4
 800d5c2:	4413      	add	r3, r2
 800d5c4:	330c      	adds	r3, #12
 800d5c6:	881b      	ldrh	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d001      	beq.n	800d5d0 <inc_lock+0xe0>
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	e015      	b.n	800d5fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d108      	bne.n	800d5e8 <inc_lock+0xf8>
 800d5d6:	4a0c      	ldr	r2, [pc, #48]	@ (800d608 <inc_lock+0x118>)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	011b      	lsls	r3, r3, #4
 800d5dc:	4413      	add	r3, r2
 800d5de:	330c      	adds	r3, #12
 800d5e0:	881b      	ldrh	r3, [r3, #0]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	e001      	b.n	800d5ec <inc_lock+0xfc>
 800d5e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d5ec:	4906      	ldr	r1, [pc, #24]	@ (800d608 <inc_lock+0x118>)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	011b      	lsls	r3, r3, #4
 800d5f2:	440b      	add	r3, r1
 800d5f4:	330c      	adds	r3, #12
 800d5f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	3301      	adds	r3, #1
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3714      	adds	r7, #20
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	2000155c 	.word	0x2000155c

0800d60c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d614:	2300      	movs	r3, #0
 800d616:	60fb      	str	r3, [r7, #12]
 800d618:	e010      	b.n	800d63c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d61a:	4a0d      	ldr	r2, [pc, #52]	@ (800d650 <clear_lock+0x44>)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	011b      	lsls	r3, r3, #4
 800d620:	4413      	add	r3, r2
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	429a      	cmp	r2, r3
 800d628:	d105      	bne.n	800d636 <clear_lock+0x2a>
 800d62a:	4a09      	ldr	r2, [pc, #36]	@ (800d650 <clear_lock+0x44>)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	011b      	lsls	r3, r3, #4
 800d630:	4413      	add	r3, r2
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	3301      	adds	r3, #1
 800d63a:	60fb      	str	r3, [r7, #12]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d9eb      	bls.n	800d61a <clear_lock+0xe>
	}
}
 800d642:	bf00      	nop
 800d644:	bf00      	nop
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	2000155c 	.word	0x2000155c

0800d654 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	78db      	ldrb	r3, [r3, #3]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d034      	beq.n	800d6d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d66c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	7858      	ldrb	r0, [r3, #1]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d678:	2301      	movs	r3, #1
 800d67a:	697a      	ldr	r2, [r7, #20]
 800d67c:	f7ff fd9a 	bl	800d1b4 <disk_write>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d002      	beq.n	800d68c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d686:	2301      	movs	r3, #1
 800d688:	73fb      	strb	r3, [r7, #15]
 800d68a:	e022      	b.n	800d6d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a1b      	ldr	r3, [r3, #32]
 800d696:	697a      	ldr	r2, [r7, #20]
 800d698:	1ad2      	subs	r2, r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	699b      	ldr	r3, [r3, #24]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d217      	bcs.n	800d6d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	789b      	ldrb	r3, [r3, #2]
 800d6a6:	613b      	str	r3, [r7, #16]
 800d6a8:	e010      	b.n	800d6cc <sync_window+0x78>
					wsect += fs->fsize;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	697a      	ldr	r2, [r7, #20]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	7858      	ldrb	r0, [r3, #1]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6be:	2301      	movs	r3, #1
 800d6c0:	697a      	ldr	r2, [r7, #20]
 800d6c2:	f7ff fd77 	bl	800d1b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	613b      	str	r3, [r7, #16]
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d8eb      	bhi.n	800d6aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3718      	adds	r7, #24
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d01b      	beq.n	800d72c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f7ff ffad 	bl	800d654 <sync_window>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d113      	bne.n	800d72c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	7858      	ldrb	r0, [r3, #1]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d70e:	2301      	movs	r3, #1
 800d710:	683a      	ldr	r2, [r7, #0]
 800d712:	f7ff fd2f 	bl	800d174 <disk_read>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d004      	beq.n	800d726 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d71c:	f04f 33ff 	mov.w	r3, #4294967295
 800d720:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d722:	2301      	movs	r3, #1
 800d724:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	683a      	ldr	r2, [r7, #0]
 800d72a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d736:	b480      	push	{r7}
 800d738:	b083      	sub	sp, #12
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	3b02      	subs	r3, #2
 800d744:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	695b      	ldr	r3, [r3, #20]
 800d74a:	3b02      	subs	r3, #2
 800d74c:	683a      	ldr	r2, [r7, #0]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d301      	bcc.n	800d756 <clust2sect+0x20>
 800d752:	2300      	movs	r3, #0
 800d754:	e008      	b.n	800d768 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	895b      	ldrh	r3, [r3, #10]
 800d75a:	461a      	mov	r2, r3
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	fb03 f202 	mul.w	r2, r3, r2
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d766:	4413      	add	r3, r2
}
 800d768:	4618      	mov	r0, r3
 800d76a:	370c      	adds	r7, #12
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	2b01      	cmp	r3, #1
 800d788:	d904      	bls.n	800d794 <get_fat+0x20>
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	695b      	ldr	r3, [r3, #20]
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	429a      	cmp	r2, r3
 800d792:	d302      	bcc.n	800d79a <get_fat+0x26>
		val = 1;	/* Internal error */
 800d794:	2301      	movs	r3, #1
 800d796:	617b      	str	r3, [r7, #20]
 800d798:	e08e      	b.n	800d8b8 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d79a:	f04f 33ff 	mov.w	r3, #4294967295
 800d79e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	2b03      	cmp	r3, #3
 800d7a6:	d061      	beq.n	800d86c <get_fat+0xf8>
 800d7a8:	2b03      	cmp	r3, #3
 800d7aa:	dc7b      	bgt.n	800d8a4 <get_fat+0x130>
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d002      	beq.n	800d7b6 <get_fat+0x42>
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d041      	beq.n	800d838 <get_fat+0xc4>
 800d7b4:	e076      	b.n	800d8a4 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	60fb      	str	r3, [r7, #12]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	085b      	lsrs	r3, r3, #1
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	6a1a      	ldr	r2, [r3, #32]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	0a5b      	lsrs	r3, r3, #9
 800d7cc:	4413      	add	r3, r2
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	6938      	ldr	r0, [r7, #16]
 800d7d2:	f7ff ff83 	bl	800d6dc <move_window>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d166      	bne.n	800d8aa <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	1c5a      	adds	r2, r3, #1
 800d7e0:	60fa      	str	r2, [r7, #12]
 800d7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7e6:	693a      	ldr	r2, [r7, #16]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7ee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	6a1a      	ldr	r2, [r3, #32]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	0a5b      	lsrs	r3, r3, #9
 800d7f8:	4413      	add	r3, r2
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	6938      	ldr	r0, [r7, #16]
 800d7fe:	f7ff ff6d 	bl	800d6dc <move_window>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d152      	bne.n	800d8ae <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80e:	693a      	ldr	r2, [r7, #16]
 800d810:	4413      	add	r3, r2
 800d812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d816:	021b      	lsls	r3, r3, #8
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <get_fat+0xba>
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	091b      	lsrs	r3, r3, #4
 800d82c:	e002      	b.n	800d834 <get_fat+0xc0>
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d834:	617b      	str	r3, [r7, #20]
			break;
 800d836:	e03f      	b.n	800d8b8 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	6a1a      	ldr	r2, [r3, #32]
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	0a1b      	lsrs	r3, r3, #8
 800d840:	4413      	add	r3, r2
 800d842:	4619      	mov	r1, r3
 800d844:	6938      	ldr	r0, [r7, #16]
 800d846:	f7ff ff49 	bl	800d6dc <move_window>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d130      	bne.n	800d8b2 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	005b      	lsls	r3, r3, #1
 800d85a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d85e:	4413      	add	r3, r2
 800d860:	4618      	mov	r0, r3
 800d862:	f7ff fcc7 	bl	800d1f4 <ld_word>
 800d866:	4603      	mov	r3, r0
 800d868:	617b      	str	r3, [r7, #20]
			break;
 800d86a:	e025      	b.n	800d8b8 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	6a1a      	ldr	r2, [r3, #32]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	09db      	lsrs	r3, r3, #7
 800d874:	4413      	add	r3, r2
 800d876:	4619      	mov	r1, r3
 800d878:	6938      	ldr	r0, [r7, #16]
 800d87a:	f7ff ff2f 	bl	800d6dc <move_window>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d118      	bne.n	800d8b6 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d892:	4413      	add	r3, r2
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff fcc5 	bl	800d224 <ld_dword>
 800d89a:	4603      	mov	r3, r0
 800d89c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d8a0:	617b      	str	r3, [r7, #20]
			break;
 800d8a2:	e009      	b.n	800d8b8 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	617b      	str	r3, [r7, #20]
 800d8a8:	e006      	b.n	800d8b8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8aa:	bf00      	nop
 800d8ac:	e004      	b.n	800d8b8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8ae:	bf00      	nop
 800d8b0:	e002      	b.n	800d8b8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d8b2:	bf00      	nop
 800d8b4:	e000      	b.n	800d8b8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d8b6:	bf00      	nop
		}
	}

	return val;
 800d8b8:	697b      	ldr	r3, [r7, #20]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d8c2:	b590      	push	{r4, r7, lr}
 800d8c4:	b089      	sub	sp, #36	@ 0x24
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	60f8      	str	r0, [r7, #12]
 800d8ca:	60b9      	str	r1, [r7, #8]
 800d8cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d8ce:	2302      	movs	r3, #2
 800d8d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	f240 80d9 	bls.w	800da8c <put_fat+0x1ca>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	695b      	ldr	r3, [r3, #20]
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	f080 80d3 	bcs.w	800da8c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	f000 8096 	beq.w	800da1c <put_fat+0x15a>
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	f300 80cb 	bgt.w	800da8c <put_fat+0x1ca>
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d002      	beq.n	800d900 <put_fat+0x3e>
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d06e      	beq.n	800d9dc <put_fat+0x11a>
 800d8fe:	e0c5      	b.n	800da8c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	61bb      	str	r3, [r7, #24]
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	085b      	lsrs	r3, r3, #1
 800d908:	69ba      	ldr	r2, [r7, #24]
 800d90a:	4413      	add	r3, r2
 800d90c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6a1a      	ldr	r2, [r3, #32]
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	0a5b      	lsrs	r3, r3, #9
 800d916:	4413      	add	r3, r2
 800d918:	4619      	mov	r1, r3
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f7ff fede 	bl	800d6dc <move_window>
 800d920:	4603      	mov	r3, r0
 800d922:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d924:	7ffb      	ldrb	r3, [r7, #31]
 800d926:	2b00      	cmp	r3, #0
 800d928:	f040 80a9 	bne.w	800da7e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	1c59      	adds	r1, r3, #1
 800d936:	61b9      	str	r1, [r7, #24]
 800d938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d93c:	4413      	add	r3, r2
 800d93e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00d      	beq.n	800d966 <put_fat+0xa4>
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	b25b      	sxtb	r3, r3
 800d950:	f003 030f 	and.w	r3, r3, #15
 800d954:	b25a      	sxtb	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	011b      	lsls	r3, r3, #4
 800d95c:	b25b      	sxtb	r3, r3
 800d95e:	4313      	orrs	r3, r2
 800d960:	b25b      	sxtb	r3, r3
 800d962:	b2db      	uxtb	r3, r3
 800d964:	e001      	b.n	800d96a <put_fat+0xa8>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2201      	movs	r2, #1
 800d972:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6a1a      	ldr	r2, [r3, #32]
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	0a5b      	lsrs	r3, r3, #9
 800d97c:	4413      	add	r3, r2
 800d97e:	4619      	mov	r1, r3
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7ff feab 	bl	800d6dc <move_window>
 800d986:	4603      	mov	r3, r0
 800d988:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d98a:	7ffb      	ldrb	r3, [r7, #31]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d178      	bne.n	800da82 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d99c:	4413      	add	r3, r2
 800d99e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	f003 0301 	and.w	r3, r3, #1
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d003      	beq.n	800d9b2 <put_fat+0xf0>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	091b      	lsrs	r3, r3, #4
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	e00e      	b.n	800d9d0 <put_fat+0x10e>
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	b25b      	sxtb	r3, r3
 800d9b8:	f023 030f 	bic.w	r3, r3, #15
 800d9bc:	b25a      	sxtb	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	0a1b      	lsrs	r3, r3, #8
 800d9c2:	b25b      	sxtb	r3, r3
 800d9c4:	f003 030f 	and.w	r3, r3, #15
 800d9c8:	b25b      	sxtb	r3, r3
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	b25b      	sxtb	r3, r3
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	70da      	strb	r2, [r3, #3]
			break;
 800d9da:	e057      	b.n	800da8c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6a1a      	ldr	r2, [r3, #32]
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	0a1b      	lsrs	r3, r3, #8
 800d9e4:	4413      	add	r3, r2
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7ff fe77 	bl	800d6dc <move_window>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9f2:	7ffb      	ldrb	r3, [r7, #31]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d146      	bne.n	800da86 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	005b      	lsls	r3, r3, #1
 800da02:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800da06:	4413      	add	r3, r2
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	b292      	uxth	r2, r2
 800da0c:	4611      	mov	r1, r2
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff fc2b 	bl	800d26a <st_word>
			fs->wflag = 1;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2201      	movs	r2, #1
 800da18:	70da      	strb	r2, [r3, #3]
			break;
 800da1a:	e037      	b.n	800da8c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6a1a      	ldr	r2, [r3, #32]
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	09db      	lsrs	r3, r3, #7
 800da24:	4413      	add	r3, r2
 800da26:	4619      	mov	r1, r3
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f7ff fe57 	bl	800d6dc <move_window>
 800da2e:	4603      	mov	r3, r0
 800da30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da32:	7ffb      	ldrb	r3, [r7, #31]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d128      	bne.n	800da8a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800da4c:	4413      	add	r3, r2
 800da4e:	4618      	mov	r0, r3
 800da50:	f7ff fbe8 	bl	800d224 <ld_dword>
 800da54:	4603      	mov	r3, r0
 800da56:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800da5a:	4323      	orrs	r3, r4
 800da5c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800da6c:	4413      	add	r3, r2
 800da6e:	6879      	ldr	r1, [r7, #4]
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff fc15 	bl	800d2a0 <st_dword>
			fs->wflag = 1;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2201      	movs	r2, #1
 800da7a:	70da      	strb	r2, [r3, #3]
			break;
 800da7c:	e006      	b.n	800da8c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da7e:	bf00      	nop
 800da80:	e004      	b.n	800da8c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da82:	bf00      	nop
 800da84:	e002      	b.n	800da8c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da86:	bf00      	nop
 800da88:	e000      	b.n	800da8c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da8a:	bf00      	nop
		}
	}
	return res;
 800da8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3724      	adds	r7, #36	@ 0x24
 800da92:	46bd      	mov	sp, r7
 800da94:	bd90      	pop	{r4, r7, pc}

0800da96 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b088      	sub	sp, #32
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	60f8      	str	r0, [r7, #12]
 800da9e:	60b9      	str	r1, [r7, #8]
 800daa0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800daa2:	2300      	movs	r3, #0
 800daa4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d904      	bls.n	800dabc <remove_chain+0x26>
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	695b      	ldr	r3, [r3, #20]
 800dab6:	68ba      	ldr	r2, [r7, #8]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d301      	bcc.n	800dac0 <remove_chain+0x2a>
 800dabc:	2302      	movs	r3, #2
 800dabe:	e04b      	b.n	800db58 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00c      	beq.n	800dae0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dac6:	f04f 32ff 	mov.w	r2, #4294967295
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	69b8      	ldr	r0, [r7, #24]
 800dace:	f7ff fef8 	bl	800d8c2 <put_fat>
 800dad2:	4603      	mov	r3, r0
 800dad4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dad6:	7ffb      	ldrb	r3, [r7, #31]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <remove_chain+0x4a>
 800dadc:	7ffb      	ldrb	r3, [r7, #31]
 800dade:	e03b      	b.n	800db58 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dae0:	68b9      	ldr	r1, [r7, #8]
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f7ff fe46 	bl	800d774 <get_fat>
 800dae8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d031      	beq.n	800db54 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d101      	bne.n	800dafa <remove_chain+0x64>
 800daf6:	2302      	movs	r3, #2
 800daf8:	e02e      	b.n	800db58 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db00:	d101      	bne.n	800db06 <remove_chain+0x70>
 800db02:	2301      	movs	r3, #1
 800db04:	e028      	b.n	800db58 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800db06:	2200      	movs	r2, #0
 800db08:	68b9      	ldr	r1, [r7, #8]
 800db0a:	69b8      	ldr	r0, [r7, #24]
 800db0c:	f7ff fed9 	bl	800d8c2 <put_fat>
 800db10:	4603      	mov	r3, r0
 800db12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db14:	7ffb      	ldrb	r3, [r7, #31]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <remove_chain+0x88>
 800db1a:	7ffb      	ldrb	r3, [r7, #31]
 800db1c:	e01c      	b.n	800db58 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	691a      	ldr	r2, [r3, #16]
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	3b02      	subs	r3, #2
 800db28:	429a      	cmp	r2, r3
 800db2a:	d20b      	bcs.n	800db44 <remove_chain+0xae>
			fs->free_clst++;
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	691b      	ldr	r3, [r3, #16]
 800db30:	1c5a      	adds	r2, r3, #1
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	791b      	ldrb	r3, [r3, #4]
 800db3a:	f043 0301 	orr.w	r3, r3, #1
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	695b      	ldr	r3, [r3, #20]
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d3c6      	bcc.n	800dae0 <remove_chain+0x4a>
 800db52:	e000      	b.n	800db56 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db54:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3720      	adds	r7, #32
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b088      	sub	sp, #32
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10d      	bne.n	800db92 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d004      	beq.n	800db8c <create_chain+0x2c>
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	695b      	ldr	r3, [r3, #20]
 800db86:	69ba      	ldr	r2, [r7, #24]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d31b      	bcc.n	800dbc4 <create_chain+0x64>
 800db8c:	2301      	movs	r3, #1
 800db8e:	61bb      	str	r3, [r7, #24]
 800db90:	e018      	b.n	800dbc4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff fded 	bl	800d774 <get_fat>
 800db9a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d801      	bhi.n	800dba6 <create_chain+0x46>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e070      	b.n	800dc88 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbac:	d101      	bne.n	800dbb2 <create_chain+0x52>
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	e06a      	b.n	800dc88 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	695b      	ldr	r3, [r3, #20]
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d201      	bcs.n	800dbc0 <create_chain+0x60>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	e063      	b.n	800dc88 <create_chain+0x128>
		scl = clst;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	695b      	ldr	r3, [r3, #20]
 800dbd2:	69fa      	ldr	r2, [r7, #28]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d307      	bcc.n	800dbe8 <create_chain+0x88>
				ncl = 2;
 800dbd8:	2302      	movs	r3, #2
 800dbda:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dbdc:	69fa      	ldr	r2, [r7, #28]
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d901      	bls.n	800dbe8 <create_chain+0x88>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e04f      	b.n	800dc88 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dbe8:	69f9      	ldr	r1, [r7, #28]
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7ff fdc2 	bl	800d774 <get_fat>
 800dbf0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00e      	beq.n	800dc16 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d003      	beq.n	800dc06 <create_chain+0xa6>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc04:	d101      	bne.n	800dc0a <create_chain+0xaa>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	e03e      	b.n	800dc88 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc0a:	69fa      	ldr	r2, [r7, #28]
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d1da      	bne.n	800dbc8 <create_chain+0x68>
 800dc12:	2300      	movs	r3, #0
 800dc14:	e038      	b.n	800dc88 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc16:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc18:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1c:	69f9      	ldr	r1, [r7, #28]
 800dc1e:	6938      	ldr	r0, [r7, #16]
 800dc20:	f7ff fe4f 	bl	800d8c2 <put_fat>
 800dc24:	4603      	mov	r3, r0
 800dc26:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc28:	7dfb      	ldrb	r3, [r7, #23]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d109      	bne.n	800dc42 <create_chain+0xe2>
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d006      	beq.n	800dc42 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc34:	69fa      	ldr	r2, [r7, #28]
 800dc36:	6839      	ldr	r1, [r7, #0]
 800dc38:	6938      	ldr	r0, [r7, #16]
 800dc3a:	f7ff fe42 	bl	800d8c2 <put_fat>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc42:	7dfb      	ldrb	r3, [r7, #23]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d116      	bne.n	800dc76 <create_chain+0x116>
		fs->last_clst = ncl;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	69fa      	ldr	r2, [r7, #28]
 800dc4c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	691a      	ldr	r2, [r3, #16]
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	695b      	ldr	r3, [r3, #20]
 800dc56:	3b02      	subs	r3, #2
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d804      	bhi.n	800dc66 <create_chain+0x106>
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	1e5a      	subs	r2, r3, #1
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	791b      	ldrb	r3, [r3, #4]
 800dc6a:	f043 0301 	orr.w	r3, r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	711a      	strb	r2, [r3, #4]
 800dc74:	e007      	b.n	800dc86 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dc76:	7dfb      	ldrb	r3, [r7, #23]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d102      	bne.n	800dc82 <create_chain+0x122>
 800dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc80:	e000      	b.n	800dc84 <create_chain+0x124>
 800dc82:	2301      	movs	r3, #1
 800dc84:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dc86:	69fb      	ldr	r3, [r7, #28]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3720      	adds	r7, #32
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dca6:	d204      	bcs.n	800dcb2 <dir_sdi+0x22>
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	f003 031f 	and.w	r3, r3, #31
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	e063      	b.n	800dd7e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	683a      	ldr	r2, [r7, #0]
 800dcba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d106      	bne.n	800dcd6 <dir_sdi+0x46>
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d902      	bls.n	800dcd6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10c      	bne.n	800dcf6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	095b      	lsrs	r3, r3, #5
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	8912      	ldrh	r2, [r2, #8]
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d301      	bcc.n	800dcec <dir_sdi+0x5c>
 800dce8:	2302      	movs	r3, #2
 800dcea:	e048      	b.n	800dd7e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	61da      	str	r2, [r3, #28]
 800dcf4:	e029      	b.n	800dd4a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	895b      	ldrh	r3, [r3, #10]
 800dcfa:	025b      	lsls	r3, r3, #9
 800dcfc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dcfe:	e019      	b.n	800dd34 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6979      	ldr	r1, [r7, #20]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7ff fd35 	bl	800d774 <get_fat>
 800dd0a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd12:	d101      	bne.n	800dd18 <dir_sdi+0x88>
 800dd14:	2301      	movs	r3, #1
 800dd16:	e032      	b.n	800dd7e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d904      	bls.n	800dd28 <dir_sdi+0x98>
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	695b      	ldr	r3, [r3, #20]
 800dd22:	697a      	ldr	r2, [r7, #20]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d301      	bcc.n	800dd2c <dir_sdi+0x9c>
 800dd28:	2302      	movs	r3, #2
 800dd2a:	e028      	b.n	800dd7e <dir_sdi+0xee>
			ofs -= csz;
 800dd2c:	683a      	ldr	r2, [r7, #0]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd34:	683a      	ldr	r2, [r7, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d2e1      	bcs.n	800dd00 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dd3c:	6979      	ldr	r1, [r7, #20]
 800dd3e:	6938      	ldr	r0, [r7, #16]
 800dd40:	f7ff fcf9 	bl	800d736 <clust2sect>
 800dd44:	4602      	mov	r2, r0
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	697a      	ldr	r2, [r7, #20]
 800dd4e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	69db      	ldr	r3, [r3, #28]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <dir_sdi+0xcc>
 800dd58:	2302      	movs	r3, #2
 800dd5a:	e010      	b.n	800dd7e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	69da      	ldr	r2, [r3, #28]
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	0a5b      	lsrs	r3, r3, #9
 800dd64:	441a      	add	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd76:	441a      	add	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3718      	adds	r7, #24
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b086      	sub	sp, #24
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	3320      	adds	r3, #32
 800dd9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	69db      	ldr	r3, [r3, #28]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d003      	beq.n	800ddae <dir_next+0x28>
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ddac:	d301      	bcc.n	800ddb2 <dir_next+0x2c>
 800ddae:	2304      	movs	r3, #4
 800ddb0:	e0aa      	b.n	800df08 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f040 8098 	bne.w	800deee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	69db      	ldr	r3, [r3, #28]
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10b      	bne.n	800dde8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	095b      	lsrs	r3, r3, #5
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	8912      	ldrh	r2, [r2, #8]
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	f0c0 8088 	bcc.w	800deee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	61da      	str	r2, [r3, #28]
 800dde4:	2304      	movs	r3, #4
 800dde6:	e08f      	b.n	800df08 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	0a5b      	lsrs	r3, r3, #9
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	8952      	ldrh	r2, [r2, #10]
 800ddf0:	3a01      	subs	r2, #1
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d17a      	bne.n	800deee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	699b      	ldr	r3, [r3, #24]
 800ddfe:	4619      	mov	r1, r3
 800de00:	4610      	mov	r0, r2
 800de02:	f7ff fcb7 	bl	800d774 <get_fat>
 800de06:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d801      	bhi.n	800de12 <dir_next+0x8c>
 800de0e:	2302      	movs	r3, #2
 800de10:	e07a      	b.n	800df08 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de18:	d101      	bne.n	800de1e <dir_next+0x98>
 800de1a:	2301      	movs	r3, #1
 800de1c:	e074      	b.n	800df08 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	695b      	ldr	r3, [r3, #20]
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	429a      	cmp	r2, r3
 800de26:	d358      	bcc.n	800deda <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d104      	bne.n	800de38 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	61da      	str	r2, [r3, #28]
 800de34:	2304      	movs	r3, #4
 800de36:	e067      	b.n	800df08 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	699b      	ldr	r3, [r3, #24]
 800de3e:	4619      	mov	r1, r3
 800de40:	4610      	mov	r0, r2
 800de42:	f7ff fe8d 	bl	800db60 <create_chain>
 800de46:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d101      	bne.n	800de52 <dir_next+0xcc>
 800de4e:	2307      	movs	r3, #7
 800de50:	e05a      	b.n	800df08 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	2b01      	cmp	r3, #1
 800de56:	d101      	bne.n	800de5c <dir_next+0xd6>
 800de58:	2302      	movs	r3, #2
 800de5a:	e055      	b.n	800df08 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de62:	d101      	bne.n	800de68 <dir_next+0xe2>
 800de64:	2301      	movs	r3, #1
 800de66:	e04f      	b.n	800df08 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f7ff fbf3 	bl	800d654 <sync_window>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <dir_next+0xf2>
 800de74:	2301      	movs	r3, #1
 800de76:	e047      	b.n	800df08 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	3330      	adds	r3, #48	@ 0x30
 800de7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de80:	2100      	movs	r1, #0
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff fa59 	bl	800d33a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800de88:	2300      	movs	r3, #0
 800de8a:	613b      	str	r3, [r7, #16]
 800de8c:	6979      	ldr	r1, [r7, #20]
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f7ff fc51 	bl	800d736 <clust2sect>
 800de94:	4602      	mov	r2, r0
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	62da      	str	r2, [r3, #44]	@ 0x2c
 800de9a:	e012      	b.n	800dec2 <dir_next+0x13c>
						fs->wflag = 1;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2201      	movs	r2, #1
 800dea0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f7ff fbd6 	bl	800d654 <sync_window>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <dir_next+0x12c>
 800deae:	2301      	movs	r3, #1
 800deb0:	e02a      	b.n	800df08 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	3301      	adds	r3, #1
 800deb6:	613b      	str	r3, [r7, #16]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	895b      	ldrh	r3, [r3, #10]
 800dec6:	461a      	mov	r2, r3
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	4293      	cmp	r3, r2
 800decc:	d3e6      	bcc.n	800de9c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	1ad2      	subs	r2, r2, r3
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dee0:	6979      	ldr	r1, [r7, #20]
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f7ff fc27 	bl	800d736 <clust2sect>
 800dee8:	4602      	mov	r2, r0
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df00:	441a      	add	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3718      	adds	r7, #24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800df20:	2100      	movs	r1, #0
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7ff feb4 	bl	800dc90 <dir_sdi>
 800df28:	4603      	mov	r3, r0
 800df2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d12b      	bne.n	800df8a <dir_alloc+0x7a>
		n = 0;
 800df32:	2300      	movs	r3, #0
 800df34:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	69db      	ldr	r3, [r3, #28]
 800df3a:	4619      	mov	r1, r3
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f7ff fbcd 	bl	800d6dc <move_window>
 800df42:	4603      	mov	r3, r0
 800df44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df46:	7dfb      	ldrb	r3, [r7, #23]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d11d      	bne.n	800df88 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a1b      	ldr	r3, [r3, #32]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	2be5      	cmp	r3, #229	@ 0xe5
 800df54:	d004      	beq.n	800df60 <dir_alloc+0x50>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a1b      	ldr	r3, [r3, #32]
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d107      	bne.n	800df70 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	3301      	adds	r3, #1
 800df64:	613b      	str	r3, [r7, #16]
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d102      	bne.n	800df74 <dir_alloc+0x64>
 800df6e:	e00c      	b.n	800df8a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800df70:	2300      	movs	r3, #0
 800df72:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800df74:	2101      	movs	r1, #1
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7ff ff05 	bl	800dd86 <dir_next>
 800df7c:	4603      	mov	r3, r0
 800df7e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800df80:	7dfb      	ldrb	r3, [r7, #23]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d0d7      	beq.n	800df36 <dir_alloc+0x26>
 800df86:	e000      	b.n	800df8a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800df88:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800df8a:	7dfb      	ldrb	r3, [r7, #23]
 800df8c:	2b04      	cmp	r3, #4
 800df8e:	d101      	bne.n	800df94 <dir_alloc+0x84>
 800df90:	2307      	movs	r3, #7
 800df92:	75fb      	strb	r3, [r7, #23]
	return res;
 800df94:	7dfb      	ldrb	r3, [r7, #23]
}
 800df96:	4618      	mov	r0, r3
 800df98:	3718      	adds	r7, #24
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800df9e:	b580      	push	{r7, lr}
 800dfa0:	b084      	sub	sp, #16
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
 800dfa6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	331a      	adds	r3, #26
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7ff f921 	bl	800d1f4 <ld_word>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d109      	bne.n	800dfd2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	3314      	adds	r3, #20
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff f916 	bl	800d1f4 <ld_word>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	041b      	lsls	r3, r3, #16
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	331a      	adds	r3, #26
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	b292      	uxth	r2, r2
 800dff0:	4611      	mov	r1, r2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7ff f939 	bl	800d26a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d109      	bne.n	800e014 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	f103 0214 	add.w	r2, r3, #20
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	0c1b      	lsrs	r3, r3, #16
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	4619      	mov	r1, r3
 800e00e:	4610      	mov	r0, r2
 800e010:	f7ff f92b 	bl	800d26a <st_word>
	}
}
 800e014:	bf00      	nop
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e02a:	2100      	movs	r1, #0
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7ff fe2f 	bl	800dc90 <dir_sdi>
 800e032:	4603      	mov	r3, r0
 800e034:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e036:	7dfb      	ldrb	r3, [r7, #23]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d001      	beq.n	800e040 <dir_find+0x24>
 800e03c:	7dfb      	ldrb	r3, [r7, #23]
 800e03e:	e03e      	b.n	800e0be <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	69db      	ldr	r3, [r3, #28]
 800e044:	4619      	mov	r1, r3
 800e046:	6938      	ldr	r0, [r7, #16]
 800e048:	f7ff fb48 	bl	800d6dc <move_window>
 800e04c:	4603      	mov	r3, r0
 800e04e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e050:	7dfb      	ldrb	r3, [r7, #23]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d12f      	bne.n	800e0b6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6a1b      	ldr	r3, [r3, #32]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e05e:	7bfb      	ldrb	r3, [r7, #15]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d102      	bne.n	800e06a <dir_find+0x4e>
 800e064:	2304      	movs	r3, #4
 800e066:	75fb      	strb	r3, [r7, #23]
 800e068:	e028      	b.n	800e0bc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a1b      	ldr	r3, [r3, #32]
 800e06e:	330b      	adds	r3, #11
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e076:	b2da      	uxtb	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6a1b      	ldr	r3, [r3, #32]
 800e080:	330b      	adds	r3, #11
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	f003 0308 	and.w	r3, r3, #8
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10a      	bne.n	800e0a2 <dir_find+0x86>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6a18      	ldr	r0, [r3, #32]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	3324      	adds	r3, #36	@ 0x24
 800e094:	220b      	movs	r2, #11
 800e096:	4619      	mov	r1, r3
 800e098:	f7ff f96a 	bl	800d370 <mem_cmp>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00b      	beq.n	800e0ba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff fe6e 	bl	800dd86 <dir_next>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e0ae:	7dfb      	ldrb	r3, [r7, #23]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d0c5      	beq.n	800e040 <dir_find+0x24>
 800e0b4:	e002      	b.n	800e0bc <dir_find+0xa0>
		if (res != FR_OK) break;
 800e0b6:	bf00      	nop
 800e0b8:	e000      	b.n	800e0bc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e0ba:	bf00      	nop

	return res;
 800e0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3718      	adds	r7, #24
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b084      	sub	sp, #16
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e0d4:	2101      	movs	r1, #1
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff ff1a 	bl	800df10 <dir_alloc>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d11c      	bne.n	800e120 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	69db      	ldr	r3, [r3, #28]
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	68b8      	ldr	r0, [r7, #8]
 800e0ee:	f7ff faf5 	bl	800d6dc <move_window>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d111      	bne.n	800e120 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6a1b      	ldr	r3, [r3, #32]
 800e100:	2220      	movs	r2, #32
 800e102:	2100      	movs	r1, #0
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff f918 	bl	800d33a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a18      	ldr	r0, [r3, #32]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	3324      	adds	r3, #36	@ 0x24
 800e112:	220b      	movs	r2, #11
 800e114:	4619      	mov	r1, r3
 800e116:	f7ff f8ef 	bl	800d2f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	2201      	movs	r2, #1
 800e11e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e120:	7bfb      	ldrb	r3, [r7, #15]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
	...

0800e12c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b088      	sub	sp, #32
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3324      	adds	r3, #36	@ 0x24
 800e140:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e142:	220b      	movs	r2, #11
 800e144:	2120      	movs	r1, #32
 800e146:	68b8      	ldr	r0, [r7, #8]
 800e148:	f7ff f8f7 	bl	800d33a <mem_set>
	si = i = 0; ni = 8;
 800e14c:	2300      	movs	r3, #0
 800e14e:	613b      	str	r3, [r7, #16]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	61fb      	str	r3, [r7, #28]
 800e154:	2308      	movs	r3, #8
 800e156:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	1c5a      	adds	r2, r3, #1
 800e15c:	61fa      	str	r2, [r7, #28]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	4413      	add	r3, r2
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e166:	7efb      	ldrb	r3, [r7, #27]
 800e168:	2b20      	cmp	r3, #32
 800e16a:	d94e      	bls.n	800e20a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e16c:	7efb      	ldrb	r3, [r7, #27]
 800e16e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e170:	d006      	beq.n	800e180 <create_name+0x54>
 800e172:	7efb      	ldrb	r3, [r7, #27]
 800e174:	2b5c      	cmp	r3, #92	@ 0x5c
 800e176:	d110      	bne.n	800e19a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e178:	e002      	b.n	800e180 <create_name+0x54>
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	3301      	adds	r3, #1
 800e17e:	61fb      	str	r3, [r7, #28]
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	4413      	add	r3, r2
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	2b2f      	cmp	r3, #47	@ 0x2f
 800e18a:	d0f6      	beq.n	800e17a <create_name+0x4e>
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	4413      	add	r3, r2
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	2b5c      	cmp	r3, #92	@ 0x5c
 800e196:	d0f0      	beq.n	800e17a <create_name+0x4e>
			break;
 800e198:	e038      	b.n	800e20c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e19a:	7efb      	ldrb	r3, [r7, #27]
 800e19c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e19e:	d003      	beq.n	800e1a8 <create_name+0x7c>
 800e1a0:	693a      	ldr	r2, [r7, #16]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d30c      	bcc.n	800e1c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	2b0b      	cmp	r3, #11
 800e1ac:	d002      	beq.n	800e1b4 <create_name+0x88>
 800e1ae:	7efb      	ldrb	r3, [r7, #27]
 800e1b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1b2:	d001      	beq.n	800e1b8 <create_name+0x8c>
 800e1b4:	2306      	movs	r3, #6
 800e1b6:	e044      	b.n	800e242 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e1b8:	2308      	movs	r3, #8
 800e1ba:	613b      	str	r3, [r7, #16]
 800e1bc:	230b      	movs	r3, #11
 800e1be:	617b      	str	r3, [r7, #20]
			continue;
 800e1c0:	e022      	b.n	800e208 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e1c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	da04      	bge.n	800e1d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e1ca:	7efb      	ldrb	r3, [r7, #27]
 800e1cc:	3b80      	subs	r3, #128	@ 0x80
 800e1ce:	4a1f      	ldr	r2, [pc, #124]	@ (800e24c <create_name+0x120>)
 800e1d0:	5cd3      	ldrb	r3, [r2, r3]
 800e1d2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e1d4:	7efb      	ldrb	r3, [r7, #27]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	481d      	ldr	r0, [pc, #116]	@ (800e250 <create_name+0x124>)
 800e1da:	f7ff f8f0 	bl	800d3be <chk_chr>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d001      	beq.n	800e1e8 <create_name+0xbc>
 800e1e4:	2306      	movs	r3, #6
 800e1e6:	e02c      	b.n	800e242 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e1e8:	7efb      	ldrb	r3, [r7, #27]
 800e1ea:	2b60      	cmp	r3, #96	@ 0x60
 800e1ec:	d905      	bls.n	800e1fa <create_name+0xce>
 800e1ee:	7efb      	ldrb	r3, [r7, #27]
 800e1f0:	2b7a      	cmp	r3, #122	@ 0x7a
 800e1f2:	d802      	bhi.n	800e1fa <create_name+0xce>
 800e1f4:	7efb      	ldrb	r3, [r7, #27]
 800e1f6:	3b20      	subs	r3, #32
 800e1f8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	613a      	str	r2, [r7, #16]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	4413      	add	r3, r2
 800e204:	7efa      	ldrb	r2, [r7, #27]
 800e206:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e208:	e7a6      	b.n	800e158 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e20a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	441a      	add	r2, r3
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d101      	bne.n	800e220 <create_name+0xf4>
 800e21c:	2306      	movs	r3, #6
 800e21e:	e010      	b.n	800e242 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	2be5      	cmp	r3, #229	@ 0xe5
 800e226:	d102      	bne.n	800e22e <create_name+0x102>
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	2205      	movs	r2, #5
 800e22c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e22e:	7efb      	ldrb	r3, [r7, #27]
 800e230:	2b20      	cmp	r3, #32
 800e232:	d801      	bhi.n	800e238 <create_name+0x10c>
 800e234:	2204      	movs	r2, #4
 800e236:	e000      	b.n	800e23a <create_name+0x10e>
 800e238:	2200      	movs	r2, #0
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	330b      	adds	r3, #11
 800e23e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e240:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e242:	4618      	mov	r0, r3
 800e244:	3720      	adds	r7, #32
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	08013b78 	.word	0x08013b78
 800e250:	08013af4 	.word	0x08013af4

0800e254 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e268:	e002      	b.n	800e270 <follow_path+0x1c>
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	3301      	adds	r3, #1
 800e26e:	603b      	str	r3, [r7, #0]
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	2b2f      	cmp	r3, #47	@ 0x2f
 800e276:	d0f8      	beq.n	800e26a <follow_path+0x16>
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	2b5c      	cmp	r3, #92	@ 0x5c
 800e27e:	d0f4      	beq.n	800e26a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	2200      	movs	r2, #0
 800e284:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	2b1f      	cmp	r3, #31
 800e28c:	d80a      	bhi.n	800e2a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2280      	movs	r2, #128	@ 0x80
 800e292:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e296:	2100      	movs	r1, #0
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7ff fcf9 	bl	800dc90 <dir_sdi>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	75fb      	strb	r3, [r7, #23]
 800e2a2:	e043      	b.n	800e32c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2a4:	463b      	mov	r3, r7
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7ff ff3f 	bl	800e12c <create_name>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2b2:	7dfb      	ldrb	r3, [r7, #23]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d134      	bne.n	800e322 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff feaf 	bl	800e01c <dir_find>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e2c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00a      	beq.n	800e2e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
 800e2d2:	2b04      	cmp	r3, #4
 800e2d4:	d127      	bne.n	800e326 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e2d6:	7afb      	ldrb	r3, [r7, #11]
 800e2d8:	f003 0304 	and.w	r3, r3, #4
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d122      	bne.n	800e326 <follow_path+0xd2>
 800e2e0:	2305      	movs	r3, #5
 800e2e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e2e4:	e01f      	b.n	800e326 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e2e6:	7afb      	ldrb	r3, [r7, #11]
 800e2e8:	f003 0304 	and.w	r3, r3, #4
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d11c      	bne.n	800e32a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	799b      	ldrb	r3, [r3, #6]
 800e2f4:	f003 0310 	and.w	r3, r3, #16
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d102      	bne.n	800e302 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e2fc:	2305      	movs	r3, #5
 800e2fe:	75fb      	strb	r3, [r7, #23]
 800e300:	e014      	b.n	800e32c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	695b      	ldr	r3, [r3, #20]
 800e30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e310:	4413      	add	r3, r2
 800e312:	4619      	mov	r1, r3
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f7ff fe42 	bl	800df9e <ld_clust>
 800e31a:	4602      	mov	r2, r0
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e320:	e7c0      	b.n	800e2a4 <follow_path+0x50>
			if (res != FR_OK) break;
 800e322:	bf00      	nop
 800e324:	e002      	b.n	800e32c <follow_path+0xd8>
				break;
 800e326:	bf00      	nop
 800e328:	e000      	b.n	800e32c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e32a:	bf00      	nop
			}
		}
	}

	return res;
 800e32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e336:	b480      	push	{r7}
 800e338:	b087      	sub	sp, #28
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e33e:	f04f 33ff 	mov.w	r3, #4294967295
 800e342:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d031      	beq.n	800e3b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	617b      	str	r3, [r7, #20]
 800e352:	e002      	b.n	800e35a <get_ldnumber+0x24>
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	3301      	adds	r3, #1
 800e358:	617b      	str	r3, [r7, #20]
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	2b20      	cmp	r3, #32
 800e360:	d903      	bls.n	800e36a <get_ldnumber+0x34>
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	2b3a      	cmp	r3, #58	@ 0x3a
 800e368:	d1f4      	bne.n	800e354 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	2b3a      	cmp	r3, #58	@ 0x3a
 800e370:	d11c      	bne.n	800e3ac <get_ldnumber+0x76>
			tp = *path;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	1c5a      	adds	r2, r3, #1
 800e37c:	60fa      	str	r2, [r7, #12]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	3b30      	subs	r3, #48	@ 0x30
 800e382:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	2b09      	cmp	r3, #9
 800e388:	d80e      	bhi.n	800e3a8 <get_ldnumber+0x72>
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d10a      	bne.n	800e3a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d107      	bne.n	800e3a8 <get_ldnumber+0x72>
					vol = (int)i;
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	697a      	ldr	r2, [r7, #20]
 800e3a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	e002      	b.n	800e3b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e3b0:	693b      	ldr	r3, [r7, #16]
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	371c      	adds	r7, #28
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
	...

0800e3c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	70da      	strb	r2, [r3, #3]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff f97e 	bl	800d6dc <move_window>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d001      	beq.n	800e3ea <check_fs+0x2a>
 800e3e6:	2304      	movs	r3, #4
 800e3e8:	e038      	b.n	800e45c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	3330      	adds	r3, #48	@ 0x30
 800e3ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7fe fefe 	bl	800d1f4 <ld_word>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e400:	429a      	cmp	r2, r3
 800e402:	d001      	beq.n	800e408 <check_fs+0x48>
 800e404:	2303      	movs	r3, #3
 800e406:	e029      	b.n	800e45c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e40e:	2be9      	cmp	r3, #233	@ 0xe9
 800e410:	d009      	beq.n	800e426 <check_fs+0x66>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e418:	2beb      	cmp	r3, #235	@ 0xeb
 800e41a:	d11e      	bne.n	800e45a <check_fs+0x9a>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e422:	2b90      	cmp	r3, #144	@ 0x90
 800e424:	d119      	bne.n	800e45a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	3330      	adds	r3, #48	@ 0x30
 800e42a:	3336      	adds	r3, #54	@ 0x36
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fe fef9 	bl	800d224 <ld_dword>
 800e432:	4603      	mov	r3, r0
 800e434:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e438:	4a0a      	ldr	r2, [pc, #40]	@ (800e464 <check_fs+0xa4>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d101      	bne.n	800e442 <check_fs+0x82>
 800e43e:	2300      	movs	r3, #0
 800e440:	e00c      	b.n	800e45c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	3330      	adds	r3, #48	@ 0x30
 800e446:	3352      	adds	r3, #82	@ 0x52
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fe feeb 	bl	800d224 <ld_dword>
 800e44e:	4603      	mov	r3, r0
 800e450:	4a05      	ldr	r2, [pc, #20]	@ (800e468 <check_fs+0xa8>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d101      	bne.n	800e45a <check_fs+0x9a>
 800e456:	2300      	movs	r3, #0
 800e458:	e000      	b.n	800e45c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e45a:	2302      	movs	r3, #2
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	00544146 	.word	0x00544146
 800e468:	33544146 	.word	0x33544146

0800e46c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b096      	sub	sp, #88	@ 0x58
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	4613      	mov	r3, r2
 800e478:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2200      	movs	r2, #0
 800e47e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f7ff ff58 	bl	800e336 <get_ldnumber>
 800e486:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	da01      	bge.n	800e492 <find_volume+0x26>
 800e48e:	230b      	movs	r3, #11
 800e490:	e22d      	b.n	800e8ee <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e492:	4aa1      	ldr	r2, [pc, #644]	@ (800e718 <find_volume+0x2ac>)
 800e494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e49a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <find_volume+0x3a>
 800e4a2:	230c      	movs	r3, #12
 800e4a4:	e223      	b.n	800e8ee <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e4ac:	79fb      	ldrb	r3, [r7, #7]
 800e4ae:	f023 0301 	bic.w	r3, r3, #1
 800e4b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d01a      	beq.n	800e4f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4be:	785b      	ldrb	r3, [r3, #1]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe fe17 	bl	800d0f4 <disk_status>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e4cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e4d0:	f003 0301 	and.w	r3, r3, #1
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10c      	bne.n	800e4f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e4d8:	79fb      	ldrb	r3, [r7, #7]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d007      	beq.n	800e4ee <find_volume+0x82>
 800e4de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e4e2:	f003 0304 	and.w	r3, r3, #4
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d001      	beq.n	800e4ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e4ea:	230a      	movs	r3, #10
 800e4ec:	e1ff      	b.n	800e8ee <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	e1fd      	b.n	800e8ee <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e502:	785b      	ldrb	r3, [r3, #1]
 800e504:	4618      	mov	r0, r3
 800e506:	f7fe fe0f 	bl	800d128 <disk_initialize>
 800e50a:	4603      	mov	r3, r0
 800e50c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e510:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e514:	f003 0301 	and.w	r3, r3, #1
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e51c:	2303      	movs	r3, #3
 800e51e:	e1e6      	b.n	800e8ee <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e520:	79fb      	ldrb	r3, [r7, #7]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d007      	beq.n	800e536 <find_volume+0xca>
 800e526:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e52a:	f003 0304 	and.w	r3, r3, #4
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e532:	230a      	movs	r3, #10
 800e534:	e1db      	b.n	800e8ee <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e53a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e53c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e53e:	f7ff ff3f 	bl	800e3c0 <check_fs>
 800e542:	4603      	mov	r3, r0
 800e544:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e548:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	d149      	bne.n	800e5e4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e550:	2300      	movs	r3, #0
 800e552:	643b      	str	r3, [r7, #64]	@ 0x40
 800e554:	e01e      	b.n	800e594 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e558:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e55c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e55e:	011b      	lsls	r3, r3, #4
 800e560:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e564:	4413      	add	r3, r2
 800e566:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56a:	3304      	adds	r3, #4
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d006      	beq.n	800e580 <find_volume+0x114>
 800e572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e574:	3308      	adds	r3, #8
 800e576:	4618      	mov	r0, r3
 800e578:	f7fe fe54 	bl	800d224 <ld_dword>
 800e57c:	4602      	mov	r2, r0
 800e57e:	e000      	b.n	800e582 <find_volume+0x116>
 800e580:	2200      	movs	r2, #0
 800e582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	3358      	adds	r3, #88	@ 0x58
 800e588:	443b      	add	r3, r7
 800e58a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e58e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e590:	3301      	adds	r3, #1
 800e592:	643b      	str	r3, [r7, #64]	@ 0x40
 800e594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e596:	2b03      	cmp	r3, #3
 800e598:	d9dd      	bls.n	800e556 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e59a:	2300      	movs	r3, #0
 800e59c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e59e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <find_volume+0x13e>
 800e5a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e5aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	3358      	adds	r3, #88	@ 0x58
 800e5b0:	443b      	add	r3, r7
 800e5b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e5b6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e5b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d005      	beq.n	800e5ca <find_volume+0x15e>
 800e5be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e5c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5c2:	f7ff fefd 	bl	800e3c0 <check_fs>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	e000      	b.n	800e5cc <find_volume+0x160>
 800e5ca:	2303      	movs	r3, #3
 800e5cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e5d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d905      	bls.n	800e5e4 <find_volume+0x178>
 800e5d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5da:	3301      	adds	r3, #1
 800e5dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5e0:	2b03      	cmp	r3, #3
 800e5e2:	d9e2      	bls.n	800e5aa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e5e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5e8:	2b04      	cmp	r3, #4
 800e5ea:	d101      	bne.n	800e5f0 <find_volume+0x184>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e17e      	b.n	800e8ee <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e5f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d901      	bls.n	800e5fc <find_volume+0x190>
 800e5f8:	230d      	movs	r3, #13
 800e5fa:	e178      	b.n	800e8ee <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5fe:	3330      	adds	r3, #48	@ 0x30
 800e600:	330b      	adds	r3, #11
 800e602:	4618      	mov	r0, r3
 800e604:	f7fe fdf6 	bl	800d1f4 <ld_word>
 800e608:	4603      	mov	r3, r0
 800e60a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e60e:	d001      	beq.n	800e614 <find_volume+0x1a8>
 800e610:	230d      	movs	r3, #13
 800e612:	e16c      	b.n	800e8ee <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e616:	3330      	adds	r3, #48	@ 0x30
 800e618:	3316      	adds	r3, #22
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fe fdea 	bl	800d1f4 <ld_word>
 800e620:	4603      	mov	r3, r0
 800e622:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e626:	2b00      	cmp	r3, #0
 800e628:	d106      	bne.n	800e638 <find_volume+0x1cc>
 800e62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e62c:	3330      	adds	r3, #48	@ 0x30
 800e62e:	3324      	adds	r3, #36	@ 0x24
 800e630:	4618      	mov	r0, r3
 800e632:	f7fe fdf7 	bl	800d224 <ld_dword>
 800e636:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e63c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e640:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e646:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e64a:	789b      	ldrb	r3, [r3, #2]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d005      	beq.n	800e65c <find_volume+0x1f0>
 800e650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e652:	789b      	ldrb	r3, [r3, #2]
 800e654:	2b02      	cmp	r3, #2
 800e656:	d001      	beq.n	800e65c <find_volume+0x1f0>
 800e658:	230d      	movs	r3, #13
 800e65a:	e148      	b.n	800e8ee <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65e:	789b      	ldrb	r3, [r3, #2]
 800e660:	461a      	mov	r2, r3
 800e662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e664:	fb02 f303 	mul.w	r3, r2, r3
 800e668:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e66c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e670:	461a      	mov	r2, r3
 800e672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e674:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e678:	895b      	ldrh	r3, [r3, #10]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d008      	beq.n	800e690 <find_volume+0x224>
 800e67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e680:	895b      	ldrh	r3, [r3, #10]
 800e682:	461a      	mov	r2, r3
 800e684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e686:	895b      	ldrh	r3, [r3, #10]
 800e688:	3b01      	subs	r3, #1
 800e68a:	4013      	ands	r3, r2
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <find_volume+0x228>
 800e690:	230d      	movs	r3, #13
 800e692:	e12c      	b.n	800e8ee <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e696:	3330      	adds	r3, #48	@ 0x30
 800e698:	3311      	adds	r3, #17
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe fdaa 	bl	800d1f4 <ld_word>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6aa:	891b      	ldrh	r3, [r3, #8]
 800e6ac:	f003 030f 	and.w	r3, r3, #15
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d001      	beq.n	800e6ba <find_volume+0x24e>
 800e6b6:	230d      	movs	r3, #13
 800e6b8:	e119      	b.n	800e8ee <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6bc:	3330      	adds	r3, #48	@ 0x30
 800e6be:	3313      	adds	r3, #19
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fe fd97 	bl	800d1f4 <ld_word>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e6ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d106      	bne.n	800e6de <find_volume+0x272>
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d2:	3330      	adds	r3, #48	@ 0x30
 800e6d4:	3320      	adds	r3, #32
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe fda4 	bl	800d224 <ld_dword>
 800e6dc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e0:	3330      	adds	r3, #48	@ 0x30
 800e6e2:	330e      	adds	r3, #14
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7fe fd85 	bl	800d1f4 <ld_word>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e6ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d101      	bne.n	800e6f8 <find_volume+0x28c>
 800e6f4:	230d      	movs	r3, #13
 800e6f6:	e0fa      	b.n	800e8ee <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e6f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6fc:	4413      	add	r3, r2
 800e6fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e700:	8912      	ldrh	r2, [r2, #8]
 800e702:	0912      	lsrs	r2, r2, #4
 800e704:	b292      	uxth	r2, r2
 800e706:	4413      	add	r3, r2
 800e708:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e70a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e70e:	429a      	cmp	r2, r3
 800e710:	d204      	bcs.n	800e71c <find_volume+0x2b0>
 800e712:	230d      	movs	r3, #13
 800e714:	e0eb      	b.n	800e8ee <find_volume+0x482>
 800e716:	bf00      	nop
 800e718:	20001554 	.word	0x20001554
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e71c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e724:	8952      	ldrh	r2, [r2, #10]
 800e726:	fbb3 f3f2 	udiv	r3, r3, r2
 800e72a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d101      	bne.n	800e736 <find_volume+0x2ca>
 800e732:	230d      	movs	r3, #13
 800e734:	e0db      	b.n	800e8ee <find_volume+0x482>
		fmt = FS_FAT32;
 800e736:	2303      	movs	r3, #3
 800e738:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e742:	4293      	cmp	r3, r2
 800e744:	d802      	bhi.n	800e74c <find_volume+0x2e0>
 800e746:	2302      	movs	r3, #2
 800e748:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e752:	4293      	cmp	r3, r2
 800e754:	d802      	bhi.n	800e75c <find_volume+0x2f0>
 800e756:	2301      	movs	r3, #1
 800e758:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75e:	1c9a      	adds	r2, r3, #2
 800e760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e762:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e766:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e768:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e76a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e76c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e76e:	441a      	add	r2, r3
 800e770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e772:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e774:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e778:	441a      	add	r2, r3
 800e77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e77c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e77e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e782:	2b03      	cmp	r3, #3
 800e784:	d11e      	bne.n	800e7c4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e788:	3330      	adds	r3, #48	@ 0x30
 800e78a:	332a      	adds	r3, #42	@ 0x2a
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fe fd31 	bl	800d1f4 <ld_word>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d001      	beq.n	800e79c <find_volume+0x330>
 800e798:	230d      	movs	r3, #13
 800e79a:	e0a8      	b.n	800e8ee <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79e:	891b      	ldrh	r3, [r3, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d001      	beq.n	800e7a8 <find_volume+0x33c>
 800e7a4:	230d      	movs	r3, #13
 800e7a6:	e0a2      	b.n	800e8ee <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7aa:	3330      	adds	r3, #48	@ 0x30
 800e7ac:	332c      	adds	r3, #44	@ 0x2c
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fe fd38 	bl	800d224 <ld_dword>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7c2:	e01f      	b.n	800e804 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c6:	891b      	ldrh	r3, [r3, #8]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d101      	bne.n	800e7d0 <find_volume+0x364>
 800e7cc:	230d      	movs	r3, #13
 800e7ce:	e08e      	b.n	800e8ee <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7d2:	6a1a      	ldr	r2, [r3, #32]
 800e7d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7d6:	441a      	add	r2, r3
 800e7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7da:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e7dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e7e0:	2b02      	cmp	r3, #2
 800e7e2:	d103      	bne.n	800e7ec <find_volume+0x380>
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e6:	695b      	ldr	r3, [r3, #20]
 800e7e8:	005b      	lsls	r3, r3, #1
 800e7ea:	e00a      	b.n	800e802 <find_volume+0x396>
 800e7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ee:	695a      	ldr	r2, [r3, #20]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	4413      	add	r3, r2
 800e7f6:	085a      	lsrs	r2, r3, #1
 800e7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7fa:	695b      	ldr	r3, [r3, #20]
 800e7fc:	f003 0301 	and.w	r3, r3, #1
 800e800:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e802:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e806:	699a      	ldr	r2, [r3, #24]
 800e808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e80a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e80e:	0a5b      	lsrs	r3, r3, #9
 800e810:	429a      	cmp	r2, r3
 800e812:	d201      	bcs.n	800e818 <find_volume+0x3ac>
 800e814:	230d      	movs	r3, #13
 800e816:	e06a      	b.n	800e8ee <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e81a:	f04f 32ff 	mov.w	r2, #4294967295
 800e81e:	611a      	str	r2, [r3, #16]
 800e820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e822:	691a      	ldr	r2, [r3, #16]
 800e824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e826:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82a:	2280      	movs	r2, #128	@ 0x80
 800e82c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e82e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e832:	2b03      	cmp	r3, #3
 800e834:	d149      	bne.n	800e8ca <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e838:	3330      	adds	r3, #48	@ 0x30
 800e83a:	3330      	adds	r3, #48	@ 0x30
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fe fcd9 	bl	800d1f4 <ld_word>
 800e842:	4603      	mov	r3, r0
 800e844:	2b01      	cmp	r3, #1
 800e846:	d140      	bne.n	800e8ca <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e84a:	3301      	adds	r3, #1
 800e84c:	4619      	mov	r1, r3
 800e84e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e850:	f7fe ff44 	bl	800d6dc <move_window>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d137      	bne.n	800e8ca <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e85c:	2200      	movs	r2, #0
 800e85e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e862:	3330      	adds	r3, #48	@ 0x30
 800e864:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fe fcc3 	bl	800d1f4 <ld_word>
 800e86e:	4603      	mov	r3, r0
 800e870:	461a      	mov	r2, r3
 800e872:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e876:	429a      	cmp	r2, r3
 800e878:	d127      	bne.n	800e8ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e87c:	3330      	adds	r3, #48	@ 0x30
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fe fcd0 	bl	800d224 <ld_dword>
 800e884:	4603      	mov	r3, r0
 800e886:	4a1c      	ldr	r2, [pc, #112]	@ (800e8f8 <find_volume+0x48c>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d11e      	bne.n	800e8ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e88e:	3330      	adds	r3, #48	@ 0x30
 800e890:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe fcc5 	bl	800d224 <ld_dword>
 800e89a:	4603      	mov	r3, r0
 800e89c:	4a17      	ldr	r2, [pc, #92]	@ (800e8fc <find_volume+0x490>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d113      	bne.n	800e8ca <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a4:	3330      	adds	r3, #48	@ 0x30
 800e8a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fe fcba 	bl	800d224 <ld_dword>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8b4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8b8:	3330      	adds	r3, #48	@ 0x30
 800e8ba:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fe fcb0 	bl	800d224 <ld_dword>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8c8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8cc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e8d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e8d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e900 <find_volume+0x494>)
 800e8d4:	881b      	ldrh	r3, [r3, #0]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	4b09      	ldr	r3, [pc, #36]	@ (800e900 <find_volume+0x494>)
 800e8dc:	801a      	strh	r2, [r3, #0]
 800e8de:	4b08      	ldr	r3, [pc, #32]	@ (800e900 <find_volume+0x494>)
 800e8e0:	881a      	ldrh	r2, [r3, #0]
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e8e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e8e8:	f7fe fe90 	bl	800d60c <clear_lock>
#endif
	return FR_OK;
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3758      	adds	r7, #88	@ 0x58
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	41615252 	.word	0x41615252
 800e8fc:	61417272 	.word	0x61417272
 800e900:	20001558 	.word	0x20001558

0800e904 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b088      	sub	sp, #32
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	4613      	mov	r3, r2
 800e910:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e916:	f107 0310 	add.w	r3, r7, #16
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7ff fd0b 	bl	800e336 <get_ldnumber>
 800e920:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	2b00      	cmp	r3, #0
 800e926:	da01      	bge.n	800e92c <f_mount+0x28>
 800e928:	230b      	movs	r3, #11
 800e92a:	e02b      	b.n	800e984 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e92c:	4a17      	ldr	r2, [pc, #92]	@ (800e98c <f_mount+0x88>)
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e934:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d005      	beq.n	800e948 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e93c:	69b8      	ldr	r0, [r7, #24]
 800e93e:	f7fe fe65 	bl	800d60c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e942:	69bb      	ldr	r3, [r7, #24]
 800e944:	2200      	movs	r2, #0
 800e946:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d002      	beq.n	800e954 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	490d      	ldr	r1, [pc, #52]	@ (800e98c <f_mount+0x88>)
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <f_mount+0x66>
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d001      	beq.n	800e96e <f_mount+0x6a>
 800e96a:	2300      	movs	r3, #0
 800e96c:	e00a      	b.n	800e984 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e96e:	f107 010c 	add.w	r1, r7, #12
 800e972:	f107 0308 	add.w	r3, r7, #8
 800e976:	2200      	movs	r2, #0
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff fd77 	bl	800e46c <find_volume>
 800e97e:	4603      	mov	r3, r0
 800e980:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e982:	7dfb      	ldrb	r3, [r7, #23]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3720      	adds	r7, #32
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	20001554 	.word	0x20001554

0800e990 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b098      	sub	sp, #96	@ 0x60
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	4613      	mov	r3, r2
 800e99c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d101      	bne.n	800e9a8 <f_open+0x18>
 800e9a4:	2309      	movs	r3, #9
 800e9a6:	e1a9      	b.n	800ecfc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e9a8:	79fb      	ldrb	r3, [r7, #7]
 800e9aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e9ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e9b0:	79fa      	ldrb	r2, [r7, #7]
 800e9b2:	f107 0110 	add.w	r1, r7, #16
 800e9b6:	f107 0308 	add.w	r3, r7, #8
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7ff fd56 	bl	800e46c <find_volume>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e9c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f040 818d 	bne.w	800ecea <f_open+0x35a>
		dj.obj.fs = fs;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	f107 0314 	add.w	r3, r7, #20
 800e9da:	4611      	mov	r1, r2
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7ff fc39 	bl	800e254 <follow_path>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e9e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d118      	bne.n	800ea22 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e9f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e9f4:	b25b      	sxtb	r3, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	da03      	bge.n	800ea02 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e9fa:	2306      	movs	r3, #6
 800e9fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ea00:	e00f      	b.n	800ea22 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ea02:	79fb      	ldrb	r3, [r7, #7]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	bf8c      	ite	hi
 800ea08:	2301      	movhi	r3, #1
 800ea0a:	2300      	movls	r3, #0
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	461a      	mov	r2, r3
 800ea10:	f107 0314 	add.w	r3, r7, #20
 800ea14:	4611      	mov	r1, r2
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fe fcec 	bl	800d3f4 <chk_lock>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ea22:	79fb      	ldrb	r3, [r7, #7]
 800ea24:	f003 031c 	and.w	r3, r3, #28
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d07f      	beq.n	800eb2c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ea2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d017      	beq.n	800ea64 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ea34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea38:	2b04      	cmp	r3, #4
 800ea3a:	d10e      	bne.n	800ea5a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ea3c:	f7fe fd36 	bl	800d4ac <enq_lock>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d006      	beq.n	800ea54 <f_open+0xc4>
 800ea46:	f107 0314 	add.w	r3, r7, #20
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff fb3b 	bl	800e0c6 <dir_register>
 800ea50:	4603      	mov	r3, r0
 800ea52:	e000      	b.n	800ea56 <f_open+0xc6>
 800ea54:	2312      	movs	r3, #18
 800ea56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ea5a:	79fb      	ldrb	r3, [r7, #7]
 800ea5c:	f043 0308 	orr.w	r3, r3, #8
 800ea60:	71fb      	strb	r3, [r7, #7]
 800ea62:	e010      	b.n	800ea86 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ea64:	7ebb      	ldrb	r3, [r7, #26]
 800ea66:	f003 0311 	and.w	r3, r3, #17
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d003      	beq.n	800ea76 <f_open+0xe6>
					res = FR_DENIED;
 800ea6e:	2307      	movs	r3, #7
 800ea70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ea74:	e007      	b.n	800ea86 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ea76:	79fb      	ldrb	r3, [r7, #7]
 800ea78:	f003 0304 	and.w	r3, r3, #4
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d002      	beq.n	800ea86 <f_open+0xf6>
 800ea80:	2308      	movs	r3, #8
 800ea82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ea86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d168      	bne.n	800eb60 <f_open+0x1d0>
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	f003 0308 	and.w	r3, r3, #8
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d063      	beq.n	800eb60 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ea98:	f7fe face 	bl	800d038 <get_fattime>
 800ea9c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ea9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaa0:	330e      	adds	r3, #14
 800eaa2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fe fbfb 	bl	800d2a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eaaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaac:	3316      	adds	r3, #22
 800eaae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fe fbf5 	bl	800d2a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eab8:	330b      	adds	r3, #11
 800eaba:	2220      	movs	r2, #32
 800eabc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eac2:	4611      	mov	r1, r2
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7ff fa6a 	bl	800df9e <ld_clust>
 800eaca:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ead0:	2200      	movs	r2, #0
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7ff fa82 	bl	800dfdc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ead8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eada:	331c      	adds	r3, #28
 800eadc:	2100      	movs	r1, #0
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fe fbde 	bl	800d2a0 <st_dword>
					fs->wflag = 1;
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	2201      	movs	r2, #1
 800eae8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eaea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d037      	beq.n	800eb60 <f_open+0x1d0>
						dw = fs->winsect;
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800eaf6:	f107 0314 	add.w	r3, r7, #20
 800eafa:	2200      	movs	r2, #0
 800eafc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe ffc9 	bl	800da96 <remove_chain>
 800eb04:	4603      	mov	r3, r0
 800eb06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800eb0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d126      	bne.n	800eb60 <f_open+0x1d0>
							res = move_window(fs, dw);
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7fe fde0 	bl	800d6dc <move_window>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eb26:	3a01      	subs	r2, #1
 800eb28:	60da      	str	r2, [r3, #12]
 800eb2a:	e019      	b.n	800eb60 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800eb2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d115      	bne.n	800eb60 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800eb34:	7ebb      	ldrb	r3, [r7, #26]
 800eb36:	f003 0310 	and.w	r3, r3, #16
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <f_open+0x1b6>
					res = FR_NO_FILE;
 800eb3e:	2304      	movs	r3, #4
 800eb40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eb44:	e00c      	b.n	800eb60 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800eb46:	79fb      	ldrb	r3, [r7, #7]
 800eb48:	f003 0302 	and.w	r3, r3, #2
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d007      	beq.n	800eb60 <f_open+0x1d0>
 800eb50:	7ebb      	ldrb	r3, [r7, #26]
 800eb52:	f003 0301 	and.w	r3, r3, #1
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d002      	beq.n	800eb60 <f_open+0x1d0>
						res = FR_DENIED;
 800eb5a:	2307      	movs	r3, #7
 800eb5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800eb60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d126      	bne.n	800ebb6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	f003 0308 	and.w	r3, r3, #8
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d003      	beq.n	800eb7a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800eb72:	79fb      	ldrb	r3, [r7, #7]
 800eb74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800eb82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eb88:	79fb      	ldrb	r3, [r7, #7]
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	bf8c      	ite	hi
 800eb8e:	2301      	movhi	r3, #1
 800eb90:	2300      	movls	r3, #0
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	461a      	mov	r2, r3
 800eb96:	f107 0314 	add.w	r3, r7, #20
 800eb9a:	4611      	mov	r1, r2
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fe fca7 	bl	800d4f0 <inc_lock>
 800eba2:	4602      	mov	r2, r0
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d102      	bne.n	800ebb6 <f_open+0x226>
 800ebb0:	2302      	movs	r3, #2
 800ebb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ebb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f040 8095 	bne.w	800ecea <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebc4:	4611      	mov	r1, r2
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7ff f9e9 	bl	800df9e <ld_clust>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ebd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebd4:	331c      	adds	r3, #28
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fe fb24 	bl	800d224 <ld_dword>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	88da      	ldrh	r2, [r3, #6]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	79fa      	ldrb	r2, [r7, #7]
 800ebfa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	3330      	adds	r3, #48	@ 0x30
 800ec12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec16:	2100      	movs	r1, #0
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7fe fb8e 	bl	800d33a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ec1e:	79fb      	ldrb	r3, [r7, #7]
 800ec20:	f003 0320 	and.w	r3, r3, #32
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d060      	beq.n	800ecea <f_open+0x35a>
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d05c      	beq.n	800ecea <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	68da      	ldr	r2, [r3, #12]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	895b      	ldrh	r3, [r3, #10]
 800ec3c:	025b      	lsls	r3, r3, #9
 800ec3e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec4c:	e016      	b.n	800ec7c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fe fd8e 	bl	800d774 <get_fat>
 800ec58:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ec5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d802      	bhi.n	800ec66 <f_open+0x2d6>
 800ec60:	2302      	movs	r3, #2
 800ec62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec6c:	d102      	bne.n	800ec74 <f_open+0x2e4>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d103      	bne.n	800ec8c <f_open+0x2fc>
 800ec84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d8e0      	bhi.n	800ec4e <f_open+0x2be>
				}
				fp->clust = clst;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ec92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d127      	bne.n	800ecea <f_open+0x35a>
 800ec9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d022      	beq.n	800ecea <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fe fd44 	bl	800d736 <clust2sect>
 800ecae:	6478      	str	r0, [r7, #68]	@ 0x44
 800ecb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d103      	bne.n	800ecbe <f_open+0x32e>
						res = FR_INT_ERR;
 800ecb6:	2302      	movs	r3, #2
 800ecb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ecbc:	e015      	b.n	800ecea <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ecbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecc0:	0a5a      	lsrs	r2, r3, #9
 800ecc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecc4:	441a      	add	r2, r3
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	7858      	ldrb	r0, [r3, #1]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6a1a      	ldr	r2, [r3, #32]
 800ecd8:	2301      	movs	r3, #1
 800ecda:	f7fe fa4b 	bl	800d174 <disk_read>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d002      	beq.n	800ecea <f_open+0x35a>
 800ece4:	2301      	movs	r3, #1
 800ece6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ecea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d002      	beq.n	800ecf8 <f_open+0x368>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ecf8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3760      	adds	r7, #96	@ 0x60
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b092      	sub	sp, #72	@ 0x48
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ed10:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ed14:	f107 030c 	add.w	r3, r7, #12
 800ed18:	2200      	movs	r2, #0
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff fba6 	bl	800e46c <find_volume>
 800ed20:	4603      	mov	r3, r0
 800ed22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800ed26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f040 8099 	bne.w	800ee62 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ed30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ed36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed38:	691a      	ldr	r2, [r3, #16]
 800ed3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed3c:	695b      	ldr	r3, [r3, #20]
 800ed3e:	3b02      	subs	r3, #2
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d804      	bhi.n	800ed4e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ed44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed46:	691a      	ldr	r2, [r3, #16]
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	e089      	b.n	800ee62 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ed52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d128      	bne.n	800edac <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed60:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ed62:	f107 0314 	add.w	r3, r7, #20
 800ed66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7fe fd03 	bl	800d774 <get_fat>
 800ed6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ed70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed76:	d103      	bne.n	800ed80 <f_getfree+0x7c>
 800ed78:	2301      	movs	r3, #1
 800ed7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ed7e:	e063      	b.n	800ee48 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ed80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d103      	bne.n	800ed8e <f_getfree+0x8a>
 800ed86:	2302      	movs	r3, #2
 800ed88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ed8c:	e05c      	b.n	800ee48 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ed8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d102      	bne.n	800ed9a <f_getfree+0x96>
 800ed94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed96:	3301      	adds	r3, #1
 800ed98:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ed9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d3db      	bcc.n	800ed62 <f_getfree+0x5e>
 800edaa:	e04d      	b.n	800ee48 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800edac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edae:	695b      	ldr	r3, [r3, #20]
 800edb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800edb8:	2300      	movs	r3, #0
 800edba:	637b      	str	r3, [r7, #52]	@ 0x34
 800edbc:	2300      	movs	r3, #0
 800edbe:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800edc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d113      	bne.n	800edee <f_getfree+0xea>
							res = move_window(fs, sect++);
 800edc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	63ba      	str	r2, [r7, #56]	@ 0x38
 800edce:	4619      	mov	r1, r3
 800edd0:	f7fe fc84 	bl	800d6dc <move_window>
 800edd4:	4603      	mov	r3, r0
 800edd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800edda:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d131      	bne.n	800ee46 <f_getfree+0x142>
							p = fs->win;
 800ede2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede4:	3330      	adds	r3, #48	@ 0x30
 800ede6:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ede8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800edec:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800edee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	2b02      	cmp	r3, #2
 800edf4:	d10f      	bne.n	800ee16 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800edf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800edf8:	f7fe f9fc 	bl	800d1f4 <ld_word>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d102      	bne.n	800ee08 <f_getfree+0x104>
 800ee02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee04:	3301      	adds	r3, #1
 800ee06:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ee08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0a:	3302      	adds	r3, #2
 800ee0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee10:	3b02      	subs	r3, #2
 800ee12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee14:	e010      	b.n	800ee38 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ee16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee18:	f7fe fa04 	bl	800d224 <ld_dword>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d102      	bne.n	800ee2c <f_getfree+0x128>
 800ee26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee28:	3301      	adds	r3, #1
 800ee2a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ee2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2e:	3304      	adds	r3, #4
 800ee30:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee34:	3b04      	subs	r3, #4
 800ee36:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ee38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee3a:	3b01      	subs	r3, #1
 800ee3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d1bd      	bne.n	800edc0 <f_getfree+0xbc>
 800ee44:	e000      	b.n	800ee48 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ee46:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee4c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ee4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee52:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ee54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee56:	791a      	ldrb	r2, [r3, #4]
 800ee58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee5a:	f042 0201 	orr.w	r2, r2, #1
 800ee5e:	b2d2      	uxtb	r2, r2
 800ee60:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ee62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3748      	adds	r7, #72	@ 0x48
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
	...

0800ee70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b087      	sub	sp, #28
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ee86:	4b1f      	ldr	r3, [pc, #124]	@ (800ef04 <FATFS_LinkDriverEx+0x94>)
 800ee88:	7a5b      	ldrb	r3, [r3, #9]
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d131      	bne.n	800eef4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ee90:	4b1c      	ldr	r3, [pc, #112]	@ (800ef04 <FATFS_LinkDriverEx+0x94>)
 800ee92:	7a5b      	ldrb	r3, [r3, #9]
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	461a      	mov	r2, r3
 800ee98:	4b1a      	ldr	r3, [pc, #104]	@ (800ef04 <FATFS_LinkDriverEx+0x94>)
 800ee9a:	2100      	movs	r1, #0
 800ee9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ee9e:	4b19      	ldr	r3, [pc, #100]	@ (800ef04 <FATFS_LinkDriverEx+0x94>)
 800eea0:	7a5b      	ldrb	r3, [r3, #9]
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	4a17      	ldr	r2, [pc, #92]	@ (800ef04 <FATFS_LinkDriverEx+0x94>)
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	4413      	add	r3, r2
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eeae:	4b15      	ldr	r3, [pc, #84]	@ (800ef04 <FATFS_LinkDriverEx+0x94>)
 800eeb0:	7a5b      	ldrb	r3, [r3, #9]
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	4b13      	ldr	r3, [pc, #76]	@ (800ef04 <FATFS_LinkDriverEx+0x94>)
 800eeb8:	4413      	add	r3, r2
 800eeba:	79fa      	ldrb	r2, [r7, #7]
 800eebc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eebe:	4b11      	ldr	r3, [pc, #68]	@ (800ef04 <FATFS_LinkDriverEx+0x94>)
 800eec0:	7a5b      	ldrb	r3, [r3, #9]
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	1c5a      	adds	r2, r3, #1
 800eec6:	b2d1      	uxtb	r1, r2
 800eec8:	4a0e      	ldr	r2, [pc, #56]	@ (800ef04 <FATFS_LinkDriverEx+0x94>)
 800eeca:	7251      	strb	r1, [r2, #9]
 800eecc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eece:	7dbb      	ldrb	r3, [r7, #22]
 800eed0:	3330      	adds	r3, #48	@ 0x30
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	3301      	adds	r3, #1
 800eedc:	223a      	movs	r2, #58	@ 0x3a
 800eede:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	3302      	adds	r3, #2
 800eee4:	222f      	movs	r2, #47	@ 0x2f
 800eee6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	3303      	adds	r3, #3
 800eeec:	2200      	movs	r2, #0
 800eeee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eef0:	2300      	movs	r3, #0
 800eef2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	371c      	adds	r7, #28
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	2000157c 	.word	0x2000157c

0800ef08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ef12:	2200      	movs	r2, #0
 800ef14:	6839      	ldr	r1, [r7, #0]
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7ff ffaa 	bl	800ee70 <FATFS_LinkDriverEx>
 800ef1c:	4603      	mov	r3, r0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3708      	adds	r7, #8
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <atoi>:
 800ef26:	220a      	movs	r2, #10
 800ef28:	2100      	movs	r1, #0
 800ef2a:	f000 bfa7 	b.w	800fe7c <strtol>
	...

0800ef30 <malloc>:
 800ef30:	4b02      	ldr	r3, [pc, #8]	@ (800ef3c <malloc+0xc>)
 800ef32:	4601      	mov	r1, r0
 800ef34:	6818      	ldr	r0, [r3, #0]
 800ef36:	f000 b82d 	b.w	800ef94 <_malloc_r>
 800ef3a:	bf00      	nop
 800ef3c:	200001a4 	.word	0x200001a4

0800ef40 <free>:
 800ef40:	4b02      	ldr	r3, [pc, #8]	@ (800ef4c <free+0xc>)
 800ef42:	4601      	mov	r1, r0
 800ef44:	6818      	ldr	r0, [r3, #0]
 800ef46:	f003 b80f 	b.w	8011f68 <_free_r>
 800ef4a:	bf00      	nop
 800ef4c:	200001a4 	.word	0x200001a4

0800ef50 <sbrk_aligned>:
 800ef50:	b570      	push	{r4, r5, r6, lr}
 800ef52:	4e0f      	ldr	r6, [pc, #60]	@ (800ef90 <sbrk_aligned+0x40>)
 800ef54:	460c      	mov	r4, r1
 800ef56:	6831      	ldr	r1, [r6, #0]
 800ef58:	4605      	mov	r5, r0
 800ef5a:	b911      	cbnz	r1, 800ef62 <sbrk_aligned+0x12>
 800ef5c:	f002 f924 	bl	80111a8 <_sbrk_r>
 800ef60:	6030      	str	r0, [r6, #0]
 800ef62:	4621      	mov	r1, r4
 800ef64:	4628      	mov	r0, r5
 800ef66:	f002 f91f 	bl	80111a8 <_sbrk_r>
 800ef6a:	1c43      	adds	r3, r0, #1
 800ef6c:	d103      	bne.n	800ef76 <sbrk_aligned+0x26>
 800ef6e:	f04f 34ff 	mov.w	r4, #4294967295
 800ef72:	4620      	mov	r0, r4
 800ef74:	bd70      	pop	{r4, r5, r6, pc}
 800ef76:	1cc4      	adds	r4, r0, #3
 800ef78:	f024 0403 	bic.w	r4, r4, #3
 800ef7c:	42a0      	cmp	r0, r4
 800ef7e:	d0f8      	beq.n	800ef72 <sbrk_aligned+0x22>
 800ef80:	1a21      	subs	r1, r4, r0
 800ef82:	4628      	mov	r0, r5
 800ef84:	f002 f910 	bl	80111a8 <_sbrk_r>
 800ef88:	3001      	adds	r0, #1
 800ef8a:	d1f2      	bne.n	800ef72 <sbrk_aligned+0x22>
 800ef8c:	e7ef      	b.n	800ef6e <sbrk_aligned+0x1e>
 800ef8e:	bf00      	nop
 800ef90:	20001588 	.word	0x20001588

0800ef94 <_malloc_r>:
 800ef94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef98:	1ccd      	adds	r5, r1, #3
 800ef9a:	f025 0503 	bic.w	r5, r5, #3
 800ef9e:	3508      	adds	r5, #8
 800efa0:	2d0c      	cmp	r5, #12
 800efa2:	bf38      	it	cc
 800efa4:	250c      	movcc	r5, #12
 800efa6:	2d00      	cmp	r5, #0
 800efa8:	4606      	mov	r6, r0
 800efaa:	db01      	blt.n	800efb0 <_malloc_r+0x1c>
 800efac:	42a9      	cmp	r1, r5
 800efae:	d904      	bls.n	800efba <_malloc_r+0x26>
 800efb0:	230c      	movs	r3, #12
 800efb2:	6033      	str	r3, [r6, #0]
 800efb4:	2000      	movs	r0, #0
 800efb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f090 <_malloc_r+0xfc>
 800efbe:	f000 f869 	bl	800f094 <__malloc_lock>
 800efc2:	f8d8 3000 	ldr.w	r3, [r8]
 800efc6:	461c      	mov	r4, r3
 800efc8:	bb44      	cbnz	r4, 800f01c <_malloc_r+0x88>
 800efca:	4629      	mov	r1, r5
 800efcc:	4630      	mov	r0, r6
 800efce:	f7ff ffbf 	bl	800ef50 <sbrk_aligned>
 800efd2:	1c43      	adds	r3, r0, #1
 800efd4:	4604      	mov	r4, r0
 800efd6:	d158      	bne.n	800f08a <_malloc_r+0xf6>
 800efd8:	f8d8 4000 	ldr.w	r4, [r8]
 800efdc:	4627      	mov	r7, r4
 800efde:	2f00      	cmp	r7, #0
 800efe0:	d143      	bne.n	800f06a <_malloc_r+0xd6>
 800efe2:	2c00      	cmp	r4, #0
 800efe4:	d04b      	beq.n	800f07e <_malloc_r+0xea>
 800efe6:	6823      	ldr	r3, [r4, #0]
 800efe8:	4639      	mov	r1, r7
 800efea:	4630      	mov	r0, r6
 800efec:	eb04 0903 	add.w	r9, r4, r3
 800eff0:	f002 f8da 	bl	80111a8 <_sbrk_r>
 800eff4:	4581      	cmp	r9, r0
 800eff6:	d142      	bne.n	800f07e <_malloc_r+0xea>
 800eff8:	6821      	ldr	r1, [r4, #0]
 800effa:	1a6d      	subs	r5, r5, r1
 800effc:	4629      	mov	r1, r5
 800effe:	4630      	mov	r0, r6
 800f000:	f7ff ffa6 	bl	800ef50 <sbrk_aligned>
 800f004:	3001      	adds	r0, #1
 800f006:	d03a      	beq.n	800f07e <_malloc_r+0xea>
 800f008:	6823      	ldr	r3, [r4, #0]
 800f00a:	442b      	add	r3, r5
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	f8d8 3000 	ldr.w	r3, [r8]
 800f012:	685a      	ldr	r2, [r3, #4]
 800f014:	bb62      	cbnz	r2, 800f070 <_malloc_r+0xdc>
 800f016:	f8c8 7000 	str.w	r7, [r8]
 800f01a:	e00f      	b.n	800f03c <_malloc_r+0xa8>
 800f01c:	6822      	ldr	r2, [r4, #0]
 800f01e:	1b52      	subs	r2, r2, r5
 800f020:	d420      	bmi.n	800f064 <_malloc_r+0xd0>
 800f022:	2a0b      	cmp	r2, #11
 800f024:	d917      	bls.n	800f056 <_malloc_r+0xc2>
 800f026:	1961      	adds	r1, r4, r5
 800f028:	42a3      	cmp	r3, r4
 800f02a:	6025      	str	r5, [r4, #0]
 800f02c:	bf18      	it	ne
 800f02e:	6059      	strne	r1, [r3, #4]
 800f030:	6863      	ldr	r3, [r4, #4]
 800f032:	bf08      	it	eq
 800f034:	f8c8 1000 	streq.w	r1, [r8]
 800f038:	5162      	str	r2, [r4, r5]
 800f03a:	604b      	str	r3, [r1, #4]
 800f03c:	4630      	mov	r0, r6
 800f03e:	f000 f82f 	bl	800f0a0 <__malloc_unlock>
 800f042:	f104 000b 	add.w	r0, r4, #11
 800f046:	1d23      	adds	r3, r4, #4
 800f048:	f020 0007 	bic.w	r0, r0, #7
 800f04c:	1ac2      	subs	r2, r0, r3
 800f04e:	bf1c      	itt	ne
 800f050:	1a1b      	subne	r3, r3, r0
 800f052:	50a3      	strne	r3, [r4, r2]
 800f054:	e7af      	b.n	800efb6 <_malloc_r+0x22>
 800f056:	6862      	ldr	r2, [r4, #4]
 800f058:	42a3      	cmp	r3, r4
 800f05a:	bf0c      	ite	eq
 800f05c:	f8c8 2000 	streq.w	r2, [r8]
 800f060:	605a      	strne	r2, [r3, #4]
 800f062:	e7eb      	b.n	800f03c <_malloc_r+0xa8>
 800f064:	4623      	mov	r3, r4
 800f066:	6864      	ldr	r4, [r4, #4]
 800f068:	e7ae      	b.n	800efc8 <_malloc_r+0x34>
 800f06a:	463c      	mov	r4, r7
 800f06c:	687f      	ldr	r7, [r7, #4]
 800f06e:	e7b6      	b.n	800efde <_malloc_r+0x4a>
 800f070:	461a      	mov	r2, r3
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	42a3      	cmp	r3, r4
 800f076:	d1fb      	bne.n	800f070 <_malloc_r+0xdc>
 800f078:	2300      	movs	r3, #0
 800f07a:	6053      	str	r3, [r2, #4]
 800f07c:	e7de      	b.n	800f03c <_malloc_r+0xa8>
 800f07e:	230c      	movs	r3, #12
 800f080:	6033      	str	r3, [r6, #0]
 800f082:	4630      	mov	r0, r6
 800f084:	f000 f80c 	bl	800f0a0 <__malloc_unlock>
 800f088:	e794      	b.n	800efb4 <_malloc_r+0x20>
 800f08a:	6005      	str	r5, [r0, #0]
 800f08c:	e7d6      	b.n	800f03c <_malloc_r+0xa8>
 800f08e:	bf00      	nop
 800f090:	2000158c 	.word	0x2000158c

0800f094 <__malloc_lock>:
 800f094:	4801      	ldr	r0, [pc, #4]	@ (800f09c <__malloc_lock+0x8>)
 800f096:	f002 b8d4 	b.w	8011242 <__retarget_lock_acquire_recursive>
 800f09a:	bf00      	nop
 800f09c:	200016d0 	.word	0x200016d0

0800f0a0 <__malloc_unlock>:
 800f0a0:	4801      	ldr	r0, [pc, #4]	@ (800f0a8 <__malloc_unlock+0x8>)
 800f0a2:	f002 b8cf 	b.w	8011244 <__retarget_lock_release_recursive>
 800f0a6:	bf00      	nop
 800f0a8:	200016d0 	.word	0x200016d0

0800f0ac <sulp>:
 800f0ac:	b570      	push	{r4, r5, r6, lr}
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	460d      	mov	r5, r1
 800f0b2:	ec45 4b10 	vmov	d0, r4, r5
 800f0b6:	4616      	mov	r6, r2
 800f0b8:	f003 fe60 	bl	8012d7c <__ulp>
 800f0bc:	ec51 0b10 	vmov	r0, r1, d0
 800f0c0:	b17e      	cbz	r6, 800f0e2 <sulp+0x36>
 800f0c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f0c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	dd09      	ble.n	800f0e2 <sulp+0x36>
 800f0ce:	051b      	lsls	r3, r3, #20
 800f0d0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f0d4:	2400      	movs	r4, #0
 800f0d6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f0da:	4622      	mov	r2, r4
 800f0dc:	462b      	mov	r3, r5
 800f0de:	f7f1 fab3 	bl	8000648 <__aeabi_dmul>
 800f0e2:	ec41 0b10 	vmov	d0, r0, r1
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}

0800f0e8 <_strtod_l>:
 800f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	b09f      	sub	sp, #124	@ 0x7c
 800f0ee:	460c      	mov	r4, r1
 800f0f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	921a      	str	r2, [sp, #104]	@ 0x68
 800f0f6:	9005      	str	r0, [sp, #20]
 800f0f8:	f04f 0a00 	mov.w	sl, #0
 800f0fc:	f04f 0b00 	mov.w	fp, #0
 800f100:	460a      	mov	r2, r1
 800f102:	9219      	str	r2, [sp, #100]	@ 0x64
 800f104:	7811      	ldrb	r1, [r2, #0]
 800f106:	292b      	cmp	r1, #43	@ 0x2b
 800f108:	d04a      	beq.n	800f1a0 <_strtod_l+0xb8>
 800f10a:	d838      	bhi.n	800f17e <_strtod_l+0x96>
 800f10c:	290d      	cmp	r1, #13
 800f10e:	d832      	bhi.n	800f176 <_strtod_l+0x8e>
 800f110:	2908      	cmp	r1, #8
 800f112:	d832      	bhi.n	800f17a <_strtod_l+0x92>
 800f114:	2900      	cmp	r1, #0
 800f116:	d03b      	beq.n	800f190 <_strtod_l+0xa8>
 800f118:	2200      	movs	r2, #0
 800f11a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f11c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f11e:	782a      	ldrb	r2, [r5, #0]
 800f120:	2a30      	cmp	r2, #48	@ 0x30
 800f122:	f040 80b3 	bne.w	800f28c <_strtod_l+0x1a4>
 800f126:	786a      	ldrb	r2, [r5, #1]
 800f128:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f12c:	2a58      	cmp	r2, #88	@ 0x58
 800f12e:	d16e      	bne.n	800f20e <_strtod_l+0x126>
 800f130:	9302      	str	r3, [sp, #8]
 800f132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f134:	9301      	str	r3, [sp, #4]
 800f136:	ab1a      	add	r3, sp, #104	@ 0x68
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	4a8e      	ldr	r2, [pc, #568]	@ (800f374 <_strtod_l+0x28c>)
 800f13c:	9805      	ldr	r0, [sp, #20]
 800f13e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f140:	a919      	add	r1, sp, #100	@ 0x64
 800f142:	f002 ffc3 	bl	80120cc <__gethex>
 800f146:	f010 060f 	ands.w	r6, r0, #15
 800f14a:	4604      	mov	r4, r0
 800f14c:	d005      	beq.n	800f15a <_strtod_l+0x72>
 800f14e:	2e06      	cmp	r6, #6
 800f150:	d128      	bne.n	800f1a4 <_strtod_l+0xbc>
 800f152:	3501      	adds	r5, #1
 800f154:	2300      	movs	r3, #0
 800f156:	9519      	str	r5, [sp, #100]	@ 0x64
 800f158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f15a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	f040 858e 	bne.w	800fc7e <_strtod_l+0xb96>
 800f162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f164:	b1cb      	cbz	r3, 800f19a <_strtod_l+0xb2>
 800f166:	4652      	mov	r2, sl
 800f168:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f16c:	ec43 2b10 	vmov	d0, r2, r3
 800f170:	b01f      	add	sp, #124	@ 0x7c
 800f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f176:	2920      	cmp	r1, #32
 800f178:	d1ce      	bne.n	800f118 <_strtod_l+0x30>
 800f17a:	3201      	adds	r2, #1
 800f17c:	e7c1      	b.n	800f102 <_strtod_l+0x1a>
 800f17e:	292d      	cmp	r1, #45	@ 0x2d
 800f180:	d1ca      	bne.n	800f118 <_strtod_l+0x30>
 800f182:	2101      	movs	r1, #1
 800f184:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f186:	1c51      	adds	r1, r2, #1
 800f188:	9119      	str	r1, [sp, #100]	@ 0x64
 800f18a:	7852      	ldrb	r2, [r2, #1]
 800f18c:	2a00      	cmp	r2, #0
 800f18e:	d1c5      	bne.n	800f11c <_strtod_l+0x34>
 800f190:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f192:	9419      	str	r4, [sp, #100]	@ 0x64
 800f194:	2b00      	cmp	r3, #0
 800f196:	f040 8570 	bne.w	800fc7a <_strtod_l+0xb92>
 800f19a:	4652      	mov	r2, sl
 800f19c:	465b      	mov	r3, fp
 800f19e:	e7e5      	b.n	800f16c <_strtod_l+0x84>
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	e7ef      	b.n	800f184 <_strtod_l+0x9c>
 800f1a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f1a6:	b13a      	cbz	r2, 800f1b8 <_strtod_l+0xd0>
 800f1a8:	2135      	movs	r1, #53	@ 0x35
 800f1aa:	a81c      	add	r0, sp, #112	@ 0x70
 800f1ac:	f003 fee0 	bl	8012f70 <__copybits>
 800f1b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f1b2:	9805      	ldr	r0, [sp, #20]
 800f1b4:	f003 faae 	bl	8012714 <_Bfree>
 800f1b8:	3e01      	subs	r6, #1
 800f1ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f1bc:	2e04      	cmp	r6, #4
 800f1be:	d806      	bhi.n	800f1ce <_strtod_l+0xe6>
 800f1c0:	e8df f006 	tbb	[pc, r6]
 800f1c4:	201d0314 	.word	0x201d0314
 800f1c8:	14          	.byte	0x14
 800f1c9:	00          	.byte	0x00
 800f1ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f1ce:	05e1      	lsls	r1, r4, #23
 800f1d0:	bf48      	it	mi
 800f1d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f1d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1da:	0d1b      	lsrs	r3, r3, #20
 800f1dc:	051b      	lsls	r3, r3, #20
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1bb      	bne.n	800f15a <_strtod_l+0x72>
 800f1e2:	f002 f803 	bl	80111ec <__errno>
 800f1e6:	2322      	movs	r3, #34	@ 0x22
 800f1e8:	6003      	str	r3, [r0, #0]
 800f1ea:	e7b6      	b.n	800f15a <_strtod_l+0x72>
 800f1ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f1f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f1f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f1f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f1fc:	e7e7      	b.n	800f1ce <_strtod_l+0xe6>
 800f1fe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f37c <_strtod_l+0x294>
 800f202:	e7e4      	b.n	800f1ce <_strtod_l+0xe6>
 800f204:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f208:	f04f 3aff 	mov.w	sl, #4294967295
 800f20c:	e7df      	b.n	800f1ce <_strtod_l+0xe6>
 800f20e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f210:	1c5a      	adds	r2, r3, #1
 800f212:	9219      	str	r2, [sp, #100]	@ 0x64
 800f214:	785b      	ldrb	r3, [r3, #1]
 800f216:	2b30      	cmp	r3, #48	@ 0x30
 800f218:	d0f9      	beq.n	800f20e <_strtod_l+0x126>
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d09d      	beq.n	800f15a <_strtod_l+0x72>
 800f21e:	2301      	movs	r3, #1
 800f220:	9309      	str	r3, [sp, #36]	@ 0x24
 800f222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f224:	930c      	str	r3, [sp, #48]	@ 0x30
 800f226:	2300      	movs	r3, #0
 800f228:	9308      	str	r3, [sp, #32]
 800f22a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f22c:	461f      	mov	r7, r3
 800f22e:	220a      	movs	r2, #10
 800f230:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f232:	7805      	ldrb	r5, [r0, #0]
 800f234:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f238:	b2d9      	uxtb	r1, r3
 800f23a:	2909      	cmp	r1, #9
 800f23c:	d928      	bls.n	800f290 <_strtod_l+0x1a8>
 800f23e:	494e      	ldr	r1, [pc, #312]	@ (800f378 <_strtod_l+0x290>)
 800f240:	2201      	movs	r2, #1
 800f242:	f001 fef4 	bl	801102e <strncmp>
 800f246:	2800      	cmp	r0, #0
 800f248:	d032      	beq.n	800f2b0 <_strtod_l+0x1c8>
 800f24a:	2000      	movs	r0, #0
 800f24c:	462a      	mov	r2, r5
 800f24e:	4681      	mov	r9, r0
 800f250:	463d      	mov	r5, r7
 800f252:	4603      	mov	r3, r0
 800f254:	2a65      	cmp	r2, #101	@ 0x65
 800f256:	d001      	beq.n	800f25c <_strtod_l+0x174>
 800f258:	2a45      	cmp	r2, #69	@ 0x45
 800f25a:	d114      	bne.n	800f286 <_strtod_l+0x19e>
 800f25c:	b91d      	cbnz	r5, 800f266 <_strtod_l+0x17e>
 800f25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f260:	4302      	orrs	r2, r0
 800f262:	d095      	beq.n	800f190 <_strtod_l+0xa8>
 800f264:	2500      	movs	r5, #0
 800f266:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f268:	1c62      	adds	r2, r4, #1
 800f26a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f26c:	7862      	ldrb	r2, [r4, #1]
 800f26e:	2a2b      	cmp	r2, #43	@ 0x2b
 800f270:	d077      	beq.n	800f362 <_strtod_l+0x27a>
 800f272:	2a2d      	cmp	r2, #45	@ 0x2d
 800f274:	d07b      	beq.n	800f36e <_strtod_l+0x286>
 800f276:	f04f 0c00 	mov.w	ip, #0
 800f27a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f27e:	2909      	cmp	r1, #9
 800f280:	f240 8082 	bls.w	800f388 <_strtod_l+0x2a0>
 800f284:	9419      	str	r4, [sp, #100]	@ 0x64
 800f286:	f04f 0800 	mov.w	r8, #0
 800f28a:	e0a2      	b.n	800f3d2 <_strtod_l+0x2ea>
 800f28c:	2300      	movs	r3, #0
 800f28e:	e7c7      	b.n	800f220 <_strtod_l+0x138>
 800f290:	2f08      	cmp	r7, #8
 800f292:	bfd5      	itete	le
 800f294:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f296:	9908      	ldrgt	r1, [sp, #32]
 800f298:	fb02 3301 	mlale	r3, r2, r1, r3
 800f29c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f2a0:	f100 0001 	add.w	r0, r0, #1
 800f2a4:	bfd4      	ite	le
 800f2a6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f2a8:	9308      	strgt	r3, [sp, #32]
 800f2aa:	3701      	adds	r7, #1
 800f2ac:	9019      	str	r0, [sp, #100]	@ 0x64
 800f2ae:	e7bf      	b.n	800f230 <_strtod_l+0x148>
 800f2b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2b2:	1c5a      	adds	r2, r3, #1
 800f2b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2b6:	785a      	ldrb	r2, [r3, #1]
 800f2b8:	b37f      	cbz	r7, 800f31a <_strtod_l+0x232>
 800f2ba:	4681      	mov	r9, r0
 800f2bc:	463d      	mov	r5, r7
 800f2be:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f2c2:	2b09      	cmp	r3, #9
 800f2c4:	d912      	bls.n	800f2ec <_strtod_l+0x204>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e7c4      	b.n	800f254 <_strtod_l+0x16c>
 800f2ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2cc:	1c5a      	adds	r2, r3, #1
 800f2ce:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2d0:	785a      	ldrb	r2, [r3, #1]
 800f2d2:	3001      	adds	r0, #1
 800f2d4:	2a30      	cmp	r2, #48	@ 0x30
 800f2d6:	d0f8      	beq.n	800f2ca <_strtod_l+0x1e2>
 800f2d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f2dc:	2b08      	cmp	r3, #8
 800f2de:	f200 84d3 	bhi.w	800fc88 <_strtod_l+0xba0>
 800f2e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f2e6:	4681      	mov	r9, r0
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	4605      	mov	r5, r0
 800f2ec:	3a30      	subs	r2, #48	@ 0x30
 800f2ee:	f100 0301 	add.w	r3, r0, #1
 800f2f2:	d02a      	beq.n	800f34a <_strtod_l+0x262>
 800f2f4:	4499      	add	r9, r3
 800f2f6:	eb00 0c05 	add.w	ip, r0, r5
 800f2fa:	462b      	mov	r3, r5
 800f2fc:	210a      	movs	r1, #10
 800f2fe:	4563      	cmp	r3, ip
 800f300:	d10d      	bne.n	800f31e <_strtod_l+0x236>
 800f302:	1c69      	adds	r1, r5, #1
 800f304:	4401      	add	r1, r0
 800f306:	4428      	add	r0, r5
 800f308:	2808      	cmp	r0, #8
 800f30a:	dc16      	bgt.n	800f33a <_strtod_l+0x252>
 800f30c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f30e:	230a      	movs	r3, #10
 800f310:	fb03 2300 	mla	r3, r3, r0, r2
 800f314:	930a      	str	r3, [sp, #40]	@ 0x28
 800f316:	2300      	movs	r3, #0
 800f318:	e018      	b.n	800f34c <_strtod_l+0x264>
 800f31a:	4638      	mov	r0, r7
 800f31c:	e7da      	b.n	800f2d4 <_strtod_l+0x1ec>
 800f31e:	2b08      	cmp	r3, #8
 800f320:	f103 0301 	add.w	r3, r3, #1
 800f324:	dc03      	bgt.n	800f32e <_strtod_l+0x246>
 800f326:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f328:	434e      	muls	r6, r1
 800f32a:	960a      	str	r6, [sp, #40]	@ 0x28
 800f32c:	e7e7      	b.n	800f2fe <_strtod_l+0x216>
 800f32e:	2b10      	cmp	r3, #16
 800f330:	bfde      	ittt	le
 800f332:	9e08      	ldrle	r6, [sp, #32]
 800f334:	434e      	mulle	r6, r1
 800f336:	9608      	strle	r6, [sp, #32]
 800f338:	e7e1      	b.n	800f2fe <_strtod_l+0x216>
 800f33a:	280f      	cmp	r0, #15
 800f33c:	dceb      	bgt.n	800f316 <_strtod_l+0x22e>
 800f33e:	9808      	ldr	r0, [sp, #32]
 800f340:	230a      	movs	r3, #10
 800f342:	fb03 2300 	mla	r3, r3, r0, r2
 800f346:	9308      	str	r3, [sp, #32]
 800f348:	e7e5      	b.n	800f316 <_strtod_l+0x22e>
 800f34a:	4629      	mov	r1, r5
 800f34c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f34e:	1c50      	adds	r0, r2, #1
 800f350:	9019      	str	r0, [sp, #100]	@ 0x64
 800f352:	7852      	ldrb	r2, [r2, #1]
 800f354:	4618      	mov	r0, r3
 800f356:	460d      	mov	r5, r1
 800f358:	e7b1      	b.n	800f2be <_strtod_l+0x1d6>
 800f35a:	f04f 0900 	mov.w	r9, #0
 800f35e:	2301      	movs	r3, #1
 800f360:	e77d      	b.n	800f25e <_strtod_l+0x176>
 800f362:	f04f 0c00 	mov.w	ip, #0
 800f366:	1ca2      	adds	r2, r4, #2
 800f368:	9219      	str	r2, [sp, #100]	@ 0x64
 800f36a:	78a2      	ldrb	r2, [r4, #2]
 800f36c:	e785      	b.n	800f27a <_strtod_l+0x192>
 800f36e:	f04f 0c01 	mov.w	ip, #1
 800f372:	e7f8      	b.n	800f366 <_strtod_l+0x27e>
 800f374:	08013c10 	.word	0x08013c10
 800f378:	08013bf8 	.word	0x08013bf8
 800f37c:	7ff00000 	.word	0x7ff00000
 800f380:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f382:	1c51      	adds	r1, r2, #1
 800f384:	9119      	str	r1, [sp, #100]	@ 0x64
 800f386:	7852      	ldrb	r2, [r2, #1]
 800f388:	2a30      	cmp	r2, #48	@ 0x30
 800f38a:	d0f9      	beq.n	800f380 <_strtod_l+0x298>
 800f38c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f390:	2908      	cmp	r1, #8
 800f392:	f63f af78 	bhi.w	800f286 <_strtod_l+0x19e>
 800f396:	3a30      	subs	r2, #48	@ 0x30
 800f398:	920e      	str	r2, [sp, #56]	@ 0x38
 800f39a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f39c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f39e:	f04f 080a 	mov.w	r8, #10
 800f3a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f3a4:	1c56      	adds	r6, r2, #1
 800f3a6:	9619      	str	r6, [sp, #100]	@ 0x64
 800f3a8:	7852      	ldrb	r2, [r2, #1]
 800f3aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f3ae:	f1be 0f09 	cmp.w	lr, #9
 800f3b2:	d939      	bls.n	800f428 <_strtod_l+0x340>
 800f3b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f3b6:	1a76      	subs	r6, r6, r1
 800f3b8:	2e08      	cmp	r6, #8
 800f3ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f3be:	dc03      	bgt.n	800f3c8 <_strtod_l+0x2e0>
 800f3c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f3c2:	4588      	cmp	r8, r1
 800f3c4:	bfa8      	it	ge
 800f3c6:	4688      	movge	r8, r1
 800f3c8:	f1bc 0f00 	cmp.w	ip, #0
 800f3cc:	d001      	beq.n	800f3d2 <_strtod_l+0x2ea>
 800f3ce:	f1c8 0800 	rsb	r8, r8, #0
 800f3d2:	2d00      	cmp	r5, #0
 800f3d4:	d14e      	bne.n	800f474 <_strtod_l+0x38c>
 800f3d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3d8:	4308      	orrs	r0, r1
 800f3da:	f47f aebe 	bne.w	800f15a <_strtod_l+0x72>
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	f47f aed6 	bne.w	800f190 <_strtod_l+0xa8>
 800f3e4:	2a69      	cmp	r2, #105	@ 0x69
 800f3e6:	d028      	beq.n	800f43a <_strtod_l+0x352>
 800f3e8:	dc25      	bgt.n	800f436 <_strtod_l+0x34e>
 800f3ea:	2a49      	cmp	r2, #73	@ 0x49
 800f3ec:	d025      	beq.n	800f43a <_strtod_l+0x352>
 800f3ee:	2a4e      	cmp	r2, #78	@ 0x4e
 800f3f0:	f47f aece 	bne.w	800f190 <_strtod_l+0xa8>
 800f3f4:	499b      	ldr	r1, [pc, #620]	@ (800f664 <_strtod_l+0x57c>)
 800f3f6:	a819      	add	r0, sp, #100	@ 0x64
 800f3f8:	f003 f88a 	bl	8012510 <__match>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	f43f aec7 	beq.w	800f190 <_strtod_l+0xa8>
 800f402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	2b28      	cmp	r3, #40	@ 0x28
 800f408:	d12e      	bne.n	800f468 <_strtod_l+0x380>
 800f40a:	4997      	ldr	r1, [pc, #604]	@ (800f668 <_strtod_l+0x580>)
 800f40c:	aa1c      	add	r2, sp, #112	@ 0x70
 800f40e:	a819      	add	r0, sp, #100	@ 0x64
 800f410:	f003 f892 	bl	8012538 <__hexnan>
 800f414:	2805      	cmp	r0, #5
 800f416:	d127      	bne.n	800f468 <_strtod_l+0x380>
 800f418:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f41a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f41e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f422:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f426:	e698      	b.n	800f15a <_strtod_l+0x72>
 800f428:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f42a:	fb08 2101 	mla	r1, r8, r1, r2
 800f42e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f432:	920e      	str	r2, [sp, #56]	@ 0x38
 800f434:	e7b5      	b.n	800f3a2 <_strtod_l+0x2ba>
 800f436:	2a6e      	cmp	r2, #110	@ 0x6e
 800f438:	e7da      	b.n	800f3f0 <_strtod_l+0x308>
 800f43a:	498c      	ldr	r1, [pc, #560]	@ (800f66c <_strtod_l+0x584>)
 800f43c:	a819      	add	r0, sp, #100	@ 0x64
 800f43e:	f003 f867 	bl	8012510 <__match>
 800f442:	2800      	cmp	r0, #0
 800f444:	f43f aea4 	beq.w	800f190 <_strtod_l+0xa8>
 800f448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f44a:	4989      	ldr	r1, [pc, #548]	@ (800f670 <_strtod_l+0x588>)
 800f44c:	3b01      	subs	r3, #1
 800f44e:	a819      	add	r0, sp, #100	@ 0x64
 800f450:	9319      	str	r3, [sp, #100]	@ 0x64
 800f452:	f003 f85d 	bl	8012510 <__match>
 800f456:	b910      	cbnz	r0, 800f45e <_strtod_l+0x376>
 800f458:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f45a:	3301      	adds	r3, #1
 800f45c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f45e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f680 <_strtod_l+0x598>
 800f462:	f04f 0a00 	mov.w	sl, #0
 800f466:	e678      	b.n	800f15a <_strtod_l+0x72>
 800f468:	4882      	ldr	r0, [pc, #520]	@ (800f674 <_strtod_l+0x58c>)
 800f46a:	f001 ff05 	bl	8011278 <nan>
 800f46e:	ec5b ab10 	vmov	sl, fp, d0
 800f472:	e672      	b.n	800f15a <_strtod_l+0x72>
 800f474:	eba8 0309 	sub.w	r3, r8, r9
 800f478:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f47a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f47c:	2f00      	cmp	r7, #0
 800f47e:	bf08      	it	eq
 800f480:	462f      	moveq	r7, r5
 800f482:	2d10      	cmp	r5, #16
 800f484:	462c      	mov	r4, r5
 800f486:	bfa8      	it	ge
 800f488:	2410      	movge	r4, #16
 800f48a:	f7f1 f863 	bl	8000554 <__aeabi_ui2d>
 800f48e:	2d09      	cmp	r5, #9
 800f490:	4682      	mov	sl, r0
 800f492:	468b      	mov	fp, r1
 800f494:	dc13      	bgt.n	800f4be <_strtod_l+0x3d6>
 800f496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f43f ae5e 	beq.w	800f15a <_strtod_l+0x72>
 800f49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4a0:	dd78      	ble.n	800f594 <_strtod_l+0x4ac>
 800f4a2:	2b16      	cmp	r3, #22
 800f4a4:	dc5f      	bgt.n	800f566 <_strtod_l+0x47e>
 800f4a6:	4974      	ldr	r1, [pc, #464]	@ (800f678 <_strtod_l+0x590>)
 800f4a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4b0:	4652      	mov	r2, sl
 800f4b2:	465b      	mov	r3, fp
 800f4b4:	f7f1 f8c8 	bl	8000648 <__aeabi_dmul>
 800f4b8:	4682      	mov	sl, r0
 800f4ba:	468b      	mov	fp, r1
 800f4bc:	e64d      	b.n	800f15a <_strtod_l+0x72>
 800f4be:	4b6e      	ldr	r3, [pc, #440]	@ (800f678 <_strtod_l+0x590>)
 800f4c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f4c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f4c8:	f7f1 f8be 	bl	8000648 <__aeabi_dmul>
 800f4cc:	4682      	mov	sl, r0
 800f4ce:	9808      	ldr	r0, [sp, #32]
 800f4d0:	468b      	mov	fp, r1
 800f4d2:	f7f1 f83f 	bl	8000554 <__aeabi_ui2d>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	460b      	mov	r3, r1
 800f4da:	4650      	mov	r0, sl
 800f4dc:	4659      	mov	r1, fp
 800f4de:	f7f0 fefd 	bl	80002dc <__adddf3>
 800f4e2:	2d0f      	cmp	r5, #15
 800f4e4:	4682      	mov	sl, r0
 800f4e6:	468b      	mov	fp, r1
 800f4e8:	ddd5      	ble.n	800f496 <_strtod_l+0x3ae>
 800f4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4ec:	1b2c      	subs	r4, r5, r4
 800f4ee:	441c      	add	r4, r3
 800f4f0:	2c00      	cmp	r4, #0
 800f4f2:	f340 8096 	ble.w	800f622 <_strtod_l+0x53a>
 800f4f6:	f014 030f 	ands.w	r3, r4, #15
 800f4fa:	d00a      	beq.n	800f512 <_strtod_l+0x42a>
 800f4fc:	495e      	ldr	r1, [pc, #376]	@ (800f678 <_strtod_l+0x590>)
 800f4fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f502:	4652      	mov	r2, sl
 800f504:	465b      	mov	r3, fp
 800f506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f50a:	f7f1 f89d 	bl	8000648 <__aeabi_dmul>
 800f50e:	4682      	mov	sl, r0
 800f510:	468b      	mov	fp, r1
 800f512:	f034 040f 	bics.w	r4, r4, #15
 800f516:	d073      	beq.n	800f600 <_strtod_l+0x518>
 800f518:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f51c:	dd48      	ble.n	800f5b0 <_strtod_l+0x4c8>
 800f51e:	2400      	movs	r4, #0
 800f520:	46a0      	mov	r8, r4
 800f522:	940a      	str	r4, [sp, #40]	@ 0x28
 800f524:	46a1      	mov	r9, r4
 800f526:	9a05      	ldr	r2, [sp, #20]
 800f528:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f680 <_strtod_l+0x598>
 800f52c:	2322      	movs	r3, #34	@ 0x22
 800f52e:	6013      	str	r3, [r2, #0]
 800f530:	f04f 0a00 	mov.w	sl, #0
 800f534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f536:	2b00      	cmp	r3, #0
 800f538:	f43f ae0f 	beq.w	800f15a <_strtod_l+0x72>
 800f53c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f53e:	9805      	ldr	r0, [sp, #20]
 800f540:	f003 f8e8 	bl	8012714 <_Bfree>
 800f544:	9805      	ldr	r0, [sp, #20]
 800f546:	4649      	mov	r1, r9
 800f548:	f003 f8e4 	bl	8012714 <_Bfree>
 800f54c:	9805      	ldr	r0, [sp, #20]
 800f54e:	4641      	mov	r1, r8
 800f550:	f003 f8e0 	bl	8012714 <_Bfree>
 800f554:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f556:	9805      	ldr	r0, [sp, #20]
 800f558:	f003 f8dc 	bl	8012714 <_Bfree>
 800f55c:	9805      	ldr	r0, [sp, #20]
 800f55e:	4621      	mov	r1, r4
 800f560:	f003 f8d8 	bl	8012714 <_Bfree>
 800f564:	e5f9      	b.n	800f15a <_strtod_l+0x72>
 800f566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f568:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f56c:	4293      	cmp	r3, r2
 800f56e:	dbbc      	blt.n	800f4ea <_strtod_l+0x402>
 800f570:	4c41      	ldr	r4, [pc, #260]	@ (800f678 <_strtod_l+0x590>)
 800f572:	f1c5 050f 	rsb	r5, r5, #15
 800f576:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f57a:	4652      	mov	r2, sl
 800f57c:	465b      	mov	r3, fp
 800f57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f582:	f7f1 f861 	bl	8000648 <__aeabi_dmul>
 800f586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f588:	1b5d      	subs	r5, r3, r5
 800f58a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f58e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f592:	e78f      	b.n	800f4b4 <_strtod_l+0x3cc>
 800f594:	3316      	adds	r3, #22
 800f596:	dba8      	blt.n	800f4ea <_strtod_l+0x402>
 800f598:	4b37      	ldr	r3, [pc, #220]	@ (800f678 <_strtod_l+0x590>)
 800f59a:	eba9 0808 	sub.w	r8, r9, r8
 800f59e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f5a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f5a6:	4650      	mov	r0, sl
 800f5a8:	4659      	mov	r1, fp
 800f5aa:	f7f1 f977 	bl	800089c <__aeabi_ddiv>
 800f5ae:	e783      	b.n	800f4b8 <_strtod_l+0x3d0>
 800f5b0:	4b32      	ldr	r3, [pc, #200]	@ (800f67c <_strtod_l+0x594>)
 800f5b2:	9308      	str	r3, [sp, #32]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	1124      	asrs	r4, r4, #4
 800f5b8:	4650      	mov	r0, sl
 800f5ba:	4659      	mov	r1, fp
 800f5bc:	461e      	mov	r6, r3
 800f5be:	2c01      	cmp	r4, #1
 800f5c0:	dc21      	bgt.n	800f606 <_strtod_l+0x51e>
 800f5c2:	b10b      	cbz	r3, 800f5c8 <_strtod_l+0x4e0>
 800f5c4:	4682      	mov	sl, r0
 800f5c6:	468b      	mov	fp, r1
 800f5c8:	492c      	ldr	r1, [pc, #176]	@ (800f67c <_strtod_l+0x594>)
 800f5ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f5ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f5d2:	4652      	mov	r2, sl
 800f5d4:	465b      	mov	r3, fp
 800f5d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5da:	f7f1 f835 	bl	8000648 <__aeabi_dmul>
 800f5de:	4b28      	ldr	r3, [pc, #160]	@ (800f680 <_strtod_l+0x598>)
 800f5e0:	460a      	mov	r2, r1
 800f5e2:	400b      	ands	r3, r1
 800f5e4:	4927      	ldr	r1, [pc, #156]	@ (800f684 <_strtod_l+0x59c>)
 800f5e6:	428b      	cmp	r3, r1
 800f5e8:	4682      	mov	sl, r0
 800f5ea:	d898      	bhi.n	800f51e <_strtod_l+0x436>
 800f5ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f5f0:	428b      	cmp	r3, r1
 800f5f2:	bf86      	itte	hi
 800f5f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f688 <_strtod_l+0x5a0>
 800f5f8:	f04f 3aff 	movhi.w	sl, #4294967295
 800f5fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f600:	2300      	movs	r3, #0
 800f602:	9308      	str	r3, [sp, #32]
 800f604:	e07a      	b.n	800f6fc <_strtod_l+0x614>
 800f606:	07e2      	lsls	r2, r4, #31
 800f608:	d505      	bpl.n	800f616 <_strtod_l+0x52e>
 800f60a:	9b08      	ldr	r3, [sp, #32]
 800f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f610:	f7f1 f81a 	bl	8000648 <__aeabi_dmul>
 800f614:	2301      	movs	r3, #1
 800f616:	9a08      	ldr	r2, [sp, #32]
 800f618:	3208      	adds	r2, #8
 800f61a:	3601      	adds	r6, #1
 800f61c:	1064      	asrs	r4, r4, #1
 800f61e:	9208      	str	r2, [sp, #32]
 800f620:	e7cd      	b.n	800f5be <_strtod_l+0x4d6>
 800f622:	d0ed      	beq.n	800f600 <_strtod_l+0x518>
 800f624:	4264      	negs	r4, r4
 800f626:	f014 020f 	ands.w	r2, r4, #15
 800f62a:	d00a      	beq.n	800f642 <_strtod_l+0x55a>
 800f62c:	4b12      	ldr	r3, [pc, #72]	@ (800f678 <_strtod_l+0x590>)
 800f62e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f632:	4650      	mov	r0, sl
 800f634:	4659      	mov	r1, fp
 800f636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63a:	f7f1 f92f 	bl	800089c <__aeabi_ddiv>
 800f63e:	4682      	mov	sl, r0
 800f640:	468b      	mov	fp, r1
 800f642:	1124      	asrs	r4, r4, #4
 800f644:	d0dc      	beq.n	800f600 <_strtod_l+0x518>
 800f646:	2c1f      	cmp	r4, #31
 800f648:	dd20      	ble.n	800f68c <_strtod_l+0x5a4>
 800f64a:	2400      	movs	r4, #0
 800f64c:	46a0      	mov	r8, r4
 800f64e:	940a      	str	r4, [sp, #40]	@ 0x28
 800f650:	46a1      	mov	r9, r4
 800f652:	9a05      	ldr	r2, [sp, #20]
 800f654:	2322      	movs	r3, #34	@ 0x22
 800f656:	f04f 0a00 	mov.w	sl, #0
 800f65a:	f04f 0b00 	mov.w	fp, #0
 800f65e:	6013      	str	r3, [r2, #0]
 800f660:	e768      	b.n	800f534 <_strtod_l+0x44c>
 800f662:	bf00      	nop
 800f664:	08013d5e 	.word	0x08013d5e
 800f668:	08013bfc 	.word	0x08013bfc
 800f66c:	08013d56 	.word	0x08013d56
 800f670:	08013e42 	.word	0x08013e42
 800f674:	08013e3e 	.word	0x08013e3e
 800f678:	08013fa8 	.word	0x08013fa8
 800f67c:	08013f80 	.word	0x08013f80
 800f680:	7ff00000 	.word	0x7ff00000
 800f684:	7ca00000 	.word	0x7ca00000
 800f688:	7fefffff 	.word	0x7fefffff
 800f68c:	f014 0310 	ands.w	r3, r4, #16
 800f690:	bf18      	it	ne
 800f692:	236a      	movne	r3, #106	@ 0x6a
 800f694:	4ea9      	ldr	r6, [pc, #676]	@ (800f93c <_strtod_l+0x854>)
 800f696:	9308      	str	r3, [sp, #32]
 800f698:	4650      	mov	r0, sl
 800f69a:	4659      	mov	r1, fp
 800f69c:	2300      	movs	r3, #0
 800f69e:	07e2      	lsls	r2, r4, #31
 800f6a0:	d504      	bpl.n	800f6ac <_strtod_l+0x5c4>
 800f6a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f6a6:	f7f0 ffcf 	bl	8000648 <__aeabi_dmul>
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	1064      	asrs	r4, r4, #1
 800f6ae:	f106 0608 	add.w	r6, r6, #8
 800f6b2:	d1f4      	bne.n	800f69e <_strtod_l+0x5b6>
 800f6b4:	b10b      	cbz	r3, 800f6ba <_strtod_l+0x5d2>
 800f6b6:	4682      	mov	sl, r0
 800f6b8:	468b      	mov	fp, r1
 800f6ba:	9b08      	ldr	r3, [sp, #32]
 800f6bc:	b1b3      	cbz	r3, 800f6ec <_strtod_l+0x604>
 800f6be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f6c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	4659      	mov	r1, fp
 800f6ca:	dd0f      	ble.n	800f6ec <_strtod_l+0x604>
 800f6cc:	2b1f      	cmp	r3, #31
 800f6ce:	dd55      	ble.n	800f77c <_strtod_l+0x694>
 800f6d0:	2b34      	cmp	r3, #52	@ 0x34
 800f6d2:	bfde      	ittt	le
 800f6d4:	f04f 33ff 	movle.w	r3, #4294967295
 800f6d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f6dc:	4093      	lslle	r3, r2
 800f6de:	f04f 0a00 	mov.w	sl, #0
 800f6e2:	bfcc      	ite	gt
 800f6e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f6e8:	ea03 0b01 	andle.w	fp, r3, r1
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	4650      	mov	r0, sl
 800f6f2:	4659      	mov	r1, fp
 800f6f4:	f7f1 fa10 	bl	8000b18 <__aeabi_dcmpeq>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d1a6      	bne.n	800f64a <_strtod_l+0x562>
 800f6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f702:	9805      	ldr	r0, [sp, #20]
 800f704:	462b      	mov	r3, r5
 800f706:	463a      	mov	r2, r7
 800f708:	f003 f86c 	bl	80127e4 <__s2b>
 800f70c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f70e:	2800      	cmp	r0, #0
 800f710:	f43f af05 	beq.w	800f51e <_strtod_l+0x436>
 800f714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f716:	2a00      	cmp	r2, #0
 800f718:	eba9 0308 	sub.w	r3, r9, r8
 800f71c:	bfa8      	it	ge
 800f71e:	2300      	movge	r3, #0
 800f720:	9312      	str	r3, [sp, #72]	@ 0x48
 800f722:	2400      	movs	r4, #0
 800f724:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f728:	9316      	str	r3, [sp, #88]	@ 0x58
 800f72a:	46a0      	mov	r8, r4
 800f72c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f72e:	9805      	ldr	r0, [sp, #20]
 800f730:	6859      	ldr	r1, [r3, #4]
 800f732:	f002 ffaf 	bl	8012694 <_Balloc>
 800f736:	4681      	mov	r9, r0
 800f738:	2800      	cmp	r0, #0
 800f73a:	f43f aef4 	beq.w	800f526 <_strtod_l+0x43e>
 800f73e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f740:	691a      	ldr	r2, [r3, #16]
 800f742:	3202      	adds	r2, #2
 800f744:	f103 010c 	add.w	r1, r3, #12
 800f748:	0092      	lsls	r2, r2, #2
 800f74a:	300c      	adds	r0, #12
 800f74c:	f001 fd83 	bl	8011256 <memcpy>
 800f750:	ec4b ab10 	vmov	d0, sl, fp
 800f754:	9805      	ldr	r0, [sp, #20]
 800f756:	aa1c      	add	r2, sp, #112	@ 0x70
 800f758:	a91b      	add	r1, sp, #108	@ 0x6c
 800f75a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f75e:	f003 fb7d 	bl	8012e5c <__d2b>
 800f762:	901a      	str	r0, [sp, #104]	@ 0x68
 800f764:	2800      	cmp	r0, #0
 800f766:	f43f aede 	beq.w	800f526 <_strtod_l+0x43e>
 800f76a:	9805      	ldr	r0, [sp, #20]
 800f76c:	2101      	movs	r1, #1
 800f76e:	f003 f8cf 	bl	8012910 <__i2b>
 800f772:	4680      	mov	r8, r0
 800f774:	b948      	cbnz	r0, 800f78a <_strtod_l+0x6a2>
 800f776:	f04f 0800 	mov.w	r8, #0
 800f77a:	e6d4      	b.n	800f526 <_strtod_l+0x43e>
 800f77c:	f04f 32ff 	mov.w	r2, #4294967295
 800f780:	fa02 f303 	lsl.w	r3, r2, r3
 800f784:	ea03 0a0a 	and.w	sl, r3, sl
 800f788:	e7b0      	b.n	800f6ec <_strtod_l+0x604>
 800f78a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f78c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f78e:	2d00      	cmp	r5, #0
 800f790:	bfab      	itete	ge
 800f792:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f794:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f796:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f798:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f79a:	bfac      	ite	ge
 800f79c:	18ef      	addge	r7, r5, r3
 800f79e:	1b5e      	sublt	r6, r3, r5
 800f7a0:	9b08      	ldr	r3, [sp, #32]
 800f7a2:	1aed      	subs	r5, r5, r3
 800f7a4:	4415      	add	r5, r2
 800f7a6:	4b66      	ldr	r3, [pc, #408]	@ (800f940 <_strtod_l+0x858>)
 800f7a8:	3d01      	subs	r5, #1
 800f7aa:	429d      	cmp	r5, r3
 800f7ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f7b0:	da50      	bge.n	800f854 <_strtod_l+0x76c>
 800f7b2:	1b5b      	subs	r3, r3, r5
 800f7b4:	2b1f      	cmp	r3, #31
 800f7b6:	eba2 0203 	sub.w	r2, r2, r3
 800f7ba:	f04f 0101 	mov.w	r1, #1
 800f7be:	dc3d      	bgt.n	800f83c <_strtod_l+0x754>
 800f7c0:	fa01 f303 	lsl.w	r3, r1, r3
 800f7c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f7ca:	18bd      	adds	r5, r7, r2
 800f7cc:	9b08      	ldr	r3, [sp, #32]
 800f7ce:	42af      	cmp	r7, r5
 800f7d0:	4416      	add	r6, r2
 800f7d2:	441e      	add	r6, r3
 800f7d4:	463b      	mov	r3, r7
 800f7d6:	bfa8      	it	ge
 800f7d8:	462b      	movge	r3, r5
 800f7da:	42b3      	cmp	r3, r6
 800f7dc:	bfa8      	it	ge
 800f7de:	4633      	movge	r3, r6
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	bfc2      	ittt	gt
 800f7e4:	1aed      	subgt	r5, r5, r3
 800f7e6:	1af6      	subgt	r6, r6, r3
 800f7e8:	1aff      	subgt	r7, r7, r3
 800f7ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	dd16      	ble.n	800f81e <_strtod_l+0x736>
 800f7f0:	4641      	mov	r1, r8
 800f7f2:	9805      	ldr	r0, [sp, #20]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	f003 f94b 	bl	8012a90 <__pow5mult>
 800f7fa:	4680      	mov	r8, r0
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	d0ba      	beq.n	800f776 <_strtod_l+0x68e>
 800f800:	4601      	mov	r1, r0
 800f802:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f804:	9805      	ldr	r0, [sp, #20]
 800f806:	f003 f899 	bl	801293c <__multiply>
 800f80a:	900e      	str	r0, [sp, #56]	@ 0x38
 800f80c:	2800      	cmp	r0, #0
 800f80e:	f43f ae8a 	beq.w	800f526 <_strtod_l+0x43e>
 800f812:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f814:	9805      	ldr	r0, [sp, #20]
 800f816:	f002 ff7d 	bl	8012714 <_Bfree>
 800f81a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f81c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f81e:	2d00      	cmp	r5, #0
 800f820:	dc1d      	bgt.n	800f85e <_strtod_l+0x776>
 800f822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f824:	2b00      	cmp	r3, #0
 800f826:	dd23      	ble.n	800f870 <_strtod_l+0x788>
 800f828:	4649      	mov	r1, r9
 800f82a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f82c:	9805      	ldr	r0, [sp, #20]
 800f82e:	f003 f92f 	bl	8012a90 <__pow5mult>
 800f832:	4681      	mov	r9, r0
 800f834:	b9e0      	cbnz	r0, 800f870 <_strtod_l+0x788>
 800f836:	f04f 0900 	mov.w	r9, #0
 800f83a:	e674      	b.n	800f526 <_strtod_l+0x43e>
 800f83c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f840:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f844:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f848:	35e2      	adds	r5, #226	@ 0xe2
 800f84a:	fa01 f305 	lsl.w	r3, r1, r5
 800f84e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f850:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f852:	e7ba      	b.n	800f7ca <_strtod_l+0x6e2>
 800f854:	2300      	movs	r3, #0
 800f856:	9310      	str	r3, [sp, #64]	@ 0x40
 800f858:	2301      	movs	r3, #1
 800f85a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f85c:	e7b5      	b.n	800f7ca <_strtod_l+0x6e2>
 800f85e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f860:	9805      	ldr	r0, [sp, #20]
 800f862:	462a      	mov	r2, r5
 800f864:	f003 f96e 	bl	8012b44 <__lshift>
 800f868:	901a      	str	r0, [sp, #104]	@ 0x68
 800f86a:	2800      	cmp	r0, #0
 800f86c:	d1d9      	bne.n	800f822 <_strtod_l+0x73a>
 800f86e:	e65a      	b.n	800f526 <_strtod_l+0x43e>
 800f870:	2e00      	cmp	r6, #0
 800f872:	dd07      	ble.n	800f884 <_strtod_l+0x79c>
 800f874:	4649      	mov	r1, r9
 800f876:	9805      	ldr	r0, [sp, #20]
 800f878:	4632      	mov	r2, r6
 800f87a:	f003 f963 	bl	8012b44 <__lshift>
 800f87e:	4681      	mov	r9, r0
 800f880:	2800      	cmp	r0, #0
 800f882:	d0d8      	beq.n	800f836 <_strtod_l+0x74e>
 800f884:	2f00      	cmp	r7, #0
 800f886:	dd08      	ble.n	800f89a <_strtod_l+0x7b2>
 800f888:	4641      	mov	r1, r8
 800f88a:	9805      	ldr	r0, [sp, #20]
 800f88c:	463a      	mov	r2, r7
 800f88e:	f003 f959 	bl	8012b44 <__lshift>
 800f892:	4680      	mov	r8, r0
 800f894:	2800      	cmp	r0, #0
 800f896:	f43f ae46 	beq.w	800f526 <_strtod_l+0x43e>
 800f89a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f89c:	9805      	ldr	r0, [sp, #20]
 800f89e:	464a      	mov	r2, r9
 800f8a0:	f003 f9d8 	bl	8012c54 <__mdiff>
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	f43f ae3d 	beq.w	800f526 <_strtod_l+0x43e>
 800f8ac:	68c3      	ldr	r3, [r0, #12]
 800f8ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	60c3      	str	r3, [r0, #12]
 800f8b4:	4641      	mov	r1, r8
 800f8b6:	f003 f9b1 	bl	8012c1c <__mcmp>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	da46      	bge.n	800f94c <_strtod_l+0x864>
 800f8be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8c0:	ea53 030a 	orrs.w	r3, r3, sl
 800f8c4:	d16c      	bne.n	800f9a0 <_strtod_l+0x8b8>
 800f8c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d168      	bne.n	800f9a0 <_strtod_l+0x8b8>
 800f8ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f8d2:	0d1b      	lsrs	r3, r3, #20
 800f8d4:	051b      	lsls	r3, r3, #20
 800f8d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f8da:	d961      	bls.n	800f9a0 <_strtod_l+0x8b8>
 800f8dc:	6963      	ldr	r3, [r4, #20]
 800f8de:	b913      	cbnz	r3, 800f8e6 <_strtod_l+0x7fe>
 800f8e0:	6923      	ldr	r3, [r4, #16]
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	dd5c      	ble.n	800f9a0 <_strtod_l+0x8b8>
 800f8e6:	4621      	mov	r1, r4
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	9805      	ldr	r0, [sp, #20]
 800f8ec:	f003 f92a 	bl	8012b44 <__lshift>
 800f8f0:	4641      	mov	r1, r8
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	f003 f992 	bl	8012c1c <__mcmp>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	dd51      	ble.n	800f9a0 <_strtod_l+0x8b8>
 800f8fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f900:	9a08      	ldr	r2, [sp, #32]
 800f902:	0d1b      	lsrs	r3, r3, #20
 800f904:	051b      	lsls	r3, r3, #20
 800f906:	2a00      	cmp	r2, #0
 800f908:	d06b      	beq.n	800f9e2 <_strtod_l+0x8fa>
 800f90a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f90e:	d868      	bhi.n	800f9e2 <_strtod_l+0x8fa>
 800f910:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f914:	f67f ae9d 	bls.w	800f652 <_strtod_l+0x56a>
 800f918:	4b0a      	ldr	r3, [pc, #40]	@ (800f944 <_strtod_l+0x85c>)
 800f91a:	4650      	mov	r0, sl
 800f91c:	4659      	mov	r1, fp
 800f91e:	2200      	movs	r2, #0
 800f920:	f7f0 fe92 	bl	8000648 <__aeabi_dmul>
 800f924:	4b08      	ldr	r3, [pc, #32]	@ (800f948 <_strtod_l+0x860>)
 800f926:	400b      	ands	r3, r1
 800f928:	4682      	mov	sl, r0
 800f92a:	468b      	mov	fp, r1
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f47f ae05 	bne.w	800f53c <_strtod_l+0x454>
 800f932:	9a05      	ldr	r2, [sp, #20]
 800f934:	2322      	movs	r3, #34	@ 0x22
 800f936:	6013      	str	r3, [r2, #0]
 800f938:	e600      	b.n	800f53c <_strtod_l+0x454>
 800f93a:	bf00      	nop
 800f93c:	08013c28 	.word	0x08013c28
 800f940:	fffffc02 	.word	0xfffffc02
 800f944:	39500000 	.word	0x39500000
 800f948:	7ff00000 	.word	0x7ff00000
 800f94c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f950:	d165      	bne.n	800fa1e <_strtod_l+0x936>
 800f952:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f958:	b35a      	cbz	r2, 800f9b2 <_strtod_l+0x8ca>
 800f95a:	4a9f      	ldr	r2, [pc, #636]	@ (800fbd8 <_strtod_l+0xaf0>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d12b      	bne.n	800f9b8 <_strtod_l+0x8d0>
 800f960:	9b08      	ldr	r3, [sp, #32]
 800f962:	4651      	mov	r1, sl
 800f964:	b303      	cbz	r3, 800f9a8 <_strtod_l+0x8c0>
 800f966:	4b9d      	ldr	r3, [pc, #628]	@ (800fbdc <_strtod_l+0xaf4>)
 800f968:	465a      	mov	r2, fp
 800f96a:	4013      	ands	r3, r2
 800f96c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f970:	f04f 32ff 	mov.w	r2, #4294967295
 800f974:	d81b      	bhi.n	800f9ae <_strtod_l+0x8c6>
 800f976:	0d1b      	lsrs	r3, r3, #20
 800f978:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f97c:	fa02 f303 	lsl.w	r3, r2, r3
 800f980:	4299      	cmp	r1, r3
 800f982:	d119      	bne.n	800f9b8 <_strtod_l+0x8d0>
 800f984:	4b96      	ldr	r3, [pc, #600]	@ (800fbe0 <_strtod_l+0xaf8>)
 800f986:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f988:	429a      	cmp	r2, r3
 800f98a:	d102      	bne.n	800f992 <_strtod_l+0x8aa>
 800f98c:	3101      	adds	r1, #1
 800f98e:	f43f adca 	beq.w	800f526 <_strtod_l+0x43e>
 800f992:	4b92      	ldr	r3, [pc, #584]	@ (800fbdc <_strtod_l+0xaf4>)
 800f994:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f996:	401a      	ands	r2, r3
 800f998:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f99c:	f04f 0a00 	mov.w	sl, #0
 800f9a0:	9b08      	ldr	r3, [sp, #32]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1b8      	bne.n	800f918 <_strtod_l+0x830>
 800f9a6:	e5c9      	b.n	800f53c <_strtod_l+0x454>
 800f9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ac:	e7e8      	b.n	800f980 <_strtod_l+0x898>
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	e7e6      	b.n	800f980 <_strtod_l+0x898>
 800f9b2:	ea53 030a 	orrs.w	r3, r3, sl
 800f9b6:	d0a1      	beq.n	800f8fc <_strtod_l+0x814>
 800f9b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f9ba:	b1db      	cbz	r3, 800f9f4 <_strtod_l+0x90c>
 800f9bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9be:	4213      	tst	r3, r2
 800f9c0:	d0ee      	beq.n	800f9a0 <_strtod_l+0x8b8>
 800f9c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9c4:	9a08      	ldr	r2, [sp, #32]
 800f9c6:	4650      	mov	r0, sl
 800f9c8:	4659      	mov	r1, fp
 800f9ca:	b1bb      	cbz	r3, 800f9fc <_strtod_l+0x914>
 800f9cc:	f7ff fb6e 	bl	800f0ac <sulp>
 800f9d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f9d4:	ec53 2b10 	vmov	r2, r3, d0
 800f9d8:	f7f0 fc80 	bl	80002dc <__adddf3>
 800f9dc:	4682      	mov	sl, r0
 800f9de:	468b      	mov	fp, r1
 800f9e0:	e7de      	b.n	800f9a0 <_strtod_l+0x8b8>
 800f9e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f9e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f9ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f9ee:	f04f 3aff 	mov.w	sl, #4294967295
 800f9f2:	e7d5      	b.n	800f9a0 <_strtod_l+0x8b8>
 800f9f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f9f6:	ea13 0f0a 	tst.w	r3, sl
 800f9fa:	e7e1      	b.n	800f9c0 <_strtod_l+0x8d8>
 800f9fc:	f7ff fb56 	bl	800f0ac <sulp>
 800fa00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa04:	ec53 2b10 	vmov	r2, r3, d0
 800fa08:	f7f0 fc66 	bl	80002d8 <__aeabi_dsub>
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	2300      	movs	r3, #0
 800fa10:	4682      	mov	sl, r0
 800fa12:	468b      	mov	fp, r1
 800fa14:	f7f1 f880 	bl	8000b18 <__aeabi_dcmpeq>
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	d0c1      	beq.n	800f9a0 <_strtod_l+0x8b8>
 800fa1c:	e619      	b.n	800f652 <_strtod_l+0x56a>
 800fa1e:	4641      	mov	r1, r8
 800fa20:	4620      	mov	r0, r4
 800fa22:	f003 fa73 	bl	8012f0c <__ratio>
 800fa26:	ec57 6b10 	vmov	r6, r7, d0
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fa30:	4630      	mov	r0, r6
 800fa32:	4639      	mov	r1, r7
 800fa34:	f7f1 f884 	bl	8000b40 <__aeabi_dcmple>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d06f      	beq.n	800fb1c <_strtod_l+0xa34>
 800fa3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d17a      	bne.n	800fb38 <_strtod_l+0xa50>
 800fa42:	f1ba 0f00 	cmp.w	sl, #0
 800fa46:	d158      	bne.n	800fafa <_strtod_l+0xa12>
 800fa48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d15a      	bne.n	800fb08 <_strtod_l+0xa20>
 800fa52:	4b64      	ldr	r3, [pc, #400]	@ (800fbe4 <_strtod_l+0xafc>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	4630      	mov	r0, r6
 800fa58:	4639      	mov	r1, r7
 800fa5a:	f7f1 f867 	bl	8000b2c <__aeabi_dcmplt>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	d159      	bne.n	800fb16 <_strtod_l+0xa2e>
 800fa62:	4630      	mov	r0, r6
 800fa64:	4639      	mov	r1, r7
 800fa66:	4b60      	ldr	r3, [pc, #384]	@ (800fbe8 <_strtod_l+0xb00>)
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f7f0 fded 	bl	8000648 <__aeabi_dmul>
 800fa6e:	4606      	mov	r6, r0
 800fa70:	460f      	mov	r7, r1
 800fa72:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fa76:	9606      	str	r6, [sp, #24]
 800fa78:	9307      	str	r3, [sp, #28]
 800fa7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa7e:	4d57      	ldr	r5, [pc, #348]	@ (800fbdc <_strtod_l+0xaf4>)
 800fa80:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fa84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa86:	401d      	ands	r5, r3
 800fa88:	4b58      	ldr	r3, [pc, #352]	@ (800fbec <_strtod_l+0xb04>)
 800fa8a:	429d      	cmp	r5, r3
 800fa8c:	f040 80b2 	bne.w	800fbf4 <_strtod_l+0xb0c>
 800fa90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa92:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fa96:	ec4b ab10 	vmov	d0, sl, fp
 800fa9a:	f003 f96f 	bl	8012d7c <__ulp>
 800fa9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800faa2:	ec51 0b10 	vmov	r0, r1, d0
 800faa6:	f7f0 fdcf 	bl	8000648 <__aeabi_dmul>
 800faaa:	4652      	mov	r2, sl
 800faac:	465b      	mov	r3, fp
 800faae:	f7f0 fc15 	bl	80002dc <__adddf3>
 800fab2:	460b      	mov	r3, r1
 800fab4:	4949      	ldr	r1, [pc, #292]	@ (800fbdc <_strtod_l+0xaf4>)
 800fab6:	4a4e      	ldr	r2, [pc, #312]	@ (800fbf0 <_strtod_l+0xb08>)
 800fab8:	4019      	ands	r1, r3
 800faba:	4291      	cmp	r1, r2
 800fabc:	4682      	mov	sl, r0
 800fabe:	d942      	bls.n	800fb46 <_strtod_l+0xa5e>
 800fac0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fac2:	4b47      	ldr	r3, [pc, #284]	@ (800fbe0 <_strtod_l+0xaf8>)
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d103      	bne.n	800fad0 <_strtod_l+0x9e8>
 800fac8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faca:	3301      	adds	r3, #1
 800facc:	f43f ad2b 	beq.w	800f526 <_strtod_l+0x43e>
 800fad0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fbe0 <_strtod_l+0xaf8>
 800fad4:	f04f 3aff 	mov.w	sl, #4294967295
 800fad8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fada:	9805      	ldr	r0, [sp, #20]
 800fadc:	f002 fe1a 	bl	8012714 <_Bfree>
 800fae0:	9805      	ldr	r0, [sp, #20]
 800fae2:	4649      	mov	r1, r9
 800fae4:	f002 fe16 	bl	8012714 <_Bfree>
 800fae8:	9805      	ldr	r0, [sp, #20]
 800faea:	4641      	mov	r1, r8
 800faec:	f002 fe12 	bl	8012714 <_Bfree>
 800faf0:	9805      	ldr	r0, [sp, #20]
 800faf2:	4621      	mov	r1, r4
 800faf4:	f002 fe0e 	bl	8012714 <_Bfree>
 800faf8:	e618      	b.n	800f72c <_strtod_l+0x644>
 800fafa:	f1ba 0f01 	cmp.w	sl, #1
 800fafe:	d103      	bne.n	800fb08 <_strtod_l+0xa20>
 800fb00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f43f ada5 	beq.w	800f652 <_strtod_l+0x56a>
 800fb08:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fbb8 <_strtod_l+0xad0>
 800fb0c:	4f35      	ldr	r7, [pc, #212]	@ (800fbe4 <_strtod_l+0xafc>)
 800fb0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fb12:	2600      	movs	r6, #0
 800fb14:	e7b1      	b.n	800fa7a <_strtod_l+0x992>
 800fb16:	4f34      	ldr	r7, [pc, #208]	@ (800fbe8 <_strtod_l+0xb00>)
 800fb18:	2600      	movs	r6, #0
 800fb1a:	e7aa      	b.n	800fa72 <_strtod_l+0x98a>
 800fb1c:	4b32      	ldr	r3, [pc, #200]	@ (800fbe8 <_strtod_l+0xb00>)
 800fb1e:	4630      	mov	r0, r6
 800fb20:	4639      	mov	r1, r7
 800fb22:	2200      	movs	r2, #0
 800fb24:	f7f0 fd90 	bl	8000648 <__aeabi_dmul>
 800fb28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb2a:	4606      	mov	r6, r0
 800fb2c:	460f      	mov	r7, r1
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d09f      	beq.n	800fa72 <_strtod_l+0x98a>
 800fb32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fb36:	e7a0      	b.n	800fa7a <_strtod_l+0x992>
 800fb38:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fbc0 <_strtod_l+0xad8>
 800fb3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fb40:	ec57 6b17 	vmov	r6, r7, d7
 800fb44:	e799      	b.n	800fa7a <_strtod_l+0x992>
 800fb46:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fb4a:	9b08      	ldr	r3, [sp, #32]
 800fb4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d1c1      	bne.n	800fad8 <_strtod_l+0x9f0>
 800fb54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb58:	0d1b      	lsrs	r3, r3, #20
 800fb5a:	051b      	lsls	r3, r3, #20
 800fb5c:	429d      	cmp	r5, r3
 800fb5e:	d1bb      	bne.n	800fad8 <_strtod_l+0x9f0>
 800fb60:	4630      	mov	r0, r6
 800fb62:	4639      	mov	r1, r7
 800fb64:	f7f1 f8d0 	bl	8000d08 <__aeabi_d2lz>
 800fb68:	f7f0 fd40 	bl	80005ec <__aeabi_l2d>
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	460b      	mov	r3, r1
 800fb70:	4630      	mov	r0, r6
 800fb72:	4639      	mov	r1, r7
 800fb74:	f7f0 fbb0 	bl	80002d8 <__aeabi_dsub>
 800fb78:	460b      	mov	r3, r1
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fb80:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb86:	ea46 060a 	orr.w	r6, r6, sl
 800fb8a:	431e      	orrs	r6, r3
 800fb8c:	d06f      	beq.n	800fc6e <_strtod_l+0xb86>
 800fb8e:	a30e      	add	r3, pc, #56	@ (adr r3, 800fbc8 <_strtod_l+0xae0>)
 800fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb94:	f7f0 ffca 	bl	8000b2c <__aeabi_dcmplt>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	f47f accf 	bne.w	800f53c <_strtod_l+0x454>
 800fb9e:	a30c      	add	r3, pc, #48	@ (adr r3, 800fbd0 <_strtod_l+0xae8>)
 800fba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fba8:	f7f0 ffde 	bl	8000b68 <__aeabi_dcmpgt>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d093      	beq.n	800fad8 <_strtod_l+0x9f0>
 800fbb0:	e4c4      	b.n	800f53c <_strtod_l+0x454>
 800fbb2:	bf00      	nop
 800fbb4:	f3af 8000 	nop.w
 800fbb8:	00000000 	.word	0x00000000
 800fbbc:	bff00000 	.word	0xbff00000
 800fbc0:	00000000 	.word	0x00000000
 800fbc4:	3ff00000 	.word	0x3ff00000
 800fbc8:	94a03595 	.word	0x94a03595
 800fbcc:	3fdfffff 	.word	0x3fdfffff
 800fbd0:	35afe535 	.word	0x35afe535
 800fbd4:	3fe00000 	.word	0x3fe00000
 800fbd8:	000fffff 	.word	0x000fffff
 800fbdc:	7ff00000 	.word	0x7ff00000
 800fbe0:	7fefffff 	.word	0x7fefffff
 800fbe4:	3ff00000 	.word	0x3ff00000
 800fbe8:	3fe00000 	.word	0x3fe00000
 800fbec:	7fe00000 	.word	0x7fe00000
 800fbf0:	7c9fffff 	.word	0x7c9fffff
 800fbf4:	9b08      	ldr	r3, [sp, #32]
 800fbf6:	b323      	cbz	r3, 800fc42 <_strtod_l+0xb5a>
 800fbf8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fbfc:	d821      	bhi.n	800fc42 <_strtod_l+0xb5a>
 800fbfe:	a328      	add	r3, pc, #160	@ (adr r3, 800fca0 <_strtod_l+0xbb8>)
 800fc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc04:	4630      	mov	r0, r6
 800fc06:	4639      	mov	r1, r7
 800fc08:	f7f0 ff9a 	bl	8000b40 <__aeabi_dcmple>
 800fc0c:	b1a0      	cbz	r0, 800fc38 <_strtod_l+0xb50>
 800fc0e:	4639      	mov	r1, r7
 800fc10:	4630      	mov	r0, r6
 800fc12:	f7f0 fff1 	bl	8000bf8 <__aeabi_d2uiz>
 800fc16:	2801      	cmp	r0, #1
 800fc18:	bf38      	it	cc
 800fc1a:	2001      	movcc	r0, #1
 800fc1c:	f7f0 fc9a 	bl	8000554 <__aeabi_ui2d>
 800fc20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc22:	4606      	mov	r6, r0
 800fc24:	460f      	mov	r7, r1
 800fc26:	b9fb      	cbnz	r3, 800fc68 <_strtod_l+0xb80>
 800fc28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fc2c:	9014      	str	r0, [sp, #80]	@ 0x50
 800fc2e:	9315      	str	r3, [sp, #84]	@ 0x54
 800fc30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fc34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fc38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fc3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fc3e:	1b5b      	subs	r3, r3, r5
 800fc40:	9311      	str	r3, [sp, #68]	@ 0x44
 800fc42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fc46:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fc4a:	f003 f897 	bl	8012d7c <__ulp>
 800fc4e:	4650      	mov	r0, sl
 800fc50:	ec53 2b10 	vmov	r2, r3, d0
 800fc54:	4659      	mov	r1, fp
 800fc56:	f7f0 fcf7 	bl	8000648 <__aeabi_dmul>
 800fc5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fc5e:	f7f0 fb3d 	bl	80002dc <__adddf3>
 800fc62:	4682      	mov	sl, r0
 800fc64:	468b      	mov	fp, r1
 800fc66:	e770      	b.n	800fb4a <_strtod_l+0xa62>
 800fc68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fc6c:	e7e0      	b.n	800fc30 <_strtod_l+0xb48>
 800fc6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800fca8 <_strtod_l+0xbc0>)
 800fc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc74:	f7f0 ff5a 	bl	8000b2c <__aeabi_dcmplt>
 800fc78:	e798      	b.n	800fbac <_strtod_l+0xac4>
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc7e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fc80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc82:	6013      	str	r3, [r2, #0]
 800fc84:	f7ff ba6d 	b.w	800f162 <_strtod_l+0x7a>
 800fc88:	2a65      	cmp	r2, #101	@ 0x65
 800fc8a:	f43f ab66 	beq.w	800f35a <_strtod_l+0x272>
 800fc8e:	2a45      	cmp	r2, #69	@ 0x45
 800fc90:	f43f ab63 	beq.w	800f35a <_strtod_l+0x272>
 800fc94:	2301      	movs	r3, #1
 800fc96:	f7ff bb9e 	b.w	800f3d6 <_strtod_l+0x2ee>
 800fc9a:	bf00      	nop
 800fc9c:	f3af 8000 	nop.w
 800fca0:	ffc00000 	.word	0xffc00000
 800fca4:	41dfffff 	.word	0x41dfffff
 800fca8:	94a03595 	.word	0x94a03595
 800fcac:	3fcfffff 	.word	0x3fcfffff

0800fcb0 <_strtod_r>:
 800fcb0:	4b01      	ldr	r3, [pc, #4]	@ (800fcb8 <_strtod_r+0x8>)
 800fcb2:	f7ff ba19 	b.w	800f0e8 <_strtod_l>
 800fcb6:	bf00      	nop
 800fcb8:	20000038 	.word	0x20000038

0800fcbc <strtof>:
 800fcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800fd80 <strtof+0xc4>
 800fcc4:	4b29      	ldr	r3, [pc, #164]	@ (800fd6c <strtof+0xb0>)
 800fcc6:	460a      	mov	r2, r1
 800fcc8:	ed2d 8b02 	vpush	{d8}
 800fccc:	4601      	mov	r1, r0
 800fcce:	f8d8 0000 	ldr.w	r0, [r8]
 800fcd2:	f7ff fa09 	bl	800f0e8 <_strtod_l>
 800fcd6:	ec55 4b10 	vmov	r4, r5, d0
 800fcda:	4622      	mov	r2, r4
 800fcdc:	462b      	mov	r3, r5
 800fcde:	4620      	mov	r0, r4
 800fce0:	4629      	mov	r1, r5
 800fce2:	f7f0 ff4b 	bl	8000b7c <__aeabi_dcmpun>
 800fce6:	b190      	cbz	r0, 800fd0e <strtof+0x52>
 800fce8:	2d00      	cmp	r5, #0
 800fcea:	4821      	ldr	r0, [pc, #132]	@ (800fd70 <strtof+0xb4>)
 800fcec:	da09      	bge.n	800fd02 <strtof+0x46>
 800fcee:	f001 facb 	bl	8011288 <nanf>
 800fcf2:	eeb1 8a40 	vneg.f32	s16, s0
 800fcf6:	eeb0 0a48 	vmov.f32	s0, s16
 800fcfa:	ecbd 8b02 	vpop	{d8}
 800fcfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd02:	ecbd 8b02 	vpop	{d8}
 800fd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0a:	f001 babd 	b.w	8011288 <nanf>
 800fd0e:	4620      	mov	r0, r4
 800fd10:	4629      	mov	r1, r5
 800fd12:	f7f0 ff91 	bl	8000c38 <__aeabi_d2f>
 800fd16:	ee08 0a10 	vmov	s16, r0
 800fd1a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800fd74 <strtof+0xb8>
 800fd1e:	eeb0 7ac8 	vabs.f32	s14, s16
 800fd22:	eeb4 7a67 	vcmp.f32	s14, s15
 800fd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd2a:	dd11      	ble.n	800fd50 <strtof+0x94>
 800fd2c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800fd30:	4b11      	ldr	r3, [pc, #68]	@ (800fd78 <strtof+0xbc>)
 800fd32:	f04f 32ff 	mov.w	r2, #4294967295
 800fd36:	4620      	mov	r0, r4
 800fd38:	4639      	mov	r1, r7
 800fd3a:	f7f0 ff1f 	bl	8000b7c <__aeabi_dcmpun>
 800fd3e:	b980      	cbnz	r0, 800fd62 <strtof+0xa6>
 800fd40:	4b0d      	ldr	r3, [pc, #52]	@ (800fd78 <strtof+0xbc>)
 800fd42:	f04f 32ff 	mov.w	r2, #4294967295
 800fd46:	4620      	mov	r0, r4
 800fd48:	4639      	mov	r1, r7
 800fd4a:	f7f0 fef9 	bl	8000b40 <__aeabi_dcmple>
 800fd4e:	b940      	cbnz	r0, 800fd62 <strtof+0xa6>
 800fd50:	ee18 3a10 	vmov	r3, s16
 800fd54:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fd58:	d1cd      	bne.n	800fcf6 <strtof+0x3a>
 800fd5a:	4b08      	ldr	r3, [pc, #32]	@ (800fd7c <strtof+0xc0>)
 800fd5c:	402b      	ands	r3, r5
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d0c9      	beq.n	800fcf6 <strtof+0x3a>
 800fd62:	f8d8 3000 	ldr.w	r3, [r8]
 800fd66:	2222      	movs	r2, #34	@ 0x22
 800fd68:	601a      	str	r2, [r3, #0]
 800fd6a:	e7c4      	b.n	800fcf6 <strtof+0x3a>
 800fd6c:	20000038 	.word	0x20000038
 800fd70:	08013e3e 	.word	0x08013e3e
 800fd74:	7f7fffff 	.word	0x7f7fffff
 800fd78:	7fefffff 	.word	0x7fefffff
 800fd7c:	7ff00000 	.word	0x7ff00000
 800fd80:	200001a4 	.word	0x200001a4

0800fd84 <_strtol_l.constprop.0>:
 800fd84:	2b24      	cmp	r3, #36	@ 0x24
 800fd86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd8a:	4686      	mov	lr, r0
 800fd8c:	4690      	mov	r8, r2
 800fd8e:	d801      	bhi.n	800fd94 <_strtol_l.constprop.0+0x10>
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d106      	bne.n	800fda2 <_strtol_l.constprop.0+0x1e>
 800fd94:	f001 fa2a 	bl	80111ec <__errno>
 800fd98:	2316      	movs	r3, #22
 800fd9a:	6003      	str	r3, [r0, #0]
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fda2:	4834      	ldr	r0, [pc, #208]	@ (800fe74 <_strtol_l.constprop.0+0xf0>)
 800fda4:	460d      	mov	r5, r1
 800fda6:	462a      	mov	r2, r5
 800fda8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdac:	5d06      	ldrb	r6, [r0, r4]
 800fdae:	f016 0608 	ands.w	r6, r6, #8
 800fdb2:	d1f8      	bne.n	800fda6 <_strtol_l.constprop.0+0x22>
 800fdb4:	2c2d      	cmp	r4, #45	@ 0x2d
 800fdb6:	d12d      	bne.n	800fe14 <_strtol_l.constprop.0+0x90>
 800fdb8:	782c      	ldrb	r4, [r5, #0]
 800fdba:	2601      	movs	r6, #1
 800fdbc:	1c95      	adds	r5, r2, #2
 800fdbe:	f033 0210 	bics.w	r2, r3, #16
 800fdc2:	d109      	bne.n	800fdd8 <_strtol_l.constprop.0+0x54>
 800fdc4:	2c30      	cmp	r4, #48	@ 0x30
 800fdc6:	d12a      	bne.n	800fe1e <_strtol_l.constprop.0+0x9a>
 800fdc8:	782a      	ldrb	r2, [r5, #0]
 800fdca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fdce:	2a58      	cmp	r2, #88	@ 0x58
 800fdd0:	d125      	bne.n	800fe1e <_strtol_l.constprop.0+0x9a>
 800fdd2:	786c      	ldrb	r4, [r5, #1]
 800fdd4:	2310      	movs	r3, #16
 800fdd6:	3502      	adds	r5, #2
 800fdd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fddc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fde0:	2200      	movs	r2, #0
 800fde2:	fbbc f9f3 	udiv	r9, ip, r3
 800fde6:	4610      	mov	r0, r2
 800fde8:	fb03 ca19 	mls	sl, r3, r9, ip
 800fdec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fdf0:	2f09      	cmp	r7, #9
 800fdf2:	d81b      	bhi.n	800fe2c <_strtol_l.constprop.0+0xa8>
 800fdf4:	463c      	mov	r4, r7
 800fdf6:	42a3      	cmp	r3, r4
 800fdf8:	dd27      	ble.n	800fe4a <_strtol_l.constprop.0+0xc6>
 800fdfa:	1c57      	adds	r7, r2, #1
 800fdfc:	d007      	beq.n	800fe0e <_strtol_l.constprop.0+0x8a>
 800fdfe:	4581      	cmp	r9, r0
 800fe00:	d320      	bcc.n	800fe44 <_strtol_l.constprop.0+0xc0>
 800fe02:	d101      	bne.n	800fe08 <_strtol_l.constprop.0+0x84>
 800fe04:	45a2      	cmp	sl, r4
 800fe06:	db1d      	blt.n	800fe44 <_strtol_l.constprop.0+0xc0>
 800fe08:	fb00 4003 	mla	r0, r0, r3, r4
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe12:	e7eb      	b.n	800fdec <_strtol_l.constprop.0+0x68>
 800fe14:	2c2b      	cmp	r4, #43	@ 0x2b
 800fe16:	bf04      	itt	eq
 800fe18:	782c      	ldrbeq	r4, [r5, #0]
 800fe1a:	1c95      	addeq	r5, r2, #2
 800fe1c:	e7cf      	b.n	800fdbe <_strtol_l.constprop.0+0x3a>
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1da      	bne.n	800fdd8 <_strtol_l.constprop.0+0x54>
 800fe22:	2c30      	cmp	r4, #48	@ 0x30
 800fe24:	bf0c      	ite	eq
 800fe26:	2308      	moveq	r3, #8
 800fe28:	230a      	movne	r3, #10
 800fe2a:	e7d5      	b.n	800fdd8 <_strtol_l.constprop.0+0x54>
 800fe2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fe30:	2f19      	cmp	r7, #25
 800fe32:	d801      	bhi.n	800fe38 <_strtol_l.constprop.0+0xb4>
 800fe34:	3c37      	subs	r4, #55	@ 0x37
 800fe36:	e7de      	b.n	800fdf6 <_strtol_l.constprop.0+0x72>
 800fe38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fe3c:	2f19      	cmp	r7, #25
 800fe3e:	d804      	bhi.n	800fe4a <_strtol_l.constprop.0+0xc6>
 800fe40:	3c57      	subs	r4, #87	@ 0x57
 800fe42:	e7d8      	b.n	800fdf6 <_strtol_l.constprop.0+0x72>
 800fe44:	f04f 32ff 	mov.w	r2, #4294967295
 800fe48:	e7e1      	b.n	800fe0e <_strtol_l.constprop.0+0x8a>
 800fe4a:	1c53      	adds	r3, r2, #1
 800fe4c:	d108      	bne.n	800fe60 <_strtol_l.constprop.0+0xdc>
 800fe4e:	2322      	movs	r3, #34	@ 0x22
 800fe50:	f8ce 3000 	str.w	r3, [lr]
 800fe54:	4660      	mov	r0, ip
 800fe56:	f1b8 0f00 	cmp.w	r8, #0
 800fe5a:	d0a0      	beq.n	800fd9e <_strtol_l.constprop.0+0x1a>
 800fe5c:	1e69      	subs	r1, r5, #1
 800fe5e:	e006      	b.n	800fe6e <_strtol_l.constprop.0+0xea>
 800fe60:	b106      	cbz	r6, 800fe64 <_strtol_l.constprop.0+0xe0>
 800fe62:	4240      	negs	r0, r0
 800fe64:	f1b8 0f00 	cmp.w	r8, #0
 800fe68:	d099      	beq.n	800fd9e <_strtol_l.constprop.0+0x1a>
 800fe6a:	2a00      	cmp	r2, #0
 800fe6c:	d1f6      	bne.n	800fe5c <_strtol_l.constprop.0+0xd8>
 800fe6e:	f8c8 1000 	str.w	r1, [r8]
 800fe72:	e794      	b.n	800fd9e <_strtol_l.constprop.0+0x1a>
 800fe74:	08013c51 	.word	0x08013c51

0800fe78 <_strtol_r>:
 800fe78:	f7ff bf84 	b.w	800fd84 <_strtol_l.constprop.0>

0800fe7c <strtol>:
 800fe7c:	4613      	mov	r3, r2
 800fe7e:	460a      	mov	r2, r1
 800fe80:	4601      	mov	r1, r0
 800fe82:	4802      	ldr	r0, [pc, #8]	@ (800fe8c <strtol+0x10>)
 800fe84:	6800      	ldr	r0, [r0, #0]
 800fe86:	f7ff bf7d 	b.w	800fd84 <_strtol_l.constprop.0>
 800fe8a:	bf00      	nop
 800fe8c:	200001a4 	.word	0x200001a4

0800fe90 <__cvt>:
 800fe90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe94:	ec57 6b10 	vmov	r6, r7, d0
 800fe98:	2f00      	cmp	r7, #0
 800fe9a:	460c      	mov	r4, r1
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	463b      	mov	r3, r7
 800fea0:	bfbb      	ittet	lt
 800fea2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fea6:	461f      	movlt	r7, r3
 800fea8:	2300      	movge	r3, #0
 800feaa:	232d      	movlt	r3, #45	@ 0x2d
 800feac:	700b      	strb	r3, [r1, #0]
 800feae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800feb0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800feb4:	4691      	mov	r9, r2
 800feb6:	f023 0820 	bic.w	r8, r3, #32
 800feba:	bfbc      	itt	lt
 800febc:	4632      	movlt	r2, r6
 800febe:	4616      	movlt	r6, r2
 800fec0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fec4:	d005      	beq.n	800fed2 <__cvt+0x42>
 800fec6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800feca:	d100      	bne.n	800fece <__cvt+0x3e>
 800fecc:	3401      	adds	r4, #1
 800fece:	2102      	movs	r1, #2
 800fed0:	e000      	b.n	800fed4 <__cvt+0x44>
 800fed2:	2103      	movs	r1, #3
 800fed4:	ab03      	add	r3, sp, #12
 800fed6:	9301      	str	r3, [sp, #4]
 800fed8:	ab02      	add	r3, sp, #8
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	ec47 6b10 	vmov	d0, r6, r7
 800fee0:	4653      	mov	r3, sl
 800fee2:	4622      	mov	r2, r4
 800fee4:	f001 fa7c 	bl	80113e0 <_dtoa_r>
 800fee8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800feec:	4605      	mov	r5, r0
 800feee:	d119      	bne.n	800ff24 <__cvt+0x94>
 800fef0:	f019 0f01 	tst.w	r9, #1
 800fef4:	d00e      	beq.n	800ff14 <__cvt+0x84>
 800fef6:	eb00 0904 	add.w	r9, r0, r4
 800fefa:	2200      	movs	r2, #0
 800fefc:	2300      	movs	r3, #0
 800fefe:	4630      	mov	r0, r6
 800ff00:	4639      	mov	r1, r7
 800ff02:	f7f0 fe09 	bl	8000b18 <__aeabi_dcmpeq>
 800ff06:	b108      	cbz	r0, 800ff0c <__cvt+0x7c>
 800ff08:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff0c:	2230      	movs	r2, #48	@ 0x30
 800ff0e:	9b03      	ldr	r3, [sp, #12]
 800ff10:	454b      	cmp	r3, r9
 800ff12:	d31e      	bcc.n	800ff52 <__cvt+0xc2>
 800ff14:	9b03      	ldr	r3, [sp, #12]
 800ff16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff18:	1b5b      	subs	r3, r3, r5
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	6013      	str	r3, [r2, #0]
 800ff1e:	b004      	add	sp, #16
 800ff20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ff28:	eb00 0904 	add.w	r9, r0, r4
 800ff2c:	d1e5      	bne.n	800fefa <__cvt+0x6a>
 800ff2e:	7803      	ldrb	r3, [r0, #0]
 800ff30:	2b30      	cmp	r3, #48	@ 0x30
 800ff32:	d10a      	bne.n	800ff4a <__cvt+0xba>
 800ff34:	2200      	movs	r2, #0
 800ff36:	2300      	movs	r3, #0
 800ff38:	4630      	mov	r0, r6
 800ff3a:	4639      	mov	r1, r7
 800ff3c:	f7f0 fdec 	bl	8000b18 <__aeabi_dcmpeq>
 800ff40:	b918      	cbnz	r0, 800ff4a <__cvt+0xba>
 800ff42:	f1c4 0401 	rsb	r4, r4, #1
 800ff46:	f8ca 4000 	str.w	r4, [sl]
 800ff4a:	f8da 3000 	ldr.w	r3, [sl]
 800ff4e:	4499      	add	r9, r3
 800ff50:	e7d3      	b.n	800fefa <__cvt+0x6a>
 800ff52:	1c59      	adds	r1, r3, #1
 800ff54:	9103      	str	r1, [sp, #12]
 800ff56:	701a      	strb	r2, [r3, #0]
 800ff58:	e7d9      	b.n	800ff0e <__cvt+0x7e>

0800ff5a <__exponent>:
 800ff5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff5c:	2900      	cmp	r1, #0
 800ff5e:	bfba      	itte	lt
 800ff60:	4249      	neglt	r1, r1
 800ff62:	232d      	movlt	r3, #45	@ 0x2d
 800ff64:	232b      	movge	r3, #43	@ 0x2b
 800ff66:	2909      	cmp	r1, #9
 800ff68:	7002      	strb	r2, [r0, #0]
 800ff6a:	7043      	strb	r3, [r0, #1]
 800ff6c:	dd29      	ble.n	800ffc2 <__exponent+0x68>
 800ff6e:	f10d 0307 	add.w	r3, sp, #7
 800ff72:	461d      	mov	r5, r3
 800ff74:	270a      	movs	r7, #10
 800ff76:	461a      	mov	r2, r3
 800ff78:	fbb1 f6f7 	udiv	r6, r1, r7
 800ff7c:	fb07 1416 	mls	r4, r7, r6, r1
 800ff80:	3430      	adds	r4, #48	@ 0x30
 800ff82:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ff86:	460c      	mov	r4, r1
 800ff88:	2c63      	cmp	r4, #99	@ 0x63
 800ff8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff8e:	4631      	mov	r1, r6
 800ff90:	dcf1      	bgt.n	800ff76 <__exponent+0x1c>
 800ff92:	3130      	adds	r1, #48	@ 0x30
 800ff94:	1e94      	subs	r4, r2, #2
 800ff96:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ff9a:	1c41      	adds	r1, r0, #1
 800ff9c:	4623      	mov	r3, r4
 800ff9e:	42ab      	cmp	r3, r5
 800ffa0:	d30a      	bcc.n	800ffb8 <__exponent+0x5e>
 800ffa2:	f10d 0309 	add.w	r3, sp, #9
 800ffa6:	1a9b      	subs	r3, r3, r2
 800ffa8:	42ac      	cmp	r4, r5
 800ffaa:	bf88      	it	hi
 800ffac:	2300      	movhi	r3, #0
 800ffae:	3302      	adds	r3, #2
 800ffb0:	4403      	add	r3, r0
 800ffb2:	1a18      	subs	r0, r3, r0
 800ffb4:	b003      	add	sp, #12
 800ffb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ffbc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ffc0:	e7ed      	b.n	800ff9e <__exponent+0x44>
 800ffc2:	2330      	movs	r3, #48	@ 0x30
 800ffc4:	3130      	adds	r1, #48	@ 0x30
 800ffc6:	7083      	strb	r3, [r0, #2]
 800ffc8:	70c1      	strb	r1, [r0, #3]
 800ffca:	1d03      	adds	r3, r0, #4
 800ffcc:	e7f1      	b.n	800ffb2 <__exponent+0x58>
	...

0800ffd0 <_printf_float>:
 800ffd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd4:	b08d      	sub	sp, #52	@ 0x34
 800ffd6:	460c      	mov	r4, r1
 800ffd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ffdc:	4616      	mov	r6, r2
 800ffde:	461f      	mov	r7, r3
 800ffe0:	4605      	mov	r5, r0
 800ffe2:	f001 f8a9 	bl	8011138 <_localeconv_r>
 800ffe6:	6803      	ldr	r3, [r0, #0]
 800ffe8:	9304      	str	r3, [sp, #16]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7f0 f968 	bl	80002c0 <strlen>
 800fff0:	2300      	movs	r3, #0
 800fff2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fff4:	f8d8 3000 	ldr.w	r3, [r8]
 800fff8:	9005      	str	r0, [sp, #20]
 800fffa:	3307      	adds	r3, #7
 800fffc:	f023 0307 	bic.w	r3, r3, #7
 8010000:	f103 0208 	add.w	r2, r3, #8
 8010004:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010008:	f8d4 b000 	ldr.w	fp, [r4]
 801000c:	f8c8 2000 	str.w	r2, [r8]
 8010010:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010014:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010018:	9307      	str	r3, [sp, #28]
 801001a:	f8cd 8018 	str.w	r8, [sp, #24]
 801001e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010026:	4b9c      	ldr	r3, [pc, #624]	@ (8010298 <_printf_float+0x2c8>)
 8010028:	f04f 32ff 	mov.w	r2, #4294967295
 801002c:	f7f0 fda6 	bl	8000b7c <__aeabi_dcmpun>
 8010030:	bb70      	cbnz	r0, 8010090 <_printf_float+0xc0>
 8010032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010036:	4b98      	ldr	r3, [pc, #608]	@ (8010298 <_printf_float+0x2c8>)
 8010038:	f04f 32ff 	mov.w	r2, #4294967295
 801003c:	f7f0 fd80 	bl	8000b40 <__aeabi_dcmple>
 8010040:	bb30      	cbnz	r0, 8010090 <_printf_float+0xc0>
 8010042:	2200      	movs	r2, #0
 8010044:	2300      	movs	r3, #0
 8010046:	4640      	mov	r0, r8
 8010048:	4649      	mov	r1, r9
 801004a:	f7f0 fd6f 	bl	8000b2c <__aeabi_dcmplt>
 801004e:	b110      	cbz	r0, 8010056 <_printf_float+0x86>
 8010050:	232d      	movs	r3, #45	@ 0x2d
 8010052:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010056:	4a91      	ldr	r2, [pc, #580]	@ (801029c <_printf_float+0x2cc>)
 8010058:	4b91      	ldr	r3, [pc, #580]	@ (80102a0 <_printf_float+0x2d0>)
 801005a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801005e:	bf94      	ite	ls
 8010060:	4690      	movls	r8, r2
 8010062:	4698      	movhi	r8, r3
 8010064:	2303      	movs	r3, #3
 8010066:	6123      	str	r3, [r4, #16]
 8010068:	f02b 0304 	bic.w	r3, fp, #4
 801006c:	6023      	str	r3, [r4, #0]
 801006e:	f04f 0900 	mov.w	r9, #0
 8010072:	9700      	str	r7, [sp, #0]
 8010074:	4633      	mov	r3, r6
 8010076:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010078:	4621      	mov	r1, r4
 801007a:	4628      	mov	r0, r5
 801007c:	f000 f9d2 	bl	8010424 <_printf_common>
 8010080:	3001      	adds	r0, #1
 8010082:	f040 808d 	bne.w	80101a0 <_printf_float+0x1d0>
 8010086:	f04f 30ff 	mov.w	r0, #4294967295
 801008a:	b00d      	add	sp, #52	@ 0x34
 801008c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010090:	4642      	mov	r2, r8
 8010092:	464b      	mov	r3, r9
 8010094:	4640      	mov	r0, r8
 8010096:	4649      	mov	r1, r9
 8010098:	f7f0 fd70 	bl	8000b7c <__aeabi_dcmpun>
 801009c:	b140      	cbz	r0, 80100b0 <_printf_float+0xe0>
 801009e:	464b      	mov	r3, r9
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	bfbc      	itt	lt
 80100a4:	232d      	movlt	r3, #45	@ 0x2d
 80100a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80100aa:	4a7e      	ldr	r2, [pc, #504]	@ (80102a4 <_printf_float+0x2d4>)
 80100ac:	4b7e      	ldr	r3, [pc, #504]	@ (80102a8 <_printf_float+0x2d8>)
 80100ae:	e7d4      	b.n	801005a <_printf_float+0x8a>
 80100b0:	6863      	ldr	r3, [r4, #4]
 80100b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80100b6:	9206      	str	r2, [sp, #24]
 80100b8:	1c5a      	adds	r2, r3, #1
 80100ba:	d13b      	bne.n	8010134 <_printf_float+0x164>
 80100bc:	2306      	movs	r3, #6
 80100be:	6063      	str	r3, [r4, #4]
 80100c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80100c4:	2300      	movs	r3, #0
 80100c6:	6022      	str	r2, [r4, #0]
 80100c8:	9303      	str	r3, [sp, #12]
 80100ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80100cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80100d0:	ab09      	add	r3, sp, #36	@ 0x24
 80100d2:	9300      	str	r3, [sp, #0]
 80100d4:	6861      	ldr	r1, [r4, #4]
 80100d6:	ec49 8b10 	vmov	d0, r8, r9
 80100da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80100de:	4628      	mov	r0, r5
 80100e0:	f7ff fed6 	bl	800fe90 <__cvt>
 80100e4:	9b06      	ldr	r3, [sp, #24]
 80100e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80100e8:	2b47      	cmp	r3, #71	@ 0x47
 80100ea:	4680      	mov	r8, r0
 80100ec:	d129      	bne.n	8010142 <_printf_float+0x172>
 80100ee:	1cc8      	adds	r0, r1, #3
 80100f0:	db02      	blt.n	80100f8 <_printf_float+0x128>
 80100f2:	6863      	ldr	r3, [r4, #4]
 80100f4:	4299      	cmp	r1, r3
 80100f6:	dd41      	ble.n	801017c <_printf_float+0x1ac>
 80100f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80100fc:	fa5f fa8a 	uxtb.w	sl, sl
 8010100:	3901      	subs	r1, #1
 8010102:	4652      	mov	r2, sl
 8010104:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010108:	9109      	str	r1, [sp, #36]	@ 0x24
 801010a:	f7ff ff26 	bl	800ff5a <__exponent>
 801010e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010110:	1813      	adds	r3, r2, r0
 8010112:	2a01      	cmp	r2, #1
 8010114:	4681      	mov	r9, r0
 8010116:	6123      	str	r3, [r4, #16]
 8010118:	dc02      	bgt.n	8010120 <_printf_float+0x150>
 801011a:	6822      	ldr	r2, [r4, #0]
 801011c:	07d2      	lsls	r2, r2, #31
 801011e:	d501      	bpl.n	8010124 <_printf_float+0x154>
 8010120:	3301      	adds	r3, #1
 8010122:	6123      	str	r3, [r4, #16]
 8010124:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010128:	2b00      	cmp	r3, #0
 801012a:	d0a2      	beq.n	8010072 <_printf_float+0xa2>
 801012c:	232d      	movs	r3, #45	@ 0x2d
 801012e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010132:	e79e      	b.n	8010072 <_printf_float+0xa2>
 8010134:	9a06      	ldr	r2, [sp, #24]
 8010136:	2a47      	cmp	r2, #71	@ 0x47
 8010138:	d1c2      	bne.n	80100c0 <_printf_float+0xf0>
 801013a:	2b00      	cmp	r3, #0
 801013c:	d1c0      	bne.n	80100c0 <_printf_float+0xf0>
 801013e:	2301      	movs	r3, #1
 8010140:	e7bd      	b.n	80100be <_printf_float+0xee>
 8010142:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010146:	d9db      	bls.n	8010100 <_printf_float+0x130>
 8010148:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801014c:	d118      	bne.n	8010180 <_printf_float+0x1b0>
 801014e:	2900      	cmp	r1, #0
 8010150:	6863      	ldr	r3, [r4, #4]
 8010152:	dd0b      	ble.n	801016c <_printf_float+0x19c>
 8010154:	6121      	str	r1, [r4, #16]
 8010156:	b913      	cbnz	r3, 801015e <_printf_float+0x18e>
 8010158:	6822      	ldr	r2, [r4, #0]
 801015a:	07d0      	lsls	r0, r2, #31
 801015c:	d502      	bpl.n	8010164 <_printf_float+0x194>
 801015e:	3301      	adds	r3, #1
 8010160:	440b      	add	r3, r1
 8010162:	6123      	str	r3, [r4, #16]
 8010164:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010166:	f04f 0900 	mov.w	r9, #0
 801016a:	e7db      	b.n	8010124 <_printf_float+0x154>
 801016c:	b913      	cbnz	r3, 8010174 <_printf_float+0x1a4>
 801016e:	6822      	ldr	r2, [r4, #0]
 8010170:	07d2      	lsls	r2, r2, #31
 8010172:	d501      	bpl.n	8010178 <_printf_float+0x1a8>
 8010174:	3302      	adds	r3, #2
 8010176:	e7f4      	b.n	8010162 <_printf_float+0x192>
 8010178:	2301      	movs	r3, #1
 801017a:	e7f2      	b.n	8010162 <_printf_float+0x192>
 801017c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010182:	4299      	cmp	r1, r3
 8010184:	db05      	blt.n	8010192 <_printf_float+0x1c2>
 8010186:	6823      	ldr	r3, [r4, #0]
 8010188:	6121      	str	r1, [r4, #16]
 801018a:	07d8      	lsls	r0, r3, #31
 801018c:	d5ea      	bpl.n	8010164 <_printf_float+0x194>
 801018e:	1c4b      	adds	r3, r1, #1
 8010190:	e7e7      	b.n	8010162 <_printf_float+0x192>
 8010192:	2900      	cmp	r1, #0
 8010194:	bfd4      	ite	le
 8010196:	f1c1 0202 	rsble	r2, r1, #2
 801019a:	2201      	movgt	r2, #1
 801019c:	4413      	add	r3, r2
 801019e:	e7e0      	b.n	8010162 <_printf_float+0x192>
 80101a0:	6823      	ldr	r3, [r4, #0]
 80101a2:	055a      	lsls	r2, r3, #21
 80101a4:	d407      	bmi.n	80101b6 <_printf_float+0x1e6>
 80101a6:	6923      	ldr	r3, [r4, #16]
 80101a8:	4642      	mov	r2, r8
 80101aa:	4631      	mov	r1, r6
 80101ac:	4628      	mov	r0, r5
 80101ae:	47b8      	blx	r7
 80101b0:	3001      	adds	r0, #1
 80101b2:	d12b      	bne.n	801020c <_printf_float+0x23c>
 80101b4:	e767      	b.n	8010086 <_printf_float+0xb6>
 80101b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80101ba:	f240 80dd 	bls.w	8010378 <_printf_float+0x3a8>
 80101be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80101c2:	2200      	movs	r2, #0
 80101c4:	2300      	movs	r3, #0
 80101c6:	f7f0 fca7 	bl	8000b18 <__aeabi_dcmpeq>
 80101ca:	2800      	cmp	r0, #0
 80101cc:	d033      	beq.n	8010236 <_printf_float+0x266>
 80101ce:	4a37      	ldr	r2, [pc, #220]	@ (80102ac <_printf_float+0x2dc>)
 80101d0:	2301      	movs	r3, #1
 80101d2:	4631      	mov	r1, r6
 80101d4:	4628      	mov	r0, r5
 80101d6:	47b8      	blx	r7
 80101d8:	3001      	adds	r0, #1
 80101da:	f43f af54 	beq.w	8010086 <_printf_float+0xb6>
 80101de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80101e2:	4543      	cmp	r3, r8
 80101e4:	db02      	blt.n	80101ec <_printf_float+0x21c>
 80101e6:	6823      	ldr	r3, [r4, #0]
 80101e8:	07d8      	lsls	r0, r3, #31
 80101ea:	d50f      	bpl.n	801020c <_printf_float+0x23c>
 80101ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101f0:	4631      	mov	r1, r6
 80101f2:	4628      	mov	r0, r5
 80101f4:	47b8      	blx	r7
 80101f6:	3001      	adds	r0, #1
 80101f8:	f43f af45 	beq.w	8010086 <_printf_float+0xb6>
 80101fc:	f04f 0900 	mov.w	r9, #0
 8010200:	f108 38ff 	add.w	r8, r8, #4294967295
 8010204:	f104 0a1a 	add.w	sl, r4, #26
 8010208:	45c8      	cmp	r8, r9
 801020a:	dc09      	bgt.n	8010220 <_printf_float+0x250>
 801020c:	6823      	ldr	r3, [r4, #0]
 801020e:	079b      	lsls	r3, r3, #30
 8010210:	f100 8103 	bmi.w	801041a <_printf_float+0x44a>
 8010214:	68e0      	ldr	r0, [r4, #12]
 8010216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010218:	4298      	cmp	r0, r3
 801021a:	bfb8      	it	lt
 801021c:	4618      	movlt	r0, r3
 801021e:	e734      	b.n	801008a <_printf_float+0xba>
 8010220:	2301      	movs	r3, #1
 8010222:	4652      	mov	r2, sl
 8010224:	4631      	mov	r1, r6
 8010226:	4628      	mov	r0, r5
 8010228:	47b8      	blx	r7
 801022a:	3001      	adds	r0, #1
 801022c:	f43f af2b 	beq.w	8010086 <_printf_float+0xb6>
 8010230:	f109 0901 	add.w	r9, r9, #1
 8010234:	e7e8      	b.n	8010208 <_printf_float+0x238>
 8010236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010238:	2b00      	cmp	r3, #0
 801023a:	dc39      	bgt.n	80102b0 <_printf_float+0x2e0>
 801023c:	4a1b      	ldr	r2, [pc, #108]	@ (80102ac <_printf_float+0x2dc>)
 801023e:	2301      	movs	r3, #1
 8010240:	4631      	mov	r1, r6
 8010242:	4628      	mov	r0, r5
 8010244:	47b8      	blx	r7
 8010246:	3001      	adds	r0, #1
 8010248:	f43f af1d 	beq.w	8010086 <_printf_float+0xb6>
 801024c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010250:	ea59 0303 	orrs.w	r3, r9, r3
 8010254:	d102      	bne.n	801025c <_printf_float+0x28c>
 8010256:	6823      	ldr	r3, [r4, #0]
 8010258:	07d9      	lsls	r1, r3, #31
 801025a:	d5d7      	bpl.n	801020c <_printf_float+0x23c>
 801025c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010260:	4631      	mov	r1, r6
 8010262:	4628      	mov	r0, r5
 8010264:	47b8      	blx	r7
 8010266:	3001      	adds	r0, #1
 8010268:	f43f af0d 	beq.w	8010086 <_printf_float+0xb6>
 801026c:	f04f 0a00 	mov.w	sl, #0
 8010270:	f104 0b1a 	add.w	fp, r4, #26
 8010274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010276:	425b      	negs	r3, r3
 8010278:	4553      	cmp	r3, sl
 801027a:	dc01      	bgt.n	8010280 <_printf_float+0x2b0>
 801027c:	464b      	mov	r3, r9
 801027e:	e793      	b.n	80101a8 <_printf_float+0x1d8>
 8010280:	2301      	movs	r3, #1
 8010282:	465a      	mov	r2, fp
 8010284:	4631      	mov	r1, r6
 8010286:	4628      	mov	r0, r5
 8010288:	47b8      	blx	r7
 801028a:	3001      	adds	r0, #1
 801028c:	f43f aefb 	beq.w	8010086 <_printf_float+0xb6>
 8010290:	f10a 0a01 	add.w	sl, sl, #1
 8010294:	e7ee      	b.n	8010274 <_printf_float+0x2a4>
 8010296:	bf00      	nop
 8010298:	7fefffff 	.word	0x7fefffff
 801029c:	08013d51 	.word	0x08013d51
 80102a0:	08013d55 	.word	0x08013d55
 80102a4:	08013d59 	.word	0x08013d59
 80102a8:	08013d5d 	.word	0x08013d5d
 80102ac:	08013d61 	.word	0x08013d61
 80102b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80102b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80102b6:	4553      	cmp	r3, sl
 80102b8:	bfa8      	it	ge
 80102ba:	4653      	movge	r3, sl
 80102bc:	2b00      	cmp	r3, #0
 80102be:	4699      	mov	r9, r3
 80102c0:	dc36      	bgt.n	8010330 <_printf_float+0x360>
 80102c2:	f04f 0b00 	mov.w	fp, #0
 80102c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102ca:	f104 021a 	add.w	r2, r4, #26
 80102ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80102d0:	9306      	str	r3, [sp, #24]
 80102d2:	eba3 0309 	sub.w	r3, r3, r9
 80102d6:	455b      	cmp	r3, fp
 80102d8:	dc31      	bgt.n	801033e <_printf_float+0x36e>
 80102da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102dc:	459a      	cmp	sl, r3
 80102de:	dc3a      	bgt.n	8010356 <_printf_float+0x386>
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	07da      	lsls	r2, r3, #31
 80102e4:	d437      	bmi.n	8010356 <_printf_float+0x386>
 80102e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102e8:	ebaa 0903 	sub.w	r9, sl, r3
 80102ec:	9b06      	ldr	r3, [sp, #24]
 80102ee:	ebaa 0303 	sub.w	r3, sl, r3
 80102f2:	4599      	cmp	r9, r3
 80102f4:	bfa8      	it	ge
 80102f6:	4699      	movge	r9, r3
 80102f8:	f1b9 0f00 	cmp.w	r9, #0
 80102fc:	dc33      	bgt.n	8010366 <_printf_float+0x396>
 80102fe:	f04f 0800 	mov.w	r8, #0
 8010302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010306:	f104 0b1a 	add.w	fp, r4, #26
 801030a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801030c:	ebaa 0303 	sub.w	r3, sl, r3
 8010310:	eba3 0309 	sub.w	r3, r3, r9
 8010314:	4543      	cmp	r3, r8
 8010316:	f77f af79 	ble.w	801020c <_printf_float+0x23c>
 801031a:	2301      	movs	r3, #1
 801031c:	465a      	mov	r2, fp
 801031e:	4631      	mov	r1, r6
 8010320:	4628      	mov	r0, r5
 8010322:	47b8      	blx	r7
 8010324:	3001      	adds	r0, #1
 8010326:	f43f aeae 	beq.w	8010086 <_printf_float+0xb6>
 801032a:	f108 0801 	add.w	r8, r8, #1
 801032e:	e7ec      	b.n	801030a <_printf_float+0x33a>
 8010330:	4642      	mov	r2, r8
 8010332:	4631      	mov	r1, r6
 8010334:	4628      	mov	r0, r5
 8010336:	47b8      	blx	r7
 8010338:	3001      	adds	r0, #1
 801033a:	d1c2      	bne.n	80102c2 <_printf_float+0x2f2>
 801033c:	e6a3      	b.n	8010086 <_printf_float+0xb6>
 801033e:	2301      	movs	r3, #1
 8010340:	4631      	mov	r1, r6
 8010342:	4628      	mov	r0, r5
 8010344:	9206      	str	r2, [sp, #24]
 8010346:	47b8      	blx	r7
 8010348:	3001      	adds	r0, #1
 801034a:	f43f ae9c 	beq.w	8010086 <_printf_float+0xb6>
 801034e:	9a06      	ldr	r2, [sp, #24]
 8010350:	f10b 0b01 	add.w	fp, fp, #1
 8010354:	e7bb      	b.n	80102ce <_printf_float+0x2fe>
 8010356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801035a:	4631      	mov	r1, r6
 801035c:	4628      	mov	r0, r5
 801035e:	47b8      	blx	r7
 8010360:	3001      	adds	r0, #1
 8010362:	d1c0      	bne.n	80102e6 <_printf_float+0x316>
 8010364:	e68f      	b.n	8010086 <_printf_float+0xb6>
 8010366:	9a06      	ldr	r2, [sp, #24]
 8010368:	464b      	mov	r3, r9
 801036a:	4442      	add	r2, r8
 801036c:	4631      	mov	r1, r6
 801036e:	4628      	mov	r0, r5
 8010370:	47b8      	blx	r7
 8010372:	3001      	adds	r0, #1
 8010374:	d1c3      	bne.n	80102fe <_printf_float+0x32e>
 8010376:	e686      	b.n	8010086 <_printf_float+0xb6>
 8010378:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801037c:	f1ba 0f01 	cmp.w	sl, #1
 8010380:	dc01      	bgt.n	8010386 <_printf_float+0x3b6>
 8010382:	07db      	lsls	r3, r3, #31
 8010384:	d536      	bpl.n	80103f4 <_printf_float+0x424>
 8010386:	2301      	movs	r3, #1
 8010388:	4642      	mov	r2, r8
 801038a:	4631      	mov	r1, r6
 801038c:	4628      	mov	r0, r5
 801038e:	47b8      	blx	r7
 8010390:	3001      	adds	r0, #1
 8010392:	f43f ae78 	beq.w	8010086 <_printf_float+0xb6>
 8010396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801039a:	4631      	mov	r1, r6
 801039c:	4628      	mov	r0, r5
 801039e:	47b8      	blx	r7
 80103a0:	3001      	adds	r0, #1
 80103a2:	f43f ae70 	beq.w	8010086 <_printf_float+0xb6>
 80103a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80103aa:	2200      	movs	r2, #0
 80103ac:	2300      	movs	r3, #0
 80103ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80103b2:	f7f0 fbb1 	bl	8000b18 <__aeabi_dcmpeq>
 80103b6:	b9c0      	cbnz	r0, 80103ea <_printf_float+0x41a>
 80103b8:	4653      	mov	r3, sl
 80103ba:	f108 0201 	add.w	r2, r8, #1
 80103be:	4631      	mov	r1, r6
 80103c0:	4628      	mov	r0, r5
 80103c2:	47b8      	blx	r7
 80103c4:	3001      	adds	r0, #1
 80103c6:	d10c      	bne.n	80103e2 <_printf_float+0x412>
 80103c8:	e65d      	b.n	8010086 <_printf_float+0xb6>
 80103ca:	2301      	movs	r3, #1
 80103cc:	465a      	mov	r2, fp
 80103ce:	4631      	mov	r1, r6
 80103d0:	4628      	mov	r0, r5
 80103d2:	47b8      	blx	r7
 80103d4:	3001      	adds	r0, #1
 80103d6:	f43f ae56 	beq.w	8010086 <_printf_float+0xb6>
 80103da:	f108 0801 	add.w	r8, r8, #1
 80103de:	45d0      	cmp	r8, sl
 80103e0:	dbf3      	blt.n	80103ca <_printf_float+0x3fa>
 80103e2:	464b      	mov	r3, r9
 80103e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80103e8:	e6df      	b.n	80101aa <_printf_float+0x1da>
 80103ea:	f04f 0800 	mov.w	r8, #0
 80103ee:	f104 0b1a 	add.w	fp, r4, #26
 80103f2:	e7f4      	b.n	80103de <_printf_float+0x40e>
 80103f4:	2301      	movs	r3, #1
 80103f6:	4642      	mov	r2, r8
 80103f8:	e7e1      	b.n	80103be <_printf_float+0x3ee>
 80103fa:	2301      	movs	r3, #1
 80103fc:	464a      	mov	r2, r9
 80103fe:	4631      	mov	r1, r6
 8010400:	4628      	mov	r0, r5
 8010402:	47b8      	blx	r7
 8010404:	3001      	adds	r0, #1
 8010406:	f43f ae3e 	beq.w	8010086 <_printf_float+0xb6>
 801040a:	f108 0801 	add.w	r8, r8, #1
 801040e:	68e3      	ldr	r3, [r4, #12]
 8010410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010412:	1a5b      	subs	r3, r3, r1
 8010414:	4543      	cmp	r3, r8
 8010416:	dcf0      	bgt.n	80103fa <_printf_float+0x42a>
 8010418:	e6fc      	b.n	8010214 <_printf_float+0x244>
 801041a:	f04f 0800 	mov.w	r8, #0
 801041e:	f104 0919 	add.w	r9, r4, #25
 8010422:	e7f4      	b.n	801040e <_printf_float+0x43e>

08010424 <_printf_common>:
 8010424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010428:	4616      	mov	r6, r2
 801042a:	4698      	mov	r8, r3
 801042c:	688a      	ldr	r2, [r1, #8]
 801042e:	690b      	ldr	r3, [r1, #16]
 8010430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010434:	4293      	cmp	r3, r2
 8010436:	bfb8      	it	lt
 8010438:	4613      	movlt	r3, r2
 801043a:	6033      	str	r3, [r6, #0]
 801043c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010440:	4607      	mov	r7, r0
 8010442:	460c      	mov	r4, r1
 8010444:	b10a      	cbz	r2, 801044a <_printf_common+0x26>
 8010446:	3301      	adds	r3, #1
 8010448:	6033      	str	r3, [r6, #0]
 801044a:	6823      	ldr	r3, [r4, #0]
 801044c:	0699      	lsls	r1, r3, #26
 801044e:	bf42      	ittt	mi
 8010450:	6833      	ldrmi	r3, [r6, #0]
 8010452:	3302      	addmi	r3, #2
 8010454:	6033      	strmi	r3, [r6, #0]
 8010456:	6825      	ldr	r5, [r4, #0]
 8010458:	f015 0506 	ands.w	r5, r5, #6
 801045c:	d106      	bne.n	801046c <_printf_common+0x48>
 801045e:	f104 0a19 	add.w	sl, r4, #25
 8010462:	68e3      	ldr	r3, [r4, #12]
 8010464:	6832      	ldr	r2, [r6, #0]
 8010466:	1a9b      	subs	r3, r3, r2
 8010468:	42ab      	cmp	r3, r5
 801046a:	dc26      	bgt.n	80104ba <_printf_common+0x96>
 801046c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010470:	6822      	ldr	r2, [r4, #0]
 8010472:	3b00      	subs	r3, #0
 8010474:	bf18      	it	ne
 8010476:	2301      	movne	r3, #1
 8010478:	0692      	lsls	r2, r2, #26
 801047a:	d42b      	bmi.n	80104d4 <_printf_common+0xb0>
 801047c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010480:	4641      	mov	r1, r8
 8010482:	4638      	mov	r0, r7
 8010484:	47c8      	blx	r9
 8010486:	3001      	adds	r0, #1
 8010488:	d01e      	beq.n	80104c8 <_printf_common+0xa4>
 801048a:	6823      	ldr	r3, [r4, #0]
 801048c:	6922      	ldr	r2, [r4, #16]
 801048e:	f003 0306 	and.w	r3, r3, #6
 8010492:	2b04      	cmp	r3, #4
 8010494:	bf02      	ittt	eq
 8010496:	68e5      	ldreq	r5, [r4, #12]
 8010498:	6833      	ldreq	r3, [r6, #0]
 801049a:	1aed      	subeq	r5, r5, r3
 801049c:	68a3      	ldr	r3, [r4, #8]
 801049e:	bf0c      	ite	eq
 80104a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104a4:	2500      	movne	r5, #0
 80104a6:	4293      	cmp	r3, r2
 80104a8:	bfc4      	itt	gt
 80104aa:	1a9b      	subgt	r3, r3, r2
 80104ac:	18ed      	addgt	r5, r5, r3
 80104ae:	2600      	movs	r6, #0
 80104b0:	341a      	adds	r4, #26
 80104b2:	42b5      	cmp	r5, r6
 80104b4:	d11a      	bne.n	80104ec <_printf_common+0xc8>
 80104b6:	2000      	movs	r0, #0
 80104b8:	e008      	b.n	80104cc <_printf_common+0xa8>
 80104ba:	2301      	movs	r3, #1
 80104bc:	4652      	mov	r2, sl
 80104be:	4641      	mov	r1, r8
 80104c0:	4638      	mov	r0, r7
 80104c2:	47c8      	blx	r9
 80104c4:	3001      	adds	r0, #1
 80104c6:	d103      	bne.n	80104d0 <_printf_common+0xac>
 80104c8:	f04f 30ff 	mov.w	r0, #4294967295
 80104cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104d0:	3501      	adds	r5, #1
 80104d2:	e7c6      	b.n	8010462 <_printf_common+0x3e>
 80104d4:	18e1      	adds	r1, r4, r3
 80104d6:	1c5a      	adds	r2, r3, #1
 80104d8:	2030      	movs	r0, #48	@ 0x30
 80104da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80104de:	4422      	add	r2, r4
 80104e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80104e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80104e8:	3302      	adds	r3, #2
 80104ea:	e7c7      	b.n	801047c <_printf_common+0x58>
 80104ec:	2301      	movs	r3, #1
 80104ee:	4622      	mov	r2, r4
 80104f0:	4641      	mov	r1, r8
 80104f2:	4638      	mov	r0, r7
 80104f4:	47c8      	blx	r9
 80104f6:	3001      	adds	r0, #1
 80104f8:	d0e6      	beq.n	80104c8 <_printf_common+0xa4>
 80104fa:	3601      	adds	r6, #1
 80104fc:	e7d9      	b.n	80104b2 <_printf_common+0x8e>
	...

08010500 <_printf_i>:
 8010500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010504:	7e0f      	ldrb	r7, [r1, #24]
 8010506:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010508:	2f78      	cmp	r7, #120	@ 0x78
 801050a:	4691      	mov	r9, r2
 801050c:	4680      	mov	r8, r0
 801050e:	460c      	mov	r4, r1
 8010510:	469a      	mov	sl, r3
 8010512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010516:	d807      	bhi.n	8010528 <_printf_i+0x28>
 8010518:	2f62      	cmp	r7, #98	@ 0x62
 801051a:	d80a      	bhi.n	8010532 <_printf_i+0x32>
 801051c:	2f00      	cmp	r7, #0
 801051e:	f000 80d2 	beq.w	80106c6 <_printf_i+0x1c6>
 8010522:	2f58      	cmp	r7, #88	@ 0x58
 8010524:	f000 80b9 	beq.w	801069a <_printf_i+0x19a>
 8010528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801052c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010530:	e03a      	b.n	80105a8 <_printf_i+0xa8>
 8010532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010536:	2b15      	cmp	r3, #21
 8010538:	d8f6      	bhi.n	8010528 <_printf_i+0x28>
 801053a:	a101      	add	r1, pc, #4	@ (adr r1, 8010540 <_printf_i+0x40>)
 801053c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010540:	08010599 	.word	0x08010599
 8010544:	080105ad 	.word	0x080105ad
 8010548:	08010529 	.word	0x08010529
 801054c:	08010529 	.word	0x08010529
 8010550:	08010529 	.word	0x08010529
 8010554:	08010529 	.word	0x08010529
 8010558:	080105ad 	.word	0x080105ad
 801055c:	08010529 	.word	0x08010529
 8010560:	08010529 	.word	0x08010529
 8010564:	08010529 	.word	0x08010529
 8010568:	08010529 	.word	0x08010529
 801056c:	080106ad 	.word	0x080106ad
 8010570:	080105d7 	.word	0x080105d7
 8010574:	08010667 	.word	0x08010667
 8010578:	08010529 	.word	0x08010529
 801057c:	08010529 	.word	0x08010529
 8010580:	080106cf 	.word	0x080106cf
 8010584:	08010529 	.word	0x08010529
 8010588:	080105d7 	.word	0x080105d7
 801058c:	08010529 	.word	0x08010529
 8010590:	08010529 	.word	0x08010529
 8010594:	0801066f 	.word	0x0801066f
 8010598:	6833      	ldr	r3, [r6, #0]
 801059a:	1d1a      	adds	r2, r3, #4
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	6032      	str	r2, [r6, #0]
 80105a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80105a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80105a8:	2301      	movs	r3, #1
 80105aa:	e09d      	b.n	80106e8 <_printf_i+0x1e8>
 80105ac:	6833      	ldr	r3, [r6, #0]
 80105ae:	6820      	ldr	r0, [r4, #0]
 80105b0:	1d19      	adds	r1, r3, #4
 80105b2:	6031      	str	r1, [r6, #0]
 80105b4:	0606      	lsls	r6, r0, #24
 80105b6:	d501      	bpl.n	80105bc <_printf_i+0xbc>
 80105b8:	681d      	ldr	r5, [r3, #0]
 80105ba:	e003      	b.n	80105c4 <_printf_i+0xc4>
 80105bc:	0645      	lsls	r5, r0, #25
 80105be:	d5fb      	bpl.n	80105b8 <_printf_i+0xb8>
 80105c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80105c4:	2d00      	cmp	r5, #0
 80105c6:	da03      	bge.n	80105d0 <_printf_i+0xd0>
 80105c8:	232d      	movs	r3, #45	@ 0x2d
 80105ca:	426d      	negs	r5, r5
 80105cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105d0:	4859      	ldr	r0, [pc, #356]	@ (8010738 <_printf_i+0x238>)
 80105d2:	230a      	movs	r3, #10
 80105d4:	e011      	b.n	80105fa <_printf_i+0xfa>
 80105d6:	6821      	ldr	r1, [r4, #0]
 80105d8:	6833      	ldr	r3, [r6, #0]
 80105da:	0608      	lsls	r0, r1, #24
 80105dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80105e0:	d402      	bmi.n	80105e8 <_printf_i+0xe8>
 80105e2:	0649      	lsls	r1, r1, #25
 80105e4:	bf48      	it	mi
 80105e6:	b2ad      	uxthmi	r5, r5
 80105e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80105ea:	4853      	ldr	r0, [pc, #332]	@ (8010738 <_printf_i+0x238>)
 80105ec:	6033      	str	r3, [r6, #0]
 80105ee:	bf14      	ite	ne
 80105f0:	230a      	movne	r3, #10
 80105f2:	2308      	moveq	r3, #8
 80105f4:	2100      	movs	r1, #0
 80105f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80105fa:	6866      	ldr	r6, [r4, #4]
 80105fc:	60a6      	str	r6, [r4, #8]
 80105fe:	2e00      	cmp	r6, #0
 8010600:	bfa2      	ittt	ge
 8010602:	6821      	ldrge	r1, [r4, #0]
 8010604:	f021 0104 	bicge.w	r1, r1, #4
 8010608:	6021      	strge	r1, [r4, #0]
 801060a:	b90d      	cbnz	r5, 8010610 <_printf_i+0x110>
 801060c:	2e00      	cmp	r6, #0
 801060e:	d04b      	beq.n	80106a8 <_printf_i+0x1a8>
 8010610:	4616      	mov	r6, r2
 8010612:	fbb5 f1f3 	udiv	r1, r5, r3
 8010616:	fb03 5711 	mls	r7, r3, r1, r5
 801061a:	5dc7      	ldrb	r7, [r0, r7]
 801061c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010620:	462f      	mov	r7, r5
 8010622:	42bb      	cmp	r3, r7
 8010624:	460d      	mov	r5, r1
 8010626:	d9f4      	bls.n	8010612 <_printf_i+0x112>
 8010628:	2b08      	cmp	r3, #8
 801062a:	d10b      	bne.n	8010644 <_printf_i+0x144>
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	07df      	lsls	r7, r3, #31
 8010630:	d508      	bpl.n	8010644 <_printf_i+0x144>
 8010632:	6923      	ldr	r3, [r4, #16]
 8010634:	6861      	ldr	r1, [r4, #4]
 8010636:	4299      	cmp	r1, r3
 8010638:	bfde      	ittt	le
 801063a:	2330      	movle	r3, #48	@ 0x30
 801063c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010640:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010644:	1b92      	subs	r2, r2, r6
 8010646:	6122      	str	r2, [r4, #16]
 8010648:	f8cd a000 	str.w	sl, [sp]
 801064c:	464b      	mov	r3, r9
 801064e:	aa03      	add	r2, sp, #12
 8010650:	4621      	mov	r1, r4
 8010652:	4640      	mov	r0, r8
 8010654:	f7ff fee6 	bl	8010424 <_printf_common>
 8010658:	3001      	adds	r0, #1
 801065a:	d14a      	bne.n	80106f2 <_printf_i+0x1f2>
 801065c:	f04f 30ff 	mov.w	r0, #4294967295
 8010660:	b004      	add	sp, #16
 8010662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010666:	6823      	ldr	r3, [r4, #0]
 8010668:	f043 0320 	orr.w	r3, r3, #32
 801066c:	6023      	str	r3, [r4, #0]
 801066e:	4833      	ldr	r0, [pc, #204]	@ (801073c <_printf_i+0x23c>)
 8010670:	2778      	movs	r7, #120	@ 0x78
 8010672:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010676:	6823      	ldr	r3, [r4, #0]
 8010678:	6831      	ldr	r1, [r6, #0]
 801067a:	061f      	lsls	r7, r3, #24
 801067c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010680:	d402      	bmi.n	8010688 <_printf_i+0x188>
 8010682:	065f      	lsls	r7, r3, #25
 8010684:	bf48      	it	mi
 8010686:	b2ad      	uxthmi	r5, r5
 8010688:	6031      	str	r1, [r6, #0]
 801068a:	07d9      	lsls	r1, r3, #31
 801068c:	bf44      	itt	mi
 801068e:	f043 0320 	orrmi.w	r3, r3, #32
 8010692:	6023      	strmi	r3, [r4, #0]
 8010694:	b11d      	cbz	r5, 801069e <_printf_i+0x19e>
 8010696:	2310      	movs	r3, #16
 8010698:	e7ac      	b.n	80105f4 <_printf_i+0xf4>
 801069a:	4827      	ldr	r0, [pc, #156]	@ (8010738 <_printf_i+0x238>)
 801069c:	e7e9      	b.n	8010672 <_printf_i+0x172>
 801069e:	6823      	ldr	r3, [r4, #0]
 80106a0:	f023 0320 	bic.w	r3, r3, #32
 80106a4:	6023      	str	r3, [r4, #0]
 80106a6:	e7f6      	b.n	8010696 <_printf_i+0x196>
 80106a8:	4616      	mov	r6, r2
 80106aa:	e7bd      	b.n	8010628 <_printf_i+0x128>
 80106ac:	6833      	ldr	r3, [r6, #0]
 80106ae:	6825      	ldr	r5, [r4, #0]
 80106b0:	6961      	ldr	r1, [r4, #20]
 80106b2:	1d18      	adds	r0, r3, #4
 80106b4:	6030      	str	r0, [r6, #0]
 80106b6:	062e      	lsls	r6, r5, #24
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	d501      	bpl.n	80106c0 <_printf_i+0x1c0>
 80106bc:	6019      	str	r1, [r3, #0]
 80106be:	e002      	b.n	80106c6 <_printf_i+0x1c6>
 80106c0:	0668      	lsls	r0, r5, #25
 80106c2:	d5fb      	bpl.n	80106bc <_printf_i+0x1bc>
 80106c4:	8019      	strh	r1, [r3, #0]
 80106c6:	2300      	movs	r3, #0
 80106c8:	6123      	str	r3, [r4, #16]
 80106ca:	4616      	mov	r6, r2
 80106cc:	e7bc      	b.n	8010648 <_printf_i+0x148>
 80106ce:	6833      	ldr	r3, [r6, #0]
 80106d0:	1d1a      	adds	r2, r3, #4
 80106d2:	6032      	str	r2, [r6, #0]
 80106d4:	681e      	ldr	r6, [r3, #0]
 80106d6:	6862      	ldr	r2, [r4, #4]
 80106d8:	2100      	movs	r1, #0
 80106da:	4630      	mov	r0, r6
 80106dc:	f7ef fda0 	bl	8000220 <memchr>
 80106e0:	b108      	cbz	r0, 80106e6 <_printf_i+0x1e6>
 80106e2:	1b80      	subs	r0, r0, r6
 80106e4:	6060      	str	r0, [r4, #4]
 80106e6:	6863      	ldr	r3, [r4, #4]
 80106e8:	6123      	str	r3, [r4, #16]
 80106ea:	2300      	movs	r3, #0
 80106ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106f0:	e7aa      	b.n	8010648 <_printf_i+0x148>
 80106f2:	6923      	ldr	r3, [r4, #16]
 80106f4:	4632      	mov	r2, r6
 80106f6:	4649      	mov	r1, r9
 80106f8:	4640      	mov	r0, r8
 80106fa:	47d0      	blx	sl
 80106fc:	3001      	adds	r0, #1
 80106fe:	d0ad      	beq.n	801065c <_printf_i+0x15c>
 8010700:	6823      	ldr	r3, [r4, #0]
 8010702:	079b      	lsls	r3, r3, #30
 8010704:	d413      	bmi.n	801072e <_printf_i+0x22e>
 8010706:	68e0      	ldr	r0, [r4, #12]
 8010708:	9b03      	ldr	r3, [sp, #12]
 801070a:	4298      	cmp	r0, r3
 801070c:	bfb8      	it	lt
 801070e:	4618      	movlt	r0, r3
 8010710:	e7a6      	b.n	8010660 <_printf_i+0x160>
 8010712:	2301      	movs	r3, #1
 8010714:	4632      	mov	r2, r6
 8010716:	4649      	mov	r1, r9
 8010718:	4640      	mov	r0, r8
 801071a:	47d0      	blx	sl
 801071c:	3001      	adds	r0, #1
 801071e:	d09d      	beq.n	801065c <_printf_i+0x15c>
 8010720:	3501      	adds	r5, #1
 8010722:	68e3      	ldr	r3, [r4, #12]
 8010724:	9903      	ldr	r1, [sp, #12]
 8010726:	1a5b      	subs	r3, r3, r1
 8010728:	42ab      	cmp	r3, r5
 801072a:	dcf2      	bgt.n	8010712 <_printf_i+0x212>
 801072c:	e7eb      	b.n	8010706 <_printf_i+0x206>
 801072e:	2500      	movs	r5, #0
 8010730:	f104 0619 	add.w	r6, r4, #25
 8010734:	e7f5      	b.n	8010722 <_printf_i+0x222>
 8010736:	bf00      	nop
 8010738:	08013d63 	.word	0x08013d63
 801073c:	08013d74 	.word	0x08013d74

08010740 <_scanf_float>:
 8010740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010744:	b087      	sub	sp, #28
 8010746:	4617      	mov	r7, r2
 8010748:	9303      	str	r3, [sp, #12]
 801074a:	688b      	ldr	r3, [r1, #8]
 801074c:	1e5a      	subs	r2, r3, #1
 801074e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010752:	bf81      	itttt	hi
 8010754:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010758:	eb03 0b05 	addhi.w	fp, r3, r5
 801075c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010760:	608b      	strhi	r3, [r1, #8]
 8010762:	680b      	ldr	r3, [r1, #0]
 8010764:	460a      	mov	r2, r1
 8010766:	f04f 0500 	mov.w	r5, #0
 801076a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801076e:	f842 3b1c 	str.w	r3, [r2], #28
 8010772:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010776:	4680      	mov	r8, r0
 8010778:	460c      	mov	r4, r1
 801077a:	bf98      	it	ls
 801077c:	f04f 0b00 	movls.w	fp, #0
 8010780:	9201      	str	r2, [sp, #4]
 8010782:	4616      	mov	r6, r2
 8010784:	46aa      	mov	sl, r5
 8010786:	46a9      	mov	r9, r5
 8010788:	9502      	str	r5, [sp, #8]
 801078a:	68a2      	ldr	r2, [r4, #8]
 801078c:	b152      	cbz	r2, 80107a4 <_scanf_float+0x64>
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	2b4e      	cmp	r3, #78	@ 0x4e
 8010794:	d864      	bhi.n	8010860 <_scanf_float+0x120>
 8010796:	2b40      	cmp	r3, #64	@ 0x40
 8010798:	d83c      	bhi.n	8010814 <_scanf_float+0xd4>
 801079a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801079e:	b2c8      	uxtb	r0, r1
 80107a0:	280e      	cmp	r0, #14
 80107a2:	d93a      	bls.n	801081a <_scanf_float+0xda>
 80107a4:	f1b9 0f00 	cmp.w	r9, #0
 80107a8:	d003      	beq.n	80107b2 <_scanf_float+0x72>
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80107b0:	6023      	str	r3, [r4, #0]
 80107b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80107b6:	f1ba 0f01 	cmp.w	sl, #1
 80107ba:	f200 8117 	bhi.w	80109ec <_scanf_float+0x2ac>
 80107be:	9b01      	ldr	r3, [sp, #4]
 80107c0:	429e      	cmp	r6, r3
 80107c2:	f200 8108 	bhi.w	80109d6 <_scanf_float+0x296>
 80107c6:	2001      	movs	r0, #1
 80107c8:	b007      	add	sp, #28
 80107ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ce:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80107d2:	2a0d      	cmp	r2, #13
 80107d4:	d8e6      	bhi.n	80107a4 <_scanf_float+0x64>
 80107d6:	a101      	add	r1, pc, #4	@ (adr r1, 80107dc <_scanf_float+0x9c>)
 80107d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80107dc:	08010923 	.word	0x08010923
 80107e0:	080107a5 	.word	0x080107a5
 80107e4:	080107a5 	.word	0x080107a5
 80107e8:	080107a5 	.word	0x080107a5
 80107ec:	08010983 	.word	0x08010983
 80107f0:	0801095b 	.word	0x0801095b
 80107f4:	080107a5 	.word	0x080107a5
 80107f8:	080107a5 	.word	0x080107a5
 80107fc:	08010931 	.word	0x08010931
 8010800:	080107a5 	.word	0x080107a5
 8010804:	080107a5 	.word	0x080107a5
 8010808:	080107a5 	.word	0x080107a5
 801080c:	080107a5 	.word	0x080107a5
 8010810:	080108e9 	.word	0x080108e9
 8010814:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010818:	e7db      	b.n	80107d2 <_scanf_float+0x92>
 801081a:	290e      	cmp	r1, #14
 801081c:	d8c2      	bhi.n	80107a4 <_scanf_float+0x64>
 801081e:	a001      	add	r0, pc, #4	@ (adr r0, 8010824 <_scanf_float+0xe4>)
 8010820:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010824:	080108d9 	.word	0x080108d9
 8010828:	080107a5 	.word	0x080107a5
 801082c:	080108d9 	.word	0x080108d9
 8010830:	0801096f 	.word	0x0801096f
 8010834:	080107a5 	.word	0x080107a5
 8010838:	08010881 	.word	0x08010881
 801083c:	080108bf 	.word	0x080108bf
 8010840:	080108bf 	.word	0x080108bf
 8010844:	080108bf 	.word	0x080108bf
 8010848:	080108bf 	.word	0x080108bf
 801084c:	080108bf 	.word	0x080108bf
 8010850:	080108bf 	.word	0x080108bf
 8010854:	080108bf 	.word	0x080108bf
 8010858:	080108bf 	.word	0x080108bf
 801085c:	080108bf 	.word	0x080108bf
 8010860:	2b6e      	cmp	r3, #110	@ 0x6e
 8010862:	d809      	bhi.n	8010878 <_scanf_float+0x138>
 8010864:	2b60      	cmp	r3, #96	@ 0x60
 8010866:	d8b2      	bhi.n	80107ce <_scanf_float+0x8e>
 8010868:	2b54      	cmp	r3, #84	@ 0x54
 801086a:	d07b      	beq.n	8010964 <_scanf_float+0x224>
 801086c:	2b59      	cmp	r3, #89	@ 0x59
 801086e:	d199      	bne.n	80107a4 <_scanf_float+0x64>
 8010870:	2d07      	cmp	r5, #7
 8010872:	d197      	bne.n	80107a4 <_scanf_float+0x64>
 8010874:	2508      	movs	r5, #8
 8010876:	e02c      	b.n	80108d2 <_scanf_float+0x192>
 8010878:	2b74      	cmp	r3, #116	@ 0x74
 801087a:	d073      	beq.n	8010964 <_scanf_float+0x224>
 801087c:	2b79      	cmp	r3, #121	@ 0x79
 801087e:	e7f6      	b.n	801086e <_scanf_float+0x12e>
 8010880:	6821      	ldr	r1, [r4, #0]
 8010882:	05c8      	lsls	r0, r1, #23
 8010884:	d51b      	bpl.n	80108be <_scanf_float+0x17e>
 8010886:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801088a:	6021      	str	r1, [r4, #0]
 801088c:	f109 0901 	add.w	r9, r9, #1
 8010890:	f1bb 0f00 	cmp.w	fp, #0
 8010894:	d003      	beq.n	801089e <_scanf_float+0x15e>
 8010896:	3201      	adds	r2, #1
 8010898:	f10b 3bff 	add.w	fp, fp, #4294967295
 801089c:	60a2      	str	r2, [r4, #8]
 801089e:	68a3      	ldr	r3, [r4, #8]
 80108a0:	3b01      	subs	r3, #1
 80108a2:	60a3      	str	r3, [r4, #8]
 80108a4:	6923      	ldr	r3, [r4, #16]
 80108a6:	3301      	adds	r3, #1
 80108a8:	6123      	str	r3, [r4, #16]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	3b01      	subs	r3, #1
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	607b      	str	r3, [r7, #4]
 80108b2:	f340 8087 	ble.w	80109c4 <_scanf_float+0x284>
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	3301      	adds	r3, #1
 80108ba:	603b      	str	r3, [r7, #0]
 80108bc:	e765      	b.n	801078a <_scanf_float+0x4a>
 80108be:	eb1a 0105 	adds.w	r1, sl, r5
 80108c2:	f47f af6f 	bne.w	80107a4 <_scanf_float+0x64>
 80108c6:	6822      	ldr	r2, [r4, #0]
 80108c8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80108cc:	6022      	str	r2, [r4, #0]
 80108ce:	460d      	mov	r5, r1
 80108d0:	468a      	mov	sl, r1
 80108d2:	f806 3b01 	strb.w	r3, [r6], #1
 80108d6:	e7e2      	b.n	801089e <_scanf_float+0x15e>
 80108d8:	6822      	ldr	r2, [r4, #0]
 80108da:	0610      	lsls	r0, r2, #24
 80108dc:	f57f af62 	bpl.w	80107a4 <_scanf_float+0x64>
 80108e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80108e4:	6022      	str	r2, [r4, #0]
 80108e6:	e7f4      	b.n	80108d2 <_scanf_float+0x192>
 80108e8:	f1ba 0f00 	cmp.w	sl, #0
 80108ec:	d10e      	bne.n	801090c <_scanf_float+0x1cc>
 80108ee:	f1b9 0f00 	cmp.w	r9, #0
 80108f2:	d10e      	bne.n	8010912 <_scanf_float+0x1d2>
 80108f4:	6822      	ldr	r2, [r4, #0]
 80108f6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80108fa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80108fe:	d108      	bne.n	8010912 <_scanf_float+0x1d2>
 8010900:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010904:	6022      	str	r2, [r4, #0]
 8010906:	f04f 0a01 	mov.w	sl, #1
 801090a:	e7e2      	b.n	80108d2 <_scanf_float+0x192>
 801090c:	f1ba 0f02 	cmp.w	sl, #2
 8010910:	d055      	beq.n	80109be <_scanf_float+0x27e>
 8010912:	2d01      	cmp	r5, #1
 8010914:	d002      	beq.n	801091c <_scanf_float+0x1dc>
 8010916:	2d04      	cmp	r5, #4
 8010918:	f47f af44 	bne.w	80107a4 <_scanf_float+0x64>
 801091c:	3501      	adds	r5, #1
 801091e:	b2ed      	uxtb	r5, r5
 8010920:	e7d7      	b.n	80108d2 <_scanf_float+0x192>
 8010922:	f1ba 0f01 	cmp.w	sl, #1
 8010926:	f47f af3d 	bne.w	80107a4 <_scanf_float+0x64>
 801092a:	f04f 0a02 	mov.w	sl, #2
 801092e:	e7d0      	b.n	80108d2 <_scanf_float+0x192>
 8010930:	b97d      	cbnz	r5, 8010952 <_scanf_float+0x212>
 8010932:	f1b9 0f00 	cmp.w	r9, #0
 8010936:	f47f af38 	bne.w	80107aa <_scanf_float+0x6a>
 801093a:	6822      	ldr	r2, [r4, #0]
 801093c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010940:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010944:	f040 8108 	bne.w	8010b58 <_scanf_float+0x418>
 8010948:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801094c:	6022      	str	r2, [r4, #0]
 801094e:	2501      	movs	r5, #1
 8010950:	e7bf      	b.n	80108d2 <_scanf_float+0x192>
 8010952:	2d03      	cmp	r5, #3
 8010954:	d0e2      	beq.n	801091c <_scanf_float+0x1dc>
 8010956:	2d05      	cmp	r5, #5
 8010958:	e7de      	b.n	8010918 <_scanf_float+0x1d8>
 801095a:	2d02      	cmp	r5, #2
 801095c:	f47f af22 	bne.w	80107a4 <_scanf_float+0x64>
 8010960:	2503      	movs	r5, #3
 8010962:	e7b6      	b.n	80108d2 <_scanf_float+0x192>
 8010964:	2d06      	cmp	r5, #6
 8010966:	f47f af1d 	bne.w	80107a4 <_scanf_float+0x64>
 801096a:	2507      	movs	r5, #7
 801096c:	e7b1      	b.n	80108d2 <_scanf_float+0x192>
 801096e:	6822      	ldr	r2, [r4, #0]
 8010970:	0591      	lsls	r1, r2, #22
 8010972:	f57f af17 	bpl.w	80107a4 <_scanf_float+0x64>
 8010976:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801097a:	6022      	str	r2, [r4, #0]
 801097c:	f8cd 9008 	str.w	r9, [sp, #8]
 8010980:	e7a7      	b.n	80108d2 <_scanf_float+0x192>
 8010982:	6822      	ldr	r2, [r4, #0]
 8010984:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010988:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801098c:	d006      	beq.n	801099c <_scanf_float+0x25c>
 801098e:	0550      	lsls	r0, r2, #21
 8010990:	f57f af08 	bpl.w	80107a4 <_scanf_float+0x64>
 8010994:	f1b9 0f00 	cmp.w	r9, #0
 8010998:	f000 80de 	beq.w	8010b58 <_scanf_float+0x418>
 801099c:	0591      	lsls	r1, r2, #22
 801099e:	bf58      	it	pl
 80109a0:	9902      	ldrpl	r1, [sp, #8]
 80109a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80109a6:	bf58      	it	pl
 80109a8:	eba9 0101 	subpl.w	r1, r9, r1
 80109ac:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80109b0:	bf58      	it	pl
 80109b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80109b6:	6022      	str	r2, [r4, #0]
 80109b8:	f04f 0900 	mov.w	r9, #0
 80109bc:	e789      	b.n	80108d2 <_scanf_float+0x192>
 80109be:	f04f 0a03 	mov.w	sl, #3
 80109c2:	e786      	b.n	80108d2 <_scanf_float+0x192>
 80109c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80109c8:	4639      	mov	r1, r7
 80109ca:	4640      	mov	r0, r8
 80109cc:	4798      	blx	r3
 80109ce:	2800      	cmp	r0, #0
 80109d0:	f43f aedb 	beq.w	801078a <_scanf_float+0x4a>
 80109d4:	e6e6      	b.n	80107a4 <_scanf_float+0x64>
 80109d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80109da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80109de:	463a      	mov	r2, r7
 80109e0:	4640      	mov	r0, r8
 80109e2:	4798      	blx	r3
 80109e4:	6923      	ldr	r3, [r4, #16]
 80109e6:	3b01      	subs	r3, #1
 80109e8:	6123      	str	r3, [r4, #16]
 80109ea:	e6e8      	b.n	80107be <_scanf_float+0x7e>
 80109ec:	1e6b      	subs	r3, r5, #1
 80109ee:	2b06      	cmp	r3, #6
 80109f0:	d824      	bhi.n	8010a3c <_scanf_float+0x2fc>
 80109f2:	2d02      	cmp	r5, #2
 80109f4:	d836      	bhi.n	8010a64 <_scanf_float+0x324>
 80109f6:	9b01      	ldr	r3, [sp, #4]
 80109f8:	429e      	cmp	r6, r3
 80109fa:	f67f aee4 	bls.w	80107c6 <_scanf_float+0x86>
 80109fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a06:	463a      	mov	r2, r7
 8010a08:	4640      	mov	r0, r8
 8010a0a:	4798      	blx	r3
 8010a0c:	6923      	ldr	r3, [r4, #16]
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	6123      	str	r3, [r4, #16]
 8010a12:	e7f0      	b.n	80109f6 <_scanf_float+0x2b6>
 8010a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010a1c:	463a      	mov	r2, r7
 8010a1e:	4640      	mov	r0, r8
 8010a20:	4798      	blx	r3
 8010a22:	6923      	ldr	r3, [r4, #16]
 8010a24:	3b01      	subs	r3, #1
 8010a26:	6123      	str	r3, [r4, #16]
 8010a28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a2c:	fa5f fa8a 	uxtb.w	sl, sl
 8010a30:	f1ba 0f02 	cmp.w	sl, #2
 8010a34:	d1ee      	bne.n	8010a14 <_scanf_float+0x2d4>
 8010a36:	3d03      	subs	r5, #3
 8010a38:	b2ed      	uxtb	r5, r5
 8010a3a:	1b76      	subs	r6, r6, r5
 8010a3c:	6823      	ldr	r3, [r4, #0]
 8010a3e:	05da      	lsls	r2, r3, #23
 8010a40:	d530      	bpl.n	8010aa4 <_scanf_float+0x364>
 8010a42:	055b      	lsls	r3, r3, #21
 8010a44:	d511      	bpl.n	8010a6a <_scanf_float+0x32a>
 8010a46:	9b01      	ldr	r3, [sp, #4]
 8010a48:	429e      	cmp	r6, r3
 8010a4a:	f67f aebc 	bls.w	80107c6 <_scanf_float+0x86>
 8010a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a56:	463a      	mov	r2, r7
 8010a58:	4640      	mov	r0, r8
 8010a5a:	4798      	blx	r3
 8010a5c:	6923      	ldr	r3, [r4, #16]
 8010a5e:	3b01      	subs	r3, #1
 8010a60:	6123      	str	r3, [r4, #16]
 8010a62:	e7f0      	b.n	8010a46 <_scanf_float+0x306>
 8010a64:	46aa      	mov	sl, r5
 8010a66:	46b3      	mov	fp, r6
 8010a68:	e7de      	b.n	8010a28 <_scanf_float+0x2e8>
 8010a6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010a6e:	6923      	ldr	r3, [r4, #16]
 8010a70:	2965      	cmp	r1, #101	@ 0x65
 8010a72:	f103 33ff 	add.w	r3, r3, #4294967295
 8010a76:	f106 35ff 	add.w	r5, r6, #4294967295
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	d00c      	beq.n	8010a98 <_scanf_float+0x358>
 8010a7e:	2945      	cmp	r1, #69	@ 0x45
 8010a80:	d00a      	beq.n	8010a98 <_scanf_float+0x358>
 8010a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a86:	463a      	mov	r2, r7
 8010a88:	4640      	mov	r0, r8
 8010a8a:	4798      	blx	r3
 8010a8c:	6923      	ldr	r3, [r4, #16]
 8010a8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010a92:	3b01      	subs	r3, #1
 8010a94:	1eb5      	subs	r5, r6, #2
 8010a96:	6123      	str	r3, [r4, #16]
 8010a98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a9c:	463a      	mov	r2, r7
 8010a9e:	4640      	mov	r0, r8
 8010aa0:	4798      	blx	r3
 8010aa2:	462e      	mov	r6, r5
 8010aa4:	6822      	ldr	r2, [r4, #0]
 8010aa6:	f012 0210 	ands.w	r2, r2, #16
 8010aaa:	d001      	beq.n	8010ab0 <_scanf_float+0x370>
 8010aac:	2000      	movs	r0, #0
 8010aae:	e68b      	b.n	80107c8 <_scanf_float+0x88>
 8010ab0:	7032      	strb	r2, [r6, #0]
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010abc:	d11c      	bne.n	8010af8 <_scanf_float+0x3b8>
 8010abe:	9b02      	ldr	r3, [sp, #8]
 8010ac0:	454b      	cmp	r3, r9
 8010ac2:	eba3 0209 	sub.w	r2, r3, r9
 8010ac6:	d123      	bne.n	8010b10 <_scanf_float+0x3d0>
 8010ac8:	9901      	ldr	r1, [sp, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	4640      	mov	r0, r8
 8010ace:	f7ff f8ef 	bl	800fcb0 <_strtod_r>
 8010ad2:	9b03      	ldr	r3, [sp, #12]
 8010ad4:	6821      	ldr	r1, [r4, #0]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f011 0f02 	tst.w	r1, #2
 8010adc:	ec57 6b10 	vmov	r6, r7, d0
 8010ae0:	f103 0204 	add.w	r2, r3, #4
 8010ae4:	d01f      	beq.n	8010b26 <_scanf_float+0x3e6>
 8010ae6:	9903      	ldr	r1, [sp, #12]
 8010ae8:	600a      	str	r2, [r1, #0]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	e9c3 6700 	strd	r6, r7, [r3]
 8010af0:	68e3      	ldr	r3, [r4, #12]
 8010af2:	3301      	adds	r3, #1
 8010af4:	60e3      	str	r3, [r4, #12]
 8010af6:	e7d9      	b.n	8010aac <_scanf_float+0x36c>
 8010af8:	9b04      	ldr	r3, [sp, #16]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d0e4      	beq.n	8010ac8 <_scanf_float+0x388>
 8010afe:	9905      	ldr	r1, [sp, #20]
 8010b00:	230a      	movs	r3, #10
 8010b02:	3101      	adds	r1, #1
 8010b04:	4640      	mov	r0, r8
 8010b06:	f7ff f9b7 	bl	800fe78 <_strtol_r>
 8010b0a:	9b04      	ldr	r3, [sp, #16]
 8010b0c:	9e05      	ldr	r6, [sp, #20]
 8010b0e:	1ac2      	subs	r2, r0, r3
 8010b10:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010b14:	429e      	cmp	r6, r3
 8010b16:	bf28      	it	cs
 8010b18:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010b1c:	4910      	ldr	r1, [pc, #64]	@ (8010b60 <_scanf_float+0x420>)
 8010b1e:	4630      	mov	r0, r6
 8010b20:	f000 f976 	bl	8010e10 <siprintf>
 8010b24:	e7d0      	b.n	8010ac8 <_scanf_float+0x388>
 8010b26:	f011 0f04 	tst.w	r1, #4
 8010b2a:	9903      	ldr	r1, [sp, #12]
 8010b2c:	600a      	str	r2, [r1, #0]
 8010b2e:	d1dc      	bne.n	8010aea <_scanf_float+0x3aa>
 8010b30:	681d      	ldr	r5, [r3, #0]
 8010b32:	4632      	mov	r2, r6
 8010b34:	463b      	mov	r3, r7
 8010b36:	4630      	mov	r0, r6
 8010b38:	4639      	mov	r1, r7
 8010b3a:	f7f0 f81f 	bl	8000b7c <__aeabi_dcmpun>
 8010b3e:	b128      	cbz	r0, 8010b4c <_scanf_float+0x40c>
 8010b40:	4808      	ldr	r0, [pc, #32]	@ (8010b64 <_scanf_float+0x424>)
 8010b42:	f000 fba1 	bl	8011288 <nanf>
 8010b46:	ed85 0a00 	vstr	s0, [r5]
 8010b4a:	e7d1      	b.n	8010af0 <_scanf_float+0x3b0>
 8010b4c:	4630      	mov	r0, r6
 8010b4e:	4639      	mov	r1, r7
 8010b50:	f7f0 f872 	bl	8000c38 <__aeabi_d2f>
 8010b54:	6028      	str	r0, [r5, #0]
 8010b56:	e7cb      	b.n	8010af0 <_scanf_float+0x3b0>
 8010b58:	f04f 0900 	mov.w	r9, #0
 8010b5c:	e629      	b.n	80107b2 <_scanf_float+0x72>
 8010b5e:	bf00      	nop
 8010b60:	08013d85 	.word	0x08013d85
 8010b64:	08013e3e 	.word	0x08013e3e

08010b68 <std>:
 8010b68:	2300      	movs	r3, #0
 8010b6a:	b510      	push	{r4, lr}
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8010b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b76:	6083      	str	r3, [r0, #8]
 8010b78:	8181      	strh	r1, [r0, #12]
 8010b7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010b7c:	81c2      	strh	r2, [r0, #14]
 8010b7e:	6183      	str	r3, [r0, #24]
 8010b80:	4619      	mov	r1, r3
 8010b82:	2208      	movs	r2, #8
 8010b84:	305c      	adds	r0, #92	@ 0x5c
 8010b86:	f000 fa3b 	bl	8011000 <memset>
 8010b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8010bc0 <std+0x58>)
 8010b8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8010bc4 <std+0x5c>)
 8010b90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010b92:	4b0d      	ldr	r3, [pc, #52]	@ (8010bc8 <std+0x60>)
 8010b94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010b96:	4b0d      	ldr	r3, [pc, #52]	@ (8010bcc <std+0x64>)
 8010b98:	6323      	str	r3, [r4, #48]	@ 0x30
 8010b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd0 <std+0x68>)
 8010b9c:	6224      	str	r4, [r4, #32]
 8010b9e:	429c      	cmp	r4, r3
 8010ba0:	d006      	beq.n	8010bb0 <std+0x48>
 8010ba2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010ba6:	4294      	cmp	r4, r2
 8010ba8:	d002      	beq.n	8010bb0 <std+0x48>
 8010baa:	33d0      	adds	r3, #208	@ 0xd0
 8010bac:	429c      	cmp	r4, r3
 8010bae:	d105      	bne.n	8010bbc <std+0x54>
 8010bb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bb8:	f000 bb42 	b.w	8011240 <__retarget_lock_init_recursive>
 8010bbc:	bd10      	pop	{r4, pc}
 8010bbe:	bf00      	nop
 8010bc0:	08010e51 	.word	0x08010e51
 8010bc4:	08010e73 	.word	0x08010e73
 8010bc8:	08010eab 	.word	0x08010eab
 8010bcc:	08010ecf 	.word	0x08010ecf
 8010bd0:	20001590 	.word	0x20001590

08010bd4 <stdio_exit_handler>:
 8010bd4:	4a02      	ldr	r2, [pc, #8]	@ (8010be0 <stdio_exit_handler+0xc>)
 8010bd6:	4903      	ldr	r1, [pc, #12]	@ (8010be4 <stdio_exit_handler+0x10>)
 8010bd8:	4803      	ldr	r0, [pc, #12]	@ (8010be8 <stdio_exit_handler+0x14>)
 8010bda:	f000 b869 	b.w	8010cb0 <_fwalk_sglue>
 8010bde:	bf00      	nop
 8010be0:	2000002c 	.word	0x2000002c
 8010be4:	080133c9 	.word	0x080133c9
 8010be8:	200001a8 	.word	0x200001a8

08010bec <cleanup_stdio>:
 8010bec:	6841      	ldr	r1, [r0, #4]
 8010bee:	4b0c      	ldr	r3, [pc, #48]	@ (8010c20 <cleanup_stdio+0x34>)
 8010bf0:	4299      	cmp	r1, r3
 8010bf2:	b510      	push	{r4, lr}
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	d001      	beq.n	8010bfc <cleanup_stdio+0x10>
 8010bf8:	f002 fbe6 	bl	80133c8 <_fflush_r>
 8010bfc:	68a1      	ldr	r1, [r4, #8]
 8010bfe:	4b09      	ldr	r3, [pc, #36]	@ (8010c24 <cleanup_stdio+0x38>)
 8010c00:	4299      	cmp	r1, r3
 8010c02:	d002      	beq.n	8010c0a <cleanup_stdio+0x1e>
 8010c04:	4620      	mov	r0, r4
 8010c06:	f002 fbdf 	bl	80133c8 <_fflush_r>
 8010c0a:	68e1      	ldr	r1, [r4, #12]
 8010c0c:	4b06      	ldr	r3, [pc, #24]	@ (8010c28 <cleanup_stdio+0x3c>)
 8010c0e:	4299      	cmp	r1, r3
 8010c10:	d004      	beq.n	8010c1c <cleanup_stdio+0x30>
 8010c12:	4620      	mov	r0, r4
 8010c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c18:	f002 bbd6 	b.w	80133c8 <_fflush_r>
 8010c1c:	bd10      	pop	{r4, pc}
 8010c1e:	bf00      	nop
 8010c20:	20001590 	.word	0x20001590
 8010c24:	200015f8 	.word	0x200015f8
 8010c28:	20001660 	.word	0x20001660

08010c2c <global_stdio_init.part.0>:
 8010c2c:	b510      	push	{r4, lr}
 8010c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8010c5c <global_stdio_init.part.0+0x30>)
 8010c30:	4c0b      	ldr	r4, [pc, #44]	@ (8010c60 <global_stdio_init.part.0+0x34>)
 8010c32:	4a0c      	ldr	r2, [pc, #48]	@ (8010c64 <global_stdio_init.part.0+0x38>)
 8010c34:	601a      	str	r2, [r3, #0]
 8010c36:	4620      	mov	r0, r4
 8010c38:	2200      	movs	r2, #0
 8010c3a:	2104      	movs	r1, #4
 8010c3c:	f7ff ff94 	bl	8010b68 <std>
 8010c40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010c44:	2201      	movs	r2, #1
 8010c46:	2109      	movs	r1, #9
 8010c48:	f7ff ff8e 	bl	8010b68 <std>
 8010c4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010c50:	2202      	movs	r2, #2
 8010c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c56:	2112      	movs	r1, #18
 8010c58:	f7ff bf86 	b.w	8010b68 <std>
 8010c5c:	200016c8 	.word	0x200016c8
 8010c60:	20001590 	.word	0x20001590
 8010c64:	08010bd5 	.word	0x08010bd5

08010c68 <__sfp_lock_acquire>:
 8010c68:	4801      	ldr	r0, [pc, #4]	@ (8010c70 <__sfp_lock_acquire+0x8>)
 8010c6a:	f000 baea 	b.w	8011242 <__retarget_lock_acquire_recursive>
 8010c6e:	bf00      	nop
 8010c70:	200016d1 	.word	0x200016d1

08010c74 <__sfp_lock_release>:
 8010c74:	4801      	ldr	r0, [pc, #4]	@ (8010c7c <__sfp_lock_release+0x8>)
 8010c76:	f000 bae5 	b.w	8011244 <__retarget_lock_release_recursive>
 8010c7a:	bf00      	nop
 8010c7c:	200016d1 	.word	0x200016d1

08010c80 <__sinit>:
 8010c80:	b510      	push	{r4, lr}
 8010c82:	4604      	mov	r4, r0
 8010c84:	f7ff fff0 	bl	8010c68 <__sfp_lock_acquire>
 8010c88:	6a23      	ldr	r3, [r4, #32]
 8010c8a:	b11b      	cbz	r3, 8010c94 <__sinit+0x14>
 8010c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c90:	f7ff bff0 	b.w	8010c74 <__sfp_lock_release>
 8010c94:	4b04      	ldr	r3, [pc, #16]	@ (8010ca8 <__sinit+0x28>)
 8010c96:	6223      	str	r3, [r4, #32]
 8010c98:	4b04      	ldr	r3, [pc, #16]	@ (8010cac <__sinit+0x2c>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d1f5      	bne.n	8010c8c <__sinit+0xc>
 8010ca0:	f7ff ffc4 	bl	8010c2c <global_stdio_init.part.0>
 8010ca4:	e7f2      	b.n	8010c8c <__sinit+0xc>
 8010ca6:	bf00      	nop
 8010ca8:	08010bed 	.word	0x08010bed
 8010cac:	200016c8 	.word	0x200016c8

08010cb0 <_fwalk_sglue>:
 8010cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cb4:	4607      	mov	r7, r0
 8010cb6:	4688      	mov	r8, r1
 8010cb8:	4614      	mov	r4, r2
 8010cba:	2600      	movs	r6, #0
 8010cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8010cc4:	d505      	bpl.n	8010cd2 <_fwalk_sglue+0x22>
 8010cc6:	6824      	ldr	r4, [r4, #0]
 8010cc8:	2c00      	cmp	r4, #0
 8010cca:	d1f7      	bne.n	8010cbc <_fwalk_sglue+0xc>
 8010ccc:	4630      	mov	r0, r6
 8010cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cd2:	89ab      	ldrh	r3, [r5, #12]
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d907      	bls.n	8010ce8 <_fwalk_sglue+0x38>
 8010cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	d003      	beq.n	8010ce8 <_fwalk_sglue+0x38>
 8010ce0:	4629      	mov	r1, r5
 8010ce2:	4638      	mov	r0, r7
 8010ce4:	47c0      	blx	r8
 8010ce6:	4306      	orrs	r6, r0
 8010ce8:	3568      	adds	r5, #104	@ 0x68
 8010cea:	e7e9      	b.n	8010cc0 <_fwalk_sglue+0x10>

08010cec <_puts_r>:
 8010cec:	6a03      	ldr	r3, [r0, #32]
 8010cee:	b570      	push	{r4, r5, r6, lr}
 8010cf0:	6884      	ldr	r4, [r0, #8]
 8010cf2:	4605      	mov	r5, r0
 8010cf4:	460e      	mov	r6, r1
 8010cf6:	b90b      	cbnz	r3, 8010cfc <_puts_r+0x10>
 8010cf8:	f7ff ffc2 	bl	8010c80 <__sinit>
 8010cfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cfe:	07db      	lsls	r3, r3, #31
 8010d00:	d405      	bmi.n	8010d0e <_puts_r+0x22>
 8010d02:	89a3      	ldrh	r3, [r4, #12]
 8010d04:	0598      	lsls	r0, r3, #22
 8010d06:	d402      	bmi.n	8010d0e <_puts_r+0x22>
 8010d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d0a:	f000 fa9a 	bl	8011242 <__retarget_lock_acquire_recursive>
 8010d0e:	89a3      	ldrh	r3, [r4, #12]
 8010d10:	0719      	lsls	r1, r3, #28
 8010d12:	d502      	bpl.n	8010d1a <_puts_r+0x2e>
 8010d14:	6923      	ldr	r3, [r4, #16]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d135      	bne.n	8010d86 <_puts_r+0x9a>
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f000 f919 	bl	8010f54 <__swsetup_r>
 8010d22:	b380      	cbz	r0, 8010d86 <_puts_r+0x9a>
 8010d24:	f04f 35ff 	mov.w	r5, #4294967295
 8010d28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d2a:	07da      	lsls	r2, r3, #31
 8010d2c:	d405      	bmi.n	8010d3a <_puts_r+0x4e>
 8010d2e:	89a3      	ldrh	r3, [r4, #12]
 8010d30:	059b      	lsls	r3, r3, #22
 8010d32:	d402      	bmi.n	8010d3a <_puts_r+0x4e>
 8010d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d36:	f000 fa85 	bl	8011244 <__retarget_lock_release_recursive>
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	bd70      	pop	{r4, r5, r6, pc}
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	da04      	bge.n	8010d4c <_puts_r+0x60>
 8010d42:	69a2      	ldr	r2, [r4, #24]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	dc17      	bgt.n	8010d78 <_puts_r+0x8c>
 8010d48:	290a      	cmp	r1, #10
 8010d4a:	d015      	beq.n	8010d78 <_puts_r+0x8c>
 8010d4c:	6823      	ldr	r3, [r4, #0]
 8010d4e:	1c5a      	adds	r2, r3, #1
 8010d50:	6022      	str	r2, [r4, #0]
 8010d52:	7019      	strb	r1, [r3, #0]
 8010d54:	68a3      	ldr	r3, [r4, #8]
 8010d56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	60a3      	str	r3, [r4, #8]
 8010d5e:	2900      	cmp	r1, #0
 8010d60:	d1ed      	bne.n	8010d3e <_puts_r+0x52>
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	da11      	bge.n	8010d8a <_puts_r+0x9e>
 8010d66:	4622      	mov	r2, r4
 8010d68:	210a      	movs	r1, #10
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	f000 f8b3 	bl	8010ed6 <__swbuf_r>
 8010d70:	3001      	adds	r0, #1
 8010d72:	d0d7      	beq.n	8010d24 <_puts_r+0x38>
 8010d74:	250a      	movs	r5, #10
 8010d76:	e7d7      	b.n	8010d28 <_puts_r+0x3c>
 8010d78:	4622      	mov	r2, r4
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	f000 f8ab 	bl	8010ed6 <__swbuf_r>
 8010d80:	3001      	adds	r0, #1
 8010d82:	d1e7      	bne.n	8010d54 <_puts_r+0x68>
 8010d84:	e7ce      	b.n	8010d24 <_puts_r+0x38>
 8010d86:	3e01      	subs	r6, #1
 8010d88:	e7e4      	b.n	8010d54 <_puts_r+0x68>
 8010d8a:	6823      	ldr	r3, [r4, #0]
 8010d8c:	1c5a      	adds	r2, r3, #1
 8010d8e:	6022      	str	r2, [r4, #0]
 8010d90:	220a      	movs	r2, #10
 8010d92:	701a      	strb	r2, [r3, #0]
 8010d94:	e7ee      	b.n	8010d74 <_puts_r+0x88>
	...

08010d98 <puts>:
 8010d98:	4b02      	ldr	r3, [pc, #8]	@ (8010da4 <puts+0xc>)
 8010d9a:	4601      	mov	r1, r0
 8010d9c:	6818      	ldr	r0, [r3, #0]
 8010d9e:	f7ff bfa5 	b.w	8010cec <_puts_r>
 8010da2:	bf00      	nop
 8010da4:	200001a4 	.word	0x200001a4

08010da8 <sniprintf>:
 8010da8:	b40c      	push	{r2, r3}
 8010daa:	b530      	push	{r4, r5, lr}
 8010dac:	4b17      	ldr	r3, [pc, #92]	@ (8010e0c <sniprintf+0x64>)
 8010dae:	1e0c      	subs	r4, r1, #0
 8010db0:	681d      	ldr	r5, [r3, #0]
 8010db2:	b09d      	sub	sp, #116	@ 0x74
 8010db4:	da08      	bge.n	8010dc8 <sniprintf+0x20>
 8010db6:	238b      	movs	r3, #139	@ 0x8b
 8010db8:	602b      	str	r3, [r5, #0]
 8010dba:	f04f 30ff 	mov.w	r0, #4294967295
 8010dbe:	b01d      	add	sp, #116	@ 0x74
 8010dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dc4:	b002      	add	sp, #8
 8010dc6:	4770      	bx	lr
 8010dc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010dcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010dd0:	bf14      	ite	ne
 8010dd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010dd6:	4623      	moveq	r3, r4
 8010dd8:	9304      	str	r3, [sp, #16]
 8010dda:	9307      	str	r3, [sp, #28]
 8010ddc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010de0:	9002      	str	r0, [sp, #8]
 8010de2:	9006      	str	r0, [sp, #24]
 8010de4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010de8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010dea:	ab21      	add	r3, sp, #132	@ 0x84
 8010dec:	a902      	add	r1, sp, #8
 8010dee:	4628      	mov	r0, r5
 8010df0:	9301      	str	r3, [sp, #4]
 8010df2:	f002 f969 	bl	80130c8 <_svfiprintf_r>
 8010df6:	1c43      	adds	r3, r0, #1
 8010df8:	bfbc      	itt	lt
 8010dfa:	238b      	movlt	r3, #139	@ 0x8b
 8010dfc:	602b      	strlt	r3, [r5, #0]
 8010dfe:	2c00      	cmp	r4, #0
 8010e00:	d0dd      	beq.n	8010dbe <sniprintf+0x16>
 8010e02:	9b02      	ldr	r3, [sp, #8]
 8010e04:	2200      	movs	r2, #0
 8010e06:	701a      	strb	r2, [r3, #0]
 8010e08:	e7d9      	b.n	8010dbe <sniprintf+0x16>
 8010e0a:	bf00      	nop
 8010e0c:	200001a4 	.word	0x200001a4

08010e10 <siprintf>:
 8010e10:	b40e      	push	{r1, r2, r3}
 8010e12:	b500      	push	{lr}
 8010e14:	b09c      	sub	sp, #112	@ 0x70
 8010e16:	ab1d      	add	r3, sp, #116	@ 0x74
 8010e18:	9002      	str	r0, [sp, #8]
 8010e1a:	9006      	str	r0, [sp, #24]
 8010e1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010e20:	4809      	ldr	r0, [pc, #36]	@ (8010e48 <siprintf+0x38>)
 8010e22:	9107      	str	r1, [sp, #28]
 8010e24:	9104      	str	r1, [sp, #16]
 8010e26:	4909      	ldr	r1, [pc, #36]	@ (8010e4c <siprintf+0x3c>)
 8010e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e2c:	9105      	str	r1, [sp, #20]
 8010e2e:	6800      	ldr	r0, [r0, #0]
 8010e30:	9301      	str	r3, [sp, #4]
 8010e32:	a902      	add	r1, sp, #8
 8010e34:	f002 f948 	bl	80130c8 <_svfiprintf_r>
 8010e38:	9b02      	ldr	r3, [sp, #8]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	701a      	strb	r2, [r3, #0]
 8010e3e:	b01c      	add	sp, #112	@ 0x70
 8010e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e44:	b003      	add	sp, #12
 8010e46:	4770      	bx	lr
 8010e48:	200001a4 	.word	0x200001a4
 8010e4c:	ffff0208 	.word	0xffff0208

08010e50 <__sread>:
 8010e50:	b510      	push	{r4, lr}
 8010e52:	460c      	mov	r4, r1
 8010e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e58:	f000 f994 	bl	8011184 <_read_r>
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	bfab      	itete	ge
 8010e60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010e62:	89a3      	ldrhlt	r3, [r4, #12]
 8010e64:	181b      	addge	r3, r3, r0
 8010e66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010e6a:	bfac      	ite	ge
 8010e6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010e6e:	81a3      	strhlt	r3, [r4, #12]
 8010e70:	bd10      	pop	{r4, pc}

08010e72 <__swrite>:
 8010e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e76:	461f      	mov	r7, r3
 8010e78:	898b      	ldrh	r3, [r1, #12]
 8010e7a:	05db      	lsls	r3, r3, #23
 8010e7c:	4605      	mov	r5, r0
 8010e7e:	460c      	mov	r4, r1
 8010e80:	4616      	mov	r6, r2
 8010e82:	d505      	bpl.n	8010e90 <__swrite+0x1e>
 8010e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e88:	2302      	movs	r3, #2
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f000 f968 	bl	8011160 <_lseek_r>
 8010e90:	89a3      	ldrh	r3, [r4, #12]
 8010e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010e9a:	81a3      	strh	r3, [r4, #12]
 8010e9c:	4632      	mov	r2, r6
 8010e9e:	463b      	mov	r3, r7
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea6:	f000 b98f 	b.w	80111c8 <_write_r>

08010eaa <__sseek>:
 8010eaa:	b510      	push	{r4, lr}
 8010eac:	460c      	mov	r4, r1
 8010eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eb2:	f000 f955 	bl	8011160 <_lseek_r>
 8010eb6:	1c43      	adds	r3, r0, #1
 8010eb8:	89a3      	ldrh	r3, [r4, #12]
 8010eba:	bf15      	itete	ne
 8010ebc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010ebe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010ec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010ec6:	81a3      	strheq	r3, [r4, #12]
 8010ec8:	bf18      	it	ne
 8010eca:	81a3      	strhne	r3, [r4, #12]
 8010ecc:	bd10      	pop	{r4, pc}

08010ece <__sclose>:
 8010ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ed2:	f000 b935 	b.w	8011140 <_close_r>

08010ed6 <__swbuf_r>:
 8010ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ed8:	460e      	mov	r6, r1
 8010eda:	4614      	mov	r4, r2
 8010edc:	4605      	mov	r5, r0
 8010ede:	b118      	cbz	r0, 8010ee8 <__swbuf_r+0x12>
 8010ee0:	6a03      	ldr	r3, [r0, #32]
 8010ee2:	b90b      	cbnz	r3, 8010ee8 <__swbuf_r+0x12>
 8010ee4:	f7ff fecc 	bl	8010c80 <__sinit>
 8010ee8:	69a3      	ldr	r3, [r4, #24]
 8010eea:	60a3      	str	r3, [r4, #8]
 8010eec:	89a3      	ldrh	r3, [r4, #12]
 8010eee:	071a      	lsls	r2, r3, #28
 8010ef0:	d501      	bpl.n	8010ef6 <__swbuf_r+0x20>
 8010ef2:	6923      	ldr	r3, [r4, #16]
 8010ef4:	b943      	cbnz	r3, 8010f08 <__swbuf_r+0x32>
 8010ef6:	4621      	mov	r1, r4
 8010ef8:	4628      	mov	r0, r5
 8010efa:	f000 f82b 	bl	8010f54 <__swsetup_r>
 8010efe:	b118      	cbz	r0, 8010f08 <__swbuf_r+0x32>
 8010f00:	f04f 37ff 	mov.w	r7, #4294967295
 8010f04:	4638      	mov	r0, r7
 8010f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f08:	6823      	ldr	r3, [r4, #0]
 8010f0a:	6922      	ldr	r2, [r4, #16]
 8010f0c:	1a98      	subs	r0, r3, r2
 8010f0e:	6963      	ldr	r3, [r4, #20]
 8010f10:	b2f6      	uxtb	r6, r6
 8010f12:	4283      	cmp	r3, r0
 8010f14:	4637      	mov	r7, r6
 8010f16:	dc05      	bgt.n	8010f24 <__swbuf_r+0x4e>
 8010f18:	4621      	mov	r1, r4
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	f002 fa54 	bl	80133c8 <_fflush_r>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	d1ed      	bne.n	8010f00 <__swbuf_r+0x2a>
 8010f24:	68a3      	ldr	r3, [r4, #8]
 8010f26:	3b01      	subs	r3, #1
 8010f28:	60a3      	str	r3, [r4, #8]
 8010f2a:	6823      	ldr	r3, [r4, #0]
 8010f2c:	1c5a      	adds	r2, r3, #1
 8010f2e:	6022      	str	r2, [r4, #0]
 8010f30:	701e      	strb	r6, [r3, #0]
 8010f32:	6962      	ldr	r2, [r4, #20]
 8010f34:	1c43      	adds	r3, r0, #1
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d004      	beq.n	8010f44 <__swbuf_r+0x6e>
 8010f3a:	89a3      	ldrh	r3, [r4, #12]
 8010f3c:	07db      	lsls	r3, r3, #31
 8010f3e:	d5e1      	bpl.n	8010f04 <__swbuf_r+0x2e>
 8010f40:	2e0a      	cmp	r6, #10
 8010f42:	d1df      	bne.n	8010f04 <__swbuf_r+0x2e>
 8010f44:	4621      	mov	r1, r4
 8010f46:	4628      	mov	r0, r5
 8010f48:	f002 fa3e 	bl	80133c8 <_fflush_r>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d0d9      	beq.n	8010f04 <__swbuf_r+0x2e>
 8010f50:	e7d6      	b.n	8010f00 <__swbuf_r+0x2a>
	...

08010f54 <__swsetup_r>:
 8010f54:	b538      	push	{r3, r4, r5, lr}
 8010f56:	4b29      	ldr	r3, [pc, #164]	@ (8010ffc <__swsetup_r+0xa8>)
 8010f58:	4605      	mov	r5, r0
 8010f5a:	6818      	ldr	r0, [r3, #0]
 8010f5c:	460c      	mov	r4, r1
 8010f5e:	b118      	cbz	r0, 8010f68 <__swsetup_r+0x14>
 8010f60:	6a03      	ldr	r3, [r0, #32]
 8010f62:	b90b      	cbnz	r3, 8010f68 <__swsetup_r+0x14>
 8010f64:	f7ff fe8c 	bl	8010c80 <__sinit>
 8010f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f6c:	0719      	lsls	r1, r3, #28
 8010f6e:	d422      	bmi.n	8010fb6 <__swsetup_r+0x62>
 8010f70:	06da      	lsls	r2, r3, #27
 8010f72:	d407      	bmi.n	8010f84 <__swsetup_r+0x30>
 8010f74:	2209      	movs	r2, #9
 8010f76:	602a      	str	r2, [r5, #0]
 8010f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f7c:	81a3      	strh	r3, [r4, #12]
 8010f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f82:	e033      	b.n	8010fec <__swsetup_r+0x98>
 8010f84:	0758      	lsls	r0, r3, #29
 8010f86:	d512      	bpl.n	8010fae <__swsetup_r+0x5a>
 8010f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f8a:	b141      	cbz	r1, 8010f9e <__swsetup_r+0x4a>
 8010f8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f90:	4299      	cmp	r1, r3
 8010f92:	d002      	beq.n	8010f9a <__swsetup_r+0x46>
 8010f94:	4628      	mov	r0, r5
 8010f96:	f000 ffe7 	bl	8011f68 <_free_r>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f9e:	89a3      	ldrh	r3, [r4, #12]
 8010fa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010fa4:	81a3      	strh	r3, [r4, #12]
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	6063      	str	r3, [r4, #4]
 8010faa:	6923      	ldr	r3, [r4, #16]
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	89a3      	ldrh	r3, [r4, #12]
 8010fb0:	f043 0308 	orr.w	r3, r3, #8
 8010fb4:	81a3      	strh	r3, [r4, #12]
 8010fb6:	6923      	ldr	r3, [r4, #16]
 8010fb8:	b94b      	cbnz	r3, 8010fce <__swsetup_r+0x7a>
 8010fba:	89a3      	ldrh	r3, [r4, #12]
 8010fbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fc4:	d003      	beq.n	8010fce <__swsetup_r+0x7a>
 8010fc6:	4621      	mov	r1, r4
 8010fc8:	4628      	mov	r0, r5
 8010fca:	f002 fa5d 	bl	8013488 <__smakebuf_r>
 8010fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fd2:	f013 0201 	ands.w	r2, r3, #1
 8010fd6:	d00a      	beq.n	8010fee <__swsetup_r+0x9a>
 8010fd8:	2200      	movs	r2, #0
 8010fda:	60a2      	str	r2, [r4, #8]
 8010fdc:	6962      	ldr	r2, [r4, #20]
 8010fde:	4252      	negs	r2, r2
 8010fe0:	61a2      	str	r2, [r4, #24]
 8010fe2:	6922      	ldr	r2, [r4, #16]
 8010fe4:	b942      	cbnz	r2, 8010ff8 <__swsetup_r+0xa4>
 8010fe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010fea:	d1c5      	bne.n	8010f78 <__swsetup_r+0x24>
 8010fec:	bd38      	pop	{r3, r4, r5, pc}
 8010fee:	0799      	lsls	r1, r3, #30
 8010ff0:	bf58      	it	pl
 8010ff2:	6962      	ldrpl	r2, [r4, #20]
 8010ff4:	60a2      	str	r2, [r4, #8]
 8010ff6:	e7f4      	b.n	8010fe2 <__swsetup_r+0x8e>
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	e7f7      	b.n	8010fec <__swsetup_r+0x98>
 8010ffc:	200001a4 	.word	0x200001a4

08011000 <memset>:
 8011000:	4402      	add	r2, r0
 8011002:	4603      	mov	r3, r0
 8011004:	4293      	cmp	r3, r2
 8011006:	d100      	bne.n	801100a <memset+0xa>
 8011008:	4770      	bx	lr
 801100a:	f803 1b01 	strb.w	r1, [r3], #1
 801100e:	e7f9      	b.n	8011004 <memset+0x4>

08011010 <strcat>:
 8011010:	b510      	push	{r4, lr}
 8011012:	4602      	mov	r2, r0
 8011014:	7814      	ldrb	r4, [r2, #0]
 8011016:	4613      	mov	r3, r2
 8011018:	3201      	adds	r2, #1
 801101a:	2c00      	cmp	r4, #0
 801101c:	d1fa      	bne.n	8011014 <strcat+0x4>
 801101e:	3b01      	subs	r3, #1
 8011020:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011024:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011028:	2a00      	cmp	r2, #0
 801102a:	d1f9      	bne.n	8011020 <strcat+0x10>
 801102c:	bd10      	pop	{r4, pc}

0801102e <strncmp>:
 801102e:	b510      	push	{r4, lr}
 8011030:	b16a      	cbz	r2, 801104e <strncmp+0x20>
 8011032:	3901      	subs	r1, #1
 8011034:	1884      	adds	r4, r0, r2
 8011036:	f810 2b01 	ldrb.w	r2, [r0], #1
 801103a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801103e:	429a      	cmp	r2, r3
 8011040:	d103      	bne.n	801104a <strncmp+0x1c>
 8011042:	42a0      	cmp	r0, r4
 8011044:	d001      	beq.n	801104a <strncmp+0x1c>
 8011046:	2a00      	cmp	r2, #0
 8011048:	d1f5      	bne.n	8011036 <strncmp+0x8>
 801104a:	1ad0      	subs	r0, r2, r3
 801104c:	bd10      	pop	{r4, pc}
 801104e:	4610      	mov	r0, r2
 8011050:	e7fc      	b.n	801104c <strncmp+0x1e>
	...

08011054 <strtok>:
 8011054:	4b16      	ldr	r3, [pc, #88]	@ (80110b0 <strtok+0x5c>)
 8011056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801105a:	681f      	ldr	r7, [r3, #0]
 801105c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801105e:	4605      	mov	r5, r0
 8011060:	460e      	mov	r6, r1
 8011062:	b9ec      	cbnz	r4, 80110a0 <strtok+0x4c>
 8011064:	2050      	movs	r0, #80	@ 0x50
 8011066:	f7fd ff63 	bl	800ef30 <malloc>
 801106a:	4602      	mov	r2, r0
 801106c:	6478      	str	r0, [r7, #68]	@ 0x44
 801106e:	b920      	cbnz	r0, 801107a <strtok+0x26>
 8011070:	4b10      	ldr	r3, [pc, #64]	@ (80110b4 <strtok+0x60>)
 8011072:	4811      	ldr	r0, [pc, #68]	@ (80110b8 <strtok+0x64>)
 8011074:	215b      	movs	r1, #91	@ 0x5b
 8011076:	f000 f90d 	bl	8011294 <__assert_func>
 801107a:	e9c0 4400 	strd	r4, r4, [r0]
 801107e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011082:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011086:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801108a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801108e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8011092:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8011096:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801109a:	6184      	str	r4, [r0, #24]
 801109c:	7704      	strb	r4, [r0, #28]
 801109e:	6244      	str	r4, [r0, #36]	@ 0x24
 80110a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80110a2:	4631      	mov	r1, r6
 80110a4:	4628      	mov	r0, r5
 80110a6:	2301      	movs	r3, #1
 80110a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110ac:	f000 b806 	b.w	80110bc <__strtok_r>
 80110b0:	200001a4 	.word	0x200001a4
 80110b4:	08013d8a 	.word	0x08013d8a
 80110b8:	08013da1 	.word	0x08013da1

080110bc <__strtok_r>:
 80110bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110be:	4604      	mov	r4, r0
 80110c0:	b908      	cbnz	r0, 80110c6 <__strtok_r+0xa>
 80110c2:	6814      	ldr	r4, [r2, #0]
 80110c4:	b144      	cbz	r4, 80110d8 <__strtok_r+0x1c>
 80110c6:	4620      	mov	r0, r4
 80110c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80110cc:	460f      	mov	r7, r1
 80110ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80110d2:	b91e      	cbnz	r6, 80110dc <__strtok_r+0x20>
 80110d4:	b965      	cbnz	r5, 80110f0 <__strtok_r+0x34>
 80110d6:	6015      	str	r5, [r2, #0]
 80110d8:	2000      	movs	r0, #0
 80110da:	e005      	b.n	80110e8 <__strtok_r+0x2c>
 80110dc:	42b5      	cmp	r5, r6
 80110de:	d1f6      	bne.n	80110ce <__strtok_r+0x12>
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1f0      	bne.n	80110c6 <__strtok_r+0xa>
 80110e4:	6014      	str	r4, [r2, #0]
 80110e6:	7003      	strb	r3, [r0, #0]
 80110e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ea:	461c      	mov	r4, r3
 80110ec:	e00c      	b.n	8011108 <__strtok_r+0x4c>
 80110ee:	b915      	cbnz	r5, 80110f6 <__strtok_r+0x3a>
 80110f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80110f4:	460e      	mov	r6, r1
 80110f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80110fa:	42ab      	cmp	r3, r5
 80110fc:	d1f7      	bne.n	80110ee <__strtok_r+0x32>
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d0f3      	beq.n	80110ea <__strtok_r+0x2e>
 8011102:	2300      	movs	r3, #0
 8011104:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011108:	6014      	str	r4, [r2, #0]
 801110a:	e7ed      	b.n	80110e8 <__strtok_r+0x2c>

0801110c <strstr>:
 801110c:	780a      	ldrb	r2, [r1, #0]
 801110e:	b570      	push	{r4, r5, r6, lr}
 8011110:	b96a      	cbnz	r2, 801112e <strstr+0x22>
 8011112:	bd70      	pop	{r4, r5, r6, pc}
 8011114:	429a      	cmp	r2, r3
 8011116:	d109      	bne.n	801112c <strstr+0x20>
 8011118:	460c      	mov	r4, r1
 801111a:	4605      	mov	r5, r0
 801111c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011120:	2b00      	cmp	r3, #0
 8011122:	d0f6      	beq.n	8011112 <strstr+0x6>
 8011124:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011128:	429e      	cmp	r6, r3
 801112a:	d0f7      	beq.n	801111c <strstr+0x10>
 801112c:	3001      	adds	r0, #1
 801112e:	7803      	ldrb	r3, [r0, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1ef      	bne.n	8011114 <strstr+0x8>
 8011134:	4618      	mov	r0, r3
 8011136:	e7ec      	b.n	8011112 <strstr+0x6>

08011138 <_localeconv_r>:
 8011138:	4800      	ldr	r0, [pc, #0]	@ (801113c <_localeconv_r+0x4>)
 801113a:	4770      	bx	lr
 801113c:	20000128 	.word	0x20000128

08011140 <_close_r>:
 8011140:	b538      	push	{r3, r4, r5, lr}
 8011142:	4d06      	ldr	r5, [pc, #24]	@ (801115c <_close_r+0x1c>)
 8011144:	2300      	movs	r3, #0
 8011146:	4604      	mov	r4, r0
 8011148:	4608      	mov	r0, r1
 801114a:	602b      	str	r3, [r5, #0]
 801114c:	f7f2 fdec 	bl	8003d28 <_close>
 8011150:	1c43      	adds	r3, r0, #1
 8011152:	d102      	bne.n	801115a <_close_r+0x1a>
 8011154:	682b      	ldr	r3, [r5, #0]
 8011156:	b103      	cbz	r3, 801115a <_close_r+0x1a>
 8011158:	6023      	str	r3, [r4, #0]
 801115a:	bd38      	pop	{r3, r4, r5, pc}
 801115c:	200016cc 	.word	0x200016cc

08011160 <_lseek_r>:
 8011160:	b538      	push	{r3, r4, r5, lr}
 8011162:	4d07      	ldr	r5, [pc, #28]	@ (8011180 <_lseek_r+0x20>)
 8011164:	4604      	mov	r4, r0
 8011166:	4608      	mov	r0, r1
 8011168:	4611      	mov	r1, r2
 801116a:	2200      	movs	r2, #0
 801116c:	602a      	str	r2, [r5, #0]
 801116e:	461a      	mov	r2, r3
 8011170:	f7f2 fe01 	bl	8003d76 <_lseek>
 8011174:	1c43      	adds	r3, r0, #1
 8011176:	d102      	bne.n	801117e <_lseek_r+0x1e>
 8011178:	682b      	ldr	r3, [r5, #0]
 801117a:	b103      	cbz	r3, 801117e <_lseek_r+0x1e>
 801117c:	6023      	str	r3, [r4, #0]
 801117e:	bd38      	pop	{r3, r4, r5, pc}
 8011180:	200016cc 	.word	0x200016cc

08011184 <_read_r>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	4d07      	ldr	r5, [pc, #28]	@ (80111a4 <_read_r+0x20>)
 8011188:	4604      	mov	r4, r0
 801118a:	4608      	mov	r0, r1
 801118c:	4611      	mov	r1, r2
 801118e:	2200      	movs	r2, #0
 8011190:	602a      	str	r2, [r5, #0]
 8011192:	461a      	mov	r2, r3
 8011194:	f7f2 fd8f 	bl	8003cb6 <_read>
 8011198:	1c43      	adds	r3, r0, #1
 801119a:	d102      	bne.n	80111a2 <_read_r+0x1e>
 801119c:	682b      	ldr	r3, [r5, #0]
 801119e:	b103      	cbz	r3, 80111a2 <_read_r+0x1e>
 80111a0:	6023      	str	r3, [r4, #0]
 80111a2:	bd38      	pop	{r3, r4, r5, pc}
 80111a4:	200016cc 	.word	0x200016cc

080111a8 <_sbrk_r>:
 80111a8:	b538      	push	{r3, r4, r5, lr}
 80111aa:	4d06      	ldr	r5, [pc, #24]	@ (80111c4 <_sbrk_r+0x1c>)
 80111ac:	2300      	movs	r3, #0
 80111ae:	4604      	mov	r4, r0
 80111b0:	4608      	mov	r0, r1
 80111b2:	602b      	str	r3, [r5, #0]
 80111b4:	f7f2 fdec 	bl	8003d90 <_sbrk>
 80111b8:	1c43      	adds	r3, r0, #1
 80111ba:	d102      	bne.n	80111c2 <_sbrk_r+0x1a>
 80111bc:	682b      	ldr	r3, [r5, #0]
 80111be:	b103      	cbz	r3, 80111c2 <_sbrk_r+0x1a>
 80111c0:	6023      	str	r3, [r4, #0]
 80111c2:	bd38      	pop	{r3, r4, r5, pc}
 80111c4:	200016cc 	.word	0x200016cc

080111c8 <_write_r>:
 80111c8:	b538      	push	{r3, r4, r5, lr}
 80111ca:	4d07      	ldr	r5, [pc, #28]	@ (80111e8 <_write_r+0x20>)
 80111cc:	4604      	mov	r4, r0
 80111ce:	4608      	mov	r0, r1
 80111d0:	4611      	mov	r1, r2
 80111d2:	2200      	movs	r2, #0
 80111d4:	602a      	str	r2, [r5, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	f7f2 fd8a 	bl	8003cf0 <_write>
 80111dc:	1c43      	adds	r3, r0, #1
 80111de:	d102      	bne.n	80111e6 <_write_r+0x1e>
 80111e0:	682b      	ldr	r3, [r5, #0]
 80111e2:	b103      	cbz	r3, 80111e6 <_write_r+0x1e>
 80111e4:	6023      	str	r3, [r4, #0]
 80111e6:	bd38      	pop	{r3, r4, r5, pc}
 80111e8:	200016cc 	.word	0x200016cc

080111ec <__errno>:
 80111ec:	4b01      	ldr	r3, [pc, #4]	@ (80111f4 <__errno+0x8>)
 80111ee:	6818      	ldr	r0, [r3, #0]
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	200001a4 	.word	0x200001a4

080111f8 <__libc_init_array>:
 80111f8:	b570      	push	{r4, r5, r6, lr}
 80111fa:	4d0d      	ldr	r5, [pc, #52]	@ (8011230 <__libc_init_array+0x38>)
 80111fc:	4c0d      	ldr	r4, [pc, #52]	@ (8011234 <__libc_init_array+0x3c>)
 80111fe:	1b64      	subs	r4, r4, r5
 8011200:	10a4      	asrs	r4, r4, #2
 8011202:	2600      	movs	r6, #0
 8011204:	42a6      	cmp	r6, r4
 8011206:	d109      	bne.n	801121c <__libc_init_array+0x24>
 8011208:	4d0b      	ldr	r5, [pc, #44]	@ (8011238 <__libc_init_array+0x40>)
 801120a:	4c0c      	ldr	r4, [pc, #48]	@ (801123c <__libc_init_array+0x44>)
 801120c:	f002 fb8a 	bl	8013924 <_init>
 8011210:	1b64      	subs	r4, r4, r5
 8011212:	10a4      	asrs	r4, r4, #2
 8011214:	2600      	movs	r6, #0
 8011216:	42a6      	cmp	r6, r4
 8011218:	d105      	bne.n	8011226 <__libc_init_array+0x2e>
 801121a:	bd70      	pop	{r4, r5, r6, pc}
 801121c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011220:	4798      	blx	r3
 8011222:	3601      	adds	r6, #1
 8011224:	e7ee      	b.n	8011204 <__libc_init_array+0xc>
 8011226:	f855 3b04 	ldr.w	r3, [r5], #4
 801122a:	4798      	blx	r3
 801122c:	3601      	adds	r6, #1
 801122e:	e7f2      	b.n	8011216 <__libc_init_array+0x1e>
 8011230:	0801408c 	.word	0x0801408c
 8011234:	0801408c 	.word	0x0801408c
 8011238:	0801408c 	.word	0x0801408c
 801123c:	08014090 	.word	0x08014090

08011240 <__retarget_lock_init_recursive>:
 8011240:	4770      	bx	lr

08011242 <__retarget_lock_acquire_recursive>:
 8011242:	4770      	bx	lr

08011244 <__retarget_lock_release_recursive>:
 8011244:	4770      	bx	lr

08011246 <strcpy>:
 8011246:	4603      	mov	r3, r0
 8011248:	f811 2b01 	ldrb.w	r2, [r1], #1
 801124c:	f803 2b01 	strb.w	r2, [r3], #1
 8011250:	2a00      	cmp	r2, #0
 8011252:	d1f9      	bne.n	8011248 <strcpy+0x2>
 8011254:	4770      	bx	lr

08011256 <memcpy>:
 8011256:	440a      	add	r2, r1
 8011258:	4291      	cmp	r1, r2
 801125a:	f100 33ff 	add.w	r3, r0, #4294967295
 801125e:	d100      	bne.n	8011262 <memcpy+0xc>
 8011260:	4770      	bx	lr
 8011262:	b510      	push	{r4, lr}
 8011264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011268:	f803 4f01 	strb.w	r4, [r3, #1]!
 801126c:	4291      	cmp	r1, r2
 801126e:	d1f9      	bne.n	8011264 <memcpy+0xe>
 8011270:	bd10      	pop	{r4, pc}
 8011272:	0000      	movs	r0, r0
 8011274:	0000      	movs	r0, r0
	...

08011278 <nan>:
 8011278:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011280 <nan+0x8>
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop
 8011280:	00000000 	.word	0x00000000
 8011284:	7ff80000 	.word	0x7ff80000

08011288 <nanf>:
 8011288:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011290 <nanf+0x8>
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	7fc00000 	.word	0x7fc00000

08011294 <__assert_func>:
 8011294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011296:	4614      	mov	r4, r2
 8011298:	461a      	mov	r2, r3
 801129a:	4b09      	ldr	r3, [pc, #36]	@ (80112c0 <__assert_func+0x2c>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	4605      	mov	r5, r0
 80112a0:	68d8      	ldr	r0, [r3, #12]
 80112a2:	b954      	cbnz	r4, 80112ba <__assert_func+0x26>
 80112a4:	4b07      	ldr	r3, [pc, #28]	@ (80112c4 <__assert_func+0x30>)
 80112a6:	461c      	mov	r4, r3
 80112a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112ac:	9100      	str	r1, [sp, #0]
 80112ae:	462b      	mov	r3, r5
 80112b0:	4905      	ldr	r1, [pc, #20]	@ (80112c8 <__assert_func+0x34>)
 80112b2:	f002 f8b1 	bl	8013418 <fiprintf>
 80112b6:	f002 f95f 	bl	8013578 <abort>
 80112ba:	4b04      	ldr	r3, [pc, #16]	@ (80112cc <__assert_func+0x38>)
 80112bc:	e7f4      	b.n	80112a8 <__assert_func+0x14>
 80112be:	bf00      	nop
 80112c0:	200001a4 	.word	0x200001a4
 80112c4:	08013e3e 	.word	0x08013e3e
 80112c8:	08013e10 	.word	0x08013e10
 80112cc:	08013e03 	.word	0x08013e03

080112d0 <quorem>:
 80112d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d4:	6903      	ldr	r3, [r0, #16]
 80112d6:	690c      	ldr	r4, [r1, #16]
 80112d8:	42a3      	cmp	r3, r4
 80112da:	4607      	mov	r7, r0
 80112dc:	db7e      	blt.n	80113dc <quorem+0x10c>
 80112de:	3c01      	subs	r4, #1
 80112e0:	f101 0814 	add.w	r8, r1, #20
 80112e4:	00a3      	lsls	r3, r4, #2
 80112e6:	f100 0514 	add.w	r5, r0, #20
 80112ea:	9300      	str	r3, [sp, #0]
 80112ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112f0:	9301      	str	r3, [sp, #4]
 80112f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80112f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112fa:	3301      	adds	r3, #1
 80112fc:	429a      	cmp	r2, r3
 80112fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011302:	fbb2 f6f3 	udiv	r6, r2, r3
 8011306:	d32e      	bcc.n	8011366 <quorem+0x96>
 8011308:	f04f 0a00 	mov.w	sl, #0
 801130c:	46c4      	mov	ip, r8
 801130e:	46ae      	mov	lr, r5
 8011310:	46d3      	mov	fp, sl
 8011312:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011316:	b298      	uxth	r0, r3
 8011318:	fb06 a000 	mla	r0, r6, r0, sl
 801131c:	0c02      	lsrs	r2, r0, #16
 801131e:	0c1b      	lsrs	r3, r3, #16
 8011320:	fb06 2303 	mla	r3, r6, r3, r2
 8011324:	f8de 2000 	ldr.w	r2, [lr]
 8011328:	b280      	uxth	r0, r0
 801132a:	b292      	uxth	r2, r2
 801132c:	1a12      	subs	r2, r2, r0
 801132e:	445a      	add	r2, fp
 8011330:	f8de 0000 	ldr.w	r0, [lr]
 8011334:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011338:	b29b      	uxth	r3, r3
 801133a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801133e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011342:	b292      	uxth	r2, r2
 8011344:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011348:	45e1      	cmp	r9, ip
 801134a:	f84e 2b04 	str.w	r2, [lr], #4
 801134e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011352:	d2de      	bcs.n	8011312 <quorem+0x42>
 8011354:	9b00      	ldr	r3, [sp, #0]
 8011356:	58eb      	ldr	r3, [r5, r3]
 8011358:	b92b      	cbnz	r3, 8011366 <quorem+0x96>
 801135a:	9b01      	ldr	r3, [sp, #4]
 801135c:	3b04      	subs	r3, #4
 801135e:	429d      	cmp	r5, r3
 8011360:	461a      	mov	r2, r3
 8011362:	d32f      	bcc.n	80113c4 <quorem+0xf4>
 8011364:	613c      	str	r4, [r7, #16]
 8011366:	4638      	mov	r0, r7
 8011368:	f001 fc58 	bl	8012c1c <__mcmp>
 801136c:	2800      	cmp	r0, #0
 801136e:	db25      	blt.n	80113bc <quorem+0xec>
 8011370:	4629      	mov	r1, r5
 8011372:	2000      	movs	r0, #0
 8011374:	f858 2b04 	ldr.w	r2, [r8], #4
 8011378:	f8d1 c000 	ldr.w	ip, [r1]
 801137c:	fa1f fe82 	uxth.w	lr, r2
 8011380:	fa1f f38c 	uxth.w	r3, ip
 8011384:	eba3 030e 	sub.w	r3, r3, lr
 8011388:	4403      	add	r3, r0
 801138a:	0c12      	lsrs	r2, r2, #16
 801138c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011390:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011394:	b29b      	uxth	r3, r3
 8011396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801139a:	45c1      	cmp	r9, r8
 801139c:	f841 3b04 	str.w	r3, [r1], #4
 80113a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80113a4:	d2e6      	bcs.n	8011374 <quorem+0xa4>
 80113a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113ae:	b922      	cbnz	r2, 80113ba <quorem+0xea>
 80113b0:	3b04      	subs	r3, #4
 80113b2:	429d      	cmp	r5, r3
 80113b4:	461a      	mov	r2, r3
 80113b6:	d30b      	bcc.n	80113d0 <quorem+0x100>
 80113b8:	613c      	str	r4, [r7, #16]
 80113ba:	3601      	adds	r6, #1
 80113bc:	4630      	mov	r0, r6
 80113be:	b003      	add	sp, #12
 80113c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c4:	6812      	ldr	r2, [r2, #0]
 80113c6:	3b04      	subs	r3, #4
 80113c8:	2a00      	cmp	r2, #0
 80113ca:	d1cb      	bne.n	8011364 <quorem+0x94>
 80113cc:	3c01      	subs	r4, #1
 80113ce:	e7c6      	b.n	801135e <quorem+0x8e>
 80113d0:	6812      	ldr	r2, [r2, #0]
 80113d2:	3b04      	subs	r3, #4
 80113d4:	2a00      	cmp	r2, #0
 80113d6:	d1ef      	bne.n	80113b8 <quorem+0xe8>
 80113d8:	3c01      	subs	r4, #1
 80113da:	e7ea      	b.n	80113b2 <quorem+0xe2>
 80113dc:	2000      	movs	r0, #0
 80113de:	e7ee      	b.n	80113be <quorem+0xee>

080113e0 <_dtoa_r>:
 80113e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e4:	69c7      	ldr	r7, [r0, #28]
 80113e6:	b099      	sub	sp, #100	@ 0x64
 80113e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80113ec:	ec55 4b10 	vmov	r4, r5, d0
 80113f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80113f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80113f4:	4683      	mov	fp, r0
 80113f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80113f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80113fa:	b97f      	cbnz	r7, 801141c <_dtoa_r+0x3c>
 80113fc:	2010      	movs	r0, #16
 80113fe:	f7fd fd97 	bl	800ef30 <malloc>
 8011402:	4602      	mov	r2, r0
 8011404:	f8cb 001c 	str.w	r0, [fp, #28]
 8011408:	b920      	cbnz	r0, 8011414 <_dtoa_r+0x34>
 801140a:	4ba7      	ldr	r3, [pc, #668]	@ (80116a8 <_dtoa_r+0x2c8>)
 801140c:	21ef      	movs	r1, #239	@ 0xef
 801140e:	48a7      	ldr	r0, [pc, #668]	@ (80116ac <_dtoa_r+0x2cc>)
 8011410:	f7ff ff40 	bl	8011294 <__assert_func>
 8011414:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011418:	6007      	str	r7, [r0, #0]
 801141a:	60c7      	str	r7, [r0, #12]
 801141c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011420:	6819      	ldr	r1, [r3, #0]
 8011422:	b159      	cbz	r1, 801143c <_dtoa_r+0x5c>
 8011424:	685a      	ldr	r2, [r3, #4]
 8011426:	604a      	str	r2, [r1, #4]
 8011428:	2301      	movs	r3, #1
 801142a:	4093      	lsls	r3, r2
 801142c:	608b      	str	r3, [r1, #8]
 801142e:	4658      	mov	r0, fp
 8011430:	f001 f970 	bl	8012714 <_Bfree>
 8011434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011438:	2200      	movs	r2, #0
 801143a:	601a      	str	r2, [r3, #0]
 801143c:	1e2b      	subs	r3, r5, #0
 801143e:	bfb9      	ittee	lt
 8011440:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011444:	9303      	strlt	r3, [sp, #12]
 8011446:	2300      	movge	r3, #0
 8011448:	6033      	strge	r3, [r6, #0]
 801144a:	9f03      	ldr	r7, [sp, #12]
 801144c:	4b98      	ldr	r3, [pc, #608]	@ (80116b0 <_dtoa_r+0x2d0>)
 801144e:	bfbc      	itt	lt
 8011450:	2201      	movlt	r2, #1
 8011452:	6032      	strlt	r2, [r6, #0]
 8011454:	43bb      	bics	r3, r7
 8011456:	d112      	bne.n	801147e <_dtoa_r+0x9e>
 8011458:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801145a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801145e:	6013      	str	r3, [r2, #0]
 8011460:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011464:	4323      	orrs	r3, r4
 8011466:	f000 854d 	beq.w	8011f04 <_dtoa_r+0xb24>
 801146a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801146c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80116c4 <_dtoa_r+0x2e4>
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 854f 	beq.w	8011f14 <_dtoa_r+0xb34>
 8011476:	f10a 0303 	add.w	r3, sl, #3
 801147a:	f000 bd49 	b.w	8011f10 <_dtoa_r+0xb30>
 801147e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011482:	2200      	movs	r2, #0
 8011484:	ec51 0b17 	vmov	r0, r1, d7
 8011488:	2300      	movs	r3, #0
 801148a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801148e:	f7ef fb43 	bl	8000b18 <__aeabi_dcmpeq>
 8011492:	4680      	mov	r8, r0
 8011494:	b158      	cbz	r0, 80114ae <_dtoa_r+0xce>
 8011496:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011498:	2301      	movs	r3, #1
 801149a:	6013      	str	r3, [r2, #0]
 801149c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801149e:	b113      	cbz	r3, 80114a6 <_dtoa_r+0xc6>
 80114a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80114a2:	4b84      	ldr	r3, [pc, #528]	@ (80116b4 <_dtoa_r+0x2d4>)
 80114a4:	6013      	str	r3, [r2, #0]
 80114a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80116c8 <_dtoa_r+0x2e8>
 80114aa:	f000 bd33 	b.w	8011f14 <_dtoa_r+0xb34>
 80114ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80114b2:	aa16      	add	r2, sp, #88	@ 0x58
 80114b4:	a917      	add	r1, sp, #92	@ 0x5c
 80114b6:	4658      	mov	r0, fp
 80114b8:	f001 fcd0 	bl	8012e5c <__d2b>
 80114bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80114c0:	4681      	mov	r9, r0
 80114c2:	2e00      	cmp	r6, #0
 80114c4:	d077      	beq.n	80115b6 <_dtoa_r+0x1d6>
 80114c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80114cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80114d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80114dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80114e0:	4619      	mov	r1, r3
 80114e2:	2200      	movs	r2, #0
 80114e4:	4b74      	ldr	r3, [pc, #464]	@ (80116b8 <_dtoa_r+0x2d8>)
 80114e6:	f7ee fef7 	bl	80002d8 <__aeabi_dsub>
 80114ea:	a369      	add	r3, pc, #420	@ (adr r3, 8011690 <_dtoa_r+0x2b0>)
 80114ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f0:	f7ef f8aa 	bl	8000648 <__aeabi_dmul>
 80114f4:	a368      	add	r3, pc, #416	@ (adr r3, 8011698 <_dtoa_r+0x2b8>)
 80114f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fa:	f7ee feef 	bl	80002dc <__adddf3>
 80114fe:	4604      	mov	r4, r0
 8011500:	4630      	mov	r0, r6
 8011502:	460d      	mov	r5, r1
 8011504:	f7ef f836 	bl	8000574 <__aeabi_i2d>
 8011508:	a365      	add	r3, pc, #404	@ (adr r3, 80116a0 <_dtoa_r+0x2c0>)
 801150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150e:	f7ef f89b 	bl	8000648 <__aeabi_dmul>
 8011512:	4602      	mov	r2, r0
 8011514:	460b      	mov	r3, r1
 8011516:	4620      	mov	r0, r4
 8011518:	4629      	mov	r1, r5
 801151a:	f7ee fedf 	bl	80002dc <__adddf3>
 801151e:	4604      	mov	r4, r0
 8011520:	460d      	mov	r5, r1
 8011522:	f7ef fb41 	bl	8000ba8 <__aeabi_d2iz>
 8011526:	2200      	movs	r2, #0
 8011528:	4607      	mov	r7, r0
 801152a:	2300      	movs	r3, #0
 801152c:	4620      	mov	r0, r4
 801152e:	4629      	mov	r1, r5
 8011530:	f7ef fafc 	bl	8000b2c <__aeabi_dcmplt>
 8011534:	b140      	cbz	r0, 8011548 <_dtoa_r+0x168>
 8011536:	4638      	mov	r0, r7
 8011538:	f7ef f81c 	bl	8000574 <__aeabi_i2d>
 801153c:	4622      	mov	r2, r4
 801153e:	462b      	mov	r3, r5
 8011540:	f7ef faea 	bl	8000b18 <__aeabi_dcmpeq>
 8011544:	b900      	cbnz	r0, 8011548 <_dtoa_r+0x168>
 8011546:	3f01      	subs	r7, #1
 8011548:	2f16      	cmp	r7, #22
 801154a:	d851      	bhi.n	80115f0 <_dtoa_r+0x210>
 801154c:	4b5b      	ldr	r3, [pc, #364]	@ (80116bc <_dtoa_r+0x2dc>)
 801154e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801155a:	f7ef fae7 	bl	8000b2c <__aeabi_dcmplt>
 801155e:	2800      	cmp	r0, #0
 8011560:	d048      	beq.n	80115f4 <_dtoa_r+0x214>
 8011562:	3f01      	subs	r7, #1
 8011564:	2300      	movs	r3, #0
 8011566:	9312      	str	r3, [sp, #72]	@ 0x48
 8011568:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801156a:	1b9b      	subs	r3, r3, r6
 801156c:	1e5a      	subs	r2, r3, #1
 801156e:	bf44      	itt	mi
 8011570:	f1c3 0801 	rsbmi	r8, r3, #1
 8011574:	2300      	movmi	r3, #0
 8011576:	9208      	str	r2, [sp, #32]
 8011578:	bf54      	ite	pl
 801157a:	f04f 0800 	movpl.w	r8, #0
 801157e:	9308      	strmi	r3, [sp, #32]
 8011580:	2f00      	cmp	r7, #0
 8011582:	db39      	blt.n	80115f8 <_dtoa_r+0x218>
 8011584:	9b08      	ldr	r3, [sp, #32]
 8011586:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011588:	443b      	add	r3, r7
 801158a:	9308      	str	r3, [sp, #32]
 801158c:	2300      	movs	r3, #0
 801158e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011592:	2b09      	cmp	r3, #9
 8011594:	d864      	bhi.n	8011660 <_dtoa_r+0x280>
 8011596:	2b05      	cmp	r3, #5
 8011598:	bfc4      	itt	gt
 801159a:	3b04      	subgt	r3, #4
 801159c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801159e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115a0:	f1a3 0302 	sub.w	r3, r3, #2
 80115a4:	bfcc      	ite	gt
 80115a6:	2400      	movgt	r4, #0
 80115a8:	2401      	movle	r4, #1
 80115aa:	2b03      	cmp	r3, #3
 80115ac:	d863      	bhi.n	8011676 <_dtoa_r+0x296>
 80115ae:	e8df f003 	tbb	[pc, r3]
 80115b2:	372a      	.short	0x372a
 80115b4:	5535      	.short	0x5535
 80115b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80115ba:	441e      	add	r6, r3
 80115bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80115c0:	2b20      	cmp	r3, #32
 80115c2:	bfc1      	itttt	gt
 80115c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80115c8:	409f      	lslgt	r7, r3
 80115ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80115ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80115d2:	bfd6      	itet	le
 80115d4:	f1c3 0320 	rsble	r3, r3, #32
 80115d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80115dc:	fa04 f003 	lslle.w	r0, r4, r3
 80115e0:	f7ee ffb8 	bl	8000554 <__aeabi_ui2d>
 80115e4:	2201      	movs	r2, #1
 80115e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80115ea:	3e01      	subs	r6, #1
 80115ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80115ee:	e777      	b.n	80114e0 <_dtoa_r+0x100>
 80115f0:	2301      	movs	r3, #1
 80115f2:	e7b8      	b.n	8011566 <_dtoa_r+0x186>
 80115f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80115f6:	e7b7      	b.n	8011568 <_dtoa_r+0x188>
 80115f8:	427b      	negs	r3, r7
 80115fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80115fc:	2300      	movs	r3, #0
 80115fe:	eba8 0807 	sub.w	r8, r8, r7
 8011602:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011604:	e7c4      	b.n	8011590 <_dtoa_r+0x1b0>
 8011606:	2300      	movs	r3, #0
 8011608:	930b      	str	r3, [sp, #44]	@ 0x2c
 801160a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801160c:	2b00      	cmp	r3, #0
 801160e:	dc35      	bgt.n	801167c <_dtoa_r+0x29c>
 8011610:	2301      	movs	r3, #1
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	9307      	str	r3, [sp, #28]
 8011616:	461a      	mov	r2, r3
 8011618:	920e      	str	r2, [sp, #56]	@ 0x38
 801161a:	e00b      	b.n	8011634 <_dtoa_r+0x254>
 801161c:	2301      	movs	r3, #1
 801161e:	e7f3      	b.n	8011608 <_dtoa_r+0x228>
 8011620:	2300      	movs	r3, #0
 8011622:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011626:	18fb      	adds	r3, r7, r3
 8011628:	9300      	str	r3, [sp, #0]
 801162a:	3301      	adds	r3, #1
 801162c:	2b01      	cmp	r3, #1
 801162e:	9307      	str	r3, [sp, #28]
 8011630:	bfb8      	it	lt
 8011632:	2301      	movlt	r3, #1
 8011634:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011638:	2100      	movs	r1, #0
 801163a:	2204      	movs	r2, #4
 801163c:	f102 0514 	add.w	r5, r2, #20
 8011640:	429d      	cmp	r5, r3
 8011642:	d91f      	bls.n	8011684 <_dtoa_r+0x2a4>
 8011644:	6041      	str	r1, [r0, #4]
 8011646:	4658      	mov	r0, fp
 8011648:	f001 f824 	bl	8012694 <_Balloc>
 801164c:	4682      	mov	sl, r0
 801164e:	2800      	cmp	r0, #0
 8011650:	d13c      	bne.n	80116cc <_dtoa_r+0x2ec>
 8011652:	4b1b      	ldr	r3, [pc, #108]	@ (80116c0 <_dtoa_r+0x2e0>)
 8011654:	4602      	mov	r2, r0
 8011656:	f240 11af 	movw	r1, #431	@ 0x1af
 801165a:	e6d8      	b.n	801140e <_dtoa_r+0x2e>
 801165c:	2301      	movs	r3, #1
 801165e:	e7e0      	b.n	8011622 <_dtoa_r+0x242>
 8011660:	2401      	movs	r4, #1
 8011662:	2300      	movs	r3, #0
 8011664:	9309      	str	r3, [sp, #36]	@ 0x24
 8011666:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011668:	f04f 33ff 	mov.w	r3, #4294967295
 801166c:	9300      	str	r3, [sp, #0]
 801166e:	9307      	str	r3, [sp, #28]
 8011670:	2200      	movs	r2, #0
 8011672:	2312      	movs	r3, #18
 8011674:	e7d0      	b.n	8011618 <_dtoa_r+0x238>
 8011676:	2301      	movs	r3, #1
 8011678:	930b      	str	r3, [sp, #44]	@ 0x2c
 801167a:	e7f5      	b.n	8011668 <_dtoa_r+0x288>
 801167c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	9307      	str	r3, [sp, #28]
 8011682:	e7d7      	b.n	8011634 <_dtoa_r+0x254>
 8011684:	3101      	adds	r1, #1
 8011686:	0052      	lsls	r2, r2, #1
 8011688:	e7d8      	b.n	801163c <_dtoa_r+0x25c>
 801168a:	bf00      	nop
 801168c:	f3af 8000 	nop.w
 8011690:	636f4361 	.word	0x636f4361
 8011694:	3fd287a7 	.word	0x3fd287a7
 8011698:	8b60c8b3 	.word	0x8b60c8b3
 801169c:	3fc68a28 	.word	0x3fc68a28
 80116a0:	509f79fb 	.word	0x509f79fb
 80116a4:	3fd34413 	.word	0x3fd34413
 80116a8:	08013d8a 	.word	0x08013d8a
 80116ac:	08013e4c 	.word	0x08013e4c
 80116b0:	7ff00000 	.word	0x7ff00000
 80116b4:	08013d62 	.word	0x08013d62
 80116b8:	3ff80000 	.word	0x3ff80000
 80116bc:	08013fa8 	.word	0x08013fa8
 80116c0:	08013ea4 	.word	0x08013ea4
 80116c4:	08013e48 	.word	0x08013e48
 80116c8:	08013d61 	.word	0x08013d61
 80116cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80116d0:	6018      	str	r0, [r3, #0]
 80116d2:	9b07      	ldr	r3, [sp, #28]
 80116d4:	2b0e      	cmp	r3, #14
 80116d6:	f200 80a4 	bhi.w	8011822 <_dtoa_r+0x442>
 80116da:	2c00      	cmp	r4, #0
 80116dc:	f000 80a1 	beq.w	8011822 <_dtoa_r+0x442>
 80116e0:	2f00      	cmp	r7, #0
 80116e2:	dd33      	ble.n	801174c <_dtoa_r+0x36c>
 80116e4:	4bad      	ldr	r3, [pc, #692]	@ (801199c <_dtoa_r+0x5bc>)
 80116e6:	f007 020f 	and.w	r2, r7, #15
 80116ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ee:	ed93 7b00 	vldr	d7, [r3]
 80116f2:	05f8      	lsls	r0, r7, #23
 80116f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80116f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80116fc:	d516      	bpl.n	801172c <_dtoa_r+0x34c>
 80116fe:	4ba8      	ldr	r3, [pc, #672]	@ (80119a0 <_dtoa_r+0x5c0>)
 8011700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011708:	f7ef f8c8 	bl	800089c <__aeabi_ddiv>
 801170c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011710:	f004 040f 	and.w	r4, r4, #15
 8011714:	2603      	movs	r6, #3
 8011716:	4da2      	ldr	r5, [pc, #648]	@ (80119a0 <_dtoa_r+0x5c0>)
 8011718:	b954      	cbnz	r4, 8011730 <_dtoa_r+0x350>
 801171a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801171e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011722:	f7ef f8bb 	bl	800089c <__aeabi_ddiv>
 8011726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801172a:	e028      	b.n	801177e <_dtoa_r+0x39e>
 801172c:	2602      	movs	r6, #2
 801172e:	e7f2      	b.n	8011716 <_dtoa_r+0x336>
 8011730:	07e1      	lsls	r1, r4, #31
 8011732:	d508      	bpl.n	8011746 <_dtoa_r+0x366>
 8011734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011738:	e9d5 2300 	ldrd	r2, r3, [r5]
 801173c:	f7ee ff84 	bl	8000648 <__aeabi_dmul>
 8011740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011744:	3601      	adds	r6, #1
 8011746:	1064      	asrs	r4, r4, #1
 8011748:	3508      	adds	r5, #8
 801174a:	e7e5      	b.n	8011718 <_dtoa_r+0x338>
 801174c:	f000 80d2 	beq.w	80118f4 <_dtoa_r+0x514>
 8011750:	427c      	negs	r4, r7
 8011752:	4b92      	ldr	r3, [pc, #584]	@ (801199c <_dtoa_r+0x5bc>)
 8011754:	4d92      	ldr	r5, [pc, #584]	@ (80119a0 <_dtoa_r+0x5c0>)
 8011756:	f004 020f 	and.w	r2, r4, #15
 801175a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011766:	f7ee ff6f 	bl	8000648 <__aeabi_dmul>
 801176a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801176e:	1124      	asrs	r4, r4, #4
 8011770:	2300      	movs	r3, #0
 8011772:	2602      	movs	r6, #2
 8011774:	2c00      	cmp	r4, #0
 8011776:	f040 80b2 	bne.w	80118de <_dtoa_r+0x4fe>
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1d3      	bne.n	8011726 <_dtoa_r+0x346>
 801177e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011780:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011784:	2b00      	cmp	r3, #0
 8011786:	f000 80b7 	beq.w	80118f8 <_dtoa_r+0x518>
 801178a:	4b86      	ldr	r3, [pc, #536]	@ (80119a4 <_dtoa_r+0x5c4>)
 801178c:	2200      	movs	r2, #0
 801178e:	4620      	mov	r0, r4
 8011790:	4629      	mov	r1, r5
 8011792:	f7ef f9cb 	bl	8000b2c <__aeabi_dcmplt>
 8011796:	2800      	cmp	r0, #0
 8011798:	f000 80ae 	beq.w	80118f8 <_dtoa_r+0x518>
 801179c:	9b07      	ldr	r3, [sp, #28]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f000 80aa 	beq.w	80118f8 <_dtoa_r+0x518>
 80117a4:	9b00      	ldr	r3, [sp, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	dd37      	ble.n	801181a <_dtoa_r+0x43a>
 80117aa:	1e7b      	subs	r3, r7, #1
 80117ac:	9304      	str	r3, [sp, #16]
 80117ae:	4620      	mov	r0, r4
 80117b0:	4b7d      	ldr	r3, [pc, #500]	@ (80119a8 <_dtoa_r+0x5c8>)
 80117b2:	2200      	movs	r2, #0
 80117b4:	4629      	mov	r1, r5
 80117b6:	f7ee ff47 	bl	8000648 <__aeabi_dmul>
 80117ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117be:	9c00      	ldr	r4, [sp, #0]
 80117c0:	3601      	adds	r6, #1
 80117c2:	4630      	mov	r0, r6
 80117c4:	f7ee fed6 	bl	8000574 <__aeabi_i2d>
 80117c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117cc:	f7ee ff3c 	bl	8000648 <__aeabi_dmul>
 80117d0:	4b76      	ldr	r3, [pc, #472]	@ (80119ac <_dtoa_r+0x5cc>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	f7ee fd82 	bl	80002dc <__adddf3>
 80117d8:	4605      	mov	r5, r0
 80117da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80117de:	2c00      	cmp	r4, #0
 80117e0:	f040 808d 	bne.w	80118fe <_dtoa_r+0x51e>
 80117e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117e8:	4b71      	ldr	r3, [pc, #452]	@ (80119b0 <_dtoa_r+0x5d0>)
 80117ea:	2200      	movs	r2, #0
 80117ec:	f7ee fd74 	bl	80002d8 <__aeabi_dsub>
 80117f0:	4602      	mov	r2, r0
 80117f2:	460b      	mov	r3, r1
 80117f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80117f8:	462a      	mov	r2, r5
 80117fa:	4633      	mov	r3, r6
 80117fc:	f7ef f9b4 	bl	8000b68 <__aeabi_dcmpgt>
 8011800:	2800      	cmp	r0, #0
 8011802:	f040 828b 	bne.w	8011d1c <_dtoa_r+0x93c>
 8011806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801180a:	462a      	mov	r2, r5
 801180c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011810:	f7ef f98c 	bl	8000b2c <__aeabi_dcmplt>
 8011814:	2800      	cmp	r0, #0
 8011816:	f040 8128 	bne.w	8011a6a <_dtoa_r+0x68a>
 801181a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801181e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011822:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011824:	2b00      	cmp	r3, #0
 8011826:	f2c0 815a 	blt.w	8011ade <_dtoa_r+0x6fe>
 801182a:	2f0e      	cmp	r7, #14
 801182c:	f300 8157 	bgt.w	8011ade <_dtoa_r+0x6fe>
 8011830:	4b5a      	ldr	r3, [pc, #360]	@ (801199c <_dtoa_r+0x5bc>)
 8011832:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011836:	ed93 7b00 	vldr	d7, [r3]
 801183a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801183c:	2b00      	cmp	r3, #0
 801183e:	ed8d 7b00 	vstr	d7, [sp]
 8011842:	da03      	bge.n	801184c <_dtoa_r+0x46c>
 8011844:	9b07      	ldr	r3, [sp, #28]
 8011846:	2b00      	cmp	r3, #0
 8011848:	f340 8101 	ble.w	8011a4e <_dtoa_r+0x66e>
 801184c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011850:	4656      	mov	r6, sl
 8011852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011856:	4620      	mov	r0, r4
 8011858:	4629      	mov	r1, r5
 801185a:	f7ef f81f 	bl	800089c <__aeabi_ddiv>
 801185e:	f7ef f9a3 	bl	8000ba8 <__aeabi_d2iz>
 8011862:	4680      	mov	r8, r0
 8011864:	f7ee fe86 	bl	8000574 <__aeabi_i2d>
 8011868:	e9dd 2300 	ldrd	r2, r3, [sp]
 801186c:	f7ee feec 	bl	8000648 <__aeabi_dmul>
 8011870:	4602      	mov	r2, r0
 8011872:	460b      	mov	r3, r1
 8011874:	4620      	mov	r0, r4
 8011876:	4629      	mov	r1, r5
 8011878:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801187c:	f7ee fd2c 	bl	80002d8 <__aeabi_dsub>
 8011880:	f806 4b01 	strb.w	r4, [r6], #1
 8011884:	9d07      	ldr	r5, [sp, #28]
 8011886:	eba6 040a 	sub.w	r4, r6, sl
 801188a:	42a5      	cmp	r5, r4
 801188c:	4602      	mov	r2, r0
 801188e:	460b      	mov	r3, r1
 8011890:	f040 8117 	bne.w	8011ac2 <_dtoa_r+0x6e2>
 8011894:	f7ee fd22 	bl	80002dc <__adddf3>
 8011898:	e9dd 2300 	ldrd	r2, r3, [sp]
 801189c:	4604      	mov	r4, r0
 801189e:	460d      	mov	r5, r1
 80118a0:	f7ef f962 	bl	8000b68 <__aeabi_dcmpgt>
 80118a4:	2800      	cmp	r0, #0
 80118a6:	f040 80f9 	bne.w	8011a9c <_dtoa_r+0x6bc>
 80118aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118ae:	4620      	mov	r0, r4
 80118b0:	4629      	mov	r1, r5
 80118b2:	f7ef f931 	bl	8000b18 <__aeabi_dcmpeq>
 80118b6:	b118      	cbz	r0, 80118c0 <_dtoa_r+0x4e0>
 80118b8:	f018 0f01 	tst.w	r8, #1
 80118bc:	f040 80ee 	bne.w	8011a9c <_dtoa_r+0x6bc>
 80118c0:	4649      	mov	r1, r9
 80118c2:	4658      	mov	r0, fp
 80118c4:	f000 ff26 	bl	8012714 <_Bfree>
 80118c8:	2300      	movs	r3, #0
 80118ca:	7033      	strb	r3, [r6, #0]
 80118cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80118ce:	3701      	adds	r7, #1
 80118d0:	601f      	str	r7, [r3, #0]
 80118d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f000 831d 	beq.w	8011f14 <_dtoa_r+0xb34>
 80118da:	601e      	str	r6, [r3, #0]
 80118dc:	e31a      	b.n	8011f14 <_dtoa_r+0xb34>
 80118de:	07e2      	lsls	r2, r4, #31
 80118e0:	d505      	bpl.n	80118ee <_dtoa_r+0x50e>
 80118e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80118e6:	f7ee feaf 	bl	8000648 <__aeabi_dmul>
 80118ea:	3601      	adds	r6, #1
 80118ec:	2301      	movs	r3, #1
 80118ee:	1064      	asrs	r4, r4, #1
 80118f0:	3508      	adds	r5, #8
 80118f2:	e73f      	b.n	8011774 <_dtoa_r+0x394>
 80118f4:	2602      	movs	r6, #2
 80118f6:	e742      	b.n	801177e <_dtoa_r+0x39e>
 80118f8:	9c07      	ldr	r4, [sp, #28]
 80118fa:	9704      	str	r7, [sp, #16]
 80118fc:	e761      	b.n	80117c2 <_dtoa_r+0x3e2>
 80118fe:	4b27      	ldr	r3, [pc, #156]	@ (801199c <_dtoa_r+0x5bc>)
 8011900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011902:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011906:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801190a:	4454      	add	r4, sl
 801190c:	2900      	cmp	r1, #0
 801190e:	d053      	beq.n	80119b8 <_dtoa_r+0x5d8>
 8011910:	4928      	ldr	r1, [pc, #160]	@ (80119b4 <_dtoa_r+0x5d4>)
 8011912:	2000      	movs	r0, #0
 8011914:	f7ee ffc2 	bl	800089c <__aeabi_ddiv>
 8011918:	4633      	mov	r3, r6
 801191a:	462a      	mov	r2, r5
 801191c:	f7ee fcdc 	bl	80002d8 <__aeabi_dsub>
 8011920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011924:	4656      	mov	r6, sl
 8011926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801192a:	f7ef f93d 	bl	8000ba8 <__aeabi_d2iz>
 801192e:	4605      	mov	r5, r0
 8011930:	f7ee fe20 	bl	8000574 <__aeabi_i2d>
 8011934:	4602      	mov	r2, r0
 8011936:	460b      	mov	r3, r1
 8011938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801193c:	f7ee fccc 	bl	80002d8 <__aeabi_dsub>
 8011940:	3530      	adds	r5, #48	@ 0x30
 8011942:	4602      	mov	r2, r0
 8011944:	460b      	mov	r3, r1
 8011946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801194a:	f806 5b01 	strb.w	r5, [r6], #1
 801194e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011952:	f7ef f8eb 	bl	8000b2c <__aeabi_dcmplt>
 8011956:	2800      	cmp	r0, #0
 8011958:	d171      	bne.n	8011a3e <_dtoa_r+0x65e>
 801195a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801195e:	4911      	ldr	r1, [pc, #68]	@ (80119a4 <_dtoa_r+0x5c4>)
 8011960:	2000      	movs	r0, #0
 8011962:	f7ee fcb9 	bl	80002d8 <__aeabi_dsub>
 8011966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801196a:	f7ef f8df 	bl	8000b2c <__aeabi_dcmplt>
 801196e:	2800      	cmp	r0, #0
 8011970:	f040 8095 	bne.w	8011a9e <_dtoa_r+0x6be>
 8011974:	42a6      	cmp	r6, r4
 8011976:	f43f af50 	beq.w	801181a <_dtoa_r+0x43a>
 801197a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801197e:	4b0a      	ldr	r3, [pc, #40]	@ (80119a8 <_dtoa_r+0x5c8>)
 8011980:	2200      	movs	r2, #0
 8011982:	f7ee fe61 	bl	8000648 <__aeabi_dmul>
 8011986:	4b08      	ldr	r3, [pc, #32]	@ (80119a8 <_dtoa_r+0x5c8>)
 8011988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801198c:	2200      	movs	r2, #0
 801198e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011992:	f7ee fe59 	bl	8000648 <__aeabi_dmul>
 8011996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801199a:	e7c4      	b.n	8011926 <_dtoa_r+0x546>
 801199c:	08013fa8 	.word	0x08013fa8
 80119a0:	08013f80 	.word	0x08013f80
 80119a4:	3ff00000 	.word	0x3ff00000
 80119a8:	40240000 	.word	0x40240000
 80119ac:	401c0000 	.word	0x401c0000
 80119b0:	40140000 	.word	0x40140000
 80119b4:	3fe00000 	.word	0x3fe00000
 80119b8:	4631      	mov	r1, r6
 80119ba:	4628      	mov	r0, r5
 80119bc:	f7ee fe44 	bl	8000648 <__aeabi_dmul>
 80119c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80119c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80119c6:	4656      	mov	r6, sl
 80119c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119cc:	f7ef f8ec 	bl	8000ba8 <__aeabi_d2iz>
 80119d0:	4605      	mov	r5, r0
 80119d2:	f7ee fdcf 	bl	8000574 <__aeabi_i2d>
 80119d6:	4602      	mov	r2, r0
 80119d8:	460b      	mov	r3, r1
 80119da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119de:	f7ee fc7b 	bl	80002d8 <__aeabi_dsub>
 80119e2:	3530      	adds	r5, #48	@ 0x30
 80119e4:	f806 5b01 	strb.w	r5, [r6], #1
 80119e8:	4602      	mov	r2, r0
 80119ea:	460b      	mov	r3, r1
 80119ec:	42a6      	cmp	r6, r4
 80119ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80119f2:	f04f 0200 	mov.w	r2, #0
 80119f6:	d124      	bne.n	8011a42 <_dtoa_r+0x662>
 80119f8:	4bac      	ldr	r3, [pc, #688]	@ (8011cac <_dtoa_r+0x8cc>)
 80119fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80119fe:	f7ee fc6d 	bl	80002dc <__adddf3>
 8011a02:	4602      	mov	r2, r0
 8011a04:	460b      	mov	r3, r1
 8011a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a0a:	f7ef f8ad 	bl	8000b68 <__aeabi_dcmpgt>
 8011a0e:	2800      	cmp	r0, #0
 8011a10:	d145      	bne.n	8011a9e <_dtoa_r+0x6be>
 8011a12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011a16:	49a5      	ldr	r1, [pc, #660]	@ (8011cac <_dtoa_r+0x8cc>)
 8011a18:	2000      	movs	r0, #0
 8011a1a:	f7ee fc5d 	bl	80002d8 <__aeabi_dsub>
 8011a1e:	4602      	mov	r2, r0
 8011a20:	460b      	mov	r3, r1
 8011a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a26:	f7ef f881 	bl	8000b2c <__aeabi_dcmplt>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	f43f aef5 	beq.w	801181a <_dtoa_r+0x43a>
 8011a30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011a32:	1e73      	subs	r3, r6, #1
 8011a34:	9315      	str	r3, [sp, #84]	@ 0x54
 8011a36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011a3a:	2b30      	cmp	r3, #48	@ 0x30
 8011a3c:	d0f8      	beq.n	8011a30 <_dtoa_r+0x650>
 8011a3e:	9f04      	ldr	r7, [sp, #16]
 8011a40:	e73e      	b.n	80118c0 <_dtoa_r+0x4e0>
 8011a42:	4b9b      	ldr	r3, [pc, #620]	@ (8011cb0 <_dtoa_r+0x8d0>)
 8011a44:	f7ee fe00 	bl	8000648 <__aeabi_dmul>
 8011a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a4c:	e7bc      	b.n	80119c8 <_dtoa_r+0x5e8>
 8011a4e:	d10c      	bne.n	8011a6a <_dtoa_r+0x68a>
 8011a50:	4b98      	ldr	r3, [pc, #608]	@ (8011cb4 <_dtoa_r+0x8d4>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a58:	f7ee fdf6 	bl	8000648 <__aeabi_dmul>
 8011a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a60:	f7ef f878 	bl	8000b54 <__aeabi_dcmpge>
 8011a64:	2800      	cmp	r0, #0
 8011a66:	f000 8157 	beq.w	8011d18 <_dtoa_r+0x938>
 8011a6a:	2400      	movs	r4, #0
 8011a6c:	4625      	mov	r5, r4
 8011a6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a70:	43db      	mvns	r3, r3
 8011a72:	9304      	str	r3, [sp, #16]
 8011a74:	4656      	mov	r6, sl
 8011a76:	2700      	movs	r7, #0
 8011a78:	4621      	mov	r1, r4
 8011a7a:	4658      	mov	r0, fp
 8011a7c:	f000 fe4a 	bl	8012714 <_Bfree>
 8011a80:	2d00      	cmp	r5, #0
 8011a82:	d0dc      	beq.n	8011a3e <_dtoa_r+0x65e>
 8011a84:	b12f      	cbz	r7, 8011a92 <_dtoa_r+0x6b2>
 8011a86:	42af      	cmp	r7, r5
 8011a88:	d003      	beq.n	8011a92 <_dtoa_r+0x6b2>
 8011a8a:	4639      	mov	r1, r7
 8011a8c:	4658      	mov	r0, fp
 8011a8e:	f000 fe41 	bl	8012714 <_Bfree>
 8011a92:	4629      	mov	r1, r5
 8011a94:	4658      	mov	r0, fp
 8011a96:	f000 fe3d 	bl	8012714 <_Bfree>
 8011a9a:	e7d0      	b.n	8011a3e <_dtoa_r+0x65e>
 8011a9c:	9704      	str	r7, [sp, #16]
 8011a9e:	4633      	mov	r3, r6
 8011aa0:	461e      	mov	r6, r3
 8011aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011aa6:	2a39      	cmp	r2, #57	@ 0x39
 8011aa8:	d107      	bne.n	8011aba <_dtoa_r+0x6da>
 8011aaa:	459a      	cmp	sl, r3
 8011aac:	d1f8      	bne.n	8011aa0 <_dtoa_r+0x6c0>
 8011aae:	9a04      	ldr	r2, [sp, #16]
 8011ab0:	3201      	adds	r2, #1
 8011ab2:	9204      	str	r2, [sp, #16]
 8011ab4:	2230      	movs	r2, #48	@ 0x30
 8011ab6:	f88a 2000 	strb.w	r2, [sl]
 8011aba:	781a      	ldrb	r2, [r3, #0]
 8011abc:	3201      	adds	r2, #1
 8011abe:	701a      	strb	r2, [r3, #0]
 8011ac0:	e7bd      	b.n	8011a3e <_dtoa_r+0x65e>
 8011ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8011cb0 <_dtoa_r+0x8d0>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f7ee fdbf 	bl	8000648 <__aeabi_dmul>
 8011aca:	2200      	movs	r2, #0
 8011acc:	2300      	movs	r3, #0
 8011ace:	4604      	mov	r4, r0
 8011ad0:	460d      	mov	r5, r1
 8011ad2:	f7ef f821 	bl	8000b18 <__aeabi_dcmpeq>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	f43f aebb 	beq.w	8011852 <_dtoa_r+0x472>
 8011adc:	e6f0      	b.n	80118c0 <_dtoa_r+0x4e0>
 8011ade:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011ae0:	2a00      	cmp	r2, #0
 8011ae2:	f000 80db 	beq.w	8011c9c <_dtoa_r+0x8bc>
 8011ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ae8:	2a01      	cmp	r2, #1
 8011aea:	f300 80bf 	bgt.w	8011c6c <_dtoa_r+0x88c>
 8011aee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011af0:	2a00      	cmp	r2, #0
 8011af2:	f000 80b7 	beq.w	8011c64 <_dtoa_r+0x884>
 8011af6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011afa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011afc:	4646      	mov	r6, r8
 8011afe:	9a08      	ldr	r2, [sp, #32]
 8011b00:	2101      	movs	r1, #1
 8011b02:	441a      	add	r2, r3
 8011b04:	4658      	mov	r0, fp
 8011b06:	4498      	add	r8, r3
 8011b08:	9208      	str	r2, [sp, #32]
 8011b0a:	f000 ff01 	bl	8012910 <__i2b>
 8011b0e:	4605      	mov	r5, r0
 8011b10:	b15e      	cbz	r6, 8011b2a <_dtoa_r+0x74a>
 8011b12:	9b08      	ldr	r3, [sp, #32]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	dd08      	ble.n	8011b2a <_dtoa_r+0x74a>
 8011b18:	42b3      	cmp	r3, r6
 8011b1a:	9a08      	ldr	r2, [sp, #32]
 8011b1c:	bfa8      	it	ge
 8011b1e:	4633      	movge	r3, r6
 8011b20:	eba8 0803 	sub.w	r8, r8, r3
 8011b24:	1af6      	subs	r6, r6, r3
 8011b26:	1ad3      	subs	r3, r2, r3
 8011b28:	9308      	str	r3, [sp, #32]
 8011b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b2c:	b1f3      	cbz	r3, 8011b6c <_dtoa_r+0x78c>
 8011b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f000 80b7 	beq.w	8011ca4 <_dtoa_r+0x8c4>
 8011b36:	b18c      	cbz	r4, 8011b5c <_dtoa_r+0x77c>
 8011b38:	4629      	mov	r1, r5
 8011b3a:	4622      	mov	r2, r4
 8011b3c:	4658      	mov	r0, fp
 8011b3e:	f000 ffa7 	bl	8012a90 <__pow5mult>
 8011b42:	464a      	mov	r2, r9
 8011b44:	4601      	mov	r1, r0
 8011b46:	4605      	mov	r5, r0
 8011b48:	4658      	mov	r0, fp
 8011b4a:	f000 fef7 	bl	801293c <__multiply>
 8011b4e:	4649      	mov	r1, r9
 8011b50:	9004      	str	r0, [sp, #16]
 8011b52:	4658      	mov	r0, fp
 8011b54:	f000 fdde 	bl	8012714 <_Bfree>
 8011b58:	9b04      	ldr	r3, [sp, #16]
 8011b5a:	4699      	mov	r9, r3
 8011b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b5e:	1b1a      	subs	r2, r3, r4
 8011b60:	d004      	beq.n	8011b6c <_dtoa_r+0x78c>
 8011b62:	4649      	mov	r1, r9
 8011b64:	4658      	mov	r0, fp
 8011b66:	f000 ff93 	bl	8012a90 <__pow5mult>
 8011b6a:	4681      	mov	r9, r0
 8011b6c:	2101      	movs	r1, #1
 8011b6e:	4658      	mov	r0, fp
 8011b70:	f000 fece 	bl	8012910 <__i2b>
 8011b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b76:	4604      	mov	r4, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	f000 81cf 	beq.w	8011f1c <_dtoa_r+0xb3c>
 8011b7e:	461a      	mov	r2, r3
 8011b80:	4601      	mov	r1, r0
 8011b82:	4658      	mov	r0, fp
 8011b84:	f000 ff84 	bl	8012a90 <__pow5mult>
 8011b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	f300 8095 	bgt.w	8011cbc <_dtoa_r+0x8dc>
 8011b92:	9b02      	ldr	r3, [sp, #8]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f040 8087 	bne.w	8011ca8 <_dtoa_r+0x8c8>
 8011b9a:	9b03      	ldr	r3, [sp, #12]
 8011b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f040 8089 	bne.w	8011cb8 <_dtoa_r+0x8d8>
 8011ba6:	9b03      	ldr	r3, [sp, #12]
 8011ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011bac:	0d1b      	lsrs	r3, r3, #20
 8011bae:	051b      	lsls	r3, r3, #20
 8011bb0:	b12b      	cbz	r3, 8011bbe <_dtoa_r+0x7de>
 8011bb2:	9b08      	ldr	r3, [sp, #32]
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	9308      	str	r3, [sp, #32]
 8011bb8:	f108 0801 	add.w	r8, r8, #1
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f000 81b0 	beq.w	8011f28 <_dtoa_r+0xb48>
 8011bc8:	6923      	ldr	r3, [r4, #16]
 8011bca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011bce:	6918      	ldr	r0, [r3, #16]
 8011bd0:	f000 fe52 	bl	8012878 <__hi0bits>
 8011bd4:	f1c0 0020 	rsb	r0, r0, #32
 8011bd8:	9b08      	ldr	r3, [sp, #32]
 8011bda:	4418      	add	r0, r3
 8011bdc:	f010 001f 	ands.w	r0, r0, #31
 8011be0:	d077      	beq.n	8011cd2 <_dtoa_r+0x8f2>
 8011be2:	f1c0 0320 	rsb	r3, r0, #32
 8011be6:	2b04      	cmp	r3, #4
 8011be8:	dd6b      	ble.n	8011cc2 <_dtoa_r+0x8e2>
 8011bea:	9b08      	ldr	r3, [sp, #32]
 8011bec:	f1c0 001c 	rsb	r0, r0, #28
 8011bf0:	4403      	add	r3, r0
 8011bf2:	4480      	add	r8, r0
 8011bf4:	4406      	add	r6, r0
 8011bf6:	9308      	str	r3, [sp, #32]
 8011bf8:	f1b8 0f00 	cmp.w	r8, #0
 8011bfc:	dd05      	ble.n	8011c0a <_dtoa_r+0x82a>
 8011bfe:	4649      	mov	r1, r9
 8011c00:	4642      	mov	r2, r8
 8011c02:	4658      	mov	r0, fp
 8011c04:	f000 ff9e 	bl	8012b44 <__lshift>
 8011c08:	4681      	mov	r9, r0
 8011c0a:	9b08      	ldr	r3, [sp, #32]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	dd05      	ble.n	8011c1c <_dtoa_r+0x83c>
 8011c10:	4621      	mov	r1, r4
 8011c12:	461a      	mov	r2, r3
 8011c14:	4658      	mov	r0, fp
 8011c16:	f000 ff95 	bl	8012b44 <__lshift>
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d059      	beq.n	8011cd6 <_dtoa_r+0x8f6>
 8011c22:	4621      	mov	r1, r4
 8011c24:	4648      	mov	r0, r9
 8011c26:	f000 fff9 	bl	8012c1c <__mcmp>
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	da53      	bge.n	8011cd6 <_dtoa_r+0x8f6>
 8011c2e:	1e7b      	subs	r3, r7, #1
 8011c30:	9304      	str	r3, [sp, #16]
 8011c32:	4649      	mov	r1, r9
 8011c34:	2300      	movs	r3, #0
 8011c36:	220a      	movs	r2, #10
 8011c38:	4658      	mov	r0, fp
 8011c3a:	f000 fd8d 	bl	8012758 <__multadd>
 8011c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c40:	4681      	mov	r9, r0
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	f000 8172 	beq.w	8011f2c <_dtoa_r+0xb4c>
 8011c48:	2300      	movs	r3, #0
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	220a      	movs	r2, #10
 8011c4e:	4658      	mov	r0, fp
 8011c50:	f000 fd82 	bl	8012758 <__multadd>
 8011c54:	9b00      	ldr	r3, [sp, #0]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	4605      	mov	r5, r0
 8011c5a:	dc67      	bgt.n	8011d2c <_dtoa_r+0x94c>
 8011c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	dc41      	bgt.n	8011ce6 <_dtoa_r+0x906>
 8011c62:	e063      	b.n	8011d2c <_dtoa_r+0x94c>
 8011c64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011c66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011c6a:	e746      	b.n	8011afa <_dtoa_r+0x71a>
 8011c6c:	9b07      	ldr	r3, [sp, #28]
 8011c6e:	1e5c      	subs	r4, r3, #1
 8011c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c72:	42a3      	cmp	r3, r4
 8011c74:	bfbf      	itttt	lt
 8011c76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011c78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011c7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011c7c:	1ae3      	sublt	r3, r4, r3
 8011c7e:	bfb4      	ite	lt
 8011c80:	18d2      	addlt	r2, r2, r3
 8011c82:	1b1c      	subge	r4, r3, r4
 8011c84:	9b07      	ldr	r3, [sp, #28]
 8011c86:	bfbc      	itt	lt
 8011c88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011c8a:	2400      	movlt	r4, #0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	bfb5      	itete	lt
 8011c90:	eba8 0603 	sublt.w	r6, r8, r3
 8011c94:	9b07      	ldrge	r3, [sp, #28]
 8011c96:	2300      	movlt	r3, #0
 8011c98:	4646      	movge	r6, r8
 8011c9a:	e730      	b.n	8011afe <_dtoa_r+0x71e>
 8011c9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011c9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011ca0:	4646      	mov	r6, r8
 8011ca2:	e735      	b.n	8011b10 <_dtoa_r+0x730>
 8011ca4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ca6:	e75c      	b.n	8011b62 <_dtoa_r+0x782>
 8011ca8:	2300      	movs	r3, #0
 8011caa:	e788      	b.n	8011bbe <_dtoa_r+0x7de>
 8011cac:	3fe00000 	.word	0x3fe00000
 8011cb0:	40240000 	.word	0x40240000
 8011cb4:	40140000 	.word	0x40140000
 8011cb8:	9b02      	ldr	r3, [sp, #8]
 8011cba:	e780      	b.n	8011bbe <_dtoa_r+0x7de>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cc0:	e782      	b.n	8011bc8 <_dtoa_r+0x7e8>
 8011cc2:	d099      	beq.n	8011bf8 <_dtoa_r+0x818>
 8011cc4:	9a08      	ldr	r2, [sp, #32]
 8011cc6:	331c      	adds	r3, #28
 8011cc8:	441a      	add	r2, r3
 8011cca:	4498      	add	r8, r3
 8011ccc:	441e      	add	r6, r3
 8011cce:	9208      	str	r2, [sp, #32]
 8011cd0:	e792      	b.n	8011bf8 <_dtoa_r+0x818>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	e7f6      	b.n	8011cc4 <_dtoa_r+0x8e4>
 8011cd6:	9b07      	ldr	r3, [sp, #28]
 8011cd8:	9704      	str	r7, [sp, #16]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	dc20      	bgt.n	8011d20 <_dtoa_r+0x940>
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ce2:	2b02      	cmp	r3, #2
 8011ce4:	dd1e      	ble.n	8011d24 <_dtoa_r+0x944>
 8011ce6:	9b00      	ldr	r3, [sp, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f47f aec0 	bne.w	8011a6e <_dtoa_r+0x68e>
 8011cee:	4621      	mov	r1, r4
 8011cf0:	2205      	movs	r2, #5
 8011cf2:	4658      	mov	r0, fp
 8011cf4:	f000 fd30 	bl	8012758 <__multadd>
 8011cf8:	4601      	mov	r1, r0
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	4648      	mov	r0, r9
 8011cfe:	f000 ff8d 	bl	8012c1c <__mcmp>
 8011d02:	2800      	cmp	r0, #0
 8011d04:	f77f aeb3 	ble.w	8011a6e <_dtoa_r+0x68e>
 8011d08:	4656      	mov	r6, sl
 8011d0a:	2331      	movs	r3, #49	@ 0x31
 8011d0c:	f806 3b01 	strb.w	r3, [r6], #1
 8011d10:	9b04      	ldr	r3, [sp, #16]
 8011d12:	3301      	adds	r3, #1
 8011d14:	9304      	str	r3, [sp, #16]
 8011d16:	e6ae      	b.n	8011a76 <_dtoa_r+0x696>
 8011d18:	9c07      	ldr	r4, [sp, #28]
 8011d1a:	9704      	str	r7, [sp, #16]
 8011d1c:	4625      	mov	r5, r4
 8011d1e:	e7f3      	b.n	8011d08 <_dtoa_r+0x928>
 8011d20:	9b07      	ldr	r3, [sp, #28]
 8011d22:	9300      	str	r3, [sp, #0]
 8011d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f000 8104 	beq.w	8011f34 <_dtoa_r+0xb54>
 8011d2c:	2e00      	cmp	r6, #0
 8011d2e:	dd05      	ble.n	8011d3c <_dtoa_r+0x95c>
 8011d30:	4629      	mov	r1, r5
 8011d32:	4632      	mov	r2, r6
 8011d34:	4658      	mov	r0, fp
 8011d36:	f000 ff05 	bl	8012b44 <__lshift>
 8011d3a:	4605      	mov	r5, r0
 8011d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d05a      	beq.n	8011df8 <_dtoa_r+0xa18>
 8011d42:	6869      	ldr	r1, [r5, #4]
 8011d44:	4658      	mov	r0, fp
 8011d46:	f000 fca5 	bl	8012694 <_Balloc>
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	b928      	cbnz	r0, 8011d5a <_dtoa_r+0x97a>
 8011d4e:	4b84      	ldr	r3, [pc, #528]	@ (8011f60 <_dtoa_r+0xb80>)
 8011d50:	4602      	mov	r2, r0
 8011d52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011d56:	f7ff bb5a 	b.w	801140e <_dtoa_r+0x2e>
 8011d5a:	692a      	ldr	r2, [r5, #16]
 8011d5c:	3202      	adds	r2, #2
 8011d5e:	0092      	lsls	r2, r2, #2
 8011d60:	f105 010c 	add.w	r1, r5, #12
 8011d64:	300c      	adds	r0, #12
 8011d66:	f7ff fa76 	bl	8011256 <memcpy>
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	4631      	mov	r1, r6
 8011d6e:	4658      	mov	r0, fp
 8011d70:	f000 fee8 	bl	8012b44 <__lshift>
 8011d74:	f10a 0301 	add.w	r3, sl, #1
 8011d78:	9307      	str	r3, [sp, #28]
 8011d7a:	9b00      	ldr	r3, [sp, #0]
 8011d7c:	4453      	add	r3, sl
 8011d7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d80:	9b02      	ldr	r3, [sp, #8]
 8011d82:	f003 0301 	and.w	r3, r3, #1
 8011d86:	462f      	mov	r7, r5
 8011d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d8a:	4605      	mov	r5, r0
 8011d8c:	9b07      	ldr	r3, [sp, #28]
 8011d8e:	4621      	mov	r1, r4
 8011d90:	3b01      	subs	r3, #1
 8011d92:	4648      	mov	r0, r9
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	f7ff fa9b 	bl	80112d0 <quorem>
 8011d9a:	4639      	mov	r1, r7
 8011d9c:	9002      	str	r0, [sp, #8]
 8011d9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011da2:	4648      	mov	r0, r9
 8011da4:	f000 ff3a 	bl	8012c1c <__mcmp>
 8011da8:	462a      	mov	r2, r5
 8011daa:	9008      	str	r0, [sp, #32]
 8011dac:	4621      	mov	r1, r4
 8011dae:	4658      	mov	r0, fp
 8011db0:	f000 ff50 	bl	8012c54 <__mdiff>
 8011db4:	68c2      	ldr	r2, [r0, #12]
 8011db6:	4606      	mov	r6, r0
 8011db8:	bb02      	cbnz	r2, 8011dfc <_dtoa_r+0xa1c>
 8011dba:	4601      	mov	r1, r0
 8011dbc:	4648      	mov	r0, r9
 8011dbe:	f000 ff2d 	bl	8012c1c <__mcmp>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	4631      	mov	r1, r6
 8011dc6:	4658      	mov	r0, fp
 8011dc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8011dca:	f000 fca3 	bl	8012714 <_Bfree>
 8011dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011dd2:	9e07      	ldr	r6, [sp, #28]
 8011dd4:	ea43 0102 	orr.w	r1, r3, r2
 8011dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dda:	4319      	orrs	r1, r3
 8011ddc:	d110      	bne.n	8011e00 <_dtoa_r+0xa20>
 8011dde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011de2:	d029      	beq.n	8011e38 <_dtoa_r+0xa58>
 8011de4:	9b08      	ldr	r3, [sp, #32]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	dd02      	ble.n	8011df0 <_dtoa_r+0xa10>
 8011dea:	9b02      	ldr	r3, [sp, #8]
 8011dec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011df0:	9b00      	ldr	r3, [sp, #0]
 8011df2:	f883 8000 	strb.w	r8, [r3]
 8011df6:	e63f      	b.n	8011a78 <_dtoa_r+0x698>
 8011df8:	4628      	mov	r0, r5
 8011dfa:	e7bb      	b.n	8011d74 <_dtoa_r+0x994>
 8011dfc:	2201      	movs	r2, #1
 8011dfe:	e7e1      	b.n	8011dc4 <_dtoa_r+0x9e4>
 8011e00:	9b08      	ldr	r3, [sp, #32]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	db04      	blt.n	8011e10 <_dtoa_r+0xa30>
 8011e06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011e08:	430b      	orrs	r3, r1
 8011e0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011e0c:	430b      	orrs	r3, r1
 8011e0e:	d120      	bne.n	8011e52 <_dtoa_r+0xa72>
 8011e10:	2a00      	cmp	r2, #0
 8011e12:	dded      	ble.n	8011df0 <_dtoa_r+0xa10>
 8011e14:	4649      	mov	r1, r9
 8011e16:	2201      	movs	r2, #1
 8011e18:	4658      	mov	r0, fp
 8011e1a:	f000 fe93 	bl	8012b44 <__lshift>
 8011e1e:	4621      	mov	r1, r4
 8011e20:	4681      	mov	r9, r0
 8011e22:	f000 fefb 	bl	8012c1c <__mcmp>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	dc03      	bgt.n	8011e32 <_dtoa_r+0xa52>
 8011e2a:	d1e1      	bne.n	8011df0 <_dtoa_r+0xa10>
 8011e2c:	f018 0f01 	tst.w	r8, #1
 8011e30:	d0de      	beq.n	8011df0 <_dtoa_r+0xa10>
 8011e32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e36:	d1d8      	bne.n	8011dea <_dtoa_r+0xa0a>
 8011e38:	9a00      	ldr	r2, [sp, #0]
 8011e3a:	2339      	movs	r3, #57	@ 0x39
 8011e3c:	7013      	strb	r3, [r2, #0]
 8011e3e:	4633      	mov	r3, r6
 8011e40:	461e      	mov	r6, r3
 8011e42:	3b01      	subs	r3, #1
 8011e44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011e48:	2a39      	cmp	r2, #57	@ 0x39
 8011e4a:	d052      	beq.n	8011ef2 <_dtoa_r+0xb12>
 8011e4c:	3201      	adds	r2, #1
 8011e4e:	701a      	strb	r2, [r3, #0]
 8011e50:	e612      	b.n	8011a78 <_dtoa_r+0x698>
 8011e52:	2a00      	cmp	r2, #0
 8011e54:	dd07      	ble.n	8011e66 <_dtoa_r+0xa86>
 8011e56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e5a:	d0ed      	beq.n	8011e38 <_dtoa_r+0xa58>
 8011e5c:	9a00      	ldr	r2, [sp, #0]
 8011e5e:	f108 0301 	add.w	r3, r8, #1
 8011e62:	7013      	strb	r3, [r2, #0]
 8011e64:	e608      	b.n	8011a78 <_dtoa_r+0x698>
 8011e66:	9b07      	ldr	r3, [sp, #28]
 8011e68:	9a07      	ldr	r2, [sp, #28]
 8011e6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e70:	4293      	cmp	r3, r2
 8011e72:	d028      	beq.n	8011ec6 <_dtoa_r+0xae6>
 8011e74:	4649      	mov	r1, r9
 8011e76:	2300      	movs	r3, #0
 8011e78:	220a      	movs	r2, #10
 8011e7a:	4658      	mov	r0, fp
 8011e7c:	f000 fc6c 	bl	8012758 <__multadd>
 8011e80:	42af      	cmp	r7, r5
 8011e82:	4681      	mov	r9, r0
 8011e84:	f04f 0300 	mov.w	r3, #0
 8011e88:	f04f 020a 	mov.w	r2, #10
 8011e8c:	4639      	mov	r1, r7
 8011e8e:	4658      	mov	r0, fp
 8011e90:	d107      	bne.n	8011ea2 <_dtoa_r+0xac2>
 8011e92:	f000 fc61 	bl	8012758 <__multadd>
 8011e96:	4607      	mov	r7, r0
 8011e98:	4605      	mov	r5, r0
 8011e9a:	9b07      	ldr	r3, [sp, #28]
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	9307      	str	r3, [sp, #28]
 8011ea0:	e774      	b.n	8011d8c <_dtoa_r+0x9ac>
 8011ea2:	f000 fc59 	bl	8012758 <__multadd>
 8011ea6:	4629      	mov	r1, r5
 8011ea8:	4607      	mov	r7, r0
 8011eaa:	2300      	movs	r3, #0
 8011eac:	220a      	movs	r2, #10
 8011eae:	4658      	mov	r0, fp
 8011eb0:	f000 fc52 	bl	8012758 <__multadd>
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	e7f0      	b.n	8011e9a <_dtoa_r+0xaba>
 8011eb8:	9b00      	ldr	r3, [sp, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	bfcc      	ite	gt
 8011ebe:	461e      	movgt	r6, r3
 8011ec0:	2601      	movle	r6, #1
 8011ec2:	4456      	add	r6, sl
 8011ec4:	2700      	movs	r7, #0
 8011ec6:	4649      	mov	r1, r9
 8011ec8:	2201      	movs	r2, #1
 8011eca:	4658      	mov	r0, fp
 8011ecc:	f000 fe3a 	bl	8012b44 <__lshift>
 8011ed0:	4621      	mov	r1, r4
 8011ed2:	4681      	mov	r9, r0
 8011ed4:	f000 fea2 	bl	8012c1c <__mcmp>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	dcb0      	bgt.n	8011e3e <_dtoa_r+0xa5e>
 8011edc:	d102      	bne.n	8011ee4 <_dtoa_r+0xb04>
 8011ede:	f018 0f01 	tst.w	r8, #1
 8011ee2:	d1ac      	bne.n	8011e3e <_dtoa_r+0xa5e>
 8011ee4:	4633      	mov	r3, r6
 8011ee6:	461e      	mov	r6, r3
 8011ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011eec:	2a30      	cmp	r2, #48	@ 0x30
 8011eee:	d0fa      	beq.n	8011ee6 <_dtoa_r+0xb06>
 8011ef0:	e5c2      	b.n	8011a78 <_dtoa_r+0x698>
 8011ef2:	459a      	cmp	sl, r3
 8011ef4:	d1a4      	bne.n	8011e40 <_dtoa_r+0xa60>
 8011ef6:	9b04      	ldr	r3, [sp, #16]
 8011ef8:	3301      	adds	r3, #1
 8011efa:	9304      	str	r3, [sp, #16]
 8011efc:	2331      	movs	r3, #49	@ 0x31
 8011efe:	f88a 3000 	strb.w	r3, [sl]
 8011f02:	e5b9      	b.n	8011a78 <_dtoa_r+0x698>
 8011f04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011f06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011f64 <_dtoa_r+0xb84>
 8011f0a:	b11b      	cbz	r3, 8011f14 <_dtoa_r+0xb34>
 8011f0c:	f10a 0308 	add.w	r3, sl, #8
 8011f10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011f12:	6013      	str	r3, [r2, #0]
 8011f14:	4650      	mov	r0, sl
 8011f16:	b019      	add	sp, #100	@ 0x64
 8011f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	f77f ae37 	ble.w	8011b92 <_dtoa_r+0x7b2>
 8011f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f28:	2001      	movs	r0, #1
 8011f2a:	e655      	b.n	8011bd8 <_dtoa_r+0x7f8>
 8011f2c:	9b00      	ldr	r3, [sp, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	f77f aed6 	ble.w	8011ce0 <_dtoa_r+0x900>
 8011f34:	4656      	mov	r6, sl
 8011f36:	4621      	mov	r1, r4
 8011f38:	4648      	mov	r0, r9
 8011f3a:	f7ff f9c9 	bl	80112d0 <quorem>
 8011f3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011f42:	f806 8b01 	strb.w	r8, [r6], #1
 8011f46:	9b00      	ldr	r3, [sp, #0]
 8011f48:	eba6 020a 	sub.w	r2, r6, sl
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	ddb3      	ble.n	8011eb8 <_dtoa_r+0xad8>
 8011f50:	4649      	mov	r1, r9
 8011f52:	2300      	movs	r3, #0
 8011f54:	220a      	movs	r2, #10
 8011f56:	4658      	mov	r0, fp
 8011f58:	f000 fbfe 	bl	8012758 <__multadd>
 8011f5c:	4681      	mov	r9, r0
 8011f5e:	e7ea      	b.n	8011f36 <_dtoa_r+0xb56>
 8011f60:	08013ea4 	.word	0x08013ea4
 8011f64:	08013e3f 	.word	0x08013e3f

08011f68 <_free_r>:
 8011f68:	b538      	push	{r3, r4, r5, lr}
 8011f6a:	4605      	mov	r5, r0
 8011f6c:	2900      	cmp	r1, #0
 8011f6e:	d041      	beq.n	8011ff4 <_free_r+0x8c>
 8011f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f74:	1f0c      	subs	r4, r1, #4
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	bfb8      	it	lt
 8011f7a:	18e4      	addlt	r4, r4, r3
 8011f7c:	f7fd f88a 	bl	800f094 <__malloc_lock>
 8011f80:	4a1d      	ldr	r2, [pc, #116]	@ (8011ff8 <_free_r+0x90>)
 8011f82:	6813      	ldr	r3, [r2, #0]
 8011f84:	b933      	cbnz	r3, 8011f94 <_free_r+0x2c>
 8011f86:	6063      	str	r3, [r4, #4]
 8011f88:	6014      	str	r4, [r2, #0]
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f90:	f7fd b886 	b.w	800f0a0 <__malloc_unlock>
 8011f94:	42a3      	cmp	r3, r4
 8011f96:	d908      	bls.n	8011faa <_free_r+0x42>
 8011f98:	6820      	ldr	r0, [r4, #0]
 8011f9a:	1821      	adds	r1, r4, r0
 8011f9c:	428b      	cmp	r3, r1
 8011f9e:	bf01      	itttt	eq
 8011fa0:	6819      	ldreq	r1, [r3, #0]
 8011fa2:	685b      	ldreq	r3, [r3, #4]
 8011fa4:	1809      	addeq	r1, r1, r0
 8011fa6:	6021      	streq	r1, [r4, #0]
 8011fa8:	e7ed      	b.n	8011f86 <_free_r+0x1e>
 8011faa:	461a      	mov	r2, r3
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	b10b      	cbz	r3, 8011fb4 <_free_r+0x4c>
 8011fb0:	42a3      	cmp	r3, r4
 8011fb2:	d9fa      	bls.n	8011faa <_free_r+0x42>
 8011fb4:	6811      	ldr	r1, [r2, #0]
 8011fb6:	1850      	adds	r0, r2, r1
 8011fb8:	42a0      	cmp	r0, r4
 8011fba:	d10b      	bne.n	8011fd4 <_free_r+0x6c>
 8011fbc:	6820      	ldr	r0, [r4, #0]
 8011fbe:	4401      	add	r1, r0
 8011fc0:	1850      	adds	r0, r2, r1
 8011fc2:	4283      	cmp	r3, r0
 8011fc4:	6011      	str	r1, [r2, #0]
 8011fc6:	d1e0      	bne.n	8011f8a <_free_r+0x22>
 8011fc8:	6818      	ldr	r0, [r3, #0]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	6053      	str	r3, [r2, #4]
 8011fce:	4408      	add	r0, r1
 8011fd0:	6010      	str	r0, [r2, #0]
 8011fd2:	e7da      	b.n	8011f8a <_free_r+0x22>
 8011fd4:	d902      	bls.n	8011fdc <_free_r+0x74>
 8011fd6:	230c      	movs	r3, #12
 8011fd8:	602b      	str	r3, [r5, #0]
 8011fda:	e7d6      	b.n	8011f8a <_free_r+0x22>
 8011fdc:	6820      	ldr	r0, [r4, #0]
 8011fde:	1821      	adds	r1, r4, r0
 8011fe0:	428b      	cmp	r3, r1
 8011fe2:	bf04      	itt	eq
 8011fe4:	6819      	ldreq	r1, [r3, #0]
 8011fe6:	685b      	ldreq	r3, [r3, #4]
 8011fe8:	6063      	str	r3, [r4, #4]
 8011fea:	bf04      	itt	eq
 8011fec:	1809      	addeq	r1, r1, r0
 8011fee:	6021      	streq	r1, [r4, #0]
 8011ff0:	6054      	str	r4, [r2, #4]
 8011ff2:	e7ca      	b.n	8011f8a <_free_r+0x22>
 8011ff4:	bd38      	pop	{r3, r4, r5, pc}
 8011ff6:	bf00      	nop
 8011ff8:	2000158c 	.word	0x2000158c

08011ffc <rshift>:
 8011ffc:	6903      	ldr	r3, [r0, #16]
 8011ffe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012002:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012006:	ea4f 1261 	mov.w	r2, r1, asr #5
 801200a:	f100 0414 	add.w	r4, r0, #20
 801200e:	dd45      	ble.n	801209c <rshift+0xa0>
 8012010:	f011 011f 	ands.w	r1, r1, #31
 8012014:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012018:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801201c:	d10c      	bne.n	8012038 <rshift+0x3c>
 801201e:	f100 0710 	add.w	r7, r0, #16
 8012022:	4629      	mov	r1, r5
 8012024:	42b1      	cmp	r1, r6
 8012026:	d334      	bcc.n	8012092 <rshift+0x96>
 8012028:	1a9b      	subs	r3, r3, r2
 801202a:	009b      	lsls	r3, r3, #2
 801202c:	1eea      	subs	r2, r5, #3
 801202e:	4296      	cmp	r6, r2
 8012030:	bf38      	it	cc
 8012032:	2300      	movcc	r3, #0
 8012034:	4423      	add	r3, r4
 8012036:	e015      	b.n	8012064 <rshift+0x68>
 8012038:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801203c:	f1c1 0820 	rsb	r8, r1, #32
 8012040:	40cf      	lsrs	r7, r1
 8012042:	f105 0e04 	add.w	lr, r5, #4
 8012046:	46a1      	mov	r9, r4
 8012048:	4576      	cmp	r6, lr
 801204a:	46f4      	mov	ip, lr
 801204c:	d815      	bhi.n	801207a <rshift+0x7e>
 801204e:	1a9a      	subs	r2, r3, r2
 8012050:	0092      	lsls	r2, r2, #2
 8012052:	3a04      	subs	r2, #4
 8012054:	3501      	adds	r5, #1
 8012056:	42ae      	cmp	r6, r5
 8012058:	bf38      	it	cc
 801205a:	2200      	movcc	r2, #0
 801205c:	18a3      	adds	r3, r4, r2
 801205e:	50a7      	str	r7, [r4, r2]
 8012060:	b107      	cbz	r7, 8012064 <rshift+0x68>
 8012062:	3304      	adds	r3, #4
 8012064:	1b1a      	subs	r2, r3, r4
 8012066:	42a3      	cmp	r3, r4
 8012068:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801206c:	bf08      	it	eq
 801206e:	2300      	moveq	r3, #0
 8012070:	6102      	str	r2, [r0, #16]
 8012072:	bf08      	it	eq
 8012074:	6143      	streq	r3, [r0, #20]
 8012076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801207a:	f8dc c000 	ldr.w	ip, [ip]
 801207e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012082:	ea4c 0707 	orr.w	r7, ip, r7
 8012086:	f849 7b04 	str.w	r7, [r9], #4
 801208a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801208e:	40cf      	lsrs	r7, r1
 8012090:	e7da      	b.n	8012048 <rshift+0x4c>
 8012092:	f851 cb04 	ldr.w	ip, [r1], #4
 8012096:	f847 cf04 	str.w	ip, [r7, #4]!
 801209a:	e7c3      	b.n	8012024 <rshift+0x28>
 801209c:	4623      	mov	r3, r4
 801209e:	e7e1      	b.n	8012064 <rshift+0x68>

080120a0 <__hexdig_fun>:
 80120a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80120a4:	2b09      	cmp	r3, #9
 80120a6:	d802      	bhi.n	80120ae <__hexdig_fun+0xe>
 80120a8:	3820      	subs	r0, #32
 80120aa:	b2c0      	uxtb	r0, r0
 80120ac:	4770      	bx	lr
 80120ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80120b2:	2b05      	cmp	r3, #5
 80120b4:	d801      	bhi.n	80120ba <__hexdig_fun+0x1a>
 80120b6:	3847      	subs	r0, #71	@ 0x47
 80120b8:	e7f7      	b.n	80120aa <__hexdig_fun+0xa>
 80120ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80120be:	2b05      	cmp	r3, #5
 80120c0:	d801      	bhi.n	80120c6 <__hexdig_fun+0x26>
 80120c2:	3827      	subs	r0, #39	@ 0x27
 80120c4:	e7f1      	b.n	80120aa <__hexdig_fun+0xa>
 80120c6:	2000      	movs	r0, #0
 80120c8:	4770      	bx	lr
	...

080120cc <__gethex>:
 80120cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d0:	b085      	sub	sp, #20
 80120d2:	468a      	mov	sl, r1
 80120d4:	9302      	str	r3, [sp, #8]
 80120d6:	680b      	ldr	r3, [r1, #0]
 80120d8:	9001      	str	r0, [sp, #4]
 80120da:	4690      	mov	r8, r2
 80120dc:	1c9c      	adds	r4, r3, #2
 80120de:	46a1      	mov	r9, r4
 80120e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80120e4:	2830      	cmp	r0, #48	@ 0x30
 80120e6:	d0fa      	beq.n	80120de <__gethex+0x12>
 80120e8:	eba9 0303 	sub.w	r3, r9, r3
 80120ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80120f0:	f7ff ffd6 	bl	80120a0 <__hexdig_fun>
 80120f4:	4605      	mov	r5, r0
 80120f6:	2800      	cmp	r0, #0
 80120f8:	d168      	bne.n	80121cc <__gethex+0x100>
 80120fa:	49a0      	ldr	r1, [pc, #640]	@ (801237c <__gethex+0x2b0>)
 80120fc:	2201      	movs	r2, #1
 80120fe:	4648      	mov	r0, r9
 8012100:	f7fe ff95 	bl	801102e <strncmp>
 8012104:	4607      	mov	r7, r0
 8012106:	2800      	cmp	r0, #0
 8012108:	d167      	bne.n	80121da <__gethex+0x10e>
 801210a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801210e:	4626      	mov	r6, r4
 8012110:	f7ff ffc6 	bl	80120a0 <__hexdig_fun>
 8012114:	2800      	cmp	r0, #0
 8012116:	d062      	beq.n	80121de <__gethex+0x112>
 8012118:	4623      	mov	r3, r4
 801211a:	7818      	ldrb	r0, [r3, #0]
 801211c:	2830      	cmp	r0, #48	@ 0x30
 801211e:	4699      	mov	r9, r3
 8012120:	f103 0301 	add.w	r3, r3, #1
 8012124:	d0f9      	beq.n	801211a <__gethex+0x4e>
 8012126:	f7ff ffbb 	bl	80120a0 <__hexdig_fun>
 801212a:	fab0 f580 	clz	r5, r0
 801212e:	096d      	lsrs	r5, r5, #5
 8012130:	f04f 0b01 	mov.w	fp, #1
 8012134:	464a      	mov	r2, r9
 8012136:	4616      	mov	r6, r2
 8012138:	3201      	adds	r2, #1
 801213a:	7830      	ldrb	r0, [r6, #0]
 801213c:	f7ff ffb0 	bl	80120a0 <__hexdig_fun>
 8012140:	2800      	cmp	r0, #0
 8012142:	d1f8      	bne.n	8012136 <__gethex+0x6a>
 8012144:	498d      	ldr	r1, [pc, #564]	@ (801237c <__gethex+0x2b0>)
 8012146:	2201      	movs	r2, #1
 8012148:	4630      	mov	r0, r6
 801214a:	f7fe ff70 	bl	801102e <strncmp>
 801214e:	2800      	cmp	r0, #0
 8012150:	d13f      	bne.n	80121d2 <__gethex+0x106>
 8012152:	b944      	cbnz	r4, 8012166 <__gethex+0x9a>
 8012154:	1c74      	adds	r4, r6, #1
 8012156:	4622      	mov	r2, r4
 8012158:	4616      	mov	r6, r2
 801215a:	3201      	adds	r2, #1
 801215c:	7830      	ldrb	r0, [r6, #0]
 801215e:	f7ff ff9f 	bl	80120a0 <__hexdig_fun>
 8012162:	2800      	cmp	r0, #0
 8012164:	d1f8      	bne.n	8012158 <__gethex+0x8c>
 8012166:	1ba4      	subs	r4, r4, r6
 8012168:	00a7      	lsls	r7, r4, #2
 801216a:	7833      	ldrb	r3, [r6, #0]
 801216c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012170:	2b50      	cmp	r3, #80	@ 0x50
 8012172:	d13e      	bne.n	80121f2 <__gethex+0x126>
 8012174:	7873      	ldrb	r3, [r6, #1]
 8012176:	2b2b      	cmp	r3, #43	@ 0x2b
 8012178:	d033      	beq.n	80121e2 <__gethex+0x116>
 801217a:	2b2d      	cmp	r3, #45	@ 0x2d
 801217c:	d034      	beq.n	80121e8 <__gethex+0x11c>
 801217e:	1c71      	adds	r1, r6, #1
 8012180:	2400      	movs	r4, #0
 8012182:	7808      	ldrb	r0, [r1, #0]
 8012184:	f7ff ff8c 	bl	80120a0 <__hexdig_fun>
 8012188:	1e43      	subs	r3, r0, #1
 801218a:	b2db      	uxtb	r3, r3
 801218c:	2b18      	cmp	r3, #24
 801218e:	d830      	bhi.n	80121f2 <__gethex+0x126>
 8012190:	f1a0 0210 	sub.w	r2, r0, #16
 8012194:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012198:	f7ff ff82 	bl	80120a0 <__hexdig_fun>
 801219c:	f100 3cff 	add.w	ip, r0, #4294967295
 80121a0:	fa5f fc8c 	uxtb.w	ip, ip
 80121a4:	f1bc 0f18 	cmp.w	ip, #24
 80121a8:	f04f 030a 	mov.w	r3, #10
 80121ac:	d91e      	bls.n	80121ec <__gethex+0x120>
 80121ae:	b104      	cbz	r4, 80121b2 <__gethex+0xe6>
 80121b0:	4252      	negs	r2, r2
 80121b2:	4417      	add	r7, r2
 80121b4:	f8ca 1000 	str.w	r1, [sl]
 80121b8:	b1ed      	cbz	r5, 80121f6 <__gethex+0x12a>
 80121ba:	f1bb 0f00 	cmp.w	fp, #0
 80121be:	bf0c      	ite	eq
 80121c0:	2506      	moveq	r5, #6
 80121c2:	2500      	movne	r5, #0
 80121c4:	4628      	mov	r0, r5
 80121c6:	b005      	add	sp, #20
 80121c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121cc:	2500      	movs	r5, #0
 80121ce:	462c      	mov	r4, r5
 80121d0:	e7b0      	b.n	8012134 <__gethex+0x68>
 80121d2:	2c00      	cmp	r4, #0
 80121d4:	d1c7      	bne.n	8012166 <__gethex+0x9a>
 80121d6:	4627      	mov	r7, r4
 80121d8:	e7c7      	b.n	801216a <__gethex+0x9e>
 80121da:	464e      	mov	r6, r9
 80121dc:	462f      	mov	r7, r5
 80121de:	2501      	movs	r5, #1
 80121e0:	e7c3      	b.n	801216a <__gethex+0x9e>
 80121e2:	2400      	movs	r4, #0
 80121e4:	1cb1      	adds	r1, r6, #2
 80121e6:	e7cc      	b.n	8012182 <__gethex+0xb6>
 80121e8:	2401      	movs	r4, #1
 80121ea:	e7fb      	b.n	80121e4 <__gethex+0x118>
 80121ec:	fb03 0002 	mla	r0, r3, r2, r0
 80121f0:	e7ce      	b.n	8012190 <__gethex+0xc4>
 80121f2:	4631      	mov	r1, r6
 80121f4:	e7de      	b.n	80121b4 <__gethex+0xe8>
 80121f6:	eba6 0309 	sub.w	r3, r6, r9
 80121fa:	3b01      	subs	r3, #1
 80121fc:	4629      	mov	r1, r5
 80121fe:	2b07      	cmp	r3, #7
 8012200:	dc0a      	bgt.n	8012218 <__gethex+0x14c>
 8012202:	9801      	ldr	r0, [sp, #4]
 8012204:	f000 fa46 	bl	8012694 <_Balloc>
 8012208:	4604      	mov	r4, r0
 801220a:	b940      	cbnz	r0, 801221e <__gethex+0x152>
 801220c:	4b5c      	ldr	r3, [pc, #368]	@ (8012380 <__gethex+0x2b4>)
 801220e:	4602      	mov	r2, r0
 8012210:	21e4      	movs	r1, #228	@ 0xe4
 8012212:	485c      	ldr	r0, [pc, #368]	@ (8012384 <__gethex+0x2b8>)
 8012214:	f7ff f83e 	bl	8011294 <__assert_func>
 8012218:	3101      	adds	r1, #1
 801221a:	105b      	asrs	r3, r3, #1
 801221c:	e7ef      	b.n	80121fe <__gethex+0x132>
 801221e:	f100 0a14 	add.w	sl, r0, #20
 8012222:	2300      	movs	r3, #0
 8012224:	4655      	mov	r5, sl
 8012226:	469b      	mov	fp, r3
 8012228:	45b1      	cmp	r9, r6
 801222a:	d337      	bcc.n	801229c <__gethex+0x1d0>
 801222c:	f845 bb04 	str.w	fp, [r5], #4
 8012230:	eba5 050a 	sub.w	r5, r5, sl
 8012234:	10ad      	asrs	r5, r5, #2
 8012236:	6125      	str	r5, [r4, #16]
 8012238:	4658      	mov	r0, fp
 801223a:	f000 fb1d 	bl	8012878 <__hi0bits>
 801223e:	016d      	lsls	r5, r5, #5
 8012240:	f8d8 6000 	ldr.w	r6, [r8]
 8012244:	1a2d      	subs	r5, r5, r0
 8012246:	42b5      	cmp	r5, r6
 8012248:	dd54      	ble.n	80122f4 <__gethex+0x228>
 801224a:	1bad      	subs	r5, r5, r6
 801224c:	4629      	mov	r1, r5
 801224e:	4620      	mov	r0, r4
 8012250:	f000 feb1 	bl	8012fb6 <__any_on>
 8012254:	4681      	mov	r9, r0
 8012256:	b178      	cbz	r0, 8012278 <__gethex+0x1ac>
 8012258:	1e6b      	subs	r3, r5, #1
 801225a:	1159      	asrs	r1, r3, #5
 801225c:	f003 021f 	and.w	r2, r3, #31
 8012260:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012264:	f04f 0901 	mov.w	r9, #1
 8012268:	fa09 f202 	lsl.w	r2, r9, r2
 801226c:	420a      	tst	r2, r1
 801226e:	d003      	beq.n	8012278 <__gethex+0x1ac>
 8012270:	454b      	cmp	r3, r9
 8012272:	dc36      	bgt.n	80122e2 <__gethex+0x216>
 8012274:	f04f 0902 	mov.w	r9, #2
 8012278:	4629      	mov	r1, r5
 801227a:	4620      	mov	r0, r4
 801227c:	f7ff febe 	bl	8011ffc <rshift>
 8012280:	442f      	add	r7, r5
 8012282:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012286:	42bb      	cmp	r3, r7
 8012288:	da42      	bge.n	8012310 <__gethex+0x244>
 801228a:	9801      	ldr	r0, [sp, #4]
 801228c:	4621      	mov	r1, r4
 801228e:	f000 fa41 	bl	8012714 <_Bfree>
 8012292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012294:	2300      	movs	r3, #0
 8012296:	6013      	str	r3, [r2, #0]
 8012298:	25a3      	movs	r5, #163	@ 0xa3
 801229a:	e793      	b.n	80121c4 <__gethex+0xf8>
 801229c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80122a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80122a2:	d012      	beq.n	80122ca <__gethex+0x1fe>
 80122a4:	2b20      	cmp	r3, #32
 80122a6:	d104      	bne.n	80122b2 <__gethex+0x1e6>
 80122a8:	f845 bb04 	str.w	fp, [r5], #4
 80122ac:	f04f 0b00 	mov.w	fp, #0
 80122b0:	465b      	mov	r3, fp
 80122b2:	7830      	ldrb	r0, [r6, #0]
 80122b4:	9303      	str	r3, [sp, #12]
 80122b6:	f7ff fef3 	bl	80120a0 <__hexdig_fun>
 80122ba:	9b03      	ldr	r3, [sp, #12]
 80122bc:	f000 000f 	and.w	r0, r0, #15
 80122c0:	4098      	lsls	r0, r3
 80122c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80122c6:	3304      	adds	r3, #4
 80122c8:	e7ae      	b.n	8012228 <__gethex+0x15c>
 80122ca:	45b1      	cmp	r9, r6
 80122cc:	d8ea      	bhi.n	80122a4 <__gethex+0x1d8>
 80122ce:	492b      	ldr	r1, [pc, #172]	@ (801237c <__gethex+0x2b0>)
 80122d0:	9303      	str	r3, [sp, #12]
 80122d2:	2201      	movs	r2, #1
 80122d4:	4630      	mov	r0, r6
 80122d6:	f7fe feaa 	bl	801102e <strncmp>
 80122da:	9b03      	ldr	r3, [sp, #12]
 80122dc:	2800      	cmp	r0, #0
 80122de:	d1e1      	bne.n	80122a4 <__gethex+0x1d8>
 80122e0:	e7a2      	b.n	8012228 <__gethex+0x15c>
 80122e2:	1ea9      	subs	r1, r5, #2
 80122e4:	4620      	mov	r0, r4
 80122e6:	f000 fe66 	bl	8012fb6 <__any_on>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d0c2      	beq.n	8012274 <__gethex+0x1a8>
 80122ee:	f04f 0903 	mov.w	r9, #3
 80122f2:	e7c1      	b.n	8012278 <__gethex+0x1ac>
 80122f4:	da09      	bge.n	801230a <__gethex+0x23e>
 80122f6:	1b75      	subs	r5, r6, r5
 80122f8:	4621      	mov	r1, r4
 80122fa:	9801      	ldr	r0, [sp, #4]
 80122fc:	462a      	mov	r2, r5
 80122fe:	f000 fc21 	bl	8012b44 <__lshift>
 8012302:	1b7f      	subs	r7, r7, r5
 8012304:	4604      	mov	r4, r0
 8012306:	f100 0a14 	add.w	sl, r0, #20
 801230a:	f04f 0900 	mov.w	r9, #0
 801230e:	e7b8      	b.n	8012282 <__gethex+0x1b6>
 8012310:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012314:	42bd      	cmp	r5, r7
 8012316:	dd6f      	ble.n	80123f8 <__gethex+0x32c>
 8012318:	1bed      	subs	r5, r5, r7
 801231a:	42ae      	cmp	r6, r5
 801231c:	dc34      	bgt.n	8012388 <__gethex+0x2bc>
 801231e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012322:	2b02      	cmp	r3, #2
 8012324:	d022      	beq.n	801236c <__gethex+0x2a0>
 8012326:	2b03      	cmp	r3, #3
 8012328:	d024      	beq.n	8012374 <__gethex+0x2a8>
 801232a:	2b01      	cmp	r3, #1
 801232c:	d115      	bne.n	801235a <__gethex+0x28e>
 801232e:	42ae      	cmp	r6, r5
 8012330:	d113      	bne.n	801235a <__gethex+0x28e>
 8012332:	2e01      	cmp	r6, #1
 8012334:	d10b      	bne.n	801234e <__gethex+0x282>
 8012336:	9a02      	ldr	r2, [sp, #8]
 8012338:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801233c:	6013      	str	r3, [r2, #0]
 801233e:	2301      	movs	r3, #1
 8012340:	6123      	str	r3, [r4, #16]
 8012342:	f8ca 3000 	str.w	r3, [sl]
 8012346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012348:	2562      	movs	r5, #98	@ 0x62
 801234a:	601c      	str	r4, [r3, #0]
 801234c:	e73a      	b.n	80121c4 <__gethex+0xf8>
 801234e:	1e71      	subs	r1, r6, #1
 8012350:	4620      	mov	r0, r4
 8012352:	f000 fe30 	bl	8012fb6 <__any_on>
 8012356:	2800      	cmp	r0, #0
 8012358:	d1ed      	bne.n	8012336 <__gethex+0x26a>
 801235a:	9801      	ldr	r0, [sp, #4]
 801235c:	4621      	mov	r1, r4
 801235e:	f000 f9d9 	bl	8012714 <_Bfree>
 8012362:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012364:	2300      	movs	r3, #0
 8012366:	6013      	str	r3, [r2, #0]
 8012368:	2550      	movs	r5, #80	@ 0x50
 801236a:	e72b      	b.n	80121c4 <__gethex+0xf8>
 801236c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801236e:	2b00      	cmp	r3, #0
 8012370:	d1f3      	bne.n	801235a <__gethex+0x28e>
 8012372:	e7e0      	b.n	8012336 <__gethex+0x26a>
 8012374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012376:	2b00      	cmp	r3, #0
 8012378:	d1dd      	bne.n	8012336 <__gethex+0x26a>
 801237a:	e7ee      	b.n	801235a <__gethex+0x28e>
 801237c:	08013bf8 	.word	0x08013bf8
 8012380:	08013ea4 	.word	0x08013ea4
 8012384:	08013eb5 	.word	0x08013eb5
 8012388:	1e6f      	subs	r7, r5, #1
 801238a:	f1b9 0f00 	cmp.w	r9, #0
 801238e:	d130      	bne.n	80123f2 <__gethex+0x326>
 8012390:	b127      	cbz	r7, 801239c <__gethex+0x2d0>
 8012392:	4639      	mov	r1, r7
 8012394:	4620      	mov	r0, r4
 8012396:	f000 fe0e 	bl	8012fb6 <__any_on>
 801239a:	4681      	mov	r9, r0
 801239c:	117a      	asrs	r2, r7, #5
 801239e:	2301      	movs	r3, #1
 80123a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80123a4:	f007 071f 	and.w	r7, r7, #31
 80123a8:	40bb      	lsls	r3, r7
 80123aa:	4213      	tst	r3, r2
 80123ac:	4629      	mov	r1, r5
 80123ae:	4620      	mov	r0, r4
 80123b0:	bf18      	it	ne
 80123b2:	f049 0902 	orrne.w	r9, r9, #2
 80123b6:	f7ff fe21 	bl	8011ffc <rshift>
 80123ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80123be:	1b76      	subs	r6, r6, r5
 80123c0:	2502      	movs	r5, #2
 80123c2:	f1b9 0f00 	cmp.w	r9, #0
 80123c6:	d047      	beq.n	8012458 <__gethex+0x38c>
 80123c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80123cc:	2b02      	cmp	r3, #2
 80123ce:	d015      	beq.n	80123fc <__gethex+0x330>
 80123d0:	2b03      	cmp	r3, #3
 80123d2:	d017      	beq.n	8012404 <__gethex+0x338>
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d109      	bne.n	80123ec <__gethex+0x320>
 80123d8:	f019 0f02 	tst.w	r9, #2
 80123dc:	d006      	beq.n	80123ec <__gethex+0x320>
 80123de:	f8da 3000 	ldr.w	r3, [sl]
 80123e2:	ea49 0903 	orr.w	r9, r9, r3
 80123e6:	f019 0f01 	tst.w	r9, #1
 80123ea:	d10e      	bne.n	801240a <__gethex+0x33e>
 80123ec:	f045 0510 	orr.w	r5, r5, #16
 80123f0:	e032      	b.n	8012458 <__gethex+0x38c>
 80123f2:	f04f 0901 	mov.w	r9, #1
 80123f6:	e7d1      	b.n	801239c <__gethex+0x2d0>
 80123f8:	2501      	movs	r5, #1
 80123fa:	e7e2      	b.n	80123c2 <__gethex+0x2f6>
 80123fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123fe:	f1c3 0301 	rsb	r3, r3, #1
 8012402:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012406:	2b00      	cmp	r3, #0
 8012408:	d0f0      	beq.n	80123ec <__gethex+0x320>
 801240a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801240e:	f104 0314 	add.w	r3, r4, #20
 8012412:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012416:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801241a:	f04f 0c00 	mov.w	ip, #0
 801241e:	4618      	mov	r0, r3
 8012420:	f853 2b04 	ldr.w	r2, [r3], #4
 8012424:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012428:	d01b      	beq.n	8012462 <__gethex+0x396>
 801242a:	3201      	adds	r2, #1
 801242c:	6002      	str	r2, [r0, #0]
 801242e:	2d02      	cmp	r5, #2
 8012430:	f104 0314 	add.w	r3, r4, #20
 8012434:	d13c      	bne.n	80124b0 <__gethex+0x3e4>
 8012436:	f8d8 2000 	ldr.w	r2, [r8]
 801243a:	3a01      	subs	r2, #1
 801243c:	42b2      	cmp	r2, r6
 801243e:	d109      	bne.n	8012454 <__gethex+0x388>
 8012440:	1171      	asrs	r1, r6, #5
 8012442:	2201      	movs	r2, #1
 8012444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012448:	f006 061f 	and.w	r6, r6, #31
 801244c:	fa02 f606 	lsl.w	r6, r2, r6
 8012450:	421e      	tst	r6, r3
 8012452:	d13a      	bne.n	80124ca <__gethex+0x3fe>
 8012454:	f045 0520 	orr.w	r5, r5, #32
 8012458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801245a:	601c      	str	r4, [r3, #0]
 801245c:	9b02      	ldr	r3, [sp, #8]
 801245e:	601f      	str	r7, [r3, #0]
 8012460:	e6b0      	b.n	80121c4 <__gethex+0xf8>
 8012462:	4299      	cmp	r1, r3
 8012464:	f843 cc04 	str.w	ip, [r3, #-4]
 8012468:	d8d9      	bhi.n	801241e <__gethex+0x352>
 801246a:	68a3      	ldr	r3, [r4, #8]
 801246c:	459b      	cmp	fp, r3
 801246e:	db17      	blt.n	80124a0 <__gethex+0x3d4>
 8012470:	6861      	ldr	r1, [r4, #4]
 8012472:	9801      	ldr	r0, [sp, #4]
 8012474:	3101      	adds	r1, #1
 8012476:	f000 f90d 	bl	8012694 <_Balloc>
 801247a:	4681      	mov	r9, r0
 801247c:	b918      	cbnz	r0, 8012486 <__gethex+0x3ba>
 801247e:	4b1a      	ldr	r3, [pc, #104]	@ (80124e8 <__gethex+0x41c>)
 8012480:	4602      	mov	r2, r0
 8012482:	2184      	movs	r1, #132	@ 0x84
 8012484:	e6c5      	b.n	8012212 <__gethex+0x146>
 8012486:	6922      	ldr	r2, [r4, #16]
 8012488:	3202      	adds	r2, #2
 801248a:	f104 010c 	add.w	r1, r4, #12
 801248e:	0092      	lsls	r2, r2, #2
 8012490:	300c      	adds	r0, #12
 8012492:	f7fe fee0 	bl	8011256 <memcpy>
 8012496:	4621      	mov	r1, r4
 8012498:	9801      	ldr	r0, [sp, #4]
 801249a:	f000 f93b 	bl	8012714 <_Bfree>
 801249e:	464c      	mov	r4, r9
 80124a0:	6923      	ldr	r3, [r4, #16]
 80124a2:	1c5a      	adds	r2, r3, #1
 80124a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80124a8:	6122      	str	r2, [r4, #16]
 80124aa:	2201      	movs	r2, #1
 80124ac:	615a      	str	r2, [r3, #20]
 80124ae:	e7be      	b.n	801242e <__gethex+0x362>
 80124b0:	6922      	ldr	r2, [r4, #16]
 80124b2:	455a      	cmp	r2, fp
 80124b4:	dd0b      	ble.n	80124ce <__gethex+0x402>
 80124b6:	2101      	movs	r1, #1
 80124b8:	4620      	mov	r0, r4
 80124ba:	f7ff fd9f 	bl	8011ffc <rshift>
 80124be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80124c2:	3701      	adds	r7, #1
 80124c4:	42bb      	cmp	r3, r7
 80124c6:	f6ff aee0 	blt.w	801228a <__gethex+0x1be>
 80124ca:	2501      	movs	r5, #1
 80124cc:	e7c2      	b.n	8012454 <__gethex+0x388>
 80124ce:	f016 061f 	ands.w	r6, r6, #31
 80124d2:	d0fa      	beq.n	80124ca <__gethex+0x3fe>
 80124d4:	4453      	add	r3, sl
 80124d6:	f1c6 0620 	rsb	r6, r6, #32
 80124da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80124de:	f000 f9cb 	bl	8012878 <__hi0bits>
 80124e2:	42b0      	cmp	r0, r6
 80124e4:	dbe7      	blt.n	80124b6 <__gethex+0x3ea>
 80124e6:	e7f0      	b.n	80124ca <__gethex+0x3fe>
 80124e8:	08013ea4 	.word	0x08013ea4

080124ec <L_shift>:
 80124ec:	f1c2 0208 	rsb	r2, r2, #8
 80124f0:	0092      	lsls	r2, r2, #2
 80124f2:	b570      	push	{r4, r5, r6, lr}
 80124f4:	f1c2 0620 	rsb	r6, r2, #32
 80124f8:	6843      	ldr	r3, [r0, #4]
 80124fa:	6804      	ldr	r4, [r0, #0]
 80124fc:	fa03 f506 	lsl.w	r5, r3, r6
 8012500:	432c      	orrs	r4, r5
 8012502:	40d3      	lsrs	r3, r2
 8012504:	6004      	str	r4, [r0, #0]
 8012506:	f840 3f04 	str.w	r3, [r0, #4]!
 801250a:	4288      	cmp	r0, r1
 801250c:	d3f4      	bcc.n	80124f8 <L_shift+0xc>
 801250e:	bd70      	pop	{r4, r5, r6, pc}

08012510 <__match>:
 8012510:	b530      	push	{r4, r5, lr}
 8012512:	6803      	ldr	r3, [r0, #0]
 8012514:	3301      	adds	r3, #1
 8012516:	f811 4b01 	ldrb.w	r4, [r1], #1
 801251a:	b914      	cbnz	r4, 8012522 <__match+0x12>
 801251c:	6003      	str	r3, [r0, #0]
 801251e:	2001      	movs	r0, #1
 8012520:	bd30      	pop	{r4, r5, pc}
 8012522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012526:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801252a:	2d19      	cmp	r5, #25
 801252c:	bf98      	it	ls
 801252e:	3220      	addls	r2, #32
 8012530:	42a2      	cmp	r2, r4
 8012532:	d0f0      	beq.n	8012516 <__match+0x6>
 8012534:	2000      	movs	r0, #0
 8012536:	e7f3      	b.n	8012520 <__match+0x10>

08012538 <__hexnan>:
 8012538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801253c:	680b      	ldr	r3, [r1, #0]
 801253e:	6801      	ldr	r1, [r0, #0]
 8012540:	115e      	asrs	r6, r3, #5
 8012542:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012546:	f013 031f 	ands.w	r3, r3, #31
 801254a:	b087      	sub	sp, #28
 801254c:	bf18      	it	ne
 801254e:	3604      	addne	r6, #4
 8012550:	2500      	movs	r5, #0
 8012552:	1f37      	subs	r7, r6, #4
 8012554:	4682      	mov	sl, r0
 8012556:	4690      	mov	r8, r2
 8012558:	9301      	str	r3, [sp, #4]
 801255a:	f846 5c04 	str.w	r5, [r6, #-4]
 801255e:	46b9      	mov	r9, r7
 8012560:	463c      	mov	r4, r7
 8012562:	9502      	str	r5, [sp, #8]
 8012564:	46ab      	mov	fp, r5
 8012566:	784a      	ldrb	r2, [r1, #1]
 8012568:	1c4b      	adds	r3, r1, #1
 801256a:	9303      	str	r3, [sp, #12]
 801256c:	b342      	cbz	r2, 80125c0 <__hexnan+0x88>
 801256e:	4610      	mov	r0, r2
 8012570:	9105      	str	r1, [sp, #20]
 8012572:	9204      	str	r2, [sp, #16]
 8012574:	f7ff fd94 	bl	80120a0 <__hexdig_fun>
 8012578:	2800      	cmp	r0, #0
 801257a:	d151      	bne.n	8012620 <__hexnan+0xe8>
 801257c:	9a04      	ldr	r2, [sp, #16]
 801257e:	9905      	ldr	r1, [sp, #20]
 8012580:	2a20      	cmp	r2, #32
 8012582:	d818      	bhi.n	80125b6 <__hexnan+0x7e>
 8012584:	9b02      	ldr	r3, [sp, #8]
 8012586:	459b      	cmp	fp, r3
 8012588:	dd13      	ble.n	80125b2 <__hexnan+0x7a>
 801258a:	454c      	cmp	r4, r9
 801258c:	d206      	bcs.n	801259c <__hexnan+0x64>
 801258e:	2d07      	cmp	r5, #7
 8012590:	dc04      	bgt.n	801259c <__hexnan+0x64>
 8012592:	462a      	mov	r2, r5
 8012594:	4649      	mov	r1, r9
 8012596:	4620      	mov	r0, r4
 8012598:	f7ff ffa8 	bl	80124ec <L_shift>
 801259c:	4544      	cmp	r4, r8
 801259e:	d952      	bls.n	8012646 <__hexnan+0x10e>
 80125a0:	2300      	movs	r3, #0
 80125a2:	f1a4 0904 	sub.w	r9, r4, #4
 80125a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80125aa:	f8cd b008 	str.w	fp, [sp, #8]
 80125ae:	464c      	mov	r4, r9
 80125b0:	461d      	mov	r5, r3
 80125b2:	9903      	ldr	r1, [sp, #12]
 80125b4:	e7d7      	b.n	8012566 <__hexnan+0x2e>
 80125b6:	2a29      	cmp	r2, #41	@ 0x29
 80125b8:	d157      	bne.n	801266a <__hexnan+0x132>
 80125ba:	3102      	adds	r1, #2
 80125bc:	f8ca 1000 	str.w	r1, [sl]
 80125c0:	f1bb 0f00 	cmp.w	fp, #0
 80125c4:	d051      	beq.n	801266a <__hexnan+0x132>
 80125c6:	454c      	cmp	r4, r9
 80125c8:	d206      	bcs.n	80125d8 <__hexnan+0xa0>
 80125ca:	2d07      	cmp	r5, #7
 80125cc:	dc04      	bgt.n	80125d8 <__hexnan+0xa0>
 80125ce:	462a      	mov	r2, r5
 80125d0:	4649      	mov	r1, r9
 80125d2:	4620      	mov	r0, r4
 80125d4:	f7ff ff8a 	bl	80124ec <L_shift>
 80125d8:	4544      	cmp	r4, r8
 80125da:	d936      	bls.n	801264a <__hexnan+0x112>
 80125dc:	f1a8 0204 	sub.w	r2, r8, #4
 80125e0:	4623      	mov	r3, r4
 80125e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80125e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80125ea:	429f      	cmp	r7, r3
 80125ec:	d2f9      	bcs.n	80125e2 <__hexnan+0xaa>
 80125ee:	1b3b      	subs	r3, r7, r4
 80125f0:	f023 0303 	bic.w	r3, r3, #3
 80125f4:	3304      	adds	r3, #4
 80125f6:	3401      	adds	r4, #1
 80125f8:	3e03      	subs	r6, #3
 80125fa:	42b4      	cmp	r4, r6
 80125fc:	bf88      	it	hi
 80125fe:	2304      	movhi	r3, #4
 8012600:	4443      	add	r3, r8
 8012602:	2200      	movs	r2, #0
 8012604:	f843 2b04 	str.w	r2, [r3], #4
 8012608:	429f      	cmp	r7, r3
 801260a:	d2fb      	bcs.n	8012604 <__hexnan+0xcc>
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	b91b      	cbnz	r3, 8012618 <__hexnan+0xe0>
 8012610:	4547      	cmp	r7, r8
 8012612:	d128      	bne.n	8012666 <__hexnan+0x12e>
 8012614:	2301      	movs	r3, #1
 8012616:	603b      	str	r3, [r7, #0]
 8012618:	2005      	movs	r0, #5
 801261a:	b007      	add	sp, #28
 801261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012620:	3501      	adds	r5, #1
 8012622:	2d08      	cmp	r5, #8
 8012624:	f10b 0b01 	add.w	fp, fp, #1
 8012628:	dd06      	ble.n	8012638 <__hexnan+0x100>
 801262a:	4544      	cmp	r4, r8
 801262c:	d9c1      	bls.n	80125b2 <__hexnan+0x7a>
 801262e:	2300      	movs	r3, #0
 8012630:	f844 3c04 	str.w	r3, [r4, #-4]
 8012634:	2501      	movs	r5, #1
 8012636:	3c04      	subs	r4, #4
 8012638:	6822      	ldr	r2, [r4, #0]
 801263a:	f000 000f 	and.w	r0, r0, #15
 801263e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012642:	6020      	str	r0, [r4, #0]
 8012644:	e7b5      	b.n	80125b2 <__hexnan+0x7a>
 8012646:	2508      	movs	r5, #8
 8012648:	e7b3      	b.n	80125b2 <__hexnan+0x7a>
 801264a:	9b01      	ldr	r3, [sp, #4]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d0dd      	beq.n	801260c <__hexnan+0xd4>
 8012650:	f1c3 0320 	rsb	r3, r3, #32
 8012654:	f04f 32ff 	mov.w	r2, #4294967295
 8012658:	40da      	lsrs	r2, r3
 801265a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801265e:	4013      	ands	r3, r2
 8012660:	f846 3c04 	str.w	r3, [r6, #-4]
 8012664:	e7d2      	b.n	801260c <__hexnan+0xd4>
 8012666:	3f04      	subs	r7, #4
 8012668:	e7d0      	b.n	801260c <__hexnan+0xd4>
 801266a:	2004      	movs	r0, #4
 801266c:	e7d5      	b.n	801261a <__hexnan+0xe2>

0801266e <__ascii_mbtowc>:
 801266e:	b082      	sub	sp, #8
 8012670:	b901      	cbnz	r1, 8012674 <__ascii_mbtowc+0x6>
 8012672:	a901      	add	r1, sp, #4
 8012674:	b142      	cbz	r2, 8012688 <__ascii_mbtowc+0x1a>
 8012676:	b14b      	cbz	r3, 801268c <__ascii_mbtowc+0x1e>
 8012678:	7813      	ldrb	r3, [r2, #0]
 801267a:	600b      	str	r3, [r1, #0]
 801267c:	7812      	ldrb	r2, [r2, #0]
 801267e:	1e10      	subs	r0, r2, #0
 8012680:	bf18      	it	ne
 8012682:	2001      	movne	r0, #1
 8012684:	b002      	add	sp, #8
 8012686:	4770      	bx	lr
 8012688:	4610      	mov	r0, r2
 801268a:	e7fb      	b.n	8012684 <__ascii_mbtowc+0x16>
 801268c:	f06f 0001 	mvn.w	r0, #1
 8012690:	e7f8      	b.n	8012684 <__ascii_mbtowc+0x16>
	...

08012694 <_Balloc>:
 8012694:	b570      	push	{r4, r5, r6, lr}
 8012696:	69c6      	ldr	r6, [r0, #28]
 8012698:	4604      	mov	r4, r0
 801269a:	460d      	mov	r5, r1
 801269c:	b976      	cbnz	r6, 80126bc <_Balloc+0x28>
 801269e:	2010      	movs	r0, #16
 80126a0:	f7fc fc46 	bl	800ef30 <malloc>
 80126a4:	4602      	mov	r2, r0
 80126a6:	61e0      	str	r0, [r4, #28]
 80126a8:	b920      	cbnz	r0, 80126b4 <_Balloc+0x20>
 80126aa:	4b18      	ldr	r3, [pc, #96]	@ (801270c <_Balloc+0x78>)
 80126ac:	4818      	ldr	r0, [pc, #96]	@ (8012710 <_Balloc+0x7c>)
 80126ae:	216b      	movs	r1, #107	@ 0x6b
 80126b0:	f7fe fdf0 	bl	8011294 <__assert_func>
 80126b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80126b8:	6006      	str	r6, [r0, #0]
 80126ba:	60c6      	str	r6, [r0, #12]
 80126bc:	69e6      	ldr	r6, [r4, #28]
 80126be:	68f3      	ldr	r3, [r6, #12]
 80126c0:	b183      	cbz	r3, 80126e4 <_Balloc+0x50>
 80126c2:	69e3      	ldr	r3, [r4, #28]
 80126c4:	68db      	ldr	r3, [r3, #12]
 80126c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80126ca:	b9b8      	cbnz	r0, 80126fc <_Balloc+0x68>
 80126cc:	2101      	movs	r1, #1
 80126ce:	fa01 f605 	lsl.w	r6, r1, r5
 80126d2:	1d72      	adds	r2, r6, #5
 80126d4:	0092      	lsls	r2, r2, #2
 80126d6:	4620      	mov	r0, r4
 80126d8:	f000 ff55 	bl	8013586 <_calloc_r>
 80126dc:	b160      	cbz	r0, 80126f8 <_Balloc+0x64>
 80126de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80126e2:	e00e      	b.n	8012702 <_Balloc+0x6e>
 80126e4:	2221      	movs	r2, #33	@ 0x21
 80126e6:	2104      	movs	r1, #4
 80126e8:	4620      	mov	r0, r4
 80126ea:	f000 ff4c 	bl	8013586 <_calloc_r>
 80126ee:	69e3      	ldr	r3, [r4, #28]
 80126f0:	60f0      	str	r0, [r6, #12]
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d1e4      	bne.n	80126c2 <_Balloc+0x2e>
 80126f8:	2000      	movs	r0, #0
 80126fa:	bd70      	pop	{r4, r5, r6, pc}
 80126fc:	6802      	ldr	r2, [r0, #0]
 80126fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012702:	2300      	movs	r3, #0
 8012704:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012708:	e7f7      	b.n	80126fa <_Balloc+0x66>
 801270a:	bf00      	nop
 801270c:	08013d8a 	.word	0x08013d8a
 8012710:	08013f15 	.word	0x08013f15

08012714 <_Bfree>:
 8012714:	b570      	push	{r4, r5, r6, lr}
 8012716:	69c6      	ldr	r6, [r0, #28]
 8012718:	4605      	mov	r5, r0
 801271a:	460c      	mov	r4, r1
 801271c:	b976      	cbnz	r6, 801273c <_Bfree+0x28>
 801271e:	2010      	movs	r0, #16
 8012720:	f7fc fc06 	bl	800ef30 <malloc>
 8012724:	4602      	mov	r2, r0
 8012726:	61e8      	str	r0, [r5, #28]
 8012728:	b920      	cbnz	r0, 8012734 <_Bfree+0x20>
 801272a:	4b09      	ldr	r3, [pc, #36]	@ (8012750 <_Bfree+0x3c>)
 801272c:	4809      	ldr	r0, [pc, #36]	@ (8012754 <_Bfree+0x40>)
 801272e:	218f      	movs	r1, #143	@ 0x8f
 8012730:	f7fe fdb0 	bl	8011294 <__assert_func>
 8012734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012738:	6006      	str	r6, [r0, #0]
 801273a:	60c6      	str	r6, [r0, #12]
 801273c:	b13c      	cbz	r4, 801274e <_Bfree+0x3a>
 801273e:	69eb      	ldr	r3, [r5, #28]
 8012740:	6862      	ldr	r2, [r4, #4]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012748:	6021      	str	r1, [r4, #0]
 801274a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801274e:	bd70      	pop	{r4, r5, r6, pc}
 8012750:	08013d8a 	.word	0x08013d8a
 8012754:	08013f15 	.word	0x08013f15

08012758 <__multadd>:
 8012758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801275c:	690d      	ldr	r5, [r1, #16]
 801275e:	4607      	mov	r7, r0
 8012760:	460c      	mov	r4, r1
 8012762:	461e      	mov	r6, r3
 8012764:	f101 0c14 	add.w	ip, r1, #20
 8012768:	2000      	movs	r0, #0
 801276a:	f8dc 3000 	ldr.w	r3, [ip]
 801276e:	b299      	uxth	r1, r3
 8012770:	fb02 6101 	mla	r1, r2, r1, r6
 8012774:	0c1e      	lsrs	r6, r3, #16
 8012776:	0c0b      	lsrs	r3, r1, #16
 8012778:	fb02 3306 	mla	r3, r2, r6, r3
 801277c:	b289      	uxth	r1, r1
 801277e:	3001      	adds	r0, #1
 8012780:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012784:	4285      	cmp	r5, r0
 8012786:	f84c 1b04 	str.w	r1, [ip], #4
 801278a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801278e:	dcec      	bgt.n	801276a <__multadd+0x12>
 8012790:	b30e      	cbz	r6, 80127d6 <__multadd+0x7e>
 8012792:	68a3      	ldr	r3, [r4, #8]
 8012794:	42ab      	cmp	r3, r5
 8012796:	dc19      	bgt.n	80127cc <__multadd+0x74>
 8012798:	6861      	ldr	r1, [r4, #4]
 801279a:	4638      	mov	r0, r7
 801279c:	3101      	adds	r1, #1
 801279e:	f7ff ff79 	bl	8012694 <_Balloc>
 80127a2:	4680      	mov	r8, r0
 80127a4:	b928      	cbnz	r0, 80127b2 <__multadd+0x5a>
 80127a6:	4602      	mov	r2, r0
 80127a8:	4b0c      	ldr	r3, [pc, #48]	@ (80127dc <__multadd+0x84>)
 80127aa:	480d      	ldr	r0, [pc, #52]	@ (80127e0 <__multadd+0x88>)
 80127ac:	21ba      	movs	r1, #186	@ 0xba
 80127ae:	f7fe fd71 	bl	8011294 <__assert_func>
 80127b2:	6922      	ldr	r2, [r4, #16]
 80127b4:	3202      	adds	r2, #2
 80127b6:	f104 010c 	add.w	r1, r4, #12
 80127ba:	0092      	lsls	r2, r2, #2
 80127bc:	300c      	adds	r0, #12
 80127be:	f7fe fd4a 	bl	8011256 <memcpy>
 80127c2:	4621      	mov	r1, r4
 80127c4:	4638      	mov	r0, r7
 80127c6:	f7ff ffa5 	bl	8012714 <_Bfree>
 80127ca:	4644      	mov	r4, r8
 80127cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80127d0:	3501      	adds	r5, #1
 80127d2:	615e      	str	r6, [r3, #20]
 80127d4:	6125      	str	r5, [r4, #16]
 80127d6:	4620      	mov	r0, r4
 80127d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127dc:	08013ea4 	.word	0x08013ea4
 80127e0:	08013f15 	.word	0x08013f15

080127e4 <__s2b>:
 80127e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127e8:	460c      	mov	r4, r1
 80127ea:	4615      	mov	r5, r2
 80127ec:	461f      	mov	r7, r3
 80127ee:	2209      	movs	r2, #9
 80127f0:	3308      	adds	r3, #8
 80127f2:	4606      	mov	r6, r0
 80127f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80127f8:	2100      	movs	r1, #0
 80127fa:	2201      	movs	r2, #1
 80127fc:	429a      	cmp	r2, r3
 80127fe:	db09      	blt.n	8012814 <__s2b+0x30>
 8012800:	4630      	mov	r0, r6
 8012802:	f7ff ff47 	bl	8012694 <_Balloc>
 8012806:	b940      	cbnz	r0, 801281a <__s2b+0x36>
 8012808:	4602      	mov	r2, r0
 801280a:	4b19      	ldr	r3, [pc, #100]	@ (8012870 <__s2b+0x8c>)
 801280c:	4819      	ldr	r0, [pc, #100]	@ (8012874 <__s2b+0x90>)
 801280e:	21d3      	movs	r1, #211	@ 0xd3
 8012810:	f7fe fd40 	bl	8011294 <__assert_func>
 8012814:	0052      	lsls	r2, r2, #1
 8012816:	3101      	adds	r1, #1
 8012818:	e7f0      	b.n	80127fc <__s2b+0x18>
 801281a:	9b08      	ldr	r3, [sp, #32]
 801281c:	6143      	str	r3, [r0, #20]
 801281e:	2d09      	cmp	r5, #9
 8012820:	f04f 0301 	mov.w	r3, #1
 8012824:	6103      	str	r3, [r0, #16]
 8012826:	dd16      	ble.n	8012856 <__s2b+0x72>
 8012828:	f104 0909 	add.w	r9, r4, #9
 801282c:	46c8      	mov	r8, r9
 801282e:	442c      	add	r4, r5
 8012830:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012834:	4601      	mov	r1, r0
 8012836:	3b30      	subs	r3, #48	@ 0x30
 8012838:	220a      	movs	r2, #10
 801283a:	4630      	mov	r0, r6
 801283c:	f7ff ff8c 	bl	8012758 <__multadd>
 8012840:	45a0      	cmp	r8, r4
 8012842:	d1f5      	bne.n	8012830 <__s2b+0x4c>
 8012844:	f1a5 0408 	sub.w	r4, r5, #8
 8012848:	444c      	add	r4, r9
 801284a:	1b2d      	subs	r5, r5, r4
 801284c:	1963      	adds	r3, r4, r5
 801284e:	42bb      	cmp	r3, r7
 8012850:	db04      	blt.n	801285c <__s2b+0x78>
 8012852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012856:	340a      	adds	r4, #10
 8012858:	2509      	movs	r5, #9
 801285a:	e7f6      	b.n	801284a <__s2b+0x66>
 801285c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012860:	4601      	mov	r1, r0
 8012862:	3b30      	subs	r3, #48	@ 0x30
 8012864:	220a      	movs	r2, #10
 8012866:	4630      	mov	r0, r6
 8012868:	f7ff ff76 	bl	8012758 <__multadd>
 801286c:	e7ee      	b.n	801284c <__s2b+0x68>
 801286e:	bf00      	nop
 8012870:	08013ea4 	.word	0x08013ea4
 8012874:	08013f15 	.word	0x08013f15

08012878 <__hi0bits>:
 8012878:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801287c:	4603      	mov	r3, r0
 801287e:	bf36      	itet	cc
 8012880:	0403      	lslcc	r3, r0, #16
 8012882:	2000      	movcs	r0, #0
 8012884:	2010      	movcc	r0, #16
 8012886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801288a:	bf3c      	itt	cc
 801288c:	021b      	lslcc	r3, r3, #8
 801288e:	3008      	addcc	r0, #8
 8012890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012894:	bf3c      	itt	cc
 8012896:	011b      	lslcc	r3, r3, #4
 8012898:	3004      	addcc	r0, #4
 801289a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801289e:	bf3c      	itt	cc
 80128a0:	009b      	lslcc	r3, r3, #2
 80128a2:	3002      	addcc	r0, #2
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	db05      	blt.n	80128b4 <__hi0bits+0x3c>
 80128a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80128ac:	f100 0001 	add.w	r0, r0, #1
 80128b0:	bf08      	it	eq
 80128b2:	2020      	moveq	r0, #32
 80128b4:	4770      	bx	lr

080128b6 <__lo0bits>:
 80128b6:	6803      	ldr	r3, [r0, #0]
 80128b8:	4602      	mov	r2, r0
 80128ba:	f013 0007 	ands.w	r0, r3, #7
 80128be:	d00b      	beq.n	80128d8 <__lo0bits+0x22>
 80128c0:	07d9      	lsls	r1, r3, #31
 80128c2:	d421      	bmi.n	8012908 <__lo0bits+0x52>
 80128c4:	0798      	lsls	r0, r3, #30
 80128c6:	bf49      	itett	mi
 80128c8:	085b      	lsrmi	r3, r3, #1
 80128ca:	089b      	lsrpl	r3, r3, #2
 80128cc:	2001      	movmi	r0, #1
 80128ce:	6013      	strmi	r3, [r2, #0]
 80128d0:	bf5c      	itt	pl
 80128d2:	6013      	strpl	r3, [r2, #0]
 80128d4:	2002      	movpl	r0, #2
 80128d6:	4770      	bx	lr
 80128d8:	b299      	uxth	r1, r3
 80128da:	b909      	cbnz	r1, 80128e0 <__lo0bits+0x2a>
 80128dc:	0c1b      	lsrs	r3, r3, #16
 80128de:	2010      	movs	r0, #16
 80128e0:	b2d9      	uxtb	r1, r3
 80128e2:	b909      	cbnz	r1, 80128e8 <__lo0bits+0x32>
 80128e4:	3008      	adds	r0, #8
 80128e6:	0a1b      	lsrs	r3, r3, #8
 80128e8:	0719      	lsls	r1, r3, #28
 80128ea:	bf04      	itt	eq
 80128ec:	091b      	lsreq	r3, r3, #4
 80128ee:	3004      	addeq	r0, #4
 80128f0:	0799      	lsls	r1, r3, #30
 80128f2:	bf04      	itt	eq
 80128f4:	089b      	lsreq	r3, r3, #2
 80128f6:	3002      	addeq	r0, #2
 80128f8:	07d9      	lsls	r1, r3, #31
 80128fa:	d403      	bmi.n	8012904 <__lo0bits+0x4e>
 80128fc:	085b      	lsrs	r3, r3, #1
 80128fe:	f100 0001 	add.w	r0, r0, #1
 8012902:	d003      	beq.n	801290c <__lo0bits+0x56>
 8012904:	6013      	str	r3, [r2, #0]
 8012906:	4770      	bx	lr
 8012908:	2000      	movs	r0, #0
 801290a:	4770      	bx	lr
 801290c:	2020      	movs	r0, #32
 801290e:	4770      	bx	lr

08012910 <__i2b>:
 8012910:	b510      	push	{r4, lr}
 8012912:	460c      	mov	r4, r1
 8012914:	2101      	movs	r1, #1
 8012916:	f7ff febd 	bl	8012694 <_Balloc>
 801291a:	4602      	mov	r2, r0
 801291c:	b928      	cbnz	r0, 801292a <__i2b+0x1a>
 801291e:	4b05      	ldr	r3, [pc, #20]	@ (8012934 <__i2b+0x24>)
 8012920:	4805      	ldr	r0, [pc, #20]	@ (8012938 <__i2b+0x28>)
 8012922:	f240 1145 	movw	r1, #325	@ 0x145
 8012926:	f7fe fcb5 	bl	8011294 <__assert_func>
 801292a:	2301      	movs	r3, #1
 801292c:	6144      	str	r4, [r0, #20]
 801292e:	6103      	str	r3, [r0, #16]
 8012930:	bd10      	pop	{r4, pc}
 8012932:	bf00      	nop
 8012934:	08013ea4 	.word	0x08013ea4
 8012938:	08013f15 	.word	0x08013f15

0801293c <__multiply>:
 801293c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012940:	4614      	mov	r4, r2
 8012942:	690a      	ldr	r2, [r1, #16]
 8012944:	6923      	ldr	r3, [r4, #16]
 8012946:	429a      	cmp	r2, r3
 8012948:	bfa8      	it	ge
 801294a:	4623      	movge	r3, r4
 801294c:	460f      	mov	r7, r1
 801294e:	bfa4      	itt	ge
 8012950:	460c      	movge	r4, r1
 8012952:	461f      	movge	r7, r3
 8012954:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012958:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801295c:	68a3      	ldr	r3, [r4, #8]
 801295e:	6861      	ldr	r1, [r4, #4]
 8012960:	eb0a 0609 	add.w	r6, sl, r9
 8012964:	42b3      	cmp	r3, r6
 8012966:	b085      	sub	sp, #20
 8012968:	bfb8      	it	lt
 801296a:	3101      	addlt	r1, #1
 801296c:	f7ff fe92 	bl	8012694 <_Balloc>
 8012970:	b930      	cbnz	r0, 8012980 <__multiply+0x44>
 8012972:	4602      	mov	r2, r0
 8012974:	4b44      	ldr	r3, [pc, #272]	@ (8012a88 <__multiply+0x14c>)
 8012976:	4845      	ldr	r0, [pc, #276]	@ (8012a8c <__multiply+0x150>)
 8012978:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801297c:	f7fe fc8a 	bl	8011294 <__assert_func>
 8012980:	f100 0514 	add.w	r5, r0, #20
 8012984:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012988:	462b      	mov	r3, r5
 801298a:	2200      	movs	r2, #0
 801298c:	4543      	cmp	r3, r8
 801298e:	d321      	bcc.n	80129d4 <__multiply+0x98>
 8012990:	f107 0114 	add.w	r1, r7, #20
 8012994:	f104 0214 	add.w	r2, r4, #20
 8012998:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801299c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80129a0:	9302      	str	r3, [sp, #8]
 80129a2:	1b13      	subs	r3, r2, r4
 80129a4:	3b15      	subs	r3, #21
 80129a6:	f023 0303 	bic.w	r3, r3, #3
 80129aa:	3304      	adds	r3, #4
 80129ac:	f104 0715 	add.w	r7, r4, #21
 80129b0:	42ba      	cmp	r2, r7
 80129b2:	bf38      	it	cc
 80129b4:	2304      	movcc	r3, #4
 80129b6:	9301      	str	r3, [sp, #4]
 80129b8:	9b02      	ldr	r3, [sp, #8]
 80129ba:	9103      	str	r1, [sp, #12]
 80129bc:	428b      	cmp	r3, r1
 80129be:	d80c      	bhi.n	80129da <__multiply+0x9e>
 80129c0:	2e00      	cmp	r6, #0
 80129c2:	dd03      	ble.n	80129cc <__multiply+0x90>
 80129c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d05b      	beq.n	8012a84 <__multiply+0x148>
 80129cc:	6106      	str	r6, [r0, #16]
 80129ce:	b005      	add	sp, #20
 80129d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129d4:	f843 2b04 	str.w	r2, [r3], #4
 80129d8:	e7d8      	b.n	801298c <__multiply+0x50>
 80129da:	f8b1 a000 	ldrh.w	sl, [r1]
 80129de:	f1ba 0f00 	cmp.w	sl, #0
 80129e2:	d024      	beq.n	8012a2e <__multiply+0xf2>
 80129e4:	f104 0e14 	add.w	lr, r4, #20
 80129e8:	46a9      	mov	r9, r5
 80129ea:	f04f 0c00 	mov.w	ip, #0
 80129ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80129f2:	f8d9 3000 	ldr.w	r3, [r9]
 80129f6:	fa1f fb87 	uxth.w	fp, r7
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8012a00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012a04:	f8d9 7000 	ldr.w	r7, [r9]
 8012a08:	4463      	add	r3, ip
 8012a0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012a0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8012a12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012a1c:	4572      	cmp	r2, lr
 8012a1e:	f849 3b04 	str.w	r3, [r9], #4
 8012a22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012a26:	d8e2      	bhi.n	80129ee <__multiply+0xb2>
 8012a28:	9b01      	ldr	r3, [sp, #4]
 8012a2a:	f845 c003 	str.w	ip, [r5, r3]
 8012a2e:	9b03      	ldr	r3, [sp, #12]
 8012a30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012a34:	3104      	adds	r1, #4
 8012a36:	f1b9 0f00 	cmp.w	r9, #0
 8012a3a:	d021      	beq.n	8012a80 <__multiply+0x144>
 8012a3c:	682b      	ldr	r3, [r5, #0]
 8012a3e:	f104 0c14 	add.w	ip, r4, #20
 8012a42:	46ae      	mov	lr, r5
 8012a44:	f04f 0a00 	mov.w	sl, #0
 8012a48:	f8bc b000 	ldrh.w	fp, [ip]
 8012a4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012a50:	fb09 770b 	mla	r7, r9, fp, r7
 8012a54:	4457      	add	r7, sl
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012a5c:	f84e 3b04 	str.w	r3, [lr], #4
 8012a60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012a64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a68:	f8be 3000 	ldrh.w	r3, [lr]
 8012a6c:	fb09 330a 	mla	r3, r9, sl, r3
 8012a70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012a74:	4562      	cmp	r2, ip
 8012a76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a7a:	d8e5      	bhi.n	8012a48 <__multiply+0x10c>
 8012a7c:	9f01      	ldr	r7, [sp, #4]
 8012a7e:	51eb      	str	r3, [r5, r7]
 8012a80:	3504      	adds	r5, #4
 8012a82:	e799      	b.n	80129b8 <__multiply+0x7c>
 8012a84:	3e01      	subs	r6, #1
 8012a86:	e79b      	b.n	80129c0 <__multiply+0x84>
 8012a88:	08013ea4 	.word	0x08013ea4
 8012a8c:	08013f15 	.word	0x08013f15

08012a90 <__pow5mult>:
 8012a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a94:	4615      	mov	r5, r2
 8012a96:	f012 0203 	ands.w	r2, r2, #3
 8012a9a:	4607      	mov	r7, r0
 8012a9c:	460e      	mov	r6, r1
 8012a9e:	d007      	beq.n	8012ab0 <__pow5mult+0x20>
 8012aa0:	4c25      	ldr	r4, [pc, #148]	@ (8012b38 <__pow5mult+0xa8>)
 8012aa2:	3a01      	subs	r2, #1
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012aaa:	f7ff fe55 	bl	8012758 <__multadd>
 8012aae:	4606      	mov	r6, r0
 8012ab0:	10ad      	asrs	r5, r5, #2
 8012ab2:	d03d      	beq.n	8012b30 <__pow5mult+0xa0>
 8012ab4:	69fc      	ldr	r4, [r7, #28]
 8012ab6:	b97c      	cbnz	r4, 8012ad8 <__pow5mult+0x48>
 8012ab8:	2010      	movs	r0, #16
 8012aba:	f7fc fa39 	bl	800ef30 <malloc>
 8012abe:	4602      	mov	r2, r0
 8012ac0:	61f8      	str	r0, [r7, #28]
 8012ac2:	b928      	cbnz	r0, 8012ad0 <__pow5mult+0x40>
 8012ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8012b3c <__pow5mult+0xac>)
 8012ac6:	481e      	ldr	r0, [pc, #120]	@ (8012b40 <__pow5mult+0xb0>)
 8012ac8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012acc:	f7fe fbe2 	bl	8011294 <__assert_func>
 8012ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ad4:	6004      	str	r4, [r0, #0]
 8012ad6:	60c4      	str	r4, [r0, #12]
 8012ad8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012ae0:	b94c      	cbnz	r4, 8012af6 <__pow5mult+0x66>
 8012ae2:	f240 2171 	movw	r1, #625	@ 0x271
 8012ae6:	4638      	mov	r0, r7
 8012ae8:	f7ff ff12 	bl	8012910 <__i2b>
 8012aec:	2300      	movs	r3, #0
 8012aee:	f8c8 0008 	str.w	r0, [r8, #8]
 8012af2:	4604      	mov	r4, r0
 8012af4:	6003      	str	r3, [r0, #0]
 8012af6:	f04f 0900 	mov.w	r9, #0
 8012afa:	07eb      	lsls	r3, r5, #31
 8012afc:	d50a      	bpl.n	8012b14 <__pow5mult+0x84>
 8012afe:	4631      	mov	r1, r6
 8012b00:	4622      	mov	r2, r4
 8012b02:	4638      	mov	r0, r7
 8012b04:	f7ff ff1a 	bl	801293c <__multiply>
 8012b08:	4631      	mov	r1, r6
 8012b0a:	4680      	mov	r8, r0
 8012b0c:	4638      	mov	r0, r7
 8012b0e:	f7ff fe01 	bl	8012714 <_Bfree>
 8012b12:	4646      	mov	r6, r8
 8012b14:	106d      	asrs	r5, r5, #1
 8012b16:	d00b      	beq.n	8012b30 <__pow5mult+0xa0>
 8012b18:	6820      	ldr	r0, [r4, #0]
 8012b1a:	b938      	cbnz	r0, 8012b2c <__pow5mult+0x9c>
 8012b1c:	4622      	mov	r2, r4
 8012b1e:	4621      	mov	r1, r4
 8012b20:	4638      	mov	r0, r7
 8012b22:	f7ff ff0b 	bl	801293c <__multiply>
 8012b26:	6020      	str	r0, [r4, #0]
 8012b28:	f8c0 9000 	str.w	r9, [r0]
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	e7e4      	b.n	8012afa <__pow5mult+0x6a>
 8012b30:	4630      	mov	r0, r6
 8012b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b36:	bf00      	nop
 8012b38:	08013f70 	.word	0x08013f70
 8012b3c:	08013d8a 	.word	0x08013d8a
 8012b40:	08013f15 	.word	0x08013f15

08012b44 <__lshift>:
 8012b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b48:	460c      	mov	r4, r1
 8012b4a:	6849      	ldr	r1, [r1, #4]
 8012b4c:	6923      	ldr	r3, [r4, #16]
 8012b4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012b52:	68a3      	ldr	r3, [r4, #8]
 8012b54:	4607      	mov	r7, r0
 8012b56:	4691      	mov	r9, r2
 8012b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012b5c:	f108 0601 	add.w	r6, r8, #1
 8012b60:	42b3      	cmp	r3, r6
 8012b62:	db0b      	blt.n	8012b7c <__lshift+0x38>
 8012b64:	4638      	mov	r0, r7
 8012b66:	f7ff fd95 	bl	8012694 <_Balloc>
 8012b6a:	4605      	mov	r5, r0
 8012b6c:	b948      	cbnz	r0, 8012b82 <__lshift+0x3e>
 8012b6e:	4602      	mov	r2, r0
 8012b70:	4b28      	ldr	r3, [pc, #160]	@ (8012c14 <__lshift+0xd0>)
 8012b72:	4829      	ldr	r0, [pc, #164]	@ (8012c18 <__lshift+0xd4>)
 8012b74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012b78:	f7fe fb8c 	bl	8011294 <__assert_func>
 8012b7c:	3101      	adds	r1, #1
 8012b7e:	005b      	lsls	r3, r3, #1
 8012b80:	e7ee      	b.n	8012b60 <__lshift+0x1c>
 8012b82:	2300      	movs	r3, #0
 8012b84:	f100 0114 	add.w	r1, r0, #20
 8012b88:	f100 0210 	add.w	r2, r0, #16
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	4553      	cmp	r3, sl
 8012b90:	db33      	blt.n	8012bfa <__lshift+0xb6>
 8012b92:	6920      	ldr	r0, [r4, #16]
 8012b94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b98:	f104 0314 	add.w	r3, r4, #20
 8012b9c:	f019 091f 	ands.w	r9, r9, #31
 8012ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012ba4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012ba8:	d02b      	beq.n	8012c02 <__lshift+0xbe>
 8012baa:	f1c9 0e20 	rsb	lr, r9, #32
 8012bae:	468a      	mov	sl, r1
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	6818      	ldr	r0, [r3, #0]
 8012bb4:	fa00 f009 	lsl.w	r0, r0, r9
 8012bb8:	4310      	orrs	r0, r2
 8012bba:	f84a 0b04 	str.w	r0, [sl], #4
 8012bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bc2:	459c      	cmp	ip, r3
 8012bc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8012bc8:	d8f3      	bhi.n	8012bb2 <__lshift+0x6e>
 8012bca:	ebac 0304 	sub.w	r3, ip, r4
 8012bce:	3b15      	subs	r3, #21
 8012bd0:	f023 0303 	bic.w	r3, r3, #3
 8012bd4:	3304      	adds	r3, #4
 8012bd6:	f104 0015 	add.w	r0, r4, #21
 8012bda:	4584      	cmp	ip, r0
 8012bdc:	bf38      	it	cc
 8012bde:	2304      	movcc	r3, #4
 8012be0:	50ca      	str	r2, [r1, r3]
 8012be2:	b10a      	cbz	r2, 8012be8 <__lshift+0xa4>
 8012be4:	f108 0602 	add.w	r6, r8, #2
 8012be8:	3e01      	subs	r6, #1
 8012bea:	4638      	mov	r0, r7
 8012bec:	612e      	str	r6, [r5, #16]
 8012bee:	4621      	mov	r1, r4
 8012bf0:	f7ff fd90 	bl	8012714 <_Bfree>
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8012bfe:	3301      	adds	r3, #1
 8012c00:	e7c5      	b.n	8012b8e <__lshift+0x4a>
 8012c02:	3904      	subs	r1, #4
 8012c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c08:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c0c:	459c      	cmp	ip, r3
 8012c0e:	d8f9      	bhi.n	8012c04 <__lshift+0xc0>
 8012c10:	e7ea      	b.n	8012be8 <__lshift+0xa4>
 8012c12:	bf00      	nop
 8012c14:	08013ea4 	.word	0x08013ea4
 8012c18:	08013f15 	.word	0x08013f15

08012c1c <__mcmp>:
 8012c1c:	690a      	ldr	r2, [r1, #16]
 8012c1e:	4603      	mov	r3, r0
 8012c20:	6900      	ldr	r0, [r0, #16]
 8012c22:	1a80      	subs	r0, r0, r2
 8012c24:	b530      	push	{r4, r5, lr}
 8012c26:	d10e      	bne.n	8012c46 <__mcmp+0x2a>
 8012c28:	3314      	adds	r3, #20
 8012c2a:	3114      	adds	r1, #20
 8012c2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012c30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012c34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012c38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012c3c:	4295      	cmp	r5, r2
 8012c3e:	d003      	beq.n	8012c48 <__mcmp+0x2c>
 8012c40:	d205      	bcs.n	8012c4e <__mcmp+0x32>
 8012c42:	f04f 30ff 	mov.w	r0, #4294967295
 8012c46:	bd30      	pop	{r4, r5, pc}
 8012c48:	42a3      	cmp	r3, r4
 8012c4a:	d3f3      	bcc.n	8012c34 <__mcmp+0x18>
 8012c4c:	e7fb      	b.n	8012c46 <__mcmp+0x2a>
 8012c4e:	2001      	movs	r0, #1
 8012c50:	e7f9      	b.n	8012c46 <__mcmp+0x2a>
	...

08012c54 <__mdiff>:
 8012c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c58:	4689      	mov	r9, r1
 8012c5a:	4606      	mov	r6, r0
 8012c5c:	4611      	mov	r1, r2
 8012c5e:	4648      	mov	r0, r9
 8012c60:	4614      	mov	r4, r2
 8012c62:	f7ff ffdb 	bl	8012c1c <__mcmp>
 8012c66:	1e05      	subs	r5, r0, #0
 8012c68:	d112      	bne.n	8012c90 <__mdiff+0x3c>
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	f7ff fd11 	bl	8012694 <_Balloc>
 8012c72:	4602      	mov	r2, r0
 8012c74:	b928      	cbnz	r0, 8012c82 <__mdiff+0x2e>
 8012c76:	4b3f      	ldr	r3, [pc, #252]	@ (8012d74 <__mdiff+0x120>)
 8012c78:	f240 2137 	movw	r1, #567	@ 0x237
 8012c7c:	483e      	ldr	r0, [pc, #248]	@ (8012d78 <__mdiff+0x124>)
 8012c7e:	f7fe fb09 	bl	8011294 <__assert_func>
 8012c82:	2301      	movs	r3, #1
 8012c84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012c88:	4610      	mov	r0, r2
 8012c8a:	b003      	add	sp, #12
 8012c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c90:	bfbc      	itt	lt
 8012c92:	464b      	movlt	r3, r9
 8012c94:	46a1      	movlt	r9, r4
 8012c96:	4630      	mov	r0, r6
 8012c98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012c9c:	bfba      	itte	lt
 8012c9e:	461c      	movlt	r4, r3
 8012ca0:	2501      	movlt	r5, #1
 8012ca2:	2500      	movge	r5, #0
 8012ca4:	f7ff fcf6 	bl	8012694 <_Balloc>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	b918      	cbnz	r0, 8012cb4 <__mdiff+0x60>
 8012cac:	4b31      	ldr	r3, [pc, #196]	@ (8012d74 <__mdiff+0x120>)
 8012cae:	f240 2145 	movw	r1, #581	@ 0x245
 8012cb2:	e7e3      	b.n	8012c7c <__mdiff+0x28>
 8012cb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012cb8:	6926      	ldr	r6, [r4, #16]
 8012cba:	60c5      	str	r5, [r0, #12]
 8012cbc:	f109 0310 	add.w	r3, r9, #16
 8012cc0:	f109 0514 	add.w	r5, r9, #20
 8012cc4:	f104 0e14 	add.w	lr, r4, #20
 8012cc8:	f100 0b14 	add.w	fp, r0, #20
 8012ccc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012cd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012cd4:	9301      	str	r3, [sp, #4]
 8012cd6:	46d9      	mov	r9, fp
 8012cd8:	f04f 0c00 	mov.w	ip, #0
 8012cdc:	9b01      	ldr	r3, [sp, #4]
 8012cde:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012ce2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012ce6:	9301      	str	r3, [sp, #4]
 8012ce8:	fa1f f38a 	uxth.w	r3, sl
 8012cec:	4619      	mov	r1, r3
 8012cee:	b283      	uxth	r3, r0
 8012cf0:	1acb      	subs	r3, r1, r3
 8012cf2:	0c00      	lsrs	r0, r0, #16
 8012cf4:	4463      	add	r3, ip
 8012cf6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012cfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012d04:	4576      	cmp	r6, lr
 8012d06:	f849 3b04 	str.w	r3, [r9], #4
 8012d0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012d0e:	d8e5      	bhi.n	8012cdc <__mdiff+0x88>
 8012d10:	1b33      	subs	r3, r6, r4
 8012d12:	3b15      	subs	r3, #21
 8012d14:	f023 0303 	bic.w	r3, r3, #3
 8012d18:	3415      	adds	r4, #21
 8012d1a:	3304      	adds	r3, #4
 8012d1c:	42a6      	cmp	r6, r4
 8012d1e:	bf38      	it	cc
 8012d20:	2304      	movcc	r3, #4
 8012d22:	441d      	add	r5, r3
 8012d24:	445b      	add	r3, fp
 8012d26:	461e      	mov	r6, r3
 8012d28:	462c      	mov	r4, r5
 8012d2a:	4544      	cmp	r4, r8
 8012d2c:	d30e      	bcc.n	8012d4c <__mdiff+0xf8>
 8012d2e:	f108 0103 	add.w	r1, r8, #3
 8012d32:	1b49      	subs	r1, r1, r5
 8012d34:	f021 0103 	bic.w	r1, r1, #3
 8012d38:	3d03      	subs	r5, #3
 8012d3a:	45a8      	cmp	r8, r5
 8012d3c:	bf38      	it	cc
 8012d3e:	2100      	movcc	r1, #0
 8012d40:	440b      	add	r3, r1
 8012d42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012d46:	b191      	cbz	r1, 8012d6e <__mdiff+0x11a>
 8012d48:	6117      	str	r7, [r2, #16]
 8012d4a:	e79d      	b.n	8012c88 <__mdiff+0x34>
 8012d4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012d50:	46e6      	mov	lr, ip
 8012d52:	0c08      	lsrs	r0, r1, #16
 8012d54:	fa1c fc81 	uxtah	ip, ip, r1
 8012d58:	4471      	add	r1, lr
 8012d5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012d5e:	b289      	uxth	r1, r1
 8012d60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012d64:	f846 1b04 	str.w	r1, [r6], #4
 8012d68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012d6c:	e7dd      	b.n	8012d2a <__mdiff+0xd6>
 8012d6e:	3f01      	subs	r7, #1
 8012d70:	e7e7      	b.n	8012d42 <__mdiff+0xee>
 8012d72:	bf00      	nop
 8012d74:	08013ea4 	.word	0x08013ea4
 8012d78:	08013f15 	.word	0x08013f15

08012d7c <__ulp>:
 8012d7c:	b082      	sub	sp, #8
 8012d7e:	ed8d 0b00 	vstr	d0, [sp]
 8012d82:	9a01      	ldr	r2, [sp, #4]
 8012d84:	4b0f      	ldr	r3, [pc, #60]	@ (8012dc4 <__ulp+0x48>)
 8012d86:	4013      	ands	r3, r2
 8012d88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	dc08      	bgt.n	8012da2 <__ulp+0x26>
 8012d90:	425b      	negs	r3, r3
 8012d92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012d96:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012d9a:	da04      	bge.n	8012da6 <__ulp+0x2a>
 8012d9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012da0:	4113      	asrs	r3, r2
 8012da2:	2200      	movs	r2, #0
 8012da4:	e008      	b.n	8012db8 <__ulp+0x3c>
 8012da6:	f1a2 0314 	sub.w	r3, r2, #20
 8012daa:	2b1e      	cmp	r3, #30
 8012dac:	bfda      	itte	le
 8012dae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012db2:	40da      	lsrle	r2, r3
 8012db4:	2201      	movgt	r2, #1
 8012db6:	2300      	movs	r3, #0
 8012db8:	4619      	mov	r1, r3
 8012dba:	4610      	mov	r0, r2
 8012dbc:	ec41 0b10 	vmov	d0, r0, r1
 8012dc0:	b002      	add	sp, #8
 8012dc2:	4770      	bx	lr
 8012dc4:	7ff00000 	.word	0x7ff00000

08012dc8 <__b2d>:
 8012dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dcc:	6906      	ldr	r6, [r0, #16]
 8012dce:	f100 0814 	add.w	r8, r0, #20
 8012dd2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012dd6:	1f37      	subs	r7, r6, #4
 8012dd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012ddc:	4610      	mov	r0, r2
 8012dde:	f7ff fd4b 	bl	8012878 <__hi0bits>
 8012de2:	f1c0 0320 	rsb	r3, r0, #32
 8012de6:	280a      	cmp	r0, #10
 8012de8:	600b      	str	r3, [r1, #0]
 8012dea:	491b      	ldr	r1, [pc, #108]	@ (8012e58 <__b2d+0x90>)
 8012dec:	dc15      	bgt.n	8012e1a <__b2d+0x52>
 8012dee:	f1c0 0c0b 	rsb	ip, r0, #11
 8012df2:	fa22 f30c 	lsr.w	r3, r2, ip
 8012df6:	45b8      	cmp	r8, r7
 8012df8:	ea43 0501 	orr.w	r5, r3, r1
 8012dfc:	bf34      	ite	cc
 8012dfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e02:	2300      	movcs	r3, #0
 8012e04:	3015      	adds	r0, #21
 8012e06:	fa02 f000 	lsl.w	r0, r2, r0
 8012e0a:	fa23 f30c 	lsr.w	r3, r3, ip
 8012e0e:	4303      	orrs	r3, r0
 8012e10:	461c      	mov	r4, r3
 8012e12:	ec45 4b10 	vmov	d0, r4, r5
 8012e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e1a:	45b8      	cmp	r8, r7
 8012e1c:	bf3a      	itte	cc
 8012e1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e22:	f1a6 0708 	subcc.w	r7, r6, #8
 8012e26:	2300      	movcs	r3, #0
 8012e28:	380b      	subs	r0, #11
 8012e2a:	d012      	beq.n	8012e52 <__b2d+0x8a>
 8012e2c:	f1c0 0120 	rsb	r1, r0, #32
 8012e30:	fa23 f401 	lsr.w	r4, r3, r1
 8012e34:	4082      	lsls	r2, r0
 8012e36:	4322      	orrs	r2, r4
 8012e38:	4547      	cmp	r7, r8
 8012e3a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012e3e:	bf8c      	ite	hi
 8012e40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012e44:	2200      	movls	r2, #0
 8012e46:	4083      	lsls	r3, r0
 8012e48:	40ca      	lsrs	r2, r1
 8012e4a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012e4e:	4313      	orrs	r3, r2
 8012e50:	e7de      	b.n	8012e10 <__b2d+0x48>
 8012e52:	ea42 0501 	orr.w	r5, r2, r1
 8012e56:	e7db      	b.n	8012e10 <__b2d+0x48>
 8012e58:	3ff00000 	.word	0x3ff00000

08012e5c <__d2b>:
 8012e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e60:	460f      	mov	r7, r1
 8012e62:	2101      	movs	r1, #1
 8012e64:	ec59 8b10 	vmov	r8, r9, d0
 8012e68:	4616      	mov	r6, r2
 8012e6a:	f7ff fc13 	bl	8012694 <_Balloc>
 8012e6e:	4604      	mov	r4, r0
 8012e70:	b930      	cbnz	r0, 8012e80 <__d2b+0x24>
 8012e72:	4602      	mov	r2, r0
 8012e74:	4b23      	ldr	r3, [pc, #140]	@ (8012f04 <__d2b+0xa8>)
 8012e76:	4824      	ldr	r0, [pc, #144]	@ (8012f08 <__d2b+0xac>)
 8012e78:	f240 310f 	movw	r1, #783	@ 0x30f
 8012e7c:	f7fe fa0a 	bl	8011294 <__assert_func>
 8012e80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012e84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e88:	b10d      	cbz	r5, 8012e8e <__d2b+0x32>
 8012e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012e8e:	9301      	str	r3, [sp, #4]
 8012e90:	f1b8 0300 	subs.w	r3, r8, #0
 8012e94:	d023      	beq.n	8012ede <__d2b+0x82>
 8012e96:	4668      	mov	r0, sp
 8012e98:	9300      	str	r3, [sp, #0]
 8012e9a:	f7ff fd0c 	bl	80128b6 <__lo0bits>
 8012e9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012ea2:	b1d0      	cbz	r0, 8012eda <__d2b+0x7e>
 8012ea4:	f1c0 0320 	rsb	r3, r0, #32
 8012ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8012eac:	430b      	orrs	r3, r1
 8012eae:	40c2      	lsrs	r2, r0
 8012eb0:	6163      	str	r3, [r4, #20]
 8012eb2:	9201      	str	r2, [sp, #4]
 8012eb4:	9b01      	ldr	r3, [sp, #4]
 8012eb6:	61a3      	str	r3, [r4, #24]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	bf0c      	ite	eq
 8012ebc:	2201      	moveq	r2, #1
 8012ebe:	2202      	movne	r2, #2
 8012ec0:	6122      	str	r2, [r4, #16]
 8012ec2:	b1a5      	cbz	r5, 8012eee <__d2b+0x92>
 8012ec4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012ec8:	4405      	add	r5, r0
 8012eca:	603d      	str	r5, [r7, #0]
 8012ecc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012ed0:	6030      	str	r0, [r6, #0]
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	b003      	add	sp, #12
 8012ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eda:	6161      	str	r1, [r4, #20]
 8012edc:	e7ea      	b.n	8012eb4 <__d2b+0x58>
 8012ede:	a801      	add	r0, sp, #4
 8012ee0:	f7ff fce9 	bl	80128b6 <__lo0bits>
 8012ee4:	9b01      	ldr	r3, [sp, #4]
 8012ee6:	6163      	str	r3, [r4, #20]
 8012ee8:	3020      	adds	r0, #32
 8012eea:	2201      	movs	r2, #1
 8012eec:	e7e8      	b.n	8012ec0 <__d2b+0x64>
 8012eee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012ef2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012ef6:	6038      	str	r0, [r7, #0]
 8012ef8:	6918      	ldr	r0, [r3, #16]
 8012efa:	f7ff fcbd 	bl	8012878 <__hi0bits>
 8012efe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f02:	e7e5      	b.n	8012ed0 <__d2b+0x74>
 8012f04:	08013ea4 	.word	0x08013ea4
 8012f08:	08013f15 	.word	0x08013f15

08012f0c <__ratio>:
 8012f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f10:	b085      	sub	sp, #20
 8012f12:	e9cd 1000 	strd	r1, r0, [sp]
 8012f16:	a902      	add	r1, sp, #8
 8012f18:	f7ff ff56 	bl	8012dc8 <__b2d>
 8012f1c:	9800      	ldr	r0, [sp, #0]
 8012f1e:	a903      	add	r1, sp, #12
 8012f20:	ec55 4b10 	vmov	r4, r5, d0
 8012f24:	f7ff ff50 	bl	8012dc8 <__b2d>
 8012f28:	9b01      	ldr	r3, [sp, #4]
 8012f2a:	6919      	ldr	r1, [r3, #16]
 8012f2c:	9b00      	ldr	r3, [sp, #0]
 8012f2e:	691b      	ldr	r3, [r3, #16]
 8012f30:	1ac9      	subs	r1, r1, r3
 8012f32:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012f36:	1a9b      	subs	r3, r3, r2
 8012f38:	ec5b ab10 	vmov	sl, fp, d0
 8012f3c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	bfce      	itee	gt
 8012f44:	462a      	movgt	r2, r5
 8012f46:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012f4a:	465a      	movle	r2, fp
 8012f4c:	462f      	mov	r7, r5
 8012f4e:	46d9      	mov	r9, fp
 8012f50:	bfcc      	ite	gt
 8012f52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012f56:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012f5a:	464b      	mov	r3, r9
 8012f5c:	4652      	mov	r2, sl
 8012f5e:	4620      	mov	r0, r4
 8012f60:	4639      	mov	r1, r7
 8012f62:	f7ed fc9b 	bl	800089c <__aeabi_ddiv>
 8012f66:	ec41 0b10 	vmov	d0, r0, r1
 8012f6a:	b005      	add	sp, #20
 8012f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f70 <__copybits>:
 8012f70:	3901      	subs	r1, #1
 8012f72:	b570      	push	{r4, r5, r6, lr}
 8012f74:	1149      	asrs	r1, r1, #5
 8012f76:	6914      	ldr	r4, [r2, #16]
 8012f78:	3101      	adds	r1, #1
 8012f7a:	f102 0314 	add.w	r3, r2, #20
 8012f7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012f82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012f86:	1f05      	subs	r5, r0, #4
 8012f88:	42a3      	cmp	r3, r4
 8012f8a:	d30c      	bcc.n	8012fa6 <__copybits+0x36>
 8012f8c:	1aa3      	subs	r3, r4, r2
 8012f8e:	3b11      	subs	r3, #17
 8012f90:	f023 0303 	bic.w	r3, r3, #3
 8012f94:	3211      	adds	r2, #17
 8012f96:	42a2      	cmp	r2, r4
 8012f98:	bf88      	it	hi
 8012f9a:	2300      	movhi	r3, #0
 8012f9c:	4418      	add	r0, r3
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	4288      	cmp	r0, r1
 8012fa2:	d305      	bcc.n	8012fb0 <__copybits+0x40>
 8012fa4:	bd70      	pop	{r4, r5, r6, pc}
 8012fa6:	f853 6b04 	ldr.w	r6, [r3], #4
 8012faa:	f845 6f04 	str.w	r6, [r5, #4]!
 8012fae:	e7eb      	b.n	8012f88 <__copybits+0x18>
 8012fb0:	f840 3b04 	str.w	r3, [r0], #4
 8012fb4:	e7f4      	b.n	8012fa0 <__copybits+0x30>

08012fb6 <__any_on>:
 8012fb6:	f100 0214 	add.w	r2, r0, #20
 8012fba:	6900      	ldr	r0, [r0, #16]
 8012fbc:	114b      	asrs	r3, r1, #5
 8012fbe:	4298      	cmp	r0, r3
 8012fc0:	b510      	push	{r4, lr}
 8012fc2:	db11      	blt.n	8012fe8 <__any_on+0x32>
 8012fc4:	dd0a      	ble.n	8012fdc <__any_on+0x26>
 8012fc6:	f011 011f 	ands.w	r1, r1, #31
 8012fca:	d007      	beq.n	8012fdc <__any_on+0x26>
 8012fcc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012fd0:	fa24 f001 	lsr.w	r0, r4, r1
 8012fd4:	fa00 f101 	lsl.w	r1, r0, r1
 8012fd8:	428c      	cmp	r4, r1
 8012fda:	d10b      	bne.n	8012ff4 <__any_on+0x3e>
 8012fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012fe0:	4293      	cmp	r3, r2
 8012fe2:	d803      	bhi.n	8012fec <__any_on+0x36>
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	bd10      	pop	{r4, pc}
 8012fe8:	4603      	mov	r3, r0
 8012fea:	e7f7      	b.n	8012fdc <__any_on+0x26>
 8012fec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012ff0:	2900      	cmp	r1, #0
 8012ff2:	d0f5      	beq.n	8012fe0 <__any_on+0x2a>
 8012ff4:	2001      	movs	r0, #1
 8012ff6:	e7f6      	b.n	8012fe6 <__any_on+0x30>

08012ff8 <__ascii_wctomb>:
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	4608      	mov	r0, r1
 8012ffc:	b141      	cbz	r1, 8013010 <__ascii_wctomb+0x18>
 8012ffe:	2aff      	cmp	r2, #255	@ 0xff
 8013000:	d904      	bls.n	801300c <__ascii_wctomb+0x14>
 8013002:	228a      	movs	r2, #138	@ 0x8a
 8013004:	601a      	str	r2, [r3, #0]
 8013006:	f04f 30ff 	mov.w	r0, #4294967295
 801300a:	4770      	bx	lr
 801300c:	700a      	strb	r2, [r1, #0]
 801300e:	2001      	movs	r0, #1
 8013010:	4770      	bx	lr

08013012 <__ssputs_r>:
 8013012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013016:	688e      	ldr	r6, [r1, #8]
 8013018:	461f      	mov	r7, r3
 801301a:	42be      	cmp	r6, r7
 801301c:	680b      	ldr	r3, [r1, #0]
 801301e:	4682      	mov	sl, r0
 8013020:	460c      	mov	r4, r1
 8013022:	4690      	mov	r8, r2
 8013024:	d82d      	bhi.n	8013082 <__ssputs_r+0x70>
 8013026:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801302a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801302e:	d026      	beq.n	801307e <__ssputs_r+0x6c>
 8013030:	6965      	ldr	r5, [r4, #20]
 8013032:	6909      	ldr	r1, [r1, #16]
 8013034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013038:	eba3 0901 	sub.w	r9, r3, r1
 801303c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013040:	1c7b      	adds	r3, r7, #1
 8013042:	444b      	add	r3, r9
 8013044:	106d      	asrs	r5, r5, #1
 8013046:	429d      	cmp	r5, r3
 8013048:	bf38      	it	cc
 801304a:	461d      	movcc	r5, r3
 801304c:	0553      	lsls	r3, r2, #21
 801304e:	d527      	bpl.n	80130a0 <__ssputs_r+0x8e>
 8013050:	4629      	mov	r1, r5
 8013052:	f7fb ff9f 	bl	800ef94 <_malloc_r>
 8013056:	4606      	mov	r6, r0
 8013058:	b360      	cbz	r0, 80130b4 <__ssputs_r+0xa2>
 801305a:	6921      	ldr	r1, [r4, #16]
 801305c:	464a      	mov	r2, r9
 801305e:	f7fe f8fa 	bl	8011256 <memcpy>
 8013062:	89a3      	ldrh	r3, [r4, #12]
 8013064:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801306c:	81a3      	strh	r3, [r4, #12]
 801306e:	6126      	str	r6, [r4, #16]
 8013070:	6165      	str	r5, [r4, #20]
 8013072:	444e      	add	r6, r9
 8013074:	eba5 0509 	sub.w	r5, r5, r9
 8013078:	6026      	str	r6, [r4, #0]
 801307a:	60a5      	str	r5, [r4, #8]
 801307c:	463e      	mov	r6, r7
 801307e:	42be      	cmp	r6, r7
 8013080:	d900      	bls.n	8013084 <__ssputs_r+0x72>
 8013082:	463e      	mov	r6, r7
 8013084:	6820      	ldr	r0, [r4, #0]
 8013086:	4632      	mov	r2, r6
 8013088:	4641      	mov	r1, r8
 801308a:	f000 fa39 	bl	8013500 <memmove>
 801308e:	68a3      	ldr	r3, [r4, #8]
 8013090:	1b9b      	subs	r3, r3, r6
 8013092:	60a3      	str	r3, [r4, #8]
 8013094:	6823      	ldr	r3, [r4, #0]
 8013096:	4433      	add	r3, r6
 8013098:	6023      	str	r3, [r4, #0]
 801309a:	2000      	movs	r0, #0
 801309c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130a0:	462a      	mov	r2, r5
 80130a2:	f000 fa84 	bl	80135ae <_realloc_r>
 80130a6:	4606      	mov	r6, r0
 80130a8:	2800      	cmp	r0, #0
 80130aa:	d1e0      	bne.n	801306e <__ssputs_r+0x5c>
 80130ac:	6921      	ldr	r1, [r4, #16]
 80130ae:	4650      	mov	r0, sl
 80130b0:	f7fe ff5a 	bl	8011f68 <_free_r>
 80130b4:	230c      	movs	r3, #12
 80130b6:	f8ca 3000 	str.w	r3, [sl]
 80130ba:	89a3      	ldrh	r3, [r4, #12]
 80130bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80130c0:	81a3      	strh	r3, [r4, #12]
 80130c2:	f04f 30ff 	mov.w	r0, #4294967295
 80130c6:	e7e9      	b.n	801309c <__ssputs_r+0x8a>

080130c8 <_svfiprintf_r>:
 80130c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130cc:	4698      	mov	r8, r3
 80130ce:	898b      	ldrh	r3, [r1, #12]
 80130d0:	061b      	lsls	r3, r3, #24
 80130d2:	b09d      	sub	sp, #116	@ 0x74
 80130d4:	4607      	mov	r7, r0
 80130d6:	460d      	mov	r5, r1
 80130d8:	4614      	mov	r4, r2
 80130da:	d510      	bpl.n	80130fe <_svfiprintf_r+0x36>
 80130dc:	690b      	ldr	r3, [r1, #16]
 80130de:	b973      	cbnz	r3, 80130fe <_svfiprintf_r+0x36>
 80130e0:	2140      	movs	r1, #64	@ 0x40
 80130e2:	f7fb ff57 	bl	800ef94 <_malloc_r>
 80130e6:	6028      	str	r0, [r5, #0]
 80130e8:	6128      	str	r0, [r5, #16]
 80130ea:	b930      	cbnz	r0, 80130fa <_svfiprintf_r+0x32>
 80130ec:	230c      	movs	r3, #12
 80130ee:	603b      	str	r3, [r7, #0]
 80130f0:	f04f 30ff 	mov.w	r0, #4294967295
 80130f4:	b01d      	add	sp, #116	@ 0x74
 80130f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fa:	2340      	movs	r3, #64	@ 0x40
 80130fc:	616b      	str	r3, [r5, #20]
 80130fe:	2300      	movs	r3, #0
 8013100:	9309      	str	r3, [sp, #36]	@ 0x24
 8013102:	2320      	movs	r3, #32
 8013104:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013108:	f8cd 800c 	str.w	r8, [sp, #12]
 801310c:	2330      	movs	r3, #48	@ 0x30
 801310e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80132ac <_svfiprintf_r+0x1e4>
 8013112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013116:	f04f 0901 	mov.w	r9, #1
 801311a:	4623      	mov	r3, r4
 801311c:	469a      	mov	sl, r3
 801311e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013122:	b10a      	cbz	r2, 8013128 <_svfiprintf_r+0x60>
 8013124:	2a25      	cmp	r2, #37	@ 0x25
 8013126:	d1f9      	bne.n	801311c <_svfiprintf_r+0x54>
 8013128:	ebba 0b04 	subs.w	fp, sl, r4
 801312c:	d00b      	beq.n	8013146 <_svfiprintf_r+0x7e>
 801312e:	465b      	mov	r3, fp
 8013130:	4622      	mov	r2, r4
 8013132:	4629      	mov	r1, r5
 8013134:	4638      	mov	r0, r7
 8013136:	f7ff ff6c 	bl	8013012 <__ssputs_r>
 801313a:	3001      	adds	r0, #1
 801313c:	f000 80a7 	beq.w	801328e <_svfiprintf_r+0x1c6>
 8013140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013142:	445a      	add	r2, fp
 8013144:	9209      	str	r2, [sp, #36]	@ 0x24
 8013146:	f89a 3000 	ldrb.w	r3, [sl]
 801314a:	2b00      	cmp	r3, #0
 801314c:	f000 809f 	beq.w	801328e <_svfiprintf_r+0x1c6>
 8013150:	2300      	movs	r3, #0
 8013152:	f04f 32ff 	mov.w	r2, #4294967295
 8013156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801315a:	f10a 0a01 	add.w	sl, sl, #1
 801315e:	9304      	str	r3, [sp, #16]
 8013160:	9307      	str	r3, [sp, #28]
 8013162:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013166:	931a      	str	r3, [sp, #104]	@ 0x68
 8013168:	4654      	mov	r4, sl
 801316a:	2205      	movs	r2, #5
 801316c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013170:	484e      	ldr	r0, [pc, #312]	@ (80132ac <_svfiprintf_r+0x1e4>)
 8013172:	f7ed f855 	bl	8000220 <memchr>
 8013176:	9a04      	ldr	r2, [sp, #16]
 8013178:	b9d8      	cbnz	r0, 80131b2 <_svfiprintf_r+0xea>
 801317a:	06d0      	lsls	r0, r2, #27
 801317c:	bf44      	itt	mi
 801317e:	2320      	movmi	r3, #32
 8013180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013184:	0711      	lsls	r1, r2, #28
 8013186:	bf44      	itt	mi
 8013188:	232b      	movmi	r3, #43	@ 0x2b
 801318a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801318e:	f89a 3000 	ldrb.w	r3, [sl]
 8013192:	2b2a      	cmp	r3, #42	@ 0x2a
 8013194:	d015      	beq.n	80131c2 <_svfiprintf_r+0xfa>
 8013196:	9a07      	ldr	r2, [sp, #28]
 8013198:	4654      	mov	r4, sl
 801319a:	2000      	movs	r0, #0
 801319c:	f04f 0c0a 	mov.w	ip, #10
 80131a0:	4621      	mov	r1, r4
 80131a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131a6:	3b30      	subs	r3, #48	@ 0x30
 80131a8:	2b09      	cmp	r3, #9
 80131aa:	d94b      	bls.n	8013244 <_svfiprintf_r+0x17c>
 80131ac:	b1b0      	cbz	r0, 80131dc <_svfiprintf_r+0x114>
 80131ae:	9207      	str	r2, [sp, #28]
 80131b0:	e014      	b.n	80131dc <_svfiprintf_r+0x114>
 80131b2:	eba0 0308 	sub.w	r3, r0, r8
 80131b6:	fa09 f303 	lsl.w	r3, r9, r3
 80131ba:	4313      	orrs	r3, r2
 80131bc:	9304      	str	r3, [sp, #16]
 80131be:	46a2      	mov	sl, r4
 80131c0:	e7d2      	b.n	8013168 <_svfiprintf_r+0xa0>
 80131c2:	9b03      	ldr	r3, [sp, #12]
 80131c4:	1d19      	adds	r1, r3, #4
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	9103      	str	r1, [sp, #12]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	bfbb      	ittet	lt
 80131ce:	425b      	neglt	r3, r3
 80131d0:	f042 0202 	orrlt.w	r2, r2, #2
 80131d4:	9307      	strge	r3, [sp, #28]
 80131d6:	9307      	strlt	r3, [sp, #28]
 80131d8:	bfb8      	it	lt
 80131da:	9204      	strlt	r2, [sp, #16]
 80131dc:	7823      	ldrb	r3, [r4, #0]
 80131de:	2b2e      	cmp	r3, #46	@ 0x2e
 80131e0:	d10a      	bne.n	80131f8 <_svfiprintf_r+0x130>
 80131e2:	7863      	ldrb	r3, [r4, #1]
 80131e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80131e6:	d132      	bne.n	801324e <_svfiprintf_r+0x186>
 80131e8:	9b03      	ldr	r3, [sp, #12]
 80131ea:	1d1a      	adds	r2, r3, #4
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	9203      	str	r2, [sp, #12]
 80131f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80131f4:	3402      	adds	r4, #2
 80131f6:	9305      	str	r3, [sp, #20]
 80131f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80132bc <_svfiprintf_r+0x1f4>
 80131fc:	7821      	ldrb	r1, [r4, #0]
 80131fe:	2203      	movs	r2, #3
 8013200:	4650      	mov	r0, sl
 8013202:	f7ed f80d 	bl	8000220 <memchr>
 8013206:	b138      	cbz	r0, 8013218 <_svfiprintf_r+0x150>
 8013208:	9b04      	ldr	r3, [sp, #16]
 801320a:	eba0 000a 	sub.w	r0, r0, sl
 801320e:	2240      	movs	r2, #64	@ 0x40
 8013210:	4082      	lsls	r2, r0
 8013212:	4313      	orrs	r3, r2
 8013214:	3401      	adds	r4, #1
 8013216:	9304      	str	r3, [sp, #16]
 8013218:	f814 1b01 	ldrb.w	r1, [r4], #1
 801321c:	4824      	ldr	r0, [pc, #144]	@ (80132b0 <_svfiprintf_r+0x1e8>)
 801321e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013222:	2206      	movs	r2, #6
 8013224:	f7ec fffc 	bl	8000220 <memchr>
 8013228:	2800      	cmp	r0, #0
 801322a:	d036      	beq.n	801329a <_svfiprintf_r+0x1d2>
 801322c:	4b21      	ldr	r3, [pc, #132]	@ (80132b4 <_svfiprintf_r+0x1ec>)
 801322e:	bb1b      	cbnz	r3, 8013278 <_svfiprintf_r+0x1b0>
 8013230:	9b03      	ldr	r3, [sp, #12]
 8013232:	3307      	adds	r3, #7
 8013234:	f023 0307 	bic.w	r3, r3, #7
 8013238:	3308      	adds	r3, #8
 801323a:	9303      	str	r3, [sp, #12]
 801323c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801323e:	4433      	add	r3, r6
 8013240:	9309      	str	r3, [sp, #36]	@ 0x24
 8013242:	e76a      	b.n	801311a <_svfiprintf_r+0x52>
 8013244:	fb0c 3202 	mla	r2, ip, r2, r3
 8013248:	460c      	mov	r4, r1
 801324a:	2001      	movs	r0, #1
 801324c:	e7a8      	b.n	80131a0 <_svfiprintf_r+0xd8>
 801324e:	2300      	movs	r3, #0
 8013250:	3401      	adds	r4, #1
 8013252:	9305      	str	r3, [sp, #20]
 8013254:	4619      	mov	r1, r3
 8013256:	f04f 0c0a 	mov.w	ip, #10
 801325a:	4620      	mov	r0, r4
 801325c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013260:	3a30      	subs	r2, #48	@ 0x30
 8013262:	2a09      	cmp	r2, #9
 8013264:	d903      	bls.n	801326e <_svfiprintf_r+0x1a6>
 8013266:	2b00      	cmp	r3, #0
 8013268:	d0c6      	beq.n	80131f8 <_svfiprintf_r+0x130>
 801326a:	9105      	str	r1, [sp, #20]
 801326c:	e7c4      	b.n	80131f8 <_svfiprintf_r+0x130>
 801326e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013272:	4604      	mov	r4, r0
 8013274:	2301      	movs	r3, #1
 8013276:	e7f0      	b.n	801325a <_svfiprintf_r+0x192>
 8013278:	ab03      	add	r3, sp, #12
 801327a:	9300      	str	r3, [sp, #0]
 801327c:	462a      	mov	r2, r5
 801327e:	4b0e      	ldr	r3, [pc, #56]	@ (80132b8 <_svfiprintf_r+0x1f0>)
 8013280:	a904      	add	r1, sp, #16
 8013282:	4638      	mov	r0, r7
 8013284:	f7fc fea4 	bl	800ffd0 <_printf_float>
 8013288:	1c42      	adds	r2, r0, #1
 801328a:	4606      	mov	r6, r0
 801328c:	d1d6      	bne.n	801323c <_svfiprintf_r+0x174>
 801328e:	89ab      	ldrh	r3, [r5, #12]
 8013290:	065b      	lsls	r3, r3, #25
 8013292:	f53f af2d 	bmi.w	80130f0 <_svfiprintf_r+0x28>
 8013296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013298:	e72c      	b.n	80130f4 <_svfiprintf_r+0x2c>
 801329a:	ab03      	add	r3, sp, #12
 801329c:	9300      	str	r3, [sp, #0]
 801329e:	462a      	mov	r2, r5
 80132a0:	4b05      	ldr	r3, [pc, #20]	@ (80132b8 <_svfiprintf_r+0x1f0>)
 80132a2:	a904      	add	r1, sp, #16
 80132a4:	4638      	mov	r0, r7
 80132a6:	f7fd f92b 	bl	8010500 <_printf_i>
 80132aa:	e7ed      	b.n	8013288 <_svfiprintf_r+0x1c0>
 80132ac:	08014070 	.word	0x08014070
 80132b0:	0801407a 	.word	0x0801407a
 80132b4:	0800ffd1 	.word	0x0800ffd1
 80132b8:	08013013 	.word	0x08013013
 80132bc:	08014076 	.word	0x08014076

080132c0 <__sflush_r>:
 80132c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80132c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132c8:	0716      	lsls	r6, r2, #28
 80132ca:	4605      	mov	r5, r0
 80132cc:	460c      	mov	r4, r1
 80132ce:	d454      	bmi.n	801337a <__sflush_r+0xba>
 80132d0:	684b      	ldr	r3, [r1, #4]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	dc02      	bgt.n	80132dc <__sflush_r+0x1c>
 80132d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80132d8:	2b00      	cmp	r3, #0
 80132da:	dd48      	ble.n	801336e <__sflush_r+0xae>
 80132dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80132de:	2e00      	cmp	r6, #0
 80132e0:	d045      	beq.n	801336e <__sflush_r+0xae>
 80132e2:	2300      	movs	r3, #0
 80132e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80132e8:	682f      	ldr	r7, [r5, #0]
 80132ea:	6a21      	ldr	r1, [r4, #32]
 80132ec:	602b      	str	r3, [r5, #0]
 80132ee:	d030      	beq.n	8013352 <__sflush_r+0x92>
 80132f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80132f2:	89a3      	ldrh	r3, [r4, #12]
 80132f4:	0759      	lsls	r1, r3, #29
 80132f6:	d505      	bpl.n	8013304 <__sflush_r+0x44>
 80132f8:	6863      	ldr	r3, [r4, #4]
 80132fa:	1ad2      	subs	r2, r2, r3
 80132fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80132fe:	b10b      	cbz	r3, 8013304 <__sflush_r+0x44>
 8013300:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013302:	1ad2      	subs	r2, r2, r3
 8013304:	2300      	movs	r3, #0
 8013306:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013308:	6a21      	ldr	r1, [r4, #32]
 801330a:	4628      	mov	r0, r5
 801330c:	47b0      	blx	r6
 801330e:	1c43      	adds	r3, r0, #1
 8013310:	89a3      	ldrh	r3, [r4, #12]
 8013312:	d106      	bne.n	8013322 <__sflush_r+0x62>
 8013314:	6829      	ldr	r1, [r5, #0]
 8013316:	291d      	cmp	r1, #29
 8013318:	d82b      	bhi.n	8013372 <__sflush_r+0xb2>
 801331a:	4a2a      	ldr	r2, [pc, #168]	@ (80133c4 <__sflush_r+0x104>)
 801331c:	410a      	asrs	r2, r1
 801331e:	07d6      	lsls	r6, r2, #31
 8013320:	d427      	bmi.n	8013372 <__sflush_r+0xb2>
 8013322:	2200      	movs	r2, #0
 8013324:	6062      	str	r2, [r4, #4]
 8013326:	04d9      	lsls	r1, r3, #19
 8013328:	6922      	ldr	r2, [r4, #16]
 801332a:	6022      	str	r2, [r4, #0]
 801332c:	d504      	bpl.n	8013338 <__sflush_r+0x78>
 801332e:	1c42      	adds	r2, r0, #1
 8013330:	d101      	bne.n	8013336 <__sflush_r+0x76>
 8013332:	682b      	ldr	r3, [r5, #0]
 8013334:	b903      	cbnz	r3, 8013338 <__sflush_r+0x78>
 8013336:	6560      	str	r0, [r4, #84]	@ 0x54
 8013338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801333a:	602f      	str	r7, [r5, #0]
 801333c:	b1b9      	cbz	r1, 801336e <__sflush_r+0xae>
 801333e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013342:	4299      	cmp	r1, r3
 8013344:	d002      	beq.n	801334c <__sflush_r+0x8c>
 8013346:	4628      	mov	r0, r5
 8013348:	f7fe fe0e 	bl	8011f68 <_free_r>
 801334c:	2300      	movs	r3, #0
 801334e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013350:	e00d      	b.n	801336e <__sflush_r+0xae>
 8013352:	2301      	movs	r3, #1
 8013354:	4628      	mov	r0, r5
 8013356:	47b0      	blx	r6
 8013358:	4602      	mov	r2, r0
 801335a:	1c50      	adds	r0, r2, #1
 801335c:	d1c9      	bne.n	80132f2 <__sflush_r+0x32>
 801335e:	682b      	ldr	r3, [r5, #0]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d0c6      	beq.n	80132f2 <__sflush_r+0x32>
 8013364:	2b1d      	cmp	r3, #29
 8013366:	d001      	beq.n	801336c <__sflush_r+0xac>
 8013368:	2b16      	cmp	r3, #22
 801336a:	d11e      	bne.n	80133aa <__sflush_r+0xea>
 801336c:	602f      	str	r7, [r5, #0]
 801336e:	2000      	movs	r0, #0
 8013370:	e022      	b.n	80133b8 <__sflush_r+0xf8>
 8013372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013376:	b21b      	sxth	r3, r3
 8013378:	e01b      	b.n	80133b2 <__sflush_r+0xf2>
 801337a:	690f      	ldr	r7, [r1, #16]
 801337c:	2f00      	cmp	r7, #0
 801337e:	d0f6      	beq.n	801336e <__sflush_r+0xae>
 8013380:	0793      	lsls	r3, r2, #30
 8013382:	680e      	ldr	r6, [r1, #0]
 8013384:	bf08      	it	eq
 8013386:	694b      	ldreq	r3, [r1, #20]
 8013388:	600f      	str	r7, [r1, #0]
 801338a:	bf18      	it	ne
 801338c:	2300      	movne	r3, #0
 801338e:	eba6 0807 	sub.w	r8, r6, r7
 8013392:	608b      	str	r3, [r1, #8]
 8013394:	f1b8 0f00 	cmp.w	r8, #0
 8013398:	dde9      	ble.n	801336e <__sflush_r+0xae>
 801339a:	6a21      	ldr	r1, [r4, #32]
 801339c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801339e:	4643      	mov	r3, r8
 80133a0:	463a      	mov	r2, r7
 80133a2:	4628      	mov	r0, r5
 80133a4:	47b0      	blx	r6
 80133a6:	2800      	cmp	r0, #0
 80133a8:	dc08      	bgt.n	80133bc <__sflush_r+0xfc>
 80133aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80133b2:	81a3      	strh	r3, [r4, #12]
 80133b4:	f04f 30ff 	mov.w	r0, #4294967295
 80133b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133bc:	4407      	add	r7, r0
 80133be:	eba8 0800 	sub.w	r8, r8, r0
 80133c2:	e7e7      	b.n	8013394 <__sflush_r+0xd4>
 80133c4:	dfbffffe 	.word	0xdfbffffe

080133c8 <_fflush_r>:
 80133c8:	b538      	push	{r3, r4, r5, lr}
 80133ca:	690b      	ldr	r3, [r1, #16]
 80133cc:	4605      	mov	r5, r0
 80133ce:	460c      	mov	r4, r1
 80133d0:	b913      	cbnz	r3, 80133d8 <_fflush_r+0x10>
 80133d2:	2500      	movs	r5, #0
 80133d4:	4628      	mov	r0, r5
 80133d6:	bd38      	pop	{r3, r4, r5, pc}
 80133d8:	b118      	cbz	r0, 80133e2 <_fflush_r+0x1a>
 80133da:	6a03      	ldr	r3, [r0, #32]
 80133dc:	b90b      	cbnz	r3, 80133e2 <_fflush_r+0x1a>
 80133de:	f7fd fc4f 	bl	8010c80 <__sinit>
 80133e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d0f3      	beq.n	80133d2 <_fflush_r+0xa>
 80133ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80133ec:	07d0      	lsls	r0, r2, #31
 80133ee:	d404      	bmi.n	80133fa <_fflush_r+0x32>
 80133f0:	0599      	lsls	r1, r3, #22
 80133f2:	d402      	bmi.n	80133fa <_fflush_r+0x32>
 80133f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80133f6:	f7fd ff24 	bl	8011242 <__retarget_lock_acquire_recursive>
 80133fa:	4628      	mov	r0, r5
 80133fc:	4621      	mov	r1, r4
 80133fe:	f7ff ff5f 	bl	80132c0 <__sflush_r>
 8013402:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013404:	07da      	lsls	r2, r3, #31
 8013406:	4605      	mov	r5, r0
 8013408:	d4e4      	bmi.n	80133d4 <_fflush_r+0xc>
 801340a:	89a3      	ldrh	r3, [r4, #12]
 801340c:	059b      	lsls	r3, r3, #22
 801340e:	d4e1      	bmi.n	80133d4 <_fflush_r+0xc>
 8013410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013412:	f7fd ff17 	bl	8011244 <__retarget_lock_release_recursive>
 8013416:	e7dd      	b.n	80133d4 <_fflush_r+0xc>

08013418 <fiprintf>:
 8013418:	b40e      	push	{r1, r2, r3}
 801341a:	b503      	push	{r0, r1, lr}
 801341c:	4601      	mov	r1, r0
 801341e:	ab03      	add	r3, sp, #12
 8013420:	4805      	ldr	r0, [pc, #20]	@ (8013438 <fiprintf+0x20>)
 8013422:	f853 2b04 	ldr.w	r2, [r3], #4
 8013426:	6800      	ldr	r0, [r0, #0]
 8013428:	9301      	str	r3, [sp, #4]
 801342a:	f000 f917 	bl	801365c <_vfiprintf_r>
 801342e:	b002      	add	sp, #8
 8013430:	f85d eb04 	ldr.w	lr, [sp], #4
 8013434:	b003      	add	sp, #12
 8013436:	4770      	bx	lr
 8013438:	200001a4 	.word	0x200001a4

0801343c <__swhatbuf_r>:
 801343c:	b570      	push	{r4, r5, r6, lr}
 801343e:	460c      	mov	r4, r1
 8013440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013444:	2900      	cmp	r1, #0
 8013446:	b096      	sub	sp, #88	@ 0x58
 8013448:	4615      	mov	r5, r2
 801344a:	461e      	mov	r6, r3
 801344c:	da0d      	bge.n	801346a <__swhatbuf_r+0x2e>
 801344e:	89a3      	ldrh	r3, [r4, #12]
 8013450:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013454:	f04f 0100 	mov.w	r1, #0
 8013458:	bf14      	ite	ne
 801345a:	2340      	movne	r3, #64	@ 0x40
 801345c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013460:	2000      	movs	r0, #0
 8013462:	6031      	str	r1, [r6, #0]
 8013464:	602b      	str	r3, [r5, #0]
 8013466:	b016      	add	sp, #88	@ 0x58
 8013468:	bd70      	pop	{r4, r5, r6, pc}
 801346a:	466a      	mov	r2, sp
 801346c:	f000 f862 	bl	8013534 <_fstat_r>
 8013470:	2800      	cmp	r0, #0
 8013472:	dbec      	blt.n	801344e <__swhatbuf_r+0x12>
 8013474:	9901      	ldr	r1, [sp, #4]
 8013476:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801347a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801347e:	4259      	negs	r1, r3
 8013480:	4159      	adcs	r1, r3
 8013482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013486:	e7eb      	b.n	8013460 <__swhatbuf_r+0x24>

08013488 <__smakebuf_r>:
 8013488:	898b      	ldrh	r3, [r1, #12]
 801348a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801348c:	079d      	lsls	r5, r3, #30
 801348e:	4606      	mov	r6, r0
 8013490:	460c      	mov	r4, r1
 8013492:	d507      	bpl.n	80134a4 <__smakebuf_r+0x1c>
 8013494:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013498:	6023      	str	r3, [r4, #0]
 801349a:	6123      	str	r3, [r4, #16]
 801349c:	2301      	movs	r3, #1
 801349e:	6163      	str	r3, [r4, #20]
 80134a0:	b003      	add	sp, #12
 80134a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134a4:	ab01      	add	r3, sp, #4
 80134a6:	466a      	mov	r2, sp
 80134a8:	f7ff ffc8 	bl	801343c <__swhatbuf_r>
 80134ac:	9f00      	ldr	r7, [sp, #0]
 80134ae:	4605      	mov	r5, r0
 80134b0:	4639      	mov	r1, r7
 80134b2:	4630      	mov	r0, r6
 80134b4:	f7fb fd6e 	bl	800ef94 <_malloc_r>
 80134b8:	b948      	cbnz	r0, 80134ce <__smakebuf_r+0x46>
 80134ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134be:	059a      	lsls	r2, r3, #22
 80134c0:	d4ee      	bmi.n	80134a0 <__smakebuf_r+0x18>
 80134c2:	f023 0303 	bic.w	r3, r3, #3
 80134c6:	f043 0302 	orr.w	r3, r3, #2
 80134ca:	81a3      	strh	r3, [r4, #12]
 80134cc:	e7e2      	b.n	8013494 <__smakebuf_r+0xc>
 80134ce:	89a3      	ldrh	r3, [r4, #12]
 80134d0:	6020      	str	r0, [r4, #0]
 80134d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134d6:	81a3      	strh	r3, [r4, #12]
 80134d8:	9b01      	ldr	r3, [sp, #4]
 80134da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80134de:	b15b      	cbz	r3, 80134f8 <__smakebuf_r+0x70>
 80134e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134e4:	4630      	mov	r0, r6
 80134e6:	f000 f837 	bl	8013558 <_isatty_r>
 80134ea:	b128      	cbz	r0, 80134f8 <__smakebuf_r+0x70>
 80134ec:	89a3      	ldrh	r3, [r4, #12]
 80134ee:	f023 0303 	bic.w	r3, r3, #3
 80134f2:	f043 0301 	orr.w	r3, r3, #1
 80134f6:	81a3      	strh	r3, [r4, #12]
 80134f8:	89a3      	ldrh	r3, [r4, #12]
 80134fa:	431d      	orrs	r5, r3
 80134fc:	81a5      	strh	r5, [r4, #12]
 80134fe:	e7cf      	b.n	80134a0 <__smakebuf_r+0x18>

08013500 <memmove>:
 8013500:	4288      	cmp	r0, r1
 8013502:	b510      	push	{r4, lr}
 8013504:	eb01 0402 	add.w	r4, r1, r2
 8013508:	d902      	bls.n	8013510 <memmove+0x10>
 801350a:	4284      	cmp	r4, r0
 801350c:	4623      	mov	r3, r4
 801350e:	d807      	bhi.n	8013520 <memmove+0x20>
 8013510:	1e43      	subs	r3, r0, #1
 8013512:	42a1      	cmp	r1, r4
 8013514:	d008      	beq.n	8013528 <memmove+0x28>
 8013516:	f811 2b01 	ldrb.w	r2, [r1], #1
 801351a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801351e:	e7f8      	b.n	8013512 <memmove+0x12>
 8013520:	4402      	add	r2, r0
 8013522:	4601      	mov	r1, r0
 8013524:	428a      	cmp	r2, r1
 8013526:	d100      	bne.n	801352a <memmove+0x2a>
 8013528:	bd10      	pop	{r4, pc}
 801352a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801352e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013532:	e7f7      	b.n	8013524 <memmove+0x24>

08013534 <_fstat_r>:
 8013534:	b538      	push	{r3, r4, r5, lr}
 8013536:	4d07      	ldr	r5, [pc, #28]	@ (8013554 <_fstat_r+0x20>)
 8013538:	2300      	movs	r3, #0
 801353a:	4604      	mov	r4, r0
 801353c:	4608      	mov	r0, r1
 801353e:	4611      	mov	r1, r2
 8013540:	602b      	str	r3, [r5, #0]
 8013542:	f7f0 fbfd 	bl	8003d40 <_fstat>
 8013546:	1c43      	adds	r3, r0, #1
 8013548:	d102      	bne.n	8013550 <_fstat_r+0x1c>
 801354a:	682b      	ldr	r3, [r5, #0]
 801354c:	b103      	cbz	r3, 8013550 <_fstat_r+0x1c>
 801354e:	6023      	str	r3, [r4, #0]
 8013550:	bd38      	pop	{r3, r4, r5, pc}
 8013552:	bf00      	nop
 8013554:	200016cc 	.word	0x200016cc

08013558 <_isatty_r>:
 8013558:	b538      	push	{r3, r4, r5, lr}
 801355a:	4d06      	ldr	r5, [pc, #24]	@ (8013574 <_isatty_r+0x1c>)
 801355c:	2300      	movs	r3, #0
 801355e:	4604      	mov	r4, r0
 8013560:	4608      	mov	r0, r1
 8013562:	602b      	str	r3, [r5, #0]
 8013564:	f7f0 fbfc 	bl	8003d60 <_isatty>
 8013568:	1c43      	adds	r3, r0, #1
 801356a:	d102      	bne.n	8013572 <_isatty_r+0x1a>
 801356c:	682b      	ldr	r3, [r5, #0]
 801356e:	b103      	cbz	r3, 8013572 <_isatty_r+0x1a>
 8013570:	6023      	str	r3, [r4, #0]
 8013572:	bd38      	pop	{r3, r4, r5, pc}
 8013574:	200016cc 	.word	0x200016cc

08013578 <abort>:
 8013578:	b508      	push	{r3, lr}
 801357a:	2006      	movs	r0, #6
 801357c:	f000 f9ae 	bl	80138dc <raise>
 8013580:	2001      	movs	r0, #1
 8013582:	f7f0 fb8d 	bl	8003ca0 <_exit>

08013586 <_calloc_r>:
 8013586:	b570      	push	{r4, r5, r6, lr}
 8013588:	fba1 5402 	umull	r5, r4, r1, r2
 801358c:	b93c      	cbnz	r4, 801359e <_calloc_r+0x18>
 801358e:	4629      	mov	r1, r5
 8013590:	f7fb fd00 	bl	800ef94 <_malloc_r>
 8013594:	4606      	mov	r6, r0
 8013596:	b928      	cbnz	r0, 80135a4 <_calloc_r+0x1e>
 8013598:	2600      	movs	r6, #0
 801359a:	4630      	mov	r0, r6
 801359c:	bd70      	pop	{r4, r5, r6, pc}
 801359e:	220c      	movs	r2, #12
 80135a0:	6002      	str	r2, [r0, #0]
 80135a2:	e7f9      	b.n	8013598 <_calloc_r+0x12>
 80135a4:	462a      	mov	r2, r5
 80135a6:	4621      	mov	r1, r4
 80135a8:	f7fd fd2a 	bl	8011000 <memset>
 80135ac:	e7f5      	b.n	801359a <_calloc_r+0x14>

080135ae <_realloc_r>:
 80135ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135b2:	4680      	mov	r8, r0
 80135b4:	4615      	mov	r5, r2
 80135b6:	460c      	mov	r4, r1
 80135b8:	b921      	cbnz	r1, 80135c4 <_realloc_r+0x16>
 80135ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135be:	4611      	mov	r1, r2
 80135c0:	f7fb bce8 	b.w	800ef94 <_malloc_r>
 80135c4:	b92a      	cbnz	r2, 80135d2 <_realloc_r+0x24>
 80135c6:	f7fe fccf 	bl	8011f68 <_free_r>
 80135ca:	2400      	movs	r4, #0
 80135cc:	4620      	mov	r0, r4
 80135ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135d2:	f000 f99f 	bl	8013914 <_malloc_usable_size_r>
 80135d6:	4285      	cmp	r5, r0
 80135d8:	4606      	mov	r6, r0
 80135da:	d802      	bhi.n	80135e2 <_realloc_r+0x34>
 80135dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80135e0:	d8f4      	bhi.n	80135cc <_realloc_r+0x1e>
 80135e2:	4629      	mov	r1, r5
 80135e4:	4640      	mov	r0, r8
 80135e6:	f7fb fcd5 	bl	800ef94 <_malloc_r>
 80135ea:	4607      	mov	r7, r0
 80135ec:	2800      	cmp	r0, #0
 80135ee:	d0ec      	beq.n	80135ca <_realloc_r+0x1c>
 80135f0:	42b5      	cmp	r5, r6
 80135f2:	462a      	mov	r2, r5
 80135f4:	4621      	mov	r1, r4
 80135f6:	bf28      	it	cs
 80135f8:	4632      	movcs	r2, r6
 80135fa:	f7fd fe2c 	bl	8011256 <memcpy>
 80135fe:	4621      	mov	r1, r4
 8013600:	4640      	mov	r0, r8
 8013602:	f7fe fcb1 	bl	8011f68 <_free_r>
 8013606:	463c      	mov	r4, r7
 8013608:	e7e0      	b.n	80135cc <_realloc_r+0x1e>

0801360a <__sfputc_r>:
 801360a:	6893      	ldr	r3, [r2, #8]
 801360c:	3b01      	subs	r3, #1
 801360e:	2b00      	cmp	r3, #0
 8013610:	b410      	push	{r4}
 8013612:	6093      	str	r3, [r2, #8]
 8013614:	da08      	bge.n	8013628 <__sfputc_r+0x1e>
 8013616:	6994      	ldr	r4, [r2, #24]
 8013618:	42a3      	cmp	r3, r4
 801361a:	db01      	blt.n	8013620 <__sfputc_r+0x16>
 801361c:	290a      	cmp	r1, #10
 801361e:	d103      	bne.n	8013628 <__sfputc_r+0x1e>
 8013620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013624:	f7fd bc57 	b.w	8010ed6 <__swbuf_r>
 8013628:	6813      	ldr	r3, [r2, #0]
 801362a:	1c58      	adds	r0, r3, #1
 801362c:	6010      	str	r0, [r2, #0]
 801362e:	7019      	strb	r1, [r3, #0]
 8013630:	4608      	mov	r0, r1
 8013632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013636:	4770      	bx	lr

08013638 <__sfputs_r>:
 8013638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801363a:	4606      	mov	r6, r0
 801363c:	460f      	mov	r7, r1
 801363e:	4614      	mov	r4, r2
 8013640:	18d5      	adds	r5, r2, r3
 8013642:	42ac      	cmp	r4, r5
 8013644:	d101      	bne.n	801364a <__sfputs_r+0x12>
 8013646:	2000      	movs	r0, #0
 8013648:	e007      	b.n	801365a <__sfputs_r+0x22>
 801364a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801364e:	463a      	mov	r2, r7
 8013650:	4630      	mov	r0, r6
 8013652:	f7ff ffda 	bl	801360a <__sfputc_r>
 8013656:	1c43      	adds	r3, r0, #1
 8013658:	d1f3      	bne.n	8013642 <__sfputs_r+0xa>
 801365a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801365c <_vfiprintf_r>:
 801365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013660:	460d      	mov	r5, r1
 8013662:	b09d      	sub	sp, #116	@ 0x74
 8013664:	4614      	mov	r4, r2
 8013666:	4698      	mov	r8, r3
 8013668:	4606      	mov	r6, r0
 801366a:	b118      	cbz	r0, 8013674 <_vfiprintf_r+0x18>
 801366c:	6a03      	ldr	r3, [r0, #32]
 801366e:	b90b      	cbnz	r3, 8013674 <_vfiprintf_r+0x18>
 8013670:	f7fd fb06 	bl	8010c80 <__sinit>
 8013674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013676:	07d9      	lsls	r1, r3, #31
 8013678:	d405      	bmi.n	8013686 <_vfiprintf_r+0x2a>
 801367a:	89ab      	ldrh	r3, [r5, #12]
 801367c:	059a      	lsls	r2, r3, #22
 801367e:	d402      	bmi.n	8013686 <_vfiprintf_r+0x2a>
 8013680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013682:	f7fd fdde 	bl	8011242 <__retarget_lock_acquire_recursive>
 8013686:	89ab      	ldrh	r3, [r5, #12]
 8013688:	071b      	lsls	r3, r3, #28
 801368a:	d501      	bpl.n	8013690 <_vfiprintf_r+0x34>
 801368c:	692b      	ldr	r3, [r5, #16]
 801368e:	b99b      	cbnz	r3, 80136b8 <_vfiprintf_r+0x5c>
 8013690:	4629      	mov	r1, r5
 8013692:	4630      	mov	r0, r6
 8013694:	f7fd fc5e 	bl	8010f54 <__swsetup_r>
 8013698:	b170      	cbz	r0, 80136b8 <_vfiprintf_r+0x5c>
 801369a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801369c:	07dc      	lsls	r4, r3, #31
 801369e:	d504      	bpl.n	80136aa <_vfiprintf_r+0x4e>
 80136a0:	f04f 30ff 	mov.w	r0, #4294967295
 80136a4:	b01d      	add	sp, #116	@ 0x74
 80136a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136aa:	89ab      	ldrh	r3, [r5, #12]
 80136ac:	0598      	lsls	r0, r3, #22
 80136ae:	d4f7      	bmi.n	80136a0 <_vfiprintf_r+0x44>
 80136b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80136b2:	f7fd fdc7 	bl	8011244 <__retarget_lock_release_recursive>
 80136b6:	e7f3      	b.n	80136a0 <_vfiprintf_r+0x44>
 80136b8:	2300      	movs	r3, #0
 80136ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80136bc:	2320      	movs	r3, #32
 80136be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80136c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80136c6:	2330      	movs	r3, #48	@ 0x30
 80136c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013878 <_vfiprintf_r+0x21c>
 80136cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80136d0:	f04f 0901 	mov.w	r9, #1
 80136d4:	4623      	mov	r3, r4
 80136d6:	469a      	mov	sl, r3
 80136d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136dc:	b10a      	cbz	r2, 80136e2 <_vfiprintf_r+0x86>
 80136de:	2a25      	cmp	r2, #37	@ 0x25
 80136e0:	d1f9      	bne.n	80136d6 <_vfiprintf_r+0x7a>
 80136e2:	ebba 0b04 	subs.w	fp, sl, r4
 80136e6:	d00b      	beq.n	8013700 <_vfiprintf_r+0xa4>
 80136e8:	465b      	mov	r3, fp
 80136ea:	4622      	mov	r2, r4
 80136ec:	4629      	mov	r1, r5
 80136ee:	4630      	mov	r0, r6
 80136f0:	f7ff ffa2 	bl	8013638 <__sfputs_r>
 80136f4:	3001      	adds	r0, #1
 80136f6:	f000 80a7 	beq.w	8013848 <_vfiprintf_r+0x1ec>
 80136fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80136fc:	445a      	add	r2, fp
 80136fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8013700:	f89a 3000 	ldrb.w	r3, [sl]
 8013704:	2b00      	cmp	r3, #0
 8013706:	f000 809f 	beq.w	8013848 <_vfiprintf_r+0x1ec>
 801370a:	2300      	movs	r3, #0
 801370c:	f04f 32ff 	mov.w	r2, #4294967295
 8013710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013714:	f10a 0a01 	add.w	sl, sl, #1
 8013718:	9304      	str	r3, [sp, #16]
 801371a:	9307      	str	r3, [sp, #28]
 801371c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013720:	931a      	str	r3, [sp, #104]	@ 0x68
 8013722:	4654      	mov	r4, sl
 8013724:	2205      	movs	r2, #5
 8013726:	f814 1b01 	ldrb.w	r1, [r4], #1
 801372a:	4853      	ldr	r0, [pc, #332]	@ (8013878 <_vfiprintf_r+0x21c>)
 801372c:	f7ec fd78 	bl	8000220 <memchr>
 8013730:	9a04      	ldr	r2, [sp, #16]
 8013732:	b9d8      	cbnz	r0, 801376c <_vfiprintf_r+0x110>
 8013734:	06d1      	lsls	r1, r2, #27
 8013736:	bf44      	itt	mi
 8013738:	2320      	movmi	r3, #32
 801373a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801373e:	0713      	lsls	r3, r2, #28
 8013740:	bf44      	itt	mi
 8013742:	232b      	movmi	r3, #43	@ 0x2b
 8013744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013748:	f89a 3000 	ldrb.w	r3, [sl]
 801374c:	2b2a      	cmp	r3, #42	@ 0x2a
 801374e:	d015      	beq.n	801377c <_vfiprintf_r+0x120>
 8013750:	9a07      	ldr	r2, [sp, #28]
 8013752:	4654      	mov	r4, sl
 8013754:	2000      	movs	r0, #0
 8013756:	f04f 0c0a 	mov.w	ip, #10
 801375a:	4621      	mov	r1, r4
 801375c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013760:	3b30      	subs	r3, #48	@ 0x30
 8013762:	2b09      	cmp	r3, #9
 8013764:	d94b      	bls.n	80137fe <_vfiprintf_r+0x1a2>
 8013766:	b1b0      	cbz	r0, 8013796 <_vfiprintf_r+0x13a>
 8013768:	9207      	str	r2, [sp, #28]
 801376a:	e014      	b.n	8013796 <_vfiprintf_r+0x13a>
 801376c:	eba0 0308 	sub.w	r3, r0, r8
 8013770:	fa09 f303 	lsl.w	r3, r9, r3
 8013774:	4313      	orrs	r3, r2
 8013776:	9304      	str	r3, [sp, #16]
 8013778:	46a2      	mov	sl, r4
 801377a:	e7d2      	b.n	8013722 <_vfiprintf_r+0xc6>
 801377c:	9b03      	ldr	r3, [sp, #12]
 801377e:	1d19      	adds	r1, r3, #4
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	9103      	str	r1, [sp, #12]
 8013784:	2b00      	cmp	r3, #0
 8013786:	bfbb      	ittet	lt
 8013788:	425b      	neglt	r3, r3
 801378a:	f042 0202 	orrlt.w	r2, r2, #2
 801378e:	9307      	strge	r3, [sp, #28]
 8013790:	9307      	strlt	r3, [sp, #28]
 8013792:	bfb8      	it	lt
 8013794:	9204      	strlt	r2, [sp, #16]
 8013796:	7823      	ldrb	r3, [r4, #0]
 8013798:	2b2e      	cmp	r3, #46	@ 0x2e
 801379a:	d10a      	bne.n	80137b2 <_vfiprintf_r+0x156>
 801379c:	7863      	ldrb	r3, [r4, #1]
 801379e:	2b2a      	cmp	r3, #42	@ 0x2a
 80137a0:	d132      	bne.n	8013808 <_vfiprintf_r+0x1ac>
 80137a2:	9b03      	ldr	r3, [sp, #12]
 80137a4:	1d1a      	adds	r2, r3, #4
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	9203      	str	r2, [sp, #12]
 80137aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80137ae:	3402      	adds	r4, #2
 80137b0:	9305      	str	r3, [sp, #20]
 80137b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013888 <_vfiprintf_r+0x22c>
 80137b6:	7821      	ldrb	r1, [r4, #0]
 80137b8:	2203      	movs	r2, #3
 80137ba:	4650      	mov	r0, sl
 80137bc:	f7ec fd30 	bl	8000220 <memchr>
 80137c0:	b138      	cbz	r0, 80137d2 <_vfiprintf_r+0x176>
 80137c2:	9b04      	ldr	r3, [sp, #16]
 80137c4:	eba0 000a 	sub.w	r0, r0, sl
 80137c8:	2240      	movs	r2, #64	@ 0x40
 80137ca:	4082      	lsls	r2, r0
 80137cc:	4313      	orrs	r3, r2
 80137ce:	3401      	adds	r4, #1
 80137d0:	9304      	str	r3, [sp, #16]
 80137d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137d6:	4829      	ldr	r0, [pc, #164]	@ (801387c <_vfiprintf_r+0x220>)
 80137d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80137dc:	2206      	movs	r2, #6
 80137de:	f7ec fd1f 	bl	8000220 <memchr>
 80137e2:	2800      	cmp	r0, #0
 80137e4:	d03f      	beq.n	8013866 <_vfiprintf_r+0x20a>
 80137e6:	4b26      	ldr	r3, [pc, #152]	@ (8013880 <_vfiprintf_r+0x224>)
 80137e8:	bb1b      	cbnz	r3, 8013832 <_vfiprintf_r+0x1d6>
 80137ea:	9b03      	ldr	r3, [sp, #12]
 80137ec:	3307      	adds	r3, #7
 80137ee:	f023 0307 	bic.w	r3, r3, #7
 80137f2:	3308      	adds	r3, #8
 80137f4:	9303      	str	r3, [sp, #12]
 80137f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137f8:	443b      	add	r3, r7
 80137fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80137fc:	e76a      	b.n	80136d4 <_vfiprintf_r+0x78>
 80137fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8013802:	460c      	mov	r4, r1
 8013804:	2001      	movs	r0, #1
 8013806:	e7a8      	b.n	801375a <_vfiprintf_r+0xfe>
 8013808:	2300      	movs	r3, #0
 801380a:	3401      	adds	r4, #1
 801380c:	9305      	str	r3, [sp, #20]
 801380e:	4619      	mov	r1, r3
 8013810:	f04f 0c0a 	mov.w	ip, #10
 8013814:	4620      	mov	r0, r4
 8013816:	f810 2b01 	ldrb.w	r2, [r0], #1
 801381a:	3a30      	subs	r2, #48	@ 0x30
 801381c:	2a09      	cmp	r2, #9
 801381e:	d903      	bls.n	8013828 <_vfiprintf_r+0x1cc>
 8013820:	2b00      	cmp	r3, #0
 8013822:	d0c6      	beq.n	80137b2 <_vfiprintf_r+0x156>
 8013824:	9105      	str	r1, [sp, #20]
 8013826:	e7c4      	b.n	80137b2 <_vfiprintf_r+0x156>
 8013828:	fb0c 2101 	mla	r1, ip, r1, r2
 801382c:	4604      	mov	r4, r0
 801382e:	2301      	movs	r3, #1
 8013830:	e7f0      	b.n	8013814 <_vfiprintf_r+0x1b8>
 8013832:	ab03      	add	r3, sp, #12
 8013834:	9300      	str	r3, [sp, #0]
 8013836:	462a      	mov	r2, r5
 8013838:	4b12      	ldr	r3, [pc, #72]	@ (8013884 <_vfiprintf_r+0x228>)
 801383a:	a904      	add	r1, sp, #16
 801383c:	4630      	mov	r0, r6
 801383e:	f7fc fbc7 	bl	800ffd0 <_printf_float>
 8013842:	4607      	mov	r7, r0
 8013844:	1c78      	adds	r0, r7, #1
 8013846:	d1d6      	bne.n	80137f6 <_vfiprintf_r+0x19a>
 8013848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801384a:	07d9      	lsls	r1, r3, #31
 801384c:	d405      	bmi.n	801385a <_vfiprintf_r+0x1fe>
 801384e:	89ab      	ldrh	r3, [r5, #12]
 8013850:	059a      	lsls	r2, r3, #22
 8013852:	d402      	bmi.n	801385a <_vfiprintf_r+0x1fe>
 8013854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013856:	f7fd fcf5 	bl	8011244 <__retarget_lock_release_recursive>
 801385a:	89ab      	ldrh	r3, [r5, #12]
 801385c:	065b      	lsls	r3, r3, #25
 801385e:	f53f af1f 	bmi.w	80136a0 <_vfiprintf_r+0x44>
 8013862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013864:	e71e      	b.n	80136a4 <_vfiprintf_r+0x48>
 8013866:	ab03      	add	r3, sp, #12
 8013868:	9300      	str	r3, [sp, #0]
 801386a:	462a      	mov	r2, r5
 801386c:	4b05      	ldr	r3, [pc, #20]	@ (8013884 <_vfiprintf_r+0x228>)
 801386e:	a904      	add	r1, sp, #16
 8013870:	4630      	mov	r0, r6
 8013872:	f7fc fe45 	bl	8010500 <_printf_i>
 8013876:	e7e4      	b.n	8013842 <_vfiprintf_r+0x1e6>
 8013878:	08014070 	.word	0x08014070
 801387c:	0801407a 	.word	0x0801407a
 8013880:	0800ffd1 	.word	0x0800ffd1
 8013884:	08013639 	.word	0x08013639
 8013888:	08014076 	.word	0x08014076

0801388c <_raise_r>:
 801388c:	291f      	cmp	r1, #31
 801388e:	b538      	push	{r3, r4, r5, lr}
 8013890:	4605      	mov	r5, r0
 8013892:	460c      	mov	r4, r1
 8013894:	d904      	bls.n	80138a0 <_raise_r+0x14>
 8013896:	2316      	movs	r3, #22
 8013898:	6003      	str	r3, [r0, #0]
 801389a:	f04f 30ff 	mov.w	r0, #4294967295
 801389e:	bd38      	pop	{r3, r4, r5, pc}
 80138a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80138a2:	b112      	cbz	r2, 80138aa <_raise_r+0x1e>
 80138a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80138a8:	b94b      	cbnz	r3, 80138be <_raise_r+0x32>
 80138aa:	4628      	mov	r0, r5
 80138ac:	f000 f830 	bl	8013910 <_getpid_r>
 80138b0:	4622      	mov	r2, r4
 80138b2:	4601      	mov	r1, r0
 80138b4:	4628      	mov	r0, r5
 80138b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138ba:	f000 b817 	b.w	80138ec <_kill_r>
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d00a      	beq.n	80138d8 <_raise_r+0x4c>
 80138c2:	1c59      	adds	r1, r3, #1
 80138c4:	d103      	bne.n	80138ce <_raise_r+0x42>
 80138c6:	2316      	movs	r3, #22
 80138c8:	6003      	str	r3, [r0, #0]
 80138ca:	2001      	movs	r0, #1
 80138cc:	e7e7      	b.n	801389e <_raise_r+0x12>
 80138ce:	2100      	movs	r1, #0
 80138d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80138d4:	4620      	mov	r0, r4
 80138d6:	4798      	blx	r3
 80138d8:	2000      	movs	r0, #0
 80138da:	e7e0      	b.n	801389e <_raise_r+0x12>

080138dc <raise>:
 80138dc:	4b02      	ldr	r3, [pc, #8]	@ (80138e8 <raise+0xc>)
 80138de:	4601      	mov	r1, r0
 80138e0:	6818      	ldr	r0, [r3, #0]
 80138e2:	f7ff bfd3 	b.w	801388c <_raise_r>
 80138e6:	bf00      	nop
 80138e8:	200001a4 	.word	0x200001a4

080138ec <_kill_r>:
 80138ec:	b538      	push	{r3, r4, r5, lr}
 80138ee:	4d07      	ldr	r5, [pc, #28]	@ (801390c <_kill_r+0x20>)
 80138f0:	2300      	movs	r3, #0
 80138f2:	4604      	mov	r4, r0
 80138f4:	4608      	mov	r0, r1
 80138f6:	4611      	mov	r1, r2
 80138f8:	602b      	str	r3, [r5, #0]
 80138fa:	f7f0 f9c1 	bl	8003c80 <_kill>
 80138fe:	1c43      	adds	r3, r0, #1
 8013900:	d102      	bne.n	8013908 <_kill_r+0x1c>
 8013902:	682b      	ldr	r3, [r5, #0]
 8013904:	b103      	cbz	r3, 8013908 <_kill_r+0x1c>
 8013906:	6023      	str	r3, [r4, #0]
 8013908:	bd38      	pop	{r3, r4, r5, pc}
 801390a:	bf00      	nop
 801390c:	200016cc 	.word	0x200016cc

08013910 <_getpid_r>:
 8013910:	f7f0 b9ae 	b.w	8003c70 <_getpid>

08013914 <_malloc_usable_size_r>:
 8013914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013918:	1f18      	subs	r0, r3, #4
 801391a:	2b00      	cmp	r3, #0
 801391c:	bfbc      	itt	lt
 801391e:	580b      	ldrlt	r3, [r1, r0]
 8013920:	18c0      	addlt	r0, r0, r3
 8013922:	4770      	bx	lr

08013924 <_init>:
 8013924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013926:	bf00      	nop
 8013928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801392a:	bc08      	pop	{r3}
 801392c:	469e      	mov	lr, r3
 801392e:	4770      	bx	lr

08013930 <_fini>:
 8013930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013932:	bf00      	nop
 8013934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013936:	bc08      	pop	{r3}
 8013938:	469e      	mov	lr, r3
 801393a:	4770      	bx	lr
