
mainboardcansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  080127b8  080127b8  000137b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e84  08012e84  000141f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012e84  08012e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e8c  08012e8c  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e8c  08012e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012e90  08012e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08012e94  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001380  200001f8  08013088  000141f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001578  08013088  00014578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002997b  00000000  00000000  00014224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a82  00000000  00000000  0003db9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002278  00000000  00000000  00043628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aab  00000000  00000000  000458a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e5a  00000000  00000000  0004734b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fed2  00000000  00000000  0006e1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e87df  00000000  00000000  0009e077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a824  00000000  00000000  0018689c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  001910c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801279c 	.word	0x0801279c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0801279c 	.word	0x0801279c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Init_HighPerf_Mode_6_axis>:
#define CTRL8_XL 0x17
#define STATUS_REG 0x1E

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800103e:	2354      	movs	r3, #84	@ 0x54
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2210      	movs	r2, #16
 8001054:	21d6      	movs	r1, #214	@ 0xd6
 8001056:	4838      	ldr	r0, [pc, #224]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001058:	f005 fa52 	bl	8006500 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 800105c:	234c      	movs	r3, #76	@ 0x4c
 800105e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	2211      	movs	r2, #17
 8001072:	21d6      	movs	r1, #214	@ 0xd6
 8001074:	4830      	ldr	r0, [pc, #192]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001076:	f005 fa43 	bl	8006500 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2212      	movs	r2, #18
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4829      	ldr	r0, [pc, #164]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f005 fa34 	bl	8006500 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 8001098:	2300      	movs	r3, #0
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2215      	movs	r2, #21
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4821      	ldr	r0, [pc, #132]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f005 fa25 	bl	8006500 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2216      	movs	r2, #22
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	481a      	ldr	r0, [pc, #104]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f005 fa16 	bl	8006500 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2217      	movs	r2, #23
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4812      	ldr	r0, [pc, #72]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f005 fa07 	bl	8006500 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	221e      	movs	r2, #30
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	480b      	ldr	r0, [pc, #44]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f005 fb0c 	bl	8006728 <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 800111a:	4808      	ldr	r0, [pc, #32]	@ (800113c <Init_HighPerf_Mode_6_axis+0x108>)
 800111c:	f00e fd88 	bl	800fc30 <puts>
        }
        if (status & 0x02) {
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <Init_HighPerf_Mode_6_axis+0x10c>)
 800112c:	f00e fd80 	bl	800fc30 <puts>
        }

}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200003b4 	.word	0x200003b4
 800113c:	080127f4 	.word	0x080127f4
 8001140:	08012828 	.word	0x08012828

08001144 <Read_sensor_data>:

// Sensibilités pour accéléromètre et gyroscope
#define ACC_SENSITIVITY_16G 0.488 // Sensibilité pour ±16g
#define GYRO_SENSITIVITY_2000DPS 70 // Sensibilité pour ±2000 dps

HAL_StatusTypeDef Read_sensor_data(int16_t* accel_data, int16_t* gyro_data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af04      	add	r7, sp, #16
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	f107 030a 	add.w	r3, r7, #10
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	221e      	movs	r2, #30
 8001162:	21d6      	movs	r1, #214	@ 0xd6
 8001164:	4856      	ldr	r0, [pc, #344]	@ (80012c0 <Read_sensor_data+0x17c>)
 8001166:	f005 fadf 	bl	8006728 <HAL_I2C_Mem_Read>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <Read_sensor_data+0x34>
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	e09e      	b.n	80012b6 <Read_sensor_data+0x172>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <Read_sensor_data+0x48>
 8001182:	7abb      	ldrb	r3, [r7, #10]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <Read_sensor_data+0x4c>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e092      	b.n	80012b6 <Read_sensor_data+0x172>
    }
	// Lire les données du gyroscope
	for (int i = 0; i < 3; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e042      	b.n	800121c <Read_sensor_data+0xd8>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3311      	adds	r3, #17
 800119a:	b2db      	uxtb	r3, r3
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	733b      	strb	r3, [r7, #12]
		uint8_t high_addr = low_addr + 1;
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	72fb      	strb	r3, [r7, #11]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	f107 0309 	add.w	r3, r7, #9
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	21d6      	movs	r1, #214	@ 0xd6
 80011be:	4840      	ldr	r0, [pc, #256]	@ (80012c0 <Read_sensor_data+0x17c>)
 80011c0:	f005 fab2 	bl	8006728 <HAL_I2C_Mem_Read>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <Read_sensor_data+0x8e>
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	e071      	b.n	80012b6 <Read_sensor_data+0x172>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	21d6      	movs	r1, #214	@ 0xd6
 80011ea:	4835      	ldr	r0, [pc, #212]	@ (80012c0 <Read_sensor_data+0x17c>)
 80011ec:	f005 fa9c 	bl	8006728 <HAL_I2C_Mem_Read>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <Read_sensor_data+0xba>
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	e05b      	b.n	80012b6 <Read_sensor_data+0x172>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b219      	sxth	r1, r3
 8001204:	7a7b      	ldrb	r3, [r7, #9]
 8001206:	b21a      	sxth	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	4403      	add	r3, r0
 8001210:	430a      	orrs	r2, r1
 8001212:	b212      	sxth	r2, r2
 8001214:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2b02      	cmp	r3, #2
 8001220:	ddb9      	ble.n	8001196 <Read_sensor_data+0x52>
	}
	// Lire les données de l'accéléromètre
	for (int i = 0; i < 3; i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	e042      	b.n	80012ae <Read_sensor_data+0x16a>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	3314      	adds	r3, #20
 800122c:	b2db      	uxtb	r3, r3
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	73bb      	strb	r3, [r7, #14]
		uint8_t high_addr = low_addr + 1;
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	3301      	adds	r3, #1
 8001236:	737b      	strb	r3, [r7, #13]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	b29a      	uxth	r2, r3
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 0309 	add.w	r3, r7, #9
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	21d6      	movs	r1, #214	@ 0xd6
 8001250:	481b      	ldr	r0, [pc, #108]	@ (80012c0 <Read_sensor_data+0x17c>)
 8001252:	f005 fa69 	bl	8006728 <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <Read_sensor_data+0x120>
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	e028      	b.n	80012b6 <Read_sensor_data+0x172>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	b29a      	uxth	r2, r3
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	21d6      	movs	r1, #214	@ 0xd6
 800127c:	4810      	ldr	r0, [pc, #64]	@ (80012c0 <Read_sensor_data+0x17c>)
 800127e:	f005 fa53 	bl	8006728 <HAL_I2C_Mem_Read>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <Read_sensor_data+0x14c>
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	e012      	b.n	80012b6 <Read_sensor_data+0x172>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001290:	7a3b      	ldrb	r3, [r7, #8]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b219      	sxth	r1, r3
 8001296:	7a7b      	ldrb	r3, [r7, #9]
 8001298:	b21a      	sxth	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	4403      	add	r3, r0
 80012a2:	430a      	orrs	r2, r1
 80012a4:	b212      	sxth	r2, r2
 80012a6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	3301      	adds	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	ddb9      	ble.n	8001228 <Read_sensor_data+0xe4>
	}

	return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200003b4 	.word	0x200003b4

080012c4 <Read_temp>:

double Read_temp() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af04      	add	r7, sp, #16
    uint8_t low_byte, high_byte;



    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	2220      	movs	r2, #32
 80012dc:	21d6      	movs	r1, #214	@ 0xd6
 80012de:	481e      	ldr	r0, [pc, #120]	@ (8001358 <Read_temp+0x94>)
 80012e0:	f005 fa22 	bl	8006728 <HAL_I2C_Mem_Read>
 80012e4:	4603      	mov	r3, r0
 80012e6:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	1dbb      	adds	r3, r7, #6
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	2221      	movs	r2, #33	@ 0x21
 80012fa:	21d6      	movs	r1, #214	@ 0xd6
 80012fc:	4816      	ldr	r0, [pc, #88]	@ (8001358 <Read_temp+0x94>)
 80012fe:	f005 fa13 	bl	8006728 <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 8001314:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f92b 	bl	8000574 <__aeabi_i2d>
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <Read_temp+0x98>)
 8001324:	f7ff faba 	bl	800089c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <Read_temp+0x9c>)
 8001336:	f7fe ffd1 	bl	80002dc <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 8001342:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001346:	ec43 2b17 	vmov	d7, r2, r3
}
 800134a:	eeb0 0a47 	vmov.f32	s0, s14
 800134e:	eef0 0a67 	vmov.f32	s1, s15
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200003b4 	.word	0x200003b4
 800135c:	40700000 	.word	0x40700000
 8001360:	40390000 	.word	0x40390000

08001364 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	@ 0x30
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2220      	movs	r2, #32
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f00e fd8b 	bl	800fe98 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001382:	4b48      	ldr	r3, [pc, #288]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001384:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001388:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800138a:	4b46      	ldr	r3, [pc, #280]	@ (80014a4 <MX_ADC1_Init+0x140>)
 800138c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001390:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001392:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001398:	4b42      	ldr	r3, [pc, #264]	@ (80014a4 <MX_ADC1_Init+0x140>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800139e:	4b41      	ldr	r3, [pc, #260]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013a4:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013aa:	4b3e      	ldr	r3, [pc, #248]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013ac:	2208      	movs	r2, #8
 80013ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013b0:	4b3c      	ldr	r3, [pc, #240]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013b6:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80013bc:	4b39      	ldr	r3, [pc, #228]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013be:	2204      	movs	r2, #4
 80013c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b38      	ldr	r3, [pc, #224]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80013ca:	4b36      	ldr	r3, [pc, #216]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013cc:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80013d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013d2:	4b34      	ldr	r3, [pc, #208]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013da:	4b32      	ldr	r3, [pc, #200]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013e2:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013e8:	4b2e      	ldr	r3, [pc, #184]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f0:	482c      	ldr	r0, [pc, #176]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013f2:	f003 f9bf 	bl	8004774 <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80013fc:	f001 fb4a 	bl	8002a94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4826      	ldr	r0, [pc, #152]	@ (80014a4 <MX_ADC1_Init+0x140>)
 800140c:	f004 f92e 	bl	800566c <HAL_ADCEx_MultiModeConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001416:	f001 fb3d 	bl	8002a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <MX_ADC1_Init+0x144>)
 800141c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800141e:	2306      	movs	r3, #6
 8001420:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001422:	2307      	movs	r3, #7
 8001424:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001426:	237f      	movs	r3, #127	@ 0x7f
 8001428:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800142a:	2304      	movs	r3, #4
 800142c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	481b      	ldr	r0, [pc, #108]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001438:	f003 fbe8 	bl	8004c0c <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001442:	f001 fb27 	bl	8002a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <MX_ADC1_Init+0x148>)
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800144a:	230c      	movs	r3, #12
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001454:	f003 fbda 	bl	8004c0c <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800145e:	f001 fb19 	bl	8002a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001462:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <MX_ADC1_Init+0x14c>)
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001466:	2312      	movs	r3, #18
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001470:	f003 fbcc 	bl	8004c0c <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800147a:	f001 fb0b 	bl	8002a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <MX_ADC1_Init+0x150>)
 8001480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001482:	2318      	movs	r3, #24
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_ADC1_Init+0x140>)
 800148c:	f003 fbbe 	bl	8004c0c <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001496:	f001 fafd 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	@ 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000214 	.word	0x20000214
 80014a8:	cb840000 	.word	0xcb840000
 80014ac:	c3210000 	.word	0xc3210000
 80014b0:	08600004 	.word	0x08600004
 80014b4:	0c900008 	.word	0x0c900008

080014b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2220      	movs	r2, #32
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00e fce7 	bl	800fe98 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80014ca:	4b2c      	ldr	r3, [pc, #176]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001580 <MX_ADC2_Init+0xc8>)
 80014ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014d0:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014d8:	4b28      	ldr	r3, [pc, #160]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014de:	4b27      	ldr	r3, [pc, #156]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014f2:	2204      	movs	r2, #4
 80014f4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014fe:	2201      	movs	r2, #1
 8001500:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001504:	2201      	movs	r2, #1
 8001506:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_ADC2_Init+0xc4>)
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001512:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_ADC2_Init+0xc4>)
 800151a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_ADC2_Init+0xc4>)
 800152a:	2200      	movs	r2, #0
 800152c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001536:	4811      	ldr	r0, [pc, #68]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001538:	f003 f91c 	bl	8004774 <HAL_ADC_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001542:	f001 faa7 	bl	8002a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_ADC2_Init+0xcc>)
 8001548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800154a:	2306      	movs	r3, #6
 800154c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800154e:	2307      	movs	r3, #7
 8001550:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001552:	237f      	movs	r3, #127	@ 0x7f
 8001554:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001556:	2304      	movs	r3, #4
 8001558:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001564:	f003 fb52 	bl	8004c0c <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800156e:	f001 fa91 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000280 	.word	0x20000280
 8001580:	50000100 	.word	0x50000100
 8001584:	47520000 	.word	0x47520000

08001588 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09c      	sub	sp, #112	@ 0x70
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	2244      	movs	r2, #68	@ 0x44
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00e fc75 	bl	800fe98 <memset>
  if(adcHandle->Instance==ADC1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b6:	d169      	bne.n	800168c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80015c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 fbf7 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015d4:	f001 fa5e 	bl	8002a94 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015d8:	4b65      	ldr	r3, [pc, #404]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a64      	ldr	r2, [pc, #400]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80015e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015e2:	4b63      	ldr	r3, [pc, #396]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10b      	bne.n	8001602 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015ea:	4b62      	ldr	r3, [pc, #392]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4a61      	ldr	r2, [pc, #388]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80015f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b5c      	ldr	r3, [pc, #368]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	4a5b      	ldr	r2, [pc, #364]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160e:	4b59      	ldr	r3, [pc, #356]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800161a:	2306      	movs	r3, #6
 800161c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161e:	2303      	movs	r3, #3
 8001620:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001630:	f004 fd0e 	bl	8006050 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001634:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001636:	4a51      	ldr	r2, [pc, #324]	@ (800177c <HAL_ADC_MspInit+0x1f4>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800163a:	4b4f      	ldr	r3, [pc, #316]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 800163c:	2205      	movs	r2, #5
 800163e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001640:	4b4d      	ldr	r3, [pc, #308]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b4a      	ldr	r3, [pc, #296]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 800164e:	2280      	movs	r2, #128	@ 0x80
 8001650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001652:	4b49      	ldr	r3, [pc, #292]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001654:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800165a:	4b47      	ldr	r3, [pc, #284]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 800165c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001662:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001664:	2220      	movs	r2, #32
 8001666:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001668:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800166e:	4842      	ldr	r0, [pc, #264]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001670:	f004 f9b0 	bl	80059d4 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800167a:	f001 fa0b 	bl	8002a94 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a3d      	ldr	r2, [pc, #244]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001682:	655a      	str	r2, [r3, #84]	@ 0x54
 8001684:	4a3c      	ldr	r2, [pc, #240]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800168a:	e06d      	b.n	8001768 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a3b      	ldr	r2, [pc, #236]	@ (8001780 <HAL_ADC_MspInit+0x1f8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d168      	bne.n	8001768 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800169a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800169c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016a0:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f006 fb88 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 80016b2:	f001 f9ef 	bl	8002a94 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80016be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10b      	bne.n	80016e0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016cc:	4a29      	ldr	r2, [pc, #164]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	4a23      	ldr	r2, [pc, #140]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ec:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016f8:	2310      	movs	r3, #16
 80016fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170e:	f004 fc9f 	bl	8006050 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001714:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <HAL_ADC_MspInit+0x200>)
 8001716:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 800171a:	2224      	movs	r2, #36	@ 0x24
 800171c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 800172c:	2280      	movs	r2, #128	@ 0x80
 800172e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001736:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 800173a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800173e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001740:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001742:	2220      	movs	r2, #32
 8001744:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800174c:	480d      	ldr	r0, [pc, #52]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 800174e:	f004 f941 	bl	80059d4 <HAL_DMA_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8001758:	f001 f99c 	bl	8002a94 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a09      	ldr	r2, [pc, #36]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001760:	655a      	str	r2, [r3, #84]	@ 0x54
 8001762:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001768:	bf00      	nop
 800176a:	3770      	adds	r7, #112	@ 0x70
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200003ac 	.word	0x200003ac
 8001774:	40021000 	.word	0x40021000
 8001778:	200002ec 	.word	0x200002ec
 800177c:	40020030 	.word	0x40020030
 8001780:	50000100 	.word	0x50000100
 8001784:	2000034c 	.word	0x2000034c
 8001788:	40020058 	.word	0x40020058
 800178c:	00000000 	.word	0x00000000

08001790 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017a2:	f040 80cd 	bne.w	8001940 <HAL_ADC_ConvCpltCallback+0x1b0>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80017a6:	4b80      	ldr	r3, [pc, #512]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fee2 	bl	8000574 <__aeabi_i2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	a178      	add	r1, pc, #480	@ (adr r1, 8001998 <HAL_ADC_ConvCpltCallback+0x208>)
 80017b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ba:	f7ff f86f 	bl	800089c <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fa37 	bl	8000c38 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a77      	ldr	r2, [pc, #476]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 80017ce:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80017d0:	4b77      	ldr	r3, [pc, #476]	@ (80019b0 <HAL_ADC_ConvCpltCallback+0x220>)
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	4b77      	ldr	r3, [pc, #476]	@ (80019b4 <HAL_ADC_ConvCpltCallback+0x224>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e0:	ee17 0a90 	vmov	r0, s15
 80017e4:	f7fe fed8 	bl	8000598 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	f04f 0000 	mov.w	r0, #0
 80017f0:	4971      	ldr	r1, [pc, #452]	@ (80019b8 <HAL_ADC_ConvCpltCallback+0x228>)
 80017f2:	f7ff f853 	bl	800089c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4690      	mov	r8, r2
 80017fc:	4699      	mov	r9, r3
 80017fe:	4b6a      	ldr	r3, [pc, #424]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 8001800:	885b      	ldrh	r3, [r3, #2]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feb6 	bl	8000574 <__aeabi_i2d>
 8001808:	4604      	mov	r4, r0
 800180a:	460d      	mov	r5, r1
 800180c:	4b67      	ldr	r3, [pc, #412]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fec1 	bl	8000598 <__aeabi_f2d>
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b68      	ldr	r3, [pc, #416]	@ (80019bc <HAL_ADC_ConvCpltCallback+0x22c>)
 800181c:	f7ff f83e 	bl	800089c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe ff0e 	bl	8000648 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4614      	mov	r4, r2
 8001832:	461d      	mov	r5, r3
 8001834:	4b5f      	ldr	r3, [pc, #380]	@ (80019b4 <HAL_ADC_ConvCpltCallback+0x224>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fead 	bl	8000598 <__aeabi_f2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4620      	mov	r0, r4
 8001844:	4629      	mov	r1, r5
 8001846:	f7fe fd47 	bl	80002d8 <__aeabi_dsub>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4640      	mov	r0, r8
 8001850:	4649      	mov	r1, r9
 8001852:	f7fe fef9 	bl	8000648 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f9eb 	bl	8000c38 <__aeabi_d2f>
 8001862:	ee07 0a10 	vmov	s14, r0
 8001866:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 800186a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186e:	4b54      	ldr	r3, [pc, #336]	@ (80019c0 <HAL_ADC_ConvCpltCallback+0x230>)
 8001870:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 8001874:	4b4c      	ldr	r3, [pc, #304]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 8001876:	88db      	ldrh	r3, [r3, #6]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe7b 	bl	8000574 <__aeabi_i2d>
 800187e:	a348      	add	r3, pc, #288	@ (adr r3, 80019a0 <HAL_ADC_ConvCpltCallback+0x210>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7ff f80a 	bl	800089c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <HAL_ADC_ConvCpltCallback+0x22c>)
 8001896:	f7fe fed7 	bl	8000648 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4614      	mov	r4, r2
 80018a0:	461d      	mov	r5, r3
 80018a2:	4b42      	ldr	r3, [pc, #264]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe76 	bl	8000598 <__aeabi_f2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4620      	mov	r0, r4
 80018b2:	4629      	mov	r1, r5
 80018b4:	f7fe fec8 	bl	8000648 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f9ba 	bl	8000c38 <__aeabi_d2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a3f      	ldr	r2, [pc, #252]	@ (80019c4 <HAL_ADC_ConvCpltCallback+0x234>)
 80018c8:	6013      	str	r3, [r2, #0]
		current=(float) 60.0*(rawADCdata[2]/4095.0)*vrefint;
 80018ca:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 80018cc:	889b      	ldrh	r3, [r3, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe50 	bl	8000574 <__aeabi_i2d>
 80018d4:	a332      	add	r3, pc, #200	@ (adr r3, 80019a0 <HAL_ADC_ConvCpltCallback+0x210>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe ffdf 	bl	800089c <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <HAL_ADC_ConvCpltCallback+0x238>)
 80018ec:	f7fe feac 	bl	8000648 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	4b2c      	ldr	r3, [pc, #176]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe4b 	bl	8000598 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4620      	mov	r0, r4
 8001908:	4629      	mov	r1, r5
 800190a:	f7fe fe9d 	bl	8000648 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f98f 	bl	8000c38 <__aeabi_d2f>
 800191a:	4603      	mov	r3, r0
 800191c:	4a2b      	ldr	r2, [pc, #172]	@ (80019cc <HAL_ADC_ConvCpltCallback+0x23c>)
 800191e:	6013      	str	r3, [r2, #0]
		power=(float) vbat*current;
 8001920:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <HAL_ADC_ConvCpltCallback+0x234>)
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_ADC_ConvCpltCallback+0x23c>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001930:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <HAL_ADC_ConvCpltCallback+0x240>)
 8001932:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 4);
 8001936:	2204      	movs	r2, #4
 8001938:	491b      	ldr	r1, [pc, #108]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 800193a:	4826      	ldr	r0, [pc, #152]	@ (80019d4 <HAL_ADC_ConvCpltCallback+0x244>)
 800193c:	f003 f89e 	bl	8004a7c <HAL_ADC_Start_DMA>

	}
	if(hadc->Instance==ADC2){
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a24      	ldr	r2, [pc, #144]	@ (80019d8 <HAL_ADC_ConvCpltCallback+0x248>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d11f      	bne.n	800198a <HAL_ADC_ConvCpltCallback+0x1fa>
		vexternalsensor=(float) (rawADCdata[4]/4095.0)*vrefint;
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 800194c:	891b      	ldrh	r3, [r3, #8]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fe10 	bl	8000574 <__aeabi_i2d>
 8001954:	a312      	add	r3, pc, #72	@ (adr r3, 80019a0 <HAL_ADC_ConvCpltCallback+0x210>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe ff9f 	bl	800089c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f967 	bl	8000c38 <__aeabi_d2f>
 800196a:	ee07 0a10 	vmov	s14, r0
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_ADC_ConvCpltCallback+0x24c>)
 800197a:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <HAL_ADC_ConvCpltCallback+0x250>)
 8001980:	2201      	movs	r2, #1
 8001982:	4619      	mov	r1, r3
 8001984:	4817      	ldr	r0, [pc, #92]	@ (80019e4 <HAL_ADC_ConvCpltCallback+0x254>)
 8001986:	f003 f879 	bl	8004a7c <HAL_ADC_Start_DMA>

	}

}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001994:	f3af 8000 	nop.w
 8001998:	d70a3d70 	.word	0xd70a3d70
 800199c:	40b36323 	.word	0x40b36323
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40affe00 	.word	0x40affe00
 80019a8:	20000be0 	.word	0x20000be0
 80019ac:	20000bf0 	.word	0x20000bf0
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004
 80019b8:	40590000 	.word	0x40590000
 80019bc:	40080000 	.word	0x40080000
 80019c0:	20000bec 	.word	0x20000bec
 80019c4:	20000bf4 	.word	0x20000bf4
 80019c8:	404e0000 	.word	0x404e0000
 80019cc:	20000bf8 	.word	0x20000bf8
 80019d0:	20000bfc 	.word	0x20000bfc
 80019d4:	20000214 	.word	0x20000214
 80019d8:	50000100 	.word	0x50000100
 80019dc:	20000c00 	.word	0x20000c00
 80019e0:	20000be8 	.word	0x20000be8
 80019e4:	20000280 	.word	0x20000280

080019e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019ee:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <MX_DMA_Init+0x90>)
 80019f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f2:	4a21      	ldr	r2, [pc, #132]	@ (8001a78 <MX_DMA_Init+0x90>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <MX_DMA_Init+0x90>)
 80019fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <MX_DMA_Init+0x90>)
 8001a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a78 <MX_DMA_Init+0x90>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <MX_DMA_Init+0x90>)
 8001a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	200b      	movs	r0, #11
 8001a24:	f003 ffa1 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a28:	200b      	movs	r0, #11
 8001a2a:	f003 ffb8 	bl	800599e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	200c      	movs	r0, #12
 8001a34:	f003 ff99 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a38:	200c      	movs	r0, #12
 8001a3a:	f003 ffb0 	bl	800599e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	200d      	movs	r0, #13
 8001a44:	f003 ff91 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a48:	200d      	movs	r0, #13
 8001a4a:	f003 ffa8 	bl	800599e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	200e      	movs	r0, #14
 8001a54:	f003 ff89 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a58:	200e      	movs	r0, #14
 8001a5a:	f003 ffa0 	bl	800599e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	200f      	movs	r0, #15
 8001a64:	f003 ff81 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a68:	200f      	movs	r0, #15
 8001a6a:	f003 ff98 	bl	800599e <HAL_NVIC_EnableIRQ>

}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000

08001a7c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2110      	movs	r1, #16
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <SELECT+0x14>)
 8001a86:	f004 fc65 	bl	8006354 <HAL_GPIO_WritePin>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	48000800 	.word	0x48000800

08001a94 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2110      	movs	r1, #16
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <DESELECT+0x14>)
 8001a9e:	f004 fc59 	bl	8006354 <HAL_GPIO_WritePin>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	48000800 	.word	0x48000800

08001aac <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001ab6:	bf00      	nop
 8001ab8:	4808      	ldr	r0, [pc, #32]	@ (8001adc <SPI_TxByte+0x30>)
 8001aba:	f006 ffaf 	bl	8008a1c <HAL_SPI_GetState>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d1f9      	bne.n	8001ab8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001ac4:	1df9      	adds	r1, r7, #7
 8001ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aca:	2201      	movs	r2, #1
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <SPI_TxByte+0x30>)
 8001ace:	f006 fc10 	bl	80082f2 <HAL_SPI_Transmit>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000db4 	.word	0x20000db4

08001ae0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001ae6:	23ff      	movs	r3, #255	@ 0xff
 8001ae8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001aee:	bf00      	nop
 8001af0:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <SPI_RxByte+0x38>)
 8001af2:	f006 ff93 	bl	8008a1c <HAL_SPI_GetState>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d1f9      	bne.n	8001af0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001afc:	1dba      	adds	r2, r7, #6
 8001afe:	1df9      	adds	r1, r7, #7
 8001b00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2301      	movs	r3, #1
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <SPI_RxByte+0x38>)
 8001b0a:	f006 fd68 	bl	80085de <HAL_SPI_TransmitReceive>

  return data;
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000db4 	.word	0x20000db4

08001b1c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001b24:	f7ff ffdc 	bl	8001ae0 <SPI_RxByte>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	701a      	strb	r2, [r3, #0]
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <SD_ReadyWait+0x34>)
 8001b40:	2232      	movs	r2, #50	@ 0x32
 8001b42:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001b44:	f7ff ffcc 	bl	8001ae0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001b48:	f7ff ffca 	bl	8001ae0 <SPI_RxByte>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2bff      	cmp	r3, #255	@ 0xff
 8001b54:	d004      	beq.n	8001b60 <SD_ReadyWait+0x28>
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <SD_ReadyWait+0x34>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f3      	bne.n	8001b48 <SD_ReadyWait+0x10>

  return res;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200003b1 	.word	0x200003b1

08001b70 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001b76:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001b7c:	f7ff ff8a 	bl	8001a94 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	e005      	b.n	8001b92 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001b86:	20ff      	movs	r0, #255	@ 0xff
 8001b88:	f7ff ff90 	bl	8001aac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	ddf6      	ble.n	8001b86 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001b98:	f7ff ff70 	bl	8001a7c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001b9c:	2340      	movs	r3, #64	@ 0x40
 8001b9e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001bb0:	2395      	movs	r3, #149	@ 0x95
 8001bb2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e009      	b.n	8001bce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001bba:	1d3a      	adds	r2, r7, #4
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff72 	bl	8001aac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	ddf2      	ble.n	8001bba <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001bd4:	e002      	b.n	8001bdc <SD_PowerOn+0x6c>
  {
    Count--;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001bdc:	f7ff ff80 	bl	8001ae0 <SPI_RxByte>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d002      	beq.n	8001bec <SD_PowerOn+0x7c>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f4      	bne.n	8001bd6 <SD_PowerOn+0x66>
  }

  DESELECT();
 8001bec:	f7ff ff52 	bl	8001a94 <DESELECT>
  SPI_TxByte(0XFF);
 8001bf0:	20ff      	movs	r0, #255	@ 0xff
 8001bf2:	f7ff ff5b 	bl	8001aac <SPI_TxByte>

  PowerFlag = 1;
 8001bf6:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <SD_PowerOn+0x94>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200003b3 	.word	0x200003b3

08001c08 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <SD_PowerOff+0x14>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	200003b3 	.word	0x200003b3

08001c20 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <SD_CheckPower+0x14>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200003b3 	.word	0x200003b3

08001c38 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <SD_RxDataBlock+0x68>)
 8001c44:	220a      	movs	r2, #10
 8001c46:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001c48:	f7ff ff4a 	bl	8001ae0 <SPI_RxByte>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2bff      	cmp	r3, #255	@ 0xff
 8001c54:	d104      	bne.n	8001c60 <SD_RxDataBlock+0x28>
 8001c56:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <SD_RxDataBlock+0x68>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f3      	bne.n	8001c48 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c64:	d001      	beq.n	8001c6a <SD_RxDataBlock+0x32>
    return FALSE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e016      	b.n	8001c98 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff53 	bl	8001b1c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff4d 	bl	8001b1c <SPI_RxBytePtr>
  } while(btr -= 2);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3b02      	subs	r3, #2
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ed      	bne.n	8001c6a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001c8e:	f7ff ff27 	bl	8001ae0 <SPI_RxByte>
  SPI_RxByte();
 8001c92:	f7ff ff25 	bl	8001ae0 <SPI_RxByte>

  return TRUE;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200003b0 	.word	0x200003b0

08001ca4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001cb4:	f7ff ff40 	bl	8001b38 <SD_ReadyWait>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2bff      	cmp	r3, #255	@ 0xff
 8001cbc:	d001      	beq.n	8001cc2 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e040      	b.n	8001d44 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fef1 	bl	8001aac <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	2bfd      	cmp	r3, #253	@ 0xfd
 8001cce:	d031      	beq.n	8001d34 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fee5 	bl	8001aac <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fede 	bl	8001aac <SPI_TxByte>
    } while (--wc);
 8001cf0:	7bbb      	ldrb	r3, [r7, #14]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	73bb      	strb	r3, [r7, #14]
 8001cf6:	7bbb      	ldrb	r3, [r7, #14]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1eb      	bne.n	8001cd4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001cfc:	f7ff fef0 	bl	8001ae0 <SPI_RxByte>
    SPI_RxByte();
 8001d00:	f7ff feee 	bl	8001ae0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001d04:	e00b      	b.n	8001d1e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001d06:	f7ff feeb 	bl	8001ae0 <SPI_RxByte>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d006      	beq.n	8001d26 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001d18:	7b7b      	ldrb	r3, [r7, #13]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001d1e:	7b7b      	ldrb	r3, [r7, #13]
 8001d20:	2b40      	cmp	r3, #64	@ 0x40
 8001d22:	d9f0      	bls.n	8001d06 <SD_TxDataBlock+0x62>
 8001d24:	e000      	b.n	8001d28 <SD_TxDataBlock+0x84>
        break;
 8001d26:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001d28:	bf00      	nop
 8001d2a:	f7ff fed9 	bl	8001ae0 <SPI_RxByte>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0fa      	beq.n	8001d2a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d101      	bne.n	8001d42 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001d58:	f7ff feee 	bl	8001b38 <SD_ReadyWait>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2bff      	cmp	r3, #255	@ 0xff
 8001d60:	d001      	beq.n	8001d66 <SD_SendCmd+0x1a>
    return 0xFF;
 8001d62:	23ff      	movs	r3, #255	@ 0xff
 8001d64:	e040      	b.n	8001de8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe9f 	bl	8001aac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	0e1b      	lsrs	r3, r3, #24
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fe99 	bl	8001aac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fe93 	bl	8001aac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fe8d 	bl	8001aac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fe88 	bl	8001aac <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b40      	cmp	r3, #64	@ 0x40
 8001da4:	d101      	bne.n	8001daa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001da6:	2395      	movs	r3, #149	@ 0x95
 8001da8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2b48      	cmp	r3, #72	@ 0x48
 8001dae:	d101      	bne.n	8001db4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001db0:	2387      	movs	r3, #135	@ 0x87
 8001db2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fe78 	bl	8001aac <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2b4c      	cmp	r3, #76	@ 0x4c
 8001dc0:	d101      	bne.n	8001dc6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001dc2:	f7ff fe8d 	bl	8001ae0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001dca:	f7ff fe89 	bl	8001ae0 <SPI_RxByte>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001dd2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da05      	bge.n	8001de6 <SD_SendCmd+0x9a>
 8001dda:	7bbb      	ldrb	r3, [r7, #14]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	73bb      	strb	r3, [r7, #14]
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f1      	bne.n	8001dca <SD_SendCmd+0x7e>

  return res;
 8001de6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d5      	b.n	8001fb0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001e04:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <SD_disk_initialize+0x2a>
    return Stat;
 8001e12:	4b69      	ldr	r3, [pc, #420]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	e0ca      	b.n	8001fb0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001e1a:	f7ff fea9 	bl	8001b70 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001e1e:	f7ff fe2d 	bl	8001a7c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001e26:	2100      	movs	r1, #0
 8001e28:	2040      	movs	r0, #64	@ 0x40
 8001e2a:	f7ff ff8f 	bl	8001d4c <SD_SendCmd>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	f040 80a5 	bne.w	8001f80 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001e36:	4b61      	ldr	r3, [pc, #388]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001e38:	2264      	movs	r2, #100	@ 0x64
 8001e3a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001e3c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001e40:	2048      	movs	r0, #72	@ 0x48
 8001e42:	f7ff ff83 	bl	8001d4c <SD_SendCmd>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d158      	bne.n	8001efe <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e00c      	b.n	8001e6c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001e52:	7bfc      	ldrb	r4, [r7, #15]
 8001e54:	f7ff fe44 	bl	8001ae0 <SPI_RxByte>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f104 0310 	add.w	r3, r4, #16
 8001e60:	443b      	add	r3, r7
 8001e62:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d9ef      	bls.n	8001e52 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001e72:	7abb      	ldrb	r3, [r7, #10]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 8083 	bne.w	8001f80 <SD_disk_initialize+0x190>
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	2baa      	cmp	r3, #170	@ 0xaa
 8001e7e:	d17f      	bne.n	8001f80 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001e80:	2100      	movs	r1, #0
 8001e82:	2077      	movs	r0, #119	@ 0x77
 8001e84:	f7ff ff62 	bl	8001d4c <SD_SendCmd>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d807      	bhi.n	8001e9e <SD_disk_initialize+0xae>
 8001e8e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e92:	2069      	movs	r0, #105	@ 0x69
 8001e94:	f7ff ff5a 	bl	8001d4c <SD_SendCmd>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001e9e:	4b47      	ldr	r3, [pc, #284]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1eb      	bne.n	8001e80 <SD_disk_initialize+0x90>
 8001ea8:	e000      	b.n	8001eac <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001eaa:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001eac:	4b43      	ldr	r3, [pc, #268]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d064      	beq.n	8001f80 <SD_disk_initialize+0x190>
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	207a      	movs	r0, #122	@ 0x7a
 8001eba:	f7ff ff47 	bl	8001d4c <SD_SendCmd>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d15d      	bne.n	8001f80 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e00c      	b.n	8001ee4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001eca:	7bfc      	ldrb	r4, [r7, #15]
 8001ecc:	f7ff fe08 	bl	8001ae0 <SPI_RxByte>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f104 0310 	add.w	r3, r4, #16
 8001ed8:	443b      	add	r3, r7
 8001eda:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d9ef      	bls.n	8001eca <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001eea:	7a3b      	ldrb	r3, [r7, #8]
 8001eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SD_disk_initialize+0x108>
 8001ef4:	2306      	movs	r3, #6
 8001ef6:	e000      	b.n	8001efa <SD_disk_initialize+0x10a>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	73bb      	strb	r3, [r7, #14]
 8001efc:	e040      	b.n	8001f80 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001efe:	2100      	movs	r1, #0
 8001f00:	2077      	movs	r0, #119	@ 0x77
 8001f02:	f7ff ff23 	bl	8001d4c <SD_SendCmd>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d808      	bhi.n	8001f1e <SD_disk_initialize+0x12e>
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2069      	movs	r0, #105	@ 0x69
 8001f10:	f7ff ff1c 	bl	8001d4c <SD_SendCmd>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d801      	bhi.n	8001f1e <SD_disk_initialize+0x12e>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e000      	b.n	8001f20 <SD_disk_initialize+0x130>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d10e      	bne.n	8001f46 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2077      	movs	r0, #119	@ 0x77
 8001f2c:	f7ff ff0e 	bl	8001d4c <SD_SendCmd>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d80e      	bhi.n	8001f54 <SD_disk_initialize+0x164>
 8001f36:	2100      	movs	r1, #0
 8001f38:	2069      	movs	r0, #105	@ 0x69
 8001f3a:	f7ff ff07 	bl	8001d4c <SD_SendCmd>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001f44:	e00d      	b.n	8001f62 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001f46:	2100      	movs	r1, #0
 8001f48:	2041      	movs	r0, #65	@ 0x41
 8001f4a:	f7ff feff 	bl	8001d4c <SD_SendCmd>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1e1      	bne.n	8001f22 <SD_disk_initialize+0x132>
 8001f5e:	e000      	b.n	8001f62 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001f60:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <SD_disk_initialize+0x18c>
 8001f6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f70:	2050      	movs	r0, #80	@ 0x50
 8001f72:	f7ff feeb 	bl	8001d4c <SD_SendCmd>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001f80:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc0 <SD_disk_initialize+0x1d0>)
 8001f82:	7bbb      	ldrb	r3, [r7, #14]
 8001f84:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001f86:	f7ff fd85 	bl	8001a94 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001f8a:	f7ff fda9 	bl	8001ae0 <SPI_RxByte>

  if (type)
 8001f8e:	7bbb      	ldrb	r3, [r7, #14]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e001      	b.n	8001faa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001fa6:	f7ff fe2f 	bl	8001c08 <SD_PowerOff>
  }

  return Stat;
 8001faa:	4b03      	ldr	r3, [pc, #12]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b2db      	uxtb	r3, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	200003b0 	.word	0x200003b0
 8001fc0:	200003b2 	.word	0x200003b2

08001fc4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e002      	b.n	8001fde <SD_disk_status+0x1a>

  return Stat;
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <SD_disk_status+0x28>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b2db      	uxtb	r3, r3
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008

08001ff0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <SD_disk_read+0x1c>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <SD_disk_read+0x20>
    return RES_PARERR;
 800200c:	2304      	movs	r3, #4
 800200e:	e051      	b.n	80020b4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002010:	4b2a      	ldr	r3, [pc, #168]	@ (80020bc <SD_disk_read+0xcc>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800201e:	2303      	movs	r3, #3
 8002020:	e048      	b.n	80020b4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8002022:	4b27      	ldr	r3, [pc, #156]	@ (80020c0 <SD_disk_read+0xd0>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	025b      	lsls	r3, r3, #9
 8002032:	607b      	str	r3, [r7, #4]

  SELECT();
 8002034:	f7ff fd22 	bl	8001a7c <SELECT>

  if (count == 1)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d111      	bne.n	8002062 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	2051      	movs	r0, #81	@ 0x51
 8002042:	f7ff fe83 	bl	8001d4c <SD_SendCmd>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d129      	bne.n	80020a0 <SD_disk_read+0xb0>
 800204c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002050:	68b8      	ldr	r0, [r7, #8]
 8002052:	f7ff fdf1 	bl	8001c38 <SD_RxDataBlock>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d021      	beq.n	80020a0 <SD_disk_read+0xb0>
      count = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	e01e      	b.n	80020a0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	2052      	movs	r0, #82	@ 0x52
 8002066:	f7ff fe71 	bl	8001d4c <SD_SendCmd>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d117      	bne.n	80020a0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002070:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002074:	68b8      	ldr	r0, [r7, #8]
 8002076:	f7ff fddf 	bl	8001c38 <SD_RxDataBlock>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002086:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	3b01      	subs	r3, #1
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ed      	bne.n	8002070 <SD_disk_read+0x80>
 8002094:	e000      	b.n	8002098 <SD_disk_read+0xa8>
          break;
 8002096:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8002098:	2100      	movs	r1, #0
 800209a:	204c      	movs	r0, #76	@ 0x4c
 800209c:	f7ff fe56 	bl	8001d4c <SD_SendCmd>
    }
  }

  DESELECT();
 80020a0:	f7ff fcf8 	bl	8001a94 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80020a4:	f7ff fd1c 	bl	8001ae0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf14      	ite	ne
 80020ae:	2301      	movne	r3, #1
 80020b0:	2300      	moveq	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000008 	.word	0x20000008
 80020c0:	200003b2 	.word	0x200003b2

080020c4 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <SD_disk_write+0x1c>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <SD_disk_write+0x20>
    return RES_PARERR;
 80020e0:	2304      	movs	r3, #4
 80020e2:	e06b      	b.n	80021bc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80020e4:	4b37      	ldr	r3, [pc, #220]	@ (80021c4 <SD_disk_write+0x100>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e062      	b.n	80021bc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80020f6:	4b33      	ldr	r3, [pc, #204]	@ (80021c4 <SD_disk_write+0x100>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002104:	2302      	movs	r3, #2
 8002106:	e059      	b.n	80021bc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8002108:	4b2f      	ldr	r3, [pc, #188]	@ (80021c8 <SD_disk_write+0x104>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	607b      	str	r3, [r7, #4]

  SELECT();
 800211a:	f7ff fcaf 	bl	8001a7c <SELECT>

  if (count == 1)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d110      	bne.n	8002146 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	2058      	movs	r0, #88	@ 0x58
 8002128:	f7ff fe10 	bl	8001d4c <SD_SendCmd>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d13a      	bne.n	80021a8 <SD_disk_write+0xe4>
 8002132:	21fe      	movs	r1, #254	@ 0xfe
 8002134:	68b8      	ldr	r0, [r7, #8]
 8002136:	f7ff fdb5 	bl	8001ca4 <SD_TxDataBlock>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d033      	beq.n	80021a8 <SD_disk_write+0xe4>
      count = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	e030      	b.n	80021a8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <SD_disk_write+0x104>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002152:	2100      	movs	r1, #0
 8002154:	2077      	movs	r0, #119	@ 0x77
 8002156:	f7ff fdf9 	bl	8001d4c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	2057      	movs	r0, #87	@ 0x57
 800215e:	f7ff fdf5 	bl	8001d4c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	2059      	movs	r0, #89	@ 0x59
 8002166:	f7ff fdf1 	bl	8001d4c <SD_SendCmd>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d11b      	bne.n	80021a8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002170:	21fc      	movs	r1, #252	@ 0xfc
 8002172:	68b8      	ldr	r0, [r7, #8]
 8002174:	f7ff fd96 	bl	8001ca4 <SD_TxDataBlock>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002184:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3b01      	subs	r3, #1
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ee      	bne.n	8002170 <SD_disk_write+0xac>
 8002192:	e000      	b.n	8002196 <SD_disk_write+0xd2>
          break;
 8002194:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8002196:	21fd      	movs	r1, #253	@ 0xfd
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff fd83 	bl	8001ca4 <SD_TxDataBlock>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <SD_disk_write+0xe4>
      {
        count = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80021a8:	f7ff fc74 	bl	8001a94 <DESELECT>
  SPI_RxByte();
 80021ac:	f7ff fc98 	bl	8001ae0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf14      	ite	ne
 80021b6:	2301      	movne	r3, #1
 80021b8:	2300      	moveq	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000008 	.word	0x20000008
 80021c8:	200003b2 	.word	0x200003b2

080021cc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b08b      	sub	sp, #44	@ 0x2c
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	603a      	str	r2, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	460b      	mov	r3, r1
 80021da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80021e6:	2304      	movs	r3, #4
 80021e8:	e119      	b.n	800241e <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80021f0:	79bb      	ldrb	r3, [r7, #6]
 80021f2:	2b05      	cmp	r3, #5
 80021f4:	d129      	bne.n	800224a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d017      	beq.n	800222e <SD_disk_ioctl+0x62>
 80021fe:	2b02      	cmp	r3, #2
 8002200:	dc1f      	bgt.n	8002242 <SD_disk_ioctl+0x76>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <SD_disk_ioctl+0x40>
 8002206:	2b01      	cmp	r3, #1
 8002208:	d00b      	beq.n	8002222 <SD_disk_ioctl+0x56>
 800220a:	e01a      	b.n	8002242 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800220c:	f7ff fd08 	bl	8001c20 <SD_CheckPower>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002216:	f7ff fcf7 	bl	8001c08 <SD_PowerOff>
      res = RES_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002220:	e0fb      	b.n	800241a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8002222:	f7ff fca5 	bl	8001b70 <SD_PowerOn>
      res = RES_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800222c:	e0f5      	b.n	800241a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	1c5c      	adds	r4, r3, #1
 8002232:	f7ff fcf5 	bl	8001c20 <SD_CheckPower>
 8002236:	4603      	mov	r3, r0
 8002238:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800223a:	2300      	movs	r3, #0
 800223c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002240:	e0eb      	b.n	800241a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8002242:	2304      	movs	r3, #4
 8002244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002248:	e0e7      	b.n	800241a <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800224a:	4b77      	ldr	r3, [pc, #476]	@ (8002428 <SD_disk_ioctl+0x25c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002258:	2303      	movs	r3, #3
 800225a:	e0e0      	b.n	800241e <SD_disk_ioctl+0x252>

    SELECT();
 800225c:	f7ff fc0e 	bl	8001a7c <SELECT>

    switch (ctrl)
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	2b0d      	cmp	r3, #13
 8002264:	f200 80ca 	bhi.w	80023fc <SD_disk_ioctl+0x230>
 8002268:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <SD_disk_ioctl+0xa4>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	08002367 	.word	0x08002367
 8002274:	080022a9 	.word	0x080022a9
 8002278:	08002357 	.word	0x08002357
 800227c:	080023fd 	.word	0x080023fd
 8002280:	080023fd 	.word	0x080023fd
 8002284:	080023fd 	.word	0x080023fd
 8002288:	080023fd 	.word	0x080023fd
 800228c:	080023fd 	.word	0x080023fd
 8002290:	080023fd 	.word	0x080023fd
 8002294:	080023fd 	.word	0x080023fd
 8002298:	080023fd 	.word	0x080023fd
 800229c:	08002379 	.word	0x08002379
 80022a0:	0800239d 	.word	0x0800239d
 80022a4:	080023c1 	.word	0x080023c1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80022a8:	2100      	movs	r1, #0
 80022aa:	2049      	movs	r0, #73	@ 0x49
 80022ac:	f7ff fd4e 	bl	8001d4c <SD_SendCmd>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 80a6 	bne.w	8002404 <SD_disk_ioctl+0x238>
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2110      	movs	r1, #16
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fcba 	bl	8001c38 <SD_RxDataBlock>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 809c 	beq.w	8002404 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 80022cc:	7b3b      	ldrb	r3, [r7, #12]
 80022ce:	099b      	lsrs	r3, r3, #6
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10d      	bne.n	80022f2 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80022d6:	7d7b      	ldrb	r3, [r7, #21]
 80022d8:	461a      	mov	r2, r3
 80022da:	7d3b      	ldrb	r3, [r7, #20]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80022e8:	8bfb      	ldrh	r3, [r7, #30]
 80022ea:	029a      	lsls	r2, r3, #10
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e02d      	b.n	800234e <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80022f2:	7c7b      	ldrb	r3, [r7, #17]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	7dbb      	ldrb	r3, [r7, #22]
 80022fc:	09db      	lsrs	r3, r3, #7
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4413      	add	r3, r2
 8002302:	b2da      	uxtb	r2, r3
 8002304:	7d7b      	ldrb	r3, [r7, #21]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 0306 	and.w	r3, r3, #6
 800230e:	b2db      	uxtb	r3, r3
 8002310:	4413      	add	r3, r2
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3302      	adds	r3, #2
 8002316:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800231a:	7d3b      	ldrb	r3, [r7, #20]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	b29b      	uxth	r3, r3
 8002328:	4413      	add	r3, r2
 800232a:	b29a      	uxth	r2, r3
 800232c:	7cbb      	ldrb	r3, [r7, #18]
 800232e:	029b      	lsls	r3, r3, #10
 8002330:	b29b      	uxth	r3, r3
 8002332:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002336:	b29b      	uxth	r3, r3
 8002338:	4413      	add	r3, r2
 800233a:	b29b      	uxth	r3, r3
 800233c:	3301      	adds	r3, #1
 800233e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002340:	8bfa      	ldrh	r2, [r7, #30]
 8002342:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002346:	3b09      	subs	r3, #9
 8002348:	409a      	lsls	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8002354:	e056      	b.n	8002404 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800235c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002364:	e055      	b.n	8002412 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002366:	f7ff fbe7 	bl	8001b38 <SD_ReadyWait>
 800236a:	4603      	mov	r3, r0
 800236c:	2bff      	cmp	r3, #255	@ 0xff
 800236e:	d14b      	bne.n	8002408 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002376:	e047      	b.n	8002408 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002378:	2100      	movs	r1, #0
 800237a:	2049      	movs	r0, #73	@ 0x49
 800237c:	f7ff fce6 	bl	8001d4c <SD_SendCmd>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d142      	bne.n	800240c <SD_disk_ioctl+0x240>
 8002386:	2110      	movs	r1, #16
 8002388:	6a38      	ldr	r0, [r7, #32]
 800238a:	f7ff fc55 	bl	8001c38 <SD_RxDataBlock>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d03b      	beq.n	800240c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800239a:	e037      	b.n	800240c <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800239c:	2100      	movs	r1, #0
 800239e:	204a      	movs	r0, #74	@ 0x4a
 80023a0:	f7ff fcd4 	bl	8001d4c <SD_SendCmd>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d132      	bne.n	8002410 <SD_disk_ioctl+0x244>
 80023aa:	2110      	movs	r1, #16
 80023ac:	6a38      	ldr	r0, [r7, #32]
 80023ae:	f7ff fc43 	bl	8001c38 <SD_RxDataBlock>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02b      	beq.n	8002410 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80023be:	e027      	b.n	8002410 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80023c0:	2100      	movs	r1, #0
 80023c2:	207a      	movs	r0, #122	@ 0x7a
 80023c4:	f7ff fcc2 	bl	8001d4c <SD_SendCmd>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80023d4:	e00b      	b.n	80023ee <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80023d6:	6a3c      	ldr	r4, [r7, #32]
 80023d8:	1c63      	adds	r3, r4, #1
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	f7ff fb80 	bl	8001ae0 <SPI_RxByte>
 80023e0:	4603      	mov	r3, r0
 80023e2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80023e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023e8:	3301      	adds	r3, #1
 80023ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80023ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d9ef      	bls.n	80023d6 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 80023fc:	2304      	movs	r3, #4
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002402:	e006      	b.n	8002412 <SD_disk_ioctl+0x246>
      break;
 8002404:	bf00      	nop
 8002406:	e004      	b.n	8002412 <SD_disk_ioctl+0x246>
      break;
 8002408:	bf00      	nop
 800240a:	e002      	b.n	8002412 <SD_disk_ioctl+0x246>
      break;
 800240c:	bf00      	nop
 800240e:	e000      	b.n	8002412 <SD_disk_ioctl+0x246>
      break;
 8002410:	bf00      	nop
    }

    DESELECT();
 8002412:	f7ff fb3f 	bl	8001a94 <DESELECT>
    SPI_RxByte();
 8002416:	f7ff fb63 	bl	8001ae0 <SPI_RxByte>
  }

  return res;
 800241a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800241e:	4618      	mov	r0, r3
 8002420:	372c      	adds	r7, #44	@ 0x2c
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	20000008 	.word	0x20000008

0800242c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	@ 0x28
 8002430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002442:	4b3c      	ldr	r3, [pc, #240]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	4a3b      	ldr	r2, [pc, #236]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002448:	f043 0320 	orr.w	r3, r3, #32
 800244c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244e:	4b39      	ldr	r3, [pc, #228]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b36      	ldr	r3, [pc, #216]	@ (8002534 <MX_GPIO_Init+0x108>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	4a35      	ldr	r2, [pc, #212]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002466:	4b33      	ldr	r3, [pc, #204]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002472:	4b30      	ldr	r3, [pc, #192]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	4a2f      	ldr	r2, [pc, #188]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800247e:	4b2d      	ldr	r3, [pc, #180]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	4b2a      	ldr	r3, [pc, #168]	@ (8002534 <MX_GPIO_Init+0x108>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	4a29      	ldr	r2, [pc, #164]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002496:	4b27      	ldr	r3, [pc, #156]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2110      	movs	r1, #16
 80024a6:	4824      	ldr	r0, [pc, #144]	@ (8002538 <MX_GPIO_Init+0x10c>)
 80024a8:	f003 ff54 	bl	8006354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80024b2:	4822      	ldr	r0, [pc, #136]	@ (800253c <MX_GPIO_Init+0x110>)
 80024b4:	f003 ff4e 	bl	8006354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024b8:	2310      	movs	r3, #16
 80024ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024bc:	2301      	movs	r3, #1
 80024be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	481a      	ldr	r0, [pc, #104]	@ (8002538 <MX_GPIO_Init+0x10c>)
 80024d0:	f003 fdbe 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80024d4:	2306      	movs	r3, #6
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	4814      	ldr	r0, [pc, #80]	@ (800253c <MX_GPIO_Init+0x110>)
 80024ea:	f003 fdb1 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024ee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80024f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	480d      	ldr	r0, [pc, #52]	@ (800253c <MX_GPIO_Init+0x110>)
 8002508:	f003 fda2 	bl	8006050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	2007      	movs	r0, #7
 8002512:	f003 fa2a 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002516:	2007      	movs	r0, #7
 8002518:	f003 fa41 	bl	800599e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	2008      	movs	r0, #8
 8002522:	f003 fa22 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002526:	2008      	movs	r0, #8
 8002528:	f003 fa39 	bl	800599e <HAL_NVIC_EnableIRQ>

}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	@ 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	48000800 	.word	0x48000800
 800253c:	48000400 	.word	0x48000400

08002540 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002544:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002546:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <MX_I2C3_Init+0x78>)
 8002548:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 800254a:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800254c:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <MX_I2C3_Init+0x7c>)
 800254e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002550:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002556:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002558:	2201      	movs	r2, #1
 800255a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800255c:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002562:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800257a:	480e      	ldr	r0, [pc, #56]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800257c:	f003 ff25 	bl	80063ca <HAL_I2C_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002586:	f000 fa85 	bl	8002a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800258a:	2100      	movs	r1, #0
 800258c:	4809      	ldr	r0, [pc, #36]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800258e:	f004 fca7 	bl	8006ee0 <HAL_I2CEx_ConfigAnalogFilter>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002598:	f000 fa7c 	bl	8002a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800259c:	2100      	movs	r1, #0
 800259e:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <MX_I2C3_Init+0x74>)
 80025a0:	f004 fce9 	bl	8006f76 <HAL_I2CEx_ConfigDigitalFilter>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80025aa:	f000 fa73 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200003b4 	.word	0x200003b4
 80025b8:	40007800 	.word	0x40007800
 80025bc:	10b17db5 	.word	0x10b17db5

080025c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b09c      	sub	sp, #112	@ 0x70
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	2244      	movs	r2, #68	@ 0x44
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00d fc59 	bl	800fe98 <memset>
  if(i2cHandle->Instance==I2C3)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2e      	ldr	r2, [pc, #184]	@ (80026a4 <HAL_I2C_MspInit+0xe4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d155      	bne.n	800269c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80025f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f005 fbdc 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800260a:	f000 fa43 	bl	8002a94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	4a25      	ldr	r2, [pc, #148]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261a:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a1f      	ldr	r2, [pc, #124]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800263e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002642:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002644:	2312      	movs	r3, #18
 8002646:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002650:	2302      	movs	r3, #2
 8002652:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265e:	f003 fcf7 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002662:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002666:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002668:	2312      	movs	r3, #18
 800266a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002674:	2308      	movs	r3, #8
 8002676:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002678:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800267c:	4619      	mov	r1, r3
 800267e:	480b      	ldr	r0, [pc, #44]	@ (80026ac <HAL_I2C_MspInit+0xec>)
 8002680:	f003 fce6 	bl	8006050 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 800268a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800268e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800269c:	bf00      	nop
 800269e:	3770      	adds	r7, #112	@ 0x70
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40007800 	.word	0x40007800
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000800 	.word	0x48000800

080026b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b6:	f001 fdac 	bl	8004212 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ba:	f000 f8df 	bl	800287c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026be:	f7ff feb5 	bl	800242c <MX_GPIO_Init>
  MX_DMA_Init();
 80026c2:	f7ff f991 	bl	80019e8 <MX_DMA_Init>
  MX_SPI1_Init();
 80026c6:	f000 fd13 	bl	80030f0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80026ca:	f001 fd1d 	bl	8004108 <MX_USB_PCD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80026ce:	f009 fbeb 	bl	800bea8 <MX_FATFS_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <main+0x2c>
    Error_Handler();
 80026d8:	f000 f9dc 	bl	8002a94 <Error_Handler>
  }
  MX_I2C3_Init();
 80026dc:	f7ff ff30 	bl	8002540 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80026e0:	f001 fa50 	bl	8003b84 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80026e4:	f7fe fe3e 	bl	8001364 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80026e8:	f001 fa96 	bl	8003c18 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80026ec:	f001 f8e4 	bl	80038b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80026f0:	f001 f95a 	bl	80039a8 <MX_TIM4_Init>
  MX_ADC2_Init();
 80026f4:	f7fe fee0 	bl	80014b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 5);
 80026f8:	2205      	movs	r2, #5
 80026fa:	4945      	ldr	r1, [pc, #276]	@ (8002810 <main+0x160>)
 80026fc:	4845      	ldr	r0, [pc, #276]	@ (8002814 <main+0x164>)
 80026fe:	f002 f9bd 	bl	8004a7c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 8002702:	4b45      	ldr	r3, [pc, #276]	@ (8002818 <main+0x168>)
 8002704:	2201      	movs	r2, #1
 8002706:	4619      	mov	r1, r3
 8002708:	4844      	ldr	r0, [pc, #272]	@ (800281c <main+0x16c>)
 800270a:	f002 f9b7 	bl	8004a7c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim4);
 800270e:	4844      	ldr	r0, [pc, #272]	@ (8002820 <main+0x170>)
 8002710:	f006 fb4e 	bl	8008db0 <HAL_TIM_Base_Start_IT>

  TIM3->CCR1=0;
 8002714:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <main+0x174>)
 8002716:	2200      	movs	r2, #0
 8002718:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800271a:	2100      	movs	r1, #0
 800271c:	4842      	ldr	r0, [pc, #264]	@ (8002828 <main+0x178>)
 800271e:	f006 fc13 	bl	8008f48 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 8002722:	2201      	movs	r2, #1
 8002724:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002728:	4840      	ldr	r0, [pc, #256]	@ (800282c <main+0x17c>)
 800272a:	f003 fe13 	bl	8006354 <HAL_GPIO_WritePin>


  HAL_Delay(100);
 800272e:	2064      	movs	r0, #100	@ 0x64
 8002730:	f001 fde0 	bl	80042f4 <HAL_Delay>
  HAL_UART_Abort(&huart1);
 8002734:	483e      	ldr	r0, [pc, #248]	@ (8002830 <main+0x180>)
 8002736:	f007 fedd 	bl	800a4f4 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 800273a:	2240      	movs	r2, #64	@ 0x40
 800273c:	493d      	ldr	r1, [pc, #244]	@ (8002834 <main+0x184>)
 800273e:	483c      	ldr	r0, [pc, #240]	@ (8002830 <main+0x180>)
 8002740:	f007 fe8c 	bl	800a45c <HAL_UART_Receive_DMA>

  HAL_Delay(100);
 8002744:	2064      	movs	r0, #100	@ 0x64
 8002746:	f001 fdd5 	bl	80042f4 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 800274a:	483b      	ldr	r0, [pc, #236]	@ (8002838 <main+0x188>)
 800274c:	f007 fed2 	bl	800a4f4 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 8002750:	221e      	movs	r2, #30
 8002752:	493a      	ldr	r1, [pc, #232]	@ (800283c <main+0x18c>)
 8002754:	4838      	ldr	r0, [pc, #224]	@ (8002838 <main+0x188>)
 8002756:	f007 fe81 	bl	800a45c <HAL_UART_Receive_DMA>




  f_mount(&fs, "", 0);
 800275a:	2200      	movs	r2, #0
 800275c:	4938      	ldr	r1, [pc, #224]	@ (8002840 <main+0x190>)
 800275e:	4839      	ldr	r0, [pc, #228]	@ (8002844 <main+0x194>)
 8002760:	f00b f820 	bl	800d7a4 <f_mount>
//  f_close(&fil);
//  /* Unmount SDCARD */
//  f_mount(NULL, "", 1);


  int indexboucle=0;
 8002764:	2300      	movs	r3, #0
 8002766:	607b      	str	r3, [r7, #4]
  int tarvosen=0;
 8002768:	2300      	movs	r3, #0
 800276a:	603b      	str	r3, [r7, #0]
  f_open(&fil, "adc.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800276c:	2213      	movs	r2, #19
 800276e:	4936      	ldr	r1, [pc, #216]	@ (8002848 <main+0x198>)
 8002770:	4836      	ldr	r0, [pc, #216]	@ (800284c <main+0x19c>)
 8002772:	f00b f85d 	bl	800d830 <f_open>

  		   f_getfree("", &fre_clust, &pfs);
 8002776:	4a36      	ldr	r2, [pc, #216]	@ (8002850 <main+0x1a0>)
 8002778:	4936      	ldr	r1, [pc, #216]	@ (8002854 <main+0x1a4>)
 800277a:	4831      	ldr	r0, [pc, #196]	@ (8002840 <main+0x190>)
 800277c:	f00b fa12 	bl	800dba4 <f_getfree>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Init_HighPerf_Mode_6_axis();
 8002780:	f7fe fc58 	bl	8001034 <Init_HighPerf_Mode_6_axis>
  INIT_PERM_TARVOS(0x16, 0x15); //mon adresse est 1° et on envoit à 2°
 8002784:	2115      	movs	r1, #21
 8002786:	2016      	movs	r0, #22
 8002788:	f000 ff10 	bl	80035ac <INIT_PERM_TARVOS>

  while (1)
   {
	if (flag_sensor == 1){
 800278c:	4b32      	ldr	r3, [pc, #200]	@ (8002858 <main+0x1a8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d11e      	bne.n	80027d2 <main+0x122>
		temp_data = Read_temp();
 8002794:	f7fe fd96 	bl	80012c4 <Read_temp>
 8002798:	4603      	mov	r3, r0
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd feea 	bl	8000574 <__aeabi_i2d>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	492d      	ldr	r1, [pc, #180]	@ (800285c <main+0x1ac>)
 80027a6:	e9c1 2300 	strd	r2, r3, [r1]
		Read_sensor_data(accel_data,gyro_data);
 80027aa:	492d      	ldr	r1, [pc, #180]	@ (8002860 <main+0x1b0>)
 80027ac:	482d      	ldr	r0, [pc, #180]	@ (8002864 <main+0x1b4>)
 80027ae:	f7fe fcc9 	bl	8001144 <Read_sensor_data>
		conversion_char(envoi);
 80027b2:	482d      	ldr	r0, [pc, #180]	@ (8002868 <main+0x1b8>)
 80027b4:	f000 f8b4 	bl	8002920 <conversion_char>
		nmea_parse(&myData, (uint8_t *) GPS_RX_Buffer);
 80027b8:	492c      	ldr	r1, [pc, #176]	@ (800286c <main+0x1bc>)
 80027ba:	482d      	ldr	r0, [pc, #180]	@ (8002870 <main+0x1c0>)
 80027bc:	f000 fbfe 	bl	8002fbc <nmea_parse>
		SEND_DATA_NETW(envoi, 0x82, 0x15, strlen(envoi));
 80027c0:	4829      	ldr	r0, [pc, #164]	@ (8002868 <main+0x1b8>)
 80027c2:	f7fd fd7d 	bl	80002c0 <strlen>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2215      	movs	r2, #21
 80027ca:	2182      	movs	r1, #130	@ 0x82
 80027cc:	4826      	ldr	r0, [pc, #152]	@ (8002868 <main+0x1b8>)
 80027ce:	f000 ffb5 	bl	800373c <SEND_DATA_NETW>

	}
	if (vbat <= 6.4){
 80027d2:	4b28      	ldr	r3, [pc, #160]	@ (8002874 <main+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fede 	bl	8000598 <__aeabi_f2d>
 80027dc:	a30a      	add	r3, pc, #40	@ (adr r3, 8002808 <main+0x158>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f7fe f9ad 	bl	8000b40 <__aeabi_dcmple>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <main+0x148>
		SEND_DATA_NETW("$2,batterie faible#", 0x82, 0x15, strlen("$2,batterie faible#"));
 80027ec:	2313      	movs	r3, #19
 80027ee:	2215      	movs	r2, #21
 80027f0:	2182      	movs	r1, #130	@ 0x82
 80027f2:	4821      	ldr	r0, [pc, #132]	@ (8002878 <main+0x1c8>)
 80027f4:	f000 ffa2 	bl	800373c <SEND_DATA_NETW>
	}
//	if(TIM3->CCR1>=120){
//		TIM3->CCR1=65;
//
//	}
	TIM3->CCR1=1530;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <main+0x174>)
 80027fa:	f240 52fa 	movw	r2, #1530	@ 0x5fa
 80027fe:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_Delay(100);
 8002800:	2064      	movs	r0, #100	@ 0x64
 8002802:	f001 fd77 	bl	80042f4 <HAL_Delay>
	if (flag_sensor == 1){
 8002806:	e7c1      	b.n	800278c <main+0xdc>
 8002808:	9999999a 	.word	0x9999999a
 800280c:	40199999 	.word	0x40199999
 8002810:	20000be0 	.word	0x20000be0
 8002814:	20000214 	.word	0x20000214
 8002818:	20000be8 	.word	0x20000be8
 800281c:	20000280 	.word	0x20000280
 8002820:	20000e7c 	.word	0x20000e7c
 8002824:	40000400 	.word	0x40000400
 8002828:	20000e30 	.word	0x20000e30
 800282c:	48000400 	.word	0x48000400
 8002830:	20000f5c 	.word	0x20000f5c
 8002834:	20000b90 	.word	0x20000b90
 8002838:	20000ec8 	.word	0x20000ec8
 800283c:	20000970 	.word	0x20000970
 8002840:	08012854 	.word	0x08012854
 8002844:	20000408 	.word	0x20000408
 8002848:	08012858 	.word	0x08012858
 800284c:	2000063c 	.word	0x2000063c
 8002850:	20000638 	.word	0x20000638
 8002854:	2000086c 	.word	0x2000086c
 8002858:	20000e18 	.word	0x20000e18
 800285c:	20000d30 	.word	0x20000d30
 8002860:	20000d24 	.word	0x20000d24
 8002864:	20000d1c 	.word	0x20000d1c
 8002868:	20000c04 	.word	0x20000c04
 800286c:	20000990 	.word	0x20000990
 8002870:	20000d38 	.word	0x20000d38
 8002874:	20000bf4 	.word	0x20000bf4
 8002878:	08012860 	.word	0x08012860

0800287c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b094      	sub	sp, #80	@ 0x50
 8002880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	f107 0318 	add.w	r3, r7, #24
 8002886:	2238      	movs	r2, #56	@ 0x38
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f00d fb04 	bl	800fe98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800289e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80028a2:	f004 fcad 	bl	8007200 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 80028a6:	2323      	movs	r3, #35	@ 0x23
 80028a8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028b6:	2340      	movs	r3, #64	@ 0x40
 80028b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80028ba:	2301      	movs	r3, #1
 80028bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028be:	2302      	movs	r3, #2
 80028c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028c2:	2303      	movs	r3, #3
 80028c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80028ca:	2308      	movs	r3, #8
 80028cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ce:	2302      	movs	r3, #2
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028d2:	2302      	movs	r3, #2
 80028d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028d6:	2302      	movs	r3, #2
 80028d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028da:	f107 0318 	add.w	r3, r7, #24
 80028de:	4618      	mov	r0, r3
 80028e0:	f004 fd42 	bl	8007368 <HAL_RCC_OscConfig>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80028ea:	f000 f8d3 	bl	8002a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ee:	230f      	movs	r3, #15
 80028f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f2:	2303      	movs	r3, #3
 80028f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	2102      	movs	r1, #2
 8002906:	4618      	mov	r0, r3
 8002908:	f005 f840 	bl	800798c <HAL_RCC_ClockConfig>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002912:	f000 f8bf 	bl	8002a94 <Error_Handler>
  }
}
 8002916:	bf00      	nop
 8002918:	3750      	adds	r7, #80	@ 0x50
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <conversion_char>:
  for (size_t i = 0; i < taille; i++) {
    destination[i] = (char)source[i];
  }
}

void conversion_char(char *envoi /*,uint16_t accel_data,uint16_t gyro_data,uint8_t position_data,uint8_t time_data,uint8_t baro_data, uint8_t temp_data*/){
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
    memset((char* )envoi, '\0', sizeof(envoi));
 8002928:	2204      	movs	r2, #4
 800292a:	2100      	movs	r1, #0
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f00d fab3 	bl	800fe98 <memset>
    size_t len;
    envoi[0]='$';
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2224      	movs	r2, #36	@ 0x24
 8002936:	701a      	strb	r2, [r3, #0]
    envoi[1]='1';
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3301      	adds	r3, #1
 800293c:	2231      	movs	r2, #49	@ 0x31
 800293e:	701a      	strb	r2, [r3, #0]
    mef_accel_gyro((char* )accel_gyro,sizeof(accel_gyro),accel_data,gyro_data);
 8002940:	4b26      	ldr	r3, [pc, #152]	@ (80029dc <conversion_char+0xbc>)
 8002942:	4a27      	ldr	r2, [pc, #156]	@ (80029e0 <conversion_char+0xc0>)
 8002944:	213c      	movs	r1, #60	@ 0x3c
 8002946:	4827      	ldr	r0, [pc, #156]	@ (80029e4 <conversion_char+0xc4>)
 8002948:	f000 f852 	bl	80029f0 <mef_accel_gyro>
    len = strlen(envoi);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fd fcb7 	bl	80002c0 <strlen>
 8002952:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i<(sizeof(accel_gyro));i++){
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e00c      	b.n	8002974 <conversion_char+0x54>
    	envoi[i+len] = accel_gyro[i];
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	491f      	ldr	r1, [pc, #124]	@ (80029e4 <conversion_char+0xc4>)
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	440a      	add	r2, r1
 800296a:	7812      	ldrb	r2, [r2, #0]
 800296c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(accel_gyro));i++){
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3301      	adds	r3, #1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b3b      	cmp	r3, #59	@ 0x3b
 8002978:	d9ef      	bls.n	800295a <conversion_char+0x3a>
    }
    len = strlen(envoi);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fd fca0 	bl	80002c0 <strlen>
 8002980:	60f8      	str	r0, [r7, #12]
    mef_temp((char* )temperature, sizeof(temperature),temp_data);
 8002982:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <conversion_char+0xc8>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f954 	bl	8000c38 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
 8002992:	ee00 3a10 	vmov	s0, r3
 8002996:	2114      	movs	r1, #20
 8002998:	4814      	ldr	r0, [pc, #80]	@ (80029ec <conversion_char+0xcc>)
 800299a:	f000 f861 	bl	8002a60 <mef_temp>
    for (int i = 0; i<(sizeof(temperature));i++){
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	e00c      	b.n	80029be <conversion_char+0x9e>
        	envoi[i+len] = temperature[i];
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	490f      	ldr	r1, [pc, #60]	@ (80029ec <conversion_char+0xcc>)
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	440a      	add	r2, r1
 80029b4:	7812      	ldrb	r2, [r2, #0]
 80029b6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(temperature));i++){
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	3301      	adds	r3, #1
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b13      	cmp	r3, #19
 80029c2:	d9ef      	bls.n	80029a4 <conversion_char+0x84>
    }
    envoi[strlen(envoi)]='#';
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fd fc7b 	bl	80002c0 <strlen>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	2223      	movs	r2, #35	@ 0x23
 80029d2:	701a      	strb	r2, [r3, #0]
}
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000d24 	.word	0x20000d24
 80029e0:	20000d1c 	.word	0x20000d1c
 80029e4:	20000ccc 	.word	0x20000ccc
 80029e8:	20000d30 	.word	0x20000d30
 80029ec:	20000d08 	.word	0x20000d08

080029f0 <mef_accel_gyro>:

void mef_accel_gyro(char *buffer, size_t buffer_size, uint16_t accel_data[3], uint16_t gyro_data[3]) {
 80029f0:	b5b0      	push	{r4, r5, r7, lr}
 80029f2:	b08c      	sub	sp, #48	@ 0x30
 80029f4:	af06      	add	r7, sp, #24
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
    int len = snprintf(buffer, buffer_size, "%d,%d,%d,%d,%d,%d,",
                       accel_data[0], accel_data[1], accel_data[2],
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%d,%d,%d,%d,%d,%d,",
 8002a02:	461d      	mov	r5, r3
                       accel_data[0], accel_data[1], accel_data[2],
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3302      	adds	r3, #2
 8002a08:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%d,%d,%d,%d,%d,%d,",
 8002a0a:	461a      	mov	r2, r3
                       accel_data[0], accel_data[1], accel_data[2],
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%d,%d,%d,%d,%d,%d,",
 8002a12:	4619      	mov	r1, r3
                       gyro_data[0], gyro_data[1], gyro_data[2]);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%d,%d,%d,%d,%d,%d,",
 8002a18:	4618      	mov	r0, r3
                       gyro_data[0], gyro_data[1], gyro_data[2]);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%d,%d,%d,%d,%d,%d,",
 8002a20:	461c      	mov	r4, r3
                       gyro_data[0], gyro_data[1], gyro_data[2]);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	3304      	adds	r3, #4
 8002a26:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%d,%d,%d,%d,%d,%d,",
 8002a28:	9304      	str	r3, [sp, #16]
 8002a2a:	9403      	str	r4, [sp, #12]
 8002a2c:	9002      	str	r0, [sp, #8]
 8002a2e:	9101      	str	r1, [sp, #4]
 8002a30:	9200      	str	r2, [sp, #0]
 8002a32:	462b      	mov	r3, r5
 8002a34:	4a09      	ldr	r2, [pc, #36]	@ (8002a5c <mef_accel_gyro+0x6c>)
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f00d f901 	bl	800fc40 <sniprintf>
 8002a3e:	6178      	str	r0, [r7, #20]

    // S'assurer que la chaîne est bien terminée
    if (len >= buffer_size) {
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d805      	bhi.n	8002a54 <mef_accel_gyro+0x64>
        buffer[buffer_size - 1] = '\0';
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
    }
}
 8002a54:	bf00      	nop
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a5c:	08012874 	.word	0x08012874

08002a60 <mef_temp>:

void mef_temp(char *buffer, size_t buffer_size, float temperature) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	ed87 0a01 	vstr	s0, [r7, #4]
    snprintf((char* )buffer, buffer_size, "%0.1lf",(double) temperature);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fd fd92 	bl	8000598 <__aeabi_f2d>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	e9cd 2300 	strd	r2, r3, [sp]
 8002a7c:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <mef_temp+0x30>)
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f00d f8dd 	bl	800fc40 <sniprintf>
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	08012888 	.word	0x08012888

08002a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a98:	b672      	cpsid	i
}
 8002a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <Error_Handler+0x8>

08002aa0 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7fd fc09 	bl	80002c0 <strlen>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d801      	bhi.n	8002ab8 <gps_checksum+0x18>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e038      	b.n	8002b2a <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fd fc01 	bl	80002c0 <strlen>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	3b04      	subs	r3, #4
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fd fbf8 	bl	80002c0 <strlen>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	3b03      	subs	r3, #3
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	e00a      	b.n	8002afc <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	4053      	eors	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	3301      	adds	r3, #1
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7fd fbdf 	bl	80002c0 <strlen>
 8002b02:	4603      	mov	r3, r0
 8002b04:	1f5a      	subs	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8ec      	bhi.n	8002ae6 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	2210      	movs	r2, #16
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00c f8fd 	bl	800ed14 <strtol>
 8002b1a:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d101      	bne.n	8002b28 <gps_checksum+0x88>
        return 1;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002b28:	2300      	movs	r3, #0
    }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b0b7      	sub	sp, #220	@ 0xdc
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002b44:	f107 0320 	add.w	r3, r7, #32
 8002b48:	2264      	movs	r2, #100	@ 0x64
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f00d f9a3 	bl	800fe98 <memset>
    char *marker = strtok(inputString, ",");
 8002b52:	49c2      	ldr	r1, [pc, #776]	@ (8002e5c <nmea_GPGGA+0x328>)
 8002b54:	6838      	ldr	r0, [r7, #0]
 8002b56:	f00d f9b9 	bl	800fecc <strtok>
 8002b5a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002b5e:	e027      	b.n	8002bb0 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002b60:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002b64:	f7fd fbac 	bl	80002c0 <strlen>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8002b70:	1c63      	adds	r3, r4, #1
 8002b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002b76:	4610      	mov	r0, r2
 8002b78:	f00b f926 	bl	800ddc8 <malloc>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	00a3      	lsls	r3, r4, #2
 8002b82:	33d8      	adds	r3, #216	@ 0xd8
 8002b84:	443b      	add	r3, r7
 8002b86:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8002b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	33d8      	adds	r3, #216	@ 0xd8
 8002b94:	443b      	add	r3, r7
 8002b96:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002b9a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f00d fa8d 	bl	80100be <strcpy>
        marker = strtok(NULL, ",");
 8002ba4:	49ad      	ldr	r1, [pc, #692]	@ (8002e5c <nmea_GPGGA+0x328>)
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f00d f990 	bl	800fecc <strtok>
 8002bac:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002bb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1d3      	bne.n	8002b60 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8002bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	332c      	adds	r3, #44	@ 0x2c
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f00d fa74 	bl	80100be <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002bd6:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002bda:	2b53      	cmp	r3, #83	@ 0x53
 8002bdc:	d004      	beq.n	8002be8 <nmea_GPGGA+0xb4>
 8002bde:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002be2:	2b4e      	cmp	r3, #78	@ 0x4e
 8002be4:	f040 8159 	bne.w	8002e9a <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bee:	e010      	b.n	8002c12 <nmea_GPGGA+0xde>
 8002bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bf6:	4413      	add	r3, r2
 8002bf8:	7819      	ldrb	r1, [r3, #0]
 8002bfa:	f107 021c 	add.w	r2, r7, #28
 8002bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c02:	4413      	add	r3, r2
 8002c04:	460a      	mov	r2, r1
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	ddea      	ble.n	8002bf0 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c20:	e011      	b.n	8002c46 <nmea_GPGGA+0x112>
 8002c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c28:	3302      	adds	r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	7819      	ldrb	r1, [r3, #0]
 8002c2e:	f107 0214 	add.w	r2, r7, #20
 8002c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c36:	4413      	add	r3, r2
 8002c38:	460a      	mov	r2, r1
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c40:	3301      	adds	r3, #1
 8002c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	dde9      	ble.n	8002c22 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	220a      	movs	r2, #10
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f00c f85c 	bl	800ed14 <strtol>
 8002c5c:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f00b ff74 	bl	800eb54 <strtof>
 8002c6c:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002c70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7c:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8002c80:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 8002e60 <nmea_GPGGA+0x32c>
 8002c84:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8c:	ee17 0a90 	vmov	r0, s15
 8002c90:	f7fd fc82 	bl	8000598 <__aeabi_f2d>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ca2:	e010      	b.n	8002cc6 <nmea_GPGGA+0x192>
 8002ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002caa:	4413      	add	r3, r2
 8002cac:	7819      	ldrb	r1, [r3, #0]
 8002cae:	f107 0210 	add.w	r2, r7, #16
 8002cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	460a      	mov	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	ddea      	ble.n	8002ca4 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cd4:	e011      	b.n	8002cfa <nmea_GPGGA+0x1c6>
 8002cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cdc:	3303      	adds	r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	7819      	ldrb	r1, [r3, #0]
 8002ce2:	f107 0208 	add.w	r2, r7, #8
 8002ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cea:	4413      	add	r3, r2
 8002cec:	460a      	mov	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	dde9      	ble.n	8002cd6 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	220a      	movs	r2, #10
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f00c f802 	bl	800ed14 <strtol>
 8002d10:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00b ff1a 	bl	800eb54 <strtof>
 8002d20:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d30:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002d34:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 8002e60 <nmea_GPGGA+0x32c>
 8002d38:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d40:	ee17 0a90 	vmov	r0, s15
 8002d44:	f7fd fc28 	bl	8000598 <__aeabi_f2d>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002d5c:	f7fd fedc 	bl	8000b18 <__aeabi_dcmpeq>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d176      	bne.n	8002e54 <nmea_GPGGA+0x320>
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002d72:	f7fd fed1 	bl	8000b18 <__aeabi_dcmpeq>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d16b      	bne.n	8002e54 <nmea_GPGGA+0x320>
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	4b38      	ldr	r3, [pc, #224]	@ (8002e64 <nmea_GPGGA+0x330>)
 8002d82:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002d86:	f7fd fed1 	bl	8000b2c <__aeabi_dcmplt>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d061      	beq.n	8002e54 <nmea_GPGGA+0x320>
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <nmea_GPGGA+0x334>)
 8002d96:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002d9a:	f7fd fec7 	bl	8000b2c <__aeabi_dcmplt>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d057      	beq.n	8002e54 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002daa:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8002db4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002dbc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8002dc6:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00b fec1 	bl	800eb54 <strtof>
 8002dd2:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8002dd6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002dda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de2:	d102      	bne.n	8002dea <nmea_GPGGA+0x2b6>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	e001      	b.n	8002dee <nmea_GPGGA+0x2ba>
 8002dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8002df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df4:	220a      	movs	r2, #10
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f00b ff8b 	bl	800ed14 <strtol>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e06:	220a      	movs	r2, #10
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f00b ff82 	bl	800ed14 <strtol>
 8002e10:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bfcc      	ite	gt
 8002e1c:	2301      	movgt	r3, #1
 8002e1e:	2300      	movle	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8002e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f00b fe91 	bl	800eb54 <strtof>
 8002e32:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8002e36:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002e3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	d102      	bne.n	8002e4a <nmea_GPGGA+0x316>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	e001      	b.n	8002e4e <nmea_GPGGA+0x31a>
 8002e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002e52:	e022      	b.n	8002e9a <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002e5a:	e016      	b.n	8002e8a <nmea_GPGGA+0x356>
 8002e5c:	08012890 	.word	0x08012890
 8002e60:	42700000 	.word	0x42700000
 8002e64:	40568000 	.word	0x40568000
 8002e68:	40668000 	.word	0x40668000
 8002e6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	33d8      	adds	r3, #216	@ 0xd8
 8002e74:	443b      	add	r3, r7
 8002e76:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f00a ffac 	bl	800ddd8 <free>
 8002e80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e84:	3301      	adds	r3, #1
 8002e86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002e8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e92:	429a      	cmp	r2, r3
 8002e94:	dbea      	blt.n	8002e6c <nmea_GPGGA+0x338>
            return 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e019      	b.n	8002ece <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea0:	e00e      	b.n	8002ec0 <nmea_GPGGA+0x38c>
 8002ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	33d8      	adds	r3, #216	@ 0xd8
 8002eaa:	443b      	add	r3, r7
 8002eac:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f00a ff91 	bl	800ddd8 <free>
 8002eb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ec0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	dbea      	blt.n	8002ea2 <nmea_GPGGA+0x36e>
    return 1;
 8002ecc:	2301      	movs	r3, #1
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	37dc      	adds	r7, #220	@ 0xdc
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}
 8002ed6:	bf00      	nop

08002ed8 <nmea_GNRMC>:
    return 1;
}



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b0a1      	sub	sp, #132	@ 0x84
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8002ee6:	f107 030c 	add.w	r3, r7, #12
 8002eea:	2264      	movs	r2, #100	@ 0x64
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f00c ffd2 	bl	800fe98 <memset>
    char *marker = strtok(inputString, ",");
 8002ef4:	4930      	ldr	r1, [pc, #192]	@ (8002fb8 <nmea_GNRMC+0xe0>)
 8002ef6:	6838      	ldr	r0, [r7, #0]
 8002ef8:	f00c ffe8 	bl	800fecc <strtok>
 8002efc:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8002efe:	e021      	b.n	8002f44 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002f00:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002f02:	f7fd f9dd 	bl	80002c0 <strlen>
 8002f06:	4603      	mov	r3, r0
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8002f0c:	1c63      	adds	r3, r4, #1
 8002f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f10:	4610      	mov	r0, r2
 8002f12:	f00a ff59 	bl	800ddc8 <malloc>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	00a3      	lsls	r3, r4, #2
 8002f1c:	3380      	adds	r3, #128	@ 0x80
 8002f1e:	443b      	add	r3, r7
 8002f20:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8002f24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f26:	3b01      	subs	r3, #1
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3380      	adds	r3, #128	@ 0x80
 8002f2c:	443b      	add	r3, r7
 8002f2e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002f32:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002f34:	4618      	mov	r0, r3
 8002f36:	f00d f8c2 	bl	80100be <strcpy>
        marker = strtok(NULL, ",");
 8002f3a:	491f      	ldr	r1, [pc, #124]	@ (8002fb8 <nmea_GNRMC+0xe0>)
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f00c ffc5 	bl	800fecc <strtok>
 8002f42:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8002f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1da      	bne.n	8002f00 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8002f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f00b fe00 	bl	800eb54 <strtof>
 8002f54:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 8002f58:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002f5a:	f7fd fb1d 	bl	8000598 <__aeabi_f2d>
 8002f5e:	a314      	add	r3, pc, #80	@ (adr r3, 8002fb0 <nmea_GNRMC+0xd8>)
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f7fd fc9a 	bl	800089c <__aeabi_ddiv>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fe62 	bl	8000c38 <__aeabi_d2f>
 8002f74:	4602      	mov	r2, r0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f7e:	e00b      	b.n	8002f98 <nmea_GNRMC+0xc0>
 8002f80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	3380      	adds	r3, #128	@ 0x80
 8002f86:	443b      	add	r3, r7
 8002f88:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f00a ff23 	bl	800ddd8 <free>
 8002f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f94:	3301      	adds	r3, #1
 8002f96:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f98:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	dbef      	blt.n	8002f80 <nmea_GNRMC+0xa8>
    return 1;
 8002fa0:	2301      	movs	r3, #1
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3784      	adds	r7, #132	@ 0x84
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	f3af 8000 	nop.w
 8002fb0:	be76c8b4 	.word	0xbe76c8b4
 8002fb4:	3fff1a9f 	.word	0x3fff1a9f
 8002fb8:	08012890 	.word	0x08012890

08002fbc <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002fc6:	223c      	movs	r2, #60	@ 0x3c
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4844      	ldr	r0, [pc, #272]	@ (80030dc <nmea_parse+0x120>)
 8002fcc:	f00c ff64 	bl	800fe98 <memset>
    char * token = strtok(buffer, "$");
 8002fd0:	4943      	ldr	r1, [pc, #268]	@ (80030e0 <nmea_parse+0x124>)
 8002fd2:	6838      	ldr	r0, [r7, #0]
 8002fd4:	f00c ff7a 	bl	800fecc <strtok>
 8002fd8:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8002fde:	e01d      	b.n	800301c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f7fd f96d 	bl	80002c0 <strlen>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	693c      	ldr	r4, [r7, #16]
 8002fec:	1c63      	adds	r3, r4, #1
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f00a fee9 	bl	800ddc8 <malloc>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b38      	ldr	r3, [pc, #224]	@ (80030dc <nmea_parse+0x120>)
 8002ffc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	3b01      	subs	r3, #1
 8003004:	4a35      	ldr	r2, [pc, #212]	@ (80030dc <nmea_parse+0x120>)
 8003006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300a:	6979      	ldr	r1, [r7, #20]
 800300c:	4618      	mov	r0, r3
 800300e:	f00d f856 	bl	80100be <strcpy>
        token = strtok(NULL, "$");
 8003012:	4933      	ldr	r1, [pc, #204]	@ (80030e0 <nmea_parse+0x124>)
 8003014:	2000      	movs	r0, #0
 8003016:	f00c ff59 	bl	800fecc <strtok>
 800301a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1de      	bne.n	8002fe0 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e03e      	b.n	80030a6 <nmea_parse+0xea>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003028:	4a2c      	ldr	r2, [pc, #176]	@ (80030dc <nmea_parse+0x120>)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	492c      	ldr	r1, [pc, #176]	@ (80030e4 <nmea_parse+0x128>)
 8003032:	4618      	mov	r0, r3
 8003034:	f00c ffa6 	bl	800ff84 <strstr>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d030      	beq.n	80030a0 <nmea_parse+0xe4>
 800303e:	4a27      	ldr	r2, [pc, #156]	@ (80030dc <nmea_parse+0x120>)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fd2a 	bl	8002aa0 <gps_checksum>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d026      	beq.n	80030a0 <nmea_parse+0xe4>
           if(strstr(data[i], "GNRMC")!=NULL){
 8003052:	4a22      	ldr	r2, [pc, #136]	@ (80030dc <nmea_parse+0x120>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	4923      	ldr	r1, [pc, #140]	@ (80030e8 <nmea_parse+0x12c>)
 800305c:	4618      	mov	r0, r3
 800305e:	f00c ff91 	bl	800ff84 <strstr>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8003068:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <nmea_parse+0x120>)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff ff30 	bl	8002ed8 <nmea_GNRMC>
 8003078:	e012      	b.n	80030a0 <nmea_parse+0xe4>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 800307a:	4a18      	ldr	r2, [pc, #96]	@ (80030dc <nmea_parse+0x120>)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	491a      	ldr	r1, [pc, #104]	@ (80030ec <nmea_parse+0x130>)
 8003084:	4618      	mov	r0, r3
 8003086:	f00c ff7d 	bl	800ff84 <strstr>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <nmea_parse+0xe4>
               nmea_GPGGA(gps_data, data[i]);
 8003090:	4a12      	ldr	r2, [pc, #72]	@ (80030dc <nmea_parse+0x120>)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	4619      	mov	r1, r3
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fd4a 	bl	8002b34 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	dbbc      	blt.n	8003028 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	e009      	b.n	80030c8 <nmea_parse+0x10c>
 80030b4:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <nmea_parse+0x120>)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030bc:	4618      	mov	r0, r3
 80030be:	f00a fe8b 	bl	800ddd8 <free>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3301      	adds	r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	dbf1      	blt.n	80030b4 <nmea_parse+0xf8>


}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000d78 	.word	0x20000d78
 80030e0:	08012894 	.word	0x08012894
 80030e4:	08012898 	.word	0x08012898
 80030e8:	0801289c 	.word	0x0801289c
 80030ec:	080128a4 	.word	0x080128a4

080030f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003164 <MX_SPI1_Init+0x74>)
 80030f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003168 <MX_SPI1_Init+0x78>)
 80030f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <MX_SPI1_Init+0x74>)
 80030fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003102:	4b18      	ldr	r3, [pc, #96]	@ (8003164 <MX_SPI1_Init+0x74>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003108:	4b16      	ldr	r3, [pc, #88]	@ (8003164 <MX_SPI1_Init+0x74>)
 800310a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800310e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003110:	4b14      	ldr	r3, [pc, #80]	@ (8003164 <MX_SPI1_Init+0x74>)
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003116:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <MX_SPI1_Init+0x74>)
 8003118:	2200      	movs	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <MX_SPI1_Init+0x74>)
 800311e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003122:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003124:	4b0f      	ldr	r3, [pc, #60]	@ (8003164 <MX_SPI1_Init+0x74>)
 8003126:	2210      	movs	r2, #16
 8003128:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800312a:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <MX_SPI1_Init+0x74>)
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <MX_SPI1_Init+0x74>)
 8003132:	2200      	movs	r2, #0
 8003134:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003136:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <MX_SPI1_Init+0x74>)
 8003138:	2200      	movs	r2, #0
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800313c:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <MX_SPI1_Init+0x74>)
 800313e:	2207      	movs	r2, #7
 8003140:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003142:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <MX_SPI1_Init+0x74>)
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003148:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <MX_SPI1_Init+0x74>)
 800314a:	2208      	movs	r2, #8
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800314e:	4805      	ldr	r0, [pc, #20]	@ (8003164 <MX_SPI1_Init+0x74>)
 8003150:	f005 f824 	bl	800819c <HAL_SPI_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800315a:	f7ff fc9b 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000db4 	.word	0x20000db4
 8003168:	40013000 	.word	0x40013000

0800316c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	@ 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <HAL_SPI_MspInit+0x7c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d128      	bne.n	80031e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800318e:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <HAL_SPI_MspInit+0x80>)
 8003190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003192:	4a16      	ldr	r2, [pc, #88]	@ (80031ec <HAL_SPI_MspInit+0x80>)
 8003194:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003198:	6613      	str	r3, [r2, #96]	@ 0x60
 800319a:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <HAL_SPI_MspInit+0x80>)
 800319c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a6:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <HAL_SPI_MspInit+0x80>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	4a10      	ldr	r2, [pc, #64]	@ (80031ec <HAL_SPI_MspInit+0x80>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031b2:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <HAL_SPI_MspInit+0x80>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031be:	23e0      	movs	r3, #224	@ 0xe0
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031ce:	2305      	movs	r3, #5
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031dc:	f002 ff38 	bl	8006050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80031e0:	bf00      	nop
 80031e2:	3728      	adds	r7, #40	@ 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40013000 	.word	0x40013000
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <HAL_MspInit+0x44>)
 80031f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003234 <HAL_MspInit+0x44>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6613      	str	r3, [r2, #96]	@ 0x60
 8003202:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <HAL_MspInit+0x44>)
 8003204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <HAL_MspInit+0x44>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003212:	4a08      	ldr	r2, [pc, #32]	@ (8003234 <HAL_MspInit+0x44>)
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003218:	6593      	str	r3, [r2, #88]	@ 0x58
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_MspInit+0x44>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003226:	f004 f88f 	bl	8007348 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000

08003238 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800323c:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <SDTimer_Handler+0x40>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <SDTimer_Handler+0x1c>
    Timer1--;
 8003246:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <SDTimer_Handler+0x40>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b2da      	uxtb	r2, r3
 8003250:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <SDTimer_Handler+0x40>)
 8003252:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003254:	4b09      	ldr	r3, [pc, #36]	@ (800327c <SDTimer_Handler+0x44>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <SDTimer_Handler+0x34>
    Timer2--;
 800325e:	4b07      	ldr	r3, [pc, #28]	@ (800327c <SDTimer_Handler+0x44>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <SDTimer_Handler+0x44>)
 800326a:	701a      	strb	r2, [r3, #0]
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	200003b0 	.word	0x200003b0
 800327c:	200003b1 	.word	0x200003b1

08003280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <NMI_Handler+0x4>

08003288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <HardFault_Handler+0x4>

08003290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003294:	bf00      	nop
 8003296:	e7fd      	b.n	8003294 <MemManage_Handler+0x4>

08003298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <BusFault_Handler+0x4>

080032a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <UsageFault_Handler+0x4>

080032a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <SysTick_Handler+0x30>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <SysTick_Handler+0x30>)
 80032e4:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80032e6:	4b07      	ldr	r3, [pc, #28]	@ (8003304 <SysTick_Handler+0x30>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b09      	cmp	r3, #9
 80032ee:	d904      	bls.n	80032fa <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80032f0:	4b04      	ldr	r3, [pc, #16]	@ (8003304 <SysTick_Handler+0x30>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80032f6:	f7ff ff9f 	bl	8003238 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032fa:	f000 ffdd 	bl	80042b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000e20 	.word	0x20000e20

08003308 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800330c:	2002      	movs	r0, #2
 800330e:	f003 f839 	bl	8006384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}

08003316 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800331a:	2004      	movs	r0, #4
 800331c:	f003 f832 	bl	8006384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}

08003324 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003328:	4802      	ldr	r0, [pc, #8]	@ (8003334 <DMA1_Channel1_IRQHandler+0x10>)
 800332a:	f002 fd36 	bl	8005d9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000ff0 	.word	0x20000ff0

08003338 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800333c:	4802      	ldr	r0, [pc, #8]	@ (8003348 <DMA1_Channel2_IRQHandler+0x10>)
 800333e:	f002 fd2c 	bl	8005d9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20001050 	.word	0x20001050

0800334c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003350:	4802      	ldr	r0, [pc, #8]	@ (800335c <DMA1_Channel3_IRQHandler+0x10>)
 8003352:	f002 fd22 	bl	8005d9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200002ec 	.word	0x200002ec

08003360 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003364:	4802      	ldr	r0, [pc, #8]	@ (8003370 <DMA1_Channel4_IRQHandler+0x10>)
 8003366:	f002 fd18 	bl	8005d9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200010b0 	.word	0x200010b0

08003374 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003378:	4802      	ldr	r0, [pc, #8]	@ (8003384 <DMA1_Channel5_IRQHandler+0x10>)
 800337a:	f002 fd0e 	bl	8005d9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	2000034c 	.word	0x2000034c

08003388 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800338c:	4802      	ldr	r0, [pc, #8]	@ (8003398 <TIM3_IRQHandler+0x10>)
 800338e:	f005 fedb 	bl	8009148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000e30 	.word	0x20000e30

0800339c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033a0:	4809      	ldr	r0, [pc, #36]	@ (80033c8 <TIM4_IRQHandler+0x2c>)
 80033a2:	f005 fed1 	bl	8009148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  compteur += 1 ;
 80033a6:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <TIM4_IRQHandler+0x30>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a07      	ldr	r2, [pc, #28]	@ (80033cc <TIM4_IRQHandler+0x30>)
 80033ae:	6013      	str	r3, [r2, #0]
  if (compteur == 100){
 80033b0:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <TIM4_IRQHandler+0x30>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b64      	cmp	r3, #100	@ 0x64
 80033b6:	d105      	bne.n	80033c4 <TIM4_IRQHandler+0x28>
	  flag_sensor = 1;
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <TIM4_IRQHandler+0x34>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
	  compteur = 0;
 80033be:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <TIM4_IRQHandler+0x30>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM4_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000e7c 	.word	0x20000e7c
 80033cc:	20000e1c 	.word	0x20000e1c
 80033d0:	20000e18 	.word	0x20000e18

080033d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033d8:	4802      	ldr	r0, [pc, #8]	@ (80033e4 <USART1_IRQHandler+0x10>)
 80033da:	f007 f999 	bl	800a710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000f5c 	.word	0x20000f5c

080033e8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80033ec:	4802      	ldr	r0, [pc, #8]	@ (80033f8 <LPUART1_IRQHandler+0x10>)
 80033ee:	f007 f98f 	bl	800a710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000ec8 	.word	0x20000ec8

080033fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return 1;
 8003400:	2301      	movs	r3, #1
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_kill>:

int _kill(int pid, int sig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003416:	f00c fe25 	bl	8010064 <__errno>
 800341a:	4603      	mov	r3, r0
 800341c:	2216      	movs	r2, #22
 800341e:	601a      	str	r2, [r3, #0]
  return -1;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <_exit>:

void _exit (int status)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ffe7 	bl	800340c <_kill>
  while (1) {}    /* Make sure we hang here */
 800343e:	bf00      	nop
 8003440:	e7fd      	b.n	800343e <_exit+0x12>

08003442 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e00a      	b.n	800346a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003454:	f3af 8000 	nop.w
 8003458:	4601      	mov	r1, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	60ba      	str	r2, [r7, #8]
 8003460:	b2ca      	uxtb	r2, r1
 8003462:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3301      	adds	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	dbf0      	blt.n	8003454 <_read+0x12>
  }

  return len;
 8003472:	687b      	ldr	r3, [r7, #4]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e009      	b.n	80034a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	60ba      	str	r2, [r7, #8]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3301      	adds	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	dbf1      	blt.n	800348e <_write+0x12>
  }
  return len;
 80034aa:	687b      	ldr	r3, [r7, #4]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <_close>:

int _close(int file)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034dc:	605a      	str	r2, [r3, #4]
  return 0;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <_isatty>:

int _isatty(int file)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034f4:	2301      	movs	r3, #1
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003524:	4a14      	ldr	r2, [pc, #80]	@ (8003578 <_sbrk+0x5c>)
 8003526:	4b15      	ldr	r3, [pc, #84]	@ (800357c <_sbrk+0x60>)
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003530:	4b13      	ldr	r3, [pc, #76]	@ (8003580 <_sbrk+0x64>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003538:	4b11      	ldr	r3, [pc, #68]	@ (8003580 <_sbrk+0x64>)
 800353a:	4a12      	ldr	r2, [pc, #72]	@ (8003584 <_sbrk+0x68>)
 800353c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800353e:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	429a      	cmp	r2, r3
 800354a:	d207      	bcs.n	800355c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800354c:	f00c fd8a 	bl	8010064 <__errno>
 8003550:	4603      	mov	r3, r0
 8003552:	220c      	movs	r2, #12
 8003554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	e009      	b.n	8003570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800355c:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <_sbrk+0x64>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003562:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <_sbrk+0x64>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	4a05      	ldr	r2, [pc, #20]	@ (8003580 <_sbrk+0x64>)
 800356c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20008000 	.word	0x20008000
 800357c:	00000400 	.word	0x00000400
 8003580:	20000e24 	.word	0x20000e24
 8003584:	20001578 	.word	0x20001578

08003588 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800358c:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <SystemInit+0x20>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003592:	4a05      	ldr	r2, [pc, #20]	@ (80035a8 <SystemInit+0x20>)
 8003594:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003598:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <INIT_PERM_TARVOS>:

	HAL_UART_Transmit(&hlpuart1,"yo",sizeof("yo"),100);
	HAL_Delay(1000);
}

void INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08e      	sub	sp, #56	@ 0x38
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	460a      	mov	r2, r1
 80035b6:	71fb      	strb	r3, [r7, #7]
 80035b8:	4613      	mov	r3, r2
 80035ba:	71bb      	strb	r3, [r7, #6]
    // On passe le module en mode 1 byte (sécurité)
    uint8_t mode1[6] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 80035bc:	4a4a      	ldr	r2, [pc, #296]	@ (80036e8 <INIT_PERM_TARVOS+0x13c>)
 80035be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c6:	6018      	str	r0, [r3, #0]
 80035c8:	3304      	adds	r3, #4
 80035ca:	8019      	strh	r1, [r3, #0]
    mode1[5] = Get_CRC8(mode1, 5); // Ajout du CRC
 80035cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035d0:	2105      	movs	r1, #5
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f892 	bl	80036fc <Get_CRC8>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, sizeof(mode1), 500);
 80035de:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80035e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80035e6:	2206      	movs	r2, #6
 80035e8:	4840      	ldr	r0, [pc, #256]	@ (80036ec <INIT_PERM_TARVOS+0x140>)
 80035ea:	f006 fea9 	bl	800a340 <HAL_UART_Transmit>

    // On change le canal (la fréquence du module)
    uint8_t frequence[6] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 80035ee:	4a40      	ldr	r2, [pc, #256]	@ (80036f0 <INIT_PERM_TARVOS+0x144>)
 80035f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035f8:	6018      	str	r0, [r3, #0]
 80035fa:	3304      	adds	r3, #4
 80035fc:	8019      	strh	r1, [r3, #0]
    frequence[5] = Get_CRC8(frequence, 5); // Ajout du CRC
 80035fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003602:	2105      	movs	r1, #5
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f879 	bl	80036fc <Get_CRC8>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    HAL_UART_Transmit(&hlpuart1, frequence, sizeof(frequence), 500);
 8003610:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003614:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003618:	2206      	movs	r2, #6
 800361a:	4834      	ldr	r0, [pc, #208]	@ (80036ec <INIT_PERM_TARVOS+0x140>)
 800361c:	f006 fe90 	bl	800a340 <HAL_UART_Transmit>

    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[6] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8003620:	4a34      	ldr	r2, [pc, #208]	@ (80036f4 <INIT_PERM_TARVOS+0x148>)
 8003622:	f107 0320 	add.w	r3, r7, #32
 8003626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800362a:	6018      	str	r0, [r3, #0]
 800362c:	3304      	adds	r3, #4
 800362e:	8019      	strh	r1, [r3, #0]
    puissance[5] = Get_CRC8(puissance, 5); // Ajout du CRC
 8003630:	f107 0320 	add.w	r3, r7, #32
 8003634:	2105      	movs	r1, #5
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f860 	bl	80036fc <Get_CRC8>
 800363c:	4603      	mov	r3, r0
 800363e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    HAL_UART_Transmit(&hlpuart1, puissance, sizeof(puissance), 500);
 8003642:	f107 0120 	add.w	r1, r7, #32
 8003646:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800364a:	2206      	movs	r2, #6
 800364c:	4827      	ldr	r0, [pc, #156]	@ (80036ec <INIT_PERM_TARVOS+0x140>)
 800364e:	f006 fe77 	bl	800a340 <HAL_UART_Transmit>

    // On modifie l'adresse de la source
    uint8_t Sadrr[6] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8003652:	2302      	movs	r3, #2
 8003654:	763b      	strb	r3, [r7, #24]
 8003656:	2309      	movs	r3, #9
 8003658:	767b      	strb	r3, [r7, #25]
 800365a:	2302      	movs	r3, #2
 800365c:	76bb      	strb	r3, [r7, #26]
 800365e:	230b      	movs	r3, #11
 8003660:	76fb      	strb	r3, [r7, #27]
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	773b      	strb	r3, [r7, #28]
 8003666:	2300      	movs	r3, #0
 8003668:	777b      	strb	r3, [r7, #29]
    Sadrr[5] = Get_CRC8(Sadrr, 5); // Ajout du CRC
 800366a:	f107 0318 	add.w	r3, r7, #24
 800366e:	2105      	movs	r1, #5
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f843 	bl	80036fc <Get_CRC8>
 8003676:	4603      	mov	r3, r0
 8003678:	777b      	strb	r3, [r7, #29]
    HAL_UART_Transmit(&hlpuart1, Sadrr, sizeof(Sadrr), 500);
 800367a:	f107 0118 	add.w	r1, r7, #24
 800367e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003682:	2206      	movs	r2, #6
 8003684:	4819      	ldr	r0, [pc, #100]	@ (80036ec <INIT_PERM_TARVOS+0x140>)
 8003686:	f006 fe5b 	bl	800a340 <HAL_UART_Transmit>

    // On modifie l'adresse avec qui on veut communiquer
	uint8_t send[6] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 800368a:	2302      	movs	r3, #2
 800368c:	743b      	strb	r3, [r7, #16]
 800368e:	2309      	movs	r3, #9
 8003690:	747b      	strb	r3, [r7, #17]
 8003692:	2302      	movs	r3, #2
 8003694:	74bb      	strb	r3, [r7, #18]
 8003696:	2308      	movs	r3, #8
 8003698:	74fb      	strb	r3, [r7, #19]
 800369a:	79bb      	ldrb	r3, [r7, #6]
 800369c:	753b      	strb	r3, [r7, #20]
 800369e:	2300      	movs	r3, #0
 80036a0:	757b      	strb	r3, [r7, #21]
	send[5] = Get_CRC8(send, 5); // Ajout du CRC
 80036a2:	f107 0310 	add.w	r3, r7, #16
 80036a6:	2105      	movs	r1, #5
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f827 	bl	80036fc <Get_CRC8>
 80036ae:	4603      	mov	r3, r0
 80036b0:	757b      	strb	r3, [r7, #21]
	HAL_UART_Transmit(&hlpuart1, send, sizeof(send), 500);
 80036b2:	f107 0110 	add.w	r1, r7, #16
 80036b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80036ba:	2206      	movs	r2, #6
 80036bc:	480b      	ldr	r0, [pc, #44]	@ (80036ec <INIT_PERM_TARVOS+0x140>)
 80036be:	f006 fe3f 	bl	800a340 <HAL_UART_Transmit>

    // On redémarre le module pour mettre à jour les paramètres
    uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <INIT_PERM_TARVOS+0x14c>)
 80036c4:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, restart, sizeof(restart), 500);
 80036c6:	f107 010c 	add.w	r1, r7, #12
 80036ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80036ce:	2204      	movs	r2, #4
 80036d0:	4806      	ldr	r0, [pc, #24]	@ (80036ec <INIT_PERM_TARVOS+0x140>)
 80036d2:	f006 fe35 	bl	800a340 <HAL_UART_Transmit>

    HAL_Delay(1000);
 80036d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036da:	f000 fe0b 	bl	80042f4 <HAL_Delay>
}
 80036de:	bf00      	nop
 80036e0:	3738      	adds	r7, #56	@ 0x38
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	080128c0 	.word	0x080128c0
 80036ec:	20000ec8 	.word	0x20000ec8
 80036f0:	080128c8 	.word	0x080128c8
 80036f4:	080128d0 	.word	0x080128d0
 80036f8:	07000502 	.word	0x07000502

080036fc <Get_CRC8>:
		HAL_UART_Transmit(&hlpuart1,command,sizeof(command),500);
	}
}
//Calcule du CRC
uint8_t Get_CRC8(uint8_t * bufP, uint16_t len)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
uint8_t crc = 0x00;
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 800370c:	2300      	movs	r3, #0
 800370e:	81bb      	strh	r3, [r7, #12]
 8003710:	e009      	b.n	8003726 <Get_CRC8+0x2a>
{
crc ^= bufP[i];
 8003712:	89bb      	ldrh	r3, [r7, #12]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	4053      	eors	r3, r2
 800371e:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8003720:	89bb      	ldrh	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	81bb      	strh	r3, [r7, #12]
 8003726:	89ba      	ldrh	r2, [r7, #12]
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	429a      	cmp	r2, r3
 800372c:	d3f1      	bcc.n	8003712 <Get_CRC8+0x16>
}
return crc;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <SEND_DATA_NETW>:

int SEND_DATA_NETW(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 800373c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003740:	b08a      	sub	sp, #40	@ 0x28
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	72fb      	strb	r3, [r7, #11]
 800374c:	4613      	mov	r3, r2
 800374e:	72bb      	strb	r3, [r7, #10]
 8003750:	466b      	mov	r3, sp
 8003752:	469a      	mov	sl, r3
	uint8_t trame_reception[5];
	// Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[HEAD + length + CRC]; // +1 pour le CRC
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	1d9e      	adds	r6, r3, #6
 8003758:	1e73      	subs	r3, r6, #1
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	4632      	mov	r2, r6
 800375e:	2300      	movs	r3, #0
 8003760:	4690      	mov	r8, r2
 8003762:	4699      	mov	r9, r3
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003770:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003774:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003778:	4632      	mov	r2, r6
 800377a:	2300      	movs	r3, #0
 800377c:	4614      	mov	r4, r2
 800377e:	461d      	mov	r5, r3
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	00eb      	lsls	r3, r5, #3
 800378a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378e:	00e2      	lsls	r2, r4, #3
 8003790:	4633      	mov	r3, r6
 8003792:	3307      	adds	r3, #7
 8003794:	08db      	lsrs	r3, r3, #3
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	ebad 0d03 	sub.w	sp, sp, r3
 800379c:	466b      	mov	r3, sp
 800379e:	3300      	adds	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2201      	movs	r2, #1
 80037ac:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3302      	adds	r3, #2
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	7afa      	ldrb	r2, [r7, #11]
 80037be:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	7aba      	ldrb	r2, [r7, #10]
 80037c4:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80037cc:	e00e      	b.n	80037ec <SEND_DATA_NETW+0xb0>
        trame[5 + i] = data[i];
 80037ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	441a      	add	r2, r3
 80037d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037da:	3305      	adds	r3, #5
 80037dc:	7811      	ldrb	r1, [r2, #0]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 80037e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037e6:	3301      	adds	r3, #1
 80037e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80037ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	dceb      	bgt.n	80037ce <SEND_DATA_NETW+0x92>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3305      	adds	r3, #5
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1d5c      	adds	r4, r3, #5
 8003802:	4611      	mov	r1, r2
 8003804:	69f8      	ldr	r0, [r7, #28]
 8003806:	f7ff ff79 	bl	80036fc <Get_CRC8>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 8003812:	b2b2      	uxth	r2, r6
 8003814:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003818:	69f9      	ldr	r1, [r7, #28]
 800381a:	480a      	ldr	r0, [pc, #40]	@ (8003844 <SEND_DATA_NETW+0x108>)
 800381c:	f006 fd90 	bl	800a340 <HAL_UART_Transmit>

    if (copyTarvosBuffer(tarvos_RX_Tampon)[3]== FAIL){
 8003820:	4809      	ldr	r0, [pc, #36]	@ (8003848 <SEND_DATA_NETW+0x10c>)
 8003822:	f000 f813 	bl	800384c <copyTarvosBuffer>
 8003826:	4603      	mov	r3, r0
 8003828:	3303      	adds	r3, #3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <SEND_DATA_NETW+0xf8>
    	return ERROR;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <SEND_DATA_NETW+0xfa>
    }
    else { return SUCCESS;}
 8003834:	2301      	movs	r3, #1
 8003836:	46d5      	mov	sp, sl

}
 8003838:	4618      	mov	r0, r3
 800383a:	3728      	adds	r7, #40	@ 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003842:	bf00      	nop
 8003844:	20000ec8 	.word	0x20000ec8
 8003848:	20000970 	.word	0x20000970

0800384c <copyTarvosBuffer>:


uint8_t* copyTarvosBuffer() {
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
    static uint8_t buffer[5];  // Utilisation de static pour éviter la perte des données
    int p = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	607b      	str	r3, [r7, #4]
    uint8_t a;
    for (int i = 0; i < TarvosRxTamponSize; i++) {
 8003856:	2300      	movs	r3, #0
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	e01e      	b.n	800389a <copyTarvosBuffer+0x4e>
        if (tarvos_RX_Tampon[i] == 0x02 && p == 0 && tarvos_RX_Tampon[i+1] == 0x40) {
 800385c:	4a14      	ldr	r2, [pc, #80]	@ (80038b0 <copyTarvosBuffer+0x64>)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4413      	add	r3, r2
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d115      	bne.n	8003894 <copyTarvosBuffer+0x48>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d112      	bne.n	8003894 <copyTarvosBuffer+0x48>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	4a0f      	ldr	r2, [pc, #60]	@ (80038b0 <copyTarvosBuffer+0x64>)
 8003874:	5cd3      	ldrb	r3, [r2, r3]
 8003876:	2b40      	cmp	r3, #64	@ 0x40
 8003878:	d10c      	bne.n	8003894 <copyTarvosBuffer+0x48>
            if (i + 5 <= TarvosRxTamponSize) {  // Vérification pour éviter un dépassement de mémoire
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b19      	cmp	r3, #25
 800387e:	dc09      	bgt.n	8003894 <copyTarvosBuffer+0x48>
                memcpy(buffer, &tarvos_RX_Tampon[i], 5);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4a0b      	ldr	r2, [pc, #44]	@ (80038b0 <copyTarvosBuffer+0x64>)
 8003884:	441a      	add	r2, r3
 8003886:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <copyTarvosBuffer+0x68>)
 8003888:	6810      	ldr	r0, [r2, #0]
 800388a:	6018      	str	r0, [r3, #0]
 800388c:	7912      	ldrb	r2, [r2, #4]
 800388e:	711a      	strb	r2, [r3, #4]
                p = 1;
 8003890:	2301      	movs	r3, #1
 8003892:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < TarvosRxTamponSize; i++) {
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b1d      	cmp	r3, #29
 800389e:	dddd      	ble.n	800385c <copyTarvosBuffer+0x10>
            }
        }
    }
    return buffer;
 80038a0:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <copyTarvosBuffer+0x68>)
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000970 	.word	0x20000970
 80038b4:	20000e28 	.word	0x20000e28

080038b8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08e      	sub	sp, #56	@ 0x38
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038cc:	f107 031c 	add.w	r3, r7, #28
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038d8:	463b      	mov	r3, r7
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	60da      	str	r2, [r3, #12]
 80038e4:	611a      	str	r2, [r3, #16]
 80038e6:	615a      	str	r2, [r3, #20]
 80038e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038ea:	4b2d      	ldr	r3, [pc, #180]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 80038ec:	4a2d      	ldr	r2, [pc, #180]	@ (80039a4 <MX_TIM3_Init+0xec>)
 80038ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80038f0:	4b2b      	ldr	r3, [pc, #172]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 80038f2:	223f      	movs	r2, #63	@ 0x3f
 80038f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f6:	4b2a      	ldr	r3, [pc, #168]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80038fc:	4b28      	ldr	r3, [pc, #160]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 80038fe:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003902:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003904:	4b26      	ldr	r3, [pc, #152]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800390a:	4b25      	ldr	r3, [pc, #148]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003910:	4823      	ldr	r0, [pc, #140]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 8003912:	f005 f9f5 	bl	8008d00 <HAL_TIM_Base_Init>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800391c:	f7ff f8ba 	bl	8002a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003924:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800392a:	4619      	mov	r1, r3
 800392c:	481c      	ldr	r0, [pc, #112]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 800392e:	f005 fe6f 	bl	8009610 <HAL_TIM_ConfigClockSource>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003938:	f7ff f8ac 	bl	8002a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800393c:	4818      	ldr	r0, [pc, #96]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 800393e:	f005 faa1 	bl	8008e84 <HAL_TIM_PWM_Init>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003948:	f7ff f8a4 	bl	8002a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003950:	2300      	movs	r3, #0
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	4619      	mov	r1, r3
 800395a:	4811      	ldr	r0, [pc, #68]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 800395c:	f006 fbd8 	bl	800a110 <HAL_TIMEx_MasterConfigSynchronization>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003966:	f7ff f895 	bl	8002a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800396a:	2360      	movs	r3, #96	@ 0x60
 800396c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800397a:	463b      	mov	r3, r7
 800397c:	2200      	movs	r2, #0
 800397e:	4619      	mov	r1, r3
 8003980:	4807      	ldr	r0, [pc, #28]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 8003982:	f005 fd31 	bl	80093e8 <HAL_TIM_PWM_ConfigChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800398c:	f7ff f882 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003990:	4803      	ldr	r0, [pc, #12]	@ (80039a0 <MX_TIM3_Init+0xe8>)
 8003992:	f000 f8bf 	bl	8003b14 <HAL_TIM_MspPostInit>

}
 8003996:	bf00      	nop
 8003998:	3738      	adds	r7, #56	@ 0x38
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000e30 	.word	0x20000e30
 80039a4:	40000400 	.word	0x40000400

080039a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08e      	sub	sp, #56	@ 0x38
 80039ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039bc:	f107 031c 	add.w	r3, r7, #28
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039c8:	463b      	mov	r3, r7
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	60da      	str	r2, [r3, #12]
 80039d4:	611a      	str	r2, [r3, #16]
 80039d6:	615a      	str	r2, [r3, #20]
 80039d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039da:	4b2b      	ldr	r3, [pc, #172]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 80039dc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a8c <MX_TIM4_Init+0xe4>)
 80039de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 80039e0:	4b29      	ldr	r3, [pc, #164]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 80039e2:	223f      	movs	r2, #63	@ 0x3f
 80039e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e6:	4b28      	ldr	r3, [pc, #160]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80039ec:	4b26      	ldr	r3, [pc, #152]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 80039ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f4:	4b24      	ldr	r3, [pc, #144]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fa:	4b23      	ldr	r3, [pc, #140]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a00:	4821      	ldr	r0, [pc, #132]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 8003a02:	f005 f97d 	bl	8008d00 <HAL_TIM_Base_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003a0c:	f7ff f842 	bl	8002a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	481a      	ldr	r0, [pc, #104]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 8003a1e:	f005 fdf7 	bl	8009610 <HAL_TIM_ConfigClockSource>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003a28:	f7ff f834 	bl	8002a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a2c:	4816      	ldr	r0, [pc, #88]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 8003a2e:	f005 fa29 	bl	8008e84 <HAL_TIM_PWM_Init>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003a38:	f7ff f82c 	bl	8002a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a40:	2300      	movs	r3, #0
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a44:	f107 031c 	add.w	r3, r7, #28
 8003a48:	4619      	mov	r1, r3
 8003a4a:	480f      	ldr	r0, [pc, #60]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 8003a4c:	f006 fb60 	bl	800a110 <HAL_TIMEx_MasterConfigSynchronization>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003a56:	f7ff f81d 	bl	8002a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a5a:	2360      	movs	r3, #96	@ 0x60
 8003a5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4805      	ldr	r0, [pc, #20]	@ (8003a88 <MX_TIM4_Init+0xe0>)
 8003a72:	f005 fcb9 	bl	80093e8 <HAL_TIM_PWM_ConfigChannel>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003a7c:	f7ff f80a 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a80:	bf00      	nop
 8003a82:	3738      	adds	r7, #56	@ 0x38
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000e7c 	.word	0x20000e7c
 8003a8c:	40000800 	.word	0x40000800

08003a90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003b08 <HAL_TIM_Base_MspInit+0x78>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d114      	bne.n	8003acc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <HAL_TIM_Base_MspInit+0x7c>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa6:	4a19      	ldr	r2, [pc, #100]	@ (8003b0c <HAL_TIM_Base_MspInit+0x7c>)
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aae:	4b17      	ldr	r3, [pc, #92]	@ (8003b0c <HAL_TIM_Base_MspInit+0x7c>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	201d      	movs	r0, #29
 8003ac0:	f001 ff53 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ac4:	201d      	movs	r0, #29
 8003ac6:	f001 ff6a 	bl	800599e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003aca:	e018      	b.n	8003afe <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b10 <HAL_TIM_Base_MspInit+0x80>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d113      	bne.n	8003afe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <HAL_TIM_Base_MspInit+0x7c>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	4a0c      	ldr	r2, [pc, #48]	@ (8003b0c <HAL_TIM_Base_MspInit+0x7c>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <HAL_TIM_Base_MspInit+0x7c>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003aee:	2200      	movs	r2, #0
 8003af0:	2100      	movs	r1, #0
 8003af2:	201e      	movs	r0, #30
 8003af4:	f001 ff39 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003af8:	201e      	movs	r0, #30
 8003afa:	f001 ff50 	bl	800599e <HAL_NVIC_EnableIRQ>
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40000800 	.word	0x40000800

08003b14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	60da      	str	r2, [r3, #12]
 8003b2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a11      	ldr	r2, [pc, #68]	@ (8003b78 <HAL_TIM_MspPostInit+0x64>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d11b      	bne.n	8003b6e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b36:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <HAL_TIM_MspPostInit+0x68>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	4a10      	ldr	r2, [pc, #64]	@ (8003b7c <HAL_TIM_MspPostInit+0x68>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b42:	4b0e      	ldr	r3, [pc, #56]	@ (8003b7c <HAL_TIM_MspPostInit+0x68>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b4e:	2340      	movs	r3, #64	@ 0x40
 8003b50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b52:	2302      	movs	r3, #2
 8003b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b62:	f107 030c 	add.w	r3, r7, #12
 8003b66:	4619      	mov	r1, r3
 8003b68:	4805      	ldr	r0, [pc, #20]	@ (8003b80 <HAL_TIM_MspPostInit+0x6c>)
 8003b6a:	f002 fa71 	bl	8006050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b6e:	bf00      	nop
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	48000800 	.word	0x48000800

08003b84 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003b88:	4b21      	ldr	r3, [pc, #132]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003b8a:	4a22      	ldr	r2, [pc, #136]	@ (8003c14 <MX_LPUART1_UART_Init+0x90>)
 8003b8c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003b8e:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003b90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b94:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b96:	4b1e      	ldr	r3, [pc, #120]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003ba8:	4b19      	ldr	r3, [pc, #100]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003baa:	220c      	movs	r2, #12
 8003bac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bae:	4b18      	ldr	r3, [pc, #96]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bb4:	4b16      	ldr	r3, [pc, #88]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bba:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bc0:	4b13      	ldr	r3, [pc, #76]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003bc6:	4812      	ldr	r0, [pc, #72]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003bc8:	f006 fb6a 	bl	800a2a0 <HAL_UART_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003bd2:	f7fe ff5f 	bl	8002a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	480d      	ldr	r0, [pc, #52]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003bda:	f008 f861 	bl	800bca0 <HAL_UARTEx_SetTxFifoThreshold>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003be4:	f7fe ff56 	bl	8002a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003be8:	2100      	movs	r1, #0
 8003bea:	4809      	ldr	r0, [pc, #36]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003bec:	f008 f896 	bl	800bd1c <HAL_UARTEx_SetRxFifoThreshold>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003bf6:	f7fe ff4d 	bl	8002a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003bfa:	4805      	ldr	r0, [pc, #20]	@ (8003c10 <MX_LPUART1_UART_Init+0x8c>)
 8003bfc:	f008 f817 	bl	800bc2e <HAL_UARTEx_DisableFifoMode>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003c06:	f7fe ff45 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000ec8 	.word	0x20000ec8
 8003c14:	40008000 	.word	0x40008000

08003c18 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c1c:	4b22      	ldr	r3, [pc, #136]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c1e:	4a23      	ldr	r2, [pc, #140]	@ (8003cac <MX_USART1_UART_Init+0x94>)
 8003c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c22:	4b21      	ldr	r3, [pc, #132]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c3e:	220c      	movs	r2, #12
 8003c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c42:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c48:	4b17      	ldr	r3, [pc, #92]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c54:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c60:	4811      	ldr	r0, [pc, #68]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c62:	f006 fb1d 	bl	800a2a0 <HAL_UART_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c6c:	f7fe ff12 	bl	8002a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c70:	2100      	movs	r1, #0
 8003c72:	480d      	ldr	r0, [pc, #52]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c74:	f008 f814 	bl	800bca0 <HAL_UARTEx_SetTxFifoThreshold>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003c7e:	f7fe ff09 	bl	8002a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c82:	2100      	movs	r1, #0
 8003c84:	4808      	ldr	r0, [pc, #32]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c86:	f008 f849 	bl	800bd1c <HAL_UARTEx_SetRxFifoThreshold>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003c90:	f7fe ff00 	bl	8002a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003c94:	4804      	ldr	r0, [pc, #16]	@ (8003ca8 <MX_USART1_UART_Init+0x90>)
 8003c96:	f007 ffca 	bl	800bc2e <HAL_UARTEx_DisableFifoMode>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003ca0:	f7fe fef8 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000f5c 	.word	0x20000f5c
 8003cac:	40013800 	.word	0x40013800

08003cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b09e      	sub	sp, #120	@ 0x78
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cc8:	f107 0320 	add.w	r3, r7, #32
 8003ccc:	2244      	movs	r2, #68	@ 0x44
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f00c f8e1 	bl	800fe98 <memset>
  if(uartHandle->Instance==LPUART1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a92      	ldr	r2, [pc, #584]	@ (8003f24 <HAL_UART_MspInit+0x274>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	f040 80b0 	bne.w	8003e42 <HAL_UART_MspInit+0x192>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cea:	f107 0320 	add.w	r3, r7, #32
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 f864 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003cfa:	f7fe fecb 	bl	8002a94 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003cfe:	4b8a      	ldr	r3, [pc, #552]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d02:	4a89      	ldr	r2, [pc, #548]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003d0a:	4b87      	ldr	r3, [pc, #540]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d16:	4b84      	ldr	r3, [pc, #528]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1a:	4a83      	ldr	r2, [pc, #524]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d22:	4b81      	ldr	r3, [pc, #516]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2e:	4b7e      	ldr	r3, [pc, #504]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d32:	4a7d      	ldr	r2, [pc, #500]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d46:	2308      	movs	r3, #8
 8003d48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d52:	2300      	movs	r3, #0
 8003d54:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003d56:	230c      	movs	r3, #12
 8003d58:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d64:	f002 f974 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003d68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d6c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d76:	2300      	movs	r3, #0
 8003d78:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d82:	4619      	mov	r1, r3
 8003d84:	4869      	ldr	r0, [pc, #420]	@ (8003f2c <HAL_UART_MspInit+0x27c>)
 8003d86:	f002 f963 	bl	8006050 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003d8a:	4b69      	ldr	r3, [pc, #420]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003d8c:	4a69      	ldr	r2, [pc, #420]	@ (8003f34 <HAL_UART_MspInit+0x284>)
 8003d8e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003d90:	4b67      	ldr	r3, [pc, #412]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003d92:	2222      	movs	r2, #34	@ 0x22
 8003d94:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d96:	4b66      	ldr	r3, [pc, #408]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d9c:	4b64      	ldr	r3, [pc, #400]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003da2:	4b63      	ldr	r3, [pc, #396]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003da8:	4b61      	ldr	r3, [pc, #388]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dae:	4b60      	ldr	r3, [pc, #384]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003db4:	4b5e      	ldr	r3, [pc, #376]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003db6:	2220      	movs	r2, #32
 8003db8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003dba:	4b5d      	ldr	r3, [pc, #372]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003dc0:	485b      	ldr	r0, [pc, #364]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003dc2:	f001 fe07 	bl	80059d4 <HAL_DMA_Init>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8003dcc:	f7fe fe62 	bl	8002a94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a57      	ldr	r2, [pc, #348]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003dd8:	4a55      	ldr	r2, [pc, #340]	@ (8003f30 <HAL_UART_MspInit+0x280>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003dde:	4b56      	ldr	r3, [pc, #344]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003de0:	4a56      	ldr	r2, [pc, #344]	@ (8003f3c <HAL_UART_MspInit+0x28c>)
 8003de2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003de4:	4b54      	ldr	r3, [pc, #336]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003de6:	2223      	movs	r2, #35	@ 0x23
 8003de8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dea:	4b53      	ldr	r3, [pc, #332]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003dec:	2210      	movs	r2, #16
 8003dee:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003df0:	4b51      	ldr	r3, [pc, #324]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003df6:	4b50      	ldr	r3, [pc, #320]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003df8:	2280      	movs	r2, #128	@ 0x80
 8003dfa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e02:	4b4d      	ldr	r3, [pc, #308]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003e08:	4b4b      	ldr	r3, [pc, #300]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003e14:	4848      	ldr	r0, [pc, #288]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003e16:	f001 fddd 	bl	80059d4 <HAL_DMA_Init>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 8003e20:	f7fe fe38 	bl	8002a94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a44      	ldr	r2, [pc, #272]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003e28:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003e2a:	4a43      	ldr	r2, [pc, #268]	@ (8003f38 <HAL_UART_MspInit+0x288>)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003e30:	2200      	movs	r2, #0
 8003e32:	2100      	movs	r1, #0
 8003e34:	205b      	movs	r0, #91	@ 0x5b
 8003e36:	f001 fd98 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003e3a:	205b      	movs	r0, #91	@ 0x5b
 8003e3c:	f001 fdaf 	bl	800599e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003e40:	e06c      	b.n	8003f1c <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a3e      	ldr	r2, [pc, #248]	@ (8003f40 <HAL_UART_MspInit+0x290>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d167      	bne.n	8003f1c <HAL_UART_MspInit+0x26c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8003e50:	2302      	movs	r3, #2
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e54:	f107 0320 	add.w	r3, r7, #32
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f003 ffaf 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8003e64:	f7fe fe16 	bl	8002a94 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e68:	4b2f      	ldr	r3, [pc, #188]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e72:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e74:	4b2c      	ldr	r3, [pc, #176]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e80:	4b29      	ldr	r3, [pc, #164]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e84:	4a28      	ldr	r2, [pc, #160]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003e86:	f043 0302 	orr.w	r3, r3, #2
 8003e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e8c:	4b26      	ldr	r3, [pc, #152]	@ (8003f28 <HAL_UART_MspInit+0x278>)
 8003e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e98:	23c0      	movs	r3, #192	@ 0xc0
 8003e9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ea8:	2307      	movs	r3, #7
 8003eaa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	481e      	ldr	r0, [pc, #120]	@ (8003f2c <HAL_UART_MspInit+0x27c>)
 8003eb4:	f002 f8cc 	bl	8006050 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8003eb8:	4b22      	ldr	r3, [pc, #136]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003eba:	4a23      	ldr	r2, [pc, #140]	@ (8003f48 <HAL_UART_MspInit+0x298>)
 8003ebc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003ebe:	4b21      	ldr	r3, [pc, #132]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003ec0:	2218      	movs	r2, #24
 8003ec2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eca:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003ed2:	2280      	movs	r2, #128	@ 0x80
 8003ed4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003edc:	4b19      	ldr	r3, [pc, #100]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003ee2:	4b18      	ldr	r3, [pc, #96]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ee8:	4b16      	ldr	r3, [pc, #88]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003eee:	4815      	ldr	r0, [pc, #84]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003ef0:	f001 fd70 	bl	80059d4 <HAL_DMA_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8003efa:	f7fe fdcb 	bl	8002a94 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a10      	ldr	r2, [pc, #64]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003f02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003f06:	4a0f      	ldr	r2, [pc, #60]	@ (8003f44 <HAL_UART_MspInit+0x294>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2100      	movs	r1, #0
 8003f10:	2025      	movs	r0, #37	@ 0x25
 8003f12:	f001 fd2a 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f16:	2025      	movs	r0, #37	@ 0x25
 8003f18:	f001 fd41 	bl	800599e <HAL_NVIC_EnableIRQ>
}
 8003f1c:	bf00      	nop
 8003f1e:	3778      	adds	r7, #120	@ 0x78
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40008000 	.word	0x40008000
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	48000400 	.word	0x48000400
 8003f30:	20000ff0 	.word	0x20000ff0
 8003f34:	40020008 	.word	0x40020008
 8003f38:	20001050 	.word	0x20001050
 8003f3c:	4002001c 	.word	0x4002001c
 8003f40:	40013800 	.word	0x40013800
 8003f44:	200010b0 	.word	0x200010b0
 8003f48:	40020044 	.word	0x40020044

08003f4c <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5d      	ldr	r2, [pc, #372]	@ (80040d0 <HAL_UART_RxCpltCallback+0x184>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d15b      	bne.n	8004016 <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80040d4 <HAL_UART_RxCpltCallback+0x188>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a5d      	ldr	r2, [pc, #372]	@ (80040d8 <HAL_UART_RxCpltCallback+0x18c>)
 8003f64:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8003f66:	4b5c      	ldr	r3, [pc, #368]	@ (80040d8 <HAL_UART_RxCpltCallback+0x18c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8003f6e:	dd22      	ble.n	8003fb6 <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 8003f70:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_UART_RxCpltCallback+0x18c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003f7a:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 8003f7c:	4b56      	ldr	r3, [pc, #344]	@ (80040d8 <HAL_UART_RxCpltCallback+0x18c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b56      	ldr	r3, [pc, #344]	@ (80040dc <HAL_UART_RxCpltCallback+0x190>)
 8003f84:	4413      	add	r3, r2
 8003f86:	89fa      	ldrh	r2, [r7, #14]
 8003f88:	4955      	ldr	r1, [pc, #340]	@ (80040e0 <HAL_UART_RxCpltCallback+0x194>)
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f00c f89f 	bl	80100ce <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 8003f90:	4b51      	ldr	r3, [pc, #324]	@ (80040d8 <HAL_UART_RxCpltCallback+0x18c>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 8003f96:	89fb      	ldrh	r3, [r7, #14]
 8003f98:	4a51      	ldr	r2, [pc, #324]	@ (80040e0 <HAL_UART_RxCpltCallback+0x194>)
 8003f9a:	1899      	adds	r1, r3, r2
 8003f9c:	89fb      	ldrh	r3, [r7, #14]
 8003f9e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	484d      	ldr	r0, [pc, #308]	@ (80040dc <HAL_UART_RxCpltCallback+0x190>)
 8003fa6:	f00c f892 	bl	80100ce <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 8003faa:	89fb      	ldrh	r3, [r7, #14]
 8003fac:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8003fb0:	4a48      	ldr	r2, [pc, #288]	@ (80040d4 <HAL_UART_RxCpltCallback+0x188>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e01d      	b.n	8003ff2 <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 8003fb6:	4b48      	ldr	r3, [pc, #288]	@ (80040d8 <HAL_UART_RxCpltCallback+0x18c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b47      	ldr	r3, [pc, #284]	@ (80040dc <HAL_UART_RxCpltCallback+0x190>)
 8003fbe:	441a      	add	r2, r3
 8003fc0:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <HAL_UART_RxCpltCallback+0x194>)
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f8d1 c000 	ldr.w	ip, [r1]
 8003fd0:	684e      	ldr	r6, [r1, #4]
 8003fd2:	688d      	ldr	r5, [r1, #8]
 8003fd4:	68c9      	ldr	r1, [r1, #12]
 8003fd6:	f8c2 c000 	str.w	ip, [r2]
 8003fda:	6056      	str	r6, [r2, #4]
 8003fdc:	6095      	str	r5, [r2, #8]
 8003fde:	60d1      	str	r1, [r2, #12]
 8003fe0:	3310      	adds	r3, #16
 8003fe2:	3010      	adds	r0, #16
 8003fe4:	42a3      	cmp	r3, r4
 8003fe6:	d1ef      	bne.n	8003fc8 <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 8003fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80040d8 <HAL_UART_RxCpltCallback+0x18c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3340      	adds	r3, #64	@ 0x40
 8003fee:	4a39      	ldr	r2, [pc, #228]	@ (80040d4 <HAL_UART_RxCpltCallback+0x188>)
 8003ff0:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8003ff2:	2240      	movs	r2, #64	@ 0x40
 8003ff4:	493a      	ldr	r1, [pc, #232]	@ (80040e0 <HAL_UART_RxCpltCallback+0x194>)
 8003ff6:	483b      	ldr	r0, [pc, #236]	@ (80040e4 <HAL_UART_RxCpltCallback+0x198>)
 8003ff8:	f006 fa30 	bl	800a45c <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80040e8 <HAL_UART_RxCpltCallback+0x19c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b39      	ldr	r3, [pc, #228]	@ (80040e8 <HAL_UART_RxCpltCallback+0x19c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0204 	bic.w	r2, r2, #4
 800400a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 800400c:	2240      	movs	r2, #64	@ 0x40
 800400e:	4934      	ldr	r1, [pc, #208]	@ (80040e0 <HAL_UART_RxCpltCallback+0x194>)
 8004010:	4834      	ldr	r0, [pc, #208]	@ (80040e4 <HAL_UART_RxCpltCallback+0x198>)
 8004012:	f006 fa23 	bl	800a45c <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a34      	ldr	r2, [pc, #208]	@ (80040ec <HAL_UART_RxCpltCallback+0x1a0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d152      	bne.n	80040c6 <HAL_UART_RxCpltCallback+0x17a>
		TarvosRXbufferoldpos = TarvosRXbuffernewpos; //keep track of the last position in the buffer
 8004020:	4b33      	ldr	r3, [pc, #204]	@ (80040f0 <HAL_UART_RxCpltCallback+0x1a4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a33      	ldr	r2, [pc, #204]	@ (80040f4 <HAL_UART_RxCpltCallback+0x1a8>)
 8004026:	6013      	str	r3, [r2, #0]
				if(TarvosRXbufferoldpos + TarvosRxTamponSize > TarvosRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8004028:	4b32      	ldr	r3, [pc, #200]	@ (80040f4 <HAL_UART_RxCpltCallback+0x1a8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2be2      	cmp	r3, #226	@ 0xe2
 800402e:	dd22      	ble.n	8004076 <HAL_UART_RxCpltCallback+0x12a>

					uint16_t datatocopy = TarvosRxBufferSize-TarvosRXbufferoldpos;  // find out how much space is left in the main buffer
 8004030:	4b30      	ldr	r3, [pc, #192]	@ (80040f4 <HAL_UART_RxCpltCallback+0x1a8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800403a:	81bb      	strh	r3, [r7, #12]
					memcpy ((uint8_t *)tarvos_RX_Buffer+TarvosRXbufferoldpos,(uint8_t *) tarvos_RX_Tampon, datatocopy);  // copy data in that remaining space
 800403c:	4b2d      	ldr	r3, [pc, #180]	@ (80040f4 <HAL_UART_RxCpltCallback+0x1a8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	4b2d      	ldr	r3, [pc, #180]	@ (80040f8 <HAL_UART_RxCpltCallback+0x1ac>)
 8004044:	4413      	add	r3, r2
 8004046:	89ba      	ldrh	r2, [r7, #12]
 8004048:	492c      	ldr	r1, [pc, #176]	@ (80040fc <HAL_UART_RxCpltCallback+0x1b0>)
 800404a:	4618      	mov	r0, r3
 800404c:	f00c f83f 	bl	80100ce <memcpy>

					TarvosRXbufferoldpos = 0;  // point to the start of the buffer
 8004050:	4b28      	ldr	r3, [pc, #160]	@ (80040f4 <HAL_UART_RxCpltCallback+0x1a8>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
					memcpy ((uint8_t *)tarvos_RX_Buffer, (uint8_t *)tarvos_RX_Tampon+datatocopy, (TarvosRxTamponSize-datatocopy));  // copy the remaining data
 8004056:	89bb      	ldrh	r3, [r7, #12]
 8004058:	4a28      	ldr	r2, [pc, #160]	@ (80040fc <HAL_UART_RxCpltCallback+0x1b0>)
 800405a:	1899      	adds	r1, r3, r2
 800405c:	89bb      	ldrh	r3, [r7, #12]
 800405e:	f1c3 031e 	rsb	r3, r3, #30
 8004062:	461a      	mov	r2, r3
 8004064:	4824      	ldr	r0, [pc, #144]	@ (80040f8 <HAL_UART_RxCpltCallback+0x1ac>)
 8004066:	f00c f832 	bl	80100ce <memcpy>
					TarvosRXbuffernewpos = (TarvosRxTamponSize-datatocopy);  // update the position
 800406a:	89bb      	ldrh	r3, [r7, #12]
 800406c:	f1c3 031e 	rsb	r3, r3, #30
 8004070:	4a1f      	ldr	r2, [pc, #124]	@ (80040f0 <HAL_UART_RxCpltCallback+0x1a4>)
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e01a      	b.n	80040ac <HAL_UART_RxCpltCallback+0x160>
				}
				else{
					memcpy((uint8_t *)tarvos_RX_Buffer+TarvosRXbufferoldpos,(uint8_t *) tarvos_RX_Tampon, TarvosRxTamponSize); //copy received data to the buffer
 8004076:	4b1f      	ldr	r3, [pc, #124]	@ (80040f4 <HAL_UART_RxCpltCallback+0x1a8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	4b1e      	ldr	r3, [pc, #120]	@ (80040f8 <HAL_UART_RxCpltCallback+0x1ac>)
 800407e:	4413      	add	r3, r2
 8004080:	4a1e      	ldr	r2, [pc, #120]	@ (80040fc <HAL_UART_RxCpltCallback+0x1b0>)
 8004082:	6814      	ldr	r4, [r2, #0]
 8004084:	6850      	ldr	r0, [r2, #4]
 8004086:	6891      	ldr	r1, [r2, #8]
 8004088:	68d5      	ldr	r5, [r2, #12]
 800408a:	601c      	str	r4, [r3, #0]
 800408c:	6058      	str	r0, [r3, #4]
 800408e:	6099      	str	r1, [r3, #8]
 8004090:	60dd      	str	r5, [r3, #12]
 8004092:	6914      	ldr	r4, [r2, #16]
 8004094:	6950      	ldr	r0, [r2, #20]
 8004096:	6991      	ldr	r1, [r2, #24]
 8004098:	611c      	str	r4, [r3, #16]
 800409a:	6158      	str	r0, [r3, #20]
 800409c:	6199      	str	r1, [r3, #24]
 800409e:	8b92      	ldrh	r2, [r2, #28]
 80040a0:	839a      	strh	r2, [r3, #28]
					TarvosRXbuffernewpos = TarvosRxTamponSize+TarvosRXbufferoldpos; //update buffer position
 80040a2:	4b14      	ldr	r3, [pc, #80]	@ (80040f4 <HAL_UART_RxCpltCallback+0x1a8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	331e      	adds	r3, #30
 80040a8:	4a11      	ldr	r2, [pc, #68]	@ (80040f0 <HAL_UART_RxCpltCallback+0x1a4>)
 80040aa:	6013      	str	r3, [r2, #0]

				}
				HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);//on recoit par dma à nouveau 64 caractères
 80040ac:	221e      	movs	r2, #30
 80040ae:	4913      	ldr	r1, [pc, #76]	@ (80040fc <HAL_UART_RxCpltCallback+0x1b0>)
 80040b0:	4813      	ldr	r0, [pc, #76]	@ (8004100 <HAL_UART_RxCpltCallback+0x1b4>)
 80040b2:	f006 f9d3 	bl	800a45c <HAL_UART_Receive_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80040b6:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <HAL_UART_RxCpltCallback+0x1b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <HAL_UART_RxCpltCallback+0x1b8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0204 	bic.w	r2, r2, #4
 80040c4:	601a      	str	r2, [r3, #0]
				}

}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40013800 	.word	0x40013800
 80040d4:	20000bd4 	.word	0x20000bd4
 80040d8:	20000bd0 	.word	0x20000bd0
 80040dc:	20000990 	.word	0x20000990
 80040e0:	20000b90 	.word	0x20000b90
 80040e4:	20000f5c 	.word	0x20000f5c
 80040e8:	200010b0 	.word	0x200010b0
 80040ec:	40008000 	.word	0x40008000
 80040f0:	20000bdc 	.word	0x20000bdc
 80040f4:	20000bd8 	.word	0x20000bd8
 80040f8:	20000870 	.word	0x20000870
 80040fc:	20000970 	.word	0x20000970
 8004100:	20000ec8 	.word	0x20000ec8
 8004104:	20000ff0 	.word	0x20000ff0

08004108 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800410c:	4b10      	ldr	r3, [pc, #64]	@ (8004150 <MX_USB_PCD_Init+0x48>)
 800410e:	4a11      	ldr	r2, [pc, #68]	@ (8004154 <MX_USB_PCD_Init+0x4c>)
 8004110:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004112:	4b0f      	ldr	r3, [pc, #60]	@ (8004150 <MX_USB_PCD_Init+0x48>)
 8004114:	2208      	movs	r2, #8
 8004116:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004118:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <MX_USB_PCD_Init+0x48>)
 800411a:	2202      	movs	r2, #2
 800411c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800411e:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <MX_USB_PCD_Init+0x48>)
 8004120:	2202      	movs	r2, #2
 8004122:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004124:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <MX_USB_PCD_Init+0x48>)
 8004126:	2200      	movs	r2, #0
 8004128:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <MX_USB_PCD_Init+0x48>)
 800412c:	2200      	movs	r2, #0
 800412e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004130:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <MX_USB_PCD_Init+0x48>)
 8004132:	2200      	movs	r2, #0
 8004134:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004136:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <MX_USB_PCD_Init+0x48>)
 8004138:	2200      	movs	r2, #0
 800413a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800413c:	4804      	ldr	r0, [pc, #16]	@ (8004150 <MX_USB_PCD_Init+0x48>)
 800413e:	f002 ff66 	bl	800700e <HAL_PCD_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8004148:	f7fe fca4 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800414c:	bf00      	nop
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20001110 	.word	0x20001110
 8004154:	40005c00 	.word	0x40005c00

08004158 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b094      	sub	sp, #80	@ 0x50
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004160:	f107 030c 	add.w	r3, r7, #12
 8004164:	2244      	movs	r2, #68	@ 0x44
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f00b fe95 	bl	800fe98 <memset>
  if(pcdHandle->Instance==USB)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a11      	ldr	r2, [pc, #68]	@ (80041b8 <HAL_PCD_MspInit+0x60>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d11a      	bne.n	80041ae <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800417c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800417e:	2300      	movs	r3, #0
 8004180:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004182:	f107 030c 	add.w	r3, r7, #12
 8004186:	4618      	mov	r0, r3
 8004188:	f003 fe18 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8004192:	f7fe fc7f 	bl	8002a94 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004196:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <HAL_PCD_MspInit+0x64>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	4a08      	ldr	r2, [pc, #32]	@ (80041bc <HAL_PCD_MspInit+0x64>)
 800419c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a2:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <HAL_PCD_MspInit+0x64>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80041ae:	bf00      	nop
 80041b0:	3750      	adds	r7, #80	@ 0x50
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40005c00 	.word	0x40005c00
 80041bc:	40021000 	.word	0x40021000

080041c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80041c0:	480d      	ldr	r0, [pc, #52]	@ (80041f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80041c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80041c4:	f7ff f9e0 	bl	8003588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041c8:	480c      	ldr	r0, [pc, #48]	@ (80041fc <LoopForever+0x6>)
  ldr r1, =_edata
 80041ca:	490d      	ldr	r1, [pc, #52]	@ (8004200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004204 <LoopForever+0xe>)
  movs r3, #0
 80041ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80041d0:	e002      	b.n	80041d8 <LoopCopyDataInit>

080041d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041d6:	3304      	adds	r3, #4

080041d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041dc:	d3f9      	bcc.n	80041d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041de:	4a0a      	ldr	r2, [pc, #40]	@ (8004208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041e0:	4c0a      	ldr	r4, [pc, #40]	@ (800420c <LoopForever+0x16>)
  movs r3, #0
 80041e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041e4:	e001      	b.n	80041ea <LoopFillZerobss>

080041e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041e8:	3204      	adds	r2, #4

080041ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041ec:	d3fb      	bcc.n	80041e6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80041ee:	f00b ff3f 	bl	8010070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041f2:	f7fe fa5d 	bl	80026b0 <main>

080041f6 <LoopForever>:

LoopForever:
    b LoopForever
 80041f6:	e7fe      	b.n	80041f6 <LoopForever>
  ldr   r0, =_estack
 80041f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80041fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004200:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004204:	08012e94 	.word	0x08012e94
  ldr r2, =_sbss
 8004208:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800420c:	20001578 	.word	0x20001578

08004210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004210:	e7fe      	b.n	8004210 <ADC1_2_IRQHandler>

08004212 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800421c:	2003      	movs	r0, #3
 800421e:	f001 fb99 	bl	8005954 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004222:	200f      	movs	r0, #15
 8004224:	f000 f80e 	bl	8004244 <HAL_InitTick>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	71fb      	strb	r3, [r7, #7]
 8004232:	e001      	b.n	8004238 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004234:	f7fe ffdc 	bl	80031f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004238:	79fb      	ldrb	r3, [r7, #7]

}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004250:	4b16      	ldr	r3, [pc, #88]	@ (80042ac <HAL_InitTick+0x68>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d022      	beq.n	800429e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004258:	4b15      	ldr	r3, [pc, #84]	@ (80042b0 <HAL_InitTick+0x6c>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <HAL_InitTick+0x68>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004264:	fbb1 f3f3 	udiv	r3, r1, r3
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fba4 	bl	80059ba <HAL_SYSTICK_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10f      	bne.n	8004298 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	d809      	bhi.n	8004292 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800427e:	2200      	movs	r2, #0
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	f04f 30ff 	mov.w	r0, #4294967295
 8004286:	f001 fb70 	bl	800596a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800428a:	4a0a      	ldr	r2, [pc, #40]	@ (80042b4 <HAL_InitTick+0x70>)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e007      	b.n	80042a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	e004      	b.n	80042a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
 800429c:	e001      	b.n	80042a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000014 	.word	0x20000014
 80042b0:	2000000c 	.word	0x2000000c
 80042b4:	20000010 	.word	0x20000010

080042b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042bc:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <HAL_IncTick+0x1c>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <HAL_IncTick+0x20>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	4a03      	ldr	r2, [pc, #12]	@ (80042d4 <HAL_IncTick+0x1c>)
 80042c8:	6013      	str	r3, [r2, #0]
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	200013ec 	.word	0x200013ec
 80042d8:	20000014 	.word	0x20000014

080042dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return uwTick;
 80042e0:	4b03      	ldr	r3, [pc, #12]	@ (80042f0 <HAL_GetTick+0x14>)
 80042e2:	681b      	ldr	r3, [r3, #0]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200013ec 	.word	0x200013ec

080042f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042fc:	f7ff ffee 	bl	80042dc <HAL_GetTick>
 8004300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d004      	beq.n	8004318 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800430e:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <HAL_Delay+0x40>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004318:	bf00      	nop
 800431a:	f7ff ffdf 	bl	80042dc <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	429a      	cmp	r2, r3
 8004328:	d8f7      	bhi.n	800431a <HAL_Delay+0x26>
  {
  }
}
 800432a:	bf00      	nop
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000014 	.word	0x20000014

08004338 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	609a      	str	r2, [r3, #8]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3360      	adds	r3, #96	@ 0x60
 80043b2:	461a      	mov	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <LL_ADC_SetOffset+0x44>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	03fff000 	.word	0x03fff000

080043e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3360      	adds	r3, #96	@ 0x60
 80043f6:	461a      	mov	r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3360      	adds	r3, #96	@ 0x60
 8004424:	461a      	mov	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	431a      	orrs	r2, r3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800444a:	b480      	push	{r7}
 800444c:	b087      	sub	sp, #28
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3360      	adds	r3, #96	@ 0x60
 800445a:	461a      	mov	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	431a      	orrs	r2, r3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004474:	bf00      	nop
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3360      	adds	r3, #96	@ 0x60
 8004490:	461a      	mov	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	615a      	str	r2, [r3, #20]
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3330      	adds	r3, #48	@ 0x30
 8004512:	461a      	mov	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	4413      	add	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	211f      	movs	r1, #31
 800452e:	fa01 f303 	lsl.w	r3, r1, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	401a      	ands	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0e9b      	lsrs	r3, r3, #26
 800453a:	f003 011f 	and.w	r1, r3, #31
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	431a      	orrs	r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800455a:	b480      	push	{r7}
 800455c:	b087      	sub	sp, #28
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3314      	adds	r3, #20
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	0e5b      	lsrs	r3, r3, #25
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	4413      	add	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	0d1b      	lsrs	r3, r3, #20
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2107      	movs	r1, #7
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	401a      	ands	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	0d1b      	lsrs	r3, r3, #20
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	431a      	orrs	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045a4:	bf00      	nop
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f003 0318 	and.w	r3, r3, #24
 80045d2:	4908      	ldr	r1, [pc, #32]	@ (80045f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80045d4:	40d9      	lsrs	r1, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	400b      	ands	r3, r1
 80045da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045de:	431a      	orrs	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	0007ffff 	.word	0x0007ffff

080045f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 031f 	and.w	r3, r3, #31
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6093      	str	r3, [r2, #8]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800464c:	d101      	bne.n	8004652 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004670:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004674:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004698:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800469c:	d101      	bne.n	80046a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046c4:	f043 0201 	orr.w	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <LL_ADC_IsEnabled+0x18>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <LL_ADC_IsEnabled+0x1a>
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800470e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004712:	f043 0204 	orr.w	r2, r3, #4
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b04      	cmp	r3, #4
 8004738:	d101      	bne.n	800473e <LL_ADC_REG_IsConversionOngoing+0x18>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b08      	cmp	r3, #8
 800475e:	d101      	bne.n	8004764 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b089      	sub	sp, #36	@ 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e167      	b.n	8004a5e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fc fef3 	bl	8001588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ff3f 	bl	8004638 <LL_ADC_IsDeepPowerDownEnabled>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff25 	bl	8004614 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff ff5a 	bl	8004688 <LL_ADC_IsInternalRegulatorEnabled>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d115      	bne.n	8004806 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff ff3e 	bl	8004660 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047e4:	4ba0      	ldr	r3, [pc, #640]	@ (8004a68 <HAL_ADC_Init+0x2f4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	099b      	lsrs	r3, r3, #6
 80047ea:	4aa0      	ldr	r2, [pc, #640]	@ (8004a6c <HAL_ADC_Init+0x2f8>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	099b      	lsrs	r3, r3, #6
 80047f2:	3301      	adds	r3, #1
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80047f8:	e002      	b.n	8004800 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f9      	bne.n	80047fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff ff3c 	bl	8004688 <LL_ADC_IsInternalRegulatorEnabled>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	f043 0210 	orr.w	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004826:	f043 0201 	orr.w	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff ff75 	bl	8004726 <LL_ADC_REG_IsConversionOngoing>
 800483c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 8100 	bne.w	8004a4c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 80fc 	bne.w	8004a4c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004858:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800485c:	f043 0202 	orr.w	r2, r3, #2
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff ff35 	bl	80046d8 <LL_ADC_IsEnabled>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d111      	bne.n	8004898 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004874:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004878:	f7ff ff2e 	bl	80046d8 <LL_ADC_IsEnabled>
 800487c:	4604      	mov	r4, r0
 800487e:	487c      	ldr	r0, [pc, #496]	@ (8004a70 <HAL_ADC_Init+0x2fc>)
 8004880:	f7ff ff2a 	bl	80046d8 <LL_ADC_IsEnabled>
 8004884:	4603      	mov	r3, r0
 8004886:	4323      	orrs	r3, r4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4619      	mov	r1, r3
 8004892:	4878      	ldr	r0, [pc, #480]	@ (8004a74 <HAL_ADC_Init+0x300>)
 8004894:	f7ff fd50 	bl	8004338 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	7f5b      	ldrb	r3, [r3, #29]
 800489c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048a2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80048a8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80048ae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048b6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d106      	bne.n	80048d4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	3b01      	subs	r3, #1
 80048cc:	045b      	lsls	r3, r3, #17
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	4b60      	ldr	r3, [pc, #384]	@ (8004a78 <HAL_ADC_Init+0x304>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	69b9      	ldr	r1, [r7, #24]
 8004900:	430b      	orrs	r3, r1
 8004902:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff ff14 	bl	800474c <LL_ADC_INJ_IsConversionOngoing>
 8004924:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d16d      	bne.n	8004a08 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d16a      	bne.n	8004a08 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004936:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800493e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004940:	4313      	orrs	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800494e:	f023 0302 	bic.w	r3, r3, #2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	69b9      	ldr	r1, [r7, #24]
 8004958:	430b      	orrs	r3, r1
 800495a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d017      	beq.n	8004994 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004972:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800497c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004980:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6911      	ldr	r1, [r2, #16]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	430b      	orrs	r3, r1
 800498e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004992:	e013      	b.n	80049bc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80049a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80049b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049b8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d118      	bne.n	80049f8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80049d0:	f023 0304 	bic.w	r3, r3, #4
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049dc:	4311      	orrs	r1, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80049e2:	4311      	orrs	r1, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049e8:	430a      	orrs	r2, r1
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
 80049f6:	e007      	b.n	8004a08 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d10c      	bne.n	8004a2a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a16:	f023 010f 	bic.w	r1, r3, #15
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	1e5a      	subs	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a28:	e007      	b.n	8004a3a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 020f 	bic.w	r2, r2, #15
 8004a38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	f043 0201 	orr.w	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a4a:	e007      	b.n	8004a5c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a50:	f043 0210 	orr.w	r2, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3724      	adds	r7, #36	@ 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd90      	pop	{r4, r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000000c 	.word	0x2000000c
 8004a6c:	053e2d63 	.word	0x053e2d63
 8004a70:	50000100 	.word	0x50000100
 8004a74:	50000300 	.word	0x50000300
 8004a78:	fff04007 	.word	0xfff04007

08004a7c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a88:	4851      	ldr	r0, [pc, #324]	@ (8004bd0 <HAL_ADC_Start_DMA+0x154>)
 8004a8a:	f7ff fdb5 	bl	80045f8 <LL_ADC_GetMultimode>
 8004a8e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff fe46 	bl	8004726 <LL_ADC_REG_IsConversionOngoing>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 808f 	bne.w	8004bc0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADC_Start_DMA+0x34>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e08a      	b.n	8004bc6 <HAL_ADC_Start_DMA+0x14a>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b05      	cmp	r3, #5
 8004ac2:	d002      	beq.n	8004aca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b09      	cmp	r3, #9
 8004ac8:	d173      	bne.n	8004bb2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fc8e 	bl	80053ec <ADC_Enable>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d166      	bne.n	8004ba8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ade:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a38      	ldr	r2, [pc, #224]	@ (8004bd4 <HAL_ADC_Start_DMA+0x158>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d002      	beq.n	8004afe <HAL_ADC_Start_DMA+0x82>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	e001      	b.n	8004b02 <HAL_ADC_Start_DMA+0x86>
 8004afe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d002      	beq.n	8004b10 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2c:	f023 0206 	bic.w	r2, r3, #6
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	661a      	str	r2, [r3, #96]	@ 0x60
 8004b34:	e002      	b.n	8004b3c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	4a25      	ldr	r2, [pc, #148]	@ (8004bd8 <HAL_ADC_Start_DMA+0x15c>)
 8004b42:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b48:	4a24      	ldr	r2, [pc, #144]	@ (8004bdc <HAL_ADC_Start_DMA+0x160>)
 8004b4a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	4a23      	ldr	r2, [pc, #140]	@ (8004be0 <HAL_ADC_Start_DMA+0x164>)
 8004b52:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	221c      	movs	r2, #28
 8004b5a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0210 	orr.w	r2, r2, #16
 8004b72:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3340      	adds	r3, #64	@ 0x40
 8004b8e:	4619      	mov	r1, r3
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f000 ffc6 	bl	8005b24 <HAL_DMA_Start_IT>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fdac 	bl	80046fe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004ba6:	e00d      	b.n	8004bc4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004bb0:	e008      	b.n	8004bc4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004bbe:	e001      	b.n	8004bc4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	50000300 	.word	0x50000300
 8004bd4:	50000100 	.word	0x50000100
 8004bd8:	080054f9 	.word	0x080054f9
 8004bdc:	080055d1 	.word	0x080055d1
 8004be0:	080055ed 	.word	0x080055ed

08004be4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b0b6      	sub	sp, #216	@ 0xd8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x22>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e3c8      	b.n	80053c0 <HAL_ADC_ConfigChannel+0x7b4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fd73 	bl	8004726 <LL_ADC_REG_IsConversionOngoing>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f040 83ad 	bne.w	80053a2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	f7ff fc54 	bl	8004502 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fd61 	bl	8004726 <LL_ADC_REG_IsConversionOngoing>
 8004c64:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fd6d 	bl	800474c <LL_ADC_INJ_IsConversionOngoing>
 8004c72:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 81d9 	bne.w	8005032 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 81d4 	bne.w	8005032 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c92:	d10f      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f7ff fc5b 	bl	800455a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fc02 	bl	80044b6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004cb2:	e00e      	b.n	8004cd2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f7ff fc4a 	bl	800455a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fbf2 	bl	80044b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	08db      	lsrs	r3, r3, #3
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d022      	beq.n	8004d3a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6919      	ldr	r1, [r3, #16]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d04:	f7ff fb4c 	bl	80043a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	6919      	ldr	r1, [r3, #16]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f7ff fb98 	bl	800444a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d102      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x124>
 8004d2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d2e:	e000      	b.n	8004d32 <HAL_ADC_ConfigChannel+0x126>
 8004d30:	2300      	movs	r3, #0
 8004d32:	461a      	mov	r2, r3
 8004d34:	f7ff fba4 	bl	8004480 <LL_ADC_SetOffsetSaturation>
 8004d38:	e17b      	b.n	8005032 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fb51 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x15a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fb46 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	0e9b      	lsrs	r3, r3, #26
 8004d60:	f003 021f 	and.w	r2, r3, #31
 8004d64:	e01e      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x198>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff fb3b 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004d94:	2320      	movs	r3, #32
 8004d96:	e004      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d9c:	fab3 f383 	clz	r3, r3
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x1b0>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0e9b      	lsrs	r3, r3, #26
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	e018      	b.n	8004dee <HAL_ADC_ConfigChannel+0x1e2>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004dc8:	fa93 f3a3 	rbit	r3, r3
 8004dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004dd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004de0:	2320      	movs	r3, #32
 8004de2:	e004      	b.n	8004dee <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004de8:	fab3 f383 	clz	r3, r3
 8004dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d106      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fb0a 	bl	8004414 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2101      	movs	r1, #1
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff faee 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x220>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fae3 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004e22:	4603      	mov	r3, r0
 8004e24:	0e9b      	lsrs	r3, r3, #26
 8004e26:	f003 021f 	and.w	r2, r3, #31
 8004e2a:	e01e      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x25e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fad8 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e42:	fa93 f3a3 	rbit	r3, r3
 8004e46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	e004      	b.n	8004e68 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x276>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	0e9b      	lsrs	r3, r3, #26
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	e018      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x2a8>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e8e:	fa93 f3a3 	rbit	r3, r3
 8004e92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004e96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	e004      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d106      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff faa7 	bl	8004414 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2102      	movs	r1, #2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fa8b 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <HAL_ADC_ConfigChannel+0x2e6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fa80 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	0e9b      	lsrs	r3, r3, #26
 8004eec:	f003 021f 	and.w	r2, r3, #31
 8004ef0:	e01e      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x324>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fa75 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f08:	fa93 f3a3 	rbit	r3, r3
 8004f0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004f20:	2320      	movs	r3, #32
 8004f22:	e004      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f28:	fab3 f383 	clz	r3, r3
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x33c>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	0e9b      	lsrs	r3, r3, #26
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	e016      	b.n	8004f76 <HAL_ADC_ConfigChannel+0x36a>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f54:	fa93 f3a3 	rbit	r3, r3
 8004f58:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004f5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004f68:	2320      	movs	r3, #32
 8004f6a:	e004      	b.n	8004f76 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f70:	fab3 f383 	clz	r3, r3
 8004f74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d106      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2102      	movs	r1, #2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fa46 	bl	8004414 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2103      	movs	r1, #3
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fa2a 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x3a8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2103      	movs	r1, #3
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fa1f 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004faa:	4603      	mov	r3, r0
 8004fac:	0e9b      	lsrs	r3, r3, #26
 8004fae:	f003 021f 	and.w	r2, r3, #31
 8004fb2:	e017      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x3d8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2103      	movs	r1, #3
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fa14 	bl	80043e8 <LL_ADC_GetOffsetChannel>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fc6:	fa93 f3a3 	rbit	r3, r3
 8004fca:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004fcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fce:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	e003      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004fda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fdc:	fab3 f383 	clz	r3, r3
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d105      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x3f0>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	0e9b      	lsrs	r3, r3, #26
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	e011      	b.n	8005020 <HAL_ADC_ConfigChannel+0x414>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005004:	fa93 f3a3 	rbit	r3, r3
 8005008:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800500a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800500c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800500e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005014:	2320      	movs	r3, #32
 8005016:	e003      	b.n	8005020 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005020:	429a      	cmp	r2, r3
 8005022:	d106      	bne.n	8005032 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2200      	movs	r2, #0
 800502a:	2103      	movs	r1, #3
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff f9f1 	bl	8004414 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fb4e 	bl	80046d8 <LL_ADC_IsEnabled>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 8140 	bne.w	80052c4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	461a      	mov	r2, r3
 8005052:	f7ff faad 	bl	80045b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	4a8f      	ldr	r2, [pc, #572]	@ (8005298 <HAL_ADC_ConfigChannel+0x68c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	f040 8131 	bne.w	80052c4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <HAL_ADC_ConfigChannel+0x47e>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	0e9b      	lsrs	r3, r3, #26
 8005078:	3301      	adds	r3, #1
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2b09      	cmp	r3, #9
 8005080:	bf94      	ite	ls
 8005082:	2301      	movls	r3, #1
 8005084:	2300      	movhi	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e019      	b.n	80050be <HAL_ADC_ConfigChannel+0x4b2>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800509a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800509c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80050a2:	2320      	movs	r3, #32
 80050a4:	e003      	b.n	80050ae <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80050a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050a8:	fab3 f383 	clz	r3, r3
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	3301      	adds	r3, #1
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	2b09      	cmp	r3, #9
 80050b6:	bf94      	ite	ls
 80050b8:	2301      	movls	r3, #1
 80050ba:	2300      	movhi	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d079      	beq.n	80051b6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d107      	bne.n	80050de <HAL_ADC_ConfigChannel+0x4d2>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	0e9b      	lsrs	r3, r3, #26
 80050d4:	3301      	adds	r3, #1
 80050d6:	069b      	lsls	r3, r3, #26
 80050d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050dc:	e015      	b.n	800510a <HAL_ADC_ConfigChannel+0x4fe>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e6:	fa93 f3a3 	rbit	r3, r3
 80050ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80050ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80050f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80050f6:	2320      	movs	r3, #32
 80050f8:	e003      	b.n	8005102 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80050fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fc:	fab3 f383 	clz	r3, r3
 8005100:	b2db      	uxtb	r3, r3
 8005102:	3301      	adds	r3, #1
 8005104:	069b      	lsls	r3, r3, #26
 8005106:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_ADC_ConfigChannel+0x51e>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	0e9b      	lsrs	r3, r3, #26
 800511c:	3301      	adds	r3, #1
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	2101      	movs	r1, #1
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	e017      	b.n	800515a <HAL_ADC_ConfigChannel+0x54e>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005132:	fa93 f3a3 	rbit	r3, r3
 8005136:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800513a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800513c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005142:	2320      	movs	r3, #32
 8005144:	e003      	b.n	800514e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005148:	fab3 f383 	clz	r3, r3
 800514c:	b2db      	uxtb	r3, r3
 800514e:	3301      	adds	r3, #1
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	ea42 0103 	orr.w	r1, r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x574>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	0e9b      	lsrs	r3, r3, #26
 8005170:	3301      	adds	r3, #1
 8005172:	f003 021f 	and.w	r2, r3, #31
 8005176:	4613      	mov	r3, r2
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	e018      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x5a6>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005188:	fa93 f3a3 	rbit	r3, r3
 800518c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800518e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005190:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005198:	2320      	movs	r3, #32
 800519a:	e003      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800519c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800519e:	fab3 f383 	clz	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	3301      	adds	r3, #1
 80051a6:	f003 021f 	and.w	r2, r3, #31
 80051aa:	4613      	mov	r3, r2
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	4413      	add	r3, r2
 80051b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051b2:	430b      	orrs	r3, r1
 80051b4:	e081      	b.n	80052ba <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d107      	bne.n	80051d2 <HAL_ADC_ConfigChannel+0x5c6>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	0e9b      	lsrs	r3, r3, #26
 80051c8:	3301      	adds	r3, #1
 80051ca:	069b      	lsls	r3, r3, #26
 80051cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051d0:	e015      	b.n	80051fe <HAL_ADC_ConfigChannel+0x5f2>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051da:	fa93 f3a3 	rbit	r3, r3
 80051de:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80051e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80051ea:	2320      	movs	r3, #32
 80051ec:	e003      	b.n	80051f6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	fab3 f383 	clz	r3, r3
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	3301      	adds	r3, #1
 80051f8:	069b      	lsls	r3, r3, #26
 80051fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <HAL_ADC_ConfigChannel+0x612>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	0e9b      	lsrs	r3, r3, #26
 8005210:	3301      	adds	r3, #1
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	2101      	movs	r1, #1
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	e017      	b.n	800524e <HAL_ADC_ConfigChannel+0x642>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	fa93 f3a3 	rbit	r3, r3
 800522a:	61fb      	str	r3, [r7, #28]
  return result;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005236:	2320      	movs	r3, #32
 8005238:	e003      	b.n	8005242 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	b2db      	uxtb	r3, r3
 8005242:	3301      	adds	r3, #1
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	ea42 0103 	orr.w	r1, r2, r3
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10d      	bne.n	800527a <HAL_ADC_ConfigChannel+0x66e>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	0e9b      	lsrs	r3, r3, #26
 8005264:	3301      	adds	r3, #1
 8005266:	f003 021f 	and.w	r2, r3, #31
 800526a:	4613      	mov	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	3b1e      	subs	r3, #30
 8005272:	051b      	lsls	r3, r3, #20
 8005274:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005278:	e01e      	b.n	80052b8 <HAL_ADC_ConfigChannel+0x6ac>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	fa93 f3a3 	rbit	r3, r3
 8005286:	613b      	str	r3, [r7, #16]
  return result;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005292:	2320      	movs	r3, #32
 8005294:	e006      	b.n	80052a4 <HAL_ADC_ConfigChannel+0x698>
 8005296:	bf00      	nop
 8005298:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	fab3 f383 	clz	r3, r3
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	3301      	adds	r3, #1
 80052a6:	f003 021f 	and.w	r2, r3, #31
 80052aa:	4613      	mov	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	3b1e      	subs	r3, #30
 80052b2:	051b      	lsls	r3, r3, #20
 80052b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052be:	4619      	mov	r1, r3
 80052c0:	f7ff f94b 	bl	800455a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b3f      	ldr	r3, [pc, #252]	@ (80053c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d071      	beq.n	80053b4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052d0:	483e      	ldr	r0, [pc, #248]	@ (80053cc <HAL_ADC_ConfigChannel+0x7c0>)
 80052d2:	f7ff f857 	bl	8004384 <LL_ADC_GetCommonPathInternalCh>
 80052d6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3c      	ldr	r2, [pc, #240]	@ (80053d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_ADC_ConfigChannel+0x6e2>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a3a      	ldr	r2, [pc, #232]	@ (80053d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d127      	bne.n	800533e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d121      	bne.n	800533e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005302:	d157      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005308:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800530c:	4619      	mov	r1, r3
 800530e:	482f      	ldr	r0, [pc, #188]	@ (80053cc <HAL_ADC_ConfigChannel+0x7c0>)
 8005310:	f7ff f825 	bl	800435e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005314:	4b30      	ldr	r3, [pc, #192]	@ (80053d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	099b      	lsrs	r3, r3, #6
 800531a:	4a30      	ldr	r2, [pc, #192]	@ (80053dc <HAL_ADC_ConfigChannel+0x7d0>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	099b      	lsrs	r3, r3, #6
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	4613      	mov	r3, r2
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800532e:	e002      	b.n	8005336 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3b01      	subs	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f9      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800533c:	e03a      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a27      	ldr	r2, [pc, #156]	@ (80053e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d113      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800534c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10d      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a22      	ldr	r2, [pc, #136]	@ (80053e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d02a      	beq.n	80053b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800535e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005366:	4619      	mov	r1, r3
 8005368:	4818      	ldr	r0, [pc, #96]	@ (80053cc <HAL_ADC_ConfigChannel+0x7c0>)
 800536a:	f7fe fff8 	bl	800435e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800536e:	e021      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d11c      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800537a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800537e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d116      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a16      	ldr	r2, [pc, #88]	@ (80053e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d011      	beq.n	80053b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005394:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005398:	4619      	mov	r1, r3
 800539a:	480c      	ldr	r0, [pc, #48]	@ (80053cc <HAL_ADC_ConfigChannel+0x7c0>)
 800539c:	f7fe ffdf 	bl	800435e <LL_ADC_SetCommonPathInternalCh>
 80053a0:	e008      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a6:	f043 0220 	orr.w	r2, r3, #32
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80053bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	37d8      	adds	r7, #216	@ 0xd8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	80080000 	.word	0x80080000
 80053cc:	50000300 	.word	0x50000300
 80053d0:	c3210000 	.word	0xc3210000
 80053d4:	90c00010 	.word	0x90c00010
 80053d8:	2000000c 	.word	0x2000000c
 80053dc:	053e2d63 	.word	0x053e2d63
 80053e0:	c7520000 	.word	0xc7520000
 80053e4:	50000100 	.word	0x50000100
 80053e8:	cb840000 	.word	0xcb840000

080053ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff f96b 	bl	80046d8 <LL_ADC_IsEnabled>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d169      	bne.n	80054dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	4b36      	ldr	r3, [pc, #216]	@ (80054e8 <ADC_Enable+0xfc>)
 8005410:	4013      	ands	r3, r2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541a:	f043 0210 	orr.w	r2, r3, #16
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005426:	f043 0201 	orr.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e055      	b.n	80054de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff f93a 	bl	80046b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800543c:	482b      	ldr	r0, [pc, #172]	@ (80054ec <ADC_Enable+0x100>)
 800543e:	f7fe ffa1 	bl	8004384 <LL_ADC_GetCommonPathInternalCh>
 8005442:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005444:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005448:	2b00      	cmp	r3, #0
 800544a:	d013      	beq.n	8005474 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800544c:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <ADC_Enable+0x104>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	099b      	lsrs	r3, r3, #6
 8005452:	4a28      	ldr	r2, [pc, #160]	@ (80054f4 <ADC_Enable+0x108>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	099b      	lsrs	r3, r3, #6
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	4613      	mov	r3, r2
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005466:	e002      	b.n	800546e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	3b01      	subs	r3, #1
 800546c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f9      	bne.n	8005468 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005474:	f7fe ff32 	bl	80042dc <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800547a:	e028      	b.n	80054ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff f929 	bl	80046d8 <LL_ADC_IsEnabled>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff f90d 	bl	80046b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005496:	f7fe ff21 	bl	80042dc <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d914      	bls.n	80054ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d00d      	beq.n	80054ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b6:	f043 0210 	orr.w	r2, r3, #16
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e007      	b.n	80054de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d1cf      	bne.n	800547c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	8000003f 	.word	0x8000003f
 80054ec:	50000300 	.word	0x50000300
 80054f0:	2000000c 	.word	0x2000000c
 80054f4:	053e2d63 	.word	0x053e2d63

080054f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005504:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800550e:	2b00      	cmp	r3, #0
 8005510:	d14b      	bne.n	80055aa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005516:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d021      	beq.n	8005570 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe ffd3 	bl	80044dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d032      	beq.n	80055a2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d12b      	bne.n	80055a2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11f      	bne.n	80055a2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005566:	f043 0201 	orr.w	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800556e:	e018      	b.n	80055a2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d111      	bne.n	80055a2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005582:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d105      	bne.n	80055a2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559a:	f043 0201 	orr.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f7fc f8f4 	bl	8001790 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055a8:	e00e      	b.n	80055c8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fb1e 	bl	8004bf8 <HAL_ADC_ErrorCallback>
}
 80055bc:	e004      	b.n	80055c8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff fb00 	bl	8004be4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800560a:	f043 0204 	orr.w	r2, r3, #4
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7ff faf0 	bl	8004bf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <LL_ADC_IsEnabled>:
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <LL_ADC_IsEnabled+0x18>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <LL_ADC_IsEnabled+0x1a>
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <LL_ADC_REG_IsConversionOngoing>:
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d101      	bne.n	800565e <LL_ADC_REG_IsConversionOngoing+0x18>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b0a1      	sub	sp, #132	@ 0x84
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005686:	2302      	movs	r3, #2
 8005688:	e08b      	b.n	80057a2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005692:	2300      	movs	r3, #0
 8005694:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005696:	2300      	movs	r3, #0
 8005698:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056a2:	d102      	bne.n	80056aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80056a4:	4b41      	ldr	r3, [pc, #260]	@ (80057ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	e001      	b.n	80056ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80056aa:	2300      	movs	r3, #0
 80056ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e06a      	b.n	80057a2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff ffb9 	bl	8005646 <LL_ADC_REG_IsConversionOngoing>
 80056d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff ffb3 	bl	8005646 <LL_ADC_REG_IsConversionOngoing>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d14c      	bne.n	8005780 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80056e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d149      	bne.n	8005780 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80056ec:	4b30      	ldr	r3, [pc, #192]	@ (80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80056ee:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d028      	beq.n	800574a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80056f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	6859      	ldr	r1, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800570a:	035b      	lsls	r3, r3, #13
 800570c:	430b      	orrs	r3, r1
 800570e:	431a      	orrs	r2, r3
 8005710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005712:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005714:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005718:	f7ff ff82 	bl	8005620 <LL_ADC_IsEnabled>
 800571c:	4604      	mov	r4, r0
 800571e:	4823      	ldr	r0, [pc, #140]	@ (80057ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005720:	f7ff ff7e 	bl	8005620 <LL_ADC_IsEnabled>
 8005724:	4603      	mov	r3, r0
 8005726:	4323      	orrs	r3, r4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d133      	bne.n	8005794 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800572c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005734:	f023 030f 	bic.w	r3, r3, #15
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	6811      	ldr	r1, [r2, #0]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	6892      	ldr	r2, [r2, #8]
 8005740:	430a      	orrs	r2, r1
 8005742:	431a      	orrs	r2, r3
 8005744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005746:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005748:	e024      	b.n	8005794 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800574a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005754:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005756:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800575a:	f7ff ff61 	bl	8005620 <LL_ADC_IsEnabled>
 800575e:	4604      	mov	r4, r0
 8005760:	4812      	ldr	r0, [pc, #72]	@ (80057ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005762:	f7ff ff5d 	bl	8005620 <LL_ADC_IsEnabled>
 8005766:	4603      	mov	r3, r0
 8005768:	4323      	orrs	r3, r4
 800576a:	2b00      	cmp	r3, #0
 800576c:	d112      	bne.n	8005794 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800576e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005776:	f023 030f 	bic.w	r3, r3, #15
 800577a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800577c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800577e:	e009      	b.n	8005794 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005792:	e000      	b.n	8005796 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005794:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800579e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3784      	adds	r7, #132	@ 0x84
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd90      	pop	{r4, r7, pc}
 80057aa:	bf00      	nop
 80057ac:	50000100 	.word	0x50000100
 80057b0:	50000300 	.word	0x50000300

080057b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057c4:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057d0:	4013      	ands	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057e6:	4a04      	ldr	r2, [pc, #16]	@ (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	60d3      	str	r3, [r2, #12]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005800:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <__NVIC_GetPriorityGrouping+0x18>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	f003 0307 	and.w	r3, r3, #7
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000ed00 	.word	0xe000ed00

08005818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005826:	2b00      	cmp	r3, #0
 8005828:	db0b      	blt.n	8005842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	f003 021f 	and.w	r2, r3, #31
 8005830:	4907      	ldr	r1, [pc, #28]	@ (8005850 <__NVIC_EnableIRQ+0x38>)
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2001      	movs	r0, #1
 800583a:	fa00 f202 	lsl.w	r2, r0, r2
 800583e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	e000e100 	.word	0xe000e100

08005854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005864:	2b00      	cmp	r3, #0
 8005866:	db0a      	blt.n	800587e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	490c      	ldr	r1, [pc, #48]	@ (80058a0 <__NVIC_SetPriority+0x4c>)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	0112      	lsls	r2, r2, #4
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	440b      	add	r3, r1
 8005878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800587c:	e00a      	b.n	8005894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4908      	ldr	r1, [pc, #32]	@ (80058a4 <__NVIC_SetPriority+0x50>)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	3b04      	subs	r3, #4
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	440b      	add	r3, r1
 8005892:	761a      	strb	r2, [r3, #24]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	e000e100 	.word	0xe000e100
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	@ 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f1c3 0307 	rsb	r3, r3, #7
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf28      	it	cs
 80058c6:	2304      	movcs	r3, #4
 80058c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3304      	adds	r3, #4
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d902      	bls.n	80058d8 <NVIC_EncodePriority+0x30>
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3b03      	subs	r3, #3
 80058d6:	e000      	b.n	80058da <NVIC_EncodePriority+0x32>
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	401a      	ands	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058f0:	f04f 31ff 	mov.w	r1, #4294967295
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	43d9      	mvns	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005900:	4313      	orrs	r3, r2
         );
}
 8005902:	4618      	mov	r0, r3
 8005904:	3724      	adds	r7, #36	@ 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3b01      	subs	r3, #1
 800591c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005920:	d301      	bcc.n	8005926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005922:	2301      	movs	r3, #1
 8005924:	e00f      	b.n	8005946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005926:	4a0a      	ldr	r2, [pc, #40]	@ (8005950 <SysTick_Config+0x40>)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3b01      	subs	r3, #1
 800592c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800592e:	210f      	movs	r1, #15
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	f7ff ff8e 	bl	8005854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005938:	4b05      	ldr	r3, [pc, #20]	@ (8005950 <SysTick_Config+0x40>)
 800593a:	2200      	movs	r2, #0
 800593c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800593e:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <SysTick_Config+0x40>)
 8005940:	2207      	movs	r2, #7
 8005942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	e000e010 	.word	0xe000e010

08005954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ff29 	bl	80057b4 <__NVIC_SetPriorityGrouping>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	4603      	mov	r3, r0
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
 8005976:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005978:	f7ff ff40 	bl	80057fc <__NVIC_GetPriorityGrouping>
 800597c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	6978      	ldr	r0, [r7, #20]
 8005984:	f7ff ff90 	bl	80058a8 <NVIC_EncodePriority>
 8005988:	4602      	mov	r2, r0
 800598a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff ff5f 	bl	8005854 <__NVIC_SetPriority>
}
 8005996:	bf00      	nop
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	4603      	mov	r3, r0
 80059a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff ff33 	bl	8005818 <__NVIC_EnableIRQ>
}
 80059b2:	bf00      	nop
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff ffa4 	bl	8005910 <SysTick_Config>
 80059c8:	4603      	mov	r3, r0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e08d      	b.n	8005b02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	4b47      	ldr	r3, [pc, #284]	@ (8005b0c <HAL_DMA_Init+0x138>)
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d80f      	bhi.n	8005a12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	4b45      	ldr	r3, [pc, #276]	@ (8005b10 <HAL_DMA_Init+0x13c>)
 80059fa:	4413      	add	r3, r2
 80059fc:	4a45      	ldr	r2, [pc, #276]	@ (8005b14 <HAL_DMA_Init+0x140>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	009a      	lsls	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a42      	ldr	r2, [pc, #264]	@ (8005b18 <HAL_DMA_Init+0x144>)
 8005a0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a10:	e00e      	b.n	8005a30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	4b40      	ldr	r3, [pc, #256]	@ (8005b1c <HAL_DMA_Init+0x148>)
 8005a1a:	4413      	add	r3, r2
 8005a1c:	4a3d      	ldr	r2, [pc, #244]	@ (8005b14 <HAL_DMA_Init+0x140>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	009a      	lsls	r2, r3, #2
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b20 <HAL_DMA_Init+0x14c>)
 8005a2e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa82 	bl	8005f8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a90:	d102      	bne.n	8005a98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005aac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d010      	beq.n	8005ad8 <HAL_DMA_Init+0x104>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d80c      	bhi.n	8005ad8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 faa2 	bl	8006008 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ad4:	605a      	str	r2, [r3, #4]
 8005ad6:	e008      	b.n	8005aea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40020407 	.word	0x40020407
 8005b10:	bffdfff8 	.word	0xbffdfff8
 8005b14:	cccccccd 	.word	0xcccccccd
 8005b18:	40020000 	.word	0x40020000
 8005b1c:	bffdfbf8 	.word	0xbffdfbf8
 8005b20:	40020400 	.word	0x40020400

08005b24 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_DMA_Start_IT+0x20>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e066      	b.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d155      	bne.n	8005c04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f9c7 	bl	8005f10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d008      	beq.n	8005b9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 020e 	orr.w	r2, r2, #14
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e00f      	b.n	8005bbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0204 	bic.w	r2, r2, #4
 8005baa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 020a 	orr.w	r2, r2, #10
 8005bba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bd8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d007      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bf0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e005      	b.n	8005c10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d005      	beq.n	8005c3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2204      	movs	r2, #4
 8005c36:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
 8005c3c:	e037      	b.n	8005cae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 020e 	bic.w	r2, r2, #14
 8005c4c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c5c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0201 	bic.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c72:	f003 021f 	and.w	r2, r3, #31
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c80:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c8a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ca2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d00d      	beq.n	8005d00 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	73fb      	strb	r3, [r7, #15]
 8005cfe:	e047      	b.n	8005d90 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 020e 	bic.w	r2, r2, #14
 8005d0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d34:	f003 021f 	and.w	r2, r3, #31
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d42:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00c      	beq.n	8005d70 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
    }
  }
  return status;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db6:	f003 031f 	and.w	r3, r3, #31
 8005dba:	2204      	movs	r2, #4
 8005dbc:	409a      	lsls	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d026      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x7a>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d021      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d107      	bne.n	8005dee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0204 	bic.w	r2, r2, #4
 8005dec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df2:	f003 021f 	and.w	r2, r3, #31
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005e00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d071      	beq.n	8005eee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005e12:	e06c      	b.n	8005eee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e18:	f003 031f 	and.w	r3, r3, #31
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	409a      	lsls	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4013      	ands	r3, r2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d02e      	beq.n	8005e86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d029      	beq.n	8005e86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 020a 	bic.w	r2, r2, #10
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5c:	f003 021f 	and.w	r2, r3, #31
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	2102      	movs	r1, #2
 8005e66:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d038      	beq.n	8005eee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005e84:	e033      	b.n	8005eee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2208      	movs	r2, #8
 8005e90:	409a      	lsls	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d02a      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d025      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 020e 	bic.w	r2, r2, #14
 8005eb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb8:	f003 021f 	and.w	r2, r3, #31
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
}
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3e:	f003 021f 	and.w	r2, r3, #31
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	2101      	movs	r1, #1
 8005f48:	fa01 f202 	lsl.w	r2, r1, r2
 8005f4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2b10      	cmp	r3, #16
 8005f5c:	d108      	bne.n	8005f70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f6e:	e007      	b.n	8005f80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4b16      	ldr	r3, [pc, #88]	@ (8005ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d802      	bhi.n	8005fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005fa0:	4b15      	ldr	r3, [pc, #84]	@ (8005ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e001      	b.n	8005faa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005fa6:	4b15      	ldr	r3, [pc, #84]	@ (8005ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005fa8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	3b08      	subs	r3, #8
 8005fb6:	4a12      	ldr	r2, [pc, #72]	@ (8006000 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	091b      	lsrs	r3, r3, #4
 8005fbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	009a      	lsls	r2, r3, #2
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8006004 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2201      	movs	r2, #1
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40020407 	.word	0x40020407
 8005ff8:	40020800 	.word	0x40020800
 8005ffc:	40020820 	.word	0x40020820
 8006000:	cccccccd 	.word	0xcccccccd
 8006004:	40020880 	.word	0x40020880

08006008 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4b0b      	ldr	r3, [pc, #44]	@ (8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a08      	ldr	r2, [pc, #32]	@ (800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800602a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3b01      	subs	r3, #1
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	2201      	movs	r2, #1
 8006036:	409a      	lsls	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	1000823f 	.word	0x1000823f
 800604c:	40020940 	.word	0x40020940

08006050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800605e:	e15a      	b.n	8006316 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	2101      	movs	r1, #1
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	4013      	ands	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 814c 	beq.w	8006310 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	2b01      	cmp	r3, #1
 8006082:	d005      	beq.n	8006090 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800608c:	2b02      	cmp	r3, #2
 800608e:	d130      	bne.n	80060f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	2203      	movs	r2, #3
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	43db      	mvns	r3, r3
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4013      	ands	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060c6:	2201      	movs	r2, #1
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	43db      	mvns	r3, r3
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4013      	ands	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	f003 0201 	and.w	r2, r3, #1
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d017      	beq.n	800612e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	2203      	movs	r2, #3
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4013      	ands	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d123      	bne.n	8006182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	08da      	lsrs	r2, r3, #3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3208      	adds	r2, #8
 8006142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	220f      	movs	r2, #15
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	43db      	mvns	r3, r3
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4013      	ands	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	08da      	lsrs	r2, r3, #3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3208      	adds	r2, #8
 800617c:	6939      	ldr	r1, [r7, #16]
 800617e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	2203      	movs	r2, #3
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43db      	mvns	r3, r3
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4013      	ands	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f003 0203 	and.w	r2, r3, #3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80a6 	beq.w	8006310 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c4:	4b5b      	ldr	r3, [pc, #364]	@ (8006334 <HAL_GPIO_Init+0x2e4>)
 80061c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c8:	4a5a      	ldr	r2, [pc, #360]	@ (8006334 <HAL_GPIO_Init+0x2e4>)
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80061d0:	4b58      	ldr	r3, [pc, #352]	@ (8006334 <HAL_GPIO_Init+0x2e4>)
 80061d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061dc:	4a56      	ldr	r2, [pc, #344]	@ (8006338 <HAL_GPIO_Init+0x2e8>)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	089b      	lsrs	r3, r3, #2
 80061e2:	3302      	adds	r3, #2
 80061e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	220f      	movs	r2, #15
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	43db      	mvns	r3, r3
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4013      	ands	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006206:	d01f      	beq.n	8006248 <HAL_GPIO_Init+0x1f8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a4c      	ldr	r2, [pc, #304]	@ (800633c <HAL_GPIO_Init+0x2ec>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d019      	beq.n	8006244 <HAL_GPIO_Init+0x1f4>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a4b      	ldr	r2, [pc, #300]	@ (8006340 <HAL_GPIO_Init+0x2f0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <HAL_GPIO_Init+0x1f0>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a4a      	ldr	r2, [pc, #296]	@ (8006344 <HAL_GPIO_Init+0x2f4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00d      	beq.n	800623c <HAL_GPIO_Init+0x1ec>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a49      	ldr	r2, [pc, #292]	@ (8006348 <HAL_GPIO_Init+0x2f8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d007      	beq.n	8006238 <HAL_GPIO_Init+0x1e8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a48      	ldr	r2, [pc, #288]	@ (800634c <HAL_GPIO_Init+0x2fc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d101      	bne.n	8006234 <HAL_GPIO_Init+0x1e4>
 8006230:	2305      	movs	r3, #5
 8006232:	e00a      	b.n	800624a <HAL_GPIO_Init+0x1fa>
 8006234:	2306      	movs	r3, #6
 8006236:	e008      	b.n	800624a <HAL_GPIO_Init+0x1fa>
 8006238:	2304      	movs	r3, #4
 800623a:	e006      	b.n	800624a <HAL_GPIO_Init+0x1fa>
 800623c:	2303      	movs	r3, #3
 800623e:	e004      	b.n	800624a <HAL_GPIO_Init+0x1fa>
 8006240:	2302      	movs	r3, #2
 8006242:	e002      	b.n	800624a <HAL_GPIO_Init+0x1fa>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_GPIO_Init+0x1fa>
 8006248:	2300      	movs	r3, #0
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	f002 0203 	and.w	r2, r2, #3
 8006250:	0092      	lsls	r2, r2, #2
 8006252:	4093      	lsls	r3, r2
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800625a:	4937      	ldr	r1, [pc, #220]	@ (8006338 <HAL_GPIO_Init+0x2e8>)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	089b      	lsrs	r3, r3, #2
 8006260:	3302      	adds	r3, #2
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006268:	4b39      	ldr	r3, [pc, #228]	@ (8006350 <HAL_GPIO_Init+0x300>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	43db      	mvns	r3, r3
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4013      	ands	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800628c:	4a30      	ldr	r2, [pc, #192]	@ (8006350 <HAL_GPIO_Init+0x300>)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006292:	4b2f      	ldr	r3, [pc, #188]	@ (8006350 <HAL_GPIO_Init+0x300>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	43db      	mvns	r3, r3
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062b6:	4a26      	ldr	r2, [pc, #152]	@ (8006350 <HAL_GPIO_Init+0x300>)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80062bc:	4b24      	ldr	r3, [pc, #144]	@ (8006350 <HAL_GPIO_Init+0x300>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	43db      	mvns	r3, r3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4013      	ands	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006350 <HAL_GPIO_Init+0x300>)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80062e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006350 <HAL_GPIO_Init+0x300>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	43db      	mvns	r3, r3
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4013      	ands	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800630a:	4a11      	ldr	r2, [pc, #68]	@ (8006350 <HAL_GPIO_Init+0x300>)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	3301      	adds	r3, #1
 8006314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	fa22 f303 	lsr.w	r3, r2, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	f47f ae9d 	bne.w	8006060 <HAL_GPIO_Init+0x10>
  }
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40021000 	.word	0x40021000
 8006338:	40010000 	.word	0x40010000
 800633c:	48000400 	.word	0x48000400
 8006340:	48000800 	.word	0x48000800
 8006344:	48000c00 	.word	0x48000c00
 8006348:	48001000 	.word	0x48001000
 800634c:	48001400 	.word	0x48001400
 8006350:	40010400 	.word	0x40010400

08006354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	807b      	strh	r3, [r7, #2]
 8006360:	4613      	mov	r3, r2
 8006362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006364:	787b      	ldrb	r3, [r7, #1]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800636a:	887a      	ldrh	r2, [r7, #2]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006370:	e002      	b.n	8006378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006372:	887a      	ldrh	r2, [r7, #2]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800638e:	4b08      	ldr	r3, [pc, #32]	@ (80063b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	4013      	ands	r3, r2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d006      	beq.n	80063a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800639a:	4a05      	ldr	r2, [pc, #20]	@ (80063b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063a0:	88fb      	ldrh	r3, [r7, #6]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f806 	bl	80063b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40010400 	.word	0x40010400

080063b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e08d      	b.n	80064f8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d106      	bne.n	80063f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fc f8e5 	bl	80025c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2224      	movs	r2, #36	@ 0x24
 80063fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0201 	bic.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800641a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800642a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d107      	bne.n	8006444 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006440:	609a      	str	r2, [r3, #8]
 8006442:	e006      	b.n	8006452 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006450:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d108      	bne.n	800646c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	e007      	b.n	800647c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800647a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800648a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800649e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69d9      	ldr	r1, [r3, #28]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0201 	orr.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	461a      	mov	r2, r3
 800650e:	4603      	mov	r3, r0
 8006510:	817b      	strh	r3, [r7, #10]
 8006512:	460b      	mov	r3, r1
 8006514:	813b      	strh	r3, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b20      	cmp	r3, #32
 8006524:	f040 80f9 	bne.w	800671a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_I2C_Mem_Write+0x34>
 800652e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800653a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0ed      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_I2C_Mem_Write+0x4e>
 800654a:	2302      	movs	r3, #2
 800654c:	e0e6      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006556:	f7fd fec1 	bl	80042dc <HAL_GetTick>
 800655a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	2319      	movs	r3, #25
 8006562:	2201      	movs	r2, #1
 8006564:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fac3 	bl	8006af4 <I2C_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0d1      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2221      	movs	r2, #33	@ 0x21
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2240      	movs	r2, #64	@ 0x40
 8006584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006598:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065a0:	88f8      	ldrh	r0, [r7, #6]
 80065a2:	893a      	ldrh	r2, [r7, #8]
 80065a4:	8979      	ldrh	r1, [r7, #10]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	4603      	mov	r3, r0
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f9d3 	bl	800695c <I2C_RequestMemoryWrite>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0a9      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2bff      	cmp	r3, #255	@ 0xff
 80065d0:	d90e      	bls.n	80065f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	22ff      	movs	r2, #255	@ 0xff
 80065d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	8979      	ldrh	r1, [r7, #10]
 80065e0:	2300      	movs	r3, #0
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fc47 	bl	8006e7c <I2C_TransferConfig>
 80065ee:	e00f      	b.n	8006610 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	8979      	ldrh	r1, [r7, #10]
 8006602:	2300      	movs	r3, #0
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fc36 	bl	8006e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fac6 	bl	8006ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e07b      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006628:	781a      	ldrb	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d034      	beq.n	80066c8 <HAL_I2C_Mem_Write+0x1c8>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d130      	bne.n	80066c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666c:	2200      	movs	r2, #0
 800666e:	2180      	movs	r1, #128	@ 0x80
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fa3f 	bl	8006af4 <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e04d      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2bff      	cmp	r3, #255	@ 0xff
 8006688:	d90e      	bls.n	80066a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	22ff      	movs	r2, #255	@ 0xff
 800668e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006694:	b2da      	uxtb	r2, r3
 8006696:	8979      	ldrh	r1, [r7, #10]
 8006698:	2300      	movs	r3, #0
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fbeb 	bl	8006e7c <I2C_TransferConfig>
 80066a6:	e00f      	b.n	80066c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	8979      	ldrh	r1, [r7, #10]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fbda 	bl	8006e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d19e      	bne.n	8006610 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 faac 	bl	8006c34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e01a      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2220      	movs	r2, #32
 80066ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <HAL_I2C_Mem_Write+0x224>)
 80066fa:	400b      	ands	r3, r1
 80066fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	fe00e800 	.word	0xfe00e800

08006728 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	461a      	mov	r2, r3
 8006736:	4603      	mov	r3, r0
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	460b      	mov	r3, r1
 800673c:	813b      	strh	r3, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b20      	cmp	r3, #32
 800674c:	f040 80fd 	bne.w	800694a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_I2C_Mem_Read+0x34>
 8006756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006762:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0f1      	b.n	800694c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_I2C_Mem_Read+0x4e>
 8006772:	2302      	movs	r3, #2
 8006774:	e0ea      	b.n	800694c <HAL_I2C_Mem_Read+0x224>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800677e:	f7fd fdad 	bl	80042dc <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	2319      	movs	r3, #25
 800678a:	2201      	movs	r2, #1
 800678c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f9af 	bl	8006af4 <I2C_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e0d5      	b.n	800694c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2222      	movs	r2, #34	@ 0x22
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2240      	movs	r2, #64	@ 0x40
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a3a      	ldr	r2, [r7, #32]
 80067ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067c8:	88f8      	ldrh	r0, [r7, #6]
 80067ca:	893a      	ldrh	r2, [r7, #8]
 80067cc:	8979      	ldrh	r1, [r7, #10]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4603      	mov	r3, r0
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f913 	bl	8006a04 <I2C_RequestMemoryRead>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e0ad      	b.n	800694c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2bff      	cmp	r3, #255	@ 0xff
 80067f8:	d90e      	bls.n	8006818 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	22ff      	movs	r2, #255	@ 0xff
 80067fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006804:	b2da      	uxtb	r2, r3
 8006806:	8979      	ldrh	r1, [r7, #10]
 8006808:	4b52      	ldr	r3, [pc, #328]	@ (8006954 <HAL_I2C_Mem_Read+0x22c>)
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fb33 	bl	8006e7c <I2C_TransferConfig>
 8006816:	e00f      	b.n	8006838 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006826:	b2da      	uxtb	r2, r3
 8006828:	8979      	ldrh	r1, [r7, #10]
 800682a:	4b4a      	ldr	r3, [pc, #296]	@ (8006954 <HAL_I2C_Mem_Read+0x22c>)
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fb22 	bl	8006e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683e:	2200      	movs	r2, #0
 8006840:	2104      	movs	r1, #4
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f956 	bl	8006af4 <I2C_WaitOnFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e07c      	b.n	800694c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d034      	beq.n	80068f8 <HAL_I2C_Mem_Read+0x1d0>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006892:	2b00      	cmp	r3, #0
 8006894:	d130      	bne.n	80068f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689c:	2200      	movs	r2, #0
 800689e:	2180      	movs	r1, #128	@ 0x80
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f927 	bl	8006af4 <I2C_WaitOnFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e04d      	b.n	800694c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2bff      	cmp	r3, #255	@ 0xff
 80068b8:	d90e      	bls.n	80068d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	22ff      	movs	r2, #255	@ 0xff
 80068be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	8979      	ldrh	r1, [r7, #10]
 80068c8:	2300      	movs	r3, #0
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 fad3 	bl	8006e7c <I2C_TransferConfig>
 80068d6:	e00f      	b.n	80068f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	8979      	ldrh	r1, [r7, #10]
 80068ea:	2300      	movs	r3, #0
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fac2 	bl	8006e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d19a      	bne.n	8006838 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f994 	bl	8006c34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e01a      	b.n	800694c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2220      	movs	r2, #32
 800691c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6859      	ldr	r1, [r3, #4]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b0b      	ldr	r3, [pc, #44]	@ (8006958 <HAL_I2C_Mem_Read+0x230>)
 800692a:	400b      	ands	r3, r1
 800692c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e000      	b.n	800694c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800694a:	2302      	movs	r3, #2
  }
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	80002400 	.word	0x80002400
 8006958:	fe00e800 	.word	0xfe00e800

0800695c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	461a      	mov	r2, r3
 800696a:	4603      	mov	r3, r0
 800696c:	817b      	strh	r3, [r7, #10]
 800696e:	460b      	mov	r3, r1
 8006970:	813b      	strh	r3, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	b2da      	uxtb	r2, r3
 800697a:	8979      	ldrh	r1, [r7, #10]
 800697c:	4b20      	ldr	r3, [pc, #128]	@ (8006a00 <I2C_RequestMemoryWrite+0xa4>)
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 fa79 	bl	8006e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f909 	bl	8006ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e02c      	b.n	80069f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d105      	bne.n	80069b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069a4:	893b      	ldrh	r3, [r7, #8]
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80069ae:	e015      	b.n	80069dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069b0:	893b      	ldrh	r3, [r7, #8]
 80069b2:	0a1b      	lsrs	r3, r3, #8
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f8ef 	bl	8006ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e012      	b.n	80069f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069d2:	893b      	ldrh	r3, [r7, #8]
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2200      	movs	r2, #0
 80069e4:	2180      	movs	r1, #128	@ 0x80
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f884 	bl	8006af4 <I2C_WaitOnFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	80002000 	.word	0x80002000

08006a04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	817b      	strh	r3, [r7, #10]
 8006a16:	460b      	mov	r3, r1
 8006a18:	813b      	strh	r3, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	8979      	ldrh	r1, [r7, #10]
 8006a24:	4b20      	ldr	r3, [pc, #128]	@ (8006aa8 <I2C_RequestMemoryRead+0xa4>)
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 fa26 	bl	8006e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	69b9      	ldr	r1, [r7, #24]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f8b6 	bl	8006ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e02c      	b.n	8006a9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d105      	bne.n	8006a56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a4a:	893b      	ldrh	r3, [r7, #8]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a54:	e015      	b.n	8006a82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a56:	893b      	ldrh	r3, [r7, #8]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	69b9      	ldr	r1, [r7, #24]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f89c 	bl	8006ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e012      	b.n	8006a9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a78:	893b      	ldrh	r3, [r7, #8]
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2140      	movs	r1, #64	@ 0x40
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f831 	bl	8006af4 <I2C_WaitOnFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	80002000 	.word	0x80002000

08006aac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d103      	bne.n	8006aca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d007      	beq.n	8006ae8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	619a      	str	r2, [r3, #24]
  }
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	4613      	mov	r3, r2
 8006b02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b04:	e03b      	b.n	8006b7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f8d6 	bl	8006cbc <I2C_IsErrorOccurred>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e041      	b.n	8006b9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d02d      	beq.n	8006b7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b22:	f7fd fbdb 	bl	80042dc <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d302      	bcc.n	8006b38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d122      	bne.n	8006b7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4013      	ands	r3, r2
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	bf0c      	ite	eq
 8006b48:	2301      	moveq	r3, #1
 8006b4a:	2300      	movne	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d113      	bne.n	8006b7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b5a:	f043 0220 	orr.w	r2, r3, #32
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e00f      	b.n	8006b9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4013      	ands	r3, r2
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	bf0c      	ite	eq
 8006b8e:	2301      	moveq	r3, #1
 8006b90:	2300      	movne	r3, #0
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d0b4      	beq.n	8006b06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bb2:	e033      	b.n	8006c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f87f 	bl	8006cbc <I2C_IsErrorOccurred>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e031      	b.n	8006c2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d025      	beq.n	8006c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd0:	f7fd fb84 	bl	80042dc <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d302      	bcc.n	8006be6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d11a      	bne.n	8006c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d013      	beq.n	8006c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf8:	f043 0220 	orr.w	r2, r3, #32
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e007      	b.n	8006c2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d1c4      	bne.n	8006bb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c40:	e02f      	b.n	8006ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 f838 	bl	8006cbc <I2C_IsErrorOccurred>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e02d      	b.n	8006cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c56:	f7fd fb41 	bl	80042dc <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d302      	bcc.n	8006c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d11a      	bne.n	8006ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	d013      	beq.n	8006ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c7e:	f043 0220 	orr.w	r2, r3, #32
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e007      	b.n	8006cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d1c8      	bne.n	8006c42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	@ 0x28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d068      	beq.n	8006dba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2210      	movs	r2, #16
 8006cee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006cf0:	e049      	b.n	8006d86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf8:	d045      	beq.n	8006d86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cfa:	f7fd faef 	bl	80042dc <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d302      	bcc.n	8006d10 <I2C_IsErrorOccurred+0x54>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d13a      	bne.n	8006d86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d32:	d121      	bne.n	8006d78 <I2C_IsErrorOccurred+0xbc>
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d3a:	d01d      	beq.n	8006d78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d3c:	7cfb      	ldrb	r3, [r7, #19]
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d01a      	beq.n	8006d78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d52:	f7fd fac3 	bl	80042dc <HAL_GetTick>
 8006d56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d58:	e00e      	b.n	8006d78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d5a:	f7fd fabf 	bl	80042dc <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b19      	cmp	r3, #25
 8006d66:	d907      	bls.n	8006d78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	f043 0320 	orr.w	r3, r3, #32
 8006d6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006d76:	e006      	b.n	8006d86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d1e9      	bne.n	8006d5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d003      	beq.n	8006d9c <I2C_IsErrorOccurred+0xe0>
 8006d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0aa      	beq.n	8006cf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2220      	movs	r2, #32
 8006daa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	f043 0304 	orr.w	r3, r3, #4
 8006db2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	f043 0301 	orr.w	r3, r3, #1
 8006dd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ddc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	f043 0308 	orr.w	r3, r3, #8
 8006df4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006dfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	f043 0302 	orr.w	r3, r3, #2
 8006e16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01c      	beq.n	8006e6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff fe3b 	bl	8006aac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6859      	ldr	r1, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <I2C_IsErrorOccurred+0x1bc>)
 8006e42:	400b      	ands	r3, r1
 8006e44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3728      	adds	r7, #40	@ 0x28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	fe00e800 	.word	0xfe00e800

08006e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	607b      	str	r3, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	817b      	strh	r3, [r7, #10]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e8e:	897b      	ldrh	r3, [r7, #10]
 8006e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e94:	7a7b      	ldrb	r3, [r7, #9]
 8006e96:	041b      	lsls	r3, r3, #16
 8006e98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006eaa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	0d5b      	lsrs	r3, r3, #21
 8006eb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006eba:	4b08      	ldr	r3, [pc, #32]	@ (8006edc <I2C_TransferConfig+0x60>)
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	ea02 0103 	and.w	r1, r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ece:	bf00      	nop
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	03ff63ff 	.word	0x03ff63ff

08006ee0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d138      	bne.n	8006f68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e032      	b.n	8006f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2224      	movs	r2, #36	@ 0x24
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0201 	bic.w	r2, r2, #1
 8006f22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6819      	ldr	r1, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0201 	orr.w	r2, r2, #1
 8006f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e000      	b.n	8006f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f68:	2302      	movs	r3, #2
  }
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d139      	bne.n	8007000 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e033      	b.n	8007002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2224      	movs	r2, #36	@ 0x24
 8006fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0201 	bic.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006fc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0201 	orr.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e000      	b.n	8007002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007000:	2302      	movs	r3, #2
  }
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0c0      	b.n	80071a2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d106      	bne.n	800703a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7fd f88f 	bl	8004158 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2203      	movs	r2, #3
 800703e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f004 fef4 	bl	800be34 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
 8007050:	e03e      	b.n	80070d0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007052:	7bfa      	ldrb	r2, [r7, #15]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	440b      	add	r3, r1
 8007060:	3311      	adds	r3, #17
 8007062:	2201      	movs	r2, #1
 8007064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007066:	7bfa      	ldrb	r2, [r7, #15]
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	440b      	add	r3, r1
 8007074:	3310      	adds	r3, #16
 8007076:	7bfa      	ldrb	r2, [r7, #15]
 8007078:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800707a:	7bfa      	ldrb	r2, [r7, #15]
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	440b      	add	r3, r1
 8007088:	3313      	adds	r3, #19
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800708e:	7bfa      	ldrb	r2, [r7, #15]
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	440b      	add	r3, r1
 800709c:	3320      	adds	r3, #32
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070a2:	7bfa      	ldrb	r2, [r7, #15]
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	440b      	add	r3, r1
 80070b0:	3324      	adds	r3, #36	@ 0x24
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	440b      	add	r3, r1
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	3301      	adds	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	791b      	ldrb	r3, [r3, #4]
 80070d4:	7bfa      	ldrb	r2, [r7, #15]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d3bb      	bcc.n	8007052 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
 80070de:	e044      	b.n	800716a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070e0:	7bfa      	ldrb	r2, [r7, #15]
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	440b      	add	r3, r1
 80070ee:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070f6:	7bfa      	ldrb	r2, [r7, #15]
 80070f8:	6879      	ldr	r1, [r7, #4]
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	440b      	add	r3, r1
 8007104:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007108:	7bfa      	ldrb	r2, [r7, #15]
 800710a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800710c:	7bfa      	ldrb	r2, [r7, #15]
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	440b      	add	r3, r1
 800711a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007122:	7bfa      	ldrb	r2, [r7, #15]
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	440b      	add	r3, r1
 8007130:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007138:	7bfa      	ldrb	r2, [r7, #15]
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	440b      	add	r3, r1
 8007146:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800714e:	7bfa      	ldrb	r2, [r7, #15]
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	440b      	add	r3, r1
 800715c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	3301      	adds	r3, #1
 8007168:	73fb      	strb	r3, [r7, #15]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	7bfa      	ldrb	r2, [r7, #15]
 8007170:	429a      	cmp	r2, r3
 8007172:	d3b5      	bcc.n	80070e0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007180:	f004 fe73 	bl	800be6a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	7a9b      	ldrb	r3, [r3, #10]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d102      	bne.n	80071a0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f805 	bl	80071aa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f043 0302 	orr.w	r3, r3, #2
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d141      	bne.n	8007292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800720e:	4b4b      	ldr	r3, [pc, #300]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800721a:	d131      	bne.n	8007280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800721c:	4b47      	ldr	r3, [pc, #284]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800721e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007222:	4a46      	ldr	r2, [pc, #280]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800722c:	4b43      	ldr	r3, [pc, #268]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007234:	4a41      	ldr	r2, [pc, #260]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800723a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800723c:	4b40      	ldr	r3, [pc, #256]	@ (8007340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2232      	movs	r2, #50	@ 0x32
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	4a3f      	ldr	r2, [pc, #252]	@ (8007344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	0c9b      	lsrs	r3, r3, #18
 800724e:	3301      	adds	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007252:	e002      	b.n	800725a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3b01      	subs	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800725a:	4b38      	ldr	r3, [pc, #224]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007266:	d102      	bne.n	800726e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f2      	bne.n	8007254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800726e:	4b33      	ldr	r3, [pc, #204]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800727a:	d158      	bne.n	800732e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e057      	b.n	8007330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007280:	4b2e      	ldr	r3, [pc, #184]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007286:	4a2d      	ldr	r2, [pc, #180]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800728c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007290:	e04d      	b.n	800732e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007298:	d141      	bne.n	800731e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800729a:	4b28      	ldr	r3, [pc, #160]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072a6:	d131      	bne.n	800730c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072a8:	4b24      	ldr	r3, [pc, #144]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ae:	4a23      	ldr	r2, [pc, #140]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072b8:	4b20      	ldr	r3, [pc, #128]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072c0:	4a1e      	ldr	r2, [pc, #120]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2232      	movs	r2, #50	@ 0x32
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
 80072d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80072d4:	fba2 2303 	umull	r2, r3, r2, r3
 80072d8:	0c9b      	lsrs	r3, r3, #18
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072de:	e002      	b.n	80072e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072e6:	4b15      	ldr	r3, [pc, #84]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f2:	d102      	bne.n	80072fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f2      	bne.n	80072e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072fa:	4b10      	ldr	r3, [pc, #64]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007306:	d112      	bne.n	800732e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e011      	b.n	8007330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800730c:	4b0b      	ldr	r3, [pc, #44]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800730e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007312:	4a0a      	ldr	r2, [pc, #40]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007318:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800731c:	e007      	b.n	800732e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800731e:	4b07      	ldr	r3, [pc, #28]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007326:	4a05      	ldr	r2, [pc, #20]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007328:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800732c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	40007000 	.word	0x40007000
 8007340:	2000000c 	.word	0x2000000c
 8007344:	431bde83 	.word	0x431bde83

08007348 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800734c:	4b05      	ldr	r3, [pc, #20]	@ (8007364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	4a04      	ldr	r2, [pc, #16]	@ (8007364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007356:	6093      	str	r3, [r2, #8]
}
 8007358:	bf00      	nop
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40007000 	.word	0x40007000

08007368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e2fe      	b.n	8007978 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d075      	beq.n	8007472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007386:	4b97      	ldr	r3, [pc, #604]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 030c 	and.w	r3, r3, #12
 800738e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007390:	4b94      	ldr	r3, [pc, #592]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b0c      	cmp	r3, #12
 800739e:	d102      	bne.n	80073a6 <HAL_RCC_OscConfig+0x3e>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d002      	beq.n	80073ac <HAL_RCC_OscConfig+0x44>
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d10b      	bne.n	80073c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ac:	4b8d      	ldr	r3, [pc, #564]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d05b      	beq.n	8007470 <HAL_RCC_OscConfig+0x108>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d157      	bne.n	8007470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e2d9      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073cc:	d106      	bne.n	80073dc <HAL_RCC_OscConfig+0x74>
 80073ce:	4b85      	ldr	r3, [pc, #532]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a84      	ldr	r2, [pc, #528]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80073d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	e01d      	b.n	8007418 <HAL_RCC_OscConfig+0xb0>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073e4:	d10c      	bne.n	8007400 <HAL_RCC_OscConfig+0x98>
 80073e6:	4b7f      	ldr	r3, [pc, #508]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a7e      	ldr	r2, [pc, #504]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80073ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	4b7c      	ldr	r3, [pc, #496]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a7b      	ldr	r2, [pc, #492]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80073f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	e00b      	b.n	8007418 <HAL_RCC_OscConfig+0xb0>
 8007400:	4b78      	ldr	r3, [pc, #480]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a77      	ldr	r2, [pc, #476]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	4b75      	ldr	r3, [pc, #468]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a74      	ldr	r2, [pc, #464]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d013      	beq.n	8007448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fc ff5c 	bl	80042dc <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007428:	f7fc ff58 	bl	80042dc <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b64      	cmp	r3, #100	@ 0x64
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e29e      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800743a:	4b6a      	ldr	r3, [pc, #424]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0f0      	beq.n	8007428 <HAL_RCC_OscConfig+0xc0>
 8007446:	e014      	b.n	8007472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fc ff48 	bl	80042dc <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007450:	f7fc ff44 	bl	80042dc <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b64      	cmp	r3, #100	@ 0x64
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e28a      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007462:	4b60      	ldr	r3, [pc, #384]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f0      	bne.n	8007450 <HAL_RCC_OscConfig+0xe8>
 800746e:	e000      	b.n	8007472 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d075      	beq.n	800756a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800747e:	4b59      	ldr	r3, [pc, #356]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 030c 	and.w	r3, r3, #12
 8007486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007488:	4b56      	ldr	r3, [pc, #344]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0303 	and.w	r3, r3, #3
 8007490:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b0c      	cmp	r3, #12
 8007496:	d102      	bne.n	800749e <HAL_RCC_OscConfig+0x136>
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d002      	beq.n	80074a4 <HAL_RCC_OscConfig+0x13c>
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d11f      	bne.n	80074e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074a4:	4b4f      	ldr	r3, [pc, #316]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <HAL_RCC_OscConfig+0x154>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e25d      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074bc:	4b49      	ldr	r3, [pc, #292]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	061b      	lsls	r3, r3, #24
 80074ca:	4946      	ldr	r1, [pc, #280]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80074d0:	4b45      	ldr	r3, [pc, #276]	@ (80075e8 <HAL_RCC_OscConfig+0x280>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fc feb5 	bl	8004244 <HAL_InitTick>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d043      	beq.n	8007568 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e249      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d023      	beq.n	8007534 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074ec:	4b3d      	ldr	r3, [pc, #244]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a3c      	ldr	r2, [pc, #240]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80074f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f8:	f7fc fef0 	bl	80042dc <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007500:	f7fc feec 	bl	80042dc <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e232      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007512:	4b34      	ldr	r3, [pc, #208]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f0      	beq.n	8007500 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800751e:	4b31      	ldr	r3, [pc, #196]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	061b      	lsls	r3, r3, #24
 800752c:	492d      	ldr	r1, [pc, #180]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	604b      	str	r3, [r1, #4]
 8007532:	e01a      	b.n	800756a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007534:	4b2b      	ldr	r3, [pc, #172]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2a      	ldr	r2, [pc, #168]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 800753a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800753e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007540:	f7fc fecc 	bl	80042dc <HAL_GetTick>
 8007544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007546:	e008      	b.n	800755a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007548:	f7fc fec8 	bl	80042dc <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b02      	cmp	r3, #2
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e20e      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800755a:	4b22      	ldr	r3, [pc, #136]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1f0      	bne.n	8007548 <HAL_RCC_OscConfig+0x1e0>
 8007566:	e000      	b.n	800756a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d041      	beq.n	80075fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d01c      	beq.n	80075b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800757e:	4b19      	ldr	r3, [pc, #100]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007584:	4a17      	ldr	r2, [pc, #92]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 8007586:	f043 0301 	orr.w	r3, r3, #1
 800758a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758e:	f7fc fea5 	bl	80042dc <HAL_GetTick>
 8007592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007596:	f7fc fea1 	bl	80042dc <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e1e7      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075a8:	4b0e      	ldr	r3, [pc, #56]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80075aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0ef      	beq.n	8007596 <HAL_RCC_OscConfig+0x22e>
 80075b6:	e020      	b.n	80075fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075b8:	4b0a      	ldr	r3, [pc, #40]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80075ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075be:	4a09      	ldr	r2, [pc, #36]	@ (80075e4 <HAL_RCC_OscConfig+0x27c>)
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c8:	f7fc fe88 	bl	80042dc <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075ce:	e00d      	b.n	80075ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075d0:	f7fc fe84 	bl	80042dc <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d906      	bls.n	80075ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e1ca      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
 80075e2:	bf00      	nop
 80075e4:	40021000 	.word	0x40021000
 80075e8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075ec:	4b8c      	ldr	r3, [pc, #560]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80075ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1ea      	bne.n	80075d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 80a6 	beq.w	8007754 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007608:	2300      	movs	r3, #0
 800760a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800760c:	4b84      	ldr	r3, [pc, #528]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 800760e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_RCC_OscConfig+0x2b4>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <HAL_RCC_OscConfig+0x2b6>
 800761c:	2300      	movs	r3, #0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00d      	beq.n	800763e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007622:	4b7f      	ldr	r3, [pc, #508]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 8007624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007626:	4a7e      	ldr	r2, [pc, #504]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 8007628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800762c:	6593      	str	r3, [r2, #88]	@ 0x58
 800762e:	4b7c      	ldr	r3, [pc, #496]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 8007630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800763a:	2301      	movs	r3, #1
 800763c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800763e:	4b79      	ldr	r3, [pc, #484]	@ (8007824 <HAL_RCC_OscConfig+0x4bc>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007646:	2b00      	cmp	r3, #0
 8007648:	d118      	bne.n	800767c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800764a:	4b76      	ldr	r3, [pc, #472]	@ (8007824 <HAL_RCC_OscConfig+0x4bc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a75      	ldr	r2, [pc, #468]	@ (8007824 <HAL_RCC_OscConfig+0x4bc>)
 8007650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007656:	f7fc fe41 	bl	80042dc <HAL_GetTick>
 800765a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800765c:	e008      	b.n	8007670 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800765e:	f7fc fe3d 	bl	80042dc <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e183      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007670:	4b6c      	ldr	r3, [pc, #432]	@ (8007824 <HAL_RCC_OscConfig+0x4bc>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f0      	beq.n	800765e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d108      	bne.n	8007696 <HAL_RCC_OscConfig+0x32e>
 8007684:	4b66      	ldr	r3, [pc, #408]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 8007686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800768a:	4a65      	ldr	r2, [pc, #404]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 800768c:	f043 0301 	orr.w	r3, r3, #1
 8007690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007694:	e024      	b.n	80076e0 <HAL_RCC_OscConfig+0x378>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2b05      	cmp	r3, #5
 800769c:	d110      	bne.n	80076c0 <HAL_RCC_OscConfig+0x358>
 800769e:	4b60      	ldr	r3, [pc, #384]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80076a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076a4:	4a5e      	ldr	r2, [pc, #376]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80076a6:	f043 0304 	orr.w	r3, r3, #4
 80076aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076ae:	4b5c      	ldr	r3, [pc, #368]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b4:	4a5a      	ldr	r2, [pc, #360]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076be:	e00f      	b.n	80076e0 <HAL_RCC_OscConfig+0x378>
 80076c0:	4b57      	ldr	r3, [pc, #348]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80076c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076c6:	4a56      	ldr	r2, [pc, #344]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076d0:	4b53      	ldr	r3, [pc, #332]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d6:	4a52      	ldr	r2, [pc, #328]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80076d8:	f023 0304 	bic.w	r3, r3, #4
 80076dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d016      	beq.n	8007716 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e8:	f7fc fdf8 	bl	80042dc <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076ee:	e00a      	b.n	8007706 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f0:	f7fc fdf4 	bl	80042dc <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e138      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007706:	4b46      	ldr	r3, [pc, #280]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 8007708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0ed      	beq.n	80076f0 <HAL_RCC_OscConfig+0x388>
 8007714:	e015      	b.n	8007742 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007716:	f7fc fde1 	bl	80042dc <HAL_GetTick>
 800771a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800771c:	e00a      	b.n	8007734 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800771e:	f7fc fddd 	bl	80042dc <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772c:	4293      	cmp	r3, r2
 800772e:	d901      	bls.n	8007734 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e121      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007734:	4b3a      	ldr	r3, [pc, #232]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 8007736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1ed      	bne.n	800771e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007742:	7ffb      	ldrb	r3, [r7, #31]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d105      	bne.n	8007754 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007748:	4b35      	ldr	r3, [pc, #212]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800774c:	4a34      	ldr	r2, [pc, #208]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 800774e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007752:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	d03c      	beq.n	80077da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01c      	beq.n	80077a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007768:	4b2d      	ldr	r3, [pc, #180]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 800776a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800776e:	4a2c      	ldr	r2, [pc, #176]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007778:	f7fc fdb0 	bl	80042dc <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007780:	f7fc fdac 	bl	80042dc <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e0f2      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007792:	4b23      	ldr	r3, [pc, #140]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 8007794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0ef      	beq.n	8007780 <HAL_RCC_OscConfig+0x418>
 80077a0:	e01b      	b.n	80077da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80077a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80077aa:	f023 0301 	bic.w	r3, r3, #1
 80077ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b2:	f7fc fd93 	bl	80042dc <HAL_GetTick>
 80077b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077b8:	e008      	b.n	80077cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ba:	f7fc fd8f 	bl	80042dc <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d901      	bls.n	80077cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e0d5      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077cc:	4b14      	ldr	r3, [pc, #80]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80077ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1ef      	bne.n	80077ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 80c9 	beq.w	8007976 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 030c 	and.w	r3, r3, #12
 80077ec:	2b0c      	cmp	r3, #12
 80077ee:	f000 8083 	beq.w	80078f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d15e      	bne.n	80078b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077fa:	4b09      	ldr	r3, [pc, #36]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a08      	ldr	r2, [pc, #32]	@ (8007820 <HAL_RCC_OscConfig+0x4b8>)
 8007800:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007806:	f7fc fd69 	bl	80042dc <HAL_GetTick>
 800780a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800780c:	e00c      	b.n	8007828 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800780e:	f7fc fd65 	bl	80042dc <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d905      	bls.n	8007828 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e0ab      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
 8007820:	40021000 	.word	0x40021000
 8007824:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007828:	4b55      	ldr	r3, [pc, #340]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1ec      	bne.n	800780e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007834:	4b52      	ldr	r3, [pc, #328]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	4b52      	ldr	r3, [pc, #328]	@ (8007984 <HAL_RCC_OscConfig+0x61c>)
 800783a:	4013      	ands	r3, r2
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6a11      	ldr	r1, [r2, #32]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007844:	3a01      	subs	r2, #1
 8007846:	0112      	lsls	r2, r2, #4
 8007848:	4311      	orrs	r1, r2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800784e:	0212      	lsls	r2, r2, #8
 8007850:	4311      	orrs	r1, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007856:	0852      	lsrs	r2, r2, #1
 8007858:	3a01      	subs	r2, #1
 800785a:	0552      	lsls	r2, r2, #21
 800785c:	4311      	orrs	r1, r2
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007862:	0852      	lsrs	r2, r2, #1
 8007864:	3a01      	subs	r2, #1
 8007866:	0652      	lsls	r2, r2, #25
 8007868:	4311      	orrs	r1, r2
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800786e:	06d2      	lsls	r2, r2, #27
 8007870:	430a      	orrs	r2, r1
 8007872:	4943      	ldr	r1, [pc, #268]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 8007874:	4313      	orrs	r3, r2
 8007876:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007878:	4b41      	ldr	r3, [pc, #260]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a40      	ldr	r2, [pc, #256]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 800787e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007882:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007884:	4b3e      	ldr	r3, [pc, #248]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	4a3d      	ldr	r2, [pc, #244]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 800788a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800788e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007890:	f7fc fd24 	bl	80042dc <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007898:	f7fc fd20 	bl	80042dc <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e066      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078aa:	4b35      	ldr	r3, [pc, #212]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f0      	beq.n	8007898 <HAL_RCC_OscConfig+0x530>
 80078b6:	e05e      	b.n	8007976 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b8:	4b31      	ldr	r3, [pc, #196]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a30      	ldr	r2, [pc, #192]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 80078be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c4:	f7fc fd0a 	bl	80042dc <HAL_GetTick>
 80078c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078ca:	e008      	b.n	80078de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078cc:	f7fc fd06 	bl	80042dc <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e04c      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078de:	4b28      	ldr	r3, [pc, #160]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1f0      	bne.n	80078cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80078ea:	4b25      	ldr	r3, [pc, #148]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	4924      	ldr	r1, [pc, #144]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 80078f0:	4b25      	ldr	r3, [pc, #148]	@ (8007988 <HAL_RCC_OscConfig+0x620>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	60cb      	str	r3, [r1, #12]
 80078f6:	e03e      	b.n	8007976 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e039      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007904:	4b1e      	ldr	r3, [pc, #120]	@ (8007980 <HAL_RCC_OscConfig+0x618>)
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f003 0203 	and.w	r2, r3, #3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	429a      	cmp	r2, r3
 8007916:	d12c      	bne.n	8007972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007922:	3b01      	subs	r3, #1
 8007924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007926:	429a      	cmp	r2, r3
 8007928:	d123      	bne.n	8007972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007936:	429a      	cmp	r2, r3
 8007938:	d11b      	bne.n	8007972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007946:	429a      	cmp	r2, r3
 8007948:	d113      	bne.n	8007972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007954:	085b      	lsrs	r3, r3, #1
 8007956:	3b01      	subs	r3, #1
 8007958:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800795a:	429a      	cmp	r2, r3
 800795c:	d109      	bne.n	8007972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007968:	085b      	lsrs	r3, r3, #1
 800796a:	3b01      	subs	r3, #1
 800796c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800796e:	429a      	cmp	r2, r3
 8007970:	d001      	beq.n	8007976 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40021000 	.word	0x40021000
 8007984:	019f800c 	.word	0x019f800c
 8007988:	feeefffc 	.word	0xfeeefffc

0800798c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e11e      	b.n	8007be2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079a4:	4b91      	ldr	r3, [pc, #580]	@ (8007bec <HAL_RCC_ClockConfig+0x260>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 030f 	and.w	r3, r3, #15
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d910      	bls.n	80079d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079b2:	4b8e      	ldr	r3, [pc, #568]	@ (8007bec <HAL_RCC_ClockConfig+0x260>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f023 020f 	bic.w	r2, r3, #15
 80079ba:	498c      	ldr	r1, [pc, #560]	@ (8007bec <HAL_RCC_ClockConfig+0x260>)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	4313      	orrs	r3, r2
 80079c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079c2:	4b8a      	ldr	r3, [pc, #552]	@ (8007bec <HAL_RCC_ClockConfig+0x260>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d001      	beq.n	80079d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e106      	b.n	8007be2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d073      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d129      	bne.n	8007a3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079e8:	4b81      	ldr	r3, [pc, #516]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e0f4      	b.n	8007be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80079f8:	f000 f99c 	bl	8007d34 <RCC_GetSysClockFreqFromPLLSource>
 80079fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4a7c      	ldr	r2, [pc, #496]	@ (8007bf4 <HAL_RCC_ClockConfig+0x268>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d93f      	bls.n	8007a86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a06:	4b7a      	ldr	r3, [pc, #488]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d033      	beq.n	8007a86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d12f      	bne.n	8007a86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a26:	4b72      	ldr	r3, [pc, #456]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a2e:	4a70      	ldr	r2, [pc, #448]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a36:	2380      	movs	r3, #128	@ 0x80
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	e024      	b.n	8007a86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d107      	bne.n	8007a54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a44:	4b6a      	ldr	r3, [pc, #424]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d109      	bne.n	8007a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e0c6      	b.n	8007be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a54:	4b66      	ldr	r3, [pc, #408]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e0be      	b.n	8007be2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007a64:	f000 f8ce 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 8007a68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	4a61      	ldr	r2, [pc, #388]	@ (8007bf4 <HAL_RCC_ClockConfig+0x268>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d909      	bls.n	8007a86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a72:	4b5f      	ldr	r3, [pc, #380]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a7a:	4a5d      	ldr	r2, [pc, #372]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007a82:	2380      	movs	r3, #128	@ 0x80
 8007a84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a86:	4b5a      	ldr	r3, [pc, #360]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f023 0203 	bic.w	r2, r3, #3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	4957      	ldr	r1, [pc, #348]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a98:	f7fc fc20 	bl	80042dc <HAL_GetTick>
 8007a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a9e:	e00a      	b.n	8007ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aa0:	f7fc fc1c 	bl	80042dc <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e095      	b.n	8007be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 020c 	and.w	r2, r3, #12
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d1eb      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d023      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ae0:	4b43      	ldr	r3, [pc, #268]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	4a42      	ldr	r2, [pc, #264]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007ae6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007aea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007af8:	4b3d      	ldr	r3, [pc, #244]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b00:	4a3b      	ldr	r2, [pc, #236]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007b02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007b06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b08:	4b39      	ldr	r3, [pc, #228]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	4936      	ldr	r1, [pc, #216]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	608b      	str	r3, [r1, #8]
 8007b1a:	e008      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	2b80      	cmp	r3, #128	@ 0x80
 8007b20:	d105      	bne.n	8007b2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b22:	4b33      	ldr	r3, [pc, #204]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	4a32      	ldr	r2, [pc, #200]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8007bec <HAL_RCC_ClockConfig+0x260>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d21d      	bcs.n	8007b78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007bec <HAL_RCC_ClockConfig+0x260>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f023 020f 	bic.w	r2, r3, #15
 8007b44:	4929      	ldr	r1, [pc, #164]	@ (8007bec <HAL_RCC_ClockConfig+0x260>)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b4c:	f7fc fbc6 	bl	80042dc <HAL_GetTick>
 8007b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b52:	e00a      	b.n	8007b6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b54:	f7fc fbc2 	bl	80042dc <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e03b      	b.n	8007be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6a:	4b20      	ldr	r3, [pc, #128]	@ (8007bec <HAL_RCC_ClockConfig+0x260>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 030f 	and.w	r3, r3, #15
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d1ed      	bne.n	8007b54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b84:	4b1a      	ldr	r3, [pc, #104]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	4917      	ldr	r1, [pc, #92]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ba2:	4b13      	ldr	r3, [pc, #76]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	490f      	ldr	r1, [pc, #60]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bb6:	f000 f825 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf0 <HAL_RCC_ClockConfig+0x264>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	091b      	lsrs	r3, r3, #4
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	490c      	ldr	r1, [pc, #48]	@ (8007bf8 <HAL_RCC_ClockConfig+0x26c>)
 8007bc8:	5ccb      	ldrb	r3, [r1, r3]
 8007bca:	f003 031f 	and.w	r3, r3, #31
 8007bce:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8007bfc <HAL_RCC_ClockConfig+0x270>)
 8007bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007c00 <HAL_RCC_ClockConfig+0x274>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fc fb32 	bl	8004244 <HAL_InitTick>
 8007be0:	4603      	mov	r3, r0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	40022000 	.word	0x40022000
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	04c4b400 	.word	0x04c4b400
 8007bf8:	08012938 	.word	0x08012938
 8007bfc:	2000000c 	.word	0x2000000c
 8007c00:	20000010 	.word	0x20000010

08007c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 030c 	and.w	r3, r3, #12
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d102      	bne.n	8007c1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c16:	4b2a      	ldr	r3, [pc, #168]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	e047      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c1c:	4b27      	ldr	r3, [pc, #156]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 030c 	and.w	r3, r3, #12
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d102      	bne.n	8007c2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c28:	4b25      	ldr	r3, [pc, #148]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c2a:	613b      	str	r3, [r7, #16]
 8007c2c:	e03e      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007c2e:	4b23      	ldr	r3, [pc, #140]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 030c 	and.w	r3, r3, #12
 8007c36:	2b0c      	cmp	r3, #12
 8007c38:	d136      	bne.n	8007ca8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c3a:	4b20      	ldr	r3, [pc, #128]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c44:	4b1d      	ldr	r3, [pc, #116]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	091b      	lsrs	r3, r3, #4
 8007c4a:	f003 030f 	and.w	r3, r3, #15
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d10c      	bne.n	8007c72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c58:	4a19      	ldr	r2, [pc, #100]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c60:	4a16      	ldr	r2, [pc, #88]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c62:	68d2      	ldr	r2, [r2, #12]
 8007c64:	0a12      	lsrs	r2, r2, #8
 8007c66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
 8007c6e:	617b      	str	r3, [r7, #20]
      break;
 8007c70:	e00c      	b.n	8007c8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c72:	4a13      	ldr	r2, [pc, #76]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7a:	4a10      	ldr	r2, [pc, #64]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c7c:	68d2      	ldr	r2, [r2, #12]
 8007c7e:	0a12      	lsrs	r2, r2, #8
 8007c80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
 8007c88:	617b      	str	r3, [r7, #20]
      break;
 8007c8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	0e5b      	lsrs	r3, r3, #25
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	3301      	adds	r3, #1
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	e001      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007cac:	693b      	ldr	r3, [r7, #16]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	00f42400 	.word	0x00f42400

08007cc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cc8:	4b03      	ldr	r3, [pc, #12]	@ (8007cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cca:	681b      	ldr	r3, [r3, #0]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	2000000c 	.word	0x2000000c

08007cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ce0:	f7ff fff0 	bl	8007cc4 <HAL_RCC_GetHCLKFreq>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	4b06      	ldr	r3, [pc, #24]	@ (8007d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	0a1b      	lsrs	r3, r3, #8
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	4904      	ldr	r1, [pc, #16]	@ (8007d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cf2:	5ccb      	ldrb	r3, [r1, r3]
 8007cf4:	f003 031f 	and.w	r3, r3, #31
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40021000 	.word	0x40021000
 8007d04:	08012948 	.word	0x08012948

08007d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d0c:	f7ff ffda 	bl	8007cc4 <HAL_RCC_GetHCLKFreq>
 8007d10:	4602      	mov	r2, r0
 8007d12:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	0adb      	lsrs	r3, r3, #11
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	4904      	ldr	r1, [pc, #16]	@ (8007d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d1e:	5ccb      	ldrb	r3, [r1, r3]
 8007d20:	f003 031f 	and.w	r3, r3, #31
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	08012948 	.word	0x08012948

08007d34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8007db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d44:	4b1b      	ldr	r3, [pc, #108]	@ (8007db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	091b      	lsrs	r3, r3, #4
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	3301      	adds	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d10c      	bne.n	8007d72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d58:	4a17      	ldr	r2, [pc, #92]	@ (8007db8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d60:	4a14      	ldr	r2, [pc, #80]	@ (8007db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d62:	68d2      	ldr	r2, [r2, #12]
 8007d64:	0a12      	lsrs	r2, r2, #8
 8007d66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	617b      	str	r3, [r7, #20]
    break;
 8007d70:	e00c      	b.n	8007d8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d72:	4a11      	ldr	r2, [pc, #68]	@ (8007db8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8007db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d7c:	68d2      	ldr	r2, [r2, #12]
 8007d7e:	0a12      	lsrs	r2, r2, #8
 8007d80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d84:	fb02 f303 	mul.w	r3, r2, r3
 8007d88:	617b      	str	r3, [r7, #20]
    break;
 8007d8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d8c:	4b09      	ldr	r3, [pc, #36]	@ (8007db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	0e5b      	lsrs	r3, r3, #25
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	3301      	adds	r3, #1
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007da6:	687b      	ldr	r3, [r7, #4]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	40021000 	.word	0x40021000
 8007db8:	00f42400 	.word	0x00f42400

08007dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dc8:	2300      	movs	r3, #0
 8007dca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8098 	beq.w	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dde:	4b43      	ldr	r3, [pc, #268]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10d      	bne.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dea:	4b40      	ldr	r3, [pc, #256]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dee:	4a3f      	ldr	r2, [pc, #252]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007df6:	4b3d      	ldr	r3, [pc, #244]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dfe:	60bb      	str	r3, [r7, #8]
 8007e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e02:	2301      	movs	r3, #1
 8007e04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e06:	4b3a      	ldr	r3, [pc, #232]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a39      	ldr	r2, [pc, #228]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e12:	f7fc fa63 	bl	80042dc <HAL_GetTick>
 8007e16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e18:	e009      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e1a:	f7fc fa5f 	bl	80042dc <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d902      	bls.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	74fb      	strb	r3, [r7, #19]
        break;
 8007e2c:	e005      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e2e:	4b30      	ldr	r3, [pc, #192]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0ef      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007e3a:	7cfb      	ldrb	r3, [r7, #19]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d159      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e40:	4b2a      	ldr	r3, [pc, #168]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d01e      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d019      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e5c:	4b23      	ldr	r3, [pc, #140]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e68:	4b20      	ldr	r3, [pc, #128]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e78:	4b1c      	ldr	r3, [pc, #112]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e88:	4a18      	ldr	r2, [pc, #96]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9a:	f7fc fa1f 	bl	80042dc <HAL_GetTick>
 8007e9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ea0:	e00b      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ea2:	f7fc fa1b 	bl	80042dc <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d902      	bls.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	74fb      	strb	r3, [r7, #19]
            break;
 8007eb8:	e006      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eba:	4b0c      	ldr	r3, [pc, #48]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0ec      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007ec8:	7cfb      	ldrb	r3, [r7, #19]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ece:	4b07      	ldr	r3, [pc, #28]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007edc:	4903      	ldr	r1, [pc, #12]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007ee4:	e008      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ee6:	7cfb      	ldrb	r3, [r7, #19]
 8007ee8:	74bb      	strb	r3, [r7, #18]
 8007eea:	e005      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007eec:	40021000 	.word	0x40021000
 8007ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef4:	7cfb      	ldrb	r3, [r7, #19]
 8007ef6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ef8:	7c7b      	ldrb	r3, [r7, #17]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d105      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007efe:	4ba6      	ldr	r3, [pc, #664]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f02:	4aa5      	ldr	r2, [pc, #660]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f16:	4ba0      	ldr	r3, [pc, #640]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f1c:	f023 0203 	bic.w	r2, r3, #3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	499c      	ldr	r1, [pc, #624]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f38:	4b97      	ldr	r3, [pc, #604]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f3e:	f023 020c 	bic.w	r2, r3, #12
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	4994      	ldr	r1, [pc, #592]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	498b      	ldr	r1, [pc, #556]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0308 	and.w	r3, r3, #8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f7c:	4b86      	ldr	r3, [pc, #536]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	4983      	ldr	r1, [pc, #524]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f9e:	4b7e      	ldr	r3, [pc, #504]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	497a      	ldr	r1, [pc, #488]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00a      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007fc0:	4b75      	ldr	r3, [pc, #468]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fc6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	4972      	ldr	r1, [pc, #456]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	4969      	ldr	r1, [pc, #420]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00a      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008004:	4b64      	ldr	r3, [pc, #400]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800800a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	4961      	ldr	r1, [pc, #388]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008014:	4313      	orrs	r3, r2
 8008016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008026:	4b5c      	ldr	r3, [pc, #368]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008034:	4958      	ldr	r1, [pc, #352]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008044:	2b00      	cmp	r3, #0
 8008046:	d015      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008048:	4b53      	ldr	r3, [pc, #332]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800804a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800804e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008056:	4950      	ldr	r1, [pc, #320]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008058:	4313      	orrs	r3, r2
 800805a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008066:	d105      	bne.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008068:	4b4b      	ldr	r3, [pc, #300]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	4a4a      	ldr	r2, [pc, #296]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800806e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008072:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800807c:	2b00      	cmp	r3, #0
 800807e:	d015      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008080:	4b45      	ldr	r3, [pc, #276]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008086:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	4942      	ldr	r1, [pc, #264]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008090:	4313      	orrs	r3, r2
 8008092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800809e:	d105      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080a0:	4b3d      	ldr	r3, [pc, #244]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	4a3c      	ldr	r2, [pc, #240]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d015      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080b8:	4b37      	ldr	r3, [pc, #220]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c6:	4934      	ldr	r1, [pc, #208]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080d6:	d105      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	4a2e      	ldr	r2, [pc, #184]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d015      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080f0:	4b29      	ldr	r3, [pc, #164]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fe:	4926      	ldr	r1, [pc, #152]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800810a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800810e:	d105      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008110:	4b21      	ldr	r3, [pc, #132]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	4a20      	ldr	r2, [pc, #128]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800811a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d015      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008128:	4b1b      	ldr	r3, [pc, #108]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800812a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800812e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008136:	4918      	ldr	r1, [pc, #96]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008138:	4313      	orrs	r3, r2
 800813a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008146:	d105      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008148:	4b13      	ldr	r3, [pc, #76]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	4a12      	ldr	r2, [pc, #72]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800814e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008152:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d015      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008160:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008166:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800816e:	490a      	ldr	r1, [pc, #40]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800817a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800817e:	d105      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008180:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	4a04      	ldr	r2, [pc, #16]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800818a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800818c:	7cbb      	ldrb	r3, [r7, #18]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40021000 	.word	0x40021000

0800819c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e09d      	b.n	80082ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d108      	bne.n	80081c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081be:	d009      	beq.n	80081d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	61da      	str	r2, [r3, #28]
 80081c6:	e005      	b.n	80081d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fa ffbc 	bl	800316c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800820a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008214:	d902      	bls.n	800821c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008216:	2300      	movs	r3, #0
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	e002      	b.n	8008222 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800821c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008220:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800822a:	d007      	beq.n	800823c <HAL_SPI_Init+0xa0>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008234:	d002      	beq.n	800823c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800827e:	ea42 0103 	orr.w	r1, r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008286:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	0c1b      	lsrs	r3, r3, #16
 8008298:	f003 0204 	and.w	r2, r3, #4
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a0:	f003 0310 	and.w	r3, r3, #16
 80082a4:	431a      	orrs	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80082b8:	ea42 0103 	orr.w	r1, r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69da      	ldr	r2, [r3, #28]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b088      	sub	sp, #32
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	603b      	str	r3, [r7, #0]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008302:	f7fb ffeb 	bl	80042dc <HAL_GetTick>
 8008306:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008308:	88fb      	ldrh	r3, [r7, #6]
 800830a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	d001      	beq.n	800831c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008318:	2302      	movs	r3, #2
 800831a:	e15c      	b.n	80085d6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_SPI_Transmit+0x36>
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e154      	b.n	80085d6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_SPI_Transmit+0x48>
 8008336:	2302      	movs	r3, #2
 8008338:	e14d      	b.n	80085d6 <HAL_SPI_Transmit+0x2e4>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2203      	movs	r2, #3
 8008346:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	88fa      	ldrh	r2, [r7, #6]
 800835a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	88fa      	ldrh	r2, [r7, #6]
 8008360:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800838c:	d10f      	bne.n	80083ae <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800839c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b8:	2b40      	cmp	r3, #64	@ 0x40
 80083ba:	d007      	beq.n	80083cc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80083d4:	d952      	bls.n	800847c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <HAL_SPI_Transmit+0xf2>
 80083de:	8b7b      	ldrh	r3, [r7, #26]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d145      	bne.n	8008470 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e8:	881a      	ldrh	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f4:	1c9a      	adds	r2, r3, #2
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008408:	e032      	b.n	8008470 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b02      	cmp	r3, #2
 8008416:	d112      	bne.n	800843e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841c:	881a      	ldrh	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008428:	1c9a      	adds	r2, r3, #2
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008432:	b29b      	uxth	r3, r3
 8008434:	3b01      	subs	r3, #1
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800843c:	e018      	b.n	8008470 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800843e:	f7fb ff4d 	bl	80042dc <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d803      	bhi.n	8008456 <HAL_SPI_Transmit+0x164>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008454:	d102      	bne.n	800845c <HAL_SPI_Transmit+0x16a>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e0b2      	b.n	80085d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1c7      	bne.n	800840a <HAL_SPI_Transmit+0x118>
 800847a:	e083      	b.n	8008584 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <HAL_SPI_Transmit+0x198>
 8008484:	8b7b      	ldrh	r3, [r7, #26]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d177      	bne.n	800857a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800848e:	b29b      	uxth	r3, r3
 8008490:	2b01      	cmp	r3, #1
 8008492:	d912      	bls.n	80084ba <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008498:	881a      	ldrh	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a4:	1c9a      	adds	r2, r3, #2
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b02      	subs	r3, #2
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084b8:	e05f      	b.n	800857a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	330c      	adds	r3, #12
 80084c4:	7812      	ldrb	r2, [r2, #0]
 80084c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80084e0:	e04b      	b.n	800857a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d12b      	bne.n	8008548 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d912      	bls.n	8008520 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fe:	881a      	ldrh	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850a:	1c9a      	adds	r2, r3, #2
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008514:	b29b      	uxth	r3, r3
 8008516:	3b02      	subs	r3, #2
 8008518:	b29a      	uxth	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800851e:	e02c      	b.n	800857a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	330c      	adds	r3, #12
 800852a:	7812      	ldrb	r2, [r2, #0]
 800852c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800853c:	b29b      	uxth	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008546:	e018      	b.n	800857a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008548:	f7fb fec8 	bl	80042dc <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	429a      	cmp	r2, r3
 8008556:	d803      	bhi.n	8008560 <HAL_SPI_Transmit+0x26e>
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855e:	d102      	bne.n	8008566 <HAL_SPI_Transmit+0x274>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d109      	bne.n	800857a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e02d      	b.n	80085d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1ae      	bne.n	80084e2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008584:	69fa      	ldr	r2, [r7, #28]
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fb73 	bl	8008c74 <SPI_EndRxTxTransaction>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80085d4:	2300      	movs	r3, #0
  }
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3720      	adds	r7, #32
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b08a      	sub	sp, #40	@ 0x28
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80085ec:	2301      	movs	r3, #1
 80085ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085f0:	f7fb fe74 	bl	80042dc <HAL_GetTick>
 80085f4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80085fc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008604:	887b      	ldrh	r3, [r7, #2]
 8008606:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008608:	887b      	ldrh	r3, [r7, #2]
 800860a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800860c:	7ffb      	ldrb	r3, [r7, #31]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d00c      	beq.n	800862c <HAL_SPI_TransmitReceive+0x4e>
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008618:	d106      	bne.n	8008628 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d102      	bne.n	8008628 <HAL_SPI_TransmitReceive+0x4a>
 8008622:	7ffb      	ldrb	r3, [r7, #31]
 8008624:	2b04      	cmp	r3, #4
 8008626:	d001      	beq.n	800862c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008628:	2302      	movs	r3, #2
 800862a:	e1f3      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <HAL_SPI_TransmitReceive+0x60>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <HAL_SPI_TransmitReceive+0x60>
 8008638:	887b      	ldrh	r3, [r7, #2]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e1e8      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x72>
 800864c:	2302      	movs	r3, #2
 800864e:	e1e1      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x436>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b04      	cmp	r3, #4
 8008662:	d003      	beq.n	800866c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2205      	movs	r2, #5
 8008668:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	887a      	ldrh	r2, [r7, #2]
 800867c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	887a      	ldrh	r2, [r7, #2]
 8008684:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	887a      	ldrh	r2, [r7, #2]
 8008692:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	887a      	ldrh	r2, [r7, #2]
 8008698:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086ae:	d802      	bhi.n	80086b6 <HAL_SPI_TransmitReceive+0xd8>
 80086b0:	8abb      	ldrh	r3, [r7, #20]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d908      	bls.n	80086c8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	e007      	b.n	80086d8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e2:	2b40      	cmp	r3, #64	@ 0x40
 80086e4:	d007      	beq.n	80086f6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086fe:	f240 8083 	bls.w	8008808 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <HAL_SPI_TransmitReceive+0x132>
 800870a:	8afb      	ldrh	r3, [r7, #22]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d16f      	bne.n	80087f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008714:	881a      	ldrh	r2, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008720:	1c9a      	adds	r2, r3, #2
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800872a:	b29b      	uxth	r3, r3
 800872c:	3b01      	subs	r3, #1
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008734:	e05c      	b.n	80087f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b02      	cmp	r3, #2
 8008742:	d11b      	bne.n	800877c <HAL_SPI_TransmitReceive+0x19e>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008748:	b29b      	uxth	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d016      	beq.n	800877c <HAL_SPI_TransmitReceive+0x19e>
 800874e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008750:	2b01      	cmp	r3, #1
 8008752:	d113      	bne.n	800877c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008758:	881a      	ldrh	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008764:	1c9a      	adds	r2, r3, #2
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800876e:	b29b      	uxth	r3, r3
 8008770:	3b01      	subs	r3, #1
 8008772:	b29a      	uxth	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b01      	cmp	r3, #1
 8008788:	d11c      	bne.n	80087c4 <HAL_SPI_TransmitReceive+0x1e6>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d016      	beq.n	80087c4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a0:	b292      	uxth	r2, r2
 80087a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a8:	1c9a      	adds	r2, r3, #2
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087c0:	2301      	movs	r3, #1
 80087c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087c4:	f7fb fd8a 	bl	80042dc <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d80d      	bhi.n	80087f0 <HAL_SPI_TransmitReceive+0x212>
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d009      	beq.n	80087f0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e111      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d19d      	bne.n	8008736 <HAL_SPI_TransmitReceive+0x158>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d197      	bne.n	8008736 <HAL_SPI_TransmitReceive+0x158>
 8008806:	e0e5      	b.n	80089d4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_SPI_TransmitReceive+0x23a>
 8008810:	8afb      	ldrh	r3, [r7, #22]
 8008812:	2b01      	cmp	r3, #1
 8008814:	f040 80d1 	bne.w	80089ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800881c:	b29b      	uxth	r3, r3
 800881e:	2b01      	cmp	r3, #1
 8008820:	d912      	bls.n	8008848 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008826:	881a      	ldrh	r2, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008832:	1c9a      	adds	r2, r3, #2
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b02      	subs	r3, #2
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008846:	e0b8      	b.n	80089ba <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	330c      	adds	r3, #12
 8008852:	7812      	ldrb	r2, [r2, #0]
 8008854:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008864:	b29b      	uxth	r3, r3
 8008866:	3b01      	subs	r3, #1
 8008868:	b29a      	uxth	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800886e:	e0a4      	b.n	80089ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b02      	cmp	r3, #2
 800887c:	d134      	bne.n	80088e8 <HAL_SPI_TransmitReceive+0x30a>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008882:	b29b      	uxth	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d02f      	beq.n	80088e8 <HAL_SPI_TransmitReceive+0x30a>
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	2b01      	cmp	r3, #1
 800888c:	d12c      	bne.n	80088e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008892:	b29b      	uxth	r3, r3
 8008894:	2b01      	cmp	r3, #1
 8008896:	d912      	bls.n	80088be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889c:	881a      	ldrh	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a8:	1c9a      	adds	r2, r3, #2
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b02      	subs	r3, #2
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80088bc:	e012      	b.n	80088e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	330c      	adds	r3, #12
 80088c8:	7812      	ldrb	r2, [r2, #0]
 80088ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d148      	bne.n	8008988 <HAL_SPI_TransmitReceive+0x3aa>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d042      	beq.n	8008988 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008908:	b29b      	uxth	r3, r3
 800890a:	2b01      	cmp	r3, #1
 800890c:	d923      	bls.n	8008956 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008918:	b292      	uxth	r2, r2
 800891a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008920:	1c9a      	adds	r2, r3, #2
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800892c:	b29b      	uxth	r3, r3
 800892e:	3b02      	subs	r3, #2
 8008930:	b29a      	uxth	r2, r3
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800893e:	b29b      	uxth	r3, r3
 8008940:	2b01      	cmp	r3, #1
 8008942:	d81f      	bhi.n	8008984 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008952:	605a      	str	r2, [r3, #4]
 8008954:	e016      	b.n	8008984 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f103 020c 	add.w	r2, r3, #12
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008962:	7812      	ldrb	r2, [r2, #0]
 8008964:	b2d2      	uxtb	r2, r2
 8008966:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008978:	b29b      	uxth	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008984:	2301      	movs	r3, #1
 8008986:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008988:	f7fb fca8 	bl	80042dc <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008994:	429a      	cmp	r2, r3
 8008996:	d803      	bhi.n	80089a0 <HAL_SPI_TransmitReceive+0x3c2>
 8008998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d102      	bne.n	80089a6 <HAL_SPI_TransmitReceive+0x3c8>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e02c      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f47f af55 	bne.w	8008870 <HAL_SPI_TransmitReceive+0x292>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f47f af4e 	bne.w	8008870 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089d4:	6a3a      	ldr	r2, [r7, #32]
 80089d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 f94b 	bl	8008c74 <SPI_EndRxTxTransaction>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2220      	movs	r2, #32
 80089e8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e00e      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008a12:	2300      	movs	r3, #0
  }
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3728      	adds	r7, #40	@ 0x28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a2a:	b2db      	uxtb	r3, r3
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	4613      	mov	r3, r2
 8008a46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a48:	f7fb fc48 	bl	80042dc <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a50:	1a9b      	subs	r3, r3, r2
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	4413      	add	r3, r2
 8008a56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a58:	f7fb fc40 	bl	80042dc <HAL_GetTick>
 8008a5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a5e:	4b39      	ldr	r3, [pc, #228]	@ (8008b44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	015b      	lsls	r3, r3, #5
 8008a64:	0d1b      	lsrs	r3, r3, #20
 8008a66:	69fa      	ldr	r2, [r7, #28]
 8008a68:	fb02 f303 	mul.w	r3, r2, r3
 8008a6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a6e:	e054      	b.n	8008b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a76:	d050      	beq.n	8008b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a78:	f7fb fc30 	bl	80042dc <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d902      	bls.n	8008a8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d13d      	bne.n	8008b0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aa6:	d111      	bne.n	8008acc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ab0:	d004      	beq.n	8008abc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aba:	d107      	bne.n	8008acc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ad4:	d10f      	bne.n	8008af6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008af4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e017      	b.n	8008b3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4013      	ands	r3, r2
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	bf0c      	ite	eq
 8008b2a:	2301      	moveq	r3, #1
 8008b2c:	2300      	movne	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d19b      	bne.n	8008a70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3720      	adds	r7, #32
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	2000000c 	.word	0x2000000c

08008b48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08a      	sub	sp, #40	@ 0x28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008b5a:	f7fb fbbf 	bl	80042dc <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b62:	1a9b      	subs	r3, r3, r2
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	4413      	add	r3, r2
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008b6a:	f7fb fbb7 	bl	80042dc <HAL_GetTick>
 8008b6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	330c      	adds	r3, #12
 8008b76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008b78:	4b3d      	ldr	r3, [pc, #244]	@ (8008c70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	00da      	lsls	r2, r3, #3
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	0d1b      	lsrs	r3, r3, #20
 8008b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b8a:	fb02 f303 	mul.w	r3, r2, r3
 8008b8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008b90:	e060      	b.n	8008c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b98:	d107      	bne.n	8008baa <SPI_WaitFifoStateUntilTimeout+0x62>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d104      	bne.n	8008baa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb0:	d050      	beq.n	8008c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008bb2:	f7fb fb93 	bl	80042dc <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d902      	bls.n	8008bc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d13d      	bne.n	8008c44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008be0:	d111      	bne.n	8008c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bea:	d004      	beq.n	8008bf6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bf4:	d107      	bne.n	8008c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c0e:	d10f      	bne.n	8008c30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e010      	b.n	8008c66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d196      	bne.n	8008b92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3728      	adds	r7, #40	@ 0x28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	2000000c 	.word	0x2000000c

08008c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff ff5b 	bl	8008b48 <SPI_WaitFifoStateUntilTimeout>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d007      	beq.n	8008ca8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c9c:	f043 0220 	orr.w	r2, r3, #32
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e027      	b.n	8008cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2180      	movs	r1, #128	@ 0x80
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff fec0 	bl	8008a38 <SPI_WaitFlagStateUntilTimeout>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d007      	beq.n	8008cce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cc2:	f043 0220 	orr.w	r2, r3, #32
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e014      	b.n	8008cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f7ff ff34 	bl	8008b48 <SPI_WaitFifoStateUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d007      	beq.n	8008cf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cea:	f043 0220 	orr.w	r2, r3, #32
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e000      	b.n	8008cf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e049      	b.n	8008da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d106      	bne.n	8008d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7fa feb2 	bl	8003a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f000 fd92 	bl	8009868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d001      	beq.n	8008dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e04a      	b.n	8008e5e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0201 	orr.w	r2, r2, #1
 8008dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a21      	ldr	r2, [pc, #132]	@ (8008e6c <HAL_TIM_Base_Start_IT+0xbc>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d018      	beq.n	8008e1c <HAL_TIM_Base_Start_IT+0x6c>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df2:	d013      	beq.n	8008e1c <HAL_TIM_Base_Start_IT+0x6c>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e70 <HAL_TIM_Base_Start_IT+0xc0>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d00e      	beq.n	8008e1c <HAL_TIM_Base_Start_IT+0x6c>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a1c      	ldr	r2, [pc, #112]	@ (8008e74 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d009      	beq.n	8008e1c <HAL_TIM_Base_Start_IT+0x6c>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008e78 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d004      	beq.n	8008e1c <HAL_TIM_Base_Start_IT+0x6c>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a19      	ldr	r2, [pc, #100]	@ (8008e7c <HAL_TIM_Base_Start_IT+0xcc>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d115      	bne.n	8008e48 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689a      	ldr	r2, [r3, #8]
 8008e22:	4b17      	ldr	r3, [pc, #92]	@ (8008e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b06      	cmp	r3, #6
 8008e2c:	d015      	beq.n	8008e5a <HAL_TIM_Base_Start_IT+0xaa>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e34:	d011      	beq.n	8008e5a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f042 0201 	orr.w	r2, r2, #1
 8008e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e46:	e008      	b.n	8008e5a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0201 	orr.w	r2, r2, #1
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	e000      	b.n	8008e5c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	40012c00 	.word	0x40012c00
 8008e70:	40000400 	.word	0x40000400
 8008e74:	40000800 	.word	0x40000800
 8008e78:	40013400 	.word	0x40013400
 8008e7c:	40014000 	.word	0x40014000
 8008e80:	00010007 	.word	0x00010007

08008e84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e049      	b.n	8008f2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f841 	bl	8008f32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f000 fcd0 	bl	8009868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d109      	bne.n	8008f6c <HAL_TIM_PWM_Start+0x24>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	bf14      	ite	ne
 8008f64:	2301      	movne	r3, #1
 8008f66:	2300      	moveq	r3, #0
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	e03c      	b.n	8008fe6 <HAL_TIM_PWM_Start+0x9e>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d109      	bne.n	8008f86 <HAL_TIM_PWM_Start+0x3e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	bf14      	ite	ne
 8008f7e:	2301      	movne	r3, #1
 8008f80:	2300      	moveq	r3, #0
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	e02f      	b.n	8008fe6 <HAL_TIM_PWM_Start+0x9e>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d109      	bne.n	8008fa0 <HAL_TIM_PWM_Start+0x58>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	bf14      	ite	ne
 8008f98:	2301      	movne	r3, #1
 8008f9a:	2300      	moveq	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	e022      	b.n	8008fe6 <HAL_TIM_PWM_Start+0x9e>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b0c      	cmp	r3, #12
 8008fa4:	d109      	bne.n	8008fba <HAL_TIM_PWM_Start+0x72>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	bf14      	ite	ne
 8008fb2:	2301      	movne	r3, #1
 8008fb4:	2300      	moveq	r3, #0
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	e015      	b.n	8008fe6 <HAL_TIM_PWM_Start+0x9e>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	d109      	bne.n	8008fd4 <HAL_TIM_PWM_Start+0x8c>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	bf14      	ite	ne
 8008fcc:	2301      	movne	r3, #1
 8008fce:	2300      	moveq	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	e008      	b.n	8008fe6 <HAL_TIM_PWM_Start+0x9e>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	bf14      	ite	ne
 8008fe0:	2301      	movne	r3, #1
 8008fe2:	2300      	moveq	r3, #0
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e097      	b.n	800911e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d104      	bne.n	8008ffe <HAL_TIM_PWM_Start+0xb6>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ffc:	e023      	b.n	8009046 <HAL_TIM_PWM_Start+0xfe>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b04      	cmp	r3, #4
 8009002:	d104      	bne.n	800900e <HAL_TIM_PWM_Start+0xc6>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800900c:	e01b      	b.n	8009046 <HAL_TIM_PWM_Start+0xfe>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b08      	cmp	r3, #8
 8009012:	d104      	bne.n	800901e <HAL_TIM_PWM_Start+0xd6>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800901c:	e013      	b.n	8009046 <HAL_TIM_PWM_Start+0xfe>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b0c      	cmp	r3, #12
 8009022:	d104      	bne.n	800902e <HAL_TIM_PWM_Start+0xe6>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2202      	movs	r2, #2
 8009028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800902c:	e00b      	b.n	8009046 <HAL_TIM_PWM_Start+0xfe>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	2b10      	cmp	r3, #16
 8009032:	d104      	bne.n	800903e <HAL_TIM_PWM_Start+0xf6>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800903c:	e003      	b.n	8009046 <HAL_TIM_PWM_Start+0xfe>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2202      	movs	r2, #2
 8009042:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2201      	movs	r2, #1
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f001 f838 	bl	800a0c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a33      	ldr	r2, [pc, #204]	@ (8009128 <HAL_TIM_PWM_Start+0x1e0>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d013      	beq.n	8009086 <HAL_TIM_PWM_Start+0x13e>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a32      	ldr	r2, [pc, #200]	@ (800912c <HAL_TIM_PWM_Start+0x1e4>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00e      	beq.n	8009086 <HAL_TIM_PWM_Start+0x13e>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a30      	ldr	r2, [pc, #192]	@ (8009130 <HAL_TIM_PWM_Start+0x1e8>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d009      	beq.n	8009086 <HAL_TIM_PWM_Start+0x13e>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a2f      	ldr	r2, [pc, #188]	@ (8009134 <HAL_TIM_PWM_Start+0x1ec>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d004      	beq.n	8009086 <HAL_TIM_PWM_Start+0x13e>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a2d      	ldr	r2, [pc, #180]	@ (8009138 <HAL_TIM_PWM_Start+0x1f0>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d101      	bne.n	800908a <HAL_TIM_PWM_Start+0x142>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <HAL_TIM_PWM_Start+0x144>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d007      	beq.n	80090a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800909e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a20      	ldr	r2, [pc, #128]	@ (8009128 <HAL_TIM_PWM_Start+0x1e0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d018      	beq.n	80090dc <HAL_TIM_PWM_Start+0x194>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b2:	d013      	beq.n	80090dc <HAL_TIM_PWM_Start+0x194>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a20      	ldr	r2, [pc, #128]	@ (800913c <HAL_TIM_PWM_Start+0x1f4>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00e      	beq.n	80090dc <HAL_TIM_PWM_Start+0x194>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009140 <HAL_TIM_PWM_Start+0x1f8>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d009      	beq.n	80090dc <HAL_TIM_PWM_Start+0x194>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a17      	ldr	r2, [pc, #92]	@ (800912c <HAL_TIM_PWM_Start+0x1e4>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d004      	beq.n	80090dc <HAL_TIM_PWM_Start+0x194>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a16      	ldr	r2, [pc, #88]	@ (8009130 <HAL_TIM_PWM_Start+0x1e8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d115      	bne.n	8009108 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	4b18      	ldr	r3, [pc, #96]	@ (8009144 <HAL_TIM_PWM_Start+0x1fc>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b06      	cmp	r3, #6
 80090ec:	d015      	beq.n	800911a <HAL_TIM_PWM_Start+0x1d2>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090f4:	d011      	beq.n	800911a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f042 0201 	orr.w	r2, r2, #1
 8009104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009106:	e008      	b.n	800911a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0201 	orr.w	r2, r2, #1
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	e000      	b.n	800911c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800911a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	40012c00 	.word	0x40012c00
 800912c:	40013400 	.word	0x40013400
 8009130:	40014000 	.word	0x40014000
 8009134:	40014400 	.word	0x40014400
 8009138:	40014800 	.word	0x40014800
 800913c:	40000400 	.word	0x40000400
 8009140:	40000800 	.word	0x40000800
 8009144:	00010007 	.word	0x00010007

08009148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d020      	beq.n	80091ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01b      	beq.n	80091ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f06f 0202 	mvn.w	r2, #2
 800917c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb4a 	bl	800982c <HAL_TIM_IC_CaptureCallback>
 8009198:	e005      	b.n	80091a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fb3c 	bl	8009818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fb4d 	bl	8009840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d020      	beq.n	80091f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d01b      	beq.n	80091f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f06f 0204 	mvn.w	r2, #4
 80091c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2202      	movs	r2, #2
 80091ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fb24 	bl	800982c <HAL_TIM_IC_CaptureCallback>
 80091e4:	e005      	b.n	80091f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fb16 	bl	8009818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fb27 	bl	8009840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	f003 0308 	and.w	r3, r3, #8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d020      	beq.n	8009244 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f003 0308 	and.w	r3, r3, #8
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01b      	beq.n	8009244 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f06f 0208 	mvn.w	r2, #8
 8009214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2204      	movs	r2, #4
 800921a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fafe 	bl	800982c <HAL_TIM_IC_CaptureCallback>
 8009230:	e005      	b.n	800923e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 faf0 	bl	8009818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fb01 	bl	8009840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b00      	cmp	r3, #0
 800924c:	d020      	beq.n	8009290 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f003 0310 	and.w	r3, r3, #16
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01b      	beq.n	8009290 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0210 	mvn.w	r2, #16
 8009260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2208      	movs	r2, #8
 8009266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fad8 	bl	800982c <HAL_TIM_IC_CaptureCallback>
 800927c:	e005      	b.n	800928a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 faca 	bl	8009818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fadb 	bl	8009840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00c      	beq.n	80092b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d007      	beq.n	80092b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0201 	mvn.w	r2, #1
 80092ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 faa8 	bl	8009804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d104      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00c      	beq.n	80092e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d007      	beq.n	80092e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80092da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 ffa3 	bl	800a228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00c      	beq.n	8009306 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80092fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 ff9b 	bl	800a23c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00c      	beq.n	800932a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fa95 	bl	8009854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00c      	beq.n	800934e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d007      	beq.n	800934e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f06f 0220 	mvn.w	r2, #32
 8009346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 ff63 	bl	800a214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00c      	beq.n	8009372 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d007      	beq.n	8009372 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800936a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 ff6f 	bl	800a250 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00c      	beq.n	8009396 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d007      	beq.n	8009396 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800938e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 ff67 	bl	800a264 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00c      	beq.n	80093ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d007      	beq.n	80093ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80093b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 ff5f 	bl	800a278 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00c      	beq.n	80093de <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d007      	beq.n	80093de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80093d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 ff57 	bl	800a28c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009402:	2302      	movs	r3, #2
 8009404:	e0ff      	b.n	8009606 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b14      	cmp	r3, #20
 8009412:	f200 80f0 	bhi.w	80095f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009416:	a201      	add	r2, pc, #4	@ (adr r2, 800941c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941c:	08009471 	.word	0x08009471
 8009420:	080095f7 	.word	0x080095f7
 8009424:	080095f7 	.word	0x080095f7
 8009428:	080095f7 	.word	0x080095f7
 800942c:	080094b1 	.word	0x080094b1
 8009430:	080095f7 	.word	0x080095f7
 8009434:	080095f7 	.word	0x080095f7
 8009438:	080095f7 	.word	0x080095f7
 800943c:	080094f3 	.word	0x080094f3
 8009440:	080095f7 	.word	0x080095f7
 8009444:	080095f7 	.word	0x080095f7
 8009448:	080095f7 	.word	0x080095f7
 800944c:	08009533 	.word	0x08009533
 8009450:	080095f7 	.word	0x080095f7
 8009454:	080095f7 	.word	0x080095f7
 8009458:	080095f7 	.word	0x080095f7
 800945c:	08009575 	.word	0x08009575
 8009460:	080095f7 	.word	0x080095f7
 8009464:	080095f7 	.word	0x080095f7
 8009468:	080095f7 	.word	0x080095f7
 800946c:	080095b5 	.word	0x080095b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fa92 	bl	80099a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 0208 	orr.w	r2, r2, #8
 800948a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	699a      	ldr	r2, [r3, #24]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 0204 	bic.w	r2, r2, #4
 800949a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6999      	ldr	r1, [r3, #24]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	691a      	ldr	r2, [r3, #16]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	619a      	str	r2, [r3, #24]
      break;
 80094ae:	e0a5      	b.n	80095fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68b9      	ldr	r1, [r7, #8]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fb02 	bl	8009ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6999      	ldr	r1, [r3, #24]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	021a      	lsls	r2, r3, #8
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	430a      	orrs	r2, r1
 80094ee:	619a      	str	r2, [r3, #24]
      break;
 80094f0:	e084      	b.n	80095fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68b9      	ldr	r1, [r7, #8]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 fb6b 	bl	8009bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69da      	ldr	r2, [r3, #28]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f042 0208 	orr.w	r2, r2, #8
 800950c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69da      	ldr	r2, [r3, #28]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0204 	bic.w	r2, r2, #4
 800951c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69d9      	ldr	r1, [r3, #28]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	61da      	str	r2, [r3, #28]
      break;
 8009530:	e064      	b.n	80095fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fbd3 	bl	8009ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800954c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69da      	ldr	r2, [r3, #28]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800955c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69d9      	ldr	r1, [r3, #28]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	021a      	lsls	r2, r3, #8
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	61da      	str	r2, [r3, #28]
      break;
 8009572:	e043      	b.n	80095fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fc3c 	bl	8009df8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f042 0208 	orr.w	r2, r2, #8
 800958e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f022 0204 	bic.w	r2, r2, #4
 800959e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	691a      	ldr	r2, [r3, #16]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80095b2:	e023      	b.n	80095fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68b9      	ldr	r1, [r7, #8]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fc80 	bl	8009ec0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	021a      	lsls	r2, r3, #8
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	430a      	orrs	r2, r1
 80095f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80095f4:	e002      	b.n	80095fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	75fb      	strb	r3, [r7, #23]
      break;
 80095fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009604:	7dfb      	ldrb	r3, [r7, #23]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop

08009610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <HAL_TIM_ConfigClockSource+0x1c>
 8009628:	2302      	movs	r3, #2
 800962a:	e0de      	b.n	80097ea <HAL_TIM_ConfigClockSource+0x1da>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800964a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800964e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a63      	ldr	r2, [pc, #396]	@ (80097f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009666:	4293      	cmp	r3, r2
 8009668:	f000 80a9 	beq.w	80097be <HAL_TIM_ConfigClockSource+0x1ae>
 800966c:	4a61      	ldr	r2, [pc, #388]	@ (80097f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	f200 80ae 	bhi.w	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009674:	4a60      	ldr	r2, [pc, #384]	@ (80097f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009676:	4293      	cmp	r3, r2
 8009678:	f000 80a1 	beq.w	80097be <HAL_TIM_ConfigClockSource+0x1ae>
 800967c:	4a5e      	ldr	r2, [pc, #376]	@ (80097f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800967e:	4293      	cmp	r3, r2
 8009680:	f200 80a6 	bhi.w	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009684:	4a5d      	ldr	r2, [pc, #372]	@ (80097fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009686:	4293      	cmp	r3, r2
 8009688:	f000 8099 	beq.w	80097be <HAL_TIM_ConfigClockSource+0x1ae>
 800968c:	4a5b      	ldr	r2, [pc, #364]	@ (80097fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800968e:	4293      	cmp	r3, r2
 8009690:	f200 809e 	bhi.w	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009694:	4a5a      	ldr	r2, [pc, #360]	@ (8009800 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009696:	4293      	cmp	r3, r2
 8009698:	f000 8091 	beq.w	80097be <HAL_TIM_ConfigClockSource+0x1ae>
 800969c:	4a58      	ldr	r2, [pc, #352]	@ (8009800 <HAL_TIM_ConfigClockSource+0x1f0>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	f200 8096 	bhi.w	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80096a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80096a8:	f000 8089 	beq.w	80097be <HAL_TIM_ConfigClockSource+0x1ae>
 80096ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80096b0:	f200 808e 	bhi.w	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80096b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096b8:	d03e      	beq.n	8009738 <HAL_TIM_ConfigClockSource+0x128>
 80096ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096be:	f200 8087 	bhi.w	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80096c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096c6:	f000 8086 	beq.w	80097d6 <HAL_TIM_ConfigClockSource+0x1c6>
 80096ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ce:	d87f      	bhi.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80096d0:	2b70      	cmp	r3, #112	@ 0x70
 80096d2:	d01a      	beq.n	800970a <HAL_TIM_ConfigClockSource+0xfa>
 80096d4:	2b70      	cmp	r3, #112	@ 0x70
 80096d6:	d87b      	bhi.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80096d8:	2b60      	cmp	r3, #96	@ 0x60
 80096da:	d050      	beq.n	800977e <HAL_TIM_ConfigClockSource+0x16e>
 80096dc:	2b60      	cmp	r3, #96	@ 0x60
 80096de:	d877      	bhi.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80096e0:	2b50      	cmp	r3, #80	@ 0x50
 80096e2:	d03c      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x14e>
 80096e4:	2b50      	cmp	r3, #80	@ 0x50
 80096e6:	d873      	bhi.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80096e8:	2b40      	cmp	r3, #64	@ 0x40
 80096ea:	d058      	beq.n	800979e <HAL_TIM_ConfigClockSource+0x18e>
 80096ec:	2b40      	cmp	r3, #64	@ 0x40
 80096ee:	d86f      	bhi.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80096f0:	2b30      	cmp	r3, #48	@ 0x30
 80096f2:	d064      	beq.n	80097be <HAL_TIM_ConfigClockSource+0x1ae>
 80096f4:	2b30      	cmp	r3, #48	@ 0x30
 80096f6:	d86b      	bhi.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80096f8:	2b20      	cmp	r3, #32
 80096fa:	d060      	beq.n	80097be <HAL_TIM_ConfigClockSource+0x1ae>
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	d867      	bhi.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009700:	2b00      	cmp	r3, #0
 8009702:	d05c      	beq.n	80097be <HAL_TIM_ConfigClockSource+0x1ae>
 8009704:	2b10      	cmp	r3, #16
 8009706:	d05a      	beq.n	80097be <HAL_TIM_ConfigClockSource+0x1ae>
 8009708:	e062      	b.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800971a:	f000 fcb3 	bl	800a084 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800972c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	609a      	str	r2, [r3, #8]
      break;
 8009736:	e04f      	b.n	80097d8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009748:	f000 fc9c 	bl	800a084 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689a      	ldr	r2, [r3, #8]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800975a:	609a      	str	r2, [r3, #8]
      break;
 800975c:	e03c      	b.n	80097d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800976a:	461a      	mov	r2, r3
 800976c:	f000 fc0e 	bl	8009f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2150      	movs	r1, #80	@ 0x50
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fc67 	bl	800a04a <TIM_ITRx_SetConfig>
      break;
 800977c:	e02c      	b.n	80097d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800978a:	461a      	mov	r2, r3
 800978c:	f000 fc2d 	bl	8009fea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2160      	movs	r1, #96	@ 0x60
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fc57 	bl	800a04a <TIM_ITRx_SetConfig>
      break;
 800979c:	e01c      	b.n	80097d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097aa:	461a      	mov	r2, r3
 80097ac:	f000 fbee 	bl	8009f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2140      	movs	r1, #64	@ 0x40
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fc47 	bl	800a04a <TIM_ITRx_SetConfig>
      break;
 80097bc:	e00c      	b.n	80097d8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4619      	mov	r1, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	f000 fc3e 	bl	800a04a <TIM_ITRx_SetConfig>
      break;
 80097ce:	e003      	b.n	80097d8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]
      break;
 80097d4:	e000      	b.n	80097d8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80097d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	00100070 	.word	0x00100070
 80097f8:	00100040 	.word	0x00100040
 80097fc:	00100030 	.word	0x00100030
 8009800:	00100020 	.word	0x00100020

08009804 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a42      	ldr	r2, [pc, #264]	@ (8009984 <TIM_Base_SetConfig+0x11c>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d00f      	beq.n	80098a0 <TIM_Base_SetConfig+0x38>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009886:	d00b      	beq.n	80098a0 <TIM_Base_SetConfig+0x38>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a3f      	ldr	r2, [pc, #252]	@ (8009988 <TIM_Base_SetConfig+0x120>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d007      	beq.n	80098a0 <TIM_Base_SetConfig+0x38>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a3e      	ldr	r2, [pc, #248]	@ (800998c <TIM_Base_SetConfig+0x124>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d003      	beq.n	80098a0 <TIM_Base_SetConfig+0x38>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a3d      	ldr	r2, [pc, #244]	@ (8009990 <TIM_Base_SetConfig+0x128>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d108      	bne.n	80098b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a33      	ldr	r2, [pc, #204]	@ (8009984 <TIM_Base_SetConfig+0x11c>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d01b      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098c0:	d017      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a30      	ldr	r2, [pc, #192]	@ (8009988 <TIM_Base_SetConfig+0x120>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a2f      	ldr	r2, [pc, #188]	@ (800998c <TIM_Base_SetConfig+0x124>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00f      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a2e      	ldr	r2, [pc, #184]	@ (8009990 <TIM_Base_SetConfig+0x128>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00b      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a2d      	ldr	r2, [pc, #180]	@ (8009994 <TIM_Base_SetConfig+0x12c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a2c      	ldr	r2, [pc, #176]	@ (8009998 <TIM_Base_SetConfig+0x130>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d003      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a2b      	ldr	r2, [pc, #172]	@ (800999c <TIM_Base_SetConfig+0x134>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d108      	bne.n	8009904 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	4313      	orrs	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a16      	ldr	r2, [pc, #88]	@ (8009984 <TIM_Base_SetConfig+0x11c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00f      	beq.n	8009950 <TIM_Base_SetConfig+0xe8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a17      	ldr	r2, [pc, #92]	@ (8009990 <TIM_Base_SetConfig+0x128>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00b      	beq.n	8009950 <TIM_Base_SetConfig+0xe8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a16      	ldr	r2, [pc, #88]	@ (8009994 <TIM_Base_SetConfig+0x12c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d007      	beq.n	8009950 <TIM_Base_SetConfig+0xe8>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a15      	ldr	r2, [pc, #84]	@ (8009998 <TIM_Base_SetConfig+0x130>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_Base_SetConfig+0xe8>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a14      	ldr	r2, [pc, #80]	@ (800999c <TIM_Base_SetConfig+0x134>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d103      	bne.n	8009958 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b01      	cmp	r3, #1
 8009968:	d105      	bne.n	8009976 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f023 0201 	bic.w	r2, r3, #1
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	611a      	str	r2, [r3, #16]
  }
}
 8009976:	bf00      	nop
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	40012c00 	.word	0x40012c00
 8009988:	40000400 	.word	0x40000400
 800998c:	40000800 	.word	0x40000800
 8009990:	40013400 	.word	0x40013400
 8009994:	40014000 	.word	0x40014000
 8009998:	40014400 	.word	0x40014400
 800999c:	40014800 	.word	0x40014800

080099a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	f023 0201 	bic.w	r2, r3, #1
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f023 0303 	bic.w	r3, r3, #3
 80099da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f023 0302 	bic.w	r3, r3, #2
 80099ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a2c      	ldr	r2, [pc, #176]	@ (8009aac <TIM_OC1_SetConfig+0x10c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00f      	beq.n	8009a20 <TIM_OC1_SetConfig+0x80>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a2b      	ldr	r2, [pc, #172]	@ (8009ab0 <TIM_OC1_SetConfig+0x110>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d00b      	beq.n	8009a20 <TIM_OC1_SetConfig+0x80>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8009ab4 <TIM_OC1_SetConfig+0x114>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d007      	beq.n	8009a20 <TIM_OC1_SetConfig+0x80>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a29      	ldr	r2, [pc, #164]	@ (8009ab8 <TIM_OC1_SetConfig+0x118>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d003      	beq.n	8009a20 <TIM_OC1_SetConfig+0x80>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a28      	ldr	r2, [pc, #160]	@ (8009abc <TIM_OC1_SetConfig+0x11c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10c      	bne.n	8009a3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f023 0308 	bic.w	r3, r3, #8
 8009a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f023 0304 	bic.w	r3, r3, #4
 8009a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009aac <TIM_OC1_SetConfig+0x10c>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d00f      	beq.n	8009a62 <TIM_OC1_SetConfig+0xc2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a1a      	ldr	r2, [pc, #104]	@ (8009ab0 <TIM_OC1_SetConfig+0x110>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d00b      	beq.n	8009a62 <TIM_OC1_SetConfig+0xc2>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a19      	ldr	r2, [pc, #100]	@ (8009ab4 <TIM_OC1_SetConfig+0x114>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d007      	beq.n	8009a62 <TIM_OC1_SetConfig+0xc2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a18      	ldr	r2, [pc, #96]	@ (8009ab8 <TIM_OC1_SetConfig+0x118>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d003      	beq.n	8009a62 <TIM_OC1_SetConfig+0xc2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a17      	ldr	r2, [pc, #92]	@ (8009abc <TIM_OC1_SetConfig+0x11c>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d111      	bne.n	8009a86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	621a      	str	r2, [r3, #32]
}
 8009aa0:	bf00      	nop
 8009aa2:	371c      	adds	r7, #28
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	40012c00 	.word	0x40012c00
 8009ab0:	40013400 	.word	0x40013400
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	40014400 	.word	0x40014400
 8009abc:	40014800 	.word	0x40014800

08009ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	f023 0210 	bic.w	r2, r3, #16
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	021b      	lsls	r3, r3, #8
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f023 0320 	bic.w	r3, r3, #32
 8009b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	011b      	lsls	r3, r3, #4
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a28      	ldr	r2, [pc, #160]	@ (8009bc0 <TIM_OC2_SetConfig+0x100>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d003      	beq.n	8009b2c <TIM_OC2_SetConfig+0x6c>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a27      	ldr	r2, [pc, #156]	@ (8009bc4 <TIM_OC2_SetConfig+0x104>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d10d      	bne.n	8009b48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	011b      	lsls	r3, r3, #4
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8009bc0 <TIM_OC2_SetConfig+0x100>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00f      	beq.n	8009b70 <TIM_OC2_SetConfig+0xb0>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a1c      	ldr	r2, [pc, #112]	@ (8009bc4 <TIM_OC2_SetConfig+0x104>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d00b      	beq.n	8009b70 <TIM_OC2_SetConfig+0xb0>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bc8 <TIM_OC2_SetConfig+0x108>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d007      	beq.n	8009b70 <TIM_OC2_SetConfig+0xb0>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a1a      	ldr	r2, [pc, #104]	@ (8009bcc <TIM_OC2_SetConfig+0x10c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d003      	beq.n	8009b70 <TIM_OC2_SetConfig+0xb0>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a19      	ldr	r2, [pc, #100]	@ (8009bd0 <TIM_OC2_SetConfig+0x110>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d113      	bne.n	8009b98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	695b      	ldr	r3, [r3, #20]
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685a      	ldr	r2, [r3, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	621a      	str	r2, [r3, #32]
}
 8009bb2:	bf00      	nop
 8009bb4:	371c      	adds	r7, #28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	40012c00 	.word	0x40012c00
 8009bc4:	40013400 	.word	0x40013400
 8009bc8:	40014000 	.word	0x40014000
 8009bcc:	40014400 	.word	0x40014400
 8009bd0:	40014800 	.word	0x40014800

08009bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	021b      	lsls	r3, r3, #8
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a27      	ldr	r2, [pc, #156]	@ (8009cd0 <TIM_OC3_SetConfig+0xfc>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d003      	beq.n	8009c3e <TIM_OC3_SetConfig+0x6a>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a26      	ldr	r2, [pc, #152]	@ (8009cd4 <TIM_OC3_SetConfig+0x100>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d10d      	bne.n	8009c5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	021b      	lsls	r3, r3, #8
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8009cd0 <TIM_OC3_SetConfig+0xfc>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d00f      	beq.n	8009c82 <TIM_OC3_SetConfig+0xae>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a1b      	ldr	r2, [pc, #108]	@ (8009cd4 <TIM_OC3_SetConfig+0x100>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d00b      	beq.n	8009c82 <TIM_OC3_SetConfig+0xae>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8009cd8 <TIM_OC3_SetConfig+0x104>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d007      	beq.n	8009c82 <TIM_OC3_SetConfig+0xae>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a19      	ldr	r2, [pc, #100]	@ (8009cdc <TIM_OC3_SetConfig+0x108>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d003      	beq.n	8009c82 <TIM_OC3_SetConfig+0xae>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a18      	ldr	r2, [pc, #96]	@ (8009ce0 <TIM_OC3_SetConfig+0x10c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d113      	bne.n	8009caa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	011b      	lsls	r3, r3, #4
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	011b      	lsls	r3, r3, #4
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	621a      	str	r2, [r3, #32]
}
 8009cc4:	bf00      	nop
 8009cc6:	371c      	adds	r7, #28
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	40012c00 	.word	0x40012c00
 8009cd4:	40013400 	.word	0x40013400
 8009cd8:	40014000 	.word	0x40014000
 8009cdc:	40014400 	.word	0x40014400
 8009ce0:	40014800 	.word	0x40014800

08009ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	021b      	lsls	r3, r3, #8
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	031b      	lsls	r3, r3, #12
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a28      	ldr	r2, [pc, #160]	@ (8009de4 <TIM_OC4_SetConfig+0x100>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d003      	beq.n	8009d50 <TIM_OC4_SetConfig+0x6c>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a27      	ldr	r2, [pc, #156]	@ (8009de8 <TIM_OC4_SetConfig+0x104>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10d      	bne.n	8009d6c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	031b      	lsls	r3, r3, #12
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8009de4 <TIM_OC4_SetConfig+0x100>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d00f      	beq.n	8009d94 <TIM_OC4_SetConfig+0xb0>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a1c      	ldr	r2, [pc, #112]	@ (8009de8 <TIM_OC4_SetConfig+0x104>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d00b      	beq.n	8009d94 <TIM_OC4_SetConfig+0xb0>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8009dec <TIM_OC4_SetConfig+0x108>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d007      	beq.n	8009d94 <TIM_OC4_SetConfig+0xb0>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a1a      	ldr	r2, [pc, #104]	@ (8009df0 <TIM_OC4_SetConfig+0x10c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d003      	beq.n	8009d94 <TIM_OC4_SetConfig+0xb0>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a19      	ldr	r2, [pc, #100]	@ (8009df4 <TIM_OC4_SetConfig+0x110>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d113      	bne.n	8009dbc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009da2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	019b      	lsls	r3, r3, #6
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	019b      	lsls	r3, r3, #6
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	621a      	str	r2, [r3, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	40012c00 	.word	0x40012c00
 8009de8:	40013400 	.word	0x40013400
 8009dec:	40014000 	.word	0x40014000
 8009df0:	40014400 	.word	0x40014400
 8009df4:	40014800 	.word	0x40014800

08009df8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009e3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	041b      	lsls	r3, r3, #16
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a17      	ldr	r2, [pc, #92]	@ (8009eac <TIM_OC5_SetConfig+0xb4>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00f      	beq.n	8009e72 <TIM_OC5_SetConfig+0x7a>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a16      	ldr	r2, [pc, #88]	@ (8009eb0 <TIM_OC5_SetConfig+0xb8>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00b      	beq.n	8009e72 <TIM_OC5_SetConfig+0x7a>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a15      	ldr	r2, [pc, #84]	@ (8009eb4 <TIM_OC5_SetConfig+0xbc>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d007      	beq.n	8009e72 <TIM_OC5_SetConfig+0x7a>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a14      	ldr	r2, [pc, #80]	@ (8009eb8 <TIM_OC5_SetConfig+0xc0>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d003      	beq.n	8009e72 <TIM_OC5_SetConfig+0x7a>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a13      	ldr	r2, [pc, #76]	@ (8009ebc <TIM_OC5_SetConfig+0xc4>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d109      	bne.n	8009e86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	021b      	lsls	r3, r3, #8
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	621a      	str	r2, [r3, #32]
}
 8009ea0:	bf00      	nop
 8009ea2:	371c      	adds	r7, #28
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	40012c00 	.word	0x40012c00
 8009eb0:	40013400 	.word	0x40013400
 8009eb4:	40014000 	.word	0x40014000
 8009eb8:	40014400 	.word	0x40014400
 8009ebc:	40014800 	.word	0x40014800

08009ec0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a1b      	ldr	r3, [r3, #32]
 8009ed4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	051b      	lsls	r3, r3, #20
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a18      	ldr	r2, [pc, #96]	@ (8009f78 <TIM_OC6_SetConfig+0xb8>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d00f      	beq.n	8009f3c <TIM_OC6_SetConfig+0x7c>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a17      	ldr	r2, [pc, #92]	@ (8009f7c <TIM_OC6_SetConfig+0xbc>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d00b      	beq.n	8009f3c <TIM_OC6_SetConfig+0x7c>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a16      	ldr	r2, [pc, #88]	@ (8009f80 <TIM_OC6_SetConfig+0xc0>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d007      	beq.n	8009f3c <TIM_OC6_SetConfig+0x7c>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a15      	ldr	r2, [pc, #84]	@ (8009f84 <TIM_OC6_SetConfig+0xc4>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <TIM_OC6_SetConfig+0x7c>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a14      	ldr	r2, [pc, #80]	@ (8009f88 <TIM_OC6_SetConfig+0xc8>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d109      	bne.n	8009f50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	029b      	lsls	r3, r3, #10
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	621a      	str	r2, [r3, #32]
}
 8009f6a:	bf00      	nop
 8009f6c:	371c      	adds	r7, #28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	40012c00 	.word	0x40012c00
 8009f7c:	40013400 	.word	0x40013400
 8009f80:	40014000 	.word	0x40014000
 8009f84:	40014400 	.word	0x40014400
 8009f88:	40014800 	.word	0x40014800

08009f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6a1b      	ldr	r3, [r3, #32]
 8009f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	f023 0201 	bic.w	r2, r3, #1
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f023 030a 	bic.w	r3, r3, #10
 8009fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	621a      	str	r2, [r3, #32]
}
 8009fde:	bf00      	nop
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b087      	sub	sp, #28
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	f023 0210 	bic.w	r2, r3, #16
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	031b      	lsls	r3, r3, #12
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a026:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4313      	orrs	r3, r2
 800a030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	621a      	str	r2, [r3, #32]
}
 800a03e:	bf00      	nop
 800a040:	371c      	adds	r7, #28
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b085      	sub	sp, #20
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	f043 0307 	orr.w	r3, r3, #7
 800a070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	609a      	str	r2, [r3, #8]
}
 800a078:	bf00      	nop
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a09e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	021a      	lsls	r2, r3, #8
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	609a      	str	r2, [r3, #8]
}
 800a0b8:	bf00      	nop
 800a0ba:	371c      	adds	r7, #28
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f003 031f 	and.w	r3, r3, #31
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6a1a      	ldr	r2, [r3, #32]
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	43db      	mvns	r3, r3
 800a0e6:	401a      	ands	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6a1a      	ldr	r2, [r3, #32]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f003 031f 	and.w	r3, r3, #31
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	621a      	str	r2, [r3, #32]
}
 800a102:	bf00      	nop
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
	...

0800a110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a120:	2b01      	cmp	r3, #1
 800a122:	d101      	bne.n	800a128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a124:	2302      	movs	r3, #2
 800a126:	e065      	b.n	800a1f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a2c      	ldr	r2, [pc, #176]	@ (800a200 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d004      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a2b      	ldr	r2, [pc, #172]	@ (800a204 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d108      	bne.n	800a16e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a162:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a178:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a1b      	ldr	r2, [pc, #108]	@ (800a200 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d018      	beq.n	800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a19e:	d013      	beq.n	800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a18      	ldr	r2, [pc, #96]	@ (800a208 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d00e      	beq.n	800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a17      	ldr	r2, [pc, #92]	@ (800a20c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d009      	beq.n	800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a12      	ldr	r2, [pc, #72]	@ (800a204 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d004      	beq.n	800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a13      	ldr	r2, [pc, #76]	@ (800a210 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d10c      	bne.n	800a1e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	40012c00 	.word	0x40012c00
 800a204:	40013400 	.word	0x40013400
 800a208:	40000400 	.word	0x40000400
 800a20c:	40000800 	.word	0x40000800
 800a210:	40014000 	.word	0x40014000

0800a214 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a244:	bf00      	nop
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e042      	b.n	800a338 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d106      	bne.n	800a2ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7f9 fcf3 	bl	8003cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2224      	movs	r2, #36	@ 0x24
 800a2ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f022 0201 	bic.w	r2, r2, #1
 800a2e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f001 f848 	bl	800b380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fd79 	bl	800ade8 <UART_SetConfig>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d101      	bne.n	800a300 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e01b      	b.n	800a338 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a30e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689a      	ldr	r2, [r3, #8]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a31e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f042 0201 	orr.w	r2, r2, #1
 800a32e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 f8c7 	bl	800b4c4 <UART_CheckIdleState>
 800a336:	4603      	mov	r3, r0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b08a      	sub	sp, #40	@ 0x28
 800a344:	af02      	add	r7, sp, #8
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	4613      	mov	r3, r2
 800a34e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a356:	2b20      	cmp	r3, #32
 800a358:	d17b      	bne.n	800a452 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <HAL_UART_Transmit+0x26>
 800a360:	88fb      	ldrh	r3, [r7, #6]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e074      	b.n	800a454 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2221      	movs	r2, #33	@ 0x21
 800a376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a37a:	f7f9 ffaf 	bl	80042dc <HAL_GetTick>
 800a37e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	88fa      	ldrh	r2, [r7, #6]
 800a384:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	88fa      	ldrh	r2, [r7, #6]
 800a38c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a398:	d108      	bne.n	800a3ac <HAL_UART_Transmit+0x6c>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d104      	bne.n	800a3ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	61bb      	str	r3, [r7, #24]
 800a3aa:	e003      	b.n	800a3b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a3b4:	e030      	b.n	800a418 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2180      	movs	r1, #128	@ 0x80
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f001 f929 	bl	800b618 <UART_WaitOnFlagUntilTimeout>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e03d      	b.n	800a454 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10b      	bne.n	800a3f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	3302      	adds	r3, #2
 800a3f2:	61bb      	str	r3, [r7, #24]
 800a3f4:	e007      	b.n	800a406 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	781a      	ldrb	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	3301      	adds	r3, #1
 800a404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	3b01      	subs	r3, #1
 800a410:	b29a      	uxth	r2, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a41e:	b29b      	uxth	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1c8      	bne.n	800a3b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2200      	movs	r2, #0
 800a42c:	2140      	movs	r1, #64	@ 0x40
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f001 f8f2 	bl	800b618 <UART_WaitOnFlagUntilTimeout>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d005      	beq.n	800a446 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2220      	movs	r2, #32
 800a43e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e006      	b.n	800a454 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2220      	movs	r2, #32
 800a44a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	e000      	b.n	800a454 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a452:	2302      	movs	r3, #2
  }
}
 800a454:	4618      	mov	r0, r3
 800a456:	3720      	adds	r7, #32
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08a      	sub	sp, #40	@ 0x28
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	4613      	mov	r3, r2
 800a468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a470:	2b20      	cmp	r3, #32
 800a472:	d137      	bne.n	800a4e4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <HAL_UART_Receive_DMA+0x24>
 800a47a:	88fb      	ldrh	r3, [r7, #6]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e030      	b.n	800a4e6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a18      	ldr	r2, [pc, #96]	@ (800a4f0 <HAL_UART_Receive_DMA+0x94>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d01f      	beq.n	800a4d4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d018      	beq.n	800a4d4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	e853 3f00 	ldrex	r3, [r3]
 800a4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a4b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	623b      	str	r3, [r7, #32]
 800a4c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	69f9      	ldr	r1, [r7, #28]
 800a4c6:	6a3a      	ldr	r2, [r7, #32]
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e6      	bne.n	800a4a2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a4d4:	88fb      	ldrh	r3, [r7, #6]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f001 f90a 	bl	800b6f4 <UART_Start_Receive_DMA>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	e000      	b.n	800a4e6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a4e4:	2302      	movs	r3, #2
  }
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3728      	adds	r7, #40	@ 0x28
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	40008000 	.word	0x40008000

0800a4f4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b0a0      	sub	sp, #128	@ 0x80
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a504:	e853 3f00 	ldrex	r3, [r3]
 800a508:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a50a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a50c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800a510:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a51a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a51c:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a520:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a522:	e841 2300 	strex	r3, r2, [r1]
 800a526:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a528:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e6      	bne.n	800a4fc <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3308      	adds	r3, #8
 800a534:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a538:	e853 3f00 	ldrex	r3, [r3]
 800a53c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a53e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a540:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800a544:	f023 0301 	bic.w	r3, r3, #1
 800a548:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3308      	adds	r3, #8
 800a550:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a552:	657a      	str	r2, [r7, #84]	@ 0x54
 800a554:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a558:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a55a:	e841 2300 	strex	r3, r2, [r1]
 800a55e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1e3      	bne.n	800a52e <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d118      	bne.n	800a5a0 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a576:	e853 3f00 	ldrex	r3, [r3]
 800a57a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57e:	f023 0310 	bic.w	r3, r3, #16
 800a582:	677b      	str	r3, [r7, #116]	@ 0x74
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a58c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a58e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a592:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a594:	e841 2300 	strex	r3, r2, [r1]
 800a598:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e6      	bne.n	800a56e <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5aa:	2b80      	cmp	r3, #128	@ 0x80
 800a5ac:	d137      	bne.n	800a61e <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	e853 3f00 	ldrex	r3, [r3]
 800a5bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5c4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a5ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a5d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5d6:	e841 2300 	strex	r3, r2, [r1]
 800a5da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1e5      	bne.n	800a5ae <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d019      	beq.n	800a61e <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fb fb0f 	bl	8005c1a <HAL_DMA_Abort>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00d      	beq.n	800a61e <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a606:	4618      	mov	r0, r3
 800a608:	f7fb fc76 	bl	8005ef8 <HAL_DMA_GetError>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b20      	cmp	r3, #32
 800a610:	d105      	bne.n	800a61e <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2210      	movs	r2, #16
 800a616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e073      	b.n	800a706 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a628:	2b40      	cmp	r3, #64	@ 0x40
 800a62a:	d13b      	bne.n	800a6a4 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3308      	adds	r3, #8
 800a632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	e853 3f00 	ldrex	r3, [r3]
 800a63a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a642:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3308      	adds	r3, #8
 800a64a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a64c:	61ba      	str	r2, [r7, #24]
 800a64e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a650:	6979      	ldr	r1, [r7, #20]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	e841 2300 	strex	r3, r2, [r1]
 800a658:	613b      	str	r3, [r7, #16]
   return(result);
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e5      	bne.n	800a62c <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a666:	2b00      	cmp	r3, #0
 800a668:	d01c      	beq.n	800a6a4 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a670:	2200      	movs	r2, #0
 800a672:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fb facd 	bl	8005c1a <HAL_DMA_Abort>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00e      	beq.n	800a6a4 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fb fc33 	bl	8005ef8 <HAL_DMA_GetError>
 800a692:	4603      	mov	r3, r0
 800a694:	2b20      	cmp	r3, #32
 800a696:	d105      	bne.n	800a6a4 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2210      	movs	r2, #16
 800a69c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e030      	b.n	800a706 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	220f      	movs	r2, #15
 800a6ba:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6c4:	d107      	bne.n	800a6d6 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	699a      	ldr	r2, [r3, #24]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f042 0210 	orr.w	r2, r2, #16
 800a6d4:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	699a      	ldr	r2, [r3, #24]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f042 0208 	orr.w	r2, r2, #8
 800a6e4:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3780      	adds	r7, #128	@ 0x80
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b0ba      	sub	sp, #232	@ 0xe8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a736:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a73a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a73e:	4013      	ands	r3, r2
 800a740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d11b      	bne.n	800a784 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d015      	beq.n	800a784 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a75c:	f003 0320 	and.w	r3, r3, #32
 800a760:	2b00      	cmp	r3, #0
 800a762:	d105      	bne.n	800a770 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d009      	beq.n	800a784 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 8300 	beq.w	800ad7a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	4798      	blx	r3
      }
      return;
 800a782:	e2fa      	b.n	800ad7a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 8123 	beq.w	800a9d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a78e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a792:	4b8d      	ldr	r3, [pc, #564]	@ (800a9c8 <HAL_UART_IRQHandler+0x2b8>)
 800a794:	4013      	ands	r3, r2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d106      	bne.n	800a7a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a79a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a79e:	4b8b      	ldr	r3, [pc, #556]	@ (800a9cc <HAL_UART_IRQHandler+0x2bc>)
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 8116 	beq.w	800a9d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d011      	beq.n	800a7d8 <HAL_UART_IRQHandler+0xc8>
 800a7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00b      	beq.n	800a7d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ce:	f043 0201 	orr.w	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7dc:	f003 0302 	and.w	r3, r3, #2
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d011      	beq.n	800a808 <HAL_UART_IRQHandler+0xf8>
 800a7e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00b      	beq.n	800a808 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7fe:	f043 0204 	orr.w	r2, r3, #4
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a80c:	f003 0304 	and.w	r3, r3, #4
 800a810:	2b00      	cmp	r3, #0
 800a812:	d011      	beq.n	800a838 <HAL_UART_IRQHandler+0x128>
 800a814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2204      	movs	r2, #4
 800a826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a82e:	f043 0202 	orr.w	r2, r3, #2
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b00      	cmp	r3, #0
 800a842:	d017      	beq.n	800a874 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a848:	f003 0320 	and.w	r3, r3, #32
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d105      	bne.n	800a85c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a850:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a854:	4b5c      	ldr	r3, [pc, #368]	@ (800a9c8 <HAL_UART_IRQHandler+0x2b8>)
 800a856:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00b      	beq.n	800a874 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2208      	movs	r2, #8
 800a862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a86a:	f043 0208 	orr.w	r2, r3, #8
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d012      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x196>
 800a880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a884:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00c      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a89c:	f043 0220 	orr.w	r2, r3, #32
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 8266 	beq.w	800ad7e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d013      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8c2:	f003 0320 	and.w	r3, r3, #32
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d105      	bne.n	800a8d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d007      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8fa:	2b40      	cmp	r3, #64	@ 0x40
 800a8fc:	d005      	beq.n	800a90a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a902:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a906:	2b00      	cmp	r3, #0
 800a908:	d054      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 ffd9 	bl	800b8c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a91a:	2b40      	cmp	r3, #64	@ 0x40
 800a91c:	d146      	bne.n	800a9ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3308      	adds	r3, #8
 800a924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a93c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3308      	adds	r3, #8
 800a946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a94a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a94e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1d9      	bne.n	800a91e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a970:	2b00      	cmp	r3, #0
 800a972:	d017      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a97a:	4a15      	ldr	r2, [pc, #84]	@ (800a9d0 <HAL_UART_IRQHandler+0x2c0>)
 800a97c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a984:	4618      	mov	r0, r3
 800a986:	f7fb f9a1 	bl	8005ccc <HAL_DMA_Abort_IT>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d019      	beq.n	800a9c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a99e:	4610      	mov	r0, r2
 800a9a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a2:	e00f      	b.n	800a9c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fa09 	bl	800adbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9aa:	e00b      	b.n	800a9c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fa05 	bl	800adbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9b2:	e007      	b.n	800a9c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fa01 	bl	800adbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a9c2:	e1dc      	b.n	800ad7e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c4:	bf00      	nop
    return;
 800a9c6:	e1da      	b.n	800ad7e <HAL_UART_IRQHandler+0x66e>
 800a9c8:	10000001 	.word	0x10000001
 800a9cc:	04000120 	.word	0x04000120
 800a9d0:	0800bb79 	.word	0x0800bb79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	f040 8170 	bne.w	800acbe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a9de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e2:	f003 0310 	and.w	r3, r3, #16
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 8169 	beq.w	800acbe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a9ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f0:	f003 0310 	and.w	r3, r3, #16
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 8162 	beq.w	800acbe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2210      	movs	r2, #16
 800aa00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa0c:	2b40      	cmp	r3, #64	@ 0x40
 800aa0e:	f040 80d8 	bne.w	800abc2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 80af 	beq.w	800ab88 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa34:	429a      	cmp	r2, r3
 800aa36:	f080 80a7 	bcs.w	800ab88 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 8087 	bne.w	800ab66 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aa6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aa8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aa9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1da      	bne.n	800aa58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3308      	adds	r3, #8
 800aac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aac6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aaca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aace:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e1      	bne.n	800aaa2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3308      	adds	r3, #8
 800aae4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aaee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3308      	adds	r3, #8
 800aafe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e3      	bne.n	800aade <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab34:	f023 0310 	bic.w	r3, r3, #16
 800ab38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	461a      	mov	r2, r3
 800ab42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e4      	bne.n	800ab24 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fb f85a 	bl	8005c1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2202      	movs	r2, #2
 800ab6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f925 	bl	800add0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ab86:	e0fc      	b.n	800ad82 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab92:	429a      	cmp	r2, r3
 800ab94:	f040 80f5 	bne.w	800ad82 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0320 	and.w	r3, r3, #32
 800aba6:	2b20      	cmp	r3, #32
 800aba8:	f040 80eb 	bne.w	800ad82 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f908 	bl	800add0 <HAL_UARTEx_RxEventCallback>
      return;
 800abc0:	e0df      	b.n	800ad82 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abce:	b29b      	uxth	r3, r3
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abdc:	b29b      	uxth	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 80d1 	beq.w	800ad86 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800abe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 80cc 	beq.w	800ad86 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf6:	e853 3f00 	ldrex	r3, [r3]
 800abfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac18:	e841 2300 	strex	r3, r2, [r1]
 800ac1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1e4      	bne.n	800abee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3308      	adds	r3, #8
 800ac2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2e:	e853 3f00 	ldrex	r3, [r3]
 800ac32:	623b      	str	r3, [r7, #32]
   return(result);
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac3a:	f023 0301 	bic.w	r3, r3, #1
 800ac3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3308      	adds	r3, #8
 800ac48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ac4c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e1      	bne.n	800ac24 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2220      	movs	r2, #32
 800ac64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f023 0310 	bic.w	r3, r3, #16
 800ac88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	461a      	mov	r2, r3
 800ac92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac96:	61fb      	str	r3, [r7, #28]
 800ac98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	69b9      	ldr	r1, [r7, #24]
 800ac9c:	69fa      	ldr	r2, [r7, #28]
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	617b      	str	r3, [r7, #20]
   return(result);
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e4      	bne.n	800ac74 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2202      	movs	r2, #2
 800acae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f88a 	bl	800add0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800acbc:	e063      	b.n	800ad86 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800acbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00e      	beq.n	800ace8 <HAL_UART_IRQHandler+0x5d8>
 800acca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d008      	beq.n	800ace8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800acde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 ff86 	bl	800bbf2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ace6:	e051      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ace8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d014      	beq.n	800ad1e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800acf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d105      	bne.n	800ad0c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d008      	beq.n	800ad1e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d03a      	beq.n	800ad8a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	4798      	blx	r3
    }
    return;
 800ad1c:	e035      	b.n	800ad8a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d009      	beq.n	800ad3e <HAL_UART_IRQHandler+0x62e>
 800ad2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 ff30 	bl	800bb9c <UART_EndTransmit_IT>
    return;
 800ad3c:	e026      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <HAL_UART_IRQHandler+0x64e>
 800ad4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 ff5f 	bl	800bc1a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad5c:	e016      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d010      	beq.n	800ad8c <HAL_UART_IRQHandler+0x67c>
 800ad6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	da0c      	bge.n	800ad8c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 ff47 	bl	800bc06 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad78:	e008      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
      return;
 800ad7a:	bf00      	nop
 800ad7c:	e006      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
    return;
 800ad7e:	bf00      	nop
 800ad80:	e004      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
      return;
 800ad82:	bf00      	nop
 800ad84:	e002      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
      return;
 800ad86:	bf00      	nop
 800ad88:	e000      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
    return;
 800ad8a:	bf00      	nop
  }
}
 800ad8c:	37e8      	adds	r7, #232	@ 0xe8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop

0800ad94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	460b      	mov	r3, r1
 800adda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ade8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adec:	b08c      	sub	sp, #48	@ 0x30
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	431a      	orrs	r2, r3
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	431a      	orrs	r2, r3
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	4bab      	ldr	r3, [pc, #684]	@ (800b0c4 <UART_SetConfig+0x2dc>)
 800ae18:	4013      	ands	r3, r2
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	6812      	ldr	r2, [r2, #0]
 800ae1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae20:	430b      	orrs	r3, r1
 800ae22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	68da      	ldr	r2, [r3, #12]
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4aa0      	ldr	r2, [pc, #640]	@ (800b0c8 <UART_SetConfig+0x2e0>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d004      	beq.n	800ae54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae50:	4313      	orrs	r3, r2
 800ae52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ae5e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	6812      	ldr	r2, [r2, #0]
 800ae66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae68:	430b      	orrs	r3, r1
 800ae6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae72:	f023 010f 	bic.w	r1, r3, #15
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a91      	ldr	r2, [pc, #580]	@ (800b0cc <UART_SetConfig+0x2e4>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d125      	bne.n	800aed8 <UART_SetConfig+0xf0>
 800ae8c:	4b90      	ldr	r3, [pc, #576]	@ (800b0d0 <UART_SetConfig+0x2e8>)
 800ae8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae92:	f003 0303 	and.w	r3, r3, #3
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d81a      	bhi.n	800aed0 <UART_SetConfig+0xe8>
 800ae9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aea0 <UART_SetConfig+0xb8>)
 800ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea0:	0800aeb1 	.word	0x0800aeb1
 800aea4:	0800aec1 	.word	0x0800aec1
 800aea8:	0800aeb9 	.word	0x0800aeb9
 800aeac:	0800aec9 	.word	0x0800aec9
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb6:	e0d6      	b.n	800b066 <UART_SetConfig+0x27e>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aebe:	e0d2      	b.n	800b066 <UART_SetConfig+0x27e>
 800aec0:	2304      	movs	r3, #4
 800aec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aec6:	e0ce      	b.n	800b066 <UART_SetConfig+0x27e>
 800aec8:	2308      	movs	r3, #8
 800aeca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aece:	e0ca      	b.n	800b066 <UART_SetConfig+0x27e>
 800aed0:	2310      	movs	r3, #16
 800aed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aed6:	e0c6      	b.n	800b066 <UART_SetConfig+0x27e>
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a7d      	ldr	r2, [pc, #500]	@ (800b0d4 <UART_SetConfig+0x2ec>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d138      	bne.n	800af54 <UART_SetConfig+0x16c>
 800aee2:	4b7b      	ldr	r3, [pc, #492]	@ (800b0d0 <UART_SetConfig+0x2e8>)
 800aee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee8:	f003 030c 	and.w	r3, r3, #12
 800aeec:	2b0c      	cmp	r3, #12
 800aeee:	d82d      	bhi.n	800af4c <UART_SetConfig+0x164>
 800aef0:	a201      	add	r2, pc, #4	@ (adr r2, 800aef8 <UART_SetConfig+0x110>)
 800aef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef6:	bf00      	nop
 800aef8:	0800af2d 	.word	0x0800af2d
 800aefc:	0800af4d 	.word	0x0800af4d
 800af00:	0800af4d 	.word	0x0800af4d
 800af04:	0800af4d 	.word	0x0800af4d
 800af08:	0800af3d 	.word	0x0800af3d
 800af0c:	0800af4d 	.word	0x0800af4d
 800af10:	0800af4d 	.word	0x0800af4d
 800af14:	0800af4d 	.word	0x0800af4d
 800af18:	0800af35 	.word	0x0800af35
 800af1c:	0800af4d 	.word	0x0800af4d
 800af20:	0800af4d 	.word	0x0800af4d
 800af24:	0800af4d 	.word	0x0800af4d
 800af28:	0800af45 	.word	0x0800af45
 800af2c:	2300      	movs	r3, #0
 800af2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af32:	e098      	b.n	800b066 <UART_SetConfig+0x27e>
 800af34:	2302      	movs	r3, #2
 800af36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af3a:	e094      	b.n	800b066 <UART_SetConfig+0x27e>
 800af3c:	2304      	movs	r3, #4
 800af3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af42:	e090      	b.n	800b066 <UART_SetConfig+0x27e>
 800af44:	2308      	movs	r3, #8
 800af46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af4a:	e08c      	b.n	800b066 <UART_SetConfig+0x27e>
 800af4c:	2310      	movs	r3, #16
 800af4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af52:	e088      	b.n	800b066 <UART_SetConfig+0x27e>
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a5f      	ldr	r2, [pc, #380]	@ (800b0d8 <UART_SetConfig+0x2f0>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d125      	bne.n	800afaa <UART_SetConfig+0x1c2>
 800af5e:	4b5c      	ldr	r3, [pc, #368]	@ (800b0d0 <UART_SetConfig+0x2e8>)
 800af60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800af68:	2b30      	cmp	r3, #48	@ 0x30
 800af6a:	d016      	beq.n	800af9a <UART_SetConfig+0x1b2>
 800af6c:	2b30      	cmp	r3, #48	@ 0x30
 800af6e:	d818      	bhi.n	800afa2 <UART_SetConfig+0x1ba>
 800af70:	2b20      	cmp	r3, #32
 800af72:	d00a      	beq.n	800af8a <UART_SetConfig+0x1a2>
 800af74:	2b20      	cmp	r3, #32
 800af76:	d814      	bhi.n	800afa2 <UART_SetConfig+0x1ba>
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <UART_SetConfig+0x19a>
 800af7c:	2b10      	cmp	r3, #16
 800af7e:	d008      	beq.n	800af92 <UART_SetConfig+0x1aa>
 800af80:	e00f      	b.n	800afa2 <UART_SetConfig+0x1ba>
 800af82:	2300      	movs	r3, #0
 800af84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af88:	e06d      	b.n	800b066 <UART_SetConfig+0x27e>
 800af8a:	2302      	movs	r3, #2
 800af8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af90:	e069      	b.n	800b066 <UART_SetConfig+0x27e>
 800af92:	2304      	movs	r3, #4
 800af94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af98:	e065      	b.n	800b066 <UART_SetConfig+0x27e>
 800af9a:	2308      	movs	r3, #8
 800af9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afa0:	e061      	b.n	800b066 <UART_SetConfig+0x27e>
 800afa2:	2310      	movs	r3, #16
 800afa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afa8:	e05d      	b.n	800b066 <UART_SetConfig+0x27e>
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a4b      	ldr	r2, [pc, #300]	@ (800b0dc <UART_SetConfig+0x2f4>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d125      	bne.n	800b000 <UART_SetConfig+0x218>
 800afb4:	4b46      	ldr	r3, [pc, #280]	@ (800b0d0 <UART_SetConfig+0x2e8>)
 800afb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800afbe:	2bc0      	cmp	r3, #192	@ 0xc0
 800afc0:	d016      	beq.n	800aff0 <UART_SetConfig+0x208>
 800afc2:	2bc0      	cmp	r3, #192	@ 0xc0
 800afc4:	d818      	bhi.n	800aff8 <UART_SetConfig+0x210>
 800afc6:	2b80      	cmp	r3, #128	@ 0x80
 800afc8:	d00a      	beq.n	800afe0 <UART_SetConfig+0x1f8>
 800afca:	2b80      	cmp	r3, #128	@ 0x80
 800afcc:	d814      	bhi.n	800aff8 <UART_SetConfig+0x210>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <UART_SetConfig+0x1f0>
 800afd2:	2b40      	cmp	r3, #64	@ 0x40
 800afd4:	d008      	beq.n	800afe8 <UART_SetConfig+0x200>
 800afd6:	e00f      	b.n	800aff8 <UART_SetConfig+0x210>
 800afd8:	2300      	movs	r3, #0
 800afda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afde:	e042      	b.n	800b066 <UART_SetConfig+0x27e>
 800afe0:	2302      	movs	r3, #2
 800afe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe6:	e03e      	b.n	800b066 <UART_SetConfig+0x27e>
 800afe8:	2304      	movs	r3, #4
 800afea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afee:	e03a      	b.n	800b066 <UART_SetConfig+0x27e>
 800aff0:	2308      	movs	r3, #8
 800aff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aff6:	e036      	b.n	800b066 <UART_SetConfig+0x27e>
 800aff8:	2310      	movs	r3, #16
 800affa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800affe:	e032      	b.n	800b066 <UART_SetConfig+0x27e>
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a30      	ldr	r2, [pc, #192]	@ (800b0c8 <UART_SetConfig+0x2e0>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d12a      	bne.n	800b060 <UART_SetConfig+0x278>
 800b00a:	4b31      	ldr	r3, [pc, #196]	@ (800b0d0 <UART_SetConfig+0x2e8>)
 800b00c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b010:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b014:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b018:	d01a      	beq.n	800b050 <UART_SetConfig+0x268>
 800b01a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b01e:	d81b      	bhi.n	800b058 <UART_SetConfig+0x270>
 800b020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b024:	d00c      	beq.n	800b040 <UART_SetConfig+0x258>
 800b026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b02a:	d815      	bhi.n	800b058 <UART_SetConfig+0x270>
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d003      	beq.n	800b038 <UART_SetConfig+0x250>
 800b030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b034:	d008      	beq.n	800b048 <UART_SetConfig+0x260>
 800b036:	e00f      	b.n	800b058 <UART_SetConfig+0x270>
 800b038:	2300      	movs	r3, #0
 800b03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b03e:	e012      	b.n	800b066 <UART_SetConfig+0x27e>
 800b040:	2302      	movs	r3, #2
 800b042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b046:	e00e      	b.n	800b066 <UART_SetConfig+0x27e>
 800b048:	2304      	movs	r3, #4
 800b04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b04e:	e00a      	b.n	800b066 <UART_SetConfig+0x27e>
 800b050:	2308      	movs	r3, #8
 800b052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b056:	e006      	b.n	800b066 <UART_SetConfig+0x27e>
 800b058:	2310      	movs	r3, #16
 800b05a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b05e:	e002      	b.n	800b066 <UART_SetConfig+0x27e>
 800b060:	2310      	movs	r3, #16
 800b062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a17      	ldr	r2, [pc, #92]	@ (800b0c8 <UART_SetConfig+0x2e0>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	f040 80a8 	bne.w	800b1c2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b072:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b076:	2b08      	cmp	r3, #8
 800b078:	d834      	bhi.n	800b0e4 <UART_SetConfig+0x2fc>
 800b07a:	a201      	add	r2, pc, #4	@ (adr r2, 800b080 <UART_SetConfig+0x298>)
 800b07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b080:	0800b0a5 	.word	0x0800b0a5
 800b084:	0800b0e5 	.word	0x0800b0e5
 800b088:	0800b0ad 	.word	0x0800b0ad
 800b08c:	0800b0e5 	.word	0x0800b0e5
 800b090:	0800b0b3 	.word	0x0800b0b3
 800b094:	0800b0e5 	.word	0x0800b0e5
 800b098:	0800b0e5 	.word	0x0800b0e5
 800b09c:	0800b0e5 	.word	0x0800b0e5
 800b0a0:	0800b0bb 	.word	0x0800b0bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0a4:	f7fc fe1a 	bl	8007cdc <HAL_RCC_GetPCLK1Freq>
 800b0a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0aa:	e021      	b.n	800b0f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e0 <UART_SetConfig+0x2f8>)
 800b0ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0b0:	e01e      	b.n	800b0f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0b2:	f7fc fda7 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 800b0b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0b8:	e01a      	b.n	800b0f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0c0:	e016      	b.n	800b0f0 <UART_SetConfig+0x308>
 800b0c2:	bf00      	nop
 800b0c4:	cfff69f3 	.word	0xcfff69f3
 800b0c8:	40008000 	.word	0x40008000
 800b0cc:	40013800 	.word	0x40013800
 800b0d0:	40021000 	.word	0x40021000
 800b0d4:	40004400 	.word	0x40004400
 800b0d8:	40004800 	.word	0x40004800
 800b0dc:	40004c00 	.word	0x40004c00
 800b0e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b0ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 812a 	beq.w	800b34c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fc:	4a9e      	ldr	r2, [pc, #632]	@ (800b378 <UART_SetConfig+0x590>)
 800b0fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b102:	461a      	mov	r2, r3
 800b104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b106:	fbb3 f3f2 	udiv	r3, r3, r2
 800b10a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	4613      	mov	r3, r2
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	4413      	add	r3, r2
 800b116:	69ba      	ldr	r2, [r7, #24]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d305      	bcc.n	800b128 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	429a      	cmp	r2, r3
 800b126:	d903      	bls.n	800b130 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b12e:	e10d      	b.n	800b34c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b132:	2200      	movs	r2, #0
 800b134:	60bb      	str	r3, [r7, #8]
 800b136:	60fa      	str	r2, [r7, #12]
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13c:	4a8e      	ldr	r2, [pc, #568]	@ (800b378 <UART_SetConfig+0x590>)
 800b13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b142:	b29b      	uxth	r3, r3
 800b144:	2200      	movs	r2, #0
 800b146:	603b      	str	r3, [r7, #0]
 800b148:	607a      	str	r2, [r7, #4]
 800b14a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b14e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b152:	f7f5 fdc1 	bl	8000cd8 <__aeabi_uldivmod>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4610      	mov	r0, r2
 800b15c:	4619      	mov	r1, r3
 800b15e:	f04f 0200 	mov.w	r2, #0
 800b162:	f04f 0300 	mov.w	r3, #0
 800b166:	020b      	lsls	r3, r1, #8
 800b168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b16c:	0202      	lsls	r2, r0, #8
 800b16e:	6979      	ldr	r1, [r7, #20]
 800b170:	6849      	ldr	r1, [r1, #4]
 800b172:	0849      	lsrs	r1, r1, #1
 800b174:	2000      	movs	r0, #0
 800b176:	460c      	mov	r4, r1
 800b178:	4605      	mov	r5, r0
 800b17a:	eb12 0804 	adds.w	r8, r2, r4
 800b17e:	eb43 0905 	adc.w	r9, r3, r5
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	469a      	mov	sl, r3
 800b18a:	4693      	mov	fp, r2
 800b18c:	4652      	mov	r2, sl
 800b18e:	465b      	mov	r3, fp
 800b190:	4640      	mov	r0, r8
 800b192:	4649      	mov	r1, r9
 800b194:	f7f5 fda0 	bl	8000cd8 <__aeabi_uldivmod>
 800b198:	4602      	mov	r2, r0
 800b19a:	460b      	mov	r3, r1
 800b19c:	4613      	mov	r3, r2
 800b19e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1a6:	d308      	bcc.n	800b1ba <UART_SetConfig+0x3d2>
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1ae:	d204      	bcs.n	800b1ba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	6a3a      	ldr	r2, [r7, #32]
 800b1b6:	60da      	str	r2, [r3, #12]
 800b1b8:	e0c8      	b.n	800b34c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1c0:	e0c4      	b.n	800b34c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1ca:	d167      	bne.n	800b29c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b1cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d828      	bhi.n	800b226 <UART_SetConfig+0x43e>
 800b1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1dc <UART_SetConfig+0x3f4>)
 800b1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1da:	bf00      	nop
 800b1dc:	0800b201 	.word	0x0800b201
 800b1e0:	0800b209 	.word	0x0800b209
 800b1e4:	0800b211 	.word	0x0800b211
 800b1e8:	0800b227 	.word	0x0800b227
 800b1ec:	0800b217 	.word	0x0800b217
 800b1f0:	0800b227 	.word	0x0800b227
 800b1f4:	0800b227 	.word	0x0800b227
 800b1f8:	0800b227 	.word	0x0800b227
 800b1fc:	0800b21f 	.word	0x0800b21f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b200:	f7fc fd6c 	bl	8007cdc <HAL_RCC_GetPCLK1Freq>
 800b204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b206:	e014      	b.n	800b232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b208:	f7fc fd7e 	bl	8007d08 <HAL_RCC_GetPCLK2Freq>
 800b20c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b20e:	e010      	b.n	800b232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b210:	4b5a      	ldr	r3, [pc, #360]	@ (800b37c <UART_SetConfig+0x594>)
 800b212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b214:	e00d      	b.n	800b232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b216:	f7fc fcf5 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 800b21a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b21c:	e009      	b.n	800b232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b224:	e005      	b.n	800b232 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 8089 	beq.w	800b34c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b23e:	4a4e      	ldr	r2, [pc, #312]	@ (800b378 <UART_SetConfig+0x590>)
 800b240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b244:	461a      	mov	r2, r3
 800b246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b248:	fbb3 f3f2 	udiv	r3, r3, r2
 800b24c:	005a      	lsls	r2, r3, #1
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	441a      	add	r2, r3
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	2b0f      	cmp	r3, #15
 800b264:	d916      	bls.n	800b294 <UART_SetConfig+0x4ac>
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b26c:	d212      	bcs.n	800b294 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	b29b      	uxth	r3, r3
 800b272:	f023 030f 	bic.w	r3, r3, #15
 800b276:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b278:	6a3b      	ldr	r3, [r7, #32]
 800b27a:	085b      	lsrs	r3, r3, #1
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	b29a      	uxth	r2, r3
 800b284:	8bfb      	ldrh	r3, [r7, #30]
 800b286:	4313      	orrs	r3, r2
 800b288:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	8bfa      	ldrh	r2, [r7, #30]
 800b290:	60da      	str	r2, [r3, #12]
 800b292:	e05b      	b.n	800b34c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b29a:	e057      	b.n	800b34c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b29c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2a0:	2b08      	cmp	r3, #8
 800b2a2:	d828      	bhi.n	800b2f6 <UART_SetConfig+0x50e>
 800b2a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2ac <UART_SetConfig+0x4c4>)
 800b2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2aa:	bf00      	nop
 800b2ac:	0800b2d1 	.word	0x0800b2d1
 800b2b0:	0800b2d9 	.word	0x0800b2d9
 800b2b4:	0800b2e1 	.word	0x0800b2e1
 800b2b8:	0800b2f7 	.word	0x0800b2f7
 800b2bc:	0800b2e7 	.word	0x0800b2e7
 800b2c0:	0800b2f7 	.word	0x0800b2f7
 800b2c4:	0800b2f7 	.word	0x0800b2f7
 800b2c8:	0800b2f7 	.word	0x0800b2f7
 800b2cc:	0800b2ef 	.word	0x0800b2ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2d0:	f7fc fd04 	bl	8007cdc <HAL_RCC_GetPCLK1Freq>
 800b2d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2d6:	e014      	b.n	800b302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2d8:	f7fc fd16 	bl	8007d08 <HAL_RCC_GetPCLK2Freq>
 800b2dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2de:	e010      	b.n	800b302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2e0:	4b26      	ldr	r3, [pc, #152]	@ (800b37c <UART_SetConfig+0x594>)
 800b2e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2e4:	e00d      	b.n	800b302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2e6:	f7fc fc8d 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 800b2ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2ec:	e009      	b.n	800b302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2f4:	e005      	b.n	800b302 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b300:	bf00      	nop
    }

    if (pclk != 0U)
 800b302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b304:	2b00      	cmp	r3, #0
 800b306:	d021      	beq.n	800b34c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30c:	4a1a      	ldr	r2, [pc, #104]	@ (800b378 <UART_SetConfig+0x590>)
 800b30e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b312:	461a      	mov	r2, r3
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	fbb3 f2f2 	udiv	r2, r3, r2
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	085b      	lsrs	r3, r3, #1
 800b320:	441a      	add	r2, r3
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	fbb2 f3f3 	udiv	r3, r2, r3
 800b32a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	2b0f      	cmp	r3, #15
 800b330:	d909      	bls.n	800b346 <UART_SetConfig+0x55e>
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b338:	d205      	bcs.n	800b346 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b33a:	6a3b      	ldr	r3, [r7, #32]
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	60da      	str	r2, [r3, #12]
 800b344:	e002      	b.n	800b34c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2201      	movs	r2, #1
 800b350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2201      	movs	r2, #1
 800b358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2200      	movs	r2, #0
 800b360:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2200      	movs	r2, #0
 800b366:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b368:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3730      	adds	r7, #48	@ 0x30
 800b370:	46bd      	mov	sp, r7
 800b372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b376:	bf00      	nop
 800b378:	08012950 	.word	0x08012950
 800b37c:	00f42400 	.word	0x00f42400

0800b380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38c:	f003 0308 	and.w	r3, r3, #8
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00a      	beq.n	800b3aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00a      	beq.n	800b3cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	430a      	orrs	r2, r1
 800b3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d0:	f003 0302 	and.w	r3, r3, #2
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00a      	beq.n	800b3ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f2:	f003 0304 	and.w	r3, r3, #4
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	430a      	orrs	r2, r1
 800b40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b414:	f003 0310 	and.w	r3, r3, #16
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00a      	beq.n	800b432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	430a      	orrs	r2, r1
 800b430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b436:	f003 0320 	and.w	r3, r3, #32
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00a      	beq.n	800b454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	430a      	orrs	r2, r1
 800b452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d01a      	beq.n	800b496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	430a      	orrs	r2, r1
 800b474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b47a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b47e:	d10a      	bne.n	800b496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	430a      	orrs	r2, r1
 800b494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b49a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00a      	beq.n	800b4b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	605a      	str	r2, [r3, #4]
  }
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b098      	sub	sp, #96	@ 0x60
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4d4:	f7f8 ff02 	bl	80042dc <HAL_GetTick>
 800b4d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0308 	and.w	r3, r3, #8
 800b4e4:	2b08      	cmp	r3, #8
 800b4e6:	d12f      	bne.n	800b548 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f88e 	bl	800b618 <UART_WaitOnFlagUntilTimeout>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d022      	beq.n	800b548 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50a:	e853 3f00 	ldrex	r3, [r3]
 800b50e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b516:	653b      	str	r3, [r7, #80]	@ 0x50
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	461a      	mov	r2, r3
 800b51e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b520:	647b      	str	r3, [r7, #68]	@ 0x44
 800b522:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b524:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b528:	e841 2300 	strex	r3, r2, [r1]
 800b52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1e6      	bne.n	800b502 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2220      	movs	r2, #32
 800b538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b544:	2303      	movs	r3, #3
 800b546:	e063      	b.n	800b610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0304 	and.w	r3, r3, #4
 800b552:	2b04      	cmp	r3, #4
 800b554:	d149      	bne.n	800b5ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b556:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b55e:	2200      	movs	r2, #0
 800b560:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f857 	bl	800b618 <UART_WaitOnFlagUntilTimeout>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d03c      	beq.n	800b5ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b578:	e853 3f00 	ldrex	r3, [r3]
 800b57c:	623b      	str	r3, [r7, #32]
   return(result);
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b58e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b590:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b596:	e841 2300 	strex	r3, r2, [r1]
 800b59a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1e6      	bne.n	800b570 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	e853 3f00 	ldrex	r3, [r3]
 800b5b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f023 0301 	bic.w	r3, r3, #1
 800b5b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3308      	adds	r3, #8
 800b5c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5c2:	61fa      	str	r2, [r7, #28]
 800b5c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c6:	69b9      	ldr	r1, [r7, #24]
 800b5c8:	69fa      	ldr	r2, [r7, #28]
 800b5ca:	e841 2300 	strex	r3, r2, [r1]
 800b5ce:	617b      	str	r3, [r7, #20]
   return(result);
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1e5      	bne.n	800b5a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e012      	b.n	800b610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3758      	adds	r7, #88	@ 0x58
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	603b      	str	r3, [r7, #0]
 800b624:	4613      	mov	r3, r2
 800b626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b628:	e04f      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b630:	d04b      	beq.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b632:	f7f8 fe53 	bl	80042dc <HAL_GetTick>
 800b636:	4602      	mov	r2, r0
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d302      	bcc.n	800b648 <UART_WaitOnFlagUntilTimeout+0x30>
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d101      	bne.n	800b64c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e04e      	b.n	800b6ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 0304 	and.w	r3, r3, #4
 800b656:	2b00      	cmp	r3, #0
 800b658:	d037      	beq.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b80      	cmp	r3, #128	@ 0x80
 800b65e:	d034      	beq.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2b40      	cmp	r3, #64	@ 0x40
 800b664:	d031      	beq.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	69db      	ldr	r3, [r3, #28]
 800b66c:	f003 0308 	and.w	r3, r3, #8
 800b670:	2b08      	cmp	r3, #8
 800b672:	d110      	bne.n	800b696 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2208      	movs	r2, #8
 800b67a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 f920 	bl	800b8c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2208      	movs	r2, #8
 800b686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e029      	b.n	800b6ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	69db      	ldr	r3, [r3, #28]
 800b69c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6a4:	d111      	bne.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f000 f906 	bl	800b8c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2220      	movs	r2, #32
 800b6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e00f      	b.n	800b6ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	69da      	ldr	r2, [r3, #28]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	bf0c      	ite	eq
 800b6da:	2301      	moveq	r3, #1
 800b6dc:	2300      	movne	r3, #0
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d0a0      	beq.n	800b62a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b096      	sub	sp, #88	@ 0x58
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	88fa      	ldrh	r2, [r7, #6]
 800b70c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2222      	movs	r2, #34	@ 0x22
 800b71c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b726:	2b00      	cmp	r3, #0
 800b728:	d02d      	beq.n	800b786 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b730:	4a40      	ldr	r2, [pc, #256]	@ (800b834 <UART_Start_Receive_DMA+0x140>)
 800b732:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b73a:	4a3f      	ldr	r2, [pc, #252]	@ (800b838 <UART_Start_Receive_DMA+0x144>)
 800b73c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b744:	4a3d      	ldr	r2, [pc, #244]	@ (800b83c <UART_Start_Receive_DMA+0x148>)
 800b746:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b74e:	2200      	movs	r2, #0
 800b750:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3324      	adds	r3, #36	@ 0x24
 800b75e:	4619      	mov	r1, r3
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b764:	461a      	mov	r2, r3
 800b766:	88fb      	ldrh	r3, [r7, #6]
 800b768:	f7fa f9dc 	bl	8005b24 <HAL_DMA_Start_IT>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d009      	beq.n	800b786 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2210      	movs	r2, #16
 800b776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	e051      	b.n	800b82a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d018      	beq.n	800b7c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b7b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7b4:	e841 2300 	strex	r3, r2, [r1]
 800b7b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b7ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e6      	bne.n	800b78e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ca:	e853 3f00 	ldrex	r3, [r3]
 800b7ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d2:	f043 0301 	orr.w	r3, r3, #1
 800b7d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3308      	adds	r3, #8
 800b7de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b7e0:	637a      	str	r2, [r7, #52]	@ 0x34
 800b7e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b7e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7e8:	e841 2300 	strex	r3, r2, [r1]
 800b7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e5      	bne.n	800b7c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	e853 3f00 	ldrex	r3, [r3]
 800b802:	613b      	str	r3, [r7, #16]
   return(result);
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b80a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3308      	adds	r3, #8
 800b812:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b814:	623a      	str	r2, [r7, #32]
 800b816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b818:	69f9      	ldr	r1, [r7, #28]
 800b81a:	6a3a      	ldr	r2, [r7, #32]
 800b81c:	e841 2300 	strex	r3, r2, [r1]
 800b820:	61bb      	str	r3, [r7, #24]
   return(result);
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e5      	bne.n	800b7f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3758      	adds	r7, #88	@ 0x58
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	0800b98f 	.word	0x0800b98f
 800b838:	0800babb 	.word	0x0800babb
 800b83c:	0800baf9 	.word	0x0800baf9

0800b840 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b840:	b480      	push	{r7}
 800b842:	b08f      	sub	sp, #60	@ 0x3c
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84e:	6a3b      	ldr	r3, [r7, #32]
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	61fb      	str	r3, [r7, #28]
   return(result);
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b85c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b868:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b86c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b86e:	e841 2300 	strex	r3, r2, [r1]
 800b872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1e6      	bne.n	800b848 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	60bb      	str	r3, [r7, #8]
   return(result);
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b890:	633b      	str	r3, [r7, #48]	@ 0x30
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3308      	adds	r3, #8
 800b898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b89a:	61ba      	str	r2, [r7, #24]
 800b89c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	6979      	ldr	r1, [r7, #20]
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e5      	bne.n	800b87a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b8b6:	bf00      	nop
 800b8b8:	373c      	adds	r7, #60	@ 0x3c
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b095      	sub	sp, #84	@ 0x54
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d2:	e853 3f00 	ldrex	r3, [r3]
 800b8d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8f0:	e841 2300 	strex	r3, r2, [r1]
 800b8f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e6      	bne.n	800b8ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3308      	adds	r3, #8
 800b902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	e853 3f00 	ldrex	r3, [r3]
 800b90a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b912:	f023 0301 	bic.w	r3, r3, #1
 800b916:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3308      	adds	r3, #8
 800b91e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b928:	e841 2300 	strex	r3, r2, [r1]
 800b92c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1e3      	bne.n	800b8fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d118      	bne.n	800b96e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	e853 3f00 	ldrex	r3, [r3]
 800b948:	60bb      	str	r3, [r7, #8]
   return(result);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f023 0310 	bic.w	r3, r3, #16
 800b950:	647b      	str	r3, [r7, #68]	@ 0x44
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b95a:	61bb      	str	r3, [r7, #24]
 800b95c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95e:	6979      	ldr	r1, [r7, #20]
 800b960:	69ba      	ldr	r2, [r7, #24]
 800b962:	e841 2300 	strex	r3, r2, [r1]
 800b966:	613b      	str	r3, [r7, #16]
   return(result);
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1e6      	bne.n	800b93c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2220      	movs	r2, #32
 800b972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b982:	bf00      	nop
 800b984:	3754      	adds	r7, #84	@ 0x54
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b09c      	sub	sp, #112	@ 0x70
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b99a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0320 	and.w	r3, r3, #32
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d171      	bne.n	800ba8e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b9aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ba:	e853 3f00 	ldrex	r3, [r3]
 800b9be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b9c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b9d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b9d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9d8:	e841 2300 	strex	r3, r2, [r1]
 800b9dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b9de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1e6      	bne.n	800b9b2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ee:	e853 3f00 	ldrex	r3, [r3]
 800b9f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9f6:	f023 0301 	bic.w	r3, r3, #1
 800b9fa:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3308      	adds	r3, #8
 800ba02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba04:	647a      	str	r2, [r7, #68]	@ 0x44
 800ba06:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba0c:	e841 2300 	strex	r3, r2, [r1]
 800ba10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1e5      	bne.n	800b9e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba22:	e853 3f00 	ldrex	r3, [r3]
 800ba26:	623b      	str	r3, [r7, #32]
   return(result);
 800ba28:	6a3b      	ldr	r3, [r7, #32]
 800ba2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba2e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3308      	adds	r3, #8
 800ba36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba38:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba40:	e841 2300 	strex	r3, r2, [r1]
 800ba44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1e5      	bne.n	800ba18 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba4e:	2220      	movs	r2, #32
 800ba50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d118      	bne.n	800ba8e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	e853 3f00 	ldrex	r3, [r3]
 800ba68:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f023 0310 	bic.w	r3, r3, #16
 800ba70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba7a:	61fb      	str	r3, [r7, #28]
 800ba7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7e:	69b9      	ldr	r1, [r7, #24]
 800ba80:	69fa      	ldr	r2, [r7, #28]
 800ba82:	e841 2300 	strex	r3, r2, [r1]
 800ba86:	617b      	str	r3, [r7, #20]
   return(result);
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1e6      	bne.n	800ba5c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba90:	2200      	movs	r2, #0
 800ba92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d107      	bne.n	800baac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800baa2:	4619      	mov	r1, r3
 800baa4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800baa6:	f7ff f993 	bl	800add0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800baaa:	e002      	b.n	800bab2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800baac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800baae:	f7f8 fa4d 	bl	8003f4c <HAL_UART_RxCpltCallback>
}
 800bab2:	bf00      	nop
 800bab4:	3770      	adds	r7, #112	@ 0x70
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bac6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2201      	movs	r2, #1
 800bacc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d109      	bne.n	800baea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800badc:	085b      	lsrs	r3, r3, #1
 800bade:	b29b      	uxth	r3, r3
 800bae0:	4619      	mov	r1, r3
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff f974 	bl	800add0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bae8:	e002      	b.n	800baf0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff f95c 	bl	800ada8 <HAL_UART_RxHalfCpltCallback>
}
 800baf0:	bf00      	nop
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb04:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb0c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb14:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb20:	2b80      	cmp	r3, #128	@ 0x80
 800bb22:	d109      	bne.n	800bb38 <UART_DMAError+0x40>
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	2b21      	cmp	r3, #33	@ 0x21
 800bb28:	d106      	bne.n	800bb38 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bb32:	6978      	ldr	r0, [r7, #20]
 800bb34:	f7ff fe84 	bl	800b840 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb42:	2b40      	cmp	r3, #64	@ 0x40
 800bb44:	d109      	bne.n	800bb5a <UART_DMAError+0x62>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2b22      	cmp	r3, #34	@ 0x22
 800bb4a:	d106      	bne.n	800bb5a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bb54:	6978      	ldr	r0, [r7, #20]
 800bb56:	f7ff feb4 	bl	800b8c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb60:	f043 0210 	orr.w	r2, r3, #16
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb6a:	6978      	ldr	r0, [r7, #20]
 800bb6c:	f7ff f926 	bl	800adbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb70:	bf00      	nop
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7ff f914 	bl	800adbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb94:	bf00      	nop
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b088      	sub	sp, #32
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	e853 3f00 	ldrex	r3, [r3]
 800bbb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbb8:	61fb      	str	r3, [r7, #28]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	61bb      	str	r3, [r7, #24]
 800bbc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc6:	6979      	ldr	r1, [r7, #20]
 800bbc8:	69ba      	ldr	r2, [r7, #24]
 800bbca:	e841 2300 	strex	r3, r2, [r1]
 800bbce:	613b      	str	r3, [r7, #16]
   return(result);
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1e6      	bne.n	800bba4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2220      	movs	r2, #32
 800bbda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff f8d5 	bl	800ad94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbea:	bf00      	nop
 800bbec:	3720      	adds	r7, #32
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b083      	sub	sp, #12
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bbfa:	bf00      	nop
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc0e:	bf00      	nop
 800bc10:	370c      	adds	r7, #12
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b083      	sub	sp, #12
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc22:	bf00      	nop
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b085      	sub	sp, #20
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d101      	bne.n	800bc44 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc40:	2302      	movs	r3, #2
 800bc42:	e027      	b.n	800bc94 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2224      	movs	r2, #36	@ 0x24
 800bc50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f022 0201 	bic.w	r2, r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bc72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2220      	movs	r2, #32
 800bc86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d101      	bne.n	800bcb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	e02d      	b.n	800bd14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2224      	movs	r2, #36	@ 0x24
 800bcc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f022 0201 	bic.w	r2, r2, #1
 800bcde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f84f 	bl	800bd98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2220      	movs	r2, #32
 800bd06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d101      	bne.n	800bd34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd30:	2302      	movs	r3, #2
 800bd32:	e02d      	b.n	800bd90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2224      	movs	r2, #36	@ 0x24
 800bd40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f022 0201 	bic.w	r2, r2, #1
 800bd5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	683a      	ldr	r2, [r7, #0]
 800bd6c:	430a      	orrs	r2, r1
 800bd6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f811 	bl	800bd98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2220      	movs	r2, #32
 800bd82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d108      	bne.n	800bdba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bdb8:	e031      	b.n	800be1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdba:	2308      	movs	r3, #8
 800bdbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdbe:	2308      	movs	r3, #8
 800bdc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	0e5b      	lsrs	r3, r3, #25
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	f003 0307 	and.w	r3, r3, #7
 800bdd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	0f5b      	lsrs	r3, r3, #29
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	f003 0307 	and.w	r3, r3, #7
 800bde0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
 800bde4:	7b3a      	ldrb	r2, [r7, #12]
 800bde6:	4911      	ldr	r1, [pc, #68]	@ (800be2c <UARTEx_SetNbDataToProcess+0x94>)
 800bde8:	5c8a      	ldrb	r2, [r1, r2]
 800bdea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bdee:	7b3a      	ldrb	r2, [r7, #12]
 800bdf0:	490f      	ldr	r1, [pc, #60]	@ (800be30 <UARTEx_SetNbDataToProcess+0x98>)
 800bdf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be00:	7bfb      	ldrb	r3, [r7, #15]
 800be02:	7b7a      	ldrb	r2, [r7, #13]
 800be04:	4909      	ldr	r1, [pc, #36]	@ (800be2c <UARTEx_SetNbDataToProcess+0x94>)
 800be06:	5c8a      	ldrb	r2, [r1, r2]
 800be08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be0c:	7b7a      	ldrb	r2, [r7, #13]
 800be0e:	4908      	ldr	r1, [pc, #32]	@ (800be30 <UARTEx_SetNbDataToProcess+0x98>)
 800be10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be12:	fb93 f3f2 	sdiv	r3, r3, r2
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be1e:	bf00      	nop
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	08012968 	.word	0x08012968
 800be30:	08012970 	.word	0x08012970

0800be34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800be3c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800be40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800be48:	b29a      	uxth	r2, r3
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	43db      	mvns	r3, r3
 800be50:	b29b      	uxth	r3, r3
 800be52:	4013      	ands	r3, r2
 800be54:	b29a      	uxth	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b085      	sub	sp, #20
 800be6e:	af00      	add	r7, sp, #0
 800be70:	60f8      	str	r0, [r7, #12]
 800be72:	1d3b      	adds	r3, r7, #4
 800be74:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
	...

0800bea8 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800beac:	4907      	ldr	r1, [pc, #28]	@ (800becc <MX_FATFS_Init+0x24>)
 800beae:	4808      	ldr	r0, [pc, #32]	@ (800bed0 <MX_FATFS_Init+0x28>)
 800beb0:	f001 ff7a 	bl	800dda8 <FATFS_LinkDriver>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800beba:	f04f 33ff 	mov.w	r3, #4294967295
 800bebe:	e003      	b.n	800bec8 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800bec0:	4b04      	ldr	r3, [pc, #16]	@ (800bed4 <MX_FATFS_Init+0x2c>)
 800bec2:	2201      	movs	r2, #1
 800bec4:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800bec6:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800bec8:	4618      	mov	r0, r3
 800beca:	bd80      	pop	{r7, pc}
 800becc:	200013f0 	.word	0x200013f0
 800bed0:	20000018 	.word	0x20000018
 800bed4:	200013f4 	.word	0x200013f4

0800bed8 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bed8:	b480      	push	{r7}
 800beda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bedc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bede:	4618      	mov	r0, r3
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7f5 ff7b 	bl	8001df0 <SD_disk_initialize>
 800befa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800bf0e:	79fb      	ldrb	r3, [r7, #7]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7f6 f857 	bl	8001fc4 <SD_disk_status>
 800bf16:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60b9      	str	r1, [r7, #8]
 800bf28:	607a      	str	r2, [r7, #4]
 800bf2a:	603b      	str	r3, [r7, #0]
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800bf30:	7bf8      	ldrb	r0, [r7, #15]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	f7f6 f85a 	bl	8001ff0 <SD_disk_read>
 800bf3c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b084      	sub	sp, #16
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	603b      	str	r3, [r7, #0]
 800bf52:	4603      	mov	r3, r0
 800bf54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800bf56:	7bf8      	ldrb	r0, [r7, #15]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	68b9      	ldr	r1, [r7, #8]
 800bf5e:	f7f6 f8b1 	bl	80020c4 <SD_disk_write>
 800bf62:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	603a      	str	r2, [r7, #0]
 800bf76:	71fb      	strb	r3, [r7, #7]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800bf7c:	79b9      	ldrb	r1, [r7, #6]
 800bf7e:	79fb      	ldrb	r3, [r7, #7]
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7f6 f922 	bl	80021cc <SD_disk_ioctl>
 800bf88:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
	...

0800bf94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	4a08      	ldr	r2, [pc, #32]	@ (800bfc4 <disk_status+0x30>)
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	79fa      	ldrb	r2, [r7, #7]
 800bfac:	4905      	ldr	r1, [pc, #20]	@ (800bfc4 <disk_status+0x30>)
 800bfae:	440a      	add	r2, r1
 800bfb0:	7a12      	ldrb	r2, [r2, #8]
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	4798      	blx	r3
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	20001420 	.word	0x20001420

0800bfc8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	4603      	mov	r3, r0
 800bfd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bfd6:	79fb      	ldrb	r3, [r7, #7]
 800bfd8:	4a0d      	ldr	r2, [pc, #52]	@ (800c010 <disk_initialize+0x48>)
 800bfda:	5cd3      	ldrb	r3, [r2, r3]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d111      	bne.n	800c004 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bfe0:	79fb      	ldrb	r3, [r7, #7]
 800bfe2:	4a0b      	ldr	r2, [pc, #44]	@ (800c010 <disk_initialize+0x48>)
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bfe8:	79fb      	ldrb	r3, [r7, #7]
 800bfea:	4a09      	ldr	r2, [pc, #36]	@ (800c010 <disk_initialize+0x48>)
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	79fa      	ldrb	r2, [r7, #7]
 800bff6:	4906      	ldr	r1, [pc, #24]	@ (800c010 <disk_initialize+0x48>)
 800bff8:	440a      	add	r2, r1
 800bffa:	7a12      	ldrb	r2, [r2, #8]
 800bffc:	4610      	mov	r0, r2
 800bffe:	4798      	blx	r3
 800c000:	4603      	mov	r3, r0
 800c002:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c004:	7bfb      	ldrb	r3, [r7, #15]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	20001420 	.word	0x20001420

0800c014 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c014:	b590      	push	{r4, r7, lr}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	607a      	str	r2, [r7, #4]
 800c01e:	603b      	str	r3, [r7, #0]
 800c020:	4603      	mov	r3, r0
 800c022:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	4a0a      	ldr	r2, [pc, #40]	@ (800c050 <disk_read+0x3c>)
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	689c      	ldr	r4, [r3, #8]
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	4a07      	ldr	r2, [pc, #28]	@ (800c050 <disk_read+0x3c>)
 800c034:	4413      	add	r3, r2
 800c036:	7a18      	ldrb	r0, [r3, #8]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	47a0      	blx	r4
 800c040:	4603      	mov	r3, r0
 800c042:	75fb      	strb	r3, [r7, #23]
  return res;
 800c044:	7dfb      	ldrb	r3, [r7, #23]
}
 800c046:	4618      	mov	r0, r3
 800c048:	371c      	adds	r7, #28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd90      	pop	{r4, r7, pc}
 800c04e:	bf00      	nop
 800c050:	20001420 	.word	0x20001420

0800c054 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c054:	b590      	push	{r4, r7, lr}
 800c056:	b087      	sub	sp, #28
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60b9      	str	r1, [r7, #8]
 800c05c:	607a      	str	r2, [r7, #4]
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	4603      	mov	r3, r0
 800c062:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c064:	7bfb      	ldrb	r3, [r7, #15]
 800c066:	4a0a      	ldr	r2, [pc, #40]	@ (800c090 <disk_write+0x3c>)
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4413      	add	r3, r2
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	68dc      	ldr	r4, [r3, #12]
 800c070:	7bfb      	ldrb	r3, [r7, #15]
 800c072:	4a07      	ldr	r2, [pc, #28]	@ (800c090 <disk_write+0x3c>)
 800c074:	4413      	add	r3, r2
 800c076:	7a18      	ldrb	r0, [r3, #8]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	68b9      	ldr	r1, [r7, #8]
 800c07e:	47a0      	blx	r4
 800c080:	4603      	mov	r3, r0
 800c082:	75fb      	strb	r3, [r7, #23]
  return res;
 800c084:	7dfb      	ldrb	r3, [r7, #23]
}
 800c086:	4618      	mov	r0, r3
 800c088:	371c      	adds	r7, #28
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd90      	pop	{r4, r7, pc}
 800c08e:	bf00      	nop
 800c090:	20001420 	.word	0x20001420

0800c094 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c0a4:	89fb      	ldrh	r3, [r7, #14]
 800c0a6:	021b      	lsls	r3, r3, #8
 800c0a8:	b21a      	sxth	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	b21b      	sxth	r3, r3
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	b21b      	sxth	r3, r3
 800c0b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c0b6:	89fb      	ldrh	r3, [r7, #14]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3303      	adds	r3, #3
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	021b      	lsls	r3, r3, #8
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	3202      	adds	r2, #2
 800c0dc:	7812      	ldrb	r2, [r2, #0]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	021b      	lsls	r3, r3, #8
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	3201      	adds	r2, #1
 800c0ea:	7812      	ldrb	r2, [r2, #0]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	021b      	lsls	r3, r3, #8
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	7812      	ldrb	r2, [r2, #0]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	60fb      	str	r3, [r7, #12]
	return rv;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c10a:	b480      	push	{r7}
 800c10c:	b083      	sub	sp, #12
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	460b      	mov	r3, r1
 800c114:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	887a      	ldrh	r2, [r7, #2]
 800c11e:	b2d2      	uxtb	r2, r2
 800c120:	701a      	strb	r2, [r3, #0]
 800c122:	887b      	ldrh	r3, [r7, #2]
 800c124:	0a1b      	lsrs	r3, r3, #8
 800c126:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	607a      	str	r2, [r7, #4]
 800c12e:	887a      	ldrh	r2, [r7, #2]
 800c130:	b2d2      	uxtb	r2, r2
 800c132:	701a      	strb	r2, [r3, #0]
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	b2d2      	uxtb	r2, r2
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	0a1b      	lsrs	r3, r3, #8
 800c15a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	607a      	str	r2, [r7, #4]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	b2d2      	uxtb	r2, r2
 800c166:	701a      	strb	r2, [r3, #0]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	0a1b      	lsrs	r3, r3, #8
 800c16c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	683a      	ldr	r2, [r7, #0]
 800c176:	b2d2      	uxtb	r2, r2
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	0a1b      	lsrs	r3, r3, #8
 800c17e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	607a      	str	r2, [r7, #4]
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	b2d2      	uxtb	r2, r2
 800c18a:	701a      	strb	r2, [r3, #0]
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c198:	b480      	push	{r7}
 800c19a:	b087      	sub	sp, #28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00d      	beq.n	800c1ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	1c53      	adds	r3, r2, #1
 800c1b6:	613b      	str	r3, [r7, #16]
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	1c59      	adds	r1, r3, #1
 800c1bc:	6179      	str	r1, [r7, #20]
 800c1be:	7812      	ldrb	r2, [r2, #0]
 800c1c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	607b      	str	r3, [r7, #4]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d1f1      	bne.n	800c1b2 <mem_cpy+0x1a>
	}
}
 800c1ce:	bf00      	nop
 800c1d0:	371c      	adds	r7, #28
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c1da:	b480      	push	{r7}
 800c1dc:	b087      	sub	sp, #28
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	1c5a      	adds	r2, r3, #1
 800c1ee:	617a      	str	r2, [r7, #20]
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	b2d2      	uxtb	r2, r2
 800c1f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	607b      	str	r3, [r7, #4]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1f3      	bne.n	800c1ea <mem_set+0x10>
}
 800c202:	bf00      	nop
 800c204:	bf00      	nop
 800c206:	371c      	adds	r7, #28
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c210:	b480      	push	{r7}
 800c212:	b089      	sub	sp, #36	@ 0x24
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	61fb      	str	r3, [r7, #28]
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	61fa      	str	r2, [r7, #28]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	4619      	mov	r1, r3
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	1c5a      	adds	r2, r3, #1
 800c236:	61ba      	str	r2, [r7, #24]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	1acb      	subs	r3, r1, r3
 800c23c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3b01      	subs	r3, #1
 800c242:	607b      	str	r3, [r7, #4]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d002      	beq.n	800c250 <mem_cmp+0x40>
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d0eb      	beq.n	800c228 <mem_cmp+0x18>

	return r;
 800c250:	697b      	ldr	r3, [r7, #20]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3724      	adds	r7, #36	@ 0x24
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c25e:	b480      	push	{r7}
 800c260:	b083      	sub	sp, #12
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c268:	e002      	b.n	800c270 <chk_chr+0x12>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3301      	adds	r3, #1
 800c26e:	607b      	str	r3, [r7, #4]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d005      	beq.n	800c284 <chk_chr+0x26>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	461a      	mov	r2, r3
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	4293      	cmp	r3, r2
 800c282:	d1f2      	bne.n	800c26a <chk_chr+0xc>
	return *str;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	781b      	ldrb	r3, [r3, #0]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60bb      	str	r3, [r7, #8]
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	60fb      	str	r3, [r7, #12]
 800c2a6:	e029      	b.n	800c2fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c2a8:	4a27      	ldr	r2, [pc, #156]	@ (800c348 <chk_lock+0xb4>)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	011b      	lsls	r3, r3, #4
 800c2ae:	4413      	add	r3, r2
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d01d      	beq.n	800c2f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c2b6:	4a24      	ldr	r2, [pc, #144]	@ (800c348 <chk_lock+0xb4>)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	4413      	add	r3, r2
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d116      	bne.n	800c2f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c2c8:	4a1f      	ldr	r2, [pc, #124]	@ (800c348 <chk_lock+0xb4>)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	011b      	lsls	r3, r3, #4
 800c2ce:	4413      	add	r3, r2
 800c2d0:	3304      	adds	r3, #4
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d10c      	bne.n	800c2f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c2dc:	4a1a      	ldr	r2, [pc, #104]	@ (800c348 <chk_lock+0xb4>)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	011b      	lsls	r3, r3, #4
 800c2e2:	4413      	add	r3, r2
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d102      	bne.n	800c2f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c2f0:	e007      	b.n	800c302 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d9d2      	bls.n	800c2a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2b02      	cmp	r3, #2
 800c306:	d109      	bne.n	800c31c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d102      	bne.n	800c314 <chk_lock+0x80>
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	2b02      	cmp	r3, #2
 800c312:	d101      	bne.n	800c318 <chk_lock+0x84>
 800c314:	2300      	movs	r3, #0
 800c316:	e010      	b.n	800c33a <chk_lock+0xa6>
 800c318:	2312      	movs	r3, #18
 800c31a:	e00e      	b.n	800c33a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d108      	bne.n	800c334 <chk_lock+0xa0>
 800c322:	4a09      	ldr	r2, [pc, #36]	@ (800c348 <chk_lock+0xb4>)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	011b      	lsls	r3, r3, #4
 800c328:	4413      	add	r3, r2
 800c32a:	330c      	adds	r3, #12
 800c32c:	881b      	ldrh	r3, [r3, #0]
 800c32e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c332:	d101      	bne.n	800c338 <chk_lock+0xa4>
 800c334:	2310      	movs	r3, #16
 800c336:	e000      	b.n	800c33a <chk_lock+0xa6>
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	20001400 	.word	0x20001400

0800c34c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c352:	2300      	movs	r3, #0
 800c354:	607b      	str	r3, [r7, #4]
 800c356:	e002      	b.n	800c35e <enq_lock+0x12>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	3301      	adds	r3, #1
 800c35c:	607b      	str	r3, [r7, #4]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d806      	bhi.n	800c372 <enq_lock+0x26>
 800c364:	4a09      	ldr	r2, [pc, #36]	@ (800c38c <enq_lock+0x40>)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	011b      	lsls	r3, r3, #4
 800c36a:	4413      	add	r3, r2
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1f2      	bne.n	800c358 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b02      	cmp	r3, #2
 800c376:	bf14      	ite	ne
 800c378:	2301      	movne	r3, #1
 800c37a:	2300      	moveq	r3, #0
 800c37c:	b2db      	uxtb	r3, r3
}
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	20001400 	.word	0x20001400

0800c390 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c39a:	2300      	movs	r3, #0
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	e01f      	b.n	800c3e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c3a0:	4a41      	ldr	r2, [pc, #260]	@ (800c4a8 <inc_lock+0x118>)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	011b      	lsls	r3, r3, #4
 800c3a6:	4413      	add	r3, r2
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d113      	bne.n	800c3da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c3b2:	4a3d      	ldr	r2, [pc, #244]	@ (800c4a8 <inc_lock+0x118>)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	011b      	lsls	r3, r3, #4
 800c3b8:	4413      	add	r3, r2
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d109      	bne.n	800c3da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c3c6:	4a38      	ldr	r2, [pc, #224]	@ (800c4a8 <inc_lock+0x118>)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	011b      	lsls	r3, r3, #4
 800c3cc:	4413      	add	r3, r2
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d006      	beq.n	800c3e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d9dc      	bls.n	800c3a0 <inc_lock+0x10>
 800c3e6:	e000      	b.n	800c3ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c3e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d132      	bne.n	800c456 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	e002      	b.n	800c3fc <inc_lock+0x6c>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d806      	bhi.n	800c410 <inc_lock+0x80>
 800c402:	4a29      	ldr	r2, [pc, #164]	@ (800c4a8 <inc_lock+0x118>)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	011b      	lsls	r3, r3, #4
 800c408:	4413      	add	r3, r2
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1f2      	bne.n	800c3f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2b02      	cmp	r3, #2
 800c414:	d101      	bne.n	800c41a <inc_lock+0x8a>
 800c416:	2300      	movs	r3, #0
 800c418:	e040      	b.n	800c49c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	4922      	ldr	r1, [pc, #136]	@ (800c4a8 <inc_lock+0x118>)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	011b      	lsls	r3, r3, #4
 800c424:	440b      	add	r3, r1
 800c426:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	689a      	ldr	r2, [r3, #8]
 800c42c:	491e      	ldr	r1, [pc, #120]	@ (800c4a8 <inc_lock+0x118>)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	011b      	lsls	r3, r3, #4
 800c432:	440b      	add	r3, r1
 800c434:	3304      	adds	r3, #4
 800c436:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	695a      	ldr	r2, [r3, #20]
 800c43c:	491a      	ldr	r1, [pc, #104]	@ (800c4a8 <inc_lock+0x118>)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	011b      	lsls	r3, r3, #4
 800c442:	440b      	add	r3, r1
 800c444:	3308      	adds	r3, #8
 800c446:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c448:	4a17      	ldr	r2, [pc, #92]	@ (800c4a8 <inc_lock+0x118>)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	011b      	lsls	r3, r3, #4
 800c44e:	4413      	add	r3, r2
 800c450:	330c      	adds	r3, #12
 800c452:	2200      	movs	r2, #0
 800c454:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d009      	beq.n	800c470 <inc_lock+0xe0>
 800c45c:	4a12      	ldr	r2, [pc, #72]	@ (800c4a8 <inc_lock+0x118>)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	4413      	add	r3, r2
 800c464:	330c      	adds	r3, #12
 800c466:	881b      	ldrh	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <inc_lock+0xe0>
 800c46c:	2300      	movs	r3, #0
 800c46e:	e015      	b.n	800c49c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d108      	bne.n	800c488 <inc_lock+0xf8>
 800c476:	4a0c      	ldr	r2, [pc, #48]	@ (800c4a8 <inc_lock+0x118>)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	011b      	lsls	r3, r3, #4
 800c47c:	4413      	add	r3, r2
 800c47e:	330c      	adds	r3, #12
 800c480:	881b      	ldrh	r3, [r3, #0]
 800c482:	3301      	adds	r3, #1
 800c484:	b29a      	uxth	r2, r3
 800c486:	e001      	b.n	800c48c <inc_lock+0xfc>
 800c488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c48c:	4906      	ldr	r1, [pc, #24]	@ (800c4a8 <inc_lock+0x118>)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	011b      	lsls	r3, r3, #4
 800c492:	440b      	add	r3, r1
 800c494:	330c      	adds	r3, #12
 800c496:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	3301      	adds	r3, #1
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr
 800c4a8:	20001400 	.word	0x20001400

0800c4ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	e010      	b.n	800c4dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c4ba:	4a0d      	ldr	r2, [pc, #52]	@ (800c4f0 <clear_lock+0x44>)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	011b      	lsls	r3, r3, #4
 800c4c0:	4413      	add	r3, r2
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d105      	bne.n	800c4d6 <clear_lock+0x2a>
 800c4ca:	4a09      	ldr	r2, [pc, #36]	@ (800c4f0 <clear_lock+0x44>)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	011b      	lsls	r3, r3, #4
 800c4d0:	4413      	add	r3, r2
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	60fb      	str	r3, [r7, #12]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d9eb      	bls.n	800c4ba <clear_lock+0xe>
	}
}
 800c4e2:	bf00      	nop
 800c4e4:	bf00      	nop
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	20001400 	.word	0x20001400

0800c4f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	78db      	ldrb	r3, [r3, #3]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d034      	beq.n	800c572 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c50c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	7858      	ldrb	r0, [r3, #1]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c518:	2301      	movs	r3, #1
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	f7ff fd9a 	bl	800c054 <disk_write>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c526:	2301      	movs	r3, #1
 800c528:	73fb      	strb	r3, [r7, #15]
 800c52a:	e022      	b.n	800c572 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	1ad2      	subs	r2, r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d217      	bcs.n	800c572 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	789b      	ldrb	r3, [r3, #2]
 800c546:	613b      	str	r3, [r7, #16]
 800c548:	e010      	b.n	800c56c <sync_window+0x78>
					wsect += fs->fsize;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	4413      	add	r3, r2
 800c552:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	7858      	ldrb	r0, [r3, #1]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c55e:	2301      	movs	r3, #1
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	f7ff fd77 	bl	800c054 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	3b01      	subs	r3, #1
 800c56a:	613b      	str	r3, [r7, #16]
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d8eb      	bhi.n	800c54a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	429a      	cmp	r2, r3
 800c592:	d01b      	beq.n	800c5cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff ffad 	bl	800c4f4 <sync_window>
 800c59a:	4603      	mov	r3, r0
 800c59c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c59e:	7bfb      	ldrb	r3, [r7, #15]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d113      	bne.n	800c5cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	7858      	ldrb	r0, [r3, #1]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	f7ff fd2f 	bl	800c014 <disk_read>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d004      	beq.n	800c5c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	683a      	ldr	r2, [r7, #0]
 800c5ca:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b083      	sub	sp, #12
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	3b02      	subs	r3, #2
 800c5e4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	695b      	ldr	r3, [r3, #20]
 800c5ea:	3b02      	subs	r3, #2
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d301      	bcc.n	800c5f6 <clust2sect+0x20>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	e008      	b.n	800c608 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	895b      	ldrh	r3, [r3, #10]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	fb03 f202 	mul.w	r2, r3, r2
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c606:	4413      	add	r3, r2
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d904      	bls.n	800c634 <get_fat+0x20>
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	429a      	cmp	r2, r3
 800c632:	d302      	bcc.n	800c63a <get_fat+0x26>
		val = 1;	/* Internal error */
 800c634:	2301      	movs	r3, #1
 800c636:	617b      	str	r3, [r7, #20]
 800c638:	e08e      	b.n	800c758 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c63a:	f04f 33ff 	mov.w	r3, #4294967295
 800c63e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	2b03      	cmp	r3, #3
 800c646:	d061      	beq.n	800c70c <get_fat+0xf8>
 800c648:	2b03      	cmp	r3, #3
 800c64a:	dc7b      	bgt.n	800c744 <get_fat+0x130>
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d002      	beq.n	800c656 <get_fat+0x42>
 800c650:	2b02      	cmp	r3, #2
 800c652:	d041      	beq.n	800c6d8 <get_fat+0xc4>
 800c654:	e076      	b.n	800c744 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	60fb      	str	r3, [r7, #12]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	085b      	lsrs	r3, r3, #1
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	4413      	add	r3, r2
 800c662:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	6a1a      	ldr	r2, [r3, #32]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	0a5b      	lsrs	r3, r3, #9
 800c66c:	4413      	add	r3, r2
 800c66e:	4619      	mov	r1, r3
 800c670:	6938      	ldr	r0, [r7, #16]
 800c672:	f7ff ff83 	bl	800c57c <move_window>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d166      	bne.n	800c74a <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	1c5a      	adds	r2, r3, #1
 800c680:	60fa      	str	r2, [r7, #12]
 800c682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	4413      	add	r3, r2
 800c68a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c68e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	6a1a      	ldr	r2, [r3, #32]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	0a5b      	lsrs	r3, r3, #9
 800c698:	4413      	add	r3, r2
 800c69a:	4619      	mov	r1, r3
 800c69c:	6938      	ldr	r0, [r7, #16]
 800c69e:	f7ff ff6d 	bl	800c57c <move_window>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d152      	bne.n	800c74e <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ae:	693a      	ldr	r2, [r7, #16]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6b6:	021b      	lsls	r3, r3, #8
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <get_fat+0xba>
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	091b      	lsrs	r3, r3, #4
 800c6cc:	e002      	b.n	800c6d4 <get_fat+0xc0>
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6d4:	617b      	str	r3, [r7, #20]
			break;
 800c6d6:	e03f      	b.n	800c758 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	6a1a      	ldr	r2, [r3, #32]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	0a1b      	lsrs	r3, r3, #8
 800c6e0:	4413      	add	r3, r2
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6938      	ldr	r0, [r7, #16]
 800c6e6:	f7ff ff49 	bl	800c57c <move_window>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d130      	bne.n	800c752 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c6fe:	4413      	add	r3, r2
 800c700:	4618      	mov	r0, r3
 800c702:	f7ff fcc7 	bl	800c094 <ld_word>
 800c706:	4603      	mov	r3, r0
 800c708:	617b      	str	r3, [r7, #20]
			break;
 800c70a:	e025      	b.n	800c758 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	6a1a      	ldr	r2, [r3, #32]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	09db      	lsrs	r3, r3, #7
 800c714:	4413      	add	r3, r2
 800c716:	4619      	mov	r1, r3
 800c718:	6938      	ldr	r0, [r7, #16]
 800c71a:	f7ff ff2f 	bl	800c57c <move_window>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d118      	bne.n	800c756 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c732:	4413      	add	r3, r2
 800c734:	4618      	mov	r0, r3
 800c736:	f7ff fcc5 	bl	800c0c4 <ld_dword>
 800c73a:	4603      	mov	r3, r0
 800c73c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c740:	617b      	str	r3, [r7, #20]
			break;
 800c742:	e009      	b.n	800c758 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c744:	2301      	movs	r3, #1
 800c746:	617b      	str	r3, [r7, #20]
 800c748:	e006      	b.n	800c758 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c74a:	bf00      	nop
 800c74c:	e004      	b.n	800c758 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c74e:	bf00      	nop
 800c750:	e002      	b.n	800c758 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c752:	bf00      	nop
 800c754:	e000      	b.n	800c758 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c756:	bf00      	nop
		}
	}

	return val;
 800c758:	697b      	ldr	r3, [r7, #20]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c762:	b590      	push	{r4, r7, lr}
 800c764:	b089      	sub	sp, #36	@ 0x24
 800c766:	af00      	add	r7, sp, #0
 800c768:	60f8      	str	r0, [r7, #12]
 800c76a:	60b9      	str	r1, [r7, #8]
 800c76c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c76e:	2302      	movs	r3, #2
 800c770:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2b01      	cmp	r3, #1
 800c776:	f240 80d9 	bls.w	800c92c <put_fat+0x1ca>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	429a      	cmp	r2, r3
 800c782:	f080 80d3 	bcs.w	800c92c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	f000 8096 	beq.w	800c8bc <put_fat+0x15a>
 800c790:	2b03      	cmp	r3, #3
 800c792:	f300 80cb 	bgt.w	800c92c <put_fat+0x1ca>
 800c796:	2b01      	cmp	r3, #1
 800c798:	d002      	beq.n	800c7a0 <put_fat+0x3e>
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d06e      	beq.n	800c87c <put_fat+0x11a>
 800c79e:	e0c5      	b.n	800c92c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	61bb      	str	r3, [r7, #24]
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	085b      	lsrs	r3, r3, #1
 800c7a8:	69ba      	ldr	r2, [r7, #24]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6a1a      	ldr	r2, [r3, #32]
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	0a5b      	lsrs	r3, r3, #9
 800c7b6:	4413      	add	r3, r2
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f7ff fede 	bl	800c57c <move_window>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7c4:	7ffb      	ldrb	r3, [r7, #31]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f040 80a9 	bne.w	800c91e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	1c59      	adds	r1, r3, #1
 800c7d6:	61b9      	str	r1, [r7, #24]
 800c7d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7dc:	4413      	add	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00d      	beq.n	800c806 <put_fat+0xa4>
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	b25b      	sxtb	r3, r3
 800c7f0:	f003 030f 	and.w	r3, r3, #15
 800c7f4:	b25a      	sxtb	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	011b      	lsls	r3, r3, #4
 800c7fc:	b25b      	sxtb	r3, r3
 800c7fe:	4313      	orrs	r3, r2
 800c800:	b25b      	sxtb	r3, r3
 800c802:	b2db      	uxtb	r3, r3
 800c804:	e001      	b.n	800c80a <put_fat+0xa8>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2201      	movs	r2, #1
 800c812:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6a1a      	ldr	r2, [r3, #32]
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	0a5b      	lsrs	r3, r3, #9
 800c81c:	4413      	add	r3, r2
 800c81e:	4619      	mov	r1, r3
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f7ff feab 	bl	800c57c <move_window>
 800c826:	4603      	mov	r3, r0
 800c828:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c82a:	7ffb      	ldrb	r3, [r7, #31]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d178      	bne.n	800c922 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83c:	4413      	add	r3, r2
 800c83e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	f003 0301 	and.w	r3, r3, #1
 800c846:	2b00      	cmp	r3, #0
 800c848:	d003      	beq.n	800c852 <put_fat+0xf0>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	091b      	lsrs	r3, r3, #4
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	e00e      	b.n	800c870 <put_fat+0x10e>
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	b25b      	sxtb	r3, r3
 800c858:	f023 030f 	bic.w	r3, r3, #15
 800c85c:	b25a      	sxtb	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	0a1b      	lsrs	r3, r3, #8
 800c862:	b25b      	sxtb	r3, r3
 800c864:	f003 030f 	and.w	r3, r3, #15
 800c868:	b25b      	sxtb	r3, r3
 800c86a:	4313      	orrs	r3, r2
 800c86c:	b25b      	sxtb	r3, r3
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	697a      	ldr	r2, [r7, #20]
 800c872:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2201      	movs	r2, #1
 800c878:	70da      	strb	r2, [r3, #3]
			break;
 800c87a:	e057      	b.n	800c92c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6a1a      	ldr	r2, [r3, #32]
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	0a1b      	lsrs	r3, r3, #8
 800c884:	4413      	add	r3, r2
 800c886:	4619      	mov	r1, r3
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f7ff fe77 	bl	800c57c <move_window>
 800c88e:	4603      	mov	r3, r0
 800c890:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c892:	7ffb      	ldrb	r3, [r7, #31]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d146      	bne.n	800c926 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c8a6:	4413      	add	r3, r2
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	b292      	uxth	r2, r2
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7ff fc2b 	bl	800c10a <st_word>
			fs->wflag = 1;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	70da      	strb	r2, [r3, #3]
			break;
 800c8ba:	e037      	b.n	800c92c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6a1a      	ldr	r2, [r3, #32]
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	09db      	lsrs	r3, r3, #7
 800c8c4:	4413      	add	r3, r2
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f7ff fe57 	bl	800c57c <move_window>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8d2:	7ffb      	ldrb	r3, [r7, #31]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d128      	bne.n	800c92a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c8ec:	4413      	add	r3, r2
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7ff fbe8 	bl	800c0c4 <ld_dword>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c8fa:	4323      	orrs	r3, r4
 800c8fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c90c:	4413      	add	r3, r2
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	4618      	mov	r0, r3
 800c912:	f7ff fc15 	bl	800c140 <st_dword>
			fs->wflag = 1;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2201      	movs	r2, #1
 800c91a:	70da      	strb	r2, [r3, #3]
			break;
 800c91c:	e006      	b.n	800c92c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c91e:	bf00      	nop
 800c920:	e004      	b.n	800c92c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c922:	bf00      	nop
 800c924:	e002      	b.n	800c92c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c926:	bf00      	nop
 800c928:	e000      	b.n	800c92c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c92a:	bf00      	nop
		}
	}
	return res;
 800c92c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3724      	adds	r7, #36	@ 0x24
 800c932:	46bd      	mov	sp, r7
 800c934:	bd90      	pop	{r4, r7, pc}

0800c936 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b088      	sub	sp, #32
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d904      	bls.n	800c95c <remove_chain+0x26>
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	429a      	cmp	r2, r3
 800c95a:	d301      	bcc.n	800c960 <remove_chain+0x2a>
 800c95c:	2302      	movs	r3, #2
 800c95e:	e04b      	b.n	800c9f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00c      	beq.n	800c980 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c966:	f04f 32ff 	mov.w	r2, #4294967295
 800c96a:	6879      	ldr	r1, [r7, #4]
 800c96c:	69b8      	ldr	r0, [r7, #24]
 800c96e:	f7ff fef8 	bl	800c762 <put_fat>
 800c972:	4603      	mov	r3, r0
 800c974:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c976:	7ffb      	ldrb	r3, [r7, #31]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <remove_chain+0x4a>
 800c97c:	7ffb      	ldrb	r3, [r7, #31]
 800c97e:	e03b      	b.n	800c9f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c980:	68b9      	ldr	r1, [r7, #8]
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f7ff fe46 	bl	800c614 <get_fat>
 800c988:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d031      	beq.n	800c9f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d101      	bne.n	800c99a <remove_chain+0x64>
 800c996:	2302      	movs	r3, #2
 800c998:	e02e      	b.n	800c9f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a0:	d101      	bne.n	800c9a6 <remove_chain+0x70>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e028      	b.n	800c9f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	69b8      	ldr	r0, [r7, #24]
 800c9ac:	f7ff fed9 	bl	800c762 <put_fat>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c9b4:	7ffb      	ldrb	r3, [r7, #31]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <remove_chain+0x88>
 800c9ba:	7ffb      	ldrb	r3, [r7, #31]
 800c9bc:	e01c      	b.n	800c9f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	691a      	ldr	r2, [r3, #16]
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	3b02      	subs	r3, #2
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d20b      	bcs.n	800c9e4 <remove_chain+0xae>
			fs->free_clst++;
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	1c5a      	adds	r2, r3, #1
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	791b      	ldrb	r3, [r3, #4]
 800c9da:	f043 0301 	orr.w	r3, r3, #1
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	695b      	ldr	r3, [r3, #20]
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d3c6      	bcc.n	800c980 <remove_chain+0x4a>
 800c9f2:	e000      	b.n	800c9f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c9f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3720      	adds	r7, #32
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b088      	sub	sp, #32
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10d      	bne.n	800ca32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d004      	beq.n	800ca2c <create_chain+0x2c>
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	695b      	ldr	r3, [r3, #20]
 800ca26:	69ba      	ldr	r2, [r7, #24]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d31b      	bcc.n	800ca64 <create_chain+0x64>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	61bb      	str	r3, [r7, #24]
 800ca30:	e018      	b.n	800ca64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7ff fded 	bl	800c614 <get_fat>
 800ca3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d801      	bhi.n	800ca46 <create_chain+0x46>
 800ca42:	2301      	movs	r3, #1
 800ca44:	e070      	b.n	800cb28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4c:	d101      	bne.n	800ca52 <create_chain+0x52>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	e06a      	b.n	800cb28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d201      	bcs.n	800ca60 <create_chain+0x60>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	e063      	b.n	800cb28 <create_chain+0x128>
		scl = clst;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	695b      	ldr	r3, [r3, #20]
 800ca72:	69fa      	ldr	r2, [r7, #28]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d307      	bcc.n	800ca88 <create_chain+0x88>
				ncl = 2;
 800ca78:	2302      	movs	r3, #2
 800ca7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ca7c:	69fa      	ldr	r2, [r7, #28]
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d901      	bls.n	800ca88 <create_chain+0x88>
 800ca84:	2300      	movs	r3, #0
 800ca86:	e04f      	b.n	800cb28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ca88:	69f9      	ldr	r1, [r7, #28]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7ff fdc2 	bl	800c614 <get_fat>
 800ca90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00e      	beq.n	800cab6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d003      	beq.n	800caa6 <create_chain+0xa6>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa4:	d101      	bne.n	800caaa <create_chain+0xaa>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	e03e      	b.n	800cb28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800caaa:	69fa      	ldr	r2, [r7, #28]
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d1da      	bne.n	800ca68 <create_chain+0x68>
 800cab2:	2300      	movs	r3, #0
 800cab4:	e038      	b.n	800cb28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cab6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cab8:	f04f 32ff 	mov.w	r2, #4294967295
 800cabc:	69f9      	ldr	r1, [r7, #28]
 800cabe:	6938      	ldr	r0, [r7, #16]
 800cac0:	f7ff fe4f 	bl	800c762 <put_fat>
 800cac4:	4603      	mov	r3, r0
 800cac6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d109      	bne.n	800cae2 <create_chain+0xe2>
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d006      	beq.n	800cae2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cad4:	69fa      	ldr	r2, [r7, #28]
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6938      	ldr	r0, [r7, #16]
 800cada:	f7ff fe42 	bl	800c762 <put_fat>
 800cade:	4603      	mov	r3, r0
 800cae0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d116      	bne.n	800cb16 <create_chain+0x116>
		fs->last_clst = ncl;
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	69fa      	ldr	r2, [r7, #28]
 800caec:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	691a      	ldr	r2, [r3, #16]
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	695b      	ldr	r3, [r3, #20]
 800caf6:	3b02      	subs	r3, #2
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d804      	bhi.n	800cb06 <create_chain+0x106>
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	1e5a      	subs	r2, r3, #1
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	791b      	ldrb	r3, [r3, #4]
 800cb0a:	f043 0301 	orr.w	r3, r3, #1
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	711a      	strb	r2, [r3, #4]
 800cb14:	e007      	b.n	800cb26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cb16:	7dfb      	ldrb	r3, [r7, #23]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d102      	bne.n	800cb22 <create_chain+0x122>
 800cb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb20:	e000      	b.n	800cb24 <create_chain+0x124>
 800cb22:	2301      	movs	r3, #1
 800cb24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cb26:	69fb      	ldr	r3, [r7, #28]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3720      	adds	r7, #32
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b086      	sub	sp, #24
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cb46:	d204      	bcs.n	800cb52 <dir_sdi+0x22>
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	f003 031f 	and.w	r3, r3, #31
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d001      	beq.n	800cb56 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cb52:	2302      	movs	r3, #2
 800cb54:	e063      	b.n	800cc1e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	683a      	ldr	r2, [r7, #0]
 800cb5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d106      	bne.n	800cb76 <dir_sdi+0x46>
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d902      	bls.n	800cb76 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10c      	bne.n	800cb96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	095b      	lsrs	r3, r3, #5
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	8912      	ldrh	r2, [r2, #8]
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d301      	bcc.n	800cb8c <dir_sdi+0x5c>
 800cb88:	2302      	movs	r3, #2
 800cb8a:	e048      	b.n	800cc1e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	61da      	str	r2, [r3, #28]
 800cb94:	e029      	b.n	800cbea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	895b      	ldrh	r3, [r3, #10]
 800cb9a:	025b      	lsls	r3, r3, #9
 800cb9c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb9e:	e019      	b.n	800cbd4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6979      	ldr	r1, [r7, #20]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7ff fd35 	bl	800c614 <get_fat>
 800cbaa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb2:	d101      	bne.n	800cbb8 <dir_sdi+0x88>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e032      	b.n	800cc1e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d904      	bls.n	800cbc8 <dir_sdi+0x98>
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d301      	bcc.n	800cbcc <dir_sdi+0x9c>
 800cbc8:	2302      	movs	r3, #2
 800cbca:	e028      	b.n	800cc1e <dir_sdi+0xee>
			ofs -= csz;
 800cbcc:	683a      	ldr	r2, [r7, #0]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d2e1      	bcs.n	800cba0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cbdc:	6979      	ldr	r1, [r7, #20]
 800cbde:	6938      	ldr	r0, [r7, #16]
 800cbe0:	f7ff fcf9 	bl	800c5d6 <clust2sect>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	697a      	ldr	r2, [r7, #20]
 800cbee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	69db      	ldr	r3, [r3, #28]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <dir_sdi+0xcc>
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	e010      	b.n	800cc1e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	69da      	ldr	r2, [r3, #28]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	0a5b      	lsrs	r3, r3, #9
 800cc04:	441a      	add	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc16:	441a      	add	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3718      	adds	r7, #24
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b086      	sub	sp, #24
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	695b      	ldr	r3, [r3, #20]
 800cc3a:	3320      	adds	r3, #32
 800cc3c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	69db      	ldr	r3, [r3, #28]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d003      	beq.n	800cc4e <dir_next+0x28>
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc4c:	d301      	bcc.n	800cc52 <dir_next+0x2c>
 800cc4e:	2304      	movs	r3, #4
 800cc50:	e0aa      	b.n	800cda8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f040 8098 	bne.w	800cd8e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	69db      	ldr	r3, [r3, #28]
 800cc62:	1c5a      	adds	r2, r3, #1
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10b      	bne.n	800cc88 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	095b      	lsrs	r3, r3, #5
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	8912      	ldrh	r2, [r2, #8]
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	f0c0 8088 	bcc.w	800cd8e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	61da      	str	r2, [r3, #28]
 800cc84:	2304      	movs	r3, #4
 800cc86:	e08f      	b.n	800cda8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	0a5b      	lsrs	r3, r3, #9
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	8952      	ldrh	r2, [r2, #10]
 800cc90:	3a01      	subs	r2, #1
 800cc92:	4013      	ands	r3, r2
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d17a      	bne.n	800cd8e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4610      	mov	r0, r2
 800cca2:	f7ff fcb7 	bl	800c614 <get_fat>
 800cca6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d801      	bhi.n	800ccb2 <dir_next+0x8c>
 800ccae:	2302      	movs	r3, #2
 800ccb0:	e07a      	b.n	800cda8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb8:	d101      	bne.n	800ccbe <dir_next+0x98>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e074      	b.n	800cda8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	695b      	ldr	r3, [r3, #20]
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d358      	bcc.n	800cd7a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d104      	bne.n	800ccd8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	61da      	str	r2, [r3, #28]
 800ccd4:	2304      	movs	r3, #4
 800ccd6:	e067      	b.n	800cda8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	699b      	ldr	r3, [r3, #24]
 800ccde:	4619      	mov	r1, r3
 800cce0:	4610      	mov	r0, r2
 800cce2:	f7ff fe8d 	bl	800ca00 <create_chain>
 800cce6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <dir_next+0xcc>
 800ccee:	2307      	movs	r3, #7
 800ccf0:	e05a      	b.n	800cda8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d101      	bne.n	800ccfc <dir_next+0xd6>
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	e055      	b.n	800cda8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd02:	d101      	bne.n	800cd08 <dir_next+0xe2>
 800cd04:	2301      	movs	r3, #1
 800cd06:	e04f      	b.n	800cda8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7ff fbf3 	bl	800c4f4 <sync_window>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <dir_next+0xf2>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e047      	b.n	800cda8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	3330      	adds	r3, #48	@ 0x30
 800cd1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd20:	2100      	movs	r1, #0
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7ff fa59 	bl	800c1da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cd28:	2300      	movs	r3, #0
 800cd2a:	613b      	str	r3, [r7, #16]
 800cd2c:	6979      	ldr	r1, [r7, #20]
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f7ff fc51 	bl	800c5d6 <clust2sect>
 800cd34:	4602      	mov	r2, r0
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cd3a:	e012      	b.n	800cd62 <dir_next+0x13c>
						fs->wflag = 1;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f7ff fbd6 	bl	800c4f4 <sync_window>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d001      	beq.n	800cd52 <dir_next+0x12c>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e02a      	b.n	800cda8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	3301      	adds	r3, #1
 800cd56:	613b      	str	r3, [r7, #16]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	895b      	ldrh	r3, [r3, #10]
 800cd66:	461a      	mov	r2, r3
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d3e6      	bcc.n	800cd3c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	1ad2      	subs	r2, r2, r3
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	697a      	ldr	r2, [r7, #20]
 800cd7e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cd80:	6979      	ldr	r1, [r7, #20]
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7ff fc27 	bl	800c5d6 <clust2sect>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda0:	441a      	add	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3718      	adds	r7, #24
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff feb4 	bl	800cb30 <dir_sdi>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d12b      	bne.n	800ce2a <dir_alloc+0x7a>
		n = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	69db      	ldr	r3, [r3, #28]
 800cdda:	4619      	mov	r1, r3
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f7ff fbcd 	bl	800c57c <move_window>
 800cde2:	4603      	mov	r3, r0
 800cde4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d11d      	bne.n	800ce28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6a1b      	ldr	r3, [r3, #32]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	2be5      	cmp	r3, #229	@ 0xe5
 800cdf4:	d004      	beq.n	800ce00 <dir_alloc+0x50>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d107      	bne.n	800ce10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	3301      	adds	r3, #1
 800ce04:	613b      	str	r3, [r7, #16]
 800ce06:	693a      	ldr	r2, [r7, #16]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d102      	bne.n	800ce14 <dir_alloc+0x64>
 800ce0e:	e00c      	b.n	800ce2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ce10:	2300      	movs	r3, #0
 800ce12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ce14:	2101      	movs	r1, #1
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff ff05 	bl	800cc26 <dir_next>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d0d7      	beq.n	800cdd6 <dir_alloc+0x26>
 800ce26:	e000      	b.n	800ce2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ce28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ce2a:	7dfb      	ldrb	r3, [r7, #23]
 800ce2c:	2b04      	cmp	r3, #4
 800ce2e:	d101      	bne.n	800ce34 <dir_alloc+0x84>
 800ce30:	2307      	movs	r3, #7
 800ce32:	75fb      	strb	r3, [r7, #23]
	return res;
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3718      	adds	r7, #24
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	331a      	adds	r3, #26
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7ff f921 	bl	800c094 <ld_word>
 800ce52:	4603      	mov	r3, r0
 800ce54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	2b03      	cmp	r3, #3
 800ce5c:	d109      	bne.n	800ce72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	3314      	adds	r3, #20
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff f916 	bl	800c094 <ld_word>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	041b      	lsls	r3, r3, #16
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ce72:	68fb      	ldr	r3, [r7, #12]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	331a      	adds	r3, #26
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	b292      	uxth	r2, r2
 800ce90:	4611      	mov	r1, r2
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7ff f939 	bl	800c10a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b03      	cmp	r3, #3
 800ce9e:	d109      	bne.n	800ceb4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	f103 0214 	add.w	r2, r3, #20
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	0c1b      	lsrs	r3, r3, #16
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	4619      	mov	r1, r3
 800ceae:	4610      	mov	r0, r2
 800ceb0:	f7ff f92b 	bl	800c10a <st_word>
	}
}
 800ceb4:	bf00      	nop
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ceca:	2100      	movs	r1, #0
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff fe2f 	bl	800cb30 <dir_sdi>
 800ced2:	4603      	mov	r3, r0
 800ced4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d001      	beq.n	800cee0 <dir_find+0x24>
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
 800cede:	e03e      	b.n	800cf5e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	69db      	ldr	r3, [r3, #28]
 800cee4:	4619      	mov	r1, r3
 800cee6:	6938      	ldr	r0, [r7, #16]
 800cee8:	f7ff fb48 	bl	800c57c <move_window>
 800ceec:	4603      	mov	r3, r0
 800ceee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cef0:	7dfb      	ldrb	r3, [r7, #23]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d12f      	bne.n	800cf56 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d102      	bne.n	800cf0a <dir_find+0x4e>
 800cf04:	2304      	movs	r3, #4
 800cf06:	75fb      	strb	r3, [r7, #23]
 800cf08:	e028      	b.n	800cf5c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	330b      	adds	r3, #11
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a1b      	ldr	r3, [r3, #32]
 800cf20:	330b      	adds	r3, #11
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	f003 0308 	and.w	r3, r3, #8
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10a      	bne.n	800cf42 <dir_find+0x86>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a18      	ldr	r0, [r3, #32]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	3324      	adds	r3, #36	@ 0x24
 800cf34:	220b      	movs	r2, #11
 800cf36:	4619      	mov	r1, r3
 800cf38:	f7ff f96a 	bl	800c210 <mem_cmp>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00b      	beq.n	800cf5a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cf42:	2100      	movs	r1, #0
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7ff fe6e 	bl	800cc26 <dir_next>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cf4e:	7dfb      	ldrb	r3, [r7, #23]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0c5      	beq.n	800cee0 <dir_find+0x24>
 800cf54:	e002      	b.n	800cf5c <dir_find+0xa0>
		if (res != FR_OK) break;
 800cf56:	bf00      	nop
 800cf58:	e000      	b.n	800cf5c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cf5a:	bf00      	nop

	return res;
 800cf5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b084      	sub	sp, #16
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cf74:	2101      	movs	r1, #1
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff ff1a 	bl	800cdb0 <dir_alloc>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d11c      	bne.n	800cfc0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	69db      	ldr	r3, [r3, #28]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	68b8      	ldr	r0, [r7, #8]
 800cf8e:	f7ff faf5 	bl	800c57c <move_window>
 800cf92:	4603      	mov	r3, r0
 800cf94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d111      	bne.n	800cfc0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a1b      	ldr	r3, [r3, #32]
 800cfa0:	2220      	movs	r2, #32
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff f918 	bl	800c1da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6a18      	ldr	r0, [r3, #32]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3324      	adds	r3, #36	@ 0x24
 800cfb2:	220b      	movs	r2, #11
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f7ff f8ef 	bl	800c198 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b088      	sub	sp, #32
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	3324      	adds	r3, #36	@ 0x24
 800cfe0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cfe2:	220b      	movs	r2, #11
 800cfe4:	2120      	movs	r1, #32
 800cfe6:	68b8      	ldr	r0, [r7, #8]
 800cfe8:	f7ff f8f7 	bl	800c1da <mem_set>
	si = i = 0; ni = 8;
 800cfec:	2300      	movs	r3, #0
 800cfee:	613b      	str	r3, [r7, #16]
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	61fb      	str	r3, [r7, #28]
 800cff4:	2308      	movs	r3, #8
 800cff6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	1c5a      	adds	r2, r3, #1
 800cffc:	61fa      	str	r2, [r7, #28]
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	4413      	add	r3, r2
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d006:	7efb      	ldrb	r3, [r7, #27]
 800d008:	2b20      	cmp	r3, #32
 800d00a:	d94e      	bls.n	800d0aa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d00c:	7efb      	ldrb	r3, [r7, #27]
 800d00e:	2b2f      	cmp	r3, #47	@ 0x2f
 800d010:	d006      	beq.n	800d020 <create_name+0x54>
 800d012:	7efb      	ldrb	r3, [r7, #27]
 800d014:	2b5c      	cmp	r3, #92	@ 0x5c
 800d016:	d110      	bne.n	800d03a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d018:	e002      	b.n	800d020 <create_name+0x54>
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	3301      	adds	r3, #1
 800d01e:	61fb      	str	r3, [r7, #28]
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	4413      	add	r3, r2
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	2b2f      	cmp	r3, #47	@ 0x2f
 800d02a:	d0f6      	beq.n	800d01a <create_name+0x4e>
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	4413      	add	r3, r2
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	2b5c      	cmp	r3, #92	@ 0x5c
 800d036:	d0f0      	beq.n	800d01a <create_name+0x4e>
			break;
 800d038:	e038      	b.n	800d0ac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d03a:	7efb      	ldrb	r3, [r7, #27]
 800d03c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d03e:	d003      	beq.n	800d048 <create_name+0x7c>
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	429a      	cmp	r2, r3
 800d046:	d30c      	bcc.n	800d062 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	2b0b      	cmp	r3, #11
 800d04c:	d002      	beq.n	800d054 <create_name+0x88>
 800d04e:	7efb      	ldrb	r3, [r7, #27]
 800d050:	2b2e      	cmp	r3, #46	@ 0x2e
 800d052:	d001      	beq.n	800d058 <create_name+0x8c>
 800d054:	2306      	movs	r3, #6
 800d056:	e044      	b.n	800d0e2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d058:	2308      	movs	r3, #8
 800d05a:	613b      	str	r3, [r7, #16]
 800d05c:	230b      	movs	r3, #11
 800d05e:	617b      	str	r3, [r7, #20]
			continue;
 800d060:	e022      	b.n	800d0a8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d062:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d066:	2b00      	cmp	r3, #0
 800d068:	da04      	bge.n	800d074 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d06a:	7efb      	ldrb	r3, [r7, #27]
 800d06c:	3b80      	subs	r3, #128	@ 0x80
 800d06e:	4a1f      	ldr	r2, [pc, #124]	@ (800d0ec <create_name+0x120>)
 800d070:	5cd3      	ldrb	r3, [r2, r3]
 800d072:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d074:	7efb      	ldrb	r3, [r7, #27]
 800d076:	4619      	mov	r1, r3
 800d078:	481d      	ldr	r0, [pc, #116]	@ (800d0f0 <create_name+0x124>)
 800d07a:	f7ff f8f0 	bl	800c25e <chk_chr>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <create_name+0xbc>
 800d084:	2306      	movs	r3, #6
 800d086:	e02c      	b.n	800d0e2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d088:	7efb      	ldrb	r3, [r7, #27]
 800d08a:	2b60      	cmp	r3, #96	@ 0x60
 800d08c:	d905      	bls.n	800d09a <create_name+0xce>
 800d08e:	7efb      	ldrb	r3, [r7, #27]
 800d090:	2b7a      	cmp	r3, #122	@ 0x7a
 800d092:	d802      	bhi.n	800d09a <create_name+0xce>
 800d094:	7efb      	ldrb	r3, [r7, #27]
 800d096:	3b20      	subs	r3, #32
 800d098:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	613a      	str	r2, [r7, #16]
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	7efa      	ldrb	r2, [r7, #27]
 800d0a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d0a8:	e7a6      	b.n	800cff8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d0aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	441a      	add	r2, r3
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <create_name+0xf4>
 800d0bc:	2306      	movs	r3, #6
 800d0be:	e010      	b.n	800d0e2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	2be5      	cmp	r3, #229	@ 0xe5
 800d0c6:	d102      	bne.n	800d0ce <create_name+0x102>
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	2205      	movs	r2, #5
 800d0cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d0ce:	7efb      	ldrb	r3, [r7, #27]
 800d0d0:	2b20      	cmp	r3, #32
 800d0d2:	d801      	bhi.n	800d0d8 <create_name+0x10c>
 800d0d4:	2204      	movs	r2, #4
 800d0d6:	e000      	b.n	800d0da <create_name+0x10e>
 800d0d8:	2200      	movs	r2, #0
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	330b      	adds	r3, #11
 800d0de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d0e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3720      	adds	r7, #32
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	08012978 	.word	0x08012978
 800d0f0:	080128f4 	.word	0x080128f4

0800d0f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d108:	e002      	b.n	800d110 <follow_path+0x1c>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	3301      	adds	r3, #1
 800d10e:	603b      	str	r3, [r7, #0]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b2f      	cmp	r3, #47	@ 0x2f
 800d116:	d0f8      	beq.n	800d10a <follow_path+0x16>
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d11e:	d0f4      	beq.n	800d10a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	2200      	movs	r2, #0
 800d124:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	2b1f      	cmp	r3, #31
 800d12c:	d80a      	bhi.n	800d144 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2280      	movs	r2, #128	@ 0x80
 800d132:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d136:	2100      	movs	r1, #0
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7ff fcf9 	bl	800cb30 <dir_sdi>
 800d13e:	4603      	mov	r3, r0
 800d140:	75fb      	strb	r3, [r7, #23]
 800d142:	e043      	b.n	800d1cc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d144:	463b      	mov	r3, r7
 800d146:	4619      	mov	r1, r3
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f7ff ff3f 	bl	800cfcc <create_name>
 800d14e:	4603      	mov	r3, r0
 800d150:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d152:	7dfb      	ldrb	r3, [r7, #23]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d134      	bne.n	800d1c2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7ff feaf 	bl	800cebc <dir_find>
 800d15e:	4603      	mov	r3, r0
 800d160:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d168:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d16a:	7dfb      	ldrb	r3, [r7, #23]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00a      	beq.n	800d186 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d170:	7dfb      	ldrb	r3, [r7, #23]
 800d172:	2b04      	cmp	r3, #4
 800d174:	d127      	bne.n	800d1c6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d176:	7afb      	ldrb	r3, [r7, #11]
 800d178:	f003 0304 	and.w	r3, r3, #4
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d122      	bne.n	800d1c6 <follow_path+0xd2>
 800d180:	2305      	movs	r3, #5
 800d182:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d184:	e01f      	b.n	800d1c6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d186:	7afb      	ldrb	r3, [r7, #11]
 800d188:	f003 0304 	and.w	r3, r3, #4
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d11c      	bne.n	800d1ca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	799b      	ldrb	r3, [r3, #6]
 800d194:	f003 0310 	and.w	r3, r3, #16
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d102      	bne.n	800d1a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d19c:	2305      	movs	r3, #5
 800d19e:	75fb      	strb	r3, [r7, #23]
 800d1a0:	e014      	b.n	800d1cc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	695b      	ldr	r3, [r3, #20]
 800d1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b0:	4413      	add	r3, r2
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f7ff fe42 	bl	800ce3e <ld_clust>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d1c0:	e7c0      	b.n	800d144 <follow_path+0x50>
			if (res != FR_OK) break;
 800d1c2:	bf00      	nop
 800d1c4:	e002      	b.n	800d1cc <follow_path+0xd8>
				break;
 800d1c6:	bf00      	nop
 800d1c8:	e000      	b.n	800d1cc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1ca:	bf00      	nop
			}
		}
	}

	return res;
 800d1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b087      	sub	sp, #28
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d1de:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d031      	beq.n	800d250 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	617b      	str	r3, [r7, #20]
 800d1f2:	e002      	b.n	800d1fa <get_ldnumber+0x24>
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	617b      	str	r3, [r7, #20]
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b20      	cmp	r3, #32
 800d200:	d903      	bls.n	800d20a <get_ldnumber+0x34>
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b3a      	cmp	r3, #58	@ 0x3a
 800d208:	d1f4      	bne.n	800d1f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	2b3a      	cmp	r3, #58	@ 0x3a
 800d210:	d11c      	bne.n	800d24c <get_ldnumber+0x76>
			tp = *path;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	60fa      	str	r2, [r7, #12]
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	3b30      	subs	r3, #48	@ 0x30
 800d222:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	2b09      	cmp	r3, #9
 800d228:	d80e      	bhi.n	800d248 <get_ldnumber+0x72>
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d10a      	bne.n	800d248 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d107      	bne.n	800d248 <get_ldnumber+0x72>
					vol = (int)i;
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	3301      	adds	r3, #1
 800d240:	617b      	str	r3, [r7, #20]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	e002      	b.n	800d252 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d24c:	2300      	movs	r3, #0
 800d24e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d250:	693b      	ldr	r3, [r7, #16]
}
 800d252:	4618      	mov	r0, r3
 800d254:	371c      	adds	r7, #28
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
	...

0800d260 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	70da      	strb	r2, [r3, #3]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f04f 32ff 	mov.w	r2, #4294967295
 800d276:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7ff f97e 	bl	800c57c <move_window>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <check_fs+0x2a>
 800d286:	2304      	movs	r3, #4
 800d288:	e038      	b.n	800d2fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	3330      	adds	r3, #48	@ 0x30
 800d28e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe fefe 	bl	800c094 <ld_word>
 800d298:	4603      	mov	r3, r0
 800d29a:	461a      	mov	r2, r3
 800d29c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d001      	beq.n	800d2a8 <check_fs+0x48>
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	e029      	b.n	800d2fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2ae:	2be9      	cmp	r3, #233	@ 0xe9
 800d2b0:	d009      	beq.n	800d2c6 <check_fs+0x66>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2b8:	2beb      	cmp	r3, #235	@ 0xeb
 800d2ba:	d11e      	bne.n	800d2fa <check_fs+0x9a>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d2c2:	2b90      	cmp	r3, #144	@ 0x90
 800d2c4:	d119      	bne.n	800d2fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	3330      	adds	r3, #48	@ 0x30
 800d2ca:	3336      	adds	r3, #54	@ 0x36
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fe fef9 	bl	800c0c4 <ld_dword>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d2d8:	4a0a      	ldr	r2, [pc, #40]	@ (800d304 <check_fs+0xa4>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d101      	bne.n	800d2e2 <check_fs+0x82>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	e00c      	b.n	800d2fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	3330      	adds	r3, #48	@ 0x30
 800d2e6:	3352      	adds	r3, #82	@ 0x52
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fe feeb 	bl	800c0c4 <ld_dword>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	4a05      	ldr	r2, [pc, #20]	@ (800d308 <check_fs+0xa8>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d101      	bne.n	800d2fa <check_fs+0x9a>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	e000      	b.n	800d2fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d2fa:	2302      	movs	r3, #2
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	00544146 	.word	0x00544146
 800d308:	33544146 	.word	0x33544146

0800d30c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b096      	sub	sp, #88	@ 0x58
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	4613      	mov	r3, r2
 800d318:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2200      	movs	r2, #0
 800d31e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f7ff ff58 	bl	800d1d6 <get_ldnumber>
 800d326:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	da01      	bge.n	800d332 <find_volume+0x26>
 800d32e:	230b      	movs	r3, #11
 800d330:	e22d      	b.n	800d78e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d332:	4aa1      	ldr	r2, [pc, #644]	@ (800d5b8 <find_volume+0x2ac>)
 800d334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d33a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <find_volume+0x3a>
 800d342:	230c      	movs	r3, #12
 800d344:	e223      	b.n	800d78e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d34a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d34c:	79fb      	ldrb	r3, [r7, #7]
 800d34e:	f023 0301 	bic.w	r3, r3, #1
 800d352:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d01a      	beq.n	800d392 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35e:	785b      	ldrb	r3, [r3, #1]
 800d360:	4618      	mov	r0, r3
 800d362:	f7fe fe17 	bl	800bf94 <disk_status>
 800d366:	4603      	mov	r3, r0
 800d368:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d36c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d370:	f003 0301 	and.w	r3, r3, #1
 800d374:	2b00      	cmp	r3, #0
 800d376:	d10c      	bne.n	800d392 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d007      	beq.n	800d38e <find_volume+0x82>
 800d37e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d382:	f003 0304 	and.w	r3, r3, #4
 800d386:	2b00      	cmp	r3, #0
 800d388:	d001      	beq.n	800d38e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d38a:	230a      	movs	r3, #10
 800d38c:	e1ff      	b.n	800d78e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d38e:	2300      	movs	r3, #0
 800d390:	e1fd      	b.n	800d78e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d394:	2200      	movs	r2, #0
 800d396:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d39a:	b2da      	uxtb	r2, r3
 800d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a2:	785b      	ldrb	r3, [r3, #1]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe fe0f 	bl	800bfc8 <disk_initialize>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d3b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d3b4:	f003 0301 	and.w	r3, r3, #1
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e1e6      	b.n	800d78e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d3c0:	79fb      	ldrb	r3, [r7, #7]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d007      	beq.n	800d3d6 <find_volume+0xca>
 800d3c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d3ca:	f003 0304 	and.w	r3, r3, #4
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d3d2:	230a      	movs	r3, #10
 800d3d4:	e1db      	b.n	800d78e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d3da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3de:	f7ff ff3f 	bl	800d260 <check_fs>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d3e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d149      	bne.n	800d484 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3f4:	e01e      	b.n	800d434 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3fe:	011b      	lsls	r3, r3, #4
 800d400:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d404:	4413      	add	r3, r2
 800d406:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40a:	3304      	adds	r3, #4
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d006      	beq.n	800d420 <find_volume+0x114>
 800d412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d414:	3308      	adds	r3, #8
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe fe54 	bl	800c0c4 <ld_dword>
 800d41c:	4602      	mov	r2, r0
 800d41e:	e000      	b.n	800d422 <find_volume+0x116>
 800d420:	2200      	movs	r2, #0
 800d422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	3358      	adds	r3, #88	@ 0x58
 800d428:	443b      	add	r3, r7
 800d42a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d42e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d430:	3301      	adds	r3, #1
 800d432:	643b      	str	r3, [r7, #64]	@ 0x40
 800d434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d436:	2b03      	cmp	r3, #3
 800d438:	d9dd      	bls.n	800d3f6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d43a:	2300      	movs	r3, #0
 800d43c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <find_volume+0x13e>
 800d444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d446:	3b01      	subs	r3, #1
 800d448:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	3358      	adds	r3, #88	@ 0x58
 800d450:	443b      	add	r3, r7
 800d452:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d456:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d005      	beq.n	800d46a <find_volume+0x15e>
 800d45e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d460:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d462:	f7ff fefd 	bl	800d260 <check_fs>
 800d466:	4603      	mov	r3, r0
 800d468:	e000      	b.n	800d46c <find_volume+0x160>
 800d46a:	2303      	movs	r3, #3
 800d46c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d470:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d474:	2b01      	cmp	r3, #1
 800d476:	d905      	bls.n	800d484 <find_volume+0x178>
 800d478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d47a:	3301      	adds	r3, #1
 800d47c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d47e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d480:	2b03      	cmp	r3, #3
 800d482:	d9e2      	bls.n	800d44a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d484:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d488:	2b04      	cmp	r3, #4
 800d48a:	d101      	bne.n	800d490 <find_volume+0x184>
 800d48c:	2301      	movs	r3, #1
 800d48e:	e17e      	b.n	800d78e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d490:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d494:	2b01      	cmp	r3, #1
 800d496:	d901      	bls.n	800d49c <find_volume+0x190>
 800d498:	230d      	movs	r3, #13
 800d49a:	e178      	b.n	800d78e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49e:	3330      	adds	r3, #48	@ 0x30
 800d4a0:	330b      	adds	r3, #11
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe fdf6 	bl	800c094 <ld_word>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4ae:	d001      	beq.n	800d4b4 <find_volume+0x1a8>
 800d4b0:	230d      	movs	r3, #13
 800d4b2:	e16c      	b.n	800d78e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b6:	3330      	adds	r3, #48	@ 0x30
 800d4b8:	3316      	adds	r3, #22
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fe fdea 	bl	800c094 <ld_word>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d4c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d106      	bne.n	800d4d8 <find_volume+0x1cc>
 800d4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4cc:	3330      	adds	r3, #48	@ 0x30
 800d4ce:	3324      	adds	r3, #36	@ 0x24
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fe fdf7 	bl	800c0c4 <ld_dword>
 800d4d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d4dc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ea:	789b      	ldrb	r3, [r3, #2]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d005      	beq.n	800d4fc <find_volume+0x1f0>
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f2:	789b      	ldrb	r3, [r3, #2]
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d001      	beq.n	800d4fc <find_volume+0x1f0>
 800d4f8:	230d      	movs	r3, #13
 800d4fa:	e148      	b.n	800d78e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fe:	789b      	ldrb	r3, [r3, #2]
 800d500:	461a      	mov	r2, r3
 800d502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d504:	fb02 f303 	mul.w	r3, r2, r3
 800d508:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d510:	461a      	mov	r2, r3
 800d512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d514:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d518:	895b      	ldrh	r3, [r3, #10]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d008      	beq.n	800d530 <find_volume+0x224>
 800d51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d520:	895b      	ldrh	r3, [r3, #10]
 800d522:	461a      	mov	r2, r3
 800d524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d526:	895b      	ldrh	r3, [r3, #10]
 800d528:	3b01      	subs	r3, #1
 800d52a:	4013      	ands	r3, r2
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d001      	beq.n	800d534 <find_volume+0x228>
 800d530:	230d      	movs	r3, #13
 800d532:	e12c      	b.n	800d78e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d536:	3330      	adds	r3, #48	@ 0x30
 800d538:	3311      	adds	r3, #17
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe fdaa 	bl	800c094 <ld_word>
 800d540:	4603      	mov	r3, r0
 800d542:	461a      	mov	r2, r3
 800d544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d546:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54a:	891b      	ldrh	r3, [r3, #8]
 800d54c:	f003 030f 	and.w	r3, r3, #15
 800d550:	b29b      	uxth	r3, r3
 800d552:	2b00      	cmp	r3, #0
 800d554:	d001      	beq.n	800d55a <find_volume+0x24e>
 800d556:	230d      	movs	r3, #13
 800d558:	e119      	b.n	800d78e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55c:	3330      	adds	r3, #48	@ 0x30
 800d55e:	3313      	adds	r3, #19
 800d560:	4618      	mov	r0, r3
 800d562:	f7fe fd97 	bl	800c094 <ld_word>
 800d566:	4603      	mov	r3, r0
 800d568:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d56a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d106      	bne.n	800d57e <find_volume+0x272>
 800d570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d572:	3330      	adds	r3, #48	@ 0x30
 800d574:	3320      	adds	r3, #32
 800d576:	4618      	mov	r0, r3
 800d578:	f7fe fda4 	bl	800c0c4 <ld_dword>
 800d57c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d580:	3330      	adds	r3, #48	@ 0x30
 800d582:	330e      	adds	r3, #14
 800d584:	4618      	mov	r0, r3
 800d586:	f7fe fd85 	bl	800c094 <ld_word>
 800d58a:	4603      	mov	r3, r0
 800d58c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d58e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <find_volume+0x28c>
 800d594:	230d      	movs	r3, #13
 800d596:	e0fa      	b.n	800d78e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d598:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d59a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d59c:	4413      	add	r3, r2
 800d59e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5a0:	8912      	ldrh	r2, [r2, #8]
 800d5a2:	0912      	lsrs	r2, r2, #4
 800d5a4:	b292      	uxth	r2, r2
 800d5a6:	4413      	add	r3, r2
 800d5a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d5aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d204      	bcs.n	800d5bc <find_volume+0x2b0>
 800d5b2:	230d      	movs	r3, #13
 800d5b4:	e0eb      	b.n	800d78e <find_volume+0x482>
 800d5b6:	bf00      	nop
 800d5b8:	200013f8 	.word	0x200013f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d5bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5c4:	8952      	ldrh	r2, [r2, #10]
 800d5c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5ca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d101      	bne.n	800d5d6 <find_volume+0x2ca>
 800d5d2:	230d      	movs	r3, #13
 800d5d4:	e0db      	b.n	800d78e <find_volume+0x482>
		fmt = FS_FAT32;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5de:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d802      	bhi.n	800d5ec <find_volume+0x2e0>
 800d5e6:	2302      	movs	r3, #2
 800d5e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d802      	bhi.n	800d5fc <find_volume+0x2f0>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fe:	1c9a      	adds	r2, r3, #2
 800d600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d602:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d606:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d608:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d60a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d60c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d60e:	441a      	add	r2, r3
 800d610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d612:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d614:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d618:	441a      	add	r2, r3
 800d61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d61e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d622:	2b03      	cmp	r3, #3
 800d624:	d11e      	bne.n	800d664 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d628:	3330      	adds	r3, #48	@ 0x30
 800d62a:	332a      	adds	r3, #42	@ 0x2a
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fd31 	bl	800c094 <ld_word>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d001      	beq.n	800d63c <find_volume+0x330>
 800d638:	230d      	movs	r3, #13
 800d63a:	e0a8      	b.n	800d78e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63e:	891b      	ldrh	r3, [r3, #8]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <find_volume+0x33c>
 800d644:	230d      	movs	r3, #13
 800d646:	e0a2      	b.n	800d78e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64a:	3330      	adds	r3, #48	@ 0x30
 800d64c:	332c      	adds	r3, #44	@ 0x2c
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fd38 	bl	800c0c4 <ld_dword>
 800d654:	4602      	mov	r2, r0
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	647b      	str	r3, [r7, #68]	@ 0x44
 800d662:	e01f      	b.n	800d6a4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	891b      	ldrh	r3, [r3, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <find_volume+0x364>
 800d66c:	230d      	movs	r3, #13
 800d66e:	e08e      	b.n	800d78e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d672:	6a1a      	ldr	r2, [r3, #32]
 800d674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d676:	441a      	add	r2, r3
 800d678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d67c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d680:	2b02      	cmp	r3, #2
 800d682:	d103      	bne.n	800d68c <find_volume+0x380>
 800d684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d686:	695b      	ldr	r3, [r3, #20]
 800d688:	005b      	lsls	r3, r3, #1
 800d68a:	e00a      	b.n	800d6a2 <find_volume+0x396>
 800d68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68e:	695a      	ldr	r2, [r3, #20]
 800d690:	4613      	mov	r3, r2
 800d692:	005b      	lsls	r3, r3, #1
 800d694:	4413      	add	r3, r2
 800d696:	085a      	lsrs	r2, r3, #1
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	695b      	ldr	r3, [r3, #20]
 800d69c:	f003 0301 	and.w	r3, r3, #1
 800d6a0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d6a2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a6:	699a      	ldr	r2, [r3, #24]
 800d6a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6aa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d6ae:	0a5b      	lsrs	r3, r3, #9
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d201      	bcs.n	800d6b8 <find_volume+0x3ac>
 800d6b4:	230d      	movs	r3, #13
 800d6b6:	e06a      	b.n	800d78e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d6be:	611a      	str	r2, [r3, #16]
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c2:	691a      	ldr	r2, [r3, #16]
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ca:	2280      	movs	r2, #128	@ 0x80
 800d6cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d6ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d149      	bne.n	800d76a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d8:	3330      	adds	r3, #48	@ 0x30
 800d6da:	3330      	adds	r3, #48	@ 0x30
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fe fcd9 	bl	800c094 <ld_word>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d140      	bne.n	800d76a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d6f0:	f7fe ff44 	bl	800c57c <move_window>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d137      	bne.n	800d76a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d702:	3330      	adds	r3, #48	@ 0x30
 800d704:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d708:	4618      	mov	r0, r3
 800d70a:	f7fe fcc3 	bl	800c094 <ld_word>
 800d70e:	4603      	mov	r3, r0
 800d710:	461a      	mov	r2, r3
 800d712:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d716:	429a      	cmp	r2, r3
 800d718:	d127      	bne.n	800d76a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71c:	3330      	adds	r3, #48	@ 0x30
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe fcd0 	bl	800c0c4 <ld_dword>
 800d724:	4603      	mov	r3, r0
 800d726:	4a1c      	ldr	r2, [pc, #112]	@ (800d798 <find_volume+0x48c>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d11e      	bne.n	800d76a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72e:	3330      	adds	r3, #48	@ 0x30
 800d730:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d734:	4618      	mov	r0, r3
 800d736:	f7fe fcc5 	bl	800c0c4 <ld_dword>
 800d73a:	4603      	mov	r3, r0
 800d73c:	4a17      	ldr	r2, [pc, #92]	@ (800d79c <find_volume+0x490>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d113      	bne.n	800d76a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d744:	3330      	adds	r3, #48	@ 0x30
 800d746:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fcba 	bl	800c0c4 <ld_dword>
 800d750:	4602      	mov	r2, r0
 800d752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d754:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d758:	3330      	adds	r3, #48	@ 0x30
 800d75a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fe fcb0 	bl	800c0c4 <ld_dword>
 800d764:	4602      	mov	r2, r0
 800d766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d768:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d770:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d772:	4b0b      	ldr	r3, [pc, #44]	@ (800d7a0 <find_volume+0x494>)
 800d774:	881b      	ldrh	r3, [r3, #0]
 800d776:	3301      	adds	r3, #1
 800d778:	b29a      	uxth	r2, r3
 800d77a:	4b09      	ldr	r3, [pc, #36]	@ (800d7a0 <find_volume+0x494>)
 800d77c:	801a      	strh	r2, [r3, #0]
 800d77e:	4b08      	ldr	r3, [pc, #32]	@ (800d7a0 <find_volume+0x494>)
 800d780:	881a      	ldrh	r2, [r3, #0]
 800d782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d784:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d786:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d788:	f7fe fe90 	bl	800c4ac <clear_lock>
#endif
	return FR_OK;
 800d78c:	2300      	movs	r3, #0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3758      	adds	r7, #88	@ 0x58
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	41615252 	.word	0x41615252
 800d79c:	61417272 	.word	0x61417272
 800d7a0:	200013fc 	.word	0x200013fc

0800d7a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b088      	sub	sp, #32
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d7b6:	f107 0310 	add.w	r3, r7, #16
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7ff fd0b 	bl	800d1d6 <get_ldnumber>
 800d7c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	da01      	bge.n	800d7cc <f_mount+0x28>
 800d7c8:	230b      	movs	r3, #11
 800d7ca:	e02b      	b.n	800d824 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d7cc:	4a17      	ldr	r2, [pc, #92]	@ (800d82c <f_mount+0x88>)
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d005      	beq.n	800d7e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d7dc:	69b8      	ldr	r0, [r7, #24]
 800d7de:	f7fe fe65 	bl	800c4ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d002      	beq.n	800d7f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	490d      	ldr	r1, [pc, #52]	@ (800d82c <f_mount+0x88>)
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d002      	beq.n	800d80a <f_mount+0x66>
 800d804:	79fb      	ldrb	r3, [r7, #7]
 800d806:	2b01      	cmp	r3, #1
 800d808:	d001      	beq.n	800d80e <f_mount+0x6a>
 800d80a:	2300      	movs	r3, #0
 800d80c:	e00a      	b.n	800d824 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d80e:	f107 010c 	add.w	r1, r7, #12
 800d812:	f107 0308 	add.w	r3, r7, #8
 800d816:	2200      	movs	r2, #0
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff fd77 	bl	800d30c <find_volume>
 800d81e:	4603      	mov	r3, r0
 800d820:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d822:	7dfb      	ldrb	r3, [r7, #23]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3720      	adds	r7, #32
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	200013f8 	.word	0x200013f8

0800d830 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b098      	sub	sp, #96	@ 0x60
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	4613      	mov	r3, r2
 800d83c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d101      	bne.n	800d848 <f_open+0x18>
 800d844:	2309      	movs	r3, #9
 800d846:	e1a9      	b.n	800db9c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d848:	79fb      	ldrb	r3, [r7, #7]
 800d84a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d84e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d850:	79fa      	ldrb	r2, [r7, #7]
 800d852:	f107 0110 	add.w	r1, r7, #16
 800d856:	f107 0308 	add.w	r3, r7, #8
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7ff fd56 	bl	800d30c <find_volume>
 800d860:	4603      	mov	r3, r0
 800d862:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d866:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f040 818d 	bne.w	800db8a <f_open+0x35a>
		dj.obj.fs = fs;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	f107 0314 	add.w	r3, r7, #20
 800d87a:	4611      	mov	r1, r2
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7ff fc39 	bl	800d0f4 <follow_path>
 800d882:	4603      	mov	r3, r0
 800d884:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d888:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d118      	bne.n	800d8c2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d890:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d894:	b25b      	sxtb	r3, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	da03      	bge.n	800d8a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d89a:	2306      	movs	r3, #6
 800d89c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d8a0:	e00f      	b.n	800d8c2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d8a2:	79fb      	ldrb	r3, [r7, #7]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	bf8c      	ite	hi
 800d8a8:	2301      	movhi	r3, #1
 800d8aa:	2300      	movls	r3, #0
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	f107 0314 	add.w	r3, r7, #20
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fe fcec 	bl	800c294 <chk_lock>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d8c2:	79fb      	ldrb	r3, [r7, #7]
 800d8c4:	f003 031c 	and.w	r3, r3, #28
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d07f      	beq.n	800d9cc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d8cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d017      	beq.n	800d904 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d8d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8d8:	2b04      	cmp	r3, #4
 800d8da:	d10e      	bne.n	800d8fa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d8dc:	f7fe fd36 	bl	800c34c <enq_lock>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d006      	beq.n	800d8f4 <f_open+0xc4>
 800d8e6:	f107 0314 	add.w	r3, r7, #20
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff fb3b 	bl	800cf66 <dir_register>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	e000      	b.n	800d8f6 <f_open+0xc6>
 800d8f4:	2312      	movs	r3, #18
 800d8f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d8fa:	79fb      	ldrb	r3, [r7, #7]
 800d8fc:	f043 0308 	orr.w	r3, r3, #8
 800d900:	71fb      	strb	r3, [r7, #7]
 800d902:	e010      	b.n	800d926 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d904:	7ebb      	ldrb	r3, [r7, #26]
 800d906:	f003 0311 	and.w	r3, r3, #17
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <f_open+0xe6>
					res = FR_DENIED;
 800d90e:	2307      	movs	r3, #7
 800d910:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d914:	e007      	b.n	800d926 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d916:	79fb      	ldrb	r3, [r7, #7]
 800d918:	f003 0304 	and.w	r3, r3, #4
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d002      	beq.n	800d926 <f_open+0xf6>
 800d920:	2308      	movs	r3, #8
 800d922:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d926:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d168      	bne.n	800da00 <f_open+0x1d0>
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	f003 0308 	and.w	r3, r3, #8
 800d934:	2b00      	cmp	r3, #0
 800d936:	d063      	beq.n	800da00 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d938:	f7fe face 	bl	800bed8 <get_fattime>
 800d93c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d940:	330e      	adds	r3, #14
 800d942:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d944:	4618      	mov	r0, r3
 800d946:	f7fe fbfb 	bl	800c140 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94c:	3316      	adds	r3, #22
 800d94e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d950:	4618      	mov	r0, r3
 800d952:	f7fe fbf5 	bl	800c140 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d958:	330b      	adds	r3, #11
 800d95a:	2220      	movs	r2, #32
 800d95c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d962:	4611      	mov	r1, r2
 800d964:	4618      	mov	r0, r3
 800d966:	f7ff fa6a 	bl	800ce3e <ld_clust>
 800d96a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d970:	2200      	movs	r2, #0
 800d972:	4618      	mov	r0, r3
 800d974:	f7ff fa82 	bl	800ce7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d97a:	331c      	adds	r3, #28
 800d97c:	2100      	movs	r1, #0
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe fbde 	bl	800c140 <st_dword>
					fs->wflag = 1;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	2201      	movs	r2, #1
 800d988:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d98a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d037      	beq.n	800da00 <f_open+0x1d0>
						dw = fs->winsect;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d994:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d996:	f107 0314 	add.w	r3, r7, #20
 800d99a:	2200      	movs	r2, #0
 800d99c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe ffc9 	bl	800c936 <remove_chain>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d9aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d126      	bne.n	800da00 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe fde0 	bl	800c57c <move_window>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d9c6:	3a01      	subs	r2, #1
 800d9c8:	60da      	str	r2, [r3, #12]
 800d9ca:	e019      	b.n	800da00 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d9cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d115      	bne.n	800da00 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d9d4:	7ebb      	ldrb	r3, [r7, #26]
 800d9d6:	f003 0310 	and.w	r3, r3, #16
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d003      	beq.n	800d9e6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d9de:	2304      	movs	r3, #4
 800d9e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d9e4:	e00c      	b.n	800da00 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d9e6:	79fb      	ldrb	r3, [r7, #7]
 800d9e8:	f003 0302 	and.w	r3, r3, #2
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d007      	beq.n	800da00 <f_open+0x1d0>
 800d9f0:	7ebb      	ldrb	r3, [r7, #26]
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d002      	beq.n	800da00 <f_open+0x1d0>
						res = FR_DENIED;
 800d9fa:	2307      	movs	r3, #7
 800d9fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800da00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da04:	2b00      	cmp	r3, #0
 800da06:	d126      	bne.n	800da56 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	f003 0308 	and.w	r3, r3, #8
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800da12:	79fb      	ldrb	r3, [r7, #7]
 800da14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da18:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800da22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da28:	79fb      	ldrb	r3, [r7, #7]
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	bf8c      	ite	hi
 800da2e:	2301      	movhi	r3, #1
 800da30:	2300      	movls	r3, #0
 800da32:	b2db      	uxtb	r3, r3
 800da34:	461a      	mov	r2, r3
 800da36:	f107 0314 	add.w	r3, r7, #20
 800da3a:	4611      	mov	r1, r2
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe fca7 	bl	800c390 <inc_lock>
 800da42:	4602      	mov	r2, r0
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	691b      	ldr	r3, [r3, #16]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d102      	bne.n	800da56 <f_open+0x226>
 800da50:	2302      	movs	r3, #2
 800da52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800da56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	f040 8095 	bne.w	800db8a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da64:	4611      	mov	r1, r2
 800da66:	4618      	mov	r0, r3
 800da68:	f7ff f9e9 	bl	800ce3e <ld_clust>
 800da6c:	4602      	mov	r2, r0
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800da72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da74:	331c      	adds	r3, #28
 800da76:	4618      	mov	r0, r3
 800da78:	f7fe fb24 	bl	800c0c4 <ld_dword>
 800da7c:	4602      	mov	r2, r0
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2200      	movs	r2, #0
 800da86:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	88da      	ldrh	r2, [r3, #6]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	79fa      	ldrb	r2, [r7, #7]
 800da9a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2200      	movs	r2, #0
 800daac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3330      	adds	r3, #48	@ 0x30
 800dab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dab6:	2100      	movs	r1, #0
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fe fb8e 	bl	800c1da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dabe:	79fb      	ldrb	r3, [r7, #7]
 800dac0:	f003 0320 	and.w	r3, r3, #32
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d060      	beq.n	800db8a <f_open+0x35a>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d05c      	beq.n	800db8a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	68da      	ldr	r2, [r3, #12]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	895b      	ldrh	r3, [r3, #10]
 800dadc:	025b      	lsls	r3, r3, #9
 800dade:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	657b      	str	r3, [r7, #84]	@ 0x54
 800daec:	e016      	b.n	800db1c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fe fd8e 	bl	800c614 <get_fat>
 800daf8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dafa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d802      	bhi.n	800db06 <f_open+0x2d6>
 800db00:	2302      	movs	r3, #2
 800db02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800db06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0c:	d102      	bne.n	800db14 <f_open+0x2e4>
 800db0e:	2301      	movs	r3, #1
 800db10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	657b      	str	r3, [r7, #84]	@ 0x54
 800db1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db20:	2b00      	cmp	r3, #0
 800db22:	d103      	bne.n	800db2c <f_open+0x2fc>
 800db24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db28:	429a      	cmp	r2, r3
 800db2a:	d8e0      	bhi.n	800daee <f_open+0x2be>
				}
				fp->clust = clst;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800db32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db36:	2b00      	cmp	r3, #0
 800db38:	d127      	bne.n	800db8a <f_open+0x35a>
 800db3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db40:	2b00      	cmp	r3, #0
 800db42:	d022      	beq.n	800db8a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fe fd44 	bl	800c5d6 <clust2sect>
 800db4e:	6478      	str	r0, [r7, #68]	@ 0x44
 800db50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db52:	2b00      	cmp	r3, #0
 800db54:	d103      	bne.n	800db5e <f_open+0x32e>
						res = FR_INT_ERR;
 800db56:	2302      	movs	r3, #2
 800db58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800db5c:	e015      	b.n	800db8a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800db5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db60:	0a5a      	lsrs	r2, r3, #9
 800db62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db64:	441a      	add	r2, r3
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	7858      	ldrb	r0, [r3, #1]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6a1a      	ldr	r2, [r3, #32]
 800db78:	2301      	movs	r3, #1
 800db7a:	f7fe fa4b 	bl	800c014 <disk_read>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <f_open+0x35a>
 800db84:	2301      	movs	r3, #1
 800db86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800db8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d002      	beq.n	800db98 <f_open+0x368>
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800db98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3760      	adds	r7, #96	@ 0x60
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b092      	sub	sp, #72	@ 0x48
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800dbb0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800dbb4:	f107 030c 	add.w	r3, r7, #12
 800dbb8:	2200      	movs	r2, #0
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7ff fba6 	bl	800d30c <find_volume>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800dbc6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f040 8099 	bne.w	800dd02 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800dbd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800dbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd8:	691a      	ldr	r2, [r3, #16]
 800dbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbdc:	695b      	ldr	r3, [r3, #20]
 800dbde:	3b02      	subs	r3, #2
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d804      	bhi.n	800dbee <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800dbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe6:	691a      	ldr	r2, [r3, #16]
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	601a      	str	r2, [r3, #0]
 800dbec:	e089      	b.n	800dd02 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800dbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d128      	bne.n	800dc4c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800dbfa:	2302      	movs	r3, #2
 800dbfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc00:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800dc02:	f107 0314 	add.w	r3, r7, #20
 800dc06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe fd03 	bl	800c614 <get_fat>
 800dc0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800dc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc16:	d103      	bne.n	800dc20 <f_getfree+0x7c>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dc1e:	e063      	b.n	800dce8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800dc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d103      	bne.n	800dc2e <f_getfree+0x8a>
 800dc26:	2302      	movs	r3, #2
 800dc28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dc2c:	e05c      	b.n	800dce8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800dc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d102      	bne.n	800dc3a <f_getfree+0x96>
 800dc34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc36:	3301      	adds	r3, #1
 800dc38:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800dc3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc42:	695b      	ldr	r3, [r3, #20]
 800dc44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d3db      	bcc.n	800dc02 <f_getfree+0x5e>
 800dc4a:	e04d      	b.n	800dce8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800dc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc4e:	695b      	ldr	r3, [r3, #20]
 800dc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800dc60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d113      	bne.n	800dc8e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800dc66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800dc6e:	4619      	mov	r1, r3
 800dc70:	f7fe fc84 	bl	800c57c <move_window>
 800dc74:	4603      	mov	r3, r0
 800dc76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800dc7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d131      	bne.n	800dce6 <f_getfree+0x142>
							p = fs->win;
 800dc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc84:	3330      	adds	r3, #48	@ 0x30
 800dc86:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800dc88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc8c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800dc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2b02      	cmp	r3, #2
 800dc94:	d10f      	bne.n	800dcb6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800dc96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc98:	f7fe f9fc 	bl	800c094 <ld_word>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <f_getfree+0x104>
 800dca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dca4:	3301      	adds	r3, #1
 800dca6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800dca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcaa:	3302      	adds	r3, #2
 800dcac:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcb0:	3b02      	subs	r3, #2
 800dcb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcb4:	e010      	b.n	800dcd8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800dcb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dcb8:	f7fe fa04 	bl	800c0c4 <ld_dword>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d102      	bne.n	800dccc <f_getfree+0x128>
 800dcc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcc8:	3301      	adds	r3, #1
 800dcca:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800dccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcce:	3304      	adds	r3, #4
 800dcd0:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcd4:	3b04      	subs	r3, #4
 800dcd6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800dcd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1bd      	bne.n	800dc60 <f_getfree+0xbc>
 800dce4:	e000      	b.n	800dce8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800dce6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcec:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800dcee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcf2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800dcf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf6:	791a      	ldrb	r2, [r3, #4]
 800dcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfa:	f042 0201 	orr.w	r2, r2, #1
 800dcfe:	b2d2      	uxtb	r2, r2
 800dd00:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800dd02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3748      	adds	r7, #72	@ 0x48
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
	...

0800dd10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b087      	sub	sp, #28
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dd26:	4b1f      	ldr	r3, [pc, #124]	@ (800dda4 <FATFS_LinkDriverEx+0x94>)
 800dd28:	7a5b      	ldrb	r3, [r3, #9]
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d131      	bne.n	800dd94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd30:	4b1c      	ldr	r3, [pc, #112]	@ (800dda4 <FATFS_LinkDriverEx+0x94>)
 800dd32:	7a5b      	ldrb	r3, [r3, #9]
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	461a      	mov	r2, r3
 800dd38:	4b1a      	ldr	r3, [pc, #104]	@ (800dda4 <FATFS_LinkDriverEx+0x94>)
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dd3e:	4b19      	ldr	r3, [pc, #100]	@ (800dda4 <FATFS_LinkDriverEx+0x94>)
 800dd40:	7a5b      	ldrb	r3, [r3, #9]
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	4a17      	ldr	r2, [pc, #92]	@ (800dda4 <FATFS_LinkDriverEx+0x94>)
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	4413      	add	r3, r2
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dd4e:	4b15      	ldr	r3, [pc, #84]	@ (800dda4 <FATFS_LinkDriverEx+0x94>)
 800dd50:	7a5b      	ldrb	r3, [r3, #9]
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	461a      	mov	r2, r3
 800dd56:	4b13      	ldr	r3, [pc, #76]	@ (800dda4 <FATFS_LinkDriverEx+0x94>)
 800dd58:	4413      	add	r3, r2
 800dd5a:	79fa      	ldrb	r2, [r7, #7]
 800dd5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd5e:	4b11      	ldr	r3, [pc, #68]	@ (800dda4 <FATFS_LinkDriverEx+0x94>)
 800dd60:	7a5b      	ldrb	r3, [r3, #9]
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	b2d1      	uxtb	r1, r2
 800dd68:	4a0e      	ldr	r2, [pc, #56]	@ (800dda4 <FATFS_LinkDriverEx+0x94>)
 800dd6a:	7251      	strb	r1, [r2, #9]
 800dd6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd6e:	7dbb      	ldrb	r3, [r7, #22]
 800dd70:	3330      	adds	r3, #48	@ 0x30
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	223a      	movs	r2, #58	@ 0x3a
 800dd7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	3302      	adds	r3, #2
 800dd84:	222f      	movs	r2, #47	@ 0x2f
 800dd86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	3303      	adds	r3, #3
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	371c      	adds	r7, #28
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	20001420 	.word	0x20001420

0800dda8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	6839      	ldr	r1, [r7, #0]
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7ff ffaa 	bl	800dd10 <FATFS_LinkDriverEx>
 800ddbc:	4603      	mov	r3, r0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
	...

0800ddc8 <malloc>:
 800ddc8:	4b02      	ldr	r3, [pc, #8]	@ (800ddd4 <malloc+0xc>)
 800ddca:	4601      	mov	r1, r0
 800ddcc:	6818      	ldr	r0, [r3, #0]
 800ddce:	f000 b82d 	b.w	800de2c <_malloc_r>
 800ddd2:	bf00      	nop
 800ddd4:	200001a4 	.word	0x200001a4

0800ddd8 <free>:
 800ddd8:	4b02      	ldr	r3, [pc, #8]	@ (800dde4 <free+0xc>)
 800ddda:	4601      	mov	r1, r0
 800dddc:	6818      	ldr	r0, [r3, #0]
 800ddde:	f002 bfff 	b.w	8010de0 <_free_r>
 800dde2:	bf00      	nop
 800dde4:	200001a4 	.word	0x200001a4

0800dde8 <sbrk_aligned>:
 800dde8:	b570      	push	{r4, r5, r6, lr}
 800ddea:	4e0f      	ldr	r6, [pc, #60]	@ (800de28 <sbrk_aligned+0x40>)
 800ddec:	460c      	mov	r4, r1
 800ddee:	6831      	ldr	r1, [r6, #0]
 800ddf0:	4605      	mov	r5, r0
 800ddf2:	b911      	cbnz	r1, 800ddfa <sbrk_aligned+0x12>
 800ddf4:	f002 f914 	bl	8010020 <_sbrk_r>
 800ddf8:	6030      	str	r0, [r6, #0]
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f002 f90f 	bl	8010020 <_sbrk_r>
 800de02:	1c43      	adds	r3, r0, #1
 800de04:	d103      	bne.n	800de0e <sbrk_aligned+0x26>
 800de06:	f04f 34ff 	mov.w	r4, #4294967295
 800de0a:	4620      	mov	r0, r4
 800de0c:	bd70      	pop	{r4, r5, r6, pc}
 800de0e:	1cc4      	adds	r4, r0, #3
 800de10:	f024 0403 	bic.w	r4, r4, #3
 800de14:	42a0      	cmp	r0, r4
 800de16:	d0f8      	beq.n	800de0a <sbrk_aligned+0x22>
 800de18:	1a21      	subs	r1, r4, r0
 800de1a:	4628      	mov	r0, r5
 800de1c:	f002 f900 	bl	8010020 <_sbrk_r>
 800de20:	3001      	adds	r0, #1
 800de22:	d1f2      	bne.n	800de0a <sbrk_aligned+0x22>
 800de24:	e7ef      	b.n	800de06 <sbrk_aligned+0x1e>
 800de26:	bf00      	nop
 800de28:	2000142c 	.word	0x2000142c

0800de2c <_malloc_r>:
 800de2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de30:	1ccd      	adds	r5, r1, #3
 800de32:	f025 0503 	bic.w	r5, r5, #3
 800de36:	3508      	adds	r5, #8
 800de38:	2d0c      	cmp	r5, #12
 800de3a:	bf38      	it	cc
 800de3c:	250c      	movcc	r5, #12
 800de3e:	2d00      	cmp	r5, #0
 800de40:	4606      	mov	r6, r0
 800de42:	db01      	blt.n	800de48 <_malloc_r+0x1c>
 800de44:	42a9      	cmp	r1, r5
 800de46:	d904      	bls.n	800de52 <_malloc_r+0x26>
 800de48:	230c      	movs	r3, #12
 800de4a:	6033      	str	r3, [r6, #0]
 800de4c:	2000      	movs	r0, #0
 800de4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df28 <_malloc_r+0xfc>
 800de56:	f000 f869 	bl	800df2c <__malloc_lock>
 800de5a:	f8d8 3000 	ldr.w	r3, [r8]
 800de5e:	461c      	mov	r4, r3
 800de60:	bb44      	cbnz	r4, 800deb4 <_malloc_r+0x88>
 800de62:	4629      	mov	r1, r5
 800de64:	4630      	mov	r0, r6
 800de66:	f7ff ffbf 	bl	800dde8 <sbrk_aligned>
 800de6a:	1c43      	adds	r3, r0, #1
 800de6c:	4604      	mov	r4, r0
 800de6e:	d158      	bne.n	800df22 <_malloc_r+0xf6>
 800de70:	f8d8 4000 	ldr.w	r4, [r8]
 800de74:	4627      	mov	r7, r4
 800de76:	2f00      	cmp	r7, #0
 800de78:	d143      	bne.n	800df02 <_malloc_r+0xd6>
 800de7a:	2c00      	cmp	r4, #0
 800de7c:	d04b      	beq.n	800df16 <_malloc_r+0xea>
 800de7e:	6823      	ldr	r3, [r4, #0]
 800de80:	4639      	mov	r1, r7
 800de82:	4630      	mov	r0, r6
 800de84:	eb04 0903 	add.w	r9, r4, r3
 800de88:	f002 f8ca 	bl	8010020 <_sbrk_r>
 800de8c:	4581      	cmp	r9, r0
 800de8e:	d142      	bne.n	800df16 <_malloc_r+0xea>
 800de90:	6821      	ldr	r1, [r4, #0]
 800de92:	1a6d      	subs	r5, r5, r1
 800de94:	4629      	mov	r1, r5
 800de96:	4630      	mov	r0, r6
 800de98:	f7ff ffa6 	bl	800dde8 <sbrk_aligned>
 800de9c:	3001      	adds	r0, #1
 800de9e:	d03a      	beq.n	800df16 <_malloc_r+0xea>
 800dea0:	6823      	ldr	r3, [r4, #0]
 800dea2:	442b      	add	r3, r5
 800dea4:	6023      	str	r3, [r4, #0]
 800dea6:	f8d8 3000 	ldr.w	r3, [r8]
 800deaa:	685a      	ldr	r2, [r3, #4]
 800deac:	bb62      	cbnz	r2, 800df08 <_malloc_r+0xdc>
 800deae:	f8c8 7000 	str.w	r7, [r8]
 800deb2:	e00f      	b.n	800ded4 <_malloc_r+0xa8>
 800deb4:	6822      	ldr	r2, [r4, #0]
 800deb6:	1b52      	subs	r2, r2, r5
 800deb8:	d420      	bmi.n	800defc <_malloc_r+0xd0>
 800deba:	2a0b      	cmp	r2, #11
 800debc:	d917      	bls.n	800deee <_malloc_r+0xc2>
 800debe:	1961      	adds	r1, r4, r5
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	6025      	str	r5, [r4, #0]
 800dec4:	bf18      	it	ne
 800dec6:	6059      	strne	r1, [r3, #4]
 800dec8:	6863      	ldr	r3, [r4, #4]
 800deca:	bf08      	it	eq
 800decc:	f8c8 1000 	streq.w	r1, [r8]
 800ded0:	5162      	str	r2, [r4, r5]
 800ded2:	604b      	str	r3, [r1, #4]
 800ded4:	4630      	mov	r0, r6
 800ded6:	f000 f82f 	bl	800df38 <__malloc_unlock>
 800deda:	f104 000b 	add.w	r0, r4, #11
 800dede:	1d23      	adds	r3, r4, #4
 800dee0:	f020 0007 	bic.w	r0, r0, #7
 800dee4:	1ac2      	subs	r2, r0, r3
 800dee6:	bf1c      	itt	ne
 800dee8:	1a1b      	subne	r3, r3, r0
 800deea:	50a3      	strne	r3, [r4, r2]
 800deec:	e7af      	b.n	800de4e <_malloc_r+0x22>
 800deee:	6862      	ldr	r2, [r4, #4]
 800def0:	42a3      	cmp	r3, r4
 800def2:	bf0c      	ite	eq
 800def4:	f8c8 2000 	streq.w	r2, [r8]
 800def8:	605a      	strne	r2, [r3, #4]
 800defa:	e7eb      	b.n	800ded4 <_malloc_r+0xa8>
 800defc:	4623      	mov	r3, r4
 800defe:	6864      	ldr	r4, [r4, #4]
 800df00:	e7ae      	b.n	800de60 <_malloc_r+0x34>
 800df02:	463c      	mov	r4, r7
 800df04:	687f      	ldr	r7, [r7, #4]
 800df06:	e7b6      	b.n	800de76 <_malloc_r+0x4a>
 800df08:	461a      	mov	r2, r3
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	42a3      	cmp	r3, r4
 800df0e:	d1fb      	bne.n	800df08 <_malloc_r+0xdc>
 800df10:	2300      	movs	r3, #0
 800df12:	6053      	str	r3, [r2, #4]
 800df14:	e7de      	b.n	800ded4 <_malloc_r+0xa8>
 800df16:	230c      	movs	r3, #12
 800df18:	6033      	str	r3, [r6, #0]
 800df1a:	4630      	mov	r0, r6
 800df1c:	f000 f80c 	bl	800df38 <__malloc_unlock>
 800df20:	e794      	b.n	800de4c <_malloc_r+0x20>
 800df22:	6005      	str	r5, [r0, #0]
 800df24:	e7d6      	b.n	800ded4 <_malloc_r+0xa8>
 800df26:	bf00      	nop
 800df28:	20001430 	.word	0x20001430

0800df2c <__malloc_lock>:
 800df2c:	4801      	ldr	r0, [pc, #4]	@ (800df34 <__malloc_lock+0x8>)
 800df2e:	f002 b8c4 	b.w	80100ba <__retarget_lock_acquire_recursive>
 800df32:	bf00      	nop
 800df34:	20001574 	.word	0x20001574

0800df38 <__malloc_unlock>:
 800df38:	4801      	ldr	r0, [pc, #4]	@ (800df40 <__malloc_unlock+0x8>)
 800df3a:	f002 b8bf 	b.w	80100bc <__retarget_lock_release_recursive>
 800df3e:	bf00      	nop
 800df40:	20001574 	.word	0x20001574

0800df44 <sulp>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	4604      	mov	r4, r0
 800df48:	460d      	mov	r5, r1
 800df4a:	ec45 4b10 	vmov	d0, r4, r5
 800df4e:	4616      	mov	r6, r2
 800df50:	f003 fe50 	bl	8011bf4 <__ulp>
 800df54:	ec51 0b10 	vmov	r0, r1, d0
 800df58:	b17e      	cbz	r6, 800df7a <sulp+0x36>
 800df5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800df5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800df62:	2b00      	cmp	r3, #0
 800df64:	dd09      	ble.n	800df7a <sulp+0x36>
 800df66:	051b      	lsls	r3, r3, #20
 800df68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800df6c:	2400      	movs	r4, #0
 800df6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800df72:	4622      	mov	r2, r4
 800df74:	462b      	mov	r3, r5
 800df76:	f7f2 fb67 	bl	8000648 <__aeabi_dmul>
 800df7a:	ec41 0b10 	vmov	d0, r0, r1
 800df7e:	bd70      	pop	{r4, r5, r6, pc}

0800df80 <_strtod_l>:
 800df80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df84:	b09f      	sub	sp, #124	@ 0x7c
 800df86:	460c      	mov	r4, r1
 800df88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800df8a:	2200      	movs	r2, #0
 800df8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800df8e:	9005      	str	r0, [sp, #20]
 800df90:	f04f 0a00 	mov.w	sl, #0
 800df94:	f04f 0b00 	mov.w	fp, #0
 800df98:	460a      	mov	r2, r1
 800df9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800df9c:	7811      	ldrb	r1, [r2, #0]
 800df9e:	292b      	cmp	r1, #43	@ 0x2b
 800dfa0:	d04a      	beq.n	800e038 <_strtod_l+0xb8>
 800dfa2:	d838      	bhi.n	800e016 <_strtod_l+0x96>
 800dfa4:	290d      	cmp	r1, #13
 800dfa6:	d832      	bhi.n	800e00e <_strtod_l+0x8e>
 800dfa8:	2908      	cmp	r1, #8
 800dfaa:	d832      	bhi.n	800e012 <_strtod_l+0x92>
 800dfac:	2900      	cmp	r1, #0
 800dfae:	d03b      	beq.n	800e028 <_strtod_l+0xa8>
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dfb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dfb6:	782a      	ldrb	r2, [r5, #0]
 800dfb8:	2a30      	cmp	r2, #48	@ 0x30
 800dfba:	f040 80b3 	bne.w	800e124 <_strtod_l+0x1a4>
 800dfbe:	786a      	ldrb	r2, [r5, #1]
 800dfc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dfc4:	2a58      	cmp	r2, #88	@ 0x58
 800dfc6:	d16e      	bne.n	800e0a6 <_strtod_l+0x126>
 800dfc8:	9302      	str	r3, [sp, #8]
 800dfca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfcc:	9301      	str	r3, [sp, #4]
 800dfce:	ab1a      	add	r3, sp, #104	@ 0x68
 800dfd0:	9300      	str	r3, [sp, #0]
 800dfd2:	4a8e      	ldr	r2, [pc, #568]	@ (800e20c <_strtod_l+0x28c>)
 800dfd4:	9805      	ldr	r0, [sp, #20]
 800dfd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dfd8:	a919      	add	r1, sp, #100	@ 0x64
 800dfda:	f002 ffb3 	bl	8010f44 <__gethex>
 800dfde:	f010 060f 	ands.w	r6, r0, #15
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	d005      	beq.n	800dff2 <_strtod_l+0x72>
 800dfe6:	2e06      	cmp	r6, #6
 800dfe8:	d128      	bne.n	800e03c <_strtod_l+0xbc>
 800dfea:	3501      	adds	r5, #1
 800dfec:	2300      	movs	r3, #0
 800dfee:	9519      	str	r5, [sp, #100]	@ 0x64
 800dff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dff2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f040 858e 	bne.w	800eb16 <_strtod_l+0xb96>
 800dffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dffc:	b1cb      	cbz	r3, 800e032 <_strtod_l+0xb2>
 800dffe:	4652      	mov	r2, sl
 800e000:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e004:	ec43 2b10 	vmov	d0, r2, r3
 800e008:	b01f      	add	sp, #124	@ 0x7c
 800e00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00e:	2920      	cmp	r1, #32
 800e010:	d1ce      	bne.n	800dfb0 <_strtod_l+0x30>
 800e012:	3201      	adds	r2, #1
 800e014:	e7c1      	b.n	800df9a <_strtod_l+0x1a>
 800e016:	292d      	cmp	r1, #45	@ 0x2d
 800e018:	d1ca      	bne.n	800dfb0 <_strtod_l+0x30>
 800e01a:	2101      	movs	r1, #1
 800e01c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e01e:	1c51      	adds	r1, r2, #1
 800e020:	9119      	str	r1, [sp, #100]	@ 0x64
 800e022:	7852      	ldrb	r2, [r2, #1]
 800e024:	2a00      	cmp	r2, #0
 800e026:	d1c5      	bne.n	800dfb4 <_strtod_l+0x34>
 800e028:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e02a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f040 8570 	bne.w	800eb12 <_strtod_l+0xb92>
 800e032:	4652      	mov	r2, sl
 800e034:	465b      	mov	r3, fp
 800e036:	e7e5      	b.n	800e004 <_strtod_l+0x84>
 800e038:	2100      	movs	r1, #0
 800e03a:	e7ef      	b.n	800e01c <_strtod_l+0x9c>
 800e03c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e03e:	b13a      	cbz	r2, 800e050 <_strtod_l+0xd0>
 800e040:	2135      	movs	r1, #53	@ 0x35
 800e042:	a81c      	add	r0, sp, #112	@ 0x70
 800e044:	f003 fed0 	bl	8011de8 <__copybits>
 800e048:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e04a:	9805      	ldr	r0, [sp, #20]
 800e04c:	f003 fa9e 	bl	801158c <_Bfree>
 800e050:	3e01      	subs	r6, #1
 800e052:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e054:	2e04      	cmp	r6, #4
 800e056:	d806      	bhi.n	800e066 <_strtod_l+0xe6>
 800e058:	e8df f006 	tbb	[pc, r6]
 800e05c:	201d0314 	.word	0x201d0314
 800e060:	14          	.byte	0x14
 800e061:	00          	.byte	0x00
 800e062:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e066:	05e1      	lsls	r1, r4, #23
 800e068:	bf48      	it	mi
 800e06a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e06e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e072:	0d1b      	lsrs	r3, r3, #20
 800e074:	051b      	lsls	r3, r3, #20
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1bb      	bne.n	800dff2 <_strtod_l+0x72>
 800e07a:	f001 fff3 	bl	8010064 <__errno>
 800e07e:	2322      	movs	r3, #34	@ 0x22
 800e080:	6003      	str	r3, [r0, #0]
 800e082:	e7b6      	b.n	800dff2 <_strtod_l+0x72>
 800e084:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e088:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e08c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e090:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e094:	e7e7      	b.n	800e066 <_strtod_l+0xe6>
 800e096:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e214 <_strtod_l+0x294>
 800e09a:	e7e4      	b.n	800e066 <_strtod_l+0xe6>
 800e09c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e0a0:	f04f 3aff 	mov.w	sl, #4294967295
 800e0a4:	e7df      	b.n	800e066 <_strtod_l+0xe6>
 800e0a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0a8:	1c5a      	adds	r2, r3, #1
 800e0aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800e0ac:	785b      	ldrb	r3, [r3, #1]
 800e0ae:	2b30      	cmp	r3, #48	@ 0x30
 800e0b0:	d0f9      	beq.n	800e0a6 <_strtod_l+0x126>
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d09d      	beq.n	800dff2 <_strtod_l+0x72>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e0be:	2300      	movs	r3, #0
 800e0c0:	9308      	str	r3, [sp, #32]
 800e0c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0c4:	461f      	mov	r7, r3
 800e0c6:	220a      	movs	r2, #10
 800e0c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e0ca:	7805      	ldrb	r5, [r0, #0]
 800e0cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e0d0:	b2d9      	uxtb	r1, r3
 800e0d2:	2909      	cmp	r1, #9
 800e0d4:	d928      	bls.n	800e128 <_strtod_l+0x1a8>
 800e0d6:	494e      	ldr	r1, [pc, #312]	@ (800e210 <_strtod_l+0x290>)
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f001 fee5 	bl	800fea8 <strncmp>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d032      	beq.n	800e148 <_strtod_l+0x1c8>
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	462a      	mov	r2, r5
 800e0e6:	4681      	mov	r9, r0
 800e0e8:	463d      	mov	r5, r7
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2a65      	cmp	r2, #101	@ 0x65
 800e0ee:	d001      	beq.n	800e0f4 <_strtod_l+0x174>
 800e0f0:	2a45      	cmp	r2, #69	@ 0x45
 800e0f2:	d114      	bne.n	800e11e <_strtod_l+0x19e>
 800e0f4:	b91d      	cbnz	r5, 800e0fe <_strtod_l+0x17e>
 800e0f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0f8:	4302      	orrs	r2, r0
 800e0fa:	d095      	beq.n	800e028 <_strtod_l+0xa8>
 800e0fc:	2500      	movs	r5, #0
 800e0fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e100:	1c62      	adds	r2, r4, #1
 800e102:	9219      	str	r2, [sp, #100]	@ 0x64
 800e104:	7862      	ldrb	r2, [r4, #1]
 800e106:	2a2b      	cmp	r2, #43	@ 0x2b
 800e108:	d077      	beq.n	800e1fa <_strtod_l+0x27a>
 800e10a:	2a2d      	cmp	r2, #45	@ 0x2d
 800e10c:	d07b      	beq.n	800e206 <_strtod_l+0x286>
 800e10e:	f04f 0c00 	mov.w	ip, #0
 800e112:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e116:	2909      	cmp	r1, #9
 800e118:	f240 8082 	bls.w	800e220 <_strtod_l+0x2a0>
 800e11c:	9419      	str	r4, [sp, #100]	@ 0x64
 800e11e:	f04f 0800 	mov.w	r8, #0
 800e122:	e0a2      	b.n	800e26a <_strtod_l+0x2ea>
 800e124:	2300      	movs	r3, #0
 800e126:	e7c7      	b.n	800e0b8 <_strtod_l+0x138>
 800e128:	2f08      	cmp	r7, #8
 800e12a:	bfd5      	itete	le
 800e12c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e12e:	9908      	ldrgt	r1, [sp, #32]
 800e130:	fb02 3301 	mlale	r3, r2, r1, r3
 800e134:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e138:	f100 0001 	add.w	r0, r0, #1
 800e13c:	bfd4      	ite	le
 800e13e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e140:	9308      	strgt	r3, [sp, #32]
 800e142:	3701      	adds	r7, #1
 800e144:	9019      	str	r0, [sp, #100]	@ 0x64
 800e146:	e7bf      	b.n	800e0c8 <_strtod_l+0x148>
 800e148:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e14a:	1c5a      	adds	r2, r3, #1
 800e14c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e14e:	785a      	ldrb	r2, [r3, #1]
 800e150:	b37f      	cbz	r7, 800e1b2 <_strtod_l+0x232>
 800e152:	4681      	mov	r9, r0
 800e154:	463d      	mov	r5, r7
 800e156:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e15a:	2b09      	cmp	r3, #9
 800e15c:	d912      	bls.n	800e184 <_strtod_l+0x204>
 800e15e:	2301      	movs	r3, #1
 800e160:	e7c4      	b.n	800e0ec <_strtod_l+0x16c>
 800e162:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e164:	1c5a      	adds	r2, r3, #1
 800e166:	9219      	str	r2, [sp, #100]	@ 0x64
 800e168:	785a      	ldrb	r2, [r3, #1]
 800e16a:	3001      	adds	r0, #1
 800e16c:	2a30      	cmp	r2, #48	@ 0x30
 800e16e:	d0f8      	beq.n	800e162 <_strtod_l+0x1e2>
 800e170:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e174:	2b08      	cmp	r3, #8
 800e176:	f200 84d3 	bhi.w	800eb20 <_strtod_l+0xba0>
 800e17a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e17c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e17e:	4681      	mov	r9, r0
 800e180:	2000      	movs	r0, #0
 800e182:	4605      	mov	r5, r0
 800e184:	3a30      	subs	r2, #48	@ 0x30
 800e186:	f100 0301 	add.w	r3, r0, #1
 800e18a:	d02a      	beq.n	800e1e2 <_strtod_l+0x262>
 800e18c:	4499      	add	r9, r3
 800e18e:	eb00 0c05 	add.w	ip, r0, r5
 800e192:	462b      	mov	r3, r5
 800e194:	210a      	movs	r1, #10
 800e196:	4563      	cmp	r3, ip
 800e198:	d10d      	bne.n	800e1b6 <_strtod_l+0x236>
 800e19a:	1c69      	adds	r1, r5, #1
 800e19c:	4401      	add	r1, r0
 800e19e:	4428      	add	r0, r5
 800e1a0:	2808      	cmp	r0, #8
 800e1a2:	dc16      	bgt.n	800e1d2 <_strtod_l+0x252>
 800e1a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e1a6:	230a      	movs	r3, #10
 800e1a8:	fb03 2300 	mla	r3, r3, r0, r2
 800e1ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	e018      	b.n	800e1e4 <_strtod_l+0x264>
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	e7da      	b.n	800e16c <_strtod_l+0x1ec>
 800e1b6:	2b08      	cmp	r3, #8
 800e1b8:	f103 0301 	add.w	r3, r3, #1
 800e1bc:	dc03      	bgt.n	800e1c6 <_strtod_l+0x246>
 800e1be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e1c0:	434e      	muls	r6, r1
 800e1c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800e1c4:	e7e7      	b.n	800e196 <_strtod_l+0x216>
 800e1c6:	2b10      	cmp	r3, #16
 800e1c8:	bfde      	ittt	le
 800e1ca:	9e08      	ldrle	r6, [sp, #32]
 800e1cc:	434e      	mulle	r6, r1
 800e1ce:	9608      	strle	r6, [sp, #32]
 800e1d0:	e7e1      	b.n	800e196 <_strtod_l+0x216>
 800e1d2:	280f      	cmp	r0, #15
 800e1d4:	dceb      	bgt.n	800e1ae <_strtod_l+0x22e>
 800e1d6:	9808      	ldr	r0, [sp, #32]
 800e1d8:	230a      	movs	r3, #10
 800e1da:	fb03 2300 	mla	r3, r3, r0, r2
 800e1de:	9308      	str	r3, [sp, #32]
 800e1e0:	e7e5      	b.n	800e1ae <_strtod_l+0x22e>
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e1e6:	1c50      	adds	r0, r2, #1
 800e1e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800e1ea:	7852      	ldrb	r2, [r2, #1]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	460d      	mov	r5, r1
 800e1f0:	e7b1      	b.n	800e156 <_strtod_l+0x1d6>
 800e1f2:	f04f 0900 	mov.w	r9, #0
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e77d      	b.n	800e0f6 <_strtod_l+0x176>
 800e1fa:	f04f 0c00 	mov.w	ip, #0
 800e1fe:	1ca2      	adds	r2, r4, #2
 800e200:	9219      	str	r2, [sp, #100]	@ 0x64
 800e202:	78a2      	ldrb	r2, [r4, #2]
 800e204:	e785      	b.n	800e112 <_strtod_l+0x192>
 800e206:	f04f 0c01 	mov.w	ip, #1
 800e20a:	e7f8      	b.n	800e1fe <_strtod_l+0x27e>
 800e20c:	08012a10 	.word	0x08012a10
 800e210:	080129f8 	.word	0x080129f8
 800e214:	7ff00000 	.word	0x7ff00000
 800e218:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e21a:	1c51      	adds	r1, r2, #1
 800e21c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e21e:	7852      	ldrb	r2, [r2, #1]
 800e220:	2a30      	cmp	r2, #48	@ 0x30
 800e222:	d0f9      	beq.n	800e218 <_strtod_l+0x298>
 800e224:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e228:	2908      	cmp	r1, #8
 800e22a:	f63f af78 	bhi.w	800e11e <_strtod_l+0x19e>
 800e22e:	3a30      	subs	r2, #48	@ 0x30
 800e230:	920e      	str	r2, [sp, #56]	@ 0x38
 800e232:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e234:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e236:	f04f 080a 	mov.w	r8, #10
 800e23a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e23c:	1c56      	adds	r6, r2, #1
 800e23e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e240:	7852      	ldrb	r2, [r2, #1]
 800e242:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e246:	f1be 0f09 	cmp.w	lr, #9
 800e24a:	d939      	bls.n	800e2c0 <_strtod_l+0x340>
 800e24c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e24e:	1a76      	subs	r6, r6, r1
 800e250:	2e08      	cmp	r6, #8
 800e252:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e256:	dc03      	bgt.n	800e260 <_strtod_l+0x2e0>
 800e258:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e25a:	4588      	cmp	r8, r1
 800e25c:	bfa8      	it	ge
 800e25e:	4688      	movge	r8, r1
 800e260:	f1bc 0f00 	cmp.w	ip, #0
 800e264:	d001      	beq.n	800e26a <_strtod_l+0x2ea>
 800e266:	f1c8 0800 	rsb	r8, r8, #0
 800e26a:	2d00      	cmp	r5, #0
 800e26c:	d14e      	bne.n	800e30c <_strtod_l+0x38c>
 800e26e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e270:	4308      	orrs	r0, r1
 800e272:	f47f aebe 	bne.w	800dff2 <_strtod_l+0x72>
 800e276:	2b00      	cmp	r3, #0
 800e278:	f47f aed6 	bne.w	800e028 <_strtod_l+0xa8>
 800e27c:	2a69      	cmp	r2, #105	@ 0x69
 800e27e:	d028      	beq.n	800e2d2 <_strtod_l+0x352>
 800e280:	dc25      	bgt.n	800e2ce <_strtod_l+0x34e>
 800e282:	2a49      	cmp	r2, #73	@ 0x49
 800e284:	d025      	beq.n	800e2d2 <_strtod_l+0x352>
 800e286:	2a4e      	cmp	r2, #78	@ 0x4e
 800e288:	f47f aece 	bne.w	800e028 <_strtod_l+0xa8>
 800e28c:	499b      	ldr	r1, [pc, #620]	@ (800e4fc <_strtod_l+0x57c>)
 800e28e:	a819      	add	r0, sp, #100	@ 0x64
 800e290:	f003 f87a 	bl	8011388 <__match>
 800e294:	2800      	cmp	r0, #0
 800e296:	f43f aec7 	beq.w	800e028 <_strtod_l+0xa8>
 800e29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	2b28      	cmp	r3, #40	@ 0x28
 800e2a0:	d12e      	bne.n	800e300 <_strtod_l+0x380>
 800e2a2:	4997      	ldr	r1, [pc, #604]	@ (800e500 <_strtod_l+0x580>)
 800e2a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800e2a6:	a819      	add	r0, sp, #100	@ 0x64
 800e2a8:	f003 f882 	bl	80113b0 <__hexnan>
 800e2ac:	2805      	cmp	r0, #5
 800e2ae:	d127      	bne.n	800e300 <_strtod_l+0x380>
 800e2b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e2b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e2b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e2ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e2be:	e698      	b.n	800dff2 <_strtod_l+0x72>
 800e2c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e2c2:	fb08 2101 	mla	r1, r8, r1, r2
 800e2c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e2ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800e2cc:	e7b5      	b.n	800e23a <_strtod_l+0x2ba>
 800e2ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800e2d0:	e7da      	b.n	800e288 <_strtod_l+0x308>
 800e2d2:	498c      	ldr	r1, [pc, #560]	@ (800e504 <_strtod_l+0x584>)
 800e2d4:	a819      	add	r0, sp, #100	@ 0x64
 800e2d6:	f003 f857 	bl	8011388 <__match>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	f43f aea4 	beq.w	800e028 <_strtod_l+0xa8>
 800e2e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2e2:	4989      	ldr	r1, [pc, #548]	@ (800e508 <_strtod_l+0x588>)
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	a819      	add	r0, sp, #100	@ 0x64
 800e2e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800e2ea:	f003 f84d 	bl	8011388 <__match>
 800e2ee:	b910      	cbnz	r0, 800e2f6 <_strtod_l+0x376>
 800e2f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e2f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e518 <_strtod_l+0x598>
 800e2fa:	f04f 0a00 	mov.w	sl, #0
 800e2fe:	e678      	b.n	800dff2 <_strtod_l+0x72>
 800e300:	4882      	ldr	r0, [pc, #520]	@ (800e50c <_strtod_l+0x58c>)
 800e302:	f001 fef5 	bl	80100f0 <nan>
 800e306:	ec5b ab10 	vmov	sl, fp, d0
 800e30a:	e672      	b.n	800dff2 <_strtod_l+0x72>
 800e30c:	eba8 0309 	sub.w	r3, r8, r9
 800e310:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e312:	9309      	str	r3, [sp, #36]	@ 0x24
 800e314:	2f00      	cmp	r7, #0
 800e316:	bf08      	it	eq
 800e318:	462f      	moveq	r7, r5
 800e31a:	2d10      	cmp	r5, #16
 800e31c:	462c      	mov	r4, r5
 800e31e:	bfa8      	it	ge
 800e320:	2410      	movge	r4, #16
 800e322:	f7f2 f917 	bl	8000554 <__aeabi_ui2d>
 800e326:	2d09      	cmp	r5, #9
 800e328:	4682      	mov	sl, r0
 800e32a:	468b      	mov	fp, r1
 800e32c:	dc13      	bgt.n	800e356 <_strtod_l+0x3d6>
 800e32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e330:	2b00      	cmp	r3, #0
 800e332:	f43f ae5e 	beq.w	800dff2 <_strtod_l+0x72>
 800e336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e338:	dd78      	ble.n	800e42c <_strtod_l+0x4ac>
 800e33a:	2b16      	cmp	r3, #22
 800e33c:	dc5f      	bgt.n	800e3fe <_strtod_l+0x47e>
 800e33e:	4974      	ldr	r1, [pc, #464]	@ (800e510 <_strtod_l+0x590>)
 800e340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e348:	4652      	mov	r2, sl
 800e34a:	465b      	mov	r3, fp
 800e34c:	f7f2 f97c 	bl	8000648 <__aeabi_dmul>
 800e350:	4682      	mov	sl, r0
 800e352:	468b      	mov	fp, r1
 800e354:	e64d      	b.n	800dff2 <_strtod_l+0x72>
 800e356:	4b6e      	ldr	r3, [pc, #440]	@ (800e510 <_strtod_l+0x590>)
 800e358:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e35c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e360:	f7f2 f972 	bl	8000648 <__aeabi_dmul>
 800e364:	4682      	mov	sl, r0
 800e366:	9808      	ldr	r0, [sp, #32]
 800e368:	468b      	mov	fp, r1
 800e36a:	f7f2 f8f3 	bl	8000554 <__aeabi_ui2d>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	4650      	mov	r0, sl
 800e374:	4659      	mov	r1, fp
 800e376:	f7f1 ffb1 	bl	80002dc <__adddf3>
 800e37a:	2d0f      	cmp	r5, #15
 800e37c:	4682      	mov	sl, r0
 800e37e:	468b      	mov	fp, r1
 800e380:	ddd5      	ble.n	800e32e <_strtod_l+0x3ae>
 800e382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e384:	1b2c      	subs	r4, r5, r4
 800e386:	441c      	add	r4, r3
 800e388:	2c00      	cmp	r4, #0
 800e38a:	f340 8096 	ble.w	800e4ba <_strtod_l+0x53a>
 800e38e:	f014 030f 	ands.w	r3, r4, #15
 800e392:	d00a      	beq.n	800e3aa <_strtod_l+0x42a>
 800e394:	495e      	ldr	r1, [pc, #376]	@ (800e510 <_strtod_l+0x590>)
 800e396:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e39a:	4652      	mov	r2, sl
 800e39c:	465b      	mov	r3, fp
 800e39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3a2:	f7f2 f951 	bl	8000648 <__aeabi_dmul>
 800e3a6:	4682      	mov	sl, r0
 800e3a8:	468b      	mov	fp, r1
 800e3aa:	f034 040f 	bics.w	r4, r4, #15
 800e3ae:	d073      	beq.n	800e498 <_strtod_l+0x518>
 800e3b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e3b4:	dd48      	ble.n	800e448 <_strtod_l+0x4c8>
 800e3b6:	2400      	movs	r4, #0
 800e3b8:	46a0      	mov	r8, r4
 800e3ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800e3bc:	46a1      	mov	r9, r4
 800e3be:	9a05      	ldr	r2, [sp, #20]
 800e3c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e518 <_strtod_l+0x598>
 800e3c4:	2322      	movs	r3, #34	@ 0x22
 800e3c6:	6013      	str	r3, [r2, #0]
 800e3c8:	f04f 0a00 	mov.w	sl, #0
 800e3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f43f ae0f 	beq.w	800dff2 <_strtod_l+0x72>
 800e3d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e3d6:	9805      	ldr	r0, [sp, #20]
 800e3d8:	f003 f8d8 	bl	801158c <_Bfree>
 800e3dc:	9805      	ldr	r0, [sp, #20]
 800e3de:	4649      	mov	r1, r9
 800e3e0:	f003 f8d4 	bl	801158c <_Bfree>
 800e3e4:	9805      	ldr	r0, [sp, #20]
 800e3e6:	4641      	mov	r1, r8
 800e3e8:	f003 f8d0 	bl	801158c <_Bfree>
 800e3ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3ee:	9805      	ldr	r0, [sp, #20]
 800e3f0:	f003 f8cc 	bl	801158c <_Bfree>
 800e3f4:	9805      	ldr	r0, [sp, #20]
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	f003 f8c8 	bl	801158c <_Bfree>
 800e3fc:	e5f9      	b.n	800dff2 <_strtod_l+0x72>
 800e3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e400:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e404:	4293      	cmp	r3, r2
 800e406:	dbbc      	blt.n	800e382 <_strtod_l+0x402>
 800e408:	4c41      	ldr	r4, [pc, #260]	@ (800e510 <_strtod_l+0x590>)
 800e40a:	f1c5 050f 	rsb	r5, r5, #15
 800e40e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e412:	4652      	mov	r2, sl
 800e414:	465b      	mov	r3, fp
 800e416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e41a:	f7f2 f915 	bl	8000648 <__aeabi_dmul>
 800e41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e420:	1b5d      	subs	r5, r3, r5
 800e422:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e426:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e42a:	e78f      	b.n	800e34c <_strtod_l+0x3cc>
 800e42c:	3316      	adds	r3, #22
 800e42e:	dba8      	blt.n	800e382 <_strtod_l+0x402>
 800e430:	4b37      	ldr	r3, [pc, #220]	@ (800e510 <_strtod_l+0x590>)
 800e432:	eba9 0808 	sub.w	r8, r9, r8
 800e436:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e43a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e43e:	4650      	mov	r0, sl
 800e440:	4659      	mov	r1, fp
 800e442:	f7f2 fa2b 	bl	800089c <__aeabi_ddiv>
 800e446:	e783      	b.n	800e350 <_strtod_l+0x3d0>
 800e448:	4b32      	ldr	r3, [pc, #200]	@ (800e514 <_strtod_l+0x594>)
 800e44a:	9308      	str	r3, [sp, #32]
 800e44c:	2300      	movs	r3, #0
 800e44e:	1124      	asrs	r4, r4, #4
 800e450:	4650      	mov	r0, sl
 800e452:	4659      	mov	r1, fp
 800e454:	461e      	mov	r6, r3
 800e456:	2c01      	cmp	r4, #1
 800e458:	dc21      	bgt.n	800e49e <_strtod_l+0x51e>
 800e45a:	b10b      	cbz	r3, 800e460 <_strtod_l+0x4e0>
 800e45c:	4682      	mov	sl, r0
 800e45e:	468b      	mov	fp, r1
 800e460:	492c      	ldr	r1, [pc, #176]	@ (800e514 <_strtod_l+0x594>)
 800e462:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e466:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e46a:	4652      	mov	r2, sl
 800e46c:	465b      	mov	r3, fp
 800e46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e472:	f7f2 f8e9 	bl	8000648 <__aeabi_dmul>
 800e476:	4b28      	ldr	r3, [pc, #160]	@ (800e518 <_strtod_l+0x598>)
 800e478:	460a      	mov	r2, r1
 800e47a:	400b      	ands	r3, r1
 800e47c:	4927      	ldr	r1, [pc, #156]	@ (800e51c <_strtod_l+0x59c>)
 800e47e:	428b      	cmp	r3, r1
 800e480:	4682      	mov	sl, r0
 800e482:	d898      	bhi.n	800e3b6 <_strtod_l+0x436>
 800e484:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e488:	428b      	cmp	r3, r1
 800e48a:	bf86      	itte	hi
 800e48c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e520 <_strtod_l+0x5a0>
 800e490:	f04f 3aff 	movhi.w	sl, #4294967295
 800e494:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e498:	2300      	movs	r3, #0
 800e49a:	9308      	str	r3, [sp, #32]
 800e49c:	e07a      	b.n	800e594 <_strtod_l+0x614>
 800e49e:	07e2      	lsls	r2, r4, #31
 800e4a0:	d505      	bpl.n	800e4ae <_strtod_l+0x52e>
 800e4a2:	9b08      	ldr	r3, [sp, #32]
 800e4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a8:	f7f2 f8ce 	bl	8000648 <__aeabi_dmul>
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	9a08      	ldr	r2, [sp, #32]
 800e4b0:	3208      	adds	r2, #8
 800e4b2:	3601      	adds	r6, #1
 800e4b4:	1064      	asrs	r4, r4, #1
 800e4b6:	9208      	str	r2, [sp, #32]
 800e4b8:	e7cd      	b.n	800e456 <_strtod_l+0x4d6>
 800e4ba:	d0ed      	beq.n	800e498 <_strtod_l+0x518>
 800e4bc:	4264      	negs	r4, r4
 800e4be:	f014 020f 	ands.w	r2, r4, #15
 800e4c2:	d00a      	beq.n	800e4da <_strtod_l+0x55a>
 800e4c4:	4b12      	ldr	r3, [pc, #72]	@ (800e510 <_strtod_l+0x590>)
 800e4c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4ca:	4650      	mov	r0, sl
 800e4cc:	4659      	mov	r1, fp
 800e4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d2:	f7f2 f9e3 	bl	800089c <__aeabi_ddiv>
 800e4d6:	4682      	mov	sl, r0
 800e4d8:	468b      	mov	fp, r1
 800e4da:	1124      	asrs	r4, r4, #4
 800e4dc:	d0dc      	beq.n	800e498 <_strtod_l+0x518>
 800e4de:	2c1f      	cmp	r4, #31
 800e4e0:	dd20      	ble.n	800e524 <_strtod_l+0x5a4>
 800e4e2:	2400      	movs	r4, #0
 800e4e4:	46a0      	mov	r8, r4
 800e4e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800e4e8:	46a1      	mov	r9, r4
 800e4ea:	9a05      	ldr	r2, [sp, #20]
 800e4ec:	2322      	movs	r3, #34	@ 0x22
 800e4ee:	f04f 0a00 	mov.w	sl, #0
 800e4f2:	f04f 0b00 	mov.w	fp, #0
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	e768      	b.n	800e3cc <_strtod_l+0x44c>
 800e4fa:	bf00      	nop
 800e4fc:	08012b5e 	.word	0x08012b5e
 800e500:	080129fc 	.word	0x080129fc
 800e504:	08012b56 	.word	0x08012b56
 800e508:	08012c42 	.word	0x08012c42
 800e50c:	08012c3e 	.word	0x08012c3e
 800e510:	08012da8 	.word	0x08012da8
 800e514:	08012d80 	.word	0x08012d80
 800e518:	7ff00000 	.word	0x7ff00000
 800e51c:	7ca00000 	.word	0x7ca00000
 800e520:	7fefffff 	.word	0x7fefffff
 800e524:	f014 0310 	ands.w	r3, r4, #16
 800e528:	bf18      	it	ne
 800e52a:	236a      	movne	r3, #106	@ 0x6a
 800e52c:	4ea9      	ldr	r6, [pc, #676]	@ (800e7d4 <_strtod_l+0x854>)
 800e52e:	9308      	str	r3, [sp, #32]
 800e530:	4650      	mov	r0, sl
 800e532:	4659      	mov	r1, fp
 800e534:	2300      	movs	r3, #0
 800e536:	07e2      	lsls	r2, r4, #31
 800e538:	d504      	bpl.n	800e544 <_strtod_l+0x5c4>
 800e53a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e53e:	f7f2 f883 	bl	8000648 <__aeabi_dmul>
 800e542:	2301      	movs	r3, #1
 800e544:	1064      	asrs	r4, r4, #1
 800e546:	f106 0608 	add.w	r6, r6, #8
 800e54a:	d1f4      	bne.n	800e536 <_strtod_l+0x5b6>
 800e54c:	b10b      	cbz	r3, 800e552 <_strtod_l+0x5d2>
 800e54e:	4682      	mov	sl, r0
 800e550:	468b      	mov	fp, r1
 800e552:	9b08      	ldr	r3, [sp, #32]
 800e554:	b1b3      	cbz	r3, 800e584 <_strtod_l+0x604>
 800e556:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e55a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e55e:	2b00      	cmp	r3, #0
 800e560:	4659      	mov	r1, fp
 800e562:	dd0f      	ble.n	800e584 <_strtod_l+0x604>
 800e564:	2b1f      	cmp	r3, #31
 800e566:	dd55      	ble.n	800e614 <_strtod_l+0x694>
 800e568:	2b34      	cmp	r3, #52	@ 0x34
 800e56a:	bfde      	ittt	le
 800e56c:	f04f 33ff 	movle.w	r3, #4294967295
 800e570:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e574:	4093      	lslle	r3, r2
 800e576:	f04f 0a00 	mov.w	sl, #0
 800e57a:	bfcc      	ite	gt
 800e57c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e580:	ea03 0b01 	andle.w	fp, r3, r1
 800e584:	2200      	movs	r2, #0
 800e586:	2300      	movs	r3, #0
 800e588:	4650      	mov	r0, sl
 800e58a:	4659      	mov	r1, fp
 800e58c:	f7f2 fac4 	bl	8000b18 <__aeabi_dcmpeq>
 800e590:	2800      	cmp	r0, #0
 800e592:	d1a6      	bne.n	800e4e2 <_strtod_l+0x562>
 800e594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e596:	9300      	str	r3, [sp, #0]
 800e598:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e59a:	9805      	ldr	r0, [sp, #20]
 800e59c:	462b      	mov	r3, r5
 800e59e:	463a      	mov	r2, r7
 800e5a0:	f003 f85c 	bl	801165c <__s2b>
 800e5a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	f43f af05 	beq.w	800e3b6 <_strtod_l+0x436>
 800e5ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5ae:	2a00      	cmp	r2, #0
 800e5b0:	eba9 0308 	sub.w	r3, r9, r8
 800e5b4:	bfa8      	it	ge
 800e5b6:	2300      	movge	r3, #0
 800e5b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e5ba:	2400      	movs	r4, #0
 800e5bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e5c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800e5c2:	46a0      	mov	r8, r4
 800e5c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5c6:	9805      	ldr	r0, [sp, #20]
 800e5c8:	6859      	ldr	r1, [r3, #4]
 800e5ca:	f002 ff9f 	bl	801150c <_Balloc>
 800e5ce:	4681      	mov	r9, r0
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	f43f aef4 	beq.w	800e3be <_strtod_l+0x43e>
 800e5d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5d8:	691a      	ldr	r2, [r3, #16]
 800e5da:	3202      	adds	r2, #2
 800e5dc:	f103 010c 	add.w	r1, r3, #12
 800e5e0:	0092      	lsls	r2, r2, #2
 800e5e2:	300c      	adds	r0, #12
 800e5e4:	f001 fd73 	bl	80100ce <memcpy>
 800e5e8:	ec4b ab10 	vmov	d0, sl, fp
 800e5ec:	9805      	ldr	r0, [sp, #20]
 800e5ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800e5f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800e5f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e5f6:	f003 fb6d 	bl	8011cd4 <__d2b>
 800e5fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f43f aede 	beq.w	800e3be <_strtod_l+0x43e>
 800e602:	9805      	ldr	r0, [sp, #20]
 800e604:	2101      	movs	r1, #1
 800e606:	f003 f8bf 	bl	8011788 <__i2b>
 800e60a:	4680      	mov	r8, r0
 800e60c:	b948      	cbnz	r0, 800e622 <_strtod_l+0x6a2>
 800e60e:	f04f 0800 	mov.w	r8, #0
 800e612:	e6d4      	b.n	800e3be <_strtod_l+0x43e>
 800e614:	f04f 32ff 	mov.w	r2, #4294967295
 800e618:	fa02 f303 	lsl.w	r3, r2, r3
 800e61c:	ea03 0a0a 	and.w	sl, r3, sl
 800e620:	e7b0      	b.n	800e584 <_strtod_l+0x604>
 800e622:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e624:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e626:	2d00      	cmp	r5, #0
 800e628:	bfab      	itete	ge
 800e62a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e62c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e62e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e630:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e632:	bfac      	ite	ge
 800e634:	18ef      	addge	r7, r5, r3
 800e636:	1b5e      	sublt	r6, r3, r5
 800e638:	9b08      	ldr	r3, [sp, #32]
 800e63a:	1aed      	subs	r5, r5, r3
 800e63c:	4415      	add	r5, r2
 800e63e:	4b66      	ldr	r3, [pc, #408]	@ (800e7d8 <_strtod_l+0x858>)
 800e640:	3d01      	subs	r5, #1
 800e642:	429d      	cmp	r5, r3
 800e644:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e648:	da50      	bge.n	800e6ec <_strtod_l+0x76c>
 800e64a:	1b5b      	subs	r3, r3, r5
 800e64c:	2b1f      	cmp	r3, #31
 800e64e:	eba2 0203 	sub.w	r2, r2, r3
 800e652:	f04f 0101 	mov.w	r1, #1
 800e656:	dc3d      	bgt.n	800e6d4 <_strtod_l+0x754>
 800e658:	fa01 f303 	lsl.w	r3, r1, r3
 800e65c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e65e:	2300      	movs	r3, #0
 800e660:	9310      	str	r3, [sp, #64]	@ 0x40
 800e662:	18bd      	adds	r5, r7, r2
 800e664:	9b08      	ldr	r3, [sp, #32]
 800e666:	42af      	cmp	r7, r5
 800e668:	4416      	add	r6, r2
 800e66a:	441e      	add	r6, r3
 800e66c:	463b      	mov	r3, r7
 800e66e:	bfa8      	it	ge
 800e670:	462b      	movge	r3, r5
 800e672:	42b3      	cmp	r3, r6
 800e674:	bfa8      	it	ge
 800e676:	4633      	movge	r3, r6
 800e678:	2b00      	cmp	r3, #0
 800e67a:	bfc2      	ittt	gt
 800e67c:	1aed      	subgt	r5, r5, r3
 800e67e:	1af6      	subgt	r6, r6, r3
 800e680:	1aff      	subgt	r7, r7, r3
 800e682:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e684:	2b00      	cmp	r3, #0
 800e686:	dd16      	ble.n	800e6b6 <_strtod_l+0x736>
 800e688:	4641      	mov	r1, r8
 800e68a:	9805      	ldr	r0, [sp, #20]
 800e68c:	461a      	mov	r2, r3
 800e68e:	f003 f93b 	bl	8011908 <__pow5mult>
 800e692:	4680      	mov	r8, r0
 800e694:	2800      	cmp	r0, #0
 800e696:	d0ba      	beq.n	800e60e <_strtod_l+0x68e>
 800e698:	4601      	mov	r1, r0
 800e69a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e69c:	9805      	ldr	r0, [sp, #20]
 800e69e:	f003 f889 	bl	80117b4 <__multiply>
 800e6a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	f43f ae8a 	beq.w	800e3be <_strtod_l+0x43e>
 800e6aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e6ac:	9805      	ldr	r0, [sp, #20]
 800e6ae:	f002 ff6d 	bl	801158c <_Bfree>
 800e6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6b6:	2d00      	cmp	r5, #0
 800e6b8:	dc1d      	bgt.n	800e6f6 <_strtod_l+0x776>
 800e6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	dd23      	ble.n	800e708 <_strtod_l+0x788>
 800e6c0:	4649      	mov	r1, r9
 800e6c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e6c4:	9805      	ldr	r0, [sp, #20]
 800e6c6:	f003 f91f 	bl	8011908 <__pow5mult>
 800e6ca:	4681      	mov	r9, r0
 800e6cc:	b9e0      	cbnz	r0, 800e708 <_strtod_l+0x788>
 800e6ce:	f04f 0900 	mov.w	r9, #0
 800e6d2:	e674      	b.n	800e3be <_strtod_l+0x43e>
 800e6d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e6d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e6dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e6e0:	35e2      	adds	r5, #226	@ 0xe2
 800e6e2:	fa01 f305 	lsl.w	r3, r1, r5
 800e6e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e6ea:	e7ba      	b.n	800e662 <_strtod_l+0x6e2>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e6f4:	e7b5      	b.n	800e662 <_strtod_l+0x6e2>
 800e6f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e6f8:	9805      	ldr	r0, [sp, #20]
 800e6fa:	462a      	mov	r2, r5
 800e6fc:	f003 f95e 	bl	80119bc <__lshift>
 800e700:	901a      	str	r0, [sp, #104]	@ 0x68
 800e702:	2800      	cmp	r0, #0
 800e704:	d1d9      	bne.n	800e6ba <_strtod_l+0x73a>
 800e706:	e65a      	b.n	800e3be <_strtod_l+0x43e>
 800e708:	2e00      	cmp	r6, #0
 800e70a:	dd07      	ble.n	800e71c <_strtod_l+0x79c>
 800e70c:	4649      	mov	r1, r9
 800e70e:	9805      	ldr	r0, [sp, #20]
 800e710:	4632      	mov	r2, r6
 800e712:	f003 f953 	bl	80119bc <__lshift>
 800e716:	4681      	mov	r9, r0
 800e718:	2800      	cmp	r0, #0
 800e71a:	d0d8      	beq.n	800e6ce <_strtod_l+0x74e>
 800e71c:	2f00      	cmp	r7, #0
 800e71e:	dd08      	ble.n	800e732 <_strtod_l+0x7b2>
 800e720:	4641      	mov	r1, r8
 800e722:	9805      	ldr	r0, [sp, #20]
 800e724:	463a      	mov	r2, r7
 800e726:	f003 f949 	bl	80119bc <__lshift>
 800e72a:	4680      	mov	r8, r0
 800e72c:	2800      	cmp	r0, #0
 800e72e:	f43f ae46 	beq.w	800e3be <_strtod_l+0x43e>
 800e732:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e734:	9805      	ldr	r0, [sp, #20]
 800e736:	464a      	mov	r2, r9
 800e738:	f003 f9c8 	bl	8011acc <__mdiff>
 800e73c:	4604      	mov	r4, r0
 800e73e:	2800      	cmp	r0, #0
 800e740:	f43f ae3d 	beq.w	800e3be <_strtod_l+0x43e>
 800e744:	68c3      	ldr	r3, [r0, #12]
 800e746:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e748:	2300      	movs	r3, #0
 800e74a:	60c3      	str	r3, [r0, #12]
 800e74c:	4641      	mov	r1, r8
 800e74e:	f003 f9a1 	bl	8011a94 <__mcmp>
 800e752:	2800      	cmp	r0, #0
 800e754:	da46      	bge.n	800e7e4 <_strtod_l+0x864>
 800e756:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e758:	ea53 030a 	orrs.w	r3, r3, sl
 800e75c:	d16c      	bne.n	800e838 <_strtod_l+0x8b8>
 800e75e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e762:	2b00      	cmp	r3, #0
 800e764:	d168      	bne.n	800e838 <_strtod_l+0x8b8>
 800e766:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e76a:	0d1b      	lsrs	r3, r3, #20
 800e76c:	051b      	lsls	r3, r3, #20
 800e76e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e772:	d961      	bls.n	800e838 <_strtod_l+0x8b8>
 800e774:	6963      	ldr	r3, [r4, #20]
 800e776:	b913      	cbnz	r3, 800e77e <_strtod_l+0x7fe>
 800e778:	6923      	ldr	r3, [r4, #16]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	dd5c      	ble.n	800e838 <_strtod_l+0x8b8>
 800e77e:	4621      	mov	r1, r4
 800e780:	2201      	movs	r2, #1
 800e782:	9805      	ldr	r0, [sp, #20]
 800e784:	f003 f91a 	bl	80119bc <__lshift>
 800e788:	4641      	mov	r1, r8
 800e78a:	4604      	mov	r4, r0
 800e78c:	f003 f982 	bl	8011a94 <__mcmp>
 800e790:	2800      	cmp	r0, #0
 800e792:	dd51      	ble.n	800e838 <_strtod_l+0x8b8>
 800e794:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e798:	9a08      	ldr	r2, [sp, #32]
 800e79a:	0d1b      	lsrs	r3, r3, #20
 800e79c:	051b      	lsls	r3, r3, #20
 800e79e:	2a00      	cmp	r2, #0
 800e7a0:	d06b      	beq.n	800e87a <_strtod_l+0x8fa>
 800e7a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e7a6:	d868      	bhi.n	800e87a <_strtod_l+0x8fa>
 800e7a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e7ac:	f67f ae9d 	bls.w	800e4ea <_strtod_l+0x56a>
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e7dc <_strtod_l+0x85c>)
 800e7b2:	4650      	mov	r0, sl
 800e7b4:	4659      	mov	r1, fp
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f7f1 ff46 	bl	8000648 <__aeabi_dmul>
 800e7bc:	4b08      	ldr	r3, [pc, #32]	@ (800e7e0 <_strtod_l+0x860>)
 800e7be:	400b      	ands	r3, r1
 800e7c0:	4682      	mov	sl, r0
 800e7c2:	468b      	mov	fp, r1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f47f ae05 	bne.w	800e3d4 <_strtod_l+0x454>
 800e7ca:	9a05      	ldr	r2, [sp, #20]
 800e7cc:	2322      	movs	r3, #34	@ 0x22
 800e7ce:	6013      	str	r3, [r2, #0]
 800e7d0:	e600      	b.n	800e3d4 <_strtod_l+0x454>
 800e7d2:	bf00      	nop
 800e7d4:	08012a28 	.word	0x08012a28
 800e7d8:	fffffc02 	.word	0xfffffc02
 800e7dc:	39500000 	.word	0x39500000
 800e7e0:	7ff00000 	.word	0x7ff00000
 800e7e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e7e8:	d165      	bne.n	800e8b6 <_strtod_l+0x936>
 800e7ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7f0:	b35a      	cbz	r2, 800e84a <_strtod_l+0x8ca>
 800e7f2:	4a9f      	ldr	r2, [pc, #636]	@ (800ea70 <_strtod_l+0xaf0>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d12b      	bne.n	800e850 <_strtod_l+0x8d0>
 800e7f8:	9b08      	ldr	r3, [sp, #32]
 800e7fa:	4651      	mov	r1, sl
 800e7fc:	b303      	cbz	r3, 800e840 <_strtod_l+0x8c0>
 800e7fe:	4b9d      	ldr	r3, [pc, #628]	@ (800ea74 <_strtod_l+0xaf4>)
 800e800:	465a      	mov	r2, fp
 800e802:	4013      	ands	r3, r2
 800e804:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e808:	f04f 32ff 	mov.w	r2, #4294967295
 800e80c:	d81b      	bhi.n	800e846 <_strtod_l+0x8c6>
 800e80e:	0d1b      	lsrs	r3, r3, #20
 800e810:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e814:	fa02 f303 	lsl.w	r3, r2, r3
 800e818:	4299      	cmp	r1, r3
 800e81a:	d119      	bne.n	800e850 <_strtod_l+0x8d0>
 800e81c:	4b96      	ldr	r3, [pc, #600]	@ (800ea78 <_strtod_l+0xaf8>)
 800e81e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e820:	429a      	cmp	r2, r3
 800e822:	d102      	bne.n	800e82a <_strtod_l+0x8aa>
 800e824:	3101      	adds	r1, #1
 800e826:	f43f adca 	beq.w	800e3be <_strtod_l+0x43e>
 800e82a:	4b92      	ldr	r3, [pc, #584]	@ (800ea74 <_strtod_l+0xaf4>)
 800e82c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e82e:	401a      	ands	r2, r3
 800e830:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e834:	f04f 0a00 	mov.w	sl, #0
 800e838:	9b08      	ldr	r3, [sp, #32]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1b8      	bne.n	800e7b0 <_strtod_l+0x830>
 800e83e:	e5c9      	b.n	800e3d4 <_strtod_l+0x454>
 800e840:	f04f 33ff 	mov.w	r3, #4294967295
 800e844:	e7e8      	b.n	800e818 <_strtod_l+0x898>
 800e846:	4613      	mov	r3, r2
 800e848:	e7e6      	b.n	800e818 <_strtod_l+0x898>
 800e84a:	ea53 030a 	orrs.w	r3, r3, sl
 800e84e:	d0a1      	beq.n	800e794 <_strtod_l+0x814>
 800e850:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e852:	b1db      	cbz	r3, 800e88c <_strtod_l+0x90c>
 800e854:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e856:	4213      	tst	r3, r2
 800e858:	d0ee      	beq.n	800e838 <_strtod_l+0x8b8>
 800e85a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e85c:	9a08      	ldr	r2, [sp, #32]
 800e85e:	4650      	mov	r0, sl
 800e860:	4659      	mov	r1, fp
 800e862:	b1bb      	cbz	r3, 800e894 <_strtod_l+0x914>
 800e864:	f7ff fb6e 	bl	800df44 <sulp>
 800e868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e86c:	ec53 2b10 	vmov	r2, r3, d0
 800e870:	f7f1 fd34 	bl	80002dc <__adddf3>
 800e874:	4682      	mov	sl, r0
 800e876:	468b      	mov	fp, r1
 800e878:	e7de      	b.n	800e838 <_strtod_l+0x8b8>
 800e87a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e87e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e882:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e886:	f04f 3aff 	mov.w	sl, #4294967295
 800e88a:	e7d5      	b.n	800e838 <_strtod_l+0x8b8>
 800e88c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e88e:	ea13 0f0a 	tst.w	r3, sl
 800e892:	e7e1      	b.n	800e858 <_strtod_l+0x8d8>
 800e894:	f7ff fb56 	bl	800df44 <sulp>
 800e898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e89c:	ec53 2b10 	vmov	r2, r3, d0
 800e8a0:	f7f1 fd1a 	bl	80002d8 <__aeabi_dsub>
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	4682      	mov	sl, r0
 800e8aa:	468b      	mov	fp, r1
 800e8ac:	f7f2 f934 	bl	8000b18 <__aeabi_dcmpeq>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	d0c1      	beq.n	800e838 <_strtod_l+0x8b8>
 800e8b4:	e619      	b.n	800e4ea <_strtod_l+0x56a>
 800e8b6:	4641      	mov	r1, r8
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f003 fa63 	bl	8011d84 <__ratio>
 800e8be:	ec57 6b10 	vmov	r6, r7, d0
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	4639      	mov	r1, r7
 800e8cc:	f7f2 f938 	bl	8000b40 <__aeabi_dcmple>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	d06f      	beq.n	800e9b4 <_strtod_l+0xa34>
 800e8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d17a      	bne.n	800e9d0 <_strtod_l+0xa50>
 800e8da:	f1ba 0f00 	cmp.w	sl, #0
 800e8de:	d158      	bne.n	800e992 <_strtod_l+0xa12>
 800e8e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d15a      	bne.n	800e9a0 <_strtod_l+0xa20>
 800e8ea:	4b64      	ldr	r3, [pc, #400]	@ (800ea7c <_strtod_l+0xafc>)
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	f7f2 f91b 	bl	8000b2c <__aeabi_dcmplt>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d159      	bne.n	800e9ae <_strtod_l+0xa2e>
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	4b60      	ldr	r3, [pc, #384]	@ (800ea80 <_strtod_l+0xb00>)
 800e900:	2200      	movs	r2, #0
 800e902:	f7f1 fea1 	bl	8000648 <__aeabi_dmul>
 800e906:	4606      	mov	r6, r0
 800e908:	460f      	mov	r7, r1
 800e90a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e90e:	9606      	str	r6, [sp, #24]
 800e910:	9307      	str	r3, [sp, #28]
 800e912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e916:	4d57      	ldr	r5, [pc, #348]	@ (800ea74 <_strtod_l+0xaf4>)
 800e918:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e91c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e91e:	401d      	ands	r5, r3
 800e920:	4b58      	ldr	r3, [pc, #352]	@ (800ea84 <_strtod_l+0xb04>)
 800e922:	429d      	cmp	r5, r3
 800e924:	f040 80b2 	bne.w	800ea8c <_strtod_l+0xb0c>
 800e928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e92a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e92e:	ec4b ab10 	vmov	d0, sl, fp
 800e932:	f003 f95f 	bl	8011bf4 <__ulp>
 800e936:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e93a:	ec51 0b10 	vmov	r0, r1, d0
 800e93e:	f7f1 fe83 	bl	8000648 <__aeabi_dmul>
 800e942:	4652      	mov	r2, sl
 800e944:	465b      	mov	r3, fp
 800e946:	f7f1 fcc9 	bl	80002dc <__adddf3>
 800e94a:	460b      	mov	r3, r1
 800e94c:	4949      	ldr	r1, [pc, #292]	@ (800ea74 <_strtod_l+0xaf4>)
 800e94e:	4a4e      	ldr	r2, [pc, #312]	@ (800ea88 <_strtod_l+0xb08>)
 800e950:	4019      	ands	r1, r3
 800e952:	4291      	cmp	r1, r2
 800e954:	4682      	mov	sl, r0
 800e956:	d942      	bls.n	800e9de <_strtod_l+0xa5e>
 800e958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e95a:	4b47      	ldr	r3, [pc, #284]	@ (800ea78 <_strtod_l+0xaf8>)
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d103      	bne.n	800e968 <_strtod_l+0x9e8>
 800e960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e962:	3301      	adds	r3, #1
 800e964:	f43f ad2b 	beq.w	800e3be <_strtod_l+0x43e>
 800e968:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ea78 <_strtod_l+0xaf8>
 800e96c:	f04f 3aff 	mov.w	sl, #4294967295
 800e970:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e972:	9805      	ldr	r0, [sp, #20]
 800e974:	f002 fe0a 	bl	801158c <_Bfree>
 800e978:	9805      	ldr	r0, [sp, #20]
 800e97a:	4649      	mov	r1, r9
 800e97c:	f002 fe06 	bl	801158c <_Bfree>
 800e980:	9805      	ldr	r0, [sp, #20]
 800e982:	4641      	mov	r1, r8
 800e984:	f002 fe02 	bl	801158c <_Bfree>
 800e988:	9805      	ldr	r0, [sp, #20]
 800e98a:	4621      	mov	r1, r4
 800e98c:	f002 fdfe 	bl	801158c <_Bfree>
 800e990:	e618      	b.n	800e5c4 <_strtod_l+0x644>
 800e992:	f1ba 0f01 	cmp.w	sl, #1
 800e996:	d103      	bne.n	800e9a0 <_strtod_l+0xa20>
 800e998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f43f ada5 	beq.w	800e4ea <_strtod_l+0x56a>
 800e9a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ea50 <_strtod_l+0xad0>
 800e9a4:	4f35      	ldr	r7, [pc, #212]	@ (800ea7c <_strtod_l+0xafc>)
 800e9a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e9aa:	2600      	movs	r6, #0
 800e9ac:	e7b1      	b.n	800e912 <_strtod_l+0x992>
 800e9ae:	4f34      	ldr	r7, [pc, #208]	@ (800ea80 <_strtod_l+0xb00>)
 800e9b0:	2600      	movs	r6, #0
 800e9b2:	e7aa      	b.n	800e90a <_strtod_l+0x98a>
 800e9b4:	4b32      	ldr	r3, [pc, #200]	@ (800ea80 <_strtod_l+0xb00>)
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	4639      	mov	r1, r7
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f7f1 fe44 	bl	8000648 <__aeabi_dmul>
 800e9c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d09f      	beq.n	800e90a <_strtod_l+0x98a>
 800e9ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e9ce:	e7a0      	b.n	800e912 <_strtod_l+0x992>
 800e9d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ea58 <_strtod_l+0xad8>
 800e9d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e9d8:	ec57 6b17 	vmov	r6, r7, d7
 800e9dc:	e799      	b.n	800e912 <_strtod_l+0x992>
 800e9de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e9e2:	9b08      	ldr	r3, [sp, #32]
 800e9e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1c1      	bne.n	800e970 <_strtod_l+0x9f0>
 800e9ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9f0:	0d1b      	lsrs	r3, r3, #20
 800e9f2:	051b      	lsls	r3, r3, #20
 800e9f4:	429d      	cmp	r5, r3
 800e9f6:	d1bb      	bne.n	800e970 <_strtod_l+0x9f0>
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	4639      	mov	r1, r7
 800e9fc:	f7f2 f984 	bl	8000d08 <__aeabi_d2lz>
 800ea00:	f7f1 fdf4 	bl	80005ec <__aeabi_l2d>
 800ea04:	4602      	mov	r2, r0
 800ea06:	460b      	mov	r3, r1
 800ea08:	4630      	mov	r0, r6
 800ea0a:	4639      	mov	r1, r7
 800ea0c:	f7f1 fc64 	bl	80002d8 <__aeabi_dsub>
 800ea10:	460b      	mov	r3, r1
 800ea12:	4602      	mov	r2, r0
 800ea14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ea18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ea1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea1e:	ea46 060a 	orr.w	r6, r6, sl
 800ea22:	431e      	orrs	r6, r3
 800ea24:	d06f      	beq.n	800eb06 <_strtod_l+0xb86>
 800ea26:	a30e      	add	r3, pc, #56	@ (adr r3, 800ea60 <_strtod_l+0xae0>)
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	f7f2 f87e 	bl	8000b2c <__aeabi_dcmplt>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	f47f accf 	bne.w	800e3d4 <_strtod_l+0x454>
 800ea36:	a30c      	add	r3, pc, #48	@ (adr r3, 800ea68 <_strtod_l+0xae8>)
 800ea38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea40:	f7f2 f892 	bl	8000b68 <__aeabi_dcmpgt>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d093      	beq.n	800e970 <_strtod_l+0x9f0>
 800ea48:	e4c4      	b.n	800e3d4 <_strtod_l+0x454>
 800ea4a:	bf00      	nop
 800ea4c:	f3af 8000 	nop.w
 800ea50:	00000000 	.word	0x00000000
 800ea54:	bff00000 	.word	0xbff00000
 800ea58:	00000000 	.word	0x00000000
 800ea5c:	3ff00000 	.word	0x3ff00000
 800ea60:	94a03595 	.word	0x94a03595
 800ea64:	3fdfffff 	.word	0x3fdfffff
 800ea68:	35afe535 	.word	0x35afe535
 800ea6c:	3fe00000 	.word	0x3fe00000
 800ea70:	000fffff 	.word	0x000fffff
 800ea74:	7ff00000 	.word	0x7ff00000
 800ea78:	7fefffff 	.word	0x7fefffff
 800ea7c:	3ff00000 	.word	0x3ff00000
 800ea80:	3fe00000 	.word	0x3fe00000
 800ea84:	7fe00000 	.word	0x7fe00000
 800ea88:	7c9fffff 	.word	0x7c9fffff
 800ea8c:	9b08      	ldr	r3, [sp, #32]
 800ea8e:	b323      	cbz	r3, 800eada <_strtod_l+0xb5a>
 800ea90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ea94:	d821      	bhi.n	800eada <_strtod_l+0xb5a>
 800ea96:	a328      	add	r3, pc, #160	@ (adr r3, 800eb38 <_strtod_l+0xbb8>)
 800ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	4639      	mov	r1, r7
 800eaa0:	f7f2 f84e 	bl	8000b40 <__aeabi_dcmple>
 800eaa4:	b1a0      	cbz	r0, 800ead0 <_strtod_l+0xb50>
 800eaa6:	4639      	mov	r1, r7
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f7f2 f8a5 	bl	8000bf8 <__aeabi_d2uiz>
 800eaae:	2801      	cmp	r0, #1
 800eab0:	bf38      	it	cc
 800eab2:	2001      	movcc	r0, #1
 800eab4:	f7f1 fd4e 	bl	8000554 <__aeabi_ui2d>
 800eab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaba:	4606      	mov	r6, r0
 800eabc:	460f      	mov	r7, r1
 800eabe:	b9fb      	cbnz	r3, 800eb00 <_strtod_l+0xb80>
 800eac0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eac4:	9014      	str	r0, [sp, #80]	@ 0x50
 800eac6:	9315      	str	r3, [sp, #84]	@ 0x54
 800eac8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800eacc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ead0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ead2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ead6:	1b5b      	subs	r3, r3, r5
 800ead8:	9311      	str	r3, [sp, #68]	@ 0x44
 800eada:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eade:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800eae2:	f003 f887 	bl	8011bf4 <__ulp>
 800eae6:	4650      	mov	r0, sl
 800eae8:	ec53 2b10 	vmov	r2, r3, d0
 800eaec:	4659      	mov	r1, fp
 800eaee:	f7f1 fdab 	bl	8000648 <__aeabi_dmul>
 800eaf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800eaf6:	f7f1 fbf1 	bl	80002dc <__adddf3>
 800eafa:	4682      	mov	sl, r0
 800eafc:	468b      	mov	fp, r1
 800eafe:	e770      	b.n	800e9e2 <_strtod_l+0xa62>
 800eb00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800eb04:	e7e0      	b.n	800eac8 <_strtod_l+0xb48>
 800eb06:	a30e      	add	r3, pc, #56	@ (adr r3, 800eb40 <_strtod_l+0xbc0>)
 800eb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0c:	f7f2 f80e 	bl	8000b2c <__aeabi_dcmplt>
 800eb10:	e798      	b.n	800ea44 <_strtod_l+0xac4>
 800eb12:	2300      	movs	r3, #0
 800eb14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800eb18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb1a:	6013      	str	r3, [r2, #0]
 800eb1c:	f7ff ba6d 	b.w	800dffa <_strtod_l+0x7a>
 800eb20:	2a65      	cmp	r2, #101	@ 0x65
 800eb22:	f43f ab66 	beq.w	800e1f2 <_strtod_l+0x272>
 800eb26:	2a45      	cmp	r2, #69	@ 0x45
 800eb28:	f43f ab63 	beq.w	800e1f2 <_strtod_l+0x272>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	f7ff bb9e 	b.w	800e26e <_strtod_l+0x2ee>
 800eb32:	bf00      	nop
 800eb34:	f3af 8000 	nop.w
 800eb38:	ffc00000 	.word	0xffc00000
 800eb3c:	41dfffff 	.word	0x41dfffff
 800eb40:	94a03595 	.word	0x94a03595
 800eb44:	3fcfffff 	.word	0x3fcfffff

0800eb48 <_strtod_r>:
 800eb48:	4b01      	ldr	r3, [pc, #4]	@ (800eb50 <_strtod_r+0x8>)
 800eb4a:	f7ff ba19 	b.w	800df80 <_strtod_l>
 800eb4e:	bf00      	nop
 800eb50:	20000038 	.word	0x20000038

0800eb54 <strtof>:
 800eb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb58:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800ec18 <strtof+0xc4>
 800eb5c:	4b29      	ldr	r3, [pc, #164]	@ (800ec04 <strtof+0xb0>)
 800eb5e:	460a      	mov	r2, r1
 800eb60:	ed2d 8b02 	vpush	{d8}
 800eb64:	4601      	mov	r1, r0
 800eb66:	f8d8 0000 	ldr.w	r0, [r8]
 800eb6a:	f7ff fa09 	bl	800df80 <_strtod_l>
 800eb6e:	ec55 4b10 	vmov	r4, r5, d0
 800eb72:	4622      	mov	r2, r4
 800eb74:	462b      	mov	r3, r5
 800eb76:	4620      	mov	r0, r4
 800eb78:	4629      	mov	r1, r5
 800eb7a:	f7f1 ffff 	bl	8000b7c <__aeabi_dcmpun>
 800eb7e:	b190      	cbz	r0, 800eba6 <strtof+0x52>
 800eb80:	2d00      	cmp	r5, #0
 800eb82:	4821      	ldr	r0, [pc, #132]	@ (800ec08 <strtof+0xb4>)
 800eb84:	da09      	bge.n	800eb9a <strtof+0x46>
 800eb86:	f001 fabb 	bl	8010100 <nanf>
 800eb8a:	eeb1 8a40 	vneg.f32	s16, s0
 800eb8e:	eeb0 0a48 	vmov.f32	s0, s16
 800eb92:	ecbd 8b02 	vpop	{d8}
 800eb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb9a:	ecbd 8b02 	vpop	{d8}
 800eb9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eba2:	f001 baad 	b.w	8010100 <nanf>
 800eba6:	4620      	mov	r0, r4
 800eba8:	4629      	mov	r1, r5
 800ebaa:	f7f2 f845 	bl	8000c38 <__aeabi_d2f>
 800ebae:	ee08 0a10 	vmov	s16, r0
 800ebb2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800ec0c <strtof+0xb8>
 800ebb6:	eeb0 7ac8 	vabs.f32	s14, s16
 800ebba:	eeb4 7a67 	vcmp.f32	s14, s15
 800ebbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc2:	dd11      	ble.n	800ebe8 <strtof+0x94>
 800ebc4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800ebc8:	4b11      	ldr	r3, [pc, #68]	@ (800ec10 <strtof+0xbc>)
 800ebca:	f04f 32ff 	mov.w	r2, #4294967295
 800ebce:	4620      	mov	r0, r4
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	f7f1 ffd3 	bl	8000b7c <__aeabi_dcmpun>
 800ebd6:	b980      	cbnz	r0, 800ebfa <strtof+0xa6>
 800ebd8:	4b0d      	ldr	r3, [pc, #52]	@ (800ec10 <strtof+0xbc>)
 800ebda:	f04f 32ff 	mov.w	r2, #4294967295
 800ebde:	4620      	mov	r0, r4
 800ebe0:	4639      	mov	r1, r7
 800ebe2:	f7f1 ffad 	bl	8000b40 <__aeabi_dcmple>
 800ebe6:	b940      	cbnz	r0, 800ebfa <strtof+0xa6>
 800ebe8:	ee18 3a10 	vmov	r3, s16
 800ebec:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ebf0:	d1cd      	bne.n	800eb8e <strtof+0x3a>
 800ebf2:	4b08      	ldr	r3, [pc, #32]	@ (800ec14 <strtof+0xc0>)
 800ebf4:	402b      	ands	r3, r5
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d0c9      	beq.n	800eb8e <strtof+0x3a>
 800ebfa:	f8d8 3000 	ldr.w	r3, [r8]
 800ebfe:	2222      	movs	r2, #34	@ 0x22
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	e7c4      	b.n	800eb8e <strtof+0x3a>
 800ec04:	20000038 	.word	0x20000038
 800ec08:	08012c3e 	.word	0x08012c3e
 800ec0c:	7f7fffff 	.word	0x7f7fffff
 800ec10:	7fefffff 	.word	0x7fefffff
 800ec14:	7ff00000 	.word	0x7ff00000
 800ec18:	200001a4 	.word	0x200001a4

0800ec1c <_strtol_l.constprop.0>:
 800ec1c:	2b24      	cmp	r3, #36	@ 0x24
 800ec1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec22:	4686      	mov	lr, r0
 800ec24:	4690      	mov	r8, r2
 800ec26:	d801      	bhi.n	800ec2c <_strtol_l.constprop.0+0x10>
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d106      	bne.n	800ec3a <_strtol_l.constprop.0+0x1e>
 800ec2c:	f001 fa1a 	bl	8010064 <__errno>
 800ec30:	2316      	movs	r3, #22
 800ec32:	6003      	str	r3, [r0, #0]
 800ec34:	2000      	movs	r0, #0
 800ec36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec3a:	4834      	ldr	r0, [pc, #208]	@ (800ed0c <_strtol_l.constprop.0+0xf0>)
 800ec3c:	460d      	mov	r5, r1
 800ec3e:	462a      	mov	r2, r5
 800ec40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec44:	5d06      	ldrb	r6, [r0, r4]
 800ec46:	f016 0608 	ands.w	r6, r6, #8
 800ec4a:	d1f8      	bne.n	800ec3e <_strtol_l.constprop.0+0x22>
 800ec4c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ec4e:	d12d      	bne.n	800ecac <_strtol_l.constprop.0+0x90>
 800ec50:	782c      	ldrb	r4, [r5, #0]
 800ec52:	2601      	movs	r6, #1
 800ec54:	1c95      	adds	r5, r2, #2
 800ec56:	f033 0210 	bics.w	r2, r3, #16
 800ec5a:	d109      	bne.n	800ec70 <_strtol_l.constprop.0+0x54>
 800ec5c:	2c30      	cmp	r4, #48	@ 0x30
 800ec5e:	d12a      	bne.n	800ecb6 <_strtol_l.constprop.0+0x9a>
 800ec60:	782a      	ldrb	r2, [r5, #0]
 800ec62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec66:	2a58      	cmp	r2, #88	@ 0x58
 800ec68:	d125      	bne.n	800ecb6 <_strtol_l.constprop.0+0x9a>
 800ec6a:	786c      	ldrb	r4, [r5, #1]
 800ec6c:	2310      	movs	r3, #16
 800ec6e:	3502      	adds	r5, #2
 800ec70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ec74:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ec78:	2200      	movs	r2, #0
 800ec7a:	fbbc f9f3 	udiv	r9, ip, r3
 800ec7e:	4610      	mov	r0, r2
 800ec80:	fb03 ca19 	mls	sl, r3, r9, ip
 800ec84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ec88:	2f09      	cmp	r7, #9
 800ec8a:	d81b      	bhi.n	800ecc4 <_strtol_l.constprop.0+0xa8>
 800ec8c:	463c      	mov	r4, r7
 800ec8e:	42a3      	cmp	r3, r4
 800ec90:	dd27      	ble.n	800ece2 <_strtol_l.constprop.0+0xc6>
 800ec92:	1c57      	adds	r7, r2, #1
 800ec94:	d007      	beq.n	800eca6 <_strtol_l.constprop.0+0x8a>
 800ec96:	4581      	cmp	r9, r0
 800ec98:	d320      	bcc.n	800ecdc <_strtol_l.constprop.0+0xc0>
 800ec9a:	d101      	bne.n	800eca0 <_strtol_l.constprop.0+0x84>
 800ec9c:	45a2      	cmp	sl, r4
 800ec9e:	db1d      	blt.n	800ecdc <_strtol_l.constprop.0+0xc0>
 800eca0:	fb00 4003 	mla	r0, r0, r3, r4
 800eca4:	2201      	movs	r2, #1
 800eca6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecaa:	e7eb      	b.n	800ec84 <_strtol_l.constprop.0+0x68>
 800ecac:	2c2b      	cmp	r4, #43	@ 0x2b
 800ecae:	bf04      	itt	eq
 800ecb0:	782c      	ldrbeq	r4, [r5, #0]
 800ecb2:	1c95      	addeq	r5, r2, #2
 800ecb4:	e7cf      	b.n	800ec56 <_strtol_l.constprop.0+0x3a>
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d1da      	bne.n	800ec70 <_strtol_l.constprop.0+0x54>
 800ecba:	2c30      	cmp	r4, #48	@ 0x30
 800ecbc:	bf0c      	ite	eq
 800ecbe:	2308      	moveq	r3, #8
 800ecc0:	230a      	movne	r3, #10
 800ecc2:	e7d5      	b.n	800ec70 <_strtol_l.constprop.0+0x54>
 800ecc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ecc8:	2f19      	cmp	r7, #25
 800ecca:	d801      	bhi.n	800ecd0 <_strtol_l.constprop.0+0xb4>
 800eccc:	3c37      	subs	r4, #55	@ 0x37
 800ecce:	e7de      	b.n	800ec8e <_strtol_l.constprop.0+0x72>
 800ecd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ecd4:	2f19      	cmp	r7, #25
 800ecd6:	d804      	bhi.n	800ece2 <_strtol_l.constprop.0+0xc6>
 800ecd8:	3c57      	subs	r4, #87	@ 0x57
 800ecda:	e7d8      	b.n	800ec8e <_strtol_l.constprop.0+0x72>
 800ecdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ece0:	e7e1      	b.n	800eca6 <_strtol_l.constprop.0+0x8a>
 800ece2:	1c53      	adds	r3, r2, #1
 800ece4:	d108      	bne.n	800ecf8 <_strtol_l.constprop.0+0xdc>
 800ece6:	2322      	movs	r3, #34	@ 0x22
 800ece8:	f8ce 3000 	str.w	r3, [lr]
 800ecec:	4660      	mov	r0, ip
 800ecee:	f1b8 0f00 	cmp.w	r8, #0
 800ecf2:	d0a0      	beq.n	800ec36 <_strtol_l.constprop.0+0x1a>
 800ecf4:	1e69      	subs	r1, r5, #1
 800ecf6:	e006      	b.n	800ed06 <_strtol_l.constprop.0+0xea>
 800ecf8:	b106      	cbz	r6, 800ecfc <_strtol_l.constprop.0+0xe0>
 800ecfa:	4240      	negs	r0, r0
 800ecfc:	f1b8 0f00 	cmp.w	r8, #0
 800ed00:	d099      	beq.n	800ec36 <_strtol_l.constprop.0+0x1a>
 800ed02:	2a00      	cmp	r2, #0
 800ed04:	d1f6      	bne.n	800ecf4 <_strtol_l.constprop.0+0xd8>
 800ed06:	f8c8 1000 	str.w	r1, [r8]
 800ed0a:	e794      	b.n	800ec36 <_strtol_l.constprop.0+0x1a>
 800ed0c:	08012a51 	.word	0x08012a51

0800ed10 <_strtol_r>:
 800ed10:	f7ff bf84 	b.w	800ec1c <_strtol_l.constprop.0>

0800ed14 <strtol>:
 800ed14:	4613      	mov	r3, r2
 800ed16:	460a      	mov	r2, r1
 800ed18:	4601      	mov	r1, r0
 800ed1a:	4802      	ldr	r0, [pc, #8]	@ (800ed24 <strtol+0x10>)
 800ed1c:	6800      	ldr	r0, [r0, #0]
 800ed1e:	f7ff bf7d 	b.w	800ec1c <_strtol_l.constprop.0>
 800ed22:	bf00      	nop
 800ed24:	200001a4 	.word	0x200001a4

0800ed28 <__cvt>:
 800ed28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed2c:	ec57 6b10 	vmov	r6, r7, d0
 800ed30:	2f00      	cmp	r7, #0
 800ed32:	460c      	mov	r4, r1
 800ed34:	4619      	mov	r1, r3
 800ed36:	463b      	mov	r3, r7
 800ed38:	bfbb      	ittet	lt
 800ed3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ed3e:	461f      	movlt	r7, r3
 800ed40:	2300      	movge	r3, #0
 800ed42:	232d      	movlt	r3, #45	@ 0x2d
 800ed44:	700b      	strb	r3, [r1, #0]
 800ed46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ed4c:	4691      	mov	r9, r2
 800ed4e:	f023 0820 	bic.w	r8, r3, #32
 800ed52:	bfbc      	itt	lt
 800ed54:	4632      	movlt	r2, r6
 800ed56:	4616      	movlt	r6, r2
 800ed58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ed5c:	d005      	beq.n	800ed6a <__cvt+0x42>
 800ed5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ed62:	d100      	bne.n	800ed66 <__cvt+0x3e>
 800ed64:	3401      	adds	r4, #1
 800ed66:	2102      	movs	r1, #2
 800ed68:	e000      	b.n	800ed6c <__cvt+0x44>
 800ed6a:	2103      	movs	r1, #3
 800ed6c:	ab03      	add	r3, sp, #12
 800ed6e:	9301      	str	r3, [sp, #4]
 800ed70:	ab02      	add	r3, sp, #8
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	ec47 6b10 	vmov	d0, r6, r7
 800ed78:	4653      	mov	r3, sl
 800ed7a:	4622      	mov	r2, r4
 800ed7c:	f001 fa6c 	bl	8010258 <_dtoa_r>
 800ed80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ed84:	4605      	mov	r5, r0
 800ed86:	d119      	bne.n	800edbc <__cvt+0x94>
 800ed88:	f019 0f01 	tst.w	r9, #1
 800ed8c:	d00e      	beq.n	800edac <__cvt+0x84>
 800ed8e:	eb00 0904 	add.w	r9, r0, r4
 800ed92:	2200      	movs	r2, #0
 800ed94:	2300      	movs	r3, #0
 800ed96:	4630      	mov	r0, r6
 800ed98:	4639      	mov	r1, r7
 800ed9a:	f7f1 febd 	bl	8000b18 <__aeabi_dcmpeq>
 800ed9e:	b108      	cbz	r0, 800eda4 <__cvt+0x7c>
 800eda0:	f8cd 900c 	str.w	r9, [sp, #12]
 800eda4:	2230      	movs	r2, #48	@ 0x30
 800eda6:	9b03      	ldr	r3, [sp, #12]
 800eda8:	454b      	cmp	r3, r9
 800edaa:	d31e      	bcc.n	800edea <__cvt+0xc2>
 800edac:	9b03      	ldr	r3, [sp, #12]
 800edae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edb0:	1b5b      	subs	r3, r3, r5
 800edb2:	4628      	mov	r0, r5
 800edb4:	6013      	str	r3, [r2, #0]
 800edb6:	b004      	add	sp, #16
 800edb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800edc0:	eb00 0904 	add.w	r9, r0, r4
 800edc4:	d1e5      	bne.n	800ed92 <__cvt+0x6a>
 800edc6:	7803      	ldrb	r3, [r0, #0]
 800edc8:	2b30      	cmp	r3, #48	@ 0x30
 800edca:	d10a      	bne.n	800ede2 <__cvt+0xba>
 800edcc:	2200      	movs	r2, #0
 800edce:	2300      	movs	r3, #0
 800edd0:	4630      	mov	r0, r6
 800edd2:	4639      	mov	r1, r7
 800edd4:	f7f1 fea0 	bl	8000b18 <__aeabi_dcmpeq>
 800edd8:	b918      	cbnz	r0, 800ede2 <__cvt+0xba>
 800edda:	f1c4 0401 	rsb	r4, r4, #1
 800edde:	f8ca 4000 	str.w	r4, [sl]
 800ede2:	f8da 3000 	ldr.w	r3, [sl]
 800ede6:	4499      	add	r9, r3
 800ede8:	e7d3      	b.n	800ed92 <__cvt+0x6a>
 800edea:	1c59      	adds	r1, r3, #1
 800edec:	9103      	str	r1, [sp, #12]
 800edee:	701a      	strb	r2, [r3, #0]
 800edf0:	e7d9      	b.n	800eda6 <__cvt+0x7e>

0800edf2 <__exponent>:
 800edf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edf4:	2900      	cmp	r1, #0
 800edf6:	bfba      	itte	lt
 800edf8:	4249      	neglt	r1, r1
 800edfa:	232d      	movlt	r3, #45	@ 0x2d
 800edfc:	232b      	movge	r3, #43	@ 0x2b
 800edfe:	2909      	cmp	r1, #9
 800ee00:	7002      	strb	r2, [r0, #0]
 800ee02:	7043      	strb	r3, [r0, #1]
 800ee04:	dd29      	ble.n	800ee5a <__exponent+0x68>
 800ee06:	f10d 0307 	add.w	r3, sp, #7
 800ee0a:	461d      	mov	r5, r3
 800ee0c:	270a      	movs	r7, #10
 800ee0e:	461a      	mov	r2, r3
 800ee10:	fbb1 f6f7 	udiv	r6, r1, r7
 800ee14:	fb07 1416 	mls	r4, r7, r6, r1
 800ee18:	3430      	adds	r4, #48	@ 0x30
 800ee1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ee1e:	460c      	mov	r4, r1
 800ee20:	2c63      	cmp	r4, #99	@ 0x63
 800ee22:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee26:	4631      	mov	r1, r6
 800ee28:	dcf1      	bgt.n	800ee0e <__exponent+0x1c>
 800ee2a:	3130      	adds	r1, #48	@ 0x30
 800ee2c:	1e94      	subs	r4, r2, #2
 800ee2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ee32:	1c41      	adds	r1, r0, #1
 800ee34:	4623      	mov	r3, r4
 800ee36:	42ab      	cmp	r3, r5
 800ee38:	d30a      	bcc.n	800ee50 <__exponent+0x5e>
 800ee3a:	f10d 0309 	add.w	r3, sp, #9
 800ee3e:	1a9b      	subs	r3, r3, r2
 800ee40:	42ac      	cmp	r4, r5
 800ee42:	bf88      	it	hi
 800ee44:	2300      	movhi	r3, #0
 800ee46:	3302      	adds	r3, #2
 800ee48:	4403      	add	r3, r0
 800ee4a:	1a18      	subs	r0, r3, r0
 800ee4c:	b003      	add	sp, #12
 800ee4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee50:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ee54:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ee58:	e7ed      	b.n	800ee36 <__exponent+0x44>
 800ee5a:	2330      	movs	r3, #48	@ 0x30
 800ee5c:	3130      	adds	r1, #48	@ 0x30
 800ee5e:	7083      	strb	r3, [r0, #2]
 800ee60:	70c1      	strb	r1, [r0, #3]
 800ee62:	1d03      	adds	r3, r0, #4
 800ee64:	e7f1      	b.n	800ee4a <__exponent+0x58>
	...

0800ee68 <_printf_float>:
 800ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6c:	b08d      	sub	sp, #52	@ 0x34
 800ee6e:	460c      	mov	r4, r1
 800ee70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ee74:	4616      	mov	r6, r2
 800ee76:	461f      	mov	r7, r3
 800ee78:	4605      	mov	r5, r0
 800ee7a:	f001 f899 	bl	800ffb0 <_localeconv_r>
 800ee7e:	6803      	ldr	r3, [r0, #0]
 800ee80:	9304      	str	r3, [sp, #16]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7f1 fa1c 	bl	80002c0 <strlen>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ee90:	9005      	str	r0, [sp, #20]
 800ee92:	3307      	adds	r3, #7
 800ee94:	f023 0307 	bic.w	r3, r3, #7
 800ee98:	f103 0208 	add.w	r2, r3, #8
 800ee9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800eea0:	f8d4 b000 	ldr.w	fp, [r4]
 800eea4:	f8c8 2000 	str.w	r2, [r8]
 800eea8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eeac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800eeb0:	9307      	str	r3, [sp, #28]
 800eeb2:	f8cd 8018 	str.w	r8, [sp, #24]
 800eeb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800eeba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eebe:	4b9c      	ldr	r3, [pc, #624]	@ (800f130 <_printf_float+0x2c8>)
 800eec0:	f04f 32ff 	mov.w	r2, #4294967295
 800eec4:	f7f1 fe5a 	bl	8000b7c <__aeabi_dcmpun>
 800eec8:	bb70      	cbnz	r0, 800ef28 <_printf_float+0xc0>
 800eeca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eece:	4b98      	ldr	r3, [pc, #608]	@ (800f130 <_printf_float+0x2c8>)
 800eed0:	f04f 32ff 	mov.w	r2, #4294967295
 800eed4:	f7f1 fe34 	bl	8000b40 <__aeabi_dcmple>
 800eed8:	bb30      	cbnz	r0, 800ef28 <_printf_float+0xc0>
 800eeda:	2200      	movs	r2, #0
 800eedc:	2300      	movs	r3, #0
 800eede:	4640      	mov	r0, r8
 800eee0:	4649      	mov	r1, r9
 800eee2:	f7f1 fe23 	bl	8000b2c <__aeabi_dcmplt>
 800eee6:	b110      	cbz	r0, 800eeee <_printf_float+0x86>
 800eee8:	232d      	movs	r3, #45	@ 0x2d
 800eeea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eeee:	4a91      	ldr	r2, [pc, #580]	@ (800f134 <_printf_float+0x2cc>)
 800eef0:	4b91      	ldr	r3, [pc, #580]	@ (800f138 <_printf_float+0x2d0>)
 800eef2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eef6:	bf94      	ite	ls
 800eef8:	4690      	movls	r8, r2
 800eefa:	4698      	movhi	r8, r3
 800eefc:	2303      	movs	r3, #3
 800eefe:	6123      	str	r3, [r4, #16]
 800ef00:	f02b 0304 	bic.w	r3, fp, #4
 800ef04:	6023      	str	r3, [r4, #0]
 800ef06:	f04f 0900 	mov.w	r9, #0
 800ef0a:	9700      	str	r7, [sp, #0]
 800ef0c:	4633      	mov	r3, r6
 800ef0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ef10:	4621      	mov	r1, r4
 800ef12:	4628      	mov	r0, r5
 800ef14:	f000 f9d2 	bl	800f2bc <_printf_common>
 800ef18:	3001      	adds	r0, #1
 800ef1a:	f040 808d 	bne.w	800f038 <_printf_float+0x1d0>
 800ef1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef22:	b00d      	add	sp, #52	@ 0x34
 800ef24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef28:	4642      	mov	r2, r8
 800ef2a:	464b      	mov	r3, r9
 800ef2c:	4640      	mov	r0, r8
 800ef2e:	4649      	mov	r1, r9
 800ef30:	f7f1 fe24 	bl	8000b7c <__aeabi_dcmpun>
 800ef34:	b140      	cbz	r0, 800ef48 <_printf_float+0xe0>
 800ef36:	464b      	mov	r3, r9
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	bfbc      	itt	lt
 800ef3c:	232d      	movlt	r3, #45	@ 0x2d
 800ef3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ef42:	4a7e      	ldr	r2, [pc, #504]	@ (800f13c <_printf_float+0x2d4>)
 800ef44:	4b7e      	ldr	r3, [pc, #504]	@ (800f140 <_printf_float+0x2d8>)
 800ef46:	e7d4      	b.n	800eef2 <_printf_float+0x8a>
 800ef48:	6863      	ldr	r3, [r4, #4]
 800ef4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ef4e:	9206      	str	r2, [sp, #24]
 800ef50:	1c5a      	adds	r2, r3, #1
 800ef52:	d13b      	bne.n	800efcc <_printf_float+0x164>
 800ef54:	2306      	movs	r3, #6
 800ef56:	6063      	str	r3, [r4, #4]
 800ef58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	6022      	str	r2, [r4, #0]
 800ef60:	9303      	str	r3, [sp, #12]
 800ef62:	ab0a      	add	r3, sp, #40	@ 0x28
 800ef64:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ef68:	ab09      	add	r3, sp, #36	@ 0x24
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	6861      	ldr	r1, [r4, #4]
 800ef6e:	ec49 8b10 	vmov	d0, r8, r9
 800ef72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ef76:	4628      	mov	r0, r5
 800ef78:	f7ff fed6 	bl	800ed28 <__cvt>
 800ef7c:	9b06      	ldr	r3, [sp, #24]
 800ef7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef80:	2b47      	cmp	r3, #71	@ 0x47
 800ef82:	4680      	mov	r8, r0
 800ef84:	d129      	bne.n	800efda <_printf_float+0x172>
 800ef86:	1cc8      	adds	r0, r1, #3
 800ef88:	db02      	blt.n	800ef90 <_printf_float+0x128>
 800ef8a:	6863      	ldr	r3, [r4, #4]
 800ef8c:	4299      	cmp	r1, r3
 800ef8e:	dd41      	ble.n	800f014 <_printf_float+0x1ac>
 800ef90:	f1aa 0a02 	sub.w	sl, sl, #2
 800ef94:	fa5f fa8a 	uxtb.w	sl, sl
 800ef98:	3901      	subs	r1, #1
 800ef9a:	4652      	mov	r2, sl
 800ef9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800efa0:	9109      	str	r1, [sp, #36]	@ 0x24
 800efa2:	f7ff ff26 	bl	800edf2 <__exponent>
 800efa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800efa8:	1813      	adds	r3, r2, r0
 800efaa:	2a01      	cmp	r2, #1
 800efac:	4681      	mov	r9, r0
 800efae:	6123      	str	r3, [r4, #16]
 800efb0:	dc02      	bgt.n	800efb8 <_printf_float+0x150>
 800efb2:	6822      	ldr	r2, [r4, #0]
 800efb4:	07d2      	lsls	r2, r2, #31
 800efb6:	d501      	bpl.n	800efbc <_printf_float+0x154>
 800efb8:	3301      	adds	r3, #1
 800efba:	6123      	str	r3, [r4, #16]
 800efbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d0a2      	beq.n	800ef0a <_printf_float+0xa2>
 800efc4:	232d      	movs	r3, #45	@ 0x2d
 800efc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efca:	e79e      	b.n	800ef0a <_printf_float+0xa2>
 800efcc:	9a06      	ldr	r2, [sp, #24]
 800efce:	2a47      	cmp	r2, #71	@ 0x47
 800efd0:	d1c2      	bne.n	800ef58 <_printf_float+0xf0>
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d1c0      	bne.n	800ef58 <_printf_float+0xf0>
 800efd6:	2301      	movs	r3, #1
 800efd8:	e7bd      	b.n	800ef56 <_printf_float+0xee>
 800efda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800efde:	d9db      	bls.n	800ef98 <_printf_float+0x130>
 800efe0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800efe4:	d118      	bne.n	800f018 <_printf_float+0x1b0>
 800efe6:	2900      	cmp	r1, #0
 800efe8:	6863      	ldr	r3, [r4, #4]
 800efea:	dd0b      	ble.n	800f004 <_printf_float+0x19c>
 800efec:	6121      	str	r1, [r4, #16]
 800efee:	b913      	cbnz	r3, 800eff6 <_printf_float+0x18e>
 800eff0:	6822      	ldr	r2, [r4, #0]
 800eff2:	07d0      	lsls	r0, r2, #31
 800eff4:	d502      	bpl.n	800effc <_printf_float+0x194>
 800eff6:	3301      	adds	r3, #1
 800eff8:	440b      	add	r3, r1
 800effa:	6123      	str	r3, [r4, #16]
 800effc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800effe:	f04f 0900 	mov.w	r9, #0
 800f002:	e7db      	b.n	800efbc <_printf_float+0x154>
 800f004:	b913      	cbnz	r3, 800f00c <_printf_float+0x1a4>
 800f006:	6822      	ldr	r2, [r4, #0]
 800f008:	07d2      	lsls	r2, r2, #31
 800f00a:	d501      	bpl.n	800f010 <_printf_float+0x1a8>
 800f00c:	3302      	adds	r3, #2
 800f00e:	e7f4      	b.n	800effa <_printf_float+0x192>
 800f010:	2301      	movs	r3, #1
 800f012:	e7f2      	b.n	800effa <_printf_float+0x192>
 800f014:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f01a:	4299      	cmp	r1, r3
 800f01c:	db05      	blt.n	800f02a <_printf_float+0x1c2>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	6121      	str	r1, [r4, #16]
 800f022:	07d8      	lsls	r0, r3, #31
 800f024:	d5ea      	bpl.n	800effc <_printf_float+0x194>
 800f026:	1c4b      	adds	r3, r1, #1
 800f028:	e7e7      	b.n	800effa <_printf_float+0x192>
 800f02a:	2900      	cmp	r1, #0
 800f02c:	bfd4      	ite	le
 800f02e:	f1c1 0202 	rsble	r2, r1, #2
 800f032:	2201      	movgt	r2, #1
 800f034:	4413      	add	r3, r2
 800f036:	e7e0      	b.n	800effa <_printf_float+0x192>
 800f038:	6823      	ldr	r3, [r4, #0]
 800f03a:	055a      	lsls	r2, r3, #21
 800f03c:	d407      	bmi.n	800f04e <_printf_float+0x1e6>
 800f03e:	6923      	ldr	r3, [r4, #16]
 800f040:	4642      	mov	r2, r8
 800f042:	4631      	mov	r1, r6
 800f044:	4628      	mov	r0, r5
 800f046:	47b8      	blx	r7
 800f048:	3001      	adds	r0, #1
 800f04a:	d12b      	bne.n	800f0a4 <_printf_float+0x23c>
 800f04c:	e767      	b.n	800ef1e <_printf_float+0xb6>
 800f04e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f052:	f240 80dd 	bls.w	800f210 <_printf_float+0x3a8>
 800f056:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f05a:	2200      	movs	r2, #0
 800f05c:	2300      	movs	r3, #0
 800f05e:	f7f1 fd5b 	bl	8000b18 <__aeabi_dcmpeq>
 800f062:	2800      	cmp	r0, #0
 800f064:	d033      	beq.n	800f0ce <_printf_float+0x266>
 800f066:	4a37      	ldr	r2, [pc, #220]	@ (800f144 <_printf_float+0x2dc>)
 800f068:	2301      	movs	r3, #1
 800f06a:	4631      	mov	r1, r6
 800f06c:	4628      	mov	r0, r5
 800f06e:	47b8      	blx	r7
 800f070:	3001      	adds	r0, #1
 800f072:	f43f af54 	beq.w	800ef1e <_printf_float+0xb6>
 800f076:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f07a:	4543      	cmp	r3, r8
 800f07c:	db02      	blt.n	800f084 <_printf_float+0x21c>
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	07d8      	lsls	r0, r3, #31
 800f082:	d50f      	bpl.n	800f0a4 <_printf_float+0x23c>
 800f084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f088:	4631      	mov	r1, r6
 800f08a:	4628      	mov	r0, r5
 800f08c:	47b8      	blx	r7
 800f08e:	3001      	adds	r0, #1
 800f090:	f43f af45 	beq.w	800ef1e <_printf_float+0xb6>
 800f094:	f04f 0900 	mov.w	r9, #0
 800f098:	f108 38ff 	add.w	r8, r8, #4294967295
 800f09c:	f104 0a1a 	add.w	sl, r4, #26
 800f0a0:	45c8      	cmp	r8, r9
 800f0a2:	dc09      	bgt.n	800f0b8 <_printf_float+0x250>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	079b      	lsls	r3, r3, #30
 800f0a8:	f100 8103 	bmi.w	800f2b2 <_printf_float+0x44a>
 800f0ac:	68e0      	ldr	r0, [r4, #12]
 800f0ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0b0:	4298      	cmp	r0, r3
 800f0b2:	bfb8      	it	lt
 800f0b4:	4618      	movlt	r0, r3
 800f0b6:	e734      	b.n	800ef22 <_printf_float+0xba>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	4652      	mov	r2, sl
 800f0bc:	4631      	mov	r1, r6
 800f0be:	4628      	mov	r0, r5
 800f0c0:	47b8      	blx	r7
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	f43f af2b 	beq.w	800ef1e <_printf_float+0xb6>
 800f0c8:	f109 0901 	add.w	r9, r9, #1
 800f0cc:	e7e8      	b.n	800f0a0 <_printf_float+0x238>
 800f0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	dc39      	bgt.n	800f148 <_printf_float+0x2e0>
 800f0d4:	4a1b      	ldr	r2, [pc, #108]	@ (800f144 <_printf_float+0x2dc>)
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	4631      	mov	r1, r6
 800f0da:	4628      	mov	r0, r5
 800f0dc:	47b8      	blx	r7
 800f0de:	3001      	adds	r0, #1
 800f0e0:	f43f af1d 	beq.w	800ef1e <_printf_float+0xb6>
 800f0e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f0e8:	ea59 0303 	orrs.w	r3, r9, r3
 800f0ec:	d102      	bne.n	800f0f4 <_printf_float+0x28c>
 800f0ee:	6823      	ldr	r3, [r4, #0]
 800f0f0:	07d9      	lsls	r1, r3, #31
 800f0f2:	d5d7      	bpl.n	800f0a4 <_printf_float+0x23c>
 800f0f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	47b8      	blx	r7
 800f0fe:	3001      	adds	r0, #1
 800f100:	f43f af0d 	beq.w	800ef1e <_printf_float+0xb6>
 800f104:	f04f 0a00 	mov.w	sl, #0
 800f108:	f104 0b1a 	add.w	fp, r4, #26
 800f10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f10e:	425b      	negs	r3, r3
 800f110:	4553      	cmp	r3, sl
 800f112:	dc01      	bgt.n	800f118 <_printf_float+0x2b0>
 800f114:	464b      	mov	r3, r9
 800f116:	e793      	b.n	800f040 <_printf_float+0x1d8>
 800f118:	2301      	movs	r3, #1
 800f11a:	465a      	mov	r2, fp
 800f11c:	4631      	mov	r1, r6
 800f11e:	4628      	mov	r0, r5
 800f120:	47b8      	blx	r7
 800f122:	3001      	adds	r0, #1
 800f124:	f43f aefb 	beq.w	800ef1e <_printf_float+0xb6>
 800f128:	f10a 0a01 	add.w	sl, sl, #1
 800f12c:	e7ee      	b.n	800f10c <_printf_float+0x2a4>
 800f12e:	bf00      	nop
 800f130:	7fefffff 	.word	0x7fefffff
 800f134:	08012b51 	.word	0x08012b51
 800f138:	08012b55 	.word	0x08012b55
 800f13c:	08012b59 	.word	0x08012b59
 800f140:	08012b5d 	.word	0x08012b5d
 800f144:	08012b61 	.word	0x08012b61
 800f148:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f14a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f14e:	4553      	cmp	r3, sl
 800f150:	bfa8      	it	ge
 800f152:	4653      	movge	r3, sl
 800f154:	2b00      	cmp	r3, #0
 800f156:	4699      	mov	r9, r3
 800f158:	dc36      	bgt.n	800f1c8 <_printf_float+0x360>
 800f15a:	f04f 0b00 	mov.w	fp, #0
 800f15e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f162:	f104 021a 	add.w	r2, r4, #26
 800f166:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f168:	9306      	str	r3, [sp, #24]
 800f16a:	eba3 0309 	sub.w	r3, r3, r9
 800f16e:	455b      	cmp	r3, fp
 800f170:	dc31      	bgt.n	800f1d6 <_printf_float+0x36e>
 800f172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f174:	459a      	cmp	sl, r3
 800f176:	dc3a      	bgt.n	800f1ee <_printf_float+0x386>
 800f178:	6823      	ldr	r3, [r4, #0]
 800f17a:	07da      	lsls	r2, r3, #31
 800f17c:	d437      	bmi.n	800f1ee <_printf_float+0x386>
 800f17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f180:	ebaa 0903 	sub.w	r9, sl, r3
 800f184:	9b06      	ldr	r3, [sp, #24]
 800f186:	ebaa 0303 	sub.w	r3, sl, r3
 800f18a:	4599      	cmp	r9, r3
 800f18c:	bfa8      	it	ge
 800f18e:	4699      	movge	r9, r3
 800f190:	f1b9 0f00 	cmp.w	r9, #0
 800f194:	dc33      	bgt.n	800f1fe <_printf_float+0x396>
 800f196:	f04f 0800 	mov.w	r8, #0
 800f19a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f19e:	f104 0b1a 	add.w	fp, r4, #26
 800f1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1a4:	ebaa 0303 	sub.w	r3, sl, r3
 800f1a8:	eba3 0309 	sub.w	r3, r3, r9
 800f1ac:	4543      	cmp	r3, r8
 800f1ae:	f77f af79 	ble.w	800f0a4 <_printf_float+0x23c>
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	465a      	mov	r2, fp
 800f1b6:	4631      	mov	r1, r6
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	47b8      	blx	r7
 800f1bc:	3001      	adds	r0, #1
 800f1be:	f43f aeae 	beq.w	800ef1e <_printf_float+0xb6>
 800f1c2:	f108 0801 	add.w	r8, r8, #1
 800f1c6:	e7ec      	b.n	800f1a2 <_printf_float+0x33a>
 800f1c8:	4642      	mov	r2, r8
 800f1ca:	4631      	mov	r1, r6
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	47b8      	blx	r7
 800f1d0:	3001      	adds	r0, #1
 800f1d2:	d1c2      	bne.n	800f15a <_printf_float+0x2f2>
 800f1d4:	e6a3      	b.n	800ef1e <_printf_float+0xb6>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	4631      	mov	r1, r6
 800f1da:	4628      	mov	r0, r5
 800f1dc:	9206      	str	r2, [sp, #24]
 800f1de:	47b8      	blx	r7
 800f1e0:	3001      	adds	r0, #1
 800f1e2:	f43f ae9c 	beq.w	800ef1e <_printf_float+0xb6>
 800f1e6:	9a06      	ldr	r2, [sp, #24]
 800f1e8:	f10b 0b01 	add.w	fp, fp, #1
 800f1ec:	e7bb      	b.n	800f166 <_printf_float+0x2fe>
 800f1ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1f2:	4631      	mov	r1, r6
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	47b8      	blx	r7
 800f1f8:	3001      	adds	r0, #1
 800f1fa:	d1c0      	bne.n	800f17e <_printf_float+0x316>
 800f1fc:	e68f      	b.n	800ef1e <_printf_float+0xb6>
 800f1fe:	9a06      	ldr	r2, [sp, #24]
 800f200:	464b      	mov	r3, r9
 800f202:	4442      	add	r2, r8
 800f204:	4631      	mov	r1, r6
 800f206:	4628      	mov	r0, r5
 800f208:	47b8      	blx	r7
 800f20a:	3001      	adds	r0, #1
 800f20c:	d1c3      	bne.n	800f196 <_printf_float+0x32e>
 800f20e:	e686      	b.n	800ef1e <_printf_float+0xb6>
 800f210:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f214:	f1ba 0f01 	cmp.w	sl, #1
 800f218:	dc01      	bgt.n	800f21e <_printf_float+0x3b6>
 800f21a:	07db      	lsls	r3, r3, #31
 800f21c:	d536      	bpl.n	800f28c <_printf_float+0x424>
 800f21e:	2301      	movs	r3, #1
 800f220:	4642      	mov	r2, r8
 800f222:	4631      	mov	r1, r6
 800f224:	4628      	mov	r0, r5
 800f226:	47b8      	blx	r7
 800f228:	3001      	adds	r0, #1
 800f22a:	f43f ae78 	beq.w	800ef1e <_printf_float+0xb6>
 800f22e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f232:	4631      	mov	r1, r6
 800f234:	4628      	mov	r0, r5
 800f236:	47b8      	blx	r7
 800f238:	3001      	adds	r0, #1
 800f23a:	f43f ae70 	beq.w	800ef1e <_printf_float+0xb6>
 800f23e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f242:	2200      	movs	r2, #0
 800f244:	2300      	movs	r3, #0
 800f246:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f24a:	f7f1 fc65 	bl	8000b18 <__aeabi_dcmpeq>
 800f24e:	b9c0      	cbnz	r0, 800f282 <_printf_float+0x41a>
 800f250:	4653      	mov	r3, sl
 800f252:	f108 0201 	add.w	r2, r8, #1
 800f256:	4631      	mov	r1, r6
 800f258:	4628      	mov	r0, r5
 800f25a:	47b8      	blx	r7
 800f25c:	3001      	adds	r0, #1
 800f25e:	d10c      	bne.n	800f27a <_printf_float+0x412>
 800f260:	e65d      	b.n	800ef1e <_printf_float+0xb6>
 800f262:	2301      	movs	r3, #1
 800f264:	465a      	mov	r2, fp
 800f266:	4631      	mov	r1, r6
 800f268:	4628      	mov	r0, r5
 800f26a:	47b8      	blx	r7
 800f26c:	3001      	adds	r0, #1
 800f26e:	f43f ae56 	beq.w	800ef1e <_printf_float+0xb6>
 800f272:	f108 0801 	add.w	r8, r8, #1
 800f276:	45d0      	cmp	r8, sl
 800f278:	dbf3      	blt.n	800f262 <_printf_float+0x3fa>
 800f27a:	464b      	mov	r3, r9
 800f27c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f280:	e6df      	b.n	800f042 <_printf_float+0x1da>
 800f282:	f04f 0800 	mov.w	r8, #0
 800f286:	f104 0b1a 	add.w	fp, r4, #26
 800f28a:	e7f4      	b.n	800f276 <_printf_float+0x40e>
 800f28c:	2301      	movs	r3, #1
 800f28e:	4642      	mov	r2, r8
 800f290:	e7e1      	b.n	800f256 <_printf_float+0x3ee>
 800f292:	2301      	movs	r3, #1
 800f294:	464a      	mov	r2, r9
 800f296:	4631      	mov	r1, r6
 800f298:	4628      	mov	r0, r5
 800f29a:	47b8      	blx	r7
 800f29c:	3001      	adds	r0, #1
 800f29e:	f43f ae3e 	beq.w	800ef1e <_printf_float+0xb6>
 800f2a2:	f108 0801 	add.w	r8, r8, #1
 800f2a6:	68e3      	ldr	r3, [r4, #12]
 800f2a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f2aa:	1a5b      	subs	r3, r3, r1
 800f2ac:	4543      	cmp	r3, r8
 800f2ae:	dcf0      	bgt.n	800f292 <_printf_float+0x42a>
 800f2b0:	e6fc      	b.n	800f0ac <_printf_float+0x244>
 800f2b2:	f04f 0800 	mov.w	r8, #0
 800f2b6:	f104 0919 	add.w	r9, r4, #25
 800f2ba:	e7f4      	b.n	800f2a6 <_printf_float+0x43e>

0800f2bc <_printf_common>:
 800f2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2c0:	4616      	mov	r6, r2
 800f2c2:	4698      	mov	r8, r3
 800f2c4:	688a      	ldr	r2, [r1, #8]
 800f2c6:	690b      	ldr	r3, [r1, #16]
 800f2c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	bfb8      	it	lt
 800f2d0:	4613      	movlt	r3, r2
 800f2d2:	6033      	str	r3, [r6, #0]
 800f2d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f2d8:	4607      	mov	r7, r0
 800f2da:	460c      	mov	r4, r1
 800f2dc:	b10a      	cbz	r2, 800f2e2 <_printf_common+0x26>
 800f2de:	3301      	adds	r3, #1
 800f2e0:	6033      	str	r3, [r6, #0]
 800f2e2:	6823      	ldr	r3, [r4, #0]
 800f2e4:	0699      	lsls	r1, r3, #26
 800f2e6:	bf42      	ittt	mi
 800f2e8:	6833      	ldrmi	r3, [r6, #0]
 800f2ea:	3302      	addmi	r3, #2
 800f2ec:	6033      	strmi	r3, [r6, #0]
 800f2ee:	6825      	ldr	r5, [r4, #0]
 800f2f0:	f015 0506 	ands.w	r5, r5, #6
 800f2f4:	d106      	bne.n	800f304 <_printf_common+0x48>
 800f2f6:	f104 0a19 	add.w	sl, r4, #25
 800f2fa:	68e3      	ldr	r3, [r4, #12]
 800f2fc:	6832      	ldr	r2, [r6, #0]
 800f2fe:	1a9b      	subs	r3, r3, r2
 800f300:	42ab      	cmp	r3, r5
 800f302:	dc26      	bgt.n	800f352 <_printf_common+0x96>
 800f304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f308:	6822      	ldr	r2, [r4, #0]
 800f30a:	3b00      	subs	r3, #0
 800f30c:	bf18      	it	ne
 800f30e:	2301      	movne	r3, #1
 800f310:	0692      	lsls	r2, r2, #26
 800f312:	d42b      	bmi.n	800f36c <_printf_common+0xb0>
 800f314:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f318:	4641      	mov	r1, r8
 800f31a:	4638      	mov	r0, r7
 800f31c:	47c8      	blx	r9
 800f31e:	3001      	adds	r0, #1
 800f320:	d01e      	beq.n	800f360 <_printf_common+0xa4>
 800f322:	6823      	ldr	r3, [r4, #0]
 800f324:	6922      	ldr	r2, [r4, #16]
 800f326:	f003 0306 	and.w	r3, r3, #6
 800f32a:	2b04      	cmp	r3, #4
 800f32c:	bf02      	ittt	eq
 800f32e:	68e5      	ldreq	r5, [r4, #12]
 800f330:	6833      	ldreq	r3, [r6, #0]
 800f332:	1aed      	subeq	r5, r5, r3
 800f334:	68a3      	ldr	r3, [r4, #8]
 800f336:	bf0c      	ite	eq
 800f338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f33c:	2500      	movne	r5, #0
 800f33e:	4293      	cmp	r3, r2
 800f340:	bfc4      	itt	gt
 800f342:	1a9b      	subgt	r3, r3, r2
 800f344:	18ed      	addgt	r5, r5, r3
 800f346:	2600      	movs	r6, #0
 800f348:	341a      	adds	r4, #26
 800f34a:	42b5      	cmp	r5, r6
 800f34c:	d11a      	bne.n	800f384 <_printf_common+0xc8>
 800f34e:	2000      	movs	r0, #0
 800f350:	e008      	b.n	800f364 <_printf_common+0xa8>
 800f352:	2301      	movs	r3, #1
 800f354:	4652      	mov	r2, sl
 800f356:	4641      	mov	r1, r8
 800f358:	4638      	mov	r0, r7
 800f35a:	47c8      	blx	r9
 800f35c:	3001      	adds	r0, #1
 800f35e:	d103      	bne.n	800f368 <_printf_common+0xac>
 800f360:	f04f 30ff 	mov.w	r0, #4294967295
 800f364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f368:	3501      	adds	r5, #1
 800f36a:	e7c6      	b.n	800f2fa <_printf_common+0x3e>
 800f36c:	18e1      	adds	r1, r4, r3
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	2030      	movs	r0, #48	@ 0x30
 800f372:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f376:	4422      	add	r2, r4
 800f378:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f37c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f380:	3302      	adds	r3, #2
 800f382:	e7c7      	b.n	800f314 <_printf_common+0x58>
 800f384:	2301      	movs	r3, #1
 800f386:	4622      	mov	r2, r4
 800f388:	4641      	mov	r1, r8
 800f38a:	4638      	mov	r0, r7
 800f38c:	47c8      	blx	r9
 800f38e:	3001      	adds	r0, #1
 800f390:	d0e6      	beq.n	800f360 <_printf_common+0xa4>
 800f392:	3601      	adds	r6, #1
 800f394:	e7d9      	b.n	800f34a <_printf_common+0x8e>
	...

0800f398 <_printf_i>:
 800f398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f39c:	7e0f      	ldrb	r7, [r1, #24]
 800f39e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f3a0:	2f78      	cmp	r7, #120	@ 0x78
 800f3a2:	4691      	mov	r9, r2
 800f3a4:	4680      	mov	r8, r0
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	469a      	mov	sl, r3
 800f3aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f3ae:	d807      	bhi.n	800f3c0 <_printf_i+0x28>
 800f3b0:	2f62      	cmp	r7, #98	@ 0x62
 800f3b2:	d80a      	bhi.n	800f3ca <_printf_i+0x32>
 800f3b4:	2f00      	cmp	r7, #0
 800f3b6:	f000 80d2 	beq.w	800f55e <_printf_i+0x1c6>
 800f3ba:	2f58      	cmp	r7, #88	@ 0x58
 800f3bc:	f000 80b9 	beq.w	800f532 <_printf_i+0x19a>
 800f3c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f3c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f3c8:	e03a      	b.n	800f440 <_printf_i+0xa8>
 800f3ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f3ce:	2b15      	cmp	r3, #21
 800f3d0:	d8f6      	bhi.n	800f3c0 <_printf_i+0x28>
 800f3d2:	a101      	add	r1, pc, #4	@ (adr r1, 800f3d8 <_printf_i+0x40>)
 800f3d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3d8:	0800f431 	.word	0x0800f431
 800f3dc:	0800f445 	.word	0x0800f445
 800f3e0:	0800f3c1 	.word	0x0800f3c1
 800f3e4:	0800f3c1 	.word	0x0800f3c1
 800f3e8:	0800f3c1 	.word	0x0800f3c1
 800f3ec:	0800f3c1 	.word	0x0800f3c1
 800f3f0:	0800f445 	.word	0x0800f445
 800f3f4:	0800f3c1 	.word	0x0800f3c1
 800f3f8:	0800f3c1 	.word	0x0800f3c1
 800f3fc:	0800f3c1 	.word	0x0800f3c1
 800f400:	0800f3c1 	.word	0x0800f3c1
 800f404:	0800f545 	.word	0x0800f545
 800f408:	0800f46f 	.word	0x0800f46f
 800f40c:	0800f4ff 	.word	0x0800f4ff
 800f410:	0800f3c1 	.word	0x0800f3c1
 800f414:	0800f3c1 	.word	0x0800f3c1
 800f418:	0800f567 	.word	0x0800f567
 800f41c:	0800f3c1 	.word	0x0800f3c1
 800f420:	0800f46f 	.word	0x0800f46f
 800f424:	0800f3c1 	.word	0x0800f3c1
 800f428:	0800f3c1 	.word	0x0800f3c1
 800f42c:	0800f507 	.word	0x0800f507
 800f430:	6833      	ldr	r3, [r6, #0]
 800f432:	1d1a      	adds	r2, r3, #4
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	6032      	str	r2, [r6, #0]
 800f438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f43c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f440:	2301      	movs	r3, #1
 800f442:	e09d      	b.n	800f580 <_printf_i+0x1e8>
 800f444:	6833      	ldr	r3, [r6, #0]
 800f446:	6820      	ldr	r0, [r4, #0]
 800f448:	1d19      	adds	r1, r3, #4
 800f44a:	6031      	str	r1, [r6, #0]
 800f44c:	0606      	lsls	r6, r0, #24
 800f44e:	d501      	bpl.n	800f454 <_printf_i+0xbc>
 800f450:	681d      	ldr	r5, [r3, #0]
 800f452:	e003      	b.n	800f45c <_printf_i+0xc4>
 800f454:	0645      	lsls	r5, r0, #25
 800f456:	d5fb      	bpl.n	800f450 <_printf_i+0xb8>
 800f458:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f45c:	2d00      	cmp	r5, #0
 800f45e:	da03      	bge.n	800f468 <_printf_i+0xd0>
 800f460:	232d      	movs	r3, #45	@ 0x2d
 800f462:	426d      	negs	r5, r5
 800f464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f468:	4859      	ldr	r0, [pc, #356]	@ (800f5d0 <_printf_i+0x238>)
 800f46a:	230a      	movs	r3, #10
 800f46c:	e011      	b.n	800f492 <_printf_i+0xfa>
 800f46e:	6821      	ldr	r1, [r4, #0]
 800f470:	6833      	ldr	r3, [r6, #0]
 800f472:	0608      	lsls	r0, r1, #24
 800f474:	f853 5b04 	ldr.w	r5, [r3], #4
 800f478:	d402      	bmi.n	800f480 <_printf_i+0xe8>
 800f47a:	0649      	lsls	r1, r1, #25
 800f47c:	bf48      	it	mi
 800f47e:	b2ad      	uxthmi	r5, r5
 800f480:	2f6f      	cmp	r7, #111	@ 0x6f
 800f482:	4853      	ldr	r0, [pc, #332]	@ (800f5d0 <_printf_i+0x238>)
 800f484:	6033      	str	r3, [r6, #0]
 800f486:	bf14      	ite	ne
 800f488:	230a      	movne	r3, #10
 800f48a:	2308      	moveq	r3, #8
 800f48c:	2100      	movs	r1, #0
 800f48e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f492:	6866      	ldr	r6, [r4, #4]
 800f494:	60a6      	str	r6, [r4, #8]
 800f496:	2e00      	cmp	r6, #0
 800f498:	bfa2      	ittt	ge
 800f49a:	6821      	ldrge	r1, [r4, #0]
 800f49c:	f021 0104 	bicge.w	r1, r1, #4
 800f4a0:	6021      	strge	r1, [r4, #0]
 800f4a2:	b90d      	cbnz	r5, 800f4a8 <_printf_i+0x110>
 800f4a4:	2e00      	cmp	r6, #0
 800f4a6:	d04b      	beq.n	800f540 <_printf_i+0x1a8>
 800f4a8:	4616      	mov	r6, r2
 800f4aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800f4ae:	fb03 5711 	mls	r7, r3, r1, r5
 800f4b2:	5dc7      	ldrb	r7, [r0, r7]
 800f4b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f4b8:	462f      	mov	r7, r5
 800f4ba:	42bb      	cmp	r3, r7
 800f4bc:	460d      	mov	r5, r1
 800f4be:	d9f4      	bls.n	800f4aa <_printf_i+0x112>
 800f4c0:	2b08      	cmp	r3, #8
 800f4c2:	d10b      	bne.n	800f4dc <_printf_i+0x144>
 800f4c4:	6823      	ldr	r3, [r4, #0]
 800f4c6:	07df      	lsls	r7, r3, #31
 800f4c8:	d508      	bpl.n	800f4dc <_printf_i+0x144>
 800f4ca:	6923      	ldr	r3, [r4, #16]
 800f4cc:	6861      	ldr	r1, [r4, #4]
 800f4ce:	4299      	cmp	r1, r3
 800f4d0:	bfde      	ittt	le
 800f4d2:	2330      	movle	r3, #48	@ 0x30
 800f4d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f4dc:	1b92      	subs	r2, r2, r6
 800f4de:	6122      	str	r2, [r4, #16]
 800f4e0:	f8cd a000 	str.w	sl, [sp]
 800f4e4:	464b      	mov	r3, r9
 800f4e6:	aa03      	add	r2, sp, #12
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	f7ff fee6 	bl	800f2bc <_printf_common>
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	d14a      	bne.n	800f58a <_printf_i+0x1f2>
 800f4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f8:	b004      	add	sp, #16
 800f4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fe:	6823      	ldr	r3, [r4, #0]
 800f500:	f043 0320 	orr.w	r3, r3, #32
 800f504:	6023      	str	r3, [r4, #0]
 800f506:	4833      	ldr	r0, [pc, #204]	@ (800f5d4 <_printf_i+0x23c>)
 800f508:	2778      	movs	r7, #120	@ 0x78
 800f50a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f50e:	6823      	ldr	r3, [r4, #0]
 800f510:	6831      	ldr	r1, [r6, #0]
 800f512:	061f      	lsls	r7, r3, #24
 800f514:	f851 5b04 	ldr.w	r5, [r1], #4
 800f518:	d402      	bmi.n	800f520 <_printf_i+0x188>
 800f51a:	065f      	lsls	r7, r3, #25
 800f51c:	bf48      	it	mi
 800f51e:	b2ad      	uxthmi	r5, r5
 800f520:	6031      	str	r1, [r6, #0]
 800f522:	07d9      	lsls	r1, r3, #31
 800f524:	bf44      	itt	mi
 800f526:	f043 0320 	orrmi.w	r3, r3, #32
 800f52a:	6023      	strmi	r3, [r4, #0]
 800f52c:	b11d      	cbz	r5, 800f536 <_printf_i+0x19e>
 800f52e:	2310      	movs	r3, #16
 800f530:	e7ac      	b.n	800f48c <_printf_i+0xf4>
 800f532:	4827      	ldr	r0, [pc, #156]	@ (800f5d0 <_printf_i+0x238>)
 800f534:	e7e9      	b.n	800f50a <_printf_i+0x172>
 800f536:	6823      	ldr	r3, [r4, #0]
 800f538:	f023 0320 	bic.w	r3, r3, #32
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	e7f6      	b.n	800f52e <_printf_i+0x196>
 800f540:	4616      	mov	r6, r2
 800f542:	e7bd      	b.n	800f4c0 <_printf_i+0x128>
 800f544:	6833      	ldr	r3, [r6, #0]
 800f546:	6825      	ldr	r5, [r4, #0]
 800f548:	6961      	ldr	r1, [r4, #20]
 800f54a:	1d18      	adds	r0, r3, #4
 800f54c:	6030      	str	r0, [r6, #0]
 800f54e:	062e      	lsls	r6, r5, #24
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	d501      	bpl.n	800f558 <_printf_i+0x1c0>
 800f554:	6019      	str	r1, [r3, #0]
 800f556:	e002      	b.n	800f55e <_printf_i+0x1c6>
 800f558:	0668      	lsls	r0, r5, #25
 800f55a:	d5fb      	bpl.n	800f554 <_printf_i+0x1bc>
 800f55c:	8019      	strh	r1, [r3, #0]
 800f55e:	2300      	movs	r3, #0
 800f560:	6123      	str	r3, [r4, #16]
 800f562:	4616      	mov	r6, r2
 800f564:	e7bc      	b.n	800f4e0 <_printf_i+0x148>
 800f566:	6833      	ldr	r3, [r6, #0]
 800f568:	1d1a      	adds	r2, r3, #4
 800f56a:	6032      	str	r2, [r6, #0]
 800f56c:	681e      	ldr	r6, [r3, #0]
 800f56e:	6862      	ldr	r2, [r4, #4]
 800f570:	2100      	movs	r1, #0
 800f572:	4630      	mov	r0, r6
 800f574:	f7f0 fe54 	bl	8000220 <memchr>
 800f578:	b108      	cbz	r0, 800f57e <_printf_i+0x1e6>
 800f57a:	1b80      	subs	r0, r0, r6
 800f57c:	6060      	str	r0, [r4, #4]
 800f57e:	6863      	ldr	r3, [r4, #4]
 800f580:	6123      	str	r3, [r4, #16]
 800f582:	2300      	movs	r3, #0
 800f584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f588:	e7aa      	b.n	800f4e0 <_printf_i+0x148>
 800f58a:	6923      	ldr	r3, [r4, #16]
 800f58c:	4632      	mov	r2, r6
 800f58e:	4649      	mov	r1, r9
 800f590:	4640      	mov	r0, r8
 800f592:	47d0      	blx	sl
 800f594:	3001      	adds	r0, #1
 800f596:	d0ad      	beq.n	800f4f4 <_printf_i+0x15c>
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	079b      	lsls	r3, r3, #30
 800f59c:	d413      	bmi.n	800f5c6 <_printf_i+0x22e>
 800f59e:	68e0      	ldr	r0, [r4, #12]
 800f5a0:	9b03      	ldr	r3, [sp, #12]
 800f5a2:	4298      	cmp	r0, r3
 800f5a4:	bfb8      	it	lt
 800f5a6:	4618      	movlt	r0, r3
 800f5a8:	e7a6      	b.n	800f4f8 <_printf_i+0x160>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	4632      	mov	r2, r6
 800f5ae:	4649      	mov	r1, r9
 800f5b0:	4640      	mov	r0, r8
 800f5b2:	47d0      	blx	sl
 800f5b4:	3001      	adds	r0, #1
 800f5b6:	d09d      	beq.n	800f4f4 <_printf_i+0x15c>
 800f5b8:	3501      	adds	r5, #1
 800f5ba:	68e3      	ldr	r3, [r4, #12]
 800f5bc:	9903      	ldr	r1, [sp, #12]
 800f5be:	1a5b      	subs	r3, r3, r1
 800f5c0:	42ab      	cmp	r3, r5
 800f5c2:	dcf2      	bgt.n	800f5aa <_printf_i+0x212>
 800f5c4:	e7eb      	b.n	800f59e <_printf_i+0x206>
 800f5c6:	2500      	movs	r5, #0
 800f5c8:	f104 0619 	add.w	r6, r4, #25
 800f5cc:	e7f5      	b.n	800f5ba <_printf_i+0x222>
 800f5ce:	bf00      	nop
 800f5d0:	08012b63 	.word	0x08012b63
 800f5d4:	08012b74 	.word	0x08012b74

0800f5d8 <_scanf_float>:
 800f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	b087      	sub	sp, #28
 800f5de:	4617      	mov	r7, r2
 800f5e0:	9303      	str	r3, [sp, #12]
 800f5e2:	688b      	ldr	r3, [r1, #8]
 800f5e4:	1e5a      	subs	r2, r3, #1
 800f5e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f5ea:	bf81      	itttt	hi
 800f5ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f5f0:	eb03 0b05 	addhi.w	fp, r3, r5
 800f5f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f5f8:	608b      	strhi	r3, [r1, #8]
 800f5fa:	680b      	ldr	r3, [r1, #0]
 800f5fc:	460a      	mov	r2, r1
 800f5fe:	f04f 0500 	mov.w	r5, #0
 800f602:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f606:	f842 3b1c 	str.w	r3, [r2], #28
 800f60a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f60e:	4680      	mov	r8, r0
 800f610:	460c      	mov	r4, r1
 800f612:	bf98      	it	ls
 800f614:	f04f 0b00 	movls.w	fp, #0
 800f618:	9201      	str	r2, [sp, #4]
 800f61a:	4616      	mov	r6, r2
 800f61c:	46aa      	mov	sl, r5
 800f61e:	46a9      	mov	r9, r5
 800f620:	9502      	str	r5, [sp, #8]
 800f622:	68a2      	ldr	r2, [r4, #8]
 800f624:	b152      	cbz	r2, 800f63c <_scanf_float+0x64>
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	2b4e      	cmp	r3, #78	@ 0x4e
 800f62c:	d864      	bhi.n	800f6f8 <_scanf_float+0x120>
 800f62e:	2b40      	cmp	r3, #64	@ 0x40
 800f630:	d83c      	bhi.n	800f6ac <_scanf_float+0xd4>
 800f632:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f636:	b2c8      	uxtb	r0, r1
 800f638:	280e      	cmp	r0, #14
 800f63a:	d93a      	bls.n	800f6b2 <_scanf_float+0xda>
 800f63c:	f1b9 0f00 	cmp.w	r9, #0
 800f640:	d003      	beq.n	800f64a <_scanf_float+0x72>
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f648:	6023      	str	r3, [r4, #0]
 800f64a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f64e:	f1ba 0f01 	cmp.w	sl, #1
 800f652:	f200 8117 	bhi.w	800f884 <_scanf_float+0x2ac>
 800f656:	9b01      	ldr	r3, [sp, #4]
 800f658:	429e      	cmp	r6, r3
 800f65a:	f200 8108 	bhi.w	800f86e <_scanf_float+0x296>
 800f65e:	2001      	movs	r0, #1
 800f660:	b007      	add	sp, #28
 800f662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f666:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f66a:	2a0d      	cmp	r2, #13
 800f66c:	d8e6      	bhi.n	800f63c <_scanf_float+0x64>
 800f66e:	a101      	add	r1, pc, #4	@ (adr r1, 800f674 <_scanf_float+0x9c>)
 800f670:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f674:	0800f7bb 	.word	0x0800f7bb
 800f678:	0800f63d 	.word	0x0800f63d
 800f67c:	0800f63d 	.word	0x0800f63d
 800f680:	0800f63d 	.word	0x0800f63d
 800f684:	0800f81b 	.word	0x0800f81b
 800f688:	0800f7f3 	.word	0x0800f7f3
 800f68c:	0800f63d 	.word	0x0800f63d
 800f690:	0800f63d 	.word	0x0800f63d
 800f694:	0800f7c9 	.word	0x0800f7c9
 800f698:	0800f63d 	.word	0x0800f63d
 800f69c:	0800f63d 	.word	0x0800f63d
 800f6a0:	0800f63d 	.word	0x0800f63d
 800f6a4:	0800f63d 	.word	0x0800f63d
 800f6a8:	0800f781 	.word	0x0800f781
 800f6ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f6b0:	e7db      	b.n	800f66a <_scanf_float+0x92>
 800f6b2:	290e      	cmp	r1, #14
 800f6b4:	d8c2      	bhi.n	800f63c <_scanf_float+0x64>
 800f6b6:	a001      	add	r0, pc, #4	@ (adr r0, 800f6bc <_scanf_float+0xe4>)
 800f6b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f6bc:	0800f771 	.word	0x0800f771
 800f6c0:	0800f63d 	.word	0x0800f63d
 800f6c4:	0800f771 	.word	0x0800f771
 800f6c8:	0800f807 	.word	0x0800f807
 800f6cc:	0800f63d 	.word	0x0800f63d
 800f6d0:	0800f719 	.word	0x0800f719
 800f6d4:	0800f757 	.word	0x0800f757
 800f6d8:	0800f757 	.word	0x0800f757
 800f6dc:	0800f757 	.word	0x0800f757
 800f6e0:	0800f757 	.word	0x0800f757
 800f6e4:	0800f757 	.word	0x0800f757
 800f6e8:	0800f757 	.word	0x0800f757
 800f6ec:	0800f757 	.word	0x0800f757
 800f6f0:	0800f757 	.word	0x0800f757
 800f6f4:	0800f757 	.word	0x0800f757
 800f6f8:	2b6e      	cmp	r3, #110	@ 0x6e
 800f6fa:	d809      	bhi.n	800f710 <_scanf_float+0x138>
 800f6fc:	2b60      	cmp	r3, #96	@ 0x60
 800f6fe:	d8b2      	bhi.n	800f666 <_scanf_float+0x8e>
 800f700:	2b54      	cmp	r3, #84	@ 0x54
 800f702:	d07b      	beq.n	800f7fc <_scanf_float+0x224>
 800f704:	2b59      	cmp	r3, #89	@ 0x59
 800f706:	d199      	bne.n	800f63c <_scanf_float+0x64>
 800f708:	2d07      	cmp	r5, #7
 800f70a:	d197      	bne.n	800f63c <_scanf_float+0x64>
 800f70c:	2508      	movs	r5, #8
 800f70e:	e02c      	b.n	800f76a <_scanf_float+0x192>
 800f710:	2b74      	cmp	r3, #116	@ 0x74
 800f712:	d073      	beq.n	800f7fc <_scanf_float+0x224>
 800f714:	2b79      	cmp	r3, #121	@ 0x79
 800f716:	e7f6      	b.n	800f706 <_scanf_float+0x12e>
 800f718:	6821      	ldr	r1, [r4, #0]
 800f71a:	05c8      	lsls	r0, r1, #23
 800f71c:	d51b      	bpl.n	800f756 <_scanf_float+0x17e>
 800f71e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f722:	6021      	str	r1, [r4, #0]
 800f724:	f109 0901 	add.w	r9, r9, #1
 800f728:	f1bb 0f00 	cmp.w	fp, #0
 800f72c:	d003      	beq.n	800f736 <_scanf_float+0x15e>
 800f72e:	3201      	adds	r2, #1
 800f730:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f734:	60a2      	str	r2, [r4, #8]
 800f736:	68a3      	ldr	r3, [r4, #8]
 800f738:	3b01      	subs	r3, #1
 800f73a:	60a3      	str	r3, [r4, #8]
 800f73c:	6923      	ldr	r3, [r4, #16]
 800f73e:	3301      	adds	r3, #1
 800f740:	6123      	str	r3, [r4, #16]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	3b01      	subs	r3, #1
 800f746:	2b00      	cmp	r3, #0
 800f748:	607b      	str	r3, [r7, #4]
 800f74a:	f340 8087 	ble.w	800f85c <_scanf_float+0x284>
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	3301      	adds	r3, #1
 800f752:	603b      	str	r3, [r7, #0]
 800f754:	e765      	b.n	800f622 <_scanf_float+0x4a>
 800f756:	eb1a 0105 	adds.w	r1, sl, r5
 800f75a:	f47f af6f 	bne.w	800f63c <_scanf_float+0x64>
 800f75e:	6822      	ldr	r2, [r4, #0]
 800f760:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f764:	6022      	str	r2, [r4, #0]
 800f766:	460d      	mov	r5, r1
 800f768:	468a      	mov	sl, r1
 800f76a:	f806 3b01 	strb.w	r3, [r6], #1
 800f76e:	e7e2      	b.n	800f736 <_scanf_float+0x15e>
 800f770:	6822      	ldr	r2, [r4, #0]
 800f772:	0610      	lsls	r0, r2, #24
 800f774:	f57f af62 	bpl.w	800f63c <_scanf_float+0x64>
 800f778:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f77c:	6022      	str	r2, [r4, #0]
 800f77e:	e7f4      	b.n	800f76a <_scanf_float+0x192>
 800f780:	f1ba 0f00 	cmp.w	sl, #0
 800f784:	d10e      	bne.n	800f7a4 <_scanf_float+0x1cc>
 800f786:	f1b9 0f00 	cmp.w	r9, #0
 800f78a:	d10e      	bne.n	800f7aa <_scanf_float+0x1d2>
 800f78c:	6822      	ldr	r2, [r4, #0]
 800f78e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f792:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f796:	d108      	bne.n	800f7aa <_scanf_float+0x1d2>
 800f798:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f79c:	6022      	str	r2, [r4, #0]
 800f79e:	f04f 0a01 	mov.w	sl, #1
 800f7a2:	e7e2      	b.n	800f76a <_scanf_float+0x192>
 800f7a4:	f1ba 0f02 	cmp.w	sl, #2
 800f7a8:	d055      	beq.n	800f856 <_scanf_float+0x27e>
 800f7aa:	2d01      	cmp	r5, #1
 800f7ac:	d002      	beq.n	800f7b4 <_scanf_float+0x1dc>
 800f7ae:	2d04      	cmp	r5, #4
 800f7b0:	f47f af44 	bne.w	800f63c <_scanf_float+0x64>
 800f7b4:	3501      	adds	r5, #1
 800f7b6:	b2ed      	uxtb	r5, r5
 800f7b8:	e7d7      	b.n	800f76a <_scanf_float+0x192>
 800f7ba:	f1ba 0f01 	cmp.w	sl, #1
 800f7be:	f47f af3d 	bne.w	800f63c <_scanf_float+0x64>
 800f7c2:	f04f 0a02 	mov.w	sl, #2
 800f7c6:	e7d0      	b.n	800f76a <_scanf_float+0x192>
 800f7c8:	b97d      	cbnz	r5, 800f7ea <_scanf_float+0x212>
 800f7ca:	f1b9 0f00 	cmp.w	r9, #0
 800f7ce:	f47f af38 	bne.w	800f642 <_scanf_float+0x6a>
 800f7d2:	6822      	ldr	r2, [r4, #0]
 800f7d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f7d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f7dc:	f040 8108 	bne.w	800f9f0 <_scanf_float+0x418>
 800f7e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f7e4:	6022      	str	r2, [r4, #0]
 800f7e6:	2501      	movs	r5, #1
 800f7e8:	e7bf      	b.n	800f76a <_scanf_float+0x192>
 800f7ea:	2d03      	cmp	r5, #3
 800f7ec:	d0e2      	beq.n	800f7b4 <_scanf_float+0x1dc>
 800f7ee:	2d05      	cmp	r5, #5
 800f7f0:	e7de      	b.n	800f7b0 <_scanf_float+0x1d8>
 800f7f2:	2d02      	cmp	r5, #2
 800f7f4:	f47f af22 	bne.w	800f63c <_scanf_float+0x64>
 800f7f8:	2503      	movs	r5, #3
 800f7fa:	e7b6      	b.n	800f76a <_scanf_float+0x192>
 800f7fc:	2d06      	cmp	r5, #6
 800f7fe:	f47f af1d 	bne.w	800f63c <_scanf_float+0x64>
 800f802:	2507      	movs	r5, #7
 800f804:	e7b1      	b.n	800f76a <_scanf_float+0x192>
 800f806:	6822      	ldr	r2, [r4, #0]
 800f808:	0591      	lsls	r1, r2, #22
 800f80a:	f57f af17 	bpl.w	800f63c <_scanf_float+0x64>
 800f80e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f812:	6022      	str	r2, [r4, #0]
 800f814:	f8cd 9008 	str.w	r9, [sp, #8]
 800f818:	e7a7      	b.n	800f76a <_scanf_float+0x192>
 800f81a:	6822      	ldr	r2, [r4, #0]
 800f81c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f820:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f824:	d006      	beq.n	800f834 <_scanf_float+0x25c>
 800f826:	0550      	lsls	r0, r2, #21
 800f828:	f57f af08 	bpl.w	800f63c <_scanf_float+0x64>
 800f82c:	f1b9 0f00 	cmp.w	r9, #0
 800f830:	f000 80de 	beq.w	800f9f0 <_scanf_float+0x418>
 800f834:	0591      	lsls	r1, r2, #22
 800f836:	bf58      	it	pl
 800f838:	9902      	ldrpl	r1, [sp, #8]
 800f83a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f83e:	bf58      	it	pl
 800f840:	eba9 0101 	subpl.w	r1, r9, r1
 800f844:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f848:	bf58      	it	pl
 800f84a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f84e:	6022      	str	r2, [r4, #0]
 800f850:	f04f 0900 	mov.w	r9, #0
 800f854:	e789      	b.n	800f76a <_scanf_float+0x192>
 800f856:	f04f 0a03 	mov.w	sl, #3
 800f85a:	e786      	b.n	800f76a <_scanf_float+0x192>
 800f85c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f860:	4639      	mov	r1, r7
 800f862:	4640      	mov	r0, r8
 800f864:	4798      	blx	r3
 800f866:	2800      	cmp	r0, #0
 800f868:	f43f aedb 	beq.w	800f622 <_scanf_float+0x4a>
 800f86c:	e6e6      	b.n	800f63c <_scanf_float+0x64>
 800f86e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f876:	463a      	mov	r2, r7
 800f878:	4640      	mov	r0, r8
 800f87a:	4798      	blx	r3
 800f87c:	6923      	ldr	r3, [r4, #16]
 800f87e:	3b01      	subs	r3, #1
 800f880:	6123      	str	r3, [r4, #16]
 800f882:	e6e8      	b.n	800f656 <_scanf_float+0x7e>
 800f884:	1e6b      	subs	r3, r5, #1
 800f886:	2b06      	cmp	r3, #6
 800f888:	d824      	bhi.n	800f8d4 <_scanf_float+0x2fc>
 800f88a:	2d02      	cmp	r5, #2
 800f88c:	d836      	bhi.n	800f8fc <_scanf_float+0x324>
 800f88e:	9b01      	ldr	r3, [sp, #4]
 800f890:	429e      	cmp	r6, r3
 800f892:	f67f aee4 	bls.w	800f65e <_scanf_float+0x86>
 800f896:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f89a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f89e:	463a      	mov	r2, r7
 800f8a0:	4640      	mov	r0, r8
 800f8a2:	4798      	blx	r3
 800f8a4:	6923      	ldr	r3, [r4, #16]
 800f8a6:	3b01      	subs	r3, #1
 800f8a8:	6123      	str	r3, [r4, #16]
 800f8aa:	e7f0      	b.n	800f88e <_scanf_float+0x2b6>
 800f8ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f8b4:	463a      	mov	r2, r7
 800f8b6:	4640      	mov	r0, r8
 800f8b8:	4798      	blx	r3
 800f8ba:	6923      	ldr	r3, [r4, #16]
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	6123      	str	r3, [r4, #16]
 800f8c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8c4:	fa5f fa8a 	uxtb.w	sl, sl
 800f8c8:	f1ba 0f02 	cmp.w	sl, #2
 800f8cc:	d1ee      	bne.n	800f8ac <_scanf_float+0x2d4>
 800f8ce:	3d03      	subs	r5, #3
 800f8d0:	b2ed      	uxtb	r5, r5
 800f8d2:	1b76      	subs	r6, r6, r5
 800f8d4:	6823      	ldr	r3, [r4, #0]
 800f8d6:	05da      	lsls	r2, r3, #23
 800f8d8:	d530      	bpl.n	800f93c <_scanf_float+0x364>
 800f8da:	055b      	lsls	r3, r3, #21
 800f8dc:	d511      	bpl.n	800f902 <_scanf_float+0x32a>
 800f8de:	9b01      	ldr	r3, [sp, #4]
 800f8e0:	429e      	cmp	r6, r3
 800f8e2:	f67f aebc 	bls.w	800f65e <_scanf_float+0x86>
 800f8e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8ee:	463a      	mov	r2, r7
 800f8f0:	4640      	mov	r0, r8
 800f8f2:	4798      	blx	r3
 800f8f4:	6923      	ldr	r3, [r4, #16]
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	6123      	str	r3, [r4, #16]
 800f8fa:	e7f0      	b.n	800f8de <_scanf_float+0x306>
 800f8fc:	46aa      	mov	sl, r5
 800f8fe:	46b3      	mov	fp, r6
 800f900:	e7de      	b.n	800f8c0 <_scanf_float+0x2e8>
 800f902:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f906:	6923      	ldr	r3, [r4, #16]
 800f908:	2965      	cmp	r1, #101	@ 0x65
 800f90a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f90e:	f106 35ff 	add.w	r5, r6, #4294967295
 800f912:	6123      	str	r3, [r4, #16]
 800f914:	d00c      	beq.n	800f930 <_scanf_float+0x358>
 800f916:	2945      	cmp	r1, #69	@ 0x45
 800f918:	d00a      	beq.n	800f930 <_scanf_float+0x358>
 800f91a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f91e:	463a      	mov	r2, r7
 800f920:	4640      	mov	r0, r8
 800f922:	4798      	blx	r3
 800f924:	6923      	ldr	r3, [r4, #16]
 800f926:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f92a:	3b01      	subs	r3, #1
 800f92c:	1eb5      	subs	r5, r6, #2
 800f92e:	6123      	str	r3, [r4, #16]
 800f930:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f934:	463a      	mov	r2, r7
 800f936:	4640      	mov	r0, r8
 800f938:	4798      	blx	r3
 800f93a:	462e      	mov	r6, r5
 800f93c:	6822      	ldr	r2, [r4, #0]
 800f93e:	f012 0210 	ands.w	r2, r2, #16
 800f942:	d001      	beq.n	800f948 <_scanf_float+0x370>
 800f944:	2000      	movs	r0, #0
 800f946:	e68b      	b.n	800f660 <_scanf_float+0x88>
 800f948:	7032      	strb	r2, [r6, #0]
 800f94a:	6823      	ldr	r3, [r4, #0]
 800f94c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f954:	d11c      	bne.n	800f990 <_scanf_float+0x3b8>
 800f956:	9b02      	ldr	r3, [sp, #8]
 800f958:	454b      	cmp	r3, r9
 800f95a:	eba3 0209 	sub.w	r2, r3, r9
 800f95e:	d123      	bne.n	800f9a8 <_scanf_float+0x3d0>
 800f960:	9901      	ldr	r1, [sp, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	4640      	mov	r0, r8
 800f966:	f7ff f8ef 	bl	800eb48 <_strtod_r>
 800f96a:	9b03      	ldr	r3, [sp, #12]
 800f96c:	6821      	ldr	r1, [r4, #0]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f011 0f02 	tst.w	r1, #2
 800f974:	ec57 6b10 	vmov	r6, r7, d0
 800f978:	f103 0204 	add.w	r2, r3, #4
 800f97c:	d01f      	beq.n	800f9be <_scanf_float+0x3e6>
 800f97e:	9903      	ldr	r1, [sp, #12]
 800f980:	600a      	str	r2, [r1, #0]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	e9c3 6700 	strd	r6, r7, [r3]
 800f988:	68e3      	ldr	r3, [r4, #12]
 800f98a:	3301      	adds	r3, #1
 800f98c:	60e3      	str	r3, [r4, #12]
 800f98e:	e7d9      	b.n	800f944 <_scanf_float+0x36c>
 800f990:	9b04      	ldr	r3, [sp, #16]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d0e4      	beq.n	800f960 <_scanf_float+0x388>
 800f996:	9905      	ldr	r1, [sp, #20]
 800f998:	230a      	movs	r3, #10
 800f99a:	3101      	adds	r1, #1
 800f99c:	4640      	mov	r0, r8
 800f99e:	f7ff f9b7 	bl	800ed10 <_strtol_r>
 800f9a2:	9b04      	ldr	r3, [sp, #16]
 800f9a4:	9e05      	ldr	r6, [sp, #20]
 800f9a6:	1ac2      	subs	r2, r0, r3
 800f9a8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f9ac:	429e      	cmp	r6, r3
 800f9ae:	bf28      	it	cs
 800f9b0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f9b4:	4910      	ldr	r1, [pc, #64]	@ (800f9f8 <_scanf_float+0x420>)
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f000 f976 	bl	800fca8 <siprintf>
 800f9bc:	e7d0      	b.n	800f960 <_scanf_float+0x388>
 800f9be:	f011 0f04 	tst.w	r1, #4
 800f9c2:	9903      	ldr	r1, [sp, #12]
 800f9c4:	600a      	str	r2, [r1, #0]
 800f9c6:	d1dc      	bne.n	800f982 <_scanf_float+0x3aa>
 800f9c8:	681d      	ldr	r5, [r3, #0]
 800f9ca:	4632      	mov	r2, r6
 800f9cc:	463b      	mov	r3, r7
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	4639      	mov	r1, r7
 800f9d2:	f7f1 f8d3 	bl	8000b7c <__aeabi_dcmpun>
 800f9d6:	b128      	cbz	r0, 800f9e4 <_scanf_float+0x40c>
 800f9d8:	4808      	ldr	r0, [pc, #32]	@ (800f9fc <_scanf_float+0x424>)
 800f9da:	f000 fb91 	bl	8010100 <nanf>
 800f9de:	ed85 0a00 	vstr	s0, [r5]
 800f9e2:	e7d1      	b.n	800f988 <_scanf_float+0x3b0>
 800f9e4:	4630      	mov	r0, r6
 800f9e6:	4639      	mov	r1, r7
 800f9e8:	f7f1 f926 	bl	8000c38 <__aeabi_d2f>
 800f9ec:	6028      	str	r0, [r5, #0]
 800f9ee:	e7cb      	b.n	800f988 <_scanf_float+0x3b0>
 800f9f0:	f04f 0900 	mov.w	r9, #0
 800f9f4:	e629      	b.n	800f64a <_scanf_float+0x72>
 800f9f6:	bf00      	nop
 800f9f8:	08012b85 	.word	0x08012b85
 800f9fc:	08012c3e 	.word	0x08012c3e

0800fa00 <std>:
 800fa00:	2300      	movs	r3, #0
 800fa02:	b510      	push	{r4, lr}
 800fa04:	4604      	mov	r4, r0
 800fa06:	e9c0 3300 	strd	r3, r3, [r0]
 800fa0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa0e:	6083      	str	r3, [r0, #8]
 800fa10:	8181      	strh	r1, [r0, #12]
 800fa12:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa14:	81c2      	strh	r2, [r0, #14]
 800fa16:	6183      	str	r3, [r0, #24]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	2208      	movs	r2, #8
 800fa1c:	305c      	adds	r0, #92	@ 0x5c
 800fa1e:	f000 fa3b 	bl	800fe98 <memset>
 800fa22:	4b0d      	ldr	r3, [pc, #52]	@ (800fa58 <std+0x58>)
 800fa24:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa26:	4b0d      	ldr	r3, [pc, #52]	@ (800fa5c <std+0x5c>)
 800fa28:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa60 <std+0x60>)
 800fa2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa64 <std+0x64>)
 800fa30:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa32:	4b0d      	ldr	r3, [pc, #52]	@ (800fa68 <std+0x68>)
 800fa34:	6224      	str	r4, [r4, #32]
 800fa36:	429c      	cmp	r4, r3
 800fa38:	d006      	beq.n	800fa48 <std+0x48>
 800fa3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa3e:	4294      	cmp	r4, r2
 800fa40:	d002      	beq.n	800fa48 <std+0x48>
 800fa42:	33d0      	adds	r3, #208	@ 0xd0
 800fa44:	429c      	cmp	r4, r3
 800fa46:	d105      	bne.n	800fa54 <std+0x54>
 800fa48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa50:	f000 bb32 	b.w	80100b8 <__retarget_lock_init_recursive>
 800fa54:	bd10      	pop	{r4, pc}
 800fa56:	bf00      	nop
 800fa58:	0800fce9 	.word	0x0800fce9
 800fa5c:	0800fd0b 	.word	0x0800fd0b
 800fa60:	0800fd43 	.word	0x0800fd43
 800fa64:	0800fd67 	.word	0x0800fd67
 800fa68:	20001434 	.word	0x20001434

0800fa6c <stdio_exit_handler>:
 800fa6c:	4a02      	ldr	r2, [pc, #8]	@ (800fa78 <stdio_exit_handler+0xc>)
 800fa6e:	4903      	ldr	r1, [pc, #12]	@ (800fa7c <stdio_exit_handler+0x10>)
 800fa70:	4803      	ldr	r0, [pc, #12]	@ (800fa80 <stdio_exit_handler+0x14>)
 800fa72:	f000 b869 	b.w	800fb48 <_fwalk_sglue>
 800fa76:	bf00      	nop
 800fa78:	2000002c 	.word	0x2000002c
 800fa7c:	08012241 	.word	0x08012241
 800fa80:	200001a8 	.word	0x200001a8

0800fa84 <cleanup_stdio>:
 800fa84:	6841      	ldr	r1, [r0, #4]
 800fa86:	4b0c      	ldr	r3, [pc, #48]	@ (800fab8 <cleanup_stdio+0x34>)
 800fa88:	4299      	cmp	r1, r3
 800fa8a:	b510      	push	{r4, lr}
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	d001      	beq.n	800fa94 <cleanup_stdio+0x10>
 800fa90:	f002 fbd6 	bl	8012240 <_fflush_r>
 800fa94:	68a1      	ldr	r1, [r4, #8]
 800fa96:	4b09      	ldr	r3, [pc, #36]	@ (800fabc <cleanup_stdio+0x38>)
 800fa98:	4299      	cmp	r1, r3
 800fa9a:	d002      	beq.n	800faa2 <cleanup_stdio+0x1e>
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f002 fbcf 	bl	8012240 <_fflush_r>
 800faa2:	68e1      	ldr	r1, [r4, #12]
 800faa4:	4b06      	ldr	r3, [pc, #24]	@ (800fac0 <cleanup_stdio+0x3c>)
 800faa6:	4299      	cmp	r1, r3
 800faa8:	d004      	beq.n	800fab4 <cleanup_stdio+0x30>
 800faaa:	4620      	mov	r0, r4
 800faac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fab0:	f002 bbc6 	b.w	8012240 <_fflush_r>
 800fab4:	bd10      	pop	{r4, pc}
 800fab6:	bf00      	nop
 800fab8:	20001434 	.word	0x20001434
 800fabc:	2000149c 	.word	0x2000149c
 800fac0:	20001504 	.word	0x20001504

0800fac4 <global_stdio_init.part.0>:
 800fac4:	b510      	push	{r4, lr}
 800fac6:	4b0b      	ldr	r3, [pc, #44]	@ (800faf4 <global_stdio_init.part.0+0x30>)
 800fac8:	4c0b      	ldr	r4, [pc, #44]	@ (800faf8 <global_stdio_init.part.0+0x34>)
 800faca:	4a0c      	ldr	r2, [pc, #48]	@ (800fafc <global_stdio_init.part.0+0x38>)
 800facc:	601a      	str	r2, [r3, #0]
 800face:	4620      	mov	r0, r4
 800fad0:	2200      	movs	r2, #0
 800fad2:	2104      	movs	r1, #4
 800fad4:	f7ff ff94 	bl	800fa00 <std>
 800fad8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fadc:	2201      	movs	r2, #1
 800fade:	2109      	movs	r1, #9
 800fae0:	f7ff ff8e 	bl	800fa00 <std>
 800fae4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fae8:	2202      	movs	r2, #2
 800faea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faee:	2112      	movs	r1, #18
 800faf0:	f7ff bf86 	b.w	800fa00 <std>
 800faf4:	2000156c 	.word	0x2000156c
 800faf8:	20001434 	.word	0x20001434
 800fafc:	0800fa6d 	.word	0x0800fa6d

0800fb00 <__sfp_lock_acquire>:
 800fb00:	4801      	ldr	r0, [pc, #4]	@ (800fb08 <__sfp_lock_acquire+0x8>)
 800fb02:	f000 bada 	b.w	80100ba <__retarget_lock_acquire_recursive>
 800fb06:	bf00      	nop
 800fb08:	20001575 	.word	0x20001575

0800fb0c <__sfp_lock_release>:
 800fb0c:	4801      	ldr	r0, [pc, #4]	@ (800fb14 <__sfp_lock_release+0x8>)
 800fb0e:	f000 bad5 	b.w	80100bc <__retarget_lock_release_recursive>
 800fb12:	bf00      	nop
 800fb14:	20001575 	.word	0x20001575

0800fb18 <__sinit>:
 800fb18:	b510      	push	{r4, lr}
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	f7ff fff0 	bl	800fb00 <__sfp_lock_acquire>
 800fb20:	6a23      	ldr	r3, [r4, #32]
 800fb22:	b11b      	cbz	r3, 800fb2c <__sinit+0x14>
 800fb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb28:	f7ff bff0 	b.w	800fb0c <__sfp_lock_release>
 800fb2c:	4b04      	ldr	r3, [pc, #16]	@ (800fb40 <__sinit+0x28>)
 800fb2e:	6223      	str	r3, [r4, #32]
 800fb30:	4b04      	ldr	r3, [pc, #16]	@ (800fb44 <__sinit+0x2c>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1f5      	bne.n	800fb24 <__sinit+0xc>
 800fb38:	f7ff ffc4 	bl	800fac4 <global_stdio_init.part.0>
 800fb3c:	e7f2      	b.n	800fb24 <__sinit+0xc>
 800fb3e:	bf00      	nop
 800fb40:	0800fa85 	.word	0x0800fa85
 800fb44:	2000156c 	.word	0x2000156c

0800fb48 <_fwalk_sglue>:
 800fb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb4c:	4607      	mov	r7, r0
 800fb4e:	4688      	mov	r8, r1
 800fb50:	4614      	mov	r4, r2
 800fb52:	2600      	movs	r6, #0
 800fb54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb58:	f1b9 0901 	subs.w	r9, r9, #1
 800fb5c:	d505      	bpl.n	800fb6a <_fwalk_sglue+0x22>
 800fb5e:	6824      	ldr	r4, [r4, #0]
 800fb60:	2c00      	cmp	r4, #0
 800fb62:	d1f7      	bne.n	800fb54 <_fwalk_sglue+0xc>
 800fb64:	4630      	mov	r0, r6
 800fb66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb6a:	89ab      	ldrh	r3, [r5, #12]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d907      	bls.n	800fb80 <_fwalk_sglue+0x38>
 800fb70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb74:	3301      	adds	r3, #1
 800fb76:	d003      	beq.n	800fb80 <_fwalk_sglue+0x38>
 800fb78:	4629      	mov	r1, r5
 800fb7a:	4638      	mov	r0, r7
 800fb7c:	47c0      	blx	r8
 800fb7e:	4306      	orrs	r6, r0
 800fb80:	3568      	adds	r5, #104	@ 0x68
 800fb82:	e7e9      	b.n	800fb58 <_fwalk_sglue+0x10>

0800fb84 <_puts_r>:
 800fb84:	6a03      	ldr	r3, [r0, #32]
 800fb86:	b570      	push	{r4, r5, r6, lr}
 800fb88:	6884      	ldr	r4, [r0, #8]
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	460e      	mov	r6, r1
 800fb8e:	b90b      	cbnz	r3, 800fb94 <_puts_r+0x10>
 800fb90:	f7ff ffc2 	bl	800fb18 <__sinit>
 800fb94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb96:	07db      	lsls	r3, r3, #31
 800fb98:	d405      	bmi.n	800fba6 <_puts_r+0x22>
 800fb9a:	89a3      	ldrh	r3, [r4, #12]
 800fb9c:	0598      	lsls	r0, r3, #22
 800fb9e:	d402      	bmi.n	800fba6 <_puts_r+0x22>
 800fba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fba2:	f000 fa8a 	bl	80100ba <__retarget_lock_acquire_recursive>
 800fba6:	89a3      	ldrh	r3, [r4, #12]
 800fba8:	0719      	lsls	r1, r3, #28
 800fbaa:	d502      	bpl.n	800fbb2 <_puts_r+0x2e>
 800fbac:	6923      	ldr	r3, [r4, #16]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d135      	bne.n	800fc1e <_puts_r+0x9a>
 800fbb2:	4621      	mov	r1, r4
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	f000 f919 	bl	800fdec <__swsetup_r>
 800fbba:	b380      	cbz	r0, 800fc1e <_puts_r+0x9a>
 800fbbc:	f04f 35ff 	mov.w	r5, #4294967295
 800fbc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbc2:	07da      	lsls	r2, r3, #31
 800fbc4:	d405      	bmi.n	800fbd2 <_puts_r+0x4e>
 800fbc6:	89a3      	ldrh	r3, [r4, #12]
 800fbc8:	059b      	lsls	r3, r3, #22
 800fbca:	d402      	bmi.n	800fbd2 <_puts_r+0x4e>
 800fbcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbce:	f000 fa75 	bl	80100bc <__retarget_lock_release_recursive>
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	bd70      	pop	{r4, r5, r6, pc}
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	da04      	bge.n	800fbe4 <_puts_r+0x60>
 800fbda:	69a2      	ldr	r2, [r4, #24]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	dc17      	bgt.n	800fc10 <_puts_r+0x8c>
 800fbe0:	290a      	cmp	r1, #10
 800fbe2:	d015      	beq.n	800fc10 <_puts_r+0x8c>
 800fbe4:	6823      	ldr	r3, [r4, #0]
 800fbe6:	1c5a      	adds	r2, r3, #1
 800fbe8:	6022      	str	r2, [r4, #0]
 800fbea:	7019      	strb	r1, [r3, #0]
 800fbec:	68a3      	ldr	r3, [r4, #8]
 800fbee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	60a3      	str	r3, [r4, #8]
 800fbf6:	2900      	cmp	r1, #0
 800fbf8:	d1ed      	bne.n	800fbd6 <_puts_r+0x52>
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	da11      	bge.n	800fc22 <_puts_r+0x9e>
 800fbfe:	4622      	mov	r2, r4
 800fc00:	210a      	movs	r1, #10
 800fc02:	4628      	mov	r0, r5
 800fc04:	f000 f8b3 	bl	800fd6e <__swbuf_r>
 800fc08:	3001      	adds	r0, #1
 800fc0a:	d0d7      	beq.n	800fbbc <_puts_r+0x38>
 800fc0c:	250a      	movs	r5, #10
 800fc0e:	e7d7      	b.n	800fbc0 <_puts_r+0x3c>
 800fc10:	4622      	mov	r2, r4
 800fc12:	4628      	mov	r0, r5
 800fc14:	f000 f8ab 	bl	800fd6e <__swbuf_r>
 800fc18:	3001      	adds	r0, #1
 800fc1a:	d1e7      	bne.n	800fbec <_puts_r+0x68>
 800fc1c:	e7ce      	b.n	800fbbc <_puts_r+0x38>
 800fc1e:	3e01      	subs	r6, #1
 800fc20:	e7e4      	b.n	800fbec <_puts_r+0x68>
 800fc22:	6823      	ldr	r3, [r4, #0]
 800fc24:	1c5a      	adds	r2, r3, #1
 800fc26:	6022      	str	r2, [r4, #0]
 800fc28:	220a      	movs	r2, #10
 800fc2a:	701a      	strb	r2, [r3, #0]
 800fc2c:	e7ee      	b.n	800fc0c <_puts_r+0x88>
	...

0800fc30 <puts>:
 800fc30:	4b02      	ldr	r3, [pc, #8]	@ (800fc3c <puts+0xc>)
 800fc32:	4601      	mov	r1, r0
 800fc34:	6818      	ldr	r0, [r3, #0]
 800fc36:	f7ff bfa5 	b.w	800fb84 <_puts_r>
 800fc3a:	bf00      	nop
 800fc3c:	200001a4 	.word	0x200001a4

0800fc40 <sniprintf>:
 800fc40:	b40c      	push	{r2, r3}
 800fc42:	b530      	push	{r4, r5, lr}
 800fc44:	4b17      	ldr	r3, [pc, #92]	@ (800fca4 <sniprintf+0x64>)
 800fc46:	1e0c      	subs	r4, r1, #0
 800fc48:	681d      	ldr	r5, [r3, #0]
 800fc4a:	b09d      	sub	sp, #116	@ 0x74
 800fc4c:	da08      	bge.n	800fc60 <sniprintf+0x20>
 800fc4e:	238b      	movs	r3, #139	@ 0x8b
 800fc50:	602b      	str	r3, [r5, #0]
 800fc52:	f04f 30ff 	mov.w	r0, #4294967295
 800fc56:	b01d      	add	sp, #116	@ 0x74
 800fc58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc5c:	b002      	add	sp, #8
 800fc5e:	4770      	bx	lr
 800fc60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fc64:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fc68:	bf14      	ite	ne
 800fc6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fc6e:	4623      	moveq	r3, r4
 800fc70:	9304      	str	r3, [sp, #16]
 800fc72:	9307      	str	r3, [sp, #28]
 800fc74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc78:	9002      	str	r0, [sp, #8]
 800fc7a:	9006      	str	r0, [sp, #24]
 800fc7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fc80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fc82:	ab21      	add	r3, sp, #132	@ 0x84
 800fc84:	a902      	add	r1, sp, #8
 800fc86:	4628      	mov	r0, r5
 800fc88:	9301      	str	r3, [sp, #4]
 800fc8a:	f002 f959 	bl	8011f40 <_svfiprintf_r>
 800fc8e:	1c43      	adds	r3, r0, #1
 800fc90:	bfbc      	itt	lt
 800fc92:	238b      	movlt	r3, #139	@ 0x8b
 800fc94:	602b      	strlt	r3, [r5, #0]
 800fc96:	2c00      	cmp	r4, #0
 800fc98:	d0dd      	beq.n	800fc56 <sniprintf+0x16>
 800fc9a:	9b02      	ldr	r3, [sp, #8]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	701a      	strb	r2, [r3, #0]
 800fca0:	e7d9      	b.n	800fc56 <sniprintf+0x16>
 800fca2:	bf00      	nop
 800fca4:	200001a4 	.word	0x200001a4

0800fca8 <siprintf>:
 800fca8:	b40e      	push	{r1, r2, r3}
 800fcaa:	b500      	push	{lr}
 800fcac:	b09c      	sub	sp, #112	@ 0x70
 800fcae:	ab1d      	add	r3, sp, #116	@ 0x74
 800fcb0:	9002      	str	r0, [sp, #8]
 800fcb2:	9006      	str	r0, [sp, #24]
 800fcb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fcb8:	4809      	ldr	r0, [pc, #36]	@ (800fce0 <siprintf+0x38>)
 800fcba:	9107      	str	r1, [sp, #28]
 800fcbc:	9104      	str	r1, [sp, #16]
 800fcbe:	4909      	ldr	r1, [pc, #36]	@ (800fce4 <siprintf+0x3c>)
 800fcc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc4:	9105      	str	r1, [sp, #20]
 800fcc6:	6800      	ldr	r0, [r0, #0]
 800fcc8:	9301      	str	r3, [sp, #4]
 800fcca:	a902      	add	r1, sp, #8
 800fccc:	f002 f938 	bl	8011f40 <_svfiprintf_r>
 800fcd0:	9b02      	ldr	r3, [sp, #8]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	701a      	strb	r2, [r3, #0]
 800fcd6:	b01c      	add	sp, #112	@ 0x70
 800fcd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcdc:	b003      	add	sp, #12
 800fcde:	4770      	bx	lr
 800fce0:	200001a4 	.word	0x200001a4
 800fce4:	ffff0208 	.word	0xffff0208

0800fce8 <__sread>:
 800fce8:	b510      	push	{r4, lr}
 800fcea:	460c      	mov	r4, r1
 800fcec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcf0:	f000 f984 	bl	800fffc <_read_r>
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	bfab      	itete	ge
 800fcf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fcfa:	89a3      	ldrhlt	r3, [r4, #12]
 800fcfc:	181b      	addge	r3, r3, r0
 800fcfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fd02:	bfac      	ite	ge
 800fd04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fd06:	81a3      	strhlt	r3, [r4, #12]
 800fd08:	bd10      	pop	{r4, pc}

0800fd0a <__swrite>:
 800fd0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0e:	461f      	mov	r7, r3
 800fd10:	898b      	ldrh	r3, [r1, #12]
 800fd12:	05db      	lsls	r3, r3, #23
 800fd14:	4605      	mov	r5, r0
 800fd16:	460c      	mov	r4, r1
 800fd18:	4616      	mov	r6, r2
 800fd1a:	d505      	bpl.n	800fd28 <__swrite+0x1e>
 800fd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd20:	2302      	movs	r3, #2
 800fd22:	2200      	movs	r2, #0
 800fd24:	f000 f958 	bl	800ffd8 <_lseek_r>
 800fd28:	89a3      	ldrh	r3, [r4, #12]
 800fd2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fd32:	81a3      	strh	r3, [r4, #12]
 800fd34:	4632      	mov	r2, r6
 800fd36:	463b      	mov	r3, r7
 800fd38:	4628      	mov	r0, r5
 800fd3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3e:	f000 b97f 	b.w	8010040 <_write_r>

0800fd42 <__sseek>:
 800fd42:	b510      	push	{r4, lr}
 800fd44:	460c      	mov	r4, r1
 800fd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd4a:	f000 f945 	bl	800ffd8 <_lseek_r>
 800fd4e:	1c43      	adds	r3, r0, #1
 800fd50:	89a3      	ldrh	r3, [r4, #12]
 800fd52:	bf15      	itete	ne
 800fd54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fd56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fd5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fd5e:	81a3      	strheq	r3, [r4, #12]
 800fd60:	bf18      	it	ne
 800fd62:	81a3      	strhne	r3, [r4, #12]
 800fd64:	bd10      	pop	{r4, pc}

0800fd66 <__sclose>:
 800fd66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd6a:	f000 b925 	b.w	800ffb8 <_close_r>

0800fd6e <__swbuf_r>:
 800fd6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd70:	460e      	mov	r6, r1
 800fd72:	4614      	mov	r4, r2
 800fd74:	4605      	mov	r5, r0
 800fd76:	b118      	cbz	r0, 800fd80 <__swbuf_r+0x12>
 800fd78:	6a03      	ldr	r3, [r0, #32]
 800fd7a:	b90b      	cbnz	r3, 800fd80 <__swbuf_r+0x12>
 800fd7c:	f7ff fecc 	bl	800fb18 <__sinit>
 800fd80:	69a3      	ldr	r3, [r4, #24]
 800fd82:	60a3      	str	r3, [r4, #8]
 800fd84:	89a3      	ldrh	r3, [r4, #12]
 800fd86:	071a      	lsls	r2, r3, #28
 800fd88:	d501      	bpl.n	800fd8e <__swbuf_r+0x20>
 800fd8a:	6923      	ldr	r3, [r4, #16]
 800fd8c:	b943      	cbnz	r3, 800fda0 <__swbuf_r+0x32>
 800fd8e:	4621      	mov	r1, r4
 800fd90:	4628      	mov	r0, r5
 800fd92:	f000 f82b 	bl	800fdec <__swsetup_r>
 800fd96:	b118      	cbz	r0, 800fda0 <__swbuf_r+0x32>
 800fd98:	f04f 37ff 	mov.w	r7, #4294967295
 800fd9c:	4638      	mov	r0, r7
 800fd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fda0:	6823      	ldr	r3, [r4, #0]
 800fda2:	6922      	ldr	r2, [r4, #16]
 800fda4:	1a98      	subs	r0, r3, r2
 800fda6:	6963      	ldr	r3, [r4, #20]
 800fda8:	b2f6      	uxtb	r6, r6
 800fdaa:	4283      	cmp	r3, r0
 800fdac:	4637      	mov	r7, r6
 800fdae:	dc05      	bgt.n	800fdbc <__swbuf_r+0x4e>
 800fdb0:	4621      	mov	r1, r4
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	f002 fa44 	bl	8012240 <_fflush_r>
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	d1ed      	bne.n	800fd98 <__swbuf_r+0x2a>
 800fdbc:	68a3      	ldr	r3, [r4, #8]
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	60a3      	str	r3, [r4, #8]
 800fdc2:	6823      	ldr	r3, [r4, #0]
 800fdc4:	1c5a      	adds	r2, r3, #1
 800fdc6:	6022      	str	r2, [r4, #0]
 800fdc8:	701e      	strb	r6, [r3, #0]
 800fdca:	6962      	ldr	r2, [r4, #20]
 800fdcc:	1c43      	adds	r3, r0, #1
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d004      	beq.n	800fddc <__swbuf_r+0x6e>
 800fdd2:	89a3      	ldrh	r3, [r4, #12]
 800fdd4:	07db      	lsls	r3, r3, #31
 800fdd6:	d5e1      	bpl.n	800fd9c <__swbuf_r+0x2e>
 800fdd8:	2e0a      	cmp	r6, #10
 800fdda:	d1df      	bne.n	800fd9c <__swbuf_r+0x2e>
 800fddc:	4621      	mov	r1, r4
 800fdde:	4628      	mov	r0, r5
 800fde0:	f002 fa2e 	bl	8012240 <_fflush_r>
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d0d9      	beq.n	800fd9c <__swbuf_r+0x2e>
 800fde8:	e7d6      	b.n	800fd98 <__swbuf_r+0x2a>
	...

0800fdec <__swsetup_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4b29      	ldr	r3, [pc, #164]	@ (800fe94 <__swsetup_r+0xa8>)
 800fdf0:	4605      	mov	r5, r0
 800fdf2:	6818      	ldr	r0, [r3, #0]
 800fdf4:	460c      	mov	r4, r1
 800fdf6:	b118      	cbz	r0, 800fe00 <__swsetup_r+0x14>
 800fdf8:	6a03      	ldr	r3, [r0, #32]
 800fdfa:	b90b      	cbnz	r3, 800fe00 <__swsetup_r+0x14>
 800fdfc:	f7ff fe8c 	bl	800fb18 <__sinit>
 800fe00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe04:	0719      	lsls	r1, r3, #28
 800fe06:	d422      	bmi.n	800fe4e <__swsetup_r+0x62>
 800fe08:	06da      	lsls	r2, r3, #27
 800fe0a:	d407      	bmi.n	800fe1c <__swsetup_r+0x30>
 800fe0c:	2209      	movs	r2, #9
 800fe0e:	602a      	str	r2, [r5, #0]
 800fe10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe14:	81a3      	strh	r3, [r4, #12]
 800fe16:	f04f 30ff 	mov.w	r0, #4294967295
 800fe1a:	e033      	b.n	800fe84 <__swsetup_r+0x98>
 800fe1c:	0758      	lsls	r0, r3, #29
 800fe1e:	d512      	bpl.n	800fe46 <__swsetup_r+0x5a>
 800fe20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe22:	b141      	cbz	r1, 800fe36 <__swsetup_r+0x4a>
 800fe24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe28:	4299      	cmp	r1, r3
 800fe2a:	d002      	beq.n	800fe32 <__swsetup_r+0x46>
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f000 ffd7 	bl	8010de0 <_free_r>
 800fe32:	2300      	movs	r3, #0
 800fe34:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe36:	89a3      	ldrh	r3, [r4, #12]
 800fe38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fe3c:	81a3      	strh	r3, [r4, #12]
 800fe3e:	2300      	movs	r3, #0
 800fe40:	6063      	str	r3, [r4, #4]
 800fe42:	6923      	ldr	r3, [r4, #16]
 800fe44:	6023      	str	r3, [r4, #0]
 800fe46:	89a3      	ldrh	r3, [r4, #12]
 800fe48:	f043 0308 	orr.w	r3, r3, #8
 800fe4c:	81a3      	strh	r3, [r4, #12]
 800fe4e:	6923      	ldr	r3, [r4, #16]
 800fe50:	b94b      	cbnz	r3, 800fe66 <__swsetup_r+0x7a>
 800fe52:	89a3      	ldrh	r3, [r4, #12]
 800fe54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fe58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe5c:	d003      	beq.n	800fe66 <__swsetup_r+0x7a>
 800fe5e:	4621      	mov	r1, r4
 800fe60:	4628      	mov	r0, r5
 800fe62:	f002 fa4d 	bl	8012300 <__smakebuf_r>
 800fe66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe6a:	f013 0201 	ands.w	r2, r3, #1
 800fe6e:	d00a      	beq.n	800fe86 <__swsetup_r+0x9a>
 800fe70:	2200      	movs	r2, #0
 800fe72:	60a2      	str	r2, [r4, #8]
 800fe74:	6962      	ldr	r2, [r4, #20]
 800fe76:	4252      	negs	r2, r2
 800fe78:	61a2      	str	r2, [r4, #24]
 800fe7a:	6922      	ldr	r2, [r4, #16]
 800fe7c:	b942      	cbnz	r2, 800fe90 <__swsetup_r+0xa4>
 800fe7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fe82:	d1c5      	bne.n	800fe10 <__swsetup_r+0x24>
 800fe84:	bd38      	pop	{r3, r4, r5, pc}
 800fe86:	0799      	lsls	r1, r3, #30
 800fe88:	bf58      	it	pl
 800fe8a:	6962      	ldrpl	r2, [r4, #20]
 800fe8c:	60a2      	str	r2, [r4, #8]
 800fe8e:	e7f4      	b.n	800fe7a <__swsetup_r+0x8e>
 800fe90:	2000      	movs	r0, #0
 800fe92:	e7f7      	b.n	800fe84 <__swsetup_r+0x98>
 800fe94:	200001a4 	.word	0x200001a4

0800fe98 <memset>:
 800fe98:	4402      	add	r2, r0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d100      	bne.n	800fea2 <memset+0xa>
 800fea0:	4770      	bx	lr
 800fea2:	f803 1b01 	strb.w	r1, [r3], #1
 800fea6:	e7f9      	b.n	800fe9c <memset+0x4>

0800fea8 <strncmp>:
 800fea8:	b510      	push	{r4, lr}
 800feaa:	b16a      	cbz	r2, 800fec8 <strncmp+0x20>
 800feac:	3901      	subs	r1, #1
 800feae:	1884      	adds	r4, r0, r2
 800feb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800feb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800feb8:	429a      	cmp	r2, r3
 800feba:	d103      	bne.n	800fec4 <strncmp+0x1c>
 800febc:	42a0      	cmp	r0, r4
 800febe:	d001      	beq.n	800fec4 <strncmp+0x1c>
 800fec0:	2a00      	cmp	r2, #0
 800fec2:	d1f5      	bne.n	800feb0 <strncmp+0x8>
 800fec4:	1ad0      	subs	r0, r2, r3
 800fec6:	bd10      	pop	{r4, pc}
 800fec8:	4610      	mov	r0, r2
 800feca:	e7fc      	b.n	800fec6 <strncmp+0x1e>

0800fecc <strtok>:
 800fecc:	4b16      	ldr	r3, [pc, #88]	@ (800ff28 <strtok+0x5c>)
 800fece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fed2:	681f      	ldr	r7, [r3, #0]
 800fed4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800fed6:	4605      	mov	r5, r0
 800fed8:	460e      	mov	r6, r1
 800feda:	b9ec      	cbnz	r4, 800ff18 <strtok+0x4c>
 800fedc:	2050      	movs	r0, #80	@ 0x50
 800fede:	f7fd ff73 	bl	800ddc8 <malloc>
 800fee2:	4602      	mov	r2, r0
 800fee4:	6478      	str	r0, [r7, #68]	@ 0x44
 800fee6:	b920      	cbnz	r0, 800fef2 <strtok+0x26>
 800fee8:	4b10      	ldr	r3, [pc, #64]	@ (800ff2c <strtok+0x60>)
 800feea:	4811      	ldr	r0, [pc, #68]	@ (800ff30 <strtok+0x64>)
 800feec:	215b      	movs	r1, #91	@ 0x5b
 800feee:	f000 f90d 	bl	801010c <__assert_func>
 800fef2:	e9c0 4400 	strd	r4, r4, [r0]
 800fef6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fefa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fefe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ff02:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ff06:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ff0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ff0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ff12:	6184      	str	r4, [r0, #24]
 800ff14:	7704      	strb	r4, [r0, #28]
 800ff16:	6244      	str	r4, [r0, #36]	@ 0x24
 800ff18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ff1a:	4631      	mov	r1, r6
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff24:	f000 b806 	b.w	800ff34 <__strtok_r>
 800ff28:	200001a4 	.word	0x200001a4
 800ff2c:	08012b8a 	.word	0x08012b8a
 800ff30:	08012ba1 	.word	0x08012ba1

0800ff34 <__strtok_r>:
 800ff34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff36:	4604      	mov	r4, r0
 800ff38:	b908      	cbnz	r0, 800ff3e <__strtok_r+0xa>
 800ff3a:	6814      	ldr	r4, [r2, #0]
 800ff3c:	b144      	cbz	r4, 800ff50 <__strtok_r+0x1c>
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ff44:	460f      	mov	r7, r1
 800ff46:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ff4a:	b91e      	cbnz	r6, 800ff54 <__strtok_r+0x20>
 800ff4c:	b965      	cbnz	r5, 800ff68 <__strtok_r+0x34>
 800ff4e:	6015      	str	r5, [r2, #0]
 800ff50:	2000      	movs	r0, #0
 800ff52:	e005      	b.n	800ff60 <__strtok_r+0x2c>
 800ff54:	42b5      	cmp	r5, r6
 800ff56:	d1f6      	bne.n	800ff46 <__strtok_r+0x12>
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d1f0      	bne.n	800ff3e <__strtok_r+0xa>
 800ff5c:	6014      	str	r4, [r2, #0]
 800ff5e:	7003      	strb	r3, [r0, #0]
 800ff60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff62:	461c      	mov	r4, r3
 800ff64:	e00c      	b.n	800ff80 <__strtok_r+0x4c>
 800ff66:	b915      	cbnz	r5, 800ff6e <__strtok_r+0x3a>
 800ff68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ff6c:	460e      	mov	r6, r1
 800ff6e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ff72:	42ab      	cmp	r3, r5
 800ff74:	d1f7      	bne.n	800ff66 <__strtok_r+0x32>
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d0f3      	beq.n	800ff62 <__strtok_r+0x2e>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ff80:	6014      	str	r4, [r2, #0]
 800ff82:	e7ed      	b.n	800ff60 <__strtok_r+0x2c>

0800ff84 <strstr>:
 800ff84:	780a      	ldrb	r2, [r1, #0]
 800ff86:	b570      	push	{r4, r5, r6, lr}
 800ff88:	b96a      	cbnz	r2, 800ffa6 <strstr+0x22>
 800ff8a:	bd70      	pop	{r4, r5, r6, pc}
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d109      	bne.n	800ffa4 <strstr+0x20>
 800ff90:	460c      	mov	r4, r1
 800ff92:	4605      	mov	r5, r0
 800ff94:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d0f6      	beq.n	800ff8a <strstr+0x6>
 800ff9c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ffa0:	429e      	cmp	r6, r3
 800ffa2:	d0f7      	beq.n	800ff94 <strstr+0x10>
 800ffa4:	3001      	adds	r0, #1
 800ffa6:	7803      	ldrb	r3, [r0, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d1ef      	bne.n	800ff8c <strstr+0x8>
 800ffac:	4618      	mov	r0, r3
 800ffae:	e7ec      	b.n	800ff8a <strstr+0x6>

0800ffb0 <_localeconv_r>:
 800ffb0:	4800      	ldr	r0, [pc, #0]	@ (800ffb4 <_localeconv_r+0x4>)
 800ffb2:	4770      	bx	lr
 800ffb4:	20000128 	.word	0x20000128

0800ffb8 <_close_r>:
 800ffb8:	b538      	push	{r3, r4, r5, lr}
 800ffba:	4d06      	ldr	r5, [pc, #24]	@ (800ffd4 <_close_r+0x1c>)
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	4608      	mov	r0, r1
 800ffc2:	602b      	str	r3, [r5, #0]
 800ffc4:	f7f3 fa76 	bl	80034b4 <_close>
 800ffc8:	1c43      	adds	r3, r0, #1
 800ffca:	d102      	bne.n	800ffd2 <_close_r+0x1a>
 800ffcc:	682b      	ldr	r3, [r5, #0]
 800ffce:	b103      	cbz	r3, 800ffd2 <_close_r+0x1a>
 800ffd0:	6023      	str	r3, [r4, #0]
 800ffd2:	bd38      	pop	{r3, r4, r5, pc}
 800ffd4:	20001570 	.word	0x20001570

0800ffd8 <_lseek_r>:
 800ffd8:	b538      	push	{r3, r4, r5, lr}
 800ffda:	4d07      	ldr	r5, [pc, #28]	@ (800fff8 <_lseek_r+0x20>)
 800ffdc:	4604      	mov	r4, r0
 800ffde:	4608      	mov	r0, r1
 800ffe0:	4611      	mov	r1, r2
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	602a      	str	r2, [r5, #0]
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	f7f3 fa8b 	bl	8003502 <_lseek>
 800ffec:	1c43      	adds	r3, r0, #1
 800ffee:	d102      	bne.n	800fff6 <_lseek_r+0x1e>
 800fff0:	682b      	ldr	r3, [r5, #0]
 800fff2:	b103      	cbz	r3, 800fff6 <_lseek_r+0x1e>
 800fff4:	6023      	str	r3, [r4, #0]
 800fff6:	bd38      	pop	{r3, r4, r5, pc}
 800fff8:	20001570 	.word	0x20001570

0800fffc <_read_r>:
 800fffc:	b538      	push	{r3, r4, r5, lr}
 800fffe:	4d07      	ldr	r5, [pc, #28]	@ (801001c <_read_r+0x20>)
 8010000:	4604      	mov	r4, r0
 8010002:	4608      	mov	r0, r1
 8010004:	4611      	mov	r1, r2
 8010006:	2200      	movs	r2, #0
 8010008:	602a      	str	r2, [r5, #0]
 801000a:	461a      	mov	r2, r3
 801000c:	f7f3 fa19 	bl	8003442 <_read>
 8010010:	1c43      	adds	r3, r0, #1
 8010012:	d102      	bne.n	801001a <_read_r+0x1e>
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	b103      	cbz	r3, 801001a <_read_r+0x1e>
 8010018:	6023      	str	r3, [r4, #0]
 801001a:	bd38      	pop	{r3, r4, r5, pc}
 801001c:	20001570 	.word	0x20001570

08010020 <_sbrk_r>:
 8010020:	b538      	push	{r3, r4, r5, lr}
 8010022:	4d06      	ldr	r5, [pc, #24]	@ (801003c <_sbrk_r+0x1c>)
 8010024:	2300      	movs	r3, #0
 8010026:	4604      	mov	r4, r0
 8010028:	4608      	mov	r0, r1
 801002a:	602b      	str	r3, [r5, #0]
 801002c:	f7f3 fa76 	bl	800351c <_sbrk>
 8010030:	1c43      	adds	r3, r0, #1
 8010032:	d102      	bne.n	801003a <_sbrk_r+0x1a>
 8010034:	682b      	ldr	r3, [r5, #0]
 8010036:	b103      	cbz	r3, 801003a <_sbrk_r+0x1a>
 8010038:	6023      	str	r3, [r4, #0]
 801003a:	bd38      	pop	{r3, r4, r5, pc}
 801003c:	20001570 	.word	0x20001570

08010040 <_write_r>:
 8010040:	b538      	push	{r3, r4, r5, lr}
 8010042:	4d07      	ldr	r5, [pc, #28]	@ (8010060 <_write_r+0x20>)
 8010044:	4604      	mov	r4, r0
 8010046:	4608      	mov	r0, r1
 8010048:	4611      	mov	r1, r2
 801004a:	2200      	movs	r2, #0
 801004c:	602a      	str	r2, [r5, #0]
 801004e:	461a      	mov	r2, r3
 8010050:	f7f3 fa14 	bl	800347c <_write>
 8010054:	1c43      	adds	r3, r0, #1
 8010056:	d102      	bne.n	801005e <_write_r+0x1e>
 8010058:	682b      	ldr	r3, [r5, #0]
 801005a:	b103      	cbz	r3, 801005e <_write_r+0x1e>
 801005c:	6023      	str	r3, [r4, #0]
 801005e:	bd38      	pop	{r3, r4, r5, pc}
 8010060:	20001570 	.word	0x20001570

08010064 <__errno>:
 8010064:	4b01      	ldr	r3, [pc, #4]	@ (801006c <__errno+0x8>)
 8010066:	6818      	ldr	r0, [r3, #0]
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	200001a4 	.word	0x200001a4

08010070 <__libc_init_array>:
 8010070:	b570      	push	{r4, r5, r6, lr}
 8010072:	4d0d      	ldr	r5, [pc, #52]	@ (80100a8 <__libc_init_array+0x38>)
 8010074:	4c0d      	ldr	r4, [pc, #52]	@ (80100ac <__libc_init_array+0x3c>)
 8010076:	1b64      	subs	r4, r4, r5
 8010078:	10a4      	asrs	r4, r4, #2
 801007a:	2600      	movs	r6, #0
 801007c:	42a6      	cmp	r6, r4
 801007e:	d109      	bne.n	8010094 <__libc_init_array+0x24>
 8010080:	4d0b      	ldr	r5, [pc, #44]	@ (80100b0 <__libc_init_array+0x40>)
 8010082:	4c0c      	ldr	r4, [pc, #48]	@ (80100b4 <__libc_init_array+0x44>)
 8010084:	f002 fb8a 	bl	801279c <_init>
 8010088:	1b64      	subs	r4, r4, r5
 801008a:	10a4      	asrs	r4, r4, #2
 801008c:	2600      	movs	r6, #0
 801008e:	42a6      	cmp	r6, r4
 8010090:	d105      	bne.n	801009e <__libc_init_array+0x2e>
 8010092:	bd70      	pop	{r4, r5, r6, pc}
 8010094:	f855 3b04 	ldr.w	r3, [r5], #4
 8010098:	4798      	blx	r3
 801009a:	3601      	adds	r6, #1
 801009c:	e7ee      	b.n	801007c <__libc_init_array+0xc>
 801009e:	f855 3b04 	ldr.w	r3, [r5], #4
 80100a2:	4798      	blx	r3
 80100a4:	3601      	adds	r6, #1
 80100a6:	e7f2      	b.n	801008e <__libc_init_array+0x1e>
 80100a8:	08012e8c 	.word	0x08012e8c
 80100ac:	08012e8c 	.word	0x08012e8c
 80100b0:	08012e8c 	.word	0x08012e8c
 80100b4:	08012e90 	.word	0x08012e90

080100b8 <__retarget_lock_init_recursive>:
 80100b8:	4770      	bx	lr

080100ba <__retarget_lock_acquire_recursive>:
 80100ba:	4770      	bx	lr

080100bc <__retarget_lock_release_recursive>:
 80100bc:	4770      	bx	lr

080100be <strcpy>:
 80100be:	4603      	mov	r3, r0
 80100c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100c4:	f803 2b01 	strb.w	r2, [r3], #1
 80100c8:	2a00      	cmp	r2, #0
 80100ca:	d1f9      	bne.n	80100c0 <strcpy+0x2>
 80100cc:	4770      	bx	lr

080100ce <memcpy>:
 80100ce:	440a      	add	r2, r1
 80100d0:	4291      	cmp	r1, r2
 80100d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80100d6:	d100      	bne.n	80100da <memcpy+0xc>
 80100d8:	4770      	bx	lr
 80100da:	b510      	push	{r4, lr}
 80100dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100e4:	4291      	cmp	r1, r2
 80100e6:	d1f9      	bne.n	80100dc <memcpy+0xe>
 80100e8:	bd10      	pop	{r4, pc}
 80100ea:	0000      	movs	r0, r0
 80100ec:	0000      	movs	r0, r0
	...

080100f0 <nan>:
 80100f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80100f8 <nan+0x8>
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	00000000 	.word	0x00000000
 80100fc:	7ff80000 	.word	0x7ff80000

08010100 <nanf>:
 8010100:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010108 <nanf+0x8>
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	7fc00000 	.word	0x7fc00000

0801010c <__assert_func>:
 801010c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801010e:	4614      	mov	r4, r2
 8010110:	461a      	mov	r2, r3
 8010112:	4b09      	ldr	r3, [pc, #36]	@ (8010138 <__assert_func+0x2c>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4605      	mov	r5, r0
 8010118:	68d8      	ldr	r0, [r3, #12]
 801011a:	b954      	cbnz	r4, 8010132 <__assert_func+0x26>
 801011c:	4b07      	ldr	r3, [pc, #28]	@ (801013c <__assert_func+0x30>)
 801011e:	461c      	mov	r4, r3
 8010120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010124:	9100      	str	r1, [sp, #0]
 8010126:	462b      	mov	r3, r5
 8010128:	4905      	ldr	r1, [pc, #20]	@ (8010140 <__assert_func+0x34>)
 801012a:	f002 f8b1 	bl	8012290 <fiprintf>
 801012e:	f002 f95f 	bl	80123f0 <abort>
 8010132:	4b04      	ldr	r3, [pc, #16]	@ (8010144 <__assert_func+0x38>)
 8010134:	e7f4      	b.n	8010120 <__assert_func+0x14>
 8010136:	bf00      	nop
 8010138:	200001a4 	.word	0x200001a4
 801013c:	08012c3e 	.word	0x08012c3e
 8010140:	08012c10 	.word	0x08012c10
 8010144:	08012c03 	.word	0x08012c03

08010148 <quorem>:
 8010148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014c:	6903      	ldr	r3, [r0, #16]
 801014e:	690c      	ldr	r4, [r1, #16]
 8010150:	42a3      	cmp	r3, r4
 8010152:	4607      	mov	r7, r0
 8010154:	db7e      	blt.n	8010254 <quorem+0x10c>
 8010156:	3c01      	subs	r4, #1
 8010158:	f101 0814 	add.w	r8, r1, #20
 801015c:	00a3      	lsls	r3, r4, #2
 801015e:	f100 0514 	add.w	r5, r0, #20
 8010162:	9300      	str	r3, [sp, #0]
 8010164:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010168:	9301      	str	r3, [sp, #4]
 801016a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801016e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010172:	3301      	adds	r3, #1
 8010174:	429a      	cmp	r2, r3
 8010176:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801017a:	fbb2 f6f3 	udiv	r6, r2, r3
 801017e:	d32e      	bcc.n	80101de <quorem+0x96>
 8010180:	f04f 0a00 	mov.w	sl, #0
 8010184:	46c4      	mov	ip, r8
 8010186:	46ae      	mov	lr, r5
 8010188:	46d3      	mov	fp, sl
 801018a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801018e:	b298      	uxth	r0, r3
 8010190:	fb06 a000 	mla	r0, r6, r0, sl
 8010194:	0c02      	lsrs	r2, r0, #16
 8010196:	0c1b      	lsrs	r3, r3, #16
 8010198:	fb06 2303 	mla	r3, r6, r3, r2
 801019c:	f8de 2000 	ldr.w	r2, [lr]
 80101a0:	b280      	uxth	r0, r0
 80101a2:	b292      	uxth	r2, r2
 80101a4:	1a12      	subs	r2, r2, r0
 80101a6:	445a      	add	r2, fp
 80101a8:	f8de 0000 	ldr.w	r0, [lr]
 80101ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80101b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80101ba:	b292      	uxth	r2, r2
 80101bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80101c0:	45e1      	cmp	r9, ip
 80101c2:	f84e 2b04 	str.w	r2, [lr], #4
 80101c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80101ca:	d2de      	bcs.n	801018a <quorem+0x42>
 80101cc:	9b00      	ldr	r3, [sp, #0]
 80101ce:	58eb      	ldr	r3, [r5, r3]
 80101d0:	b92b      	cbnz	r3, 80101de <quorem+0x96>
 80101d2:	9b01      	ldr	r3, [sp, #4]
 80101d4:	3b04      	subs	r3, #4
 80101d6:	429d      	cmp	r5, r3
 80101d8:	461a      	mov	r2, r3
 80101da:	d32f      	bcc.n	801023c <quorem+0xf4>
 80101dc:	613c      	str	r4, [r7, #16]
 80101de:	4638      	mov	r0, r7
 80101e0:	f001 fc58 	bl	8011a94 <__mcmp>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	db25      	blt.n	8010234 <quorem+0xec>
 80101e8:	4629      	mov	r1, r5
 80101ea:	2000      	movs	r0, #0
 80101ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80101f0:	f8d1 c000 	ldr.w	ip, [r1]
 80101f4:	fa1f fe82 	uxth.w	lr, r2
 80101f8:	fa1f f38c 	uxth.w	r3, ip
 80101fc:	eba3 030e 	sub.w	r3, r3, lr
 8010200:	4403      	add	r3, r0
 8010202:	0c12      	lsrs	r2, r2, #16
 8010204:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010208:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801020c:	b29b      	uxth	r3, r3
 801020e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010212:	45c1      	cmp	r9, r8
 8010214:	f841 3b04 	str.w	r3, [r1], #4
 8010218:	ea4f 4022 	mov.w	r0, r2, asr #16
 801021c:	d2e6      	bcs.n	80101ec <quorem+0xa4>
 801021e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010226:	b922      	cbnz	r2, 8010232 <quorem+0xea>
 8010228:	3b04      	subs	r3, #4
 801022a:	429d      	cmp	r5, r3
 801022c:	461a      	mov	r2, r3
 801022e:	d30b      	bcc.n	8010248 <quorem+0x100>
 8010230:	613c      	str	r4, [r7, #16]
 8010232:	3601      	adds	r6, #1
 8010234:	4630      	mov	r0, r6
 8010236:	b003      	add	sp, #12
 8010238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801023c:	6812      	ldr	r2, [r2, #0]
 801023e:	3b04      	subs	r3, #4
 8010240:	2a00      	cmp	r2, #0
 8010242:	d1cb      	bne.n	80101dc <quorem+0x94>
 8010244:	3c01      	subs	r4, #1
 8010246:	e7c6      	b.n	80101d6 <quorem+0x8e>
 8010248:	6812      	ldr	r2, [r2, #0]
 801024a:	3b04      	subs	r3, #4
 801024c:	2a00      	cmp	r2, #0
 801024e:	d1ef      	bne.n	8010230 <quorem+0xe8>
 8010250:	3c01      	subs	r4, #1
 8010252:	e7ea      	b.n	801022a <quorem+0xe2>
 8010254:	2000      	movs	r0, #0
 8010256:	e7ee      	b.n	8010236 <quorem+0xee>

08010258 <_dtoa_r>:
 8010258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025c:	69c7      	ldr	r7, [r0, #28]
 801025e:	b099      	sub	sp, #100	@ 0x64
 8010260:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010264:	ec55 4b10 	vmov	r4, r5, d0
 8010268:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801026a:	9109      	str	r1, [sp, #36]	@ 0x24
 801026c:	4683      	mov	fp, r0
 801026e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010270:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010272:	b97f      	cbnz	r7, 8010294 <_dtoa_r+0x3c>
 8010274:	2010      	movs	r0, #16
 8010276:	f7fd fda7 	bl	800ddc8 <malloc>
 801027a:	4602      	mov	r2, r0
 801027c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010280:	b920      	cbnz	r0, 801028c <_dtoa_r+0x34>
 8010282:	4ba7      	ldr	r3, [pc, #668]	@ (8010520 <_dtoa_r+0x2c8>)
 8010284:	21ef      	movs	r1, #239	@ 0xef
 8010286:	48a7      	ldr	r0, [pc, #668]	@ (8010524 <_dtoa_r+0x2cc>)
 8010288:	f7ff ff40 	bl	801010c <__assert_func>
 801028c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010290:	6007      	str	r7, [r0, #0]
 8010292:	60c7      	str	r7, [r0, #12]
 8010294:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010298:	6819      	ldr	r1, [r3, #0]
 801029a:	b159      	cbz	r1, 80102b4 <_dtoa_r+0x5c>
 801029c:	685a      	ldr	r2, [r3, #4]
 801029e:	604a      	str	r2, [r1, #4]
 80102a0:	2301      	movs	r3, #1
 80102a2:	4093      	lsls	r3, r2
 80102a4:	608b      	str	r3, [r1, #8]
 80102a6:	4658      	mov	r0, fp
 80102a8:	f001 f970 	bl	801158c <_Bfree>
 80102ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80102b0:	2200      	movs	r2, #0
 80102b2:	601a      	str	r2, [r3, #0]
 80102b4:	1e2b      	subs	r3, r5, #0
 80102b6:	bfb9      	ittee	lt
 80102b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80102bc:	9303      	strlt	r3, [sp, #12]
 80102be:	2300      	movge	r3, #0
 80102c0:	6033      	strge	r3, [r6, #0]
 80102c2:	9f03      	ldr	r7, [sp, #12]
 80102c4:	4b98      	ldr	r3, [pc, #608]	@ (8010528 <_dtoa_r+0x2d0>)
 80102c6:	bfbc      	itt	lt
 80102c8:	2201      	movlt	r2, #1
 80102ca:	6032      	strlt	r2, [r6, #0]
 80102cc:	43bb      	bics	r3, r7
 80102ce:	d112      	bne.n	80102f6 <_dtoa_r+0x9e>
 80102d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80102d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80102d6:	6013      	str	r3, [r2, #0]
 80102d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80102dc:	4323      	orrs	r3, r4
 80102de:	f000 854d 	beq.w	8010d7c <_dtoa_r+0xb24>
 80102e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801053c <_dtoa_r+0x2e4>
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f000 854f 	beq.w	8010d8c <_dtoa_r+0xb34>
 80102ee:	f10a 0303 	add.w	r3, sl, #3
 80102f2:	f000 bd49 	b.w	8010d88 <_dtoa_r+0xb30>
 80102f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102fa:	2200      	movs	r2, #0
 80102fc:	ec51 0b17 	vmov	r0, r1, d7
 8010300:	2300      	movs	r3, #0
 8010302:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010306:	f7f0 fc07 	bl	8000b18 <__aeabi_dcmpeq>
 801030a:	4680      	mov	r8, r0
 801030c:	b158      	cbz	r0, 8010326 <_dtoa_r+0xce>
 801030e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010310:	2301      	movs	r3, #1
 8010312:	6013      	str	r3, [r2, #0]
 8010314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010316:	b113      	cbz	r3, 801031e <_dtoa_r+0xc6>
 8010318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801031a:	4b84      	ldr	r3, [pc, #528]	@ (801052c <_dtoa_r+0x2d4>)
 801031c:	6013      	str	r3, [r2, #0]
 801031e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010540 <_dtoa_r+0x2e8>
 8010322:	f000 bd33 	b.w	8010d8c <_dtoa_r+0xb34>
 8010326:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801032a:	aa16      	add	r2, sp, #88	@ 0x58
 801032c:	a917      	add	r1, sp, #92	@ 0x5c
 801032e:	4658      	mov	r0, fp
 8010330:	f001 fcd0 	bl	8011cd4 <__d2b>
 8010334:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010338:	4681      	mov	r9, r0
 801033a:	2e00      	cmp	r6, #0
 801033c:	d077      	beq.n	801042e <_dtoa_r+0x1d6>
 801033e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010340:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801034c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010350:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010354:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010358:	4619      	mov	r1, r3
 801035a:	2200      	movs	r2, #0
 801035c:	4b74      	ldr	r3, [pc, #464]	@ (8010530 <_dtoa_r+0x2d8>)
 801035e:	f7ef ffbb 	bl	80002d8 <__aeabi_dsub>
 8010362:	a369      	add	r3, pc, #420	@ (adr r3, 8010508 <_dtoa_r+0x2b0>)
 8010364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010368:	f7f0 f96e 	bl	8000648 <__aeabi_dmul>
 801036c:	a368      	add	r3, pc, #416	@ (adr r3, 8010510 <_dtoa_r+0x2b8>)
 801036e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010372:	f7ef ffb3 	bl	80002dc <__adddf3>
 8010376:	4604      	mov	r4, r0
 8010378:	4630      	mov	r0, r6
 801037a:	460d      	mov	r5, r1
 801037c:	f7f0 f8fa 	bl	8000574 <__aeabi_i2d>
 8010380:	a365      	add	r3, pc, #404	@ (adr r3, 8010518 <_dtoa_r+0x2c0>)
 8010382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010386:	f7f0 f95f 	bl	8000648 <__aeabi_dmul>
 801038a:	4602      	mov	r2, r0
 801038c:	460b      	mov	r3, r1
 801038e:	4620      	mov	r0, r4
 8010390:	4629      	mov	r1, r5
 8010392:	f7ef ffa3 	bl	80002dc <__adddf3>
 8010396:	4604      	mov	r4, r0
 8010398:	460d      	mov	r5, r1
 801039a:	f7f0 fc05 	bl	8000ba8 <__aeabi_d2iz>
 801039e:	2200      	movs	r2, #0
 80103a0:	4607      	mov	r7, r0
 80103a2:	2300      	movs	r3, #0
 80103a4:	4620      	mov	r0, r4
 80103a6:	4629      	mov	r1, r5
 80103a8:	f7f0 fbc0 	bl	8000b2c <__aeabi_dcmplt>
 80103ac:	b140      	cbz	r0, 80103c0 <_dtoa_r+0x168>
 80103ae:	4638      	mov	r0, r7
 80103b0:	f7f0 f8e0 	bl	8000574 <__aeabi_i2d>
 80103b4:	4622      	mov	r2, r4
 80103b6:	462b      	mov	r3, r5
 80103b8:	f7f0 fbae 	bl	8000b18 <__aeabi_dcmpeq>
 80103bc:	b900      	cbnz	r0, 80103c0 <_dtoa_r+0x168>
 80103be:	3f01      	subs	r7, #1
 80103c0:	2f16      	cmp	r7, #22
 80103c2:	d851      	bhi.n	8010468 <_dtoa_r+0x210>
 80103c4:	4b5b      	ldr	r3, [pc, #364]	@ (8010534 <_dtoa_r+0x2dc>)
 80103c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80103ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103d2:	f7f0 fbab 	bl	8000b2c <__aeabi_dcmplt>
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d048      	beq.n	801046c <_dtoa_r+0x214>
 80103da:	3f01      	subs	r7, #1
 80103dc:	2300      	movs	r3, #0
 80103de:	9312      	str	r3, [sp, #72]	@ 0x48
 80103e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80103e2:	1b9b      	subs	r3, r3, r6
 80103e4:	1e5a      	subs	r2, r3, #1
 80103e6:	bf44      	itt	mi
 80103e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80103ec:	2300      	movmi	r3, #0
 80103ee:	9208      	str	r2, [sp, #32]
 80103f0:	bf54      	ite	pl
 80103f2:	f04f 0800 	movpl.w	r8, #0
 80103f6:	9308      	strmi	r3, [sp, #32]
 80103f8:	2f00      	cmp	r7, #0
 80103fa:	db39      	blt.n	8010470 <_dtoa_r+0x218>
 80103fc:	9b08      	ldr	r3, [sp, #32]
 80103fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010400:	443b      	add	r3, r7
 8010402:	9308      	str	r3, [sp, #32]
 8010404:	2300      	movs	r3, #0
 8010406:	930a      	str	r3, [sp, #40]	@ 0x28
 8010408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801040a:	2b09      	cmp	r3, #9
 801040c:	d864      	bhi.n	80104d8 <_dtoa_r+0x280>
 801040e:	2b05      	cmp	r3, #5
 8010410:	bfc4      	itt	gt
 8010412:	3b04      	subgt	r3, #4
 8010414:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010418:	f1a3 0302 	sub.w	r3, r3, #2
 801041c:	bfcc      	ite	gt
 801041e:	2400      	movgt	r4, #0
 8010420:	2401      	movle	r4, #1
 8010422:	2b03      	cmp	r3, #3
 8010424:	d863      	bhi.n	80104ee <_dtoa_r+0x296>
 8010426:	e8df f003 	tbb	[pc, r3]
 801042a:	372a      	.short	0x372a
 801042c:	5535      	.short	0x5535
 801042e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010432:	441e      	add	r6, r3
 8010434:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010438:	2b20      	cmp	r3, #32
 801043a:	bfc1      	itttt	gt
 801043c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010440:	409f      	lslgt	r7, r3
 8010442:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010446:	fa24 f303 	lsrgt.w	r3, r4, r3
 801044a:	bfd6      	itet	le
 801044c:	f1c3 0320 	rsble	r3, r3, #32
 8010450:	ea47 0003 	orrgt.w	r0, r7, r3
 8010454:	fa04 f003 	lslle.w	r0, r4, r3
 8010458:	f7f0 f87c 	bl	8000554 <__aeabi_ui2d>
 801045c:	2201      	movs	r2, #1
 801045e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010462:	3e01      	subs	r6, #1
 8010464:	9214      	str	r2, [sp, #80]	@ 0x50
 8010466:	e777      	b.n	8010358 <_dtoa_r+0x100>
 8010468:	2301      	movs	r3, #1
 801046a:	e7b8      	b.n	80103de <_dtoa_r+0x186>
 801046c:	9012      	str	r0, [sp, #72]	@ 0x48
 801046e:	e7b7      	b.n	80103e0 <_dtoa_r+0x188>
 8010470:	427b      	negs	r3, r7
 8010472:	930a      	str	r3, [sp, #40]	@ 0x28
 8010474:	2300      	movs	r3, #0
 8010476:	eba8 0807 	sub.w	r8, r8, r7
 801047a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801047c:	e7c4      	b.n	8010408 <_dtoa_r+0x1b0>
 801047e:	2300      	movs	r3, #0
 8010480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010484:	2b00      	cmp	r3, #0
 8010486:	dc35      	bgt.n	80104f4 <_dtoa_r+0x29c>
 8010488:	2301      	movs	r3, #1
 801048a:	9300      	str	r3, [sp, #0]
 801048c:	9307      	str	r3, [sp, #28]
 801048e:	461a      	mov	r2, r3
 8010490:	920e      	str	r2, [sp, #56]	@ 0x38
 8010492:	e00b      	b.n	80104ac <_dtoa_r+0x254>
 8010494:	2301      	movs	r3, #1
 8010496:	e7f3      	b.n	8010480 <_dtoa_r+0x228>
 8010498:	2300      	movs	r3, #0
 801049a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801049c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801049e:	18fb      	adds	r3, r7, r3
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	3301      	adds	r3, #1
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	9307      	str	r3, [sp, #28]
 80104a8:	bfb8      	it	lt
 80104aa:	2301      	movlt	r3, #1
 80104ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80104b0:	2100      	movs	r1, #0
 80104b2:	2204      	movs	r2, #4
 80104b4:	f102 0514 	add.w	r5, r2, #20
 80104b8:	429d      	cmp	r5, r3
 80104ba:	d91f      	bls.n	80104fc <_dtoa_r+0x2a4>
 80104bc:	6041      	str	r1, [r0, #4]
 80104be:	4658      	mov	r0, fp
 80104c0:	f001 f824 	bl	801150c <_Balloc>
 80104c4:	4682      	mov	sl, r0
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d13c      	bne.n	8010544 <_dtoa_r+0x2ec>
 80104ca:	4b1b      	ldr	r3, [pc, #108]	@ (8010538 <_dtoa_r+0x2e0>)
 80104cc:	4602      	mov	r2, r0
 80104ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80104d2:	e6d8      	b.n	8010286 <_dtoa_r+0x2e>
 80104d4:	2301      	movs	r3, #1
 80104d6:	e7e0      	b.n	801049a <_dtoa_r+0x242>
 80104d8:	2401      	movs	r4, #1
 80104da:	2300      	movs	r3, #0
 80104dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80104de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80104e0:	f04f 33ff 	mov.w	r3, #4294967295
 80104e4:	9300      	str	r3, [sp, #0]
 80104e6:	9307      	str	r3, [sp, #28]
 80104e8:	2200      	movs	r2, #0
 80104ea:	2312      	movs	r3, #18
 80104ec:	e7d0      	b.n	8010490 <_dtoa_r+0x238>
 80104ee:	2301      	movs	r3, #1
 80104f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104f2:	e7f5      	b.n	80104e0 <_dtoa_r+0x288>
 80104f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	9307      	str	r3, [sp, #28]
 80104fa:	e7d7      	b.n	80104ac <_dtoa_r+0x254>
 80104fc:	3101      	adds	r1, #1
 80104fe:	0052      	lsls	r2, r2, #1
 8010500:	e7d8      	b.n	80104b4 <_dtoa_r+0x25c>
 8010502:	bf00      	nop
 8010504:	f3af 8000 	nop.w
 8010508:	636f4361 	.word	0x636f4361
 801050c:	3fd287a7 	.word	0x3fd287a7
 8010510:	8b60c8b3 	.word	0x8b60c8b3
 8010514:	3fc68a28 	.word	0x3fc68a28
 8010518:	509f79fb 	.word	0x509f79fb
 801051c:	3fd34413 	.word	0x3fd34413
 8010520:	08012b8a 	.word	0x08012b8a
 8010524:	08012c4c 	.word	0x08012c4c
 8010528:	7ff00000 	.word	0x7ff00000
 801052c:	08012b62 	.word	0x08012b62
 8010530:	3ff80000 	.word	0x3ff80000
 8010534:	08012da8 	.word	0x08012da8
 8010538:	08012ca4 	.word	0x08012ca4
 801053c:	08012c48 	.word	0x08012c48
 8010540:	08012b61 	.word	0x08012b61
 8010544:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010548:	6018      	str	r0, [r3, #0]
 801054a:	9b07      	ldr	r3, [sp, #28]
 801054c:	2b0e      	cmp	r3, #14
 801054e:	f200 80a4 	bhi.w	801069a <_dtoa_r+0x442>
 8010552:	2c00      	cmp	r4, #0
 8010554:	f000 80a1 	beq.w	801069a <_dtoa_r+0x442>
 8010558:	2f00      	cmp	r7, #0
 801055a:	dd33      	ble.n	80105c4 <_dtoa_r+0x36c>
 801055c:	4bad      	ldr	r3, [pc, #692]	@ (8010814 <_dtoa_r+0x5bc>)
 801055e:	f007 020f 	and.w	r2, r7, #15
 8010562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010566:	ed93 7b00 	vldr	d7, [r3]
 801056a:	05f8      	lsls	r0, r7, #23
 801056c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010570:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010574:	d516      	bpl.n	80105a4 <_dtoa_r+0x34c>
 8010576:	4ba8      	ldr	r3, [pc, #672]	@ (8010818 <_dtoa_r+0x5c0>)
 8010578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801057c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010580:	f7f0 f98c 	bl	800089c <__aeabi_ddiv>
 8010584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010588:	f004 040f 	and.w	r4, r4, #15
 801058c:	2603      	movs	r6, #3
 801058e:	4da2      	ldr	r5, [pc, #648]	@ (8010818 <_dtoa_r+0x5c0>)
 8010590:	b954      	cbnz	r4, 80105a8 <_dtoa_r+0x350>
 8010592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801059a:	f7f0 f97f 	bl	800089c <__aeabi_ddiv>
 801059e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105a2:	e028      	b.n	80105f6 <_dtoa_r+0x39e>
 80105a4:	2602      	movs	r6, #2
 80105a6:	e7f2      	b.n	801058e <_dtoa_r+0x336>
 80105a8:	07e1      	lsls	r1, r4, #31
 80105aa:	d508      	bpl.n	80105be <_dtoa_r+0x366>
 80105ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105b4:	f7f0 f848 	bl	8000648 <__aeabi_dmul>
 80105b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105bc:	3601      	adds	r6, #1
 80105be:	1064      	asrs	r4, r4, #1
 80105c0:	3508      	adds	r5, #8
 80105c2:	e7e5      	b.n	8010590 <_dtoa_r+0x338>
 80105c4:	f000 80d2 	beq.w	801076c <_dtoa_r+0x514>
 80105c8:	427c      	negs	r4, r7
 80105ca:	4b92      	ldr	r3, [pc, #584]	@ (8010814 <_dtoa_r+0x5bc>)
 80105cc:	4d92      	ldr	r5, [pc, #584]	@ (8010818 <_dtoa_r+0x5c0>)
 80105ce:	f004 020f 	and.w	r2, r4, #15
 80105d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105de:	f7f0 f833 	bl	8000648 <__aeabi_dmul>
 80105e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105e6:	1124      	asrs	r4, r4, #4
 80105e8:	2300      	movs	r3, #0
 80105ea:	2602      	movs	r6, #2
 80105ec:	2c00      	cmp	r4, #0
 80105ee:	f040 80b2 	bne.w	8010756 <_dtoa_r+0x4fe>
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1d3      	bne.n	801059e <_dtoa_r+0x346>
 80105f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80105f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f000 80b7 	beq.w	8010770 <_dtoa_r+0x518>
 8010602:	4b86      	ldr	r3, [pc, #536]	@ (801081c <_dtoa_r+0x5c4>)
 8010604:	2200      	movs	r2, #0
 8010606:	4620      	mov	r0, r4
 8010608:	4629      	mov	r1, r5
 801060a:	f7f0 fa8f 	bl	8000b2c <__aeabi_dcmplt>
 801060e:	2800      	cmp	r0, #0
 8010610:	f000 80ae 	beq.w	8010770 <_dtoa_r+0x518>
 8010614:	9b07      	ldr	r3, [sp, #28]
 8010616:	2b00      	cmp	r3, #0
 8010618:	f000 80aa 	beq.w	8010770 <_dtoa_r+0x518>
 801061c:	9b00      	ldr	r3, [sp, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	dd37      	ble.n	8010692 <_dtoa_r+0x43a>
 8010622:	1e7b      	subs	r3, r7, #1
 8010624:	9304      	str	r3, [sp, #16]
 8010626:	4620      	mov	r0, r4
 8010628:	4b7d      	ldr	r3, [pc, #500]	@ (8010820 <_dtoa_r+0x5c8>)
 801062a:	2200      	movs	r2, #0
 801062c:	4629      	mov	r1, r5
 801062e:	f7f0 f80b 	bl	8000648 <__aeabi_dmul>
 8010632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010636:	9c00      	ldr	r4, [sp, #0]
 8010638:	3601      	adds	r6, #1
 801063a:	4630      	mov	r0, r6
 801063c:	f7ef ff9a 	bl	8000574 <__aeabi_i2d>
 8010640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010644:	f7f0 f800 	bl	8000648 <__aeabi_dmul>
 8010648:	4b76      	ldr	r3, [pc, #472]	@ (8010824 <_dtoa_r+0x5cc>)
 801064a:	2200      	movs	r2, #0
 801064c:	f7ef fe46 	bl	80002dc <__adddf3>
 8010650:	4605      	mov	r5, r0
 8010652:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010656:	2c00      	cmp	r4, #0
 8010658:	f040 808d 	bne.w	8010776 <_dtoa_r+0x51e>
 801065c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010660:	4b71      	ldr	r3, [pc, #452]	@ (8010828 <_dtoa_r+0x5d0>)
 8010662:	2200      	movs	r2, #0
 8010664:	f7ef fe38 	bl	80002d8 <__aeabi_dsub>
 8010668:	4602      	mov	r2, r0
 801066a:	460b      	mov	r3, r1
 801066c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010670:	462a      	mov	r2, r5
 8010672:	4633      	mov	r3, r6
 8010674:	f7f0 fa78 	bl	8000b68 <__aeabi_dcmpgt>
 8010678:	2800      	cmp	r0, #0
 801067a:	f040 828b 	bne.w	8010b94 <_dtoa_r+0x93c>
 801067e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010682:	462a      	mov	r2, r5
 8010684:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010688:	f7f0 fa50 	bl	8000b2c <__aeabi_dcmplt>
 801068c:	2800      	cmp	r0, #0
 801068e:	f040 8128 	bne.w	80108e2 <_dtoa_r+0x68a>
 8010692:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010696:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801069a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801069c:	2b00      	cmp	r3, #0
 801069e:	f2c0 815a 	blt.w	8010956 <_dtoa_r+0x6fe>
 80106a2:	2f0e      	cmp	r7, #14
 80106a4:	f300 8157 	bgt.w	8010956 <_dtoa_r+0x6fe>
 80106a8:	4b5a      	ldr	r3, [pc, #360]	@ (8010814 <_dtoa_r+0x5bc>)
 80106aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80106ae:	ed93 7b00 	vldr	d7, [r3]
 80106b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	ed8d 7b00 	vstr	d7, [sp]
 80106ba:	da03      	bge.n	80106c4 <_dtoa_r+0x46c>
 80106bc:	9b07      	ldr	r3, [sp, #28]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f340 8101 	ble.w	80108c6 <_dtoa_r+0x66e>
 80106c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80106c8:	4656      	mov	r6, sl
 80106ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106ce:	4620      	mov	r0, r4
 80106d0:	4629      	mov	r1, r5
 80106d2:	f7f0 f8e3 	bl	800089c <__aeabi_ddiv>
 80106d6:	f7f0 fa67 	bl	8000ba8 <__aeabi_d2iz>
 80106da:	4680      	mov	r8, r0
 80106dc:	f7ef ff4a 	bl	8000574 <__aeabi_i2d>
 80106e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106e4:	f7ef ffb0 	bl	8000648 <__aeabi_dmul>
 80106e8:	4602      	mov	r2, r0
 80106ea:	460b      	mov	r3, r1
 80106ec:	4620      	mov	r0, r4
 80106ee:	4629      	mov	r1, r5
 80106f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80106f4:	f7ef fdf0 	bl	80002d8 <__aeabi_dsub>
 80106f8:	f806 4b01 	strb.w	r4, [r6], #1
 80106fc:	9d07      	ldr	r5, [sp, #28]
 80106fe:	eba6 040a 	sub.w	r4, r6, sl
 8010702:	42a5      	cmp	r5, r4
 8010704:	4602      	mov	r2, r0
 8010706:	460b      	mov	r3, r1
 8010708:	f040 8117 	bne.w	801093a <_dtoa_r+0x6e2>
 801070c:	f7ef fde6 	bl	80002dc <__adddf3>
 8010710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010714:	4604      	mov	r4, r0
 8010716:	460d      	mov	r5, r1
 8010718:	f7f0 fa26 	bl	8000b68 <__aeabi_dcmpgt>
 801071c:	2800      	cmp	r0, #0
 801071e:	f040 80f9 	bne.w	8010914 <_dtoa_r+0x6bc>
 8010722:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010726:	4620      	mov	r0, r4
 8010728:	4629      	mov	r1, r5
 801072a:	f7f0 f9f5 	bl	8000b18 <__aeabi_dcmpeq>
 801072e:	b118      	cbz	r0, 8010738 <_dtoa_r+0x4e0>
 8010730:	f018 0f01 	tst.w	r8, #1
 8010734:	f040 80ee 	bne.w	8010914 <_dtoa_r+0x6bc>
 8010738:	4649      	mov	r1, r9
 801073a:	4658      	mov	r0, fp
 801073c:	f000 ff26 	bl	801158c <_Bfree>
 8010740:	2300      	movs	r3, #0
 8010742:	7033      	strb	r3, [r6, #0]
 8010744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010746:	3701      	adds	r7, #1
 8010748:	601f      	str	r7, [r3, #0]
 801074a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801074c:	2b00      	cmp	r3, #0
 801074e:	f000 831d 	beq.w	8010d8c <_dtoa_r+0xb34>
 8010752:	601e      	str	r6, [r3, #0]
 8010754:	e31a      	b.n	8010d8c <_dtoa_r+0xb34>
 8010756:	07e2      	lsls	r2, r4, #31
 8010758:	d505      	bpl.n	8010766 <_dtoa_r+0x50e>
 801075a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801075e:	f7ef ff73 	bl	8000648 <__aeabi_dmul>
 8010762:	3601      	adds	r6, #1
 8010764:	2301      	movs	r3, #1
 8010766:	1064      	asrs	r4, r4, #1
 8010768:	3508      	adds	r5, #8
 801076a:	e73f      	b.n	80105ec <_dtoa_r+0x394>
 801076c:	2602      	movs	r6, #2
 801076e:	e742      	b.n	80105f6 <_dtoa_r+0x39e>
 8010770:	9c07      	ldr	r4, [sp, #28]
 8010772:	9704      	str	r7, [sp, #16]
 8010774:	e761      	b.n	801063a <_dtoa_r+0x3e2>
 8010776:	4b27      	ldr	r3, [pc, #156]	@ (8010814 <_dtoa_r+0x5bc>)
 8010778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801077a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801077e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010782:	4454      	add	r4, sl
 8010784:	2900      	cmp	r1, #0
 8010786:	d053      	beq.n	8010830 <_dtoa_r+0x5d8>
 8010788:	4928      	ldr	r1, [pc, #160]	@ (801082c <_dtoa_r+0x5d4>)
 801078a:	2000      	movs	r0, #0
 801078c:	f7f0 f886 	bl	800089c <__aeabi_ddiv>
 8010790:	4633      	mov	r3, r6
 8010792:	462a      	mov	r2, r5
 8010794:	f7ef fda0 	bl	80002d8 <__aeabi_dsub>
 8010798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801079c:	4656      	mov	r6, sl
 801079e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107a2:	f7f0 fa01 	bl	8000ba8 <__aeabi_d2iz>
 80107a6:	4605      	mov	r5, r0
 80107a8:	f7ef fee4 	bl	8000574 <__aeabi_i2d>
 80107ac:	4602      	mov	r2, r0
 80107ae:	460b      	mov	r3, r1
 80107b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107b4:	f7ef fd90 	bl	80002d8 <__aeabi_dsub>
 80107b8:	3530      	adds	r5, #48	@ 0x30
 80107ba:	4602      	mov	r2, r0
 80107bc:	460b      	mov	r3, r1
 80107be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107c2:	f806 5b01 	strb.w	r5, [r6], #1
 80107c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107ca:	f7f0 f9af 	bl	8000b2c <__aeabi_dcmplt>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d171      	bne.n	80108b6 <_dtoa_r+0x65e>
 80107d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107d6:	4911      	ldr	r1, [pc, #68]	@ (801081c <_dtoa_r+0x5c4>)
 80107d8:	2000      	movs	r0, #0
 80107da:	f7ef fd7d 	bl	80002d8 <__aeabi_dsub>
 80107de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107e2:	f7f0 f9a3 	bl	8000b2c <__aeabi_dcmplt>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	f040 8095 	bne.w	8010916 <_dtoa_r+0x6be>
 80107ec:	42a6      	cmp	r6, r4
 80107ee:	f43f af50 	beq.w	8010692 <_dtoa_r+0x43a>
 80107f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80107f6:	4b0a      	ldr	r3, [pc, #40]	@ (8010820 <_dtoa_r+0x5c8>)
 80107f8:	2200      	movs	r2, #0
 80107fa:	f7ef ff25 	bl	8000648 <__aeabi_dmul>
 80107fe:	4b08      	ldr	r3, [pc, #32]	@ (8010820 <_dtoa_r+0x5c8>)
 8010800:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010804:	2200      	movs	r2, #0
 8010806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801080a:	f7ef ff1d 	bl	8000648 <__aeabi_dmul>
 801080e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010812:	e7c4      	b.n	801079e <_dtoa_r+0x546>
 8010814:	08012da8 	.word	0x08012da8
 8010818:	08012d80 	.word	0x08012d80
 801081c:	3ff00000 	.word	0x3ff00000
 8010820:	40240000 	.word	0x40240000
 8010824:	401c0000 	.word	0x401c0000
 8010828:	40140000 	.word	0x40140000
 801082c:	3fe00000 	.word	0x3fe00000
 8010830:	4631      	mov	r1, r6
 8010832:	4628      	mov	r0, r5
 8010834:	f7ef ff08 	bl	8000648 <__aeabi_dmul>
 8010838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801083c:	9415      	str	r4, [sp, #84]	@ 0x54
 801083e:	4656      	mov	r6, sl
 8010840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010844:	f7f0 f9b0 	bl	8000ba8 <__aeabi_d2iz>
 8010848:	4605      	mov	r5, r0
 801084a:	f7ef fe93 	bl	8000574 <__aeabi_i2d>
 801084e:	4602      	mov	r2, r0
 8010850:	460b      	mov	r3, r1
 8010852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010856:	f7ef fd3f 	bl	80002d8 <__aeabi_dsub>
 801085a:	3530      	adds	r5, #48	@ 0x30
 801085c:	f806 5b01 	strb.w	r5, [r6], #1
 8010860:	4602      	mov	r2, r0
 8010862:	460b      	mov	r3, r1
 8010864:	42a6      	cmp	r6, r4
 8010866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801086a:	f04f 0200 	mov.w	r2, #0
 801086e:	d124      	bne.n	80108ba <_dtoa_r+0x662>
 8010870:	4bac      	ldr	r3, [pc, #688]	@ (8010b24 <_dtoa_r+0x8cc>)
 8010872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010876:	f7ef fd31 	bl	80002dc <__adddf3>
 801087a:	4602      	mov	r2, r0
 801087c:	460b      	mov	r3, r1
 801087e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010882:	f7f0 f971 	bl	8000b68 <__aeabi_dcmpgt>
 8010886:	2800      	cmp	r0, #0
 8010888:	d145      	bne.n	8010916 <_dtoa_r+0x6be>
 801088a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801088e:	49a5      	ldr	r1, [pc, #660]	@ (8010b24 <_dtoa_r+0x8cc>)
 8010890:	2000      	movs	r0, #0
 8010892:	f7ef fd21 	bl	80002d8 <__aeabi_dsub>
 8010896:	4602      	mov	r2, r0
 8010898:	460b      	mov	r3, r1
 801089a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801089e:	f7f0 f945 	bl	8000b2c <__aeabi_dcmplt>
 80108a2:	2800      	cmp	r0, #0
 80108a4:	f43f aef5 	beq.w	8010692 <_dtoa_r+0x43a>
 80108a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80108aa:	1e73      	subs	r3, r6, #1
 80108ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80108ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80108b2:	2b30      	cmp	r3, #48	@ 0x30
 80108b4:	d0f8      	beq.n	80108a8 <_dtoa_r+0x650>
 80108b6:	9f04      	ldr	r7, [sp, #16]
 80108b8:	e73e      	b.n	8010738 <_dtoa_r+0x4e0>
 80108ba:	4b9b      	ldr	r3, [pc, #620]	@ (8010b28 <_dtoa_r+0x8d0>)
 80108bc:	f7ef fec4 	bl	8000648 <__aeabi_dmul>
 80108c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108c4:	e7bc      	b.n	8010840 <_dtoa_r+0x5e8>
 80108c6:	d10c      	bne.n	80108e2 <_dtoa_r+0x68a>
 80108c8:	4b98      	ldr	r3, [pc, #608]	@ (8010b2c <_dtoa_r+0x8d4>)
 80108ca:	2200      	movs	r2, #0
 80108cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108d0:	f7ef feba 	bl	8000648 <__aeabi_dmul>
 80108d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80108d8:	f7f0 f93c 	bl	8000b54 <__aeabi_dcmpge>
 80108dc:	2800      	cmp	r0, #0
 80108de:	f000 8157 	beq.w	8010b90 <_dtoa_r+0x938>
 80108e2:	2400      	movs	r4, #0
 80108e4:	4625      	mov	r5, r4
 80108e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108e8:	43db      	mvns	r3, r3
 80108ea:	9304      	str	r3, [sp, #16]
 80108ec:	4656      	mov	r6, sl
 80108ee:	2700      	movs	r7, #0
 80108f0:	4621      	mov	r1, r4
 80108f2:	4658      	mov	r0, fp
 80108f4:	f000 fe4a 	bl	801158c <_Bfree>
 80108f8:	2d00      	cmp	r5, #0
 80108fa:	d0dc      	beq.n	80108b6 <_dtoa_r+0x65e>
 80108fc:	b12f      	cbz	r7, 801090a <_dtoa_r+0x6b2>
 80108fe:	42af      	cmp	r7, r5
 8010900:	d003      	beq.n	801090a <_dtoa_r+0x6b2>
 8010902:	4639      	mov	r1, r7
 8010904:	4658      	mov	r0, fp
 8010906:	f000 fe41 	bl	801158c <_Bfree>
 801090a:	4629      	mov	r1, r5
 801090c:	4658      	mov	r0, fp
 801090e:	f000 fe3d 	bl	801158c <_Bfree>
 8010912:	e7d0      	b.n	80108b6 <_dtoa_r+0x65e>
 8010914:	9704      	str	r7, [sp, #16]
 8010916:	4633      	mov	r3, r6
 8010918:	461e      	mov	r6, r3
 801091a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801091e:	2a39      	cmp	r2, #57	@ 0x39
 8010920:	d107      	bne.n	8010932 <_dtoa_r+0x6da>
 8010922:	459a      	cmp	sl, r3
 8010924:	d1f8      	bne.n	8010918 <_dtoa_r+0x6c0>
 8010926:	9a04      	ldr	r2, [sp, #16]
 8010928:	3201      	adds	r2, #1
 801092a:	9204      	str	r2, [sp, #16]
 801092c:	2230      	movs	r2, #48	@ 0x30
 801092e:	f88a 2000 	strb.w	r2, [sl]
 8010932:	781a      	ldrb	r2, [r3, #0]
 8010934:	3201      	adds	r2, #1
 8010936:	701a      	strb	r2, [r3, #0]
 8010938:	e7bd      	b.n	80108b6 <_dtoa_r+0x65e>
 801093a:	4b7b      	ldr	r3, [pc, #492]	@ (8010b28 <_dtoa_r+0x8d0>)
 801093c:	2200      	movs	r2, #0
 801093e:	f7ef fe83 	bl	8000648 <__aeabi_dmul>
 8010942:	2200      	movs	r2, #0
 8010944:	2300      	movs	r3, #0
 8010946:	4604      	mov	r4, r0
 8010948:	460d      	mov	r5, r1
 801094a:	f7f0 f8e5 	bl	8000b18 <__aeabi_dcmpeq>
 801094e:	2800      	cmp	r0, #0
 8010950:	f43f aebb 	beq.w	80106ca <_dtoa_r+0x472>
 8010954:	e6f0      	b.n	8010738 <_dtoa_r+0x4e0>
 8010956:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010958:	2a00      	cmp	r2, #0
 801095a:	f000 80db 	beq.w	8010b14 <_dtoa_r+0x8bc>
 801095e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010960:	2a01      	cmp	r2, #1
 8010962:	f300 80bf 	bgt.w	8010ae4 <_dtoa_r+0x88c>
 8010966:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010968:	2a00      	cmp	r2, #0
 801096a:	f000 80b7 	beq.w	8010adc <_dtoa_r+0x884>
 801096e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010972:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010974:	4646      	mov	r6, r8
 8010976:	9a08      	ldr	r2, [sp, #32]
 8010978:	2101      	movs	r1, #1
 801097a:	441a      	add	r2, r3
 801097c:	4658      	mov	r0, fp
 801097e:	4498      	add	r8, r3
 8010980:	9208      	str	r2, [sp, #32]
 8010982:	f000 ff01 	bl	8011788 <__i2b>
 8010986:	4605      	mov	r5, r0
 8010988:	b15e      	cbz	r6, 80109a2 <_dtoa_r+0x74a>
 801098a:	9b08      	ldr	r3, [sp, #32]
 801098c:	2b00      	cmp	r3, #0
 801098e:	dd08      	ble.n	80109a2 <_dtoa_r+0x74a>
 8010990:	42b3      	cmp	r3, r6
 8010992:	9a08      	ldr	r2, [sp, #32]
 8010994:	bfa8      	it	ge
 8010996:	4633      	movge	r3, r6
 8010998:	eba8 0803 	sub.w	r8, r8, r3
 801099c:	1af6      	subs	r6, r6, r3
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	9308      	str	r3, [sp, #32]
 80109a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109a4:	b1f3      	cbz	r3, 80109e4 <_dtoa_r+0x78c>
 80109a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f000 80b7 	beq.w	8010b1c <_dtoa_r+0x8c4>
 80109ae:	b18c      	cbz	r4, 80109d4 <_dtoa_r+0x77c>
 80109b0:	4629      	mov	r1, r5
 80109b2:	4622      	mov	r2, r4
 80109b4:	4658      	mov	r0, fp
 80109b6:	f000 ffa7 	bl	8011908 <__pow5mult>
 80109ba:	464a      	mov	r2, r9
 80109bc:	4601      	mov	r1, r0
 80109be:	4605      	mov	r5, r0
 80109c0:	4658      	mov	r0, fp
 80109c2:	f000 fef7 	bl	80117b4 <__multiply>
 80109c6:	4649      	mov	r1, r9
 80109c8:	9004      	str	r0, [sp, #16]
 80109ca:	4658      	mov	r0, fp
 80109cc:	f000 fdde 	bl	801158c <_Bfree>
 80109d0:	9b04      	ldr	r3, [sp, #16]
 80109d2:	4699      	mov	r9, r3
 80109d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109d6:	1b1a      	subs	r2, r3, r4
 80109d8:	d004      	beq.n	80109e4 <_dtoa_r+0x78c>
 80109da:	4649      	mov	r1, r9
 80109dc:	4658      	mov	r0, fp
 80109de:	f000 ff93 	bl	8011908 <__pow5mult>
 80109e2:	4681      	mov	r9, r0
 80109e4:	2101      	movs	r1, #1
 80109e6:	4658      	mov	r0, fp
 80109e8:	f000 fece 	bl	8011788 <__i2b>
 80109ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109ee:	4604      	mov	r4, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f000 81cf 	beq.w	8010d94 <_dtoa_r+0xb3c>
 80109f6:	461a      	mov	r2, r3
 80109f8:	4601      	mov	r1, r0
 80109fa:	4658      	mov	r0, fp
 80109fc:	f000 ff84 	bl	8011908 <__pow5mult>
 8010a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	4604      	mov	r4, r0
 8010a06:	f300 8095 	bgt.w	8010b34 <_dtoa_r+0x8dc>
 8010a0a:	9b02      	ldr	r3, [sp, #8]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f040 8087 	bne.w	8010b20 <_dtoa_r+0x8c8>
 8010a12:	9b03      	ldr	r3, [sp, #12]
 8010a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f040 8089 	bne.w	8010b30 <_dtoa_r+0x8d8>
 8010a1e:	9b03      	ldr	r3, [sp, #12]
 8010a20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010a24:	0d1b      	lsrs	r3, r3, #20
 8010a26:	051b      	lsls	r3, r3, #20
 8010a28:	b12b      	cbz	r3, 8010a36 <_dtoa_r+0x7de>
 8010a2a:	9b08      	ldr	r3, [sp, #32]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	9308      	str	r3, [sp, #32]
 8010a30:	f108 0801 	add.w	r8, r8, #1
 8010a34:	2301      	movs	r3, #1
 8010a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	f000 81b0 	beq.w	8010da0 <_dtoa_r+0xb48>
 8010a40:	6923      	ldr	r3, [r4, #16]
 8010a42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a46:	6918      	ldr	r0, [r3, #16]
 8010a48:	f000 fe52 	bl	80116f0 <__hi0bits>
 8010a4c:	f1c0 0020 	rsb	r0, r0, #32
 8010a50:	9b08      	ldr	r3, [sp, #32]
 8010a52:	4418      	add	r0, r3
 8010a54:	f010 001f 	ands.w	r0, r0, #31
 8010a58:	d077      	beq.n	8010b4a <_dtoa_r+0x8f2>
 8010a5a:	f1c0 0320 	rsb	r3, r0, #32
 8010a5e:	2b04      	cmp	r3, #4
 8010a60:	dd6b      	ble.n	8010b3a <_dtoa_r+0x8e2>
 8010a62:	9b08      	ldr	r3, [sp, #32]
 8010a64:	f1c0 001c 	rsb	r0, r0, #28
 8010a68:	4403      	add	r3, r0
 8010a6a:	4480      	add	r8, r0
 8010a6c:	4406      	add	r6, r0
 8010a6e:	9308      	str	r3, [sp, #32]
 8010a70:	f1b8 0f00 	cmp.w	r8, #0
 8010a74:	dd05      	ble.n	8010a82 <_dtoa_r+0x82a>
 8010a76:	4649      	mov	r1, r9
 8010a78:	4642      	mov	r2, r8
 8010a7a:	4658      	mov	r0, fp
 8010a7c:	f000 ff9e 	bl	80119bc <__lshift>
 8010a80:	4681      	mov	r9, r0
 8010a82:	9b08      	ldr	r3, [sp, #32]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	dd05      	ble.n	8010a94 <_dtoa_r+0x83c>
 8010a88:	4621      	mov	r1, r4
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	4658      	mov	r0, fp
 8010a8e:	f000 ff95 	bl	80119bc <__lshift>
 8010a92:	4604      	mov	r4, r0
 8010a94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d059      	beq.n	8010b4e <_dtoa_r+0x8f6>
 8010a9a:	4621      	mov	r1, r4
 8010a9c:	4648      	mov	r0, r9
 8010a9e:	f000 fff9 	bl	8011a94 <__mcmp>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	da53      	bge.n	8010b4e <_dtoa_r+0x8f6>
 8010aa6:	1e7b      	subs	r3, r7, #1
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	4649      	mov	r1, r9
 8010aac:	2300      	movs	r3, #0
 8010aae:	220a      	movs	r2, #10
 8010ab0:	4658      	mov	r0, fp
 8010ab2:	f000 fd8d 	bl	80115d0 <__multadd>
 8010ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ab8:	4681      	mov	r9, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f000 8172 	beq.w	8010da4 <_dtoa_r+0xb4c>
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	4629      	mov	r1, r5
 8010ac4:	220a      	movs	r2, #10
 8010ac6:	4658      	mov	r0, fp
 8010ac8:	f000 fd82 	bl	80115d0 <__multadd>
 8010acc:	9b00      	ldr	r3, [sp, #0]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	4605      	mov	r5, r0
 8010ad2:	dc67      	bgt.n	8010ba4 <_dtoa_r+0x94c>
 8010ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ad6:	2b02      	cmp	r3, #2
 8010ad8:	dc41      	bgt.n	8010b5e <_dtoa_r+0x906>
 8010ada:	e063      	b.n	8010ba4 <_dtoa_r+0x94c>
 8010adc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010ade:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010ae2:	e746      	b.n	8010972 <_dtoa_r+0x71a>
 8010ae4:	9b07      	ldr	r3, [sp, #28]
 8010ae6:	1e5c      	subs	r4, r3, #1
 8010ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010aea:	42a3      	cmp	r3, r4
 8010aec:	bfbf      	itttt	lt
 8010aee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010af0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010af2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010af4:	1ae3      	sublt	r3, r4, r3
 8010af6:	bfb4      	ite	lt
 8010af8:	18d2      	addlt	r2, r2, r3
 8010afa:	1b1c      	subge	r4, r3, r4
 8010afc:	9b07      	ldr	r3, [sp, #28]
 8010afe:	bfbc      	itt	lt
 8010b00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010b02:	2400      	movlt	r4, #0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	bfb5      	itete	lt
 8010b08:	eba8 0603 	sublt.w	r6, r8, r3
 8010b0c:	9b07      	ldrge	r3, [sp, #28]
 8010b0e:	2300      	movlt	r3, #0
 8010b10:	4646      	movge	r6, r8
 8010b12:	e730      	b.n	8010976 <_dtoa_r+0x71e>
 8010b14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010b16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010b18:	4646      	mov	r6, r8
 8010b1a:	e735      	b.n	8010988 <_dtoa_r+0x730>
 8010b1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b1e:	e75c      	b.n	80109da <_dtoa_r+0x782>
 8010b20:	2300      	movs	r3, #0
 8010b22:	e788      	b.n	8010a36 <_dtoa_r+0x7de>
 8010b24:	3fe00000 	.word	0x3fe00000
 8010b28:	40240000 	.word	0x40240000
 8010b2c:	40140000 	.word	0x40140000
 8010b30:	9b02      	ldr	r3, [sp, #8]
 8010b32:	e780      	b.n	8010a36 <_dtoa_r+0x7de>
 8010b34:	2300      	movs	r3, #0
 8010b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b38:	e782      	b.n	8010a40 <_dtoa_r+0x7e8>
 8010b3a:	d099      	beq.n	8010a70 <_dtoa_r+0x818>
 8010b3c:	9a08      	ldr	r2, [sp, #32]
 8010b3e:	331c      	adds	r3, #28
 8010b40:	441a      	add	r2, r3
 8010b42:	4498      	add	r8, r3
 8010b44:	441e      	add	r6, r3
 8010b46:	9208      	str	r2, [sp, #32]
 8010b48:	e792      	b.n	8010a70 <_dtoa_r+0x818>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	e7f6      	b.n	8010b3c <_dtoa_r+0x8e4>
 8010b4e:	9b07      	ldr	r3, [sp, #28]
 8010b50:	9704      	str	r7, [sp, #16]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	dc20      	bgt.n	8010b98 <_dtoa_r+0x940>
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	dd1e      	ble.n	8010b9c <_dtoa_r+0x944>
 8010b5e:	9b00      	ldr	r3, [sp, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f47f aec0 	bne.w	80108e6 <_dtoa_r+0x68e>
 8010b66:	4621      	mov	r1, r4
 8010b68:	2205      	movs	r2, #5
 8010b6a:	4658      	mov	r0, fp
 8010b6c:	f000 fd30 	bl	80115d0 <__multadd>
 8010b70:	4601      	mov	r1, r0
 8010b72:	4604      	mov	r4, r0
 8010b74:	4648      	mov	r0, r9
 8010b76:	f000 ff8d 	bl	8011a94 <__mcmp>
 8010b7a:	2800      	cmp	r0, #0
 8010b7c:	f77f aeb3 	ble.w	80108e6 <_dtoa_r+0x68e>
 8010b80:	4656      	mov	r6, sl
 8010b82:	2331      	movs	r3, #49	@ 0x31
 8010b84:	f806 3b01 	strb.w	r3, [r6], #1
 8010b88:	9b04      	ldr	r3, [sp, #16]
 8010b8a:	3301      	adds	r3, #1
 8010b8c:	9304      	str	r3, [sp, #16]
 8010b8e:	e6ae      	b.n	80108ee <_dtoa_r+0x696>
 8010b90:	9c07      	ldr	r4, [sp, #28]
 8010b92:	9704      	str	r7, [sp, #16]
 8010b94:	4625      	mov	r5, r4
 8010b96:	e7f3      	b.n	8010b80 <_dtoa_r+0x928>
 8010b98:	9b07      	ldr	r3, [sp, #28]
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f000 8104 	beq.w	8010dac <_dtoa_r+0xb54>
 8010ba4:	2e00      	cmp	r6, #0
 8010ba6:	dd05      	ble.n	8010bb4 <_dtoa_r+0x95c>
 8010ba8:	4629      	mov	r1, r5
 8010baa:	4632      	mov	r2, r6
 8010bac:	4658      	mov	r0, fp
 8010bae:	f000 ff05 	bl	80119bc <__lshift>
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d05a      	beq.n	8010c70 <_dtoa_r+0xa18>
 8010bba:	6869      	ldr	r1, [r5, #4]
 8010bbc:	4658      	mov	r0, fp
 8010bbe:	f000 fca5 	bl	801150c <_Balloc>
 8010bc2:	4606      	mov	r6, r0
 8010bc4:	b928      	cbnz	r0, 8010bd2 <_dtoa_r+0x97a>
 8010bc6:	4b84      	ldr	r3, [pc, #528]	@ (8010dd8 <_dtoa_r+0xb80>)
 8010bc8:	4602      	mov	r2, r0
 8010bca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010bce:	f7ff bb5a 	b.w	8010286 <_dtoa_r+0x2e>
 8010bd2:	692a      	ldr	r2, [r5, #16]
 8010bd4:	3202      	adds	r2, #2
 8010bd6:	0092      	lsls	r2, r2, #2
 8010bd8:	f105 010c 	add.w	r1, r5, #12
 8010bdc:	300c      	adds	r0, #12
 8010bde:	f7ff fa76 	bl	80100ce <memcpy>
 8010be2:	2201      	movs	r2, #1
 8010be4:	4631      	mov	r1, r6
 8010be6:	4658      	mov	r0, fp
 8010be8:	f000 fee8 	bl	80119bc <__lshift>
 8010bec:	f10a 0301 	add.w	r3, sl, #1
 8010bf0:	9307      	str	r3, [sp, #28]
 8010bf2:	9b00      	ldr	r3, [sp, #0]
 8010bf4:	4453      	add	r3, sl
 8010bf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010bf8:	9b02      	ldr	r3, [sp, #8]
 8010bfa:	f003 0301 	and.w	r3, r3, #1
 8010bfe:	462f      	mov	r7, r5
 8010c00:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c02:	4605      	mov	r5, r0
 8010c04:	9b07      	ldr	r3, [sp, #28]
 8010c06:	4621      	mov	r1, r4
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	4648      	mov	r0, r9
 8010c0c:	9300      	str	r3, [sp, #0]
 8010c0e:	f7ff fa9b 	bl	8010148 <quorem>
 8010c12:	4639      	mov	r1, r7
 8010c14:	9002      	str	r0, [sp, #8]
 8010c16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c1a:	4648      	mov	r0, r9
 8010c1c:	f000 ff3a 	bl	8011a94 <__mcmp>
 8010c20:	462a      	mov	r2, r5
 8010c22:	9008      	str	r0, [sp, #32]
 8010c24:	4621      	mov	r1, r4
 8010c26:	4658      	mov	r0, fp
 8010c28:	f000 ff50 	bl	8011acc <__mdiff>
 8010c2c:	68c2      	ldr	r2, [r0, #12]
 8010c2e:	4606      	mov	r6, r0
 8010c30:	bb02      	cbnz	r2, 8010c74 <_dtoa_r+0xa1c>
 8010c32:	4601      	mov	r1, r0
 8010c34:	4648      	mov	r0, r9
 8010c36:	f000 ff2d 	bl	8011a94 <__mcmp>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	4631      	mov	r1, r6
 8010c3e:	4658      	mov	r0, fp
 8010c40:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c42:	f000 fca3 	bl	801158c <_Bfree>
 8010c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c4a:	9e07      	ldr	r6, [sp, #28]
 8010c4c:	ea43 0102 	orr.w	r1, r3, r2
 8010c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c52:	4319      	orrs	r1, r3
 8010c54:	d110      	bne.n	8010c78 <_dtoa_r+0xa20>
 8010c56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c5a:	d029      	beq.n	8010cb0 <_dtoa_r+0xa58>
 8010c5c:	9b08      	ldr	r3, [sp, #32]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	dd02      	ble.n	8010c68 <_dtoa_r+0xa10>
 8010c62:	9b02      	ldr	r3, [sp, #8]
 8010c64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010c68:	9b00      	ldr	r3, [sp, #0]
 8010c6a:	f883 8000 	strb.w	r8, [r3]
 8010c6e:	e63f      	b.n	80108f0 <_dtoa_r+0x698>
 8010c70:	4628      	mov	r0, r5
 8010c72:	e7bb      	b.n	8010bec <_dtoa_r+0x994>
 8010c74:	2201      	movs	r2, #1
 8010c76:	e7e1      	b.n	8010c3c <_dtoa_r+0x9e4>
 8010c78:	9b08      	ldr	r3, [sp, #32]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	db04      	blt.n	8010c88 <_dtoa_r+0xa30>
 8010c7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c80:	430b      	orrs	r3, r1
 8010c82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010c84:	430b      	orrs	r3, r1
 8010c86:	d120      	bne.n	8010cca <_dtoa_r+0xa72>
 8010c88:	2a00      	cmp	r2, #0
 8010c8a:	dded      	ble.n	8010c68 <_dtoa_r+0xa10>
 8010c8c:	4649      	mov	r1, r9
 8010c8e:	2201      	movs	r2, #1
 8010c90:	4658      	mov	r0, fp
 8010c92:	f000 fe93 	bl	80119bc <__lshift>
 8010c96:	4621      	mov	r1, r4
 8010c98:	4681      	mov	r9, r0
 8010c9a:	f000 fefb 	bl	8011a94 <__mcmp>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	dc03      	bgt.n	8010caa <_dtoa_r+0xa52>
 8010ca2:	d1e1      	bne.n	8010c68 <_dtoa_r+0xa10>
 8010ca4:	f018 0f01 	tst.w	r8, #1
 8010ca8:	d0de      	beq.n	8010c68 <_dtoa_r+0xa10>
 8010caa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010cae:	d1d8      	bne.n	8010c62 <_dtoa_r+0xa0a>
 8010cb0:	9a00      	ldr	r2, [sp, #0]
 8010cb2:	2339      	movs	r3, #57	@ 0x39
 8010cb4:	7013      	strb	r3, [r2, #0]
 8010cb6:	4633      	mov	r3, r6
 8010cb8:	461e      	mov	r6, r3
 8010cba:	3b01      	subs	r3, #1
 8010cbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010cc0:	2a39      	cmp	r2, #57	@ 0x39
 8010cc2:	d052      	beq.n	8010d6a <_dtoa_r+0xb12>
 8010cc4:	3201      	adds	r2, #1
 8010cc6:	701a      	strb	r2, [r3, #0]
 8010cc8:	e612      	b.n	80108f0 <_dtoa_r+0x698>
 8010cca:	2a00      	cmp	r2, #0
 8010ccc:	dd07      	ble.n	8010cde <_dtoa_r+0xa86>
 8010cce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010cd2:	d0ed      	beq.n	8010cb0 <_dtoa_r+0xa58>
 8010cd4:	9a00      	ldr	r2, [sp, #0]
 8010cd6:	f108 0301 	add.w	r3, r8, #1
 8010cda:	7013      	strb	r3, [r2, #0]
 8010cdc:	e608      	b.n	80108f0 <_dtoa_r+0x698>
 8010cde:	9b07      	ldr	r3, [sp, #28]
 8010ce0:	9a07      	ldr	r2, [sp, #28]
 8010ce2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010ce6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ce8:	4293      	cmp	r3, r2
 8010cea:	d028      	beq.n	8010d3e <_dtoa_r+0xae6>
 8010cec:	4649      	mov	r1, r9
 8010cee:	2300      	movs	r3, #0
 8010cf0:	220a      	movs	r2, #10
 8010cf2:	4658      	mov	r0, fp
 8010cf4:	f000 fc6c 	bl	80115d0 <__multadd>
 8010cf8:	42af      	cmp	r7, r5
 8010cfa:	4681      	mov	r9, r0
 8010cfc:	f04f 0300 	mov.w	r3, #0
 8010d00:	f04f 020a 	mov.w	r2, #10
 8010d04:	4639      	mov	r1, r7
 8010d06:	4658      	mov	r0, fp
 8010d08:	d107      	bne.n	8010d1a <_dtoa_r+0xac2>
 8010d0a:	f000 fc61 	bl	80115d0 <__multadd>
 8010d0e:	4607      	mov	r7, r0
 8010d10:	4605      	mov	r5, r0
 8010d12:	9b07      	ldr	r3, [sp, #28]
 8010d14:	3301      	adds	r3, #1
 8010d16:	9307      	str	r3, [sp, #28]
 8010d18:	e774      	b.n	8010c04 <_dtoa_r+0x9ac>
 8010d1a:	f000 fc59 	bl	80115d0 <__multadd>
 8010d1e:	4629      	mov	r1, r5
 8010d20:	4607      	mov	r7, r0
 8010d22:	2300      	movs	r3, #0
 8010d24:	220a      	movs	r2, #10
 8010d26:	4658      	mov	r0, fp
 8010d28:	f000 fc52 	bl	80115d0 <__multadd>
 8010d2c:	4605      	mov	r5, r0
 8010d2e:	e7f0      	b.n	8010d12 <_dtoa_r+0xaba>
 8010d30:	9b00      	ldr	r3, [sp, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	bfcc      	ite	gt
 8010d36:	461e      	movgt	r6, r3
 8010d38:	2601      	movle	r6, #1
 8010d3a:	4456      	add	r6, sl
 8010d3c:	2700      	movs	r7, #0
 8010d3e:	4649      	mov	r1, r9
 8010d40:	2201      	movs	r2, #1
 8010d42:	4658      	mov	r0, fp
 8010d44:	f000 fe3a 	bl	80119bc <__lshift>
 8010d48:	4621      	mov	r1, r4
 8010d4a:	4681      	mov	r9, r0
 8010d4c:	f000 fea2 	bl	8011a94 <__mcmp>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	dcb0      	bgt.n	8010cb6 <_dtoa_r+0xa5e>
 8010d54:	d102      	bne.n	8010d5c <_dtoa_r+0xb04>
 8010d56:	f018 0f01 	tst.w	r8, #1
 8010d5a:	d1ac      	bne.n	8010cb6 <_dtoa_r+0xa5e>
 8010d5c:	4633      	mov	r3, r6
 8010d5e:	461e      	mov	r6, r3
 8010d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d64:	2a30      	cmp	r2, #48	@ 0x30
 8010d66:	d0fa      	beq.n	8010d5e <_dtoa_r+0xb06>
 8010d68:	e5c2      	b.n	80108f0 <_dtoa_r+0x698>
 8010d6a:	459a      	cmp	sl, r3
 8010d6c:	d1a4      	bne.n	8010cb8 <_dtoa_r+0xa60>
 8010d6e:	9b04      	ldr	r3, [sp, #16]
 8010d70:	3301      	adds	r3, #1
 8010d72:	9304      	str	r3, [sp, #16]
 8010d74:	2331      	movs	r3, #49	@ 0x31
 8010d76:	f88a 3000 	strb.w	r3, [sl]
 8010d7a:	e5b9      	b.n	80108f0 <_dtoa_r+0x698>
 8010d7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010ddc <_dtoa_r+0xb84>
 8010d82:	b11b      	cbz	r3, 8010d8c <_dtoa_r+0xb34>
 8010d84:	f10a 0308 	add.w	r3, sl, #8
 8010d88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d8a:	6013      	str	r3, [r2, #0]
 8010d8c:	4650      	mov	r0, sl
 8010d8e:	b019      	add	sp, #100	@ 0x64
 8010d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	f77f ae37 	ble.w	8010a0a <_dtoa_r+0x7b2>
 8010d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010da0:	2001      	movs	r0, #1
 8010da2:	e655      	b.n	8010a50 <_dtoa_r+0x7f8>
 8010da4:	9b00      	ldr	r3, [sp, #0]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	f77f aed6 	ble.w	8010b58 <_dtoa_r+0x900>
 8010dac:	4656      	mov	r6, sl
 8010dae:	4621      	mov	r1, r4
 8010db0:	4648      	mov	r0, r9
 8010db2:	f7ff f9c9 	bl	8010148 <quorem>
 8010db6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010dba:	f806 8b01 	strb.w	r8, [r6], #1
 8010dbe:	9b00      	ldr	r3, [sp, #0]
 8010dc0:	eba6 020a 	sub.w	r2, r6, sl
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	ddb3      	ble.n	8010d30 <_dtoa_r+0xad8>
 8010dc8:	4649      	mov	r1, r9
 8010dca:	2300      	movs	r3, #0
 8010dcc:	220a      	movs	r2, #10
 8010dce:	4658      	mov	r0, fp
 8010dd0:	f000 fbfe 	bl	80115d0 <__multadd>
 8010dd4:	4681      	mov	r9, r0
 8010dd6:	e7ea      	b.n	8010dae <_dtoa_r+0xb56>
 8010dd8:	08012ca4 	.word	0x08012ca4
 8010ddc:	08012c3f 	.word	0x08012c3f

08010de0 <_free_r>:
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	4605      	mov	r5, r0
 8010de4:	2900      	cmp	r1, #0
 8010de6:	d041      	beq.n	8010e6c <_free_r+0x8c>
 8010de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dec:	1f0c      	subs	r4, r1, #4
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	bfb8      	it	lt
 8010df2:	18e4      	addlt	r4, r4, r3
 8010df4:	f7fd f89a 	bl	800df2c <__malloc_lock>
 8010df8:	4a1d      	ldr	r2, [pc, #116]	@ (8010e70 <_free_r+0x90>)
 8010dfa:	6813      	ldr	r3, [r2, #0]
 8010dfc:	b933      	cbnz	r3, 8010e0c <_free_r+0x2c>
 8010dfe:	6063      	str	r3, [r4, #4]
 8010e00:	6014      	str	r4, [r2, #0]
 8010e02:	4628      	mov	r0, r5
 8010e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e08:	f7fd b896 	b.w	800df38 <__malloc_unlock>
 8010e0c:	42a3      	cmp	r3, r4
 8010e0e:	d908      	bls.n	8010e22 <_free_r+0x42>
 8010e10:	6820      	ldr	r0, [r4, #0]
 8010e12:	1821      	adds	r1, r4, r0
 8010e14:	428b      	cmp	r3, r1
 8010e16:	bf01      	itttt	eq
 8010e18:	6819      	ldreq	r1, [r3, #0]
 8010e1a:	685b      	ldreq	r3, [r3, #4]
 8010e1c:	1809      	addeq	r1, r1, r0
 8010e1e:	6021      	streq	r1, [r4, #0]
 8010e20:	e7ed      	b.n	8010dfe <_free_r+0x1e>
 8010e22:	461a      	mov	r2, r3
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	b10b      	cbz	r3, 8010e2c <_free_r+0x4c>
 8010e28:	42a3      	cmp	r3, r4
 8010e2a:	d9fa      	bls.n	8010e22 <_free_r+0x42>
 8010e2c:	6811      	ldr	r1, [r2, #0]
 8010e2e:	1850      	adds	r0, r2, r1
 8010e30:	42a0      	cmp	r0, r4
 8010e32:	d10b      	bne.n	8010e4c <_free_r+0x6c>
 8010e34:	6820      	ldr	r0, [r4, #0]
 8010e36:	4401      	add	r1, r0
 8010e38:	1850      	adds	r0, r2, r1
 8010e3a:	4283      	cmp	r3, r0
 8010e3c:	6011      	str	r1, [r2, #0]
 8010e3e:	d1e0      	bne.n	8010e02 <_free_r+0x22>
 8010e40:	6818      	ldr	r0, [r3, #0]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	6053      	str	r3, [r2, #4]
 8010e46:	4408      	add	r0, r1
 8010e48:	6010      	str	r0, [r2, #0]
 8010e4a:	e7da      	b.n	8010e02 <_free_r+0x22>
 8010e4c:	d902      	bls.n	8010e54 <_free_r+0x74>
 8010e4e:	230c      	movs	r3, #12
 8010e50:	602b      	str	r3, [r5, #0]
 8010e52:	e7d6      	b.n	8010e02 <_free_r+0x22>
 8010e54:	6820      	ldr	r0, [r4, #0]
 8010e56:	1821      	adds	r1, r4, r0
 8010e58:	428b      	cmp	r3, r1
 8010e5a:	bf04      	itt	eq
 8010e5c:	6819      	ldreq	r1, [r3, #0]
 8010e5e:	685b      	ldreq	r3, [r3, #4]
 8010e60:	6063      	str	r3, [r4, #4]
 8010e62:	bf04      	itt	eq
 8010e64:	1809      	addeq	r1, r1, r0
 8010e66:	6021      	streq	r1, [r4, #0]
 8010e68:	6054      	str	r4, [r2, #4]
 8010e6a:	e7ca      	b.n	8010e02 <_free_r+0x22>
 8010e6c:	bd38      	pop	{r3, r4, r5, pc}
 8010e6e:	bf00      	nop
 8010e70:	20001430 	.word	0x20001430

08010e74 <rshift>:
 8010e74:	6903      	ldr	r3, [r0, #16]
 8010e76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e82:	f100 0414 	add.w	r4, r0, #20
 8010e86:	dd45      	ble.n	8010f14 <rshift+0xa0>
 8010e88:	f011 011f 	ands.w	r1, r1, #31
 8010e8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e94:	d10c      	bne.n	8010eb0 <rshift+0x3c>
 8010e96:	f100 0710 	add.w	r7, r0, #16
 8010e9a:	4629      	mov	r1, r5
 8010e9c:	42b1      	cmp	r1, r6
 8010e9e:	d334      	bcc.n	8010f0a <rshift+0x96>
 8010ea0:	1a9b      	subs	r3, r3, r2
 8010ea2:	009b      	lsls	r3, r3, #2
 8010ea4:	1eea      	subs	r2, r5, #3
 8010ea6:	4296      	cmp	r6, r2
 8010ea8:	bf38      	it	cc
 8010eaa:	2300      	movcc	r3, #0
 8010eac:	4423      	add	r3, r4
 8010eae:	e015      	b.n	8010edc <rshift+0x68>
 8010eb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010eb4:	f1c1 0820 	rsb	r8, r1, #32
 8010eb8:	40cf      	lsrs	r7, r1
 8010eba:	f105 0e04 	add.w	lr, r5, #4
 8010ebe:	46a1      	mov	r9, r4
 8010ec0:	4576      	cmp	r6, lr
 8010ec2:	46f4      	mov	ip, lr
 8010ec4:	d815      	bhi.n	8010ef2 <rshift+0x7e>
 8010ec6:	1a9a      	subs	r2, r3, r2
 8010ec8:	0092      	lsls	r2, r2, #2
 8010eca:	3a04      	subs	r2, #4
 8010ecc:	3501      	adds	r5, #1
 8010ece:	42ae      	cmp	r6, r5
 8010ed0:	bf38      	it	cc
 8010ed2:	2200      	movcc	r2, #0
 8010ed4:	18a3      	adds	r3, r4, r2
 8010ed6:	50a7      	str	r7, [r4, r2]
 8010ed8:	b107      	cbz	r7, 8010edc <rshift+0x68>
 8010eda:	3304      	adds	r3, #4
 8010edc:	1b1a      	subs	r2, r3, r4
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010ee4:	bf08      	it	eq
 8010ee6:	2300      	moveq	r3, #0
 8010ee8:	6102      	str	r2, [r0, #16]
 8010eea:	bf08      	it	eq
 8010eec:	6143      	streq	r3, [r0, #20]
 8010eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ef2:	f8dc c000 	ldr.w	ip, [ip]
 8010ef6:	fa0c fc08 	lsl.w	ip, ip, r8
 8010efa:	ea4c 0707 	orr.w	r7, ip, r7
 8010efe:	f849 7b04 	str.w	r7, [r9], #4
 8010f02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f06:	40cf      	lsrs	r7, r1
 8010f08:	e7da      	b.n	8010ec0 <rshift+0x4c>
 8010f0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010f0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010f12:	e7c3      	b.n	8010e9c <rshift+0x28>
 8010f14:	4623      	mov	r3, r4
 8010f16:	e7e1      	b.n	8010edc <rshift+0x68>

08010f18 <__hexdig_fun>:
 8010f18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010f1c:	2b09      	cmp	r3, #9
 8010f1e:	d802      	bhi.n	8010f26 <__hexdig_fun+0xe>
 8010f20:	3820      	subs	r0, #32
 8010f22:	b2c0      	uxtb	r0, r0
 8010f24:	4770      	bx	lr
 8010f26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010f2a:	2b05      	cmp	r3, #5
 8010f2c:	d801      	bhi.n	8010f32 <__hexdig_fun+0x1a>
 8010f2e:	3847      	subs	r0, #71	@ 0x47
 8010f30:	e7f7      	b.n	8010f22 <__hexdig_fun+0xa>
 8010f32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010f36:	2b05      	cmp	r3, #5
 8010f38:	d801      	bhi.n	8010f3e <__hexdig_fun+0x26>
 8010f3a:	3827      	subs	r0, #39	@ 0x27
 8010f3c:	e7f1      	b.n	8010f22 <__hexdig_fun+0xa>
 8010f3e:	2000      	movs	r0, #0
 8010f40:	4770      	bx	lr
	...

08010f44 <__gethex>:
 8010f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f48:	b085      	sub	sp, #20
 8010f4a:	468a      	mov	sl, r1
 8010f4c:	9302      	str	r3, [sp, #8]
 8010f4e:	680b      	ldr	r3, [r1, #0]
 8010f50:	9001      	str	r0, [sp, #4]
 8010f52:	4690      	mov	r8, r2
 8010f54:	1c9c      	adds	r4, r3, #2
 8010f56:	46a1      	mov	r9, r4
 8010f58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010f5c:	2830      	cmp	r0, #48	@ 0x30
 8010f5e:	d0fa      	beq.n	8010f56 <__gethex+0x12>
 8010f60:	eba9 0303 	sub.w	r3, r9, r3
 8010f64:	f1a3 0b02 	sub.w	fp, r3, #2
 8010f68:	f7ff ffd6 	bl	8010f18 <__hexdig_fun>
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	2800      	cmp	r0, #0
 8010f70:	d168      	bne.n	8011044 <__gethex+0x100>
 8010f72:	49a0      	ldr	r1, [pc, #640]	@ (80111f4 <__gethex+0x2b0>)
 8010f74:	2201      	movs	r2, #1
 8010f76:	4648      	mov	r0, r9
 8010f78:	f7fe ff96 	bl	800fea8 <strncmp>
 8010f7c:	4607      	mov	r7, r0
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d167      	bne.n	8011052 <__gethex+0x10e>
 8010f82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010f86:	4626      	mov	r6, r4
 8010f88:	f7ff ffc6 	bl	8010f18 <__hexdig_fun>
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	d062      	beq.n	8011056 <__gethex+0x112>
 8010f90:	4623      	mov	r3, r4
 8010f92:	7818      	ldrb	r0, [r3, #0]
 8010f94:	2830      	cmp	r0, #48	@ 0x30
 8010f96:	4699      	mov	r9, r3
 8010f98:	f103 0301 	add.w	r3, r3, #1
 8010f9c:	d0f9      	beq.n	8010f92 <__gethex+0x4e>
 8010f9e:	f7ff ffbb 	bl	8010f18 <__hexdig_fun>
 8010fa2:	fab0 f580 	clz	r5, r0
 8010fa6:	096d      	lsrs	r5, r5, #5
 8010fa8:	f04f 0b01 	mov.w	fp, #1
 8010fac:	464a      	mov	r2, r9
 8010fae:	4616      	mov	r6, r2
 8010fb0:	3201      	adds	r2, #1
 8010fb2:	7830      	ldrb	r0, [r6, #0]
 8010fb4:	f7ff ffb0 	bl	8010f18 <__hexdig_fun>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	d1f8      	bne.n	8010fae <__gethex+0x6a>
 8010fbc:	498d      	ldr	r1, [pc, #564]	@ (80111f4 <__gethex+0x2b0>)
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f7fe ff71 	bl	800fea8 <strncmp>
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	d13f      	bne.n	801104a <__gethex+0x106>
 8010fca:	b944      	cbnz	r4, 8010fde <__gethex+0x9a>
 8010fcc:	1c74      	adds	r4, r6, #1
 8010fce:	4622      	mov	r2, r4
 8010fd0:	4616      	mov	r6, r2
 8010fd2:	3201      	adds	r2, #1
 8010fd4:	7830      	ldrb	r0, [r6, #0]
 8010fd6:	f7ff ff9f 	bl	8010f18 <__hexdig_fun>
 8010fda:	2800      	cmp	r0, #0
 8010fdc:	d1f8      	bne.n	8010fd0 <__gethex+0x8c>
 8010fde:	1ba4      	subs	r4, r4, r6
 8010fe0:	00a7      	lsls	r7, r4, #2
 8010fe2:	7833      	ldrb	r3, [r6, #0]
 8010fe4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010fe8:	2b50      	cmp	r3, #80	@ 0x50
 8010fea:	d13e      	bne.n	801106a <__gethex+0x126>
 8010fec:	7873      	ldrb	r3, [r6, #1]
 8010fee:	2b2b      	cmp	r3, #43	@ 0x2b
 8010ff0:	d033      	beq.n	801105a <__gethex+0x116>
 8010ff2:	2b2d      	cmp	r3, #45	@ 0x2d
 8010ff4:	d034      	beq.n	8011060 <__gethex+0x11c>
 8010ff6:	1c71      	adds	r1, r6, #1
 8010ff8:	2400      	movs	r4, #0
 8010ffa:	7808      	ldrb	r0, [r1, #0]
 8010ffc:	f7ff ff8c 	bl	8010f18 <__hexdig_fun>
 8011000:	1e43      	subs	r3, r0, #1
 8011002:	b2db      	uxtb	r3, r3
 8011004:	2b18      	cmp	r3, #24
 8011006:	d830      	bhi.n	801106a <__gethex+0x126>
 8011008:	f1a0 0210 	sub.w	r2, r0, #16
 801100c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011010:	f7ff ff82 	bl	8010f18 <__hexdig_fun>
 8011014:	f100 3cff 	add.w	ip, r0, #4294967295
 8011018:	fa5f fc8c 	uxtb.w	ip, ip
 801101c:	f1bc 0f18 	cmp.w	ip, #24
 8011020:	f04f 030a 	mov.w	r3, #10
 8011024:	d91e      	bls.n	8011064 <__gethex+0x120>
 8011026:	b104      	cbz	r4, 801102a <__gethex+0xe6>
 8011028:	4252      	negs	r2, r2
 801102a:	4417      	add	r7, r2
 801102c:	f8ca 1000 	str.w	r1, [sl]
 8011030:	b1ed      	cbz	r5, 801106e <__gethex+0x12a>
 8011032:	f1bb 0f00 	cmp.w	fp, #0
 8011036:	bf0c      	ite	eq
 8011038:	2506      	moveq	r5, #6
 801103a:	2500      	movne	r5, #0
 801103c:	4628      	mov	r0, r5
 801103e:	b005      	add	sp, #20
 8011040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011044:	2500      	movs	r5, #0
 8011046:	462c      	mov	r4, r5
 8011048:	e7b0      	b.n	8010fac <__gethex+0x68>
 801104a:	2c00      	cmp	r4, #0
 801104c:	d1c7      	bne.n	8010fde <__gethex+0x9a>
 801104e:	4627      	mov	r7, r4
 8011050:	e7c7      	b.n	8010fe2 <__gethex+0x9e>
 8011052:	464e      	mov	r6, r9
 8011054:	462f      	mov	r7, r5
 8011056:	2501      	movs	r5, #1
 8011058:	e7c3      	b.n	8010fe2 <__gethex+0x9e>
 801105a:	2400      	movs	r4, #0
 801105c:	1cb1      	adds	r1, r6, #2
 801105e:	e7cc      	b.n	8010ffa <__gethex+0xb6>
 8011060:	2401      	movs	r4, #1
 8011062:	e7fb      	b.n	801105c <__gethex+0x118>
 8011064:	fb03 0002 	mla	r0, r3, r2, r0
 8011068:	e7ce      	b.n	8011008 <__gethex+0xc4>
 801106a:	4631      	mov	r1, r6
 801106c:	e7de      	b.n	801102c <__gethex+0xe8>
 801106e:	eba6 0309 	sub.w	r3, r6, r9
 8011072:	3b01      	subs	r3, #1
 8011074:	4629      	mov	r1, r5
 8011076:	2b07      	cmp	r3, #7
 8011078:	dc0a      	bgt.n	8011090 <__gethex+0x14c>
 801107a:	9801      	ldr	r0, [sp, #4]
 801107c:	f000 fa46 	bl	801150c <_Balloc>
 8011080:	4604      	mov	r4, r0
 8011082:	b940      	cbnz	r0, 8011096 <__gethex+0x152>
 8011084:	4b5c      	ldr	r3, [pc, #368]	@ (80111f8 <__gethex+0x2b4>)
 8011086:	4602      	mov	r2, r0
 8011088:	21e4      	movs	r1, #228	@ 0xe4
 801108a:	485c      	ldr	r0, [pc, #368]	@ (80111fc <__gethex+0x2b8>)
 801108c:	f7ff f83e 	bl	801010c <__assert_func>
 8011090:	3101      	adds	r1, #1
 8011092:	105b      	asrs	r3, r3, #1
 8011094:	e7ef      	b.n	8011076 <__gethex+0x132>
 8011096:	f100 0a14 	add.w	sl, r0, #20
 801109a:	2300      	movs	r3, #0
 801109c:	4655      	mov	r5, sl
 801109e:	469b      	mov	fp, r3
 80110a0:	45b1      	cmp	r9, r6
 80110a2:	d337      	bcc.n	8011114 <__gethex+0x1d0>
 80110a4:	f845 bb04 	str.w	fp, [r5], #4
 80110a8:	eba5 050a 	sub.w	r5, r5, sl
 80110ac:	10ad      	asrs	r5, r5, #2
 80110ae:	6125      	str	r5, [r4, #16]
 80110b0:	4658      	mov	r0, fp
 80110b2:	f000 fb1d 	bl	80116f0 <__hi0bits>
 80110b6:	016d      	lsls	r5, r5, #5
 80110b8:	f8d8 6000 	ldr.w	r6, [r8]
 80110bc:	1a2d      	subs	r5, r5, r0
 80110be:	42b5      	cmp	r5, r6
 80110c0:	dd54      	ble.n	801116c <__gethex+0x228>
 80110c2:	1bad      	subs	r5, r5, r6
 80110c4:	4629      	mov	r1, r5
 80110c6:	4620      	mov	r0, r4
 80110c8:	f000 feb1 	bl	8011e2e <__any_on>
 80110cc:	4681      	mov	r9, r0
 80110ce:	b178      	cbz	r0, 80110f0 <__gethex+0x1ac>
 80110d0:	1e6b      	subs	r3, r5, #1
 80110d2:	1159      	asrs	r1, r3, #5
 80110d4:	f003 021f 	and.w	r2, r3, #31
 80110d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80110dc:	f04f 0901 	mov.w	r9, #1
 80110e0:	fa09 f202 	lsl.w	r2, r9, r2
 80110e4:	420a      	tst	r2, r1
 80110e6:	d003      	beq.n	80110f0 <__gethex+0x1ac>
 80110e8:	454b      	cmp	r3, r9
 80110ea:	dc36      	bgt.n	801115a <__gethex+0x216>
 80110ec:	f04f 0902 	mov.w	r9, #2
 80110f0:	4629      	mov	r1, r5
 80110f2:	4620      	mov	r0, r4
 80110f4:	f7ff febe 	bl	8010e74 <rshift>
 80110f8:	442f      	add	r7, r5
 80110fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80110fe:	42bb      	cmp	r3, r7
 8011100:	da42      	bge.n	8011188 <__gethex+0x244>
 8011102:	9801      	ldr	r0, [sp, #4]
 8011104:	4621      	mov	r1, r4
 8011106:	f000 fa41 	bl	801158c <_Bfree>
 801110a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801110c:	2300      	movs	r3, #0
 801110e:	6013      	str	r3, [r2, #0]
 8011110:	25a3      	movs	r5, #163	@ 0xa3
 8011112:	e793      	b.n	801103c <__gethex+0xf8>
 8011114:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011118:	2a2e      	cmp	r2, #46	@ 0x2e
 801111a:	d012      	beq.n	8011142 <__gethex+0x1fe>
 801111c:	2b20      	cmp	r3, #32
 801111e:	d104      	bne.n	801112a <__gethex+0x1e6>
 8011120:	f845 bb04 	str.w	fp, [r5], #4
 8011124:	f04f 0b00 	mov.w	fp, #0
 8011128:	465b      	mov	r3, fp
 801112a:	7830      	ldrb	r0, [r6, #0]
 801112c:	9303      	str	r3, [sp, #12]
 801112e:	f7ff fef3 	bl	8010f18 <__hexdig_fun>
 8011132:	9b03      	ldr	r3, [sp, #12]
 8011134:	f000 000f 	and.w	r0, r0, #15
 8011138:	4098      	lsls	r0, r3
 801113a:	ea4b 0b00 	orr.w	fp, fp, r0
 801113e:	3304      	adds	r3, #4
 8011140:	e7ae      	b.n	80110a0 <__gethex+0x15c>
 8011142:	45b1      	cmp	r9, r6
 8011144:	d8ea      	bhi.n	801111c <__gethex+0x1d8>
 8011146:	492b      	ldr	r1, [pc, #172]	@ (80111f4 <__gethex+0x2b0>)
 8011148:	9303      	str	r3, [sp, #12]
 801114a:	2201      	movs	r2, #1
 801114c:	4630      	mov	r0, r6
 801114e:	f7fe feab 	bl	800fea8 <strncmp>
 8011152:	9b03      	ldr	r3, [sp, #12]
 8011154:	2800      	cmp	r0, #0
 8011156:	d1e1      	bne.n	801111c <__gethex+0x1d8>
 8011158:	e7a2      	b.n	80110a0 <__gethex+0x15c>
 801115a:	1ea9      	subs	r1, r5, #2
 801115c:	4620      	mov	r0, r4
 801115e:	f000 fe66 	bl	8011e2e <__any_on>
 8011162:	2800      	cmp	r0, #0
 8011164:	d0c2      	beq.n	80110ec <__gethex+0x1a8>
 8011166:	f04f 0903 	mov.w	r9, #3
 801116a:	e7c1      	b.n	80110f0 <__gethex+0x1ac>
 801116c:	da09      	bge.n	8011182 <__gethex+0x23e>
 801116e:	1b75      	subs	r5, r6, r5
 8011170:	4621      	mov	r1, r4
 8011172:	9801      	ldr	r0, [sp, #4]
 8011174:	462a      	mov	r2, r5
 8011176:	f000 fc21 	bl	80119bc <__lshift>
 801117a:	1b7f      	subs	r7, r7, r5
 801117c:	4604      	mov	r4, r0
 801117e:	f100 0a14 	add.w	sl, r0, #20
 8011182:	f04f 0900 	mov.w	r9, #0
 8011186:	e7b8      	b.n	80110fa <__gethex+0x1b6>
 8011188:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801118c:	42bd      	cmp	r5, r7
 801118e:	dd6f      	ble.n	8011270 <__gethex+0x32c>
 8011190:	1bed      	subs	r5, r5, r7
 8011192:	42ae      	cmp	r6, r5
 8011194:	dc34      	bgt.n	8011200 <__gethex+0x2bc>
 8011196:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801119a:	2b02      	cmp	r3, #2
 801119c:	d022      	beq.n	80111e4 <__gethex+0x2a0>
 801119e:	2b03      	cmp	r3, #3
 80111a0:	d024      	beq.n	80111ec <__gethex+0x2a8>
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d115      	bne.n	80111d2 <__gethex+0x28e>
 80111a6:	42ae      	cmp	r6, r5
 80111a8:	d113      	bne.n	80111d2 <__gethex+0x28e>
 80111aa:	2e01      	cmp	r6, #1
 80111ac:	d10b      	bne.n	80111c6 <__gethex+0x282>
 80111ae:	9a02      	ldr	r2, [sp, #8]
 80111b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80111b4:	6013      	str	r3, [r2, #0]
 80111b6:	2301      	movs	r3, #1
 80111b8:	6123      	str	r3, [r4, #16]
 80111ba:	f8ca 3000 	str.w	r3, [sl]
 80111be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111c0:	2562      	movs	r5, #98	@ 0x62
 80111c2:	601c      	str	r4, [r3, #0]
 80111c4:	e73a      	b.n	801103c <__gethex+0xf8>
 80111c6:	1e71      	subs	r1, r6, #1
 80111c8:	4620      	mov	r0, r4
 80111ca:	f000 fe30 	bl	8011e2e <__any_on>
 80111ce:	2800      	cmp	r0, #0
 80111d0:	d1ed      	bne.n	80111ae <__gethex+0x26a>
 80111d2:	9801      	ldr	r0, [sp, #4]
 80111d4:	4621      	mov	r1, r4
 80111d6:	f000 f9d9 	bl	801158c <_Bfree>
 80111da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111dc:	2300      	movs	r3, #0
 80111de:	6013      	str	r3, [r2, #0]
 80111e0:	2550      	movs	r5, #80	@ 0x50
 80111e2:	e72b      	b.n	801103c <__gethex+0xf8>
 80111e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d1f3      	bne.n	80111d2 <__gethex+0x28e>
 80111ea:	e7e0      	b.n	80111ae <__gethex+0x26a>
 80111ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d1dd      	bne.n	80111ae <__gethex+0x26a>
 80111f2:	e7ee      	b.n	80111d2 <__gethex+0x28e>
 80111f4:	080129f8 	.word	0x080129f8
 80111f8:	08012ca4 	.word	0x08012ca4
 80111fc:	08012cb5 	.word	0x08012cb5
 8011200:	1e6f      	subs	r7, r5, #1
 8011202:	f1b9 0f00 	cmp.w	r9, #0
 8011206:	d130      	bne.n	801126a <__gethex+0x326>
 8011208:	b127      	cbz	r7, 8011214 <__gethex+0x2d0>
 801120a:	4639      	mov	r1, r7
 801120c:	4620      	mov	r0, r4
 801120e:	f000 fe0e 	bl	8011e2e <__any_on>
 8011212:	4681      	mov	r9, r0
 8011214:	117a      	asrs	r2, r7, #5
 8011216:	2301      	movs	r3, #1
 8011218:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801121c:	f007 071f 	and.w	r7, r7, #31
 8011220:	40bb      	lsls	r3, r7
 8011222:	4213      	tst	r3, r2
 8011224:	4629      	mov	r1, r5
 8011226:	4620      	mov	r0, r4
 8011228:	bf18      	it	ne
 801122a:	f049 0902 	orrne.w	r9, r9, #2
 801122e:	f7ff fe21 	bl	8010e74 <rshift>
 8011232:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011236:	1b76      	subs	r6, r6, r5
 8011238:	2502      	movs	r5, #2
 801123a:	f1b9 0f00 	cmp.w	r9, #0
 801123e:	d047      	beq.n	80112d0 <__gethex+0x38c>
 8011240:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011244:	2b02      	cmp	r3, #2
 8011246:	d015      	beq.n	8011274 <__gethex+0x330>
 8011248:	2b03      	cmp	r3, #3
 801124a:	d017      	beq.n	801127c <__gethex+0x338>
 801124c:	2b01      	cmp	r3, #1
 801124e:	d109      	bne.n	8011264 <__gethex+0x320>
 8011250:	f019 0f02 	tst.w	r9, #2
 8011254:	d006      	beq.n	8011264 <__gethex+0x320>
 8011256:	f8da 3000 	ldr.w	r3, [sl]
 801125a:	ea49 0903 	orr.w	r9, r9, r3
 801125e:	f019 0f01 	tst.w	r9, #1
 8011262:	d10e      	bne.n	8011282 <__gethex+0x33e>
 8011264:	f045 0510 	orr.w	r5, r5, #16
 8011268:	e032      	b.n	80112d0 <__gethex+0x38c>
 801126a:	f04f 0901 	mov.w	r9, #1
 801126e:	e7d1      	b.n	8011214 <__gethex+0x2d0>
 8011270:	2501      	movs	r5, #1
 8011272:	e7e2      	b.n	801123a <__gethex+0x2f6>
 8011274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011276:	f1c3 0301 	rsb	r3, r3, #1
 801127a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801127c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801127e:	2b00      	cmp	r3, #0
 8011280:	d0f0      	beq.n	8011264 <__gethex+0x320>
 8011282:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011286:	f104 0314 	add.w	r3, r4, #20
 801128a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801128e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011292:	f04f 0c00 	mov.w	ip, #0
 8011296:	4618      	mov	r0, r3
 8011298:	f853 2b04 	ldr.w	r2, [r3], #4
 801129c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80112a0:	d01b      	beq.n	80112da <__gethex+0x396>
 80112a2:	3201      	adds	r2, #1
 80112a4:	6002      	str	r2, [r0, #0]
 80112a6:	2d02      	cmp	r5, #2
 80112a8:	f104 0314 	add.w	r3, r4, #20
 80112ac:	d13c      	bne.n	8011328 <__gethex+0x3e4>
 80112ae:	f8d8 2000 	ldr.w	r2, [r8]
 80112b2:	3a01      	subs	r2, #1
 80112b4:	42b2      	cmp	r2, r6
 80112b6:	d109      	bne.n	80112cc <__gethex+0x388>
 80112b8:	1171      	asrs	r1, r6, #5
 80112ba:	2201      	movs	r2, #1
 80112bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80112c0:	f006 061f 	and.w	r6, r6, #31
 80112c4:	fa02 f606 	lsl.w	r6, r2, r6
 80112c8:	421e      	tst	r6, r3
 80112ca:	d13a      	bne.n	8011342 <__gethex+0x3fe>
 80112cc:	f045 0520 	orr.w	r5, r5, #32
 80112d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112d2:	601c      	str	r4, [r3, #0]
 80112d4:	9b02      	ldr	r3, [sp, #8]
 80112d6:	601f      	str	r7, [r3, #0]
 80112d8:	e6b0      	b.n	801103c <__gethex+0xf8>
 80112da:	4299      	cmp	r1, r3
 80112dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80112e0:	d8d9      	bhi.n	8011296 <__gethex+0x352>
 80112e2:	68a3      	ldr	r3, [r4, #8]
 80112e4:	459b      	cmp	fp, r3
 80112e6:	db17      	blt.n	8011318 <__gethex+0x3d4>
 80112e8:	6861      	ldr	r1, [r4, #4]
 80112ea:	9801      	ldr	r0, [sp, #4]
 80112ec:	3101      	adds	r1, #1
 80112ee:	f000 f90d 	bl	801150c <_Balloc>
 80112f2:	4681      	mov	r9, r0
 80112f4:	b918      	cbnz	r0, 80112fe <__gethex+0x3ba>
 80112f6:	4b1a      	ldr	r3, [pc, #104]	@ (8011360 <__gethex+0x41c>)
 80112f8:	4602      	mov	r2, r0
 80112fa:	2184      	movs	r1, #132	@ 0x84
 80112fc:	e6c5      	b.n	801108a <__gethex+0x146>
 80112fe:	6922      	ldr	r2, [r4, #16]
 8011300:	3202      	adds	r2, #2
 8011302:	f104 010c 	add.w	r1, r4, #12
 8011306:	0092      	lsls	r2, r2, #2
 8011308:	300c      	adds	r0, #12
 801130a:	f7fe fee0 	bl	80100ce <memcpy>
 801130e:	4621      	mov	r1, r4
 8011310:	9801      	ldr	r0, [sp, #4]
 8011312:	f000 f93b 	bl	801158c <_Bfree>
 8011316:	464c      	mov	r4, r9
 8011318:	6923      	ldr	r3, [r4, #16]
 801131a:	1c5a      	adds	r2, r3, #1
 801131c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011320:	6122      	str	r2, [r4, #16]
 8011322:	2201      	movs	r2, #1
 8011324:	615a      	str	r2, [r3, #20]
 8011326:	e7be      	b.n	80112a6 <__gethex+0x362>
 8011328:	6922      	ldr	r2, [r4, #16]
 801132a:	455a      	cmp	r2, fp
 801132c:	dd0b      	ble.n	8011346 <__gethex+0x402>
 801132e:	2101      	movs	r1, #1
 8011330:	4620      	mov	r0, r4
 8011332:	f7ff fd9f 	bl	8010e74 <rshift>
 8011336:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801133a:	3701      	adds	r7, #1
 801133c:	42bb      	cmp	r3, r7
 801133e:	f6ff aee0 	blt.w	8011102 <__gethex+0x1be>
 8011342:	2501      	movs	r5, #1
 8011344:	e7c2      	b.n	80112cc <__gethex+0x388>
 8011346:	f016 061f 	ands.w	r6, r6, #31
 801134a:	d0fa      	beq.n	8011342 <__gethex+0x3fe>
 801134c:	4453      	add	r3, sl
 801134e:	f1c6 0620 	rsb	r6, r6, #32
 8011352:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011356:	f000 f9cb 	bl	80116f0 <__hi0bits>
 801135a:	42b0      	cmp	r0, r6
 801135c:	dbe7      	blt.n	801132e <__gethex+0x3ea>
 801135e:	e7f0      	b.n	8011342 <__gethex+0x3fe>
 8011360:	08012ca4 	.word	0x08012ca4

08011364 <L_shift>:
 8011364:	f1c2 0208 	rsb	r2, r2, #8
 8011368:	0092      	lsls	r2, r2, #2
 801136a:	b570      	push	{r4, r5, r6, lr}
 801136c:	f1c2 0620 	rsb	r6, r2, #32
 8011370:	6843      	ldr	r3, [r0, #4]
 8011372:	6804      	ldr	r4, [r0, #0]
 8011374:	fa03 f506 	lsl.w	r5, r3, r6
 8011378:	432c      	orrs	r4, r5
 801137a:	40d3      	lsrs	r3, r2
 801137c:	6004      	str	r4, [r0, #0]
 801137e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011382:	4288      	cmp	r0, r1
 8011384:	d3f4      	bcc.n	8011370 <L_shift+0xc>
 8011386:	bd70      	pop	{r4, r5, r6, pc}

08011388 <__match>:
 8011388:	b530      	push	{r4, r5, lr}
 801138a:	6803      	ldr	r3, [r0, #0]
 801138c:	3301      	adds	r3, #1
 801138e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011392:	b914      	cbnz	r4, 801139a <__match+0x12>
 8011394:	6003      	str	r3, [r0, #0]
 8011396:	2001      	movs	r0, #1
 8011398:	bd30      	pop	{r4, r5, pc}
 801139a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801139e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80113a2:	2d19      	cmp	r5, #25
 80113a4:	bf98      	it	ls
 80113a6:	3220      	addls	r2, #32
 80113a8:	42a2      	cmp	r2, r4
 80113aa:	d0f0      	beq.n	801138e <__match+0x6>
 80113ac:	2000      	movs	r0, #0
 80113ae:	e7f3      	b.n	8011398 <__match+0x10>

080113b0 <__hexnan>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	680b      	ldr	r3, [r1, #0]
 80113b6:	6801      	ldr	r1, [r0, #0]
 80113b8:	115e      	asrs	r6, r3, #5
 80113ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80113be:	f013 031f 	ands.w	r3, r3, #31
 80113c2:	b087      	sub	sp, #28
 80113c4:	bf18      	it	ne
 80113c6:	3604      	addne	r6, #4
 80113c8:	2500      	movs	r5, #0
 80113ca:	1f37      	subs	r7, r6, #4
 80113cc:	4682      	mov	sl, r0
 80113ce:	4690      	mov	r8, r2
 80113d0:	9301      	str	r3, [sp, #4]
 80113d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80113d6:	46b9      	mov	r9, r7
 80113d8:	463c      	mov	r4, r7
 80113da:	9502      	str	r5, [sp, #8]
 80113dc:	46ab      	mov	fp, r5
 80113de:	784a      	ldrb	r2, [r1, #1]
 80113e0:	1c4b      	adds	r3, r1, #1
 80113e2:	9303      	str	r3, [sp, #12]
 80113e4:	b342      	cbz	r2, 8011438 <__hexnan+0x88>
 80113e6:	4610      	mov	r0, r2
 80113e8:	9105      	str	r1, [sp, #20]
 80113ea:	9204      	str	r2, [sp, #16]
 80113ec:	f7ff fd94 	bl	8010f18 <__hexdig_fun>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	d151      	bne.n	8011498 <__hexnan+0xe8>
 80113f4:	9a04      	ldr	r2, [sp, #16]
 80113f6:	9905      	ldr	r1, [sp, #20]
 80113f8:	2a20      	cmp	r2, #32
 80113fa:	d818      	bhi.n	801142e <__hexnan+0x7e>
 80113fc:	9b02      	ldr	r3, [sp, #8]
 80113fe:	459b      	cmp	fp, r3
 8011400:	dd13      	ble.n	801142a <__hexnan+0x7a>
 8011402:	454c      	cmp	r4, r9
 8011404:	d206      	bcs.n	8011414 <__hexnan+0x64>
 8011406:	2d07      	cmp	r5, #7
 8011408:	dc04      	bgt.n	8011414 <__hexnan+0x64>
 801140a:	462a      	mov	r2, r5
 801140c:	4649      	mov	r1, r9
 801140e:	4620      	mov	r0, r4
 8011410:	f7ff ffa8 	bl	8011364 <L_shift>
 8011414:	4544      	cmp	r4, r8
 8011416:	d952      	bls.n	80114be <__hexnan+0x10e>
 8011418:	2300      	movs	r3, #0
 801141a:	f1a4 0904 	sub.w	r9, r4, #4
 801141e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011422:	f8cd b008 	str.w	fp, [sp, #8]
 8011426:	464c      	mov	r4, r9
 8011428:	461d      	mov	r5, r3
 801142a:	9903      	ldr	r1, [sp, #12]
 801142c:	e7d7      	b.n	80113de <__hexnan+0x2e>
 801142e:	2a29      	cmp	r2, #41	@ 0x29
 8011430:	d157      	bne.n	80114e2 <__hexnan+0x132>
 8011432:	3102      	adds	r1, #2
 8011434:	f8ca 1000 	str.w	r1, [sl]
 8011438:	f1bb 0f00 	cmp.w	fp, #0
 801143c:	d051      	beq.n	80114e2 <__hexnan+0x132>
 801143e:	454c      	cmp	r4, r9
 8011440:	d206      	bcs.n	8011450 <__hexnan+0xa0>
 8011442:	2d07      	cmp	r5, #7
 8011444:	dc04      	bgt.n	8011450 <__hexnan+0xa0>
 8011446:	462a      	mov	r2, r5
 8011448:	4649      	mov	r1, r9
 801144a:	4620      	mov	r0, r4
 801144c:	f7ff ff8a 	bl	8011364 <L_shift>
 8011450:	4544      	cmp	r4, r8
 8011452:	d936      	bls.n	80114c2 <__hexnan+0x112>
 8011454:	f1a8 0204 	sub.w	r2, r8, #4
 8011458:	4623      	mov	r3, r4
 801145a:	f853 1b04 	ldr.w	r1, [r3], #4
 801145e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011462:	429f      	cmp	r7, r3
 8011464:	d2f9      	bcs.n	801145a <__hexnan+0xaa>
 8011466:	1b3b      	subs	r3, r7, r4
 8011468:	f023 0303 	bic.w	r3, r3, #3
 801146c:	3304      	adds	r3, #4
 801146e:	3401      	adds	r4, #1
 8011470:	3e03      	subs	r6, #3
 8011472:	42b4      	cmp	r4, r6
 8011474:	bf88      	it	hi
 8011476:	2304      	movhi	r3, #4
 8011478:	4443      	add	r3, r8
 801147a:	2200      	movs	r2, #0
 801147c:	f843 2b04 	str.w	r2, [r3], #4
 8011480:	429f      	cmp	r7, r3
 8011482:	d2fb      	bcs.n	801147c <__hexnan+0xcc>
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	b91b      	cbnz	r3, 8011490 <__hexnan+0xe0>
 8011488:	4547      	cmp	r7, r8
 801148a:	d128      	bne.n	80114de <__hexnan+0x12e>
 801148c:	2301      	movs	r3, #1
 801148e:	603b      	str	r3, [r7, #0]
 8011490:	2005      	movs	r0, #5
 8011492:	b007      	add	sp, #28
 8011494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011498:	3501      	adds	r5, #1
 801149a:	2d08      	cmp	r5, #8
 801149c:	f10b 0b01 	add.w	fp, fp, #1
 80114a0:	dd06      	ble.n	80114b0 <__hexnan+0x100>
 80114a2:	4544      	cmp	r4, r8
 80114a4:	d9c1      	bls.n	801142a <__hexnan+0x7a>
 80114a6:	2300      	movs	r3, #0
 80114a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80114ac:	2501      	movs	r5, #1
 80114ae:	3c04      	subs	r4, #4
 80114b0:	6822      	ldr	r2, [r4, #0]
 80114b2:	f000 000f 	and.w	r0, r0, #15
 80114b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80114ba:	6020      	str	r0, [r4, #0]
 80114bc:	e7b5      	b.n	801142a <__hexnan+0x7a>
 80114be:	2508      	movs	r5, #8
 80114c0:	e7b3      	b.n	801142a <__hexnan+0x7a>
 80114c2:	9b01      	ldr	r3, [sp, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d0dd      	beq.n	8011484 <__hexnan+0xd4>
 80114c8:	f1c3 0320 	rsb	r3, r3, #32
 80114cc:	f04f 32ff 	mov.w	r2, #4294967295
 80114d0:	40da      	lsrs	r2, r3
 80114d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80114d6:	4013      	ands	r3, r2
 80114d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80114dc:	e7d2      	b.n	8011484 <__hexnan+0xd4>
 80114de:	3f04      	subs	r7, #4
 80114e0:	e7d0      	b.n	8011484 <__hexnan+0xd4>
 80114e2:	2004      	movs	r0, #4
 80114e4:	e7d5      	b.n	8011492 <__hexnan+0xe2>

080114e6 <__ascii_mbtowc>:
 80114e6:	b082      	sub	sp, #8
 80114e8:	b901      	cbnz	r1, 80114ec <__ascii_mbtowc+0x6>
 80114ea:	a901      	add	r1, sp, #4
 80114ec:	b142      	cbz	r2, 8011500 <__ascii_mbtowc+0x1a>
 80114ee:	b14b      	cbz	r3, 8011504 <__ascii_mbtowc+0x1e>
 80114f0:	7813      	ldrb	r3, [r2, #0]
 80114f2:	600b      	str	r3, [r1, #0]
 80114f4:	7812      	ldrb	r2, [r2, #0]
 80114f6:	1e10      	subs	r0, r2, #0
 80114f8:	bf18      	it	ne
 80114fa:	2001      	movne	r0, #1
 80114fc:	b002      	add	sp, #8
 80114fe:	4770      	bx	lr
 8011500:	4610      	mov	r0, r2
 8011502:	e7fb      	b.n	80114fc <__ascii_mbtowc+0x16>
 8011504:	f06f 0001 	mvn.w	r0, #1
 8011508:	e7f8      	b.n	80114fc <__ascii_mbtowc+0x16>
	...

0801150c <_Balloc>:
 801150c:	b570      	push	{r4, r5, r6, lr}
 801150e:	69c6      	ldr	r6, [r0, #28]
 8011510:	4604      	mov	r4, r0
 8011512:	460d      	mov	r5, r1
 8011514:	b976      	cbnz	r6, 8011534 <_Balloc+0x28>
 8011516:	2010      	movs	r0, #16
 8011518:	f7fc fc56 	bl	800ddc8 <malloc>
 801151c:	4602      	mov	r2, r0
 801151e:	61e0      	str	r0, [r4, #28]
 8011520:	b920      	cbnz	r0, 801152c <_Balloc+0x20>
 8011522:	4b18      	ldr	r3, [pc, #96]	@ (8011584 <_Balloc+0x78>)
 8011524:	4818      	ldr	r0, [pc, #96]	@ (8011588 <_Balloc+0x7c>)
 8011526:	216b      	movs	r1, #107	@ 0x6b
 8011528:	f7fe fdf0 	bl	801010c <__assert_func>
 801152c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011530:	6006      	str	r6, [r0, #0]
 8011532:	60c6      	str	r6, [r0, #12]
 8011534:	69e6      	ldr	r6, [r4, #28]
 8011536:	68f3      	ldr	r3, [r6, #12]
 8011538:	b183      	cbz	r3, 801155c <_Balloc+0x50>
 801153a:	69e3      	ldr	r3, [r4, #28]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011542:	b9b8      	cbnz	r0, 8011574 <_Balloc+0x68>
 8011544:	2101      	movs	r1, #1
 8011546:	fa01 f605 	lsl.w	r6, r1, r5
 801154a:	1d72      	adds	r2, r6, #5
 801154c:	0092      	lsls	r2, r2, #2
 801154e:	4620      	mov	r0, r4
 8011550:	f000 ff55 	bl	80123fe <_calloc_r>
 8011554:	b160      	cbz	r0, 8011570 <_Balloc+0x64>
 8011556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801155a:	e00e      	b.n	801157a <_Balloc+0x6e>
 801155c:	2221      	movs	r2, #33	@ 0x21
 801155e:	2104      	movs	r1, #4
 8011560:	4620      	mov	r0, r4
 8011562:	f000 ff4c 	bl	80123fe <_calloc_r>
 8011566:	69e3      	ldr	r3, [r4, #28]
 8011568:	60f0      	str	r0, [r6, #12]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d1e4      	bne.n	801153a <_Balloc+0x2e>
 8011570:	2000      	movs	r0, #0
 8011572:	bd70      	pop	{r4, r5, r6, pc}
 8011574:	6802      	ldr	r2, [r0, #0]
 8011576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801157a:	2300      	movs	r3, #0
 801157c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011580:	e7f7      	b.n	8011572 <_Balloc+0x66>
 8011582:	bf00      	nop
 8011584:	08012b8a 	.word	0x08012b8a
 8011588:	08012d15 	.word	0x08012d15

0801158c <_Bfree>:
 801158c:	b570      	push	{r4, r5, r6, lr}
 801158e:	69c6      	ldr	r6, [r0, #28]
 8011590:	4605      	mov	r5, r0
 8011592:	460c      	mov	r4, r1
 8011594:	b976      	cbnz	r6, 80115b4 <_Bfree+0x28>
 8011596:	2010      	movs	r0, #16
 8011598:	f7fc fc16 	bl	800ddc8 <malloc>
 801159c:	4602      	mov	r2, r0
 801159e:	61e8      	str	r0, [r5, #28]
 80115a0:	b920      	cbnz	r0, 80115ac <_Bfree+0x20>
 80115a2:	4b09      	ldr	r3, [pc, #36]	@ (80115c8 <_Bfree+0x3c>)
 80115a4:	4809      	ldr	r0, [pc, #36]	@ (80115cc <_Bfree+0x40>)
 80115a6:	218f      	movs	r1, #143	@ 0x8f
 80115a8:	f7fe fdb0 	bl	801010c <__assert_func>
 80115ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115b0:	6006      	str	r6, [r0, #0]
 80115b2:	60c6      	str	r6, [r0, #12]
 80115b4:	b13c      	cbz	r4, 80115c6 <_Bfree+0x3a>
 80115b6:	69eb      	ldr	r3, [r5, #28]
 80115b8:	6862      	ldr	r2, [r4, #4]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115c0:	6021      	str	r1, [r4, #0]
 80115c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115c6:	bd70      	pop	{r4, r5, r6, pc}
 80115c8:	08012b8a 	.word	0x08012b8a
 80115cc:	08012d15 	.word	0x08012d15

080115d0 <__multadd>:
 80115d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d4:	690d      	ldr	r5, [r1, #16]
 80115d6:	4607      	mov	r7, r0
 80115d8:	460c      	mov	r4, r1
 80115da:	461e      	mov	r6, r3
 80115dc:	f101 0c14 	add.w	ip, r1, #20
 80115e0:	2000      	movs	r0, #0
 80115e2:	f8dc 3000 	ldr.w	r3, [ip]
 80115e6:	b299      	uxth	r1, r3
 80115e8:	fb02 6101 	mla	r1, r2, r1, r6
 80115ec:	0c1e      	lsrs	r6, r3, #16
 80115ee:	0c0b      	lsrs	r3, r1, #16
 80115f0:	fb02 3306 	mla	r3, r2, r6, r3
 80115f4:	b289      	uxth	r1, r1
 80115f6:	3001      	adds	r0, #1
 80115f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115fc:	4285      	cmp	r5, r0
 80115fe:	f84c 1b04 	str.w	r1, [ip], #4
 8011602:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011606:	dcec      	bgt.n	80115e2 <__multadd+0x12>
 8011608:	b30e      	cbz	r6, 801164e <__multadd+0x7e>
 801160a:	68a3      	ldr	r3, [r4, #8]
 801160c:	42ab      	cmp	r3, r5
 801160e:	dc19      	bgt.n	8011644 <__multadd+0x74>
 8011610:	6861      	ldr	r1, [r4, #4]
 8011612:	4638      	mov	r0, r7
 8011614:	3101      	adds	r1, #1
 8011616:	f7ff ff79 	bl	801150c <_Balloc>
 801161a:	4680      	mov	r8, r0
 801161c:	b928      	cbnz	r0, 801162a <__multadd+0x5a>
 801161e:	4602      	mov	r2, r0
 8011620:	4b0c      	ldr	r3, [pc, #48]	@ (8011654 <__multadd+0x84>)
 8011622:	480d      	ldr	r0, [pc, #52]	@ (8011658 <__multadd+0x88>)
 8011624:	21ba      	movs	r1, #186	@ 0xba
 8011626:	f7fe fd71 	bl	801010c <__assert_func>
 801162a:	6922      	ldr	r2, [r4, #16]
 801162c:	3202      	adds	r2, #2
 801162e:	f104 010c 	add.w	r1, r4, #12
 8011632:	0092      	lsls	r2, r2, #2
 8011634:	300c      	adds	r0, #12
 8011636:	f7fe fd4a 	bl	80100ce <memcpy>
 801163a:	4621      	mov	r1, r4
 801163c:	4638      	mov	r0, r7
 801163e:	f7ff ffa5 	bl	801158c <_Bfree>
 8011642:	4644      	mov	r4, r8
 8011644:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011648:	3501      	adds	r5, #1
 801164a:	615e      	str	r6, [r3, #20]
 801164c:	6125      	str	r5, [r4, #16]
 801164e:	4620      	mov	r0, r4
 8011650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011654:	08012ca4 	.word	0x08012ca4
 8011658:	08012d15 	.word	0x08012d15

0801165c <__s2b>:
 801165c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011660:	460c      	mov	r4, r1
 8011662:	4615      	mov	r5, r2
 8011664:	461f      	mov	r7, r3
 8011666:	2209      	movs	r2, #9
 8011668:	3308      	adds	r3, #8
 801166a:	4606      	mov	r6, r0
 801166c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011670:	2100      	movs	r1, #0
 8011672:	2201      	movs	r2, #1
 8011674:	429a      	cmp	r2, r3
 8011676:	db09      	blt.n	801168c <__s2b+0x30>
 8011678:	4630      	mov	r0, r6
 801167a:	f7ff ff47 	bl	801150c <_Balloc>
 801167e:	b940      	cbnz	r0, 8011692 <__s2b+0x36>
 8011680:	4602      	mov	r2, r0
 8011682:	4b19      	ldr	r3, [pc, #100]	@ (80116e8 <__s2b+0x8c>)
 8011684:	4819      	ldr	r0, [pc, #100]	@ (80116ec <__s2b+0x90>)
 8011686:	21d3      	movs	r1, #211	@ 0xd3
 8011688:	f7fe fd40 	bl	801010c <__assert_func>
 801168c:	0052      	lsls	r2, r2, #1
 801168e:	3101      	adds	r1, #1
 8011690:	e7f0      	b.n	8011674 <__s2b+0x18>
 8011692:	9b08      	ldr	r3, [sp, #32]
 8011694:	6143      	str	r3, [r0, #20]
 8011696:	2d09      	cmp	r5, #9
 8011698:	f04f 0301 	mov.w	r3, #1
 801169c:	6103      	str	r3, [r0, #16]
 801169e:	dd16      	ble.n	80116ce <__s2b+0x72>
 80116a0:	f104 0909 	add.w	r9, r4, #9
 80116a4:	46c8      	mov	r8, r9
 80116a6:	442c      	add	r4, r5
 80116a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80116ac:	4601      	mov	r1, r0
 80116ae:	3b30      	subs	r3, #48	@ 0x30
 80116b0:	220a      	movs	r2, #10
 80116b2:	4630      	mov	r0, r6
 80116b4:	f7ff ff8c 	bl	80115d0 <__multadd>
 80116b8:	45a0      	cmp	r8, r4
 80116ba:	d1f5      	bne.n	80116a8 <__s2b+0x4c>
 80116bc:	f1a5 0408 	sub.w	r4, r5, #8
 80116c0:	444c      	add	r4, r9
 80116c2:	1b2d      	subs	r5, r5, r4
 80116c4:	1963      	adds	r3, r4, r5
 80116c6:	42bb      	cmp	r3, r7
 80116c8:	db04      	blt.n	80116d4 <__s2b+0x78>
 80116ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ce:	340a      	adds	r4, #10
 80116d0:	2509      	movs	r5, #9
 80116d2:	e7f6      	b.n	80116c2 <__s2b+0x66>
 80116d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80116d8:	4601      	mov	r1, r0
 80116da:	3b30      	subs	r3, #48	@ 0x30
 80116dc:	220a      	movs	r2, #10
 80116de:	4630      	mov	r0, r6
 80116e0:	f7ff ff76 	bl	80115d0 <__multadd>
 80116e4:	e7ee      	b.n	80116c4 <__s2b+0x68>
 80116e6:	bf00      	nop
 80116e8:	08012ca4 	.word	0x08012ca4
 80116ec:	08012d15 	.word	0x08012d15

080116f0 <__hi0bits>:
 80116f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80116f4:	4603      	mov	r3, r0
 80116f6:	bf36      	itet	cc
 80116f8:	0403      	lslcc	r3, r0, #16
 80116fa:	2000      	movcs	r0, #0
 80116fc:	2010      	movcc	r0, #16
 80116fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011702:	bf3c      	itt	cc
 8011704:	021b      	lslcc	r3, r3, #8
 8011706:	3008      	addcc	r0, #8
 8011708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801170c:	bf3c      	itt	cc
 801170e:	011b      	lslcc	r3, r3, #4
 8011710:	3004      	addcc	r0, #4
 8011712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011716:	bf3c      	itt	cc
 8011718:	009b      	lslcc	r3, r3, #2
 801171a:	3002      	addcc	r0, #2
 801171c:	2b00      	cmp	r3, #0
 801171e:	db05      	blt.n	801172c <__hi0bits+0x3c>
 8011720:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011724:	f100 0001 	add.w	r0, r0, #1
 8011728:	bf08      	it	eq
 801172a:	2020      	moveq	r0, #32
 801172c:	4770      	bx	lr

0801172e <__lo0bits>:
 801172e:	6803      	ldr	r3, [r0, #0]
 8011730:	4602      	mov	r2, r0
 8011732:	f013 0007 	ands.w	r0, r3, #7
 8011736:	d00b      	beq.n	8011750 <__lo0bits+0x22>
 8011738:	07d9      	lsls	r1, r3, #31
 801173a:	d421      	bmi.n	8011780 <__lo0bits+0x52>
 801173c:	0798      	lsls	r0, r3, #30
 801173e:	bf49      	itett	mi
 8011740:	085b      	lsrmi	r3, r3, #1
 8011742:	089b      	lsrpl	r3, r3, #2
 8011744:	2001      	movmi	r0, #1
 8011746:	6013      	strmi	r3, [r2, #0]
 8011748:	bf5c      	itt	pl
 801174a:	6013      	strpl	r3, [r2, #0]
 801174c:	2002      	movpl	r0, #2
 801174e:	4770      	bx	lr
 8011750:	b299      	uxth	r1, r3
 8011752:	b909      	cbnz	r1, 8011758 <__lo0bits+0x2a>
 8011754:	0c1b      	lsrs	r3, r3, #16
 8011756:	2010      	movs	r0, #16
 8011758:	b2d9      	uxtb	r1, r3
 801175a:	b909      	cbnz	r1, 8011760 <__lo0bits+0x32>
 801175c:	3008      	adds	r0, #8
 801175e:	0a1b      	lsrs	r3, r3, #8
 8011760:	0719      	lsls	r1, r3, #28
 8011762:	bf04      	itt	eq
 8011764:	091b      	lsreq	r3, r3, #4
 8011766:	3004      	addeq	r0, #4
 8011768:	0799      	lsls	r1, r3, #30
 801176a:	bf04      	itt	eq
 801176c:	089b      	lsreq	r3, r3, #2
 801176e:	3002      	addeq	r0, #2
 8011770:	07d9      	lsls	r1, r3, #31
 8011772:	d403      	bmi.n	801177c <__lo0bits+0x4e>
 8011774:	085b      	lsrs	r3, r3, #1
 8011776:	f100 0001 	add.w	r0, r0, #1
 801177a:	d003      	beq.n	8011784 <__lo0bits+0x56>
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	4770      	bx	lr
 8011780:	2000      	movs	r0, #0
 8011782:	4770      	bx	lr
 8011784:	2020      	movs	r0, #32
 8011786:	4770      	bx	lr

08011788 <__i2b>:
 8011788:	b510      	push	{r4, lr}
 801178a:	460c      	mov	r4, r1
 801178c:	2101      	movs	r1, #1
 801178e:	f7ff febd 	bl	801150c <_Balloc>
 8011792:	4602      	mov	r2, r0
 8011794:	b928      	cbnz	r0, 80117a2 <__i2b+0x1a>
 8011796:	4b05      	ldr	r3, [pc, #20]	@ (80117ac <__i2b+0x24>)
 8011798:	4805      	ldr	r0, [pc, #20]	@ (80117b0 <__i2b+0x28>)
 801179a:	f240 1145 	movw	r1, #325	@ 0x145
 801179e:	f7fe fcb5 	bl	801010c <__assert_func>
 80117a2:	2301      	movs	r3, #1
 80117a4:	6144      	str	r4, [r0, #20]
 80117a6:	6103      	str	r3, [r0, #16]
 80117a8:	bd10      	pop	{r4, pc}
 80117aa:	bf00      	nop
 80117ac:	08012ca4 	.word	0x08012ca4
 80117b0:	08012d15 	.word	0x08012d15

080117b4 <__multiply>:
 80117b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b8:	4614      	mov	r4, r2
 80117ba:	690a      	ldr	r2, [r1, #16]
 80117bc:	6923      	ldr	r3, [r4, #16]
 80117be:	429a      	cmp	r2, r3
 80117c0:	bfa8      	it	ge
 80117c2:	4623      	movge	r3, r4
 80117c4:	460f      	mov	r7, r1
 80117c6:	bfa4      	itt	ge
 80117c8:	460c      	movge	r4, r1
 80117ca:	461f      	movge	r7, r3
 80117cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80117d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80117d4:	68a3      	ldr	r3, [r4, #8]
 80117d6:	6861      	ldr	r1, [r4, #4]
 80117d8:	eb0a 0609 	add.w	r6, sl, r9
 80117dc:	42b3      	cmp	r3, r6
 80117de:	b085      	sub	sp, #20
 80117e0:	bfb8      	it	lt
 80117e2:	3101      	addlt	r1, #1
 80117e4:	f7ff fe92 	bl	801150c <_Balloc>
 80117e8:	b930      	cbnz	r0, 80117f8 <__multiply+0x44>
 80117ea:	4602      	mov	r2, r0
 80117ec:	4b44      	ldr	r3, [pc, #272]	@ (8011900 <__multiply+0x14c>)
 80117ee:	4845      	ldr	r0, [pc, #276]	@ (8011904 <__multiply+0x150>)
 80117f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80117f4:	f7fe fc8a 	bl	801010c <__assert_func>
 80117f8:	f100 0514 	add.w	r5, r0, #20
 80117fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011800:	462b      	mov	r3, r5
 8011802:	2200      	movs	r2, #0
 8011804:	4543      	cmp	r3, r8
 8011806:	d321      	bcc.n	801184c <__multiply+0x98>
 8011808:	f107 0114 	add.w	r1, r7, #20
 801180c:	f104 0214 	add.w	r2, r4, #20
 8011810:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011814:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011818:	9302      	str	r3, [sp, #8]
 801181a:	1b13      	subs	r3, r2, r4
 801181c:	3b15      	subs	r3, #21
 801181e:	f023 0303 	bic.w	r3, r3, #3
 8011822:	3304      	adds	r3, #4
 8011824:	f104 0715 	add.w	r7, r4, #21
 8011828:	42ba      	cmp	r2, r7
 801182a:	bf38      	it	cc
 801182c:	2304      	movcc	r3, #4
 801182e:	9301      	str	r3, [sp, #4]
 8011830:	9b02      	ldr	r3, [sp, #8]
 8011832:	9103      	str	r1, [sp, #12]
 8011834:	428b      	cmp	r3, r1
 8011836:	d80c      	bhi.n	8011852 <__multiply+0x9e>
 8011838:	2e00      	cmp	r6, #0
 801183a:	dd03      	ble.n	8011844 <__multiply+0x90>
 801183c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011840:	2b00      	cmp	r3, #0
 8011842:	d05b      	beq.n	80118fc <__multiply+0x148>
 8011844:	6106      	str	r6, [r0, #16]
 8011846:	b005      	add	sp, #20
 8011848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801184c:	f843 2b04 	str.w	r2, [r3], #4
 8011850:	e7d8      	b.n	8011804 <__multiply+0x50>
 8011852:	f8b1 a000 	ldrh.w	sl, [r1]
 8011856:	f1ba 0f00 	cmp.w	sl, #0
 801185a:	d024      	beq.n	80118a6 <__multiply+0xf2>
 801185c:	f104 0e14 	add.w	lr, r4, #20
 8011860:	46a9      	mov	r9, r5
 8011862:	f04f 0c00 	mov.w	ip, #0
 8011866:	f85e 7b04 	ldr.w	r7, [lr], #4
 801186a:	f8d9 3000 	ldr.w	r3, [r9]
 801186e:	fa1f fb87 	uxth.w	fp, r7
 8011872:	b29b      	uxth	r3, r3
 8011874:	fb0a 330b 	mla	r3, sl, fp, r3
 8011878:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801187c:	f8d9 7000 	ldr.w	r7, [r9]
 8011880:	4463      	add	r3, ip
 8011882:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011886:	fb0a c70b 	mla	r7, sl, fp, ip
 801188a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801188e:	b29b      	uxth	r3, r3
 8011890:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011894:	4572      	cmp	r2, lr
 8011896:	f849 3b04 	str.w	r3, [r9], #4
 801189a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801189e:	d8e2      	bhi.n	8011866 <__multiply+0xb2>
 80118a0:	9b01      	ldr	r3, [sp, #4]
 80118a2:	f845 c003 	str.w	ip, [r5, r3]
 80118a6:	9b03      	ldr	r3, [sp, #12]
 80118a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80118ac:	3104      	adds	r1, #4
 80118ae:	f1b9 0f00 	cmp.w	r9, #0
 80118b2:	d021      	beq.n	80118f8 <__multiply+0x144>
 80118b4:	682b      	ldr	r3, [r5, #0]
 80118b6:	f104 0c14 	add.w	ip, r4, #20
 80118ba:	46ae      	mov	lr, r5
 80118bc:	f04f 0a00 	mov.w	sl, #0
 80118c0:	f8bc b000 	ldrh.w	fp, [ip]
 80118c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80118c8:	fb09 770b 	mla	r7, r9, fp, r7
 80118cc:	4457      	add	r7, sl
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80118d4:	f84e 3b04 	str.w	r3, [lr], #4
 80118d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80118dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118e0:	f8be 3000 	ldrh.w	r3, [lr]
 80118e4:	fb09 330a 	mla	r3, r9, sl, r3
 80118e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80118ec:	4562      	cmp	r2, ip
 80118ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118f2:	d8e5      	bhi.n	80118c0 <__multiply+0x10c>
 80118f4:	9f01      	ldr	r7, [sp, #4]
 80118f6:	51eb      	str	r3, [r5, r7]
 80118f8:	3504      	adds	r5, #4
 80118fa:	e799      	b.n	8011830 <__multiply+0x7c>
 80118fc:	3e01      	subs	r6, #1
 80118fe:	e79b      	b.n	8011838 <__multiply+0x84>
 8011900:	08012ca4 	.word	0x08012ca4
 8011904:	08012d15 	.word	0x08012d15

08011908 <__pow5mult>:
 8011908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801190c:	4615      	mov	r5, r2
 801190e:	f012 0203 	ands.w	r2, r2, #3
 8011912:	4607      	mov	r7, r0
 8011914:	460e      	mov	r6, r1
 8011916:	d007      	beq.n	8011928 <__pow5mult+0x20>
 8011918:	4c25      	ldr	r4, [pc, #148]	@ (80119b0 <__pow5mult+0xa8>)
 801191a:	3a01      	subs	r2, #1
 801191c:	2300      	movs	r3, #0
 801191e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011922:	f7ff fe55 	bl	80115d0 <__multadd>
 8011926:	4606      	mov	r6, r0
 8011928:	10ad      	asrs	r5, r5, #2
 801192a:	d03d      	beq.n	80119a8 <__pow5mult+0xa0>
 801192c:	69fc      	ldr	r4, [r7, #28]
 801192e:	b97c      	cbnz	r4, 8011950 <__pow5mult+0x48>
 8011930:	2010      	movs	r0, #16
 8011932:	f7fc fa49 	bl	800ddc8 <malloc>
 8011936:	4602      	mov	r2, r0
 8011938:	61f8      	str	r0, [r7, #28]
 801193a:	b928      	cbnz	r0, 8011948 <__pow5mult+0x40>
 801193c:	4b1d      	ldr	r3, [pc, #116]	@ (80119b4 <__pow5mult+0xac>)
 801193e:	481e      	ldr	r0, [pc, #120]	@ (80119b8 <__pow5mult+0xb0>)
 8011940:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011944:	f7fe fbe2 	bl	801010c <__assert_func>
 8011948:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801194c:	6004      	str	r4, [r0, #0]
 801194e:	60c4      	str	r4, [r0, #12]
 8011950:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011958:	b94c      	cbnz	r4, 801196e <__pow5mult+0x66>
 801195a:	f240 2171 	movw	r1, #625	@ 0x271
 801195e:	4638      	mov	r0, r7
 8011960:	f7ff ff12 	bl	8011788 <__i2b>
 8011964:	2300      	movs	r3, #0
 8011966:	f8c8 0008 	str.w	r0, [r8, #8]
 801196a:	4604      	mov	r4, r0
 801196c:	6003      	str	r3, [r0, #0]
 801196e:	f04f 0900 	mov.w	r9, #0
 8011972:	07eb      	lsls	r3, r5, #31
 8011974:	d50a      	bpl.n	801198c <__pow5mult+0x84>
 8011976:	4631      	mov	r1, r6
 8011978:	4622      	mov	r2, r4
 801197a:	4638      	mov	r0, r7
 801197c:	f7ff ff1a 	bl	80117b4 <__multiply>
 8011980:	4631      	mov	r1, r6
 8011982:	4680      	mov	r8, r0
 8011984:	4638      	mov	r0, r7
 8011986:	f7ff fe01 	bl	801158c <_Bfree>
 801198a:	4646      	mov	r6, r8
 801198c:	106d      	asrs	r5, r5, #1
 801198e:	d00b      	beq.n	80119a8 <__pow5mult+0xa0>
 8011990:	6820      	ldr	r0, [r4, #0]
 8011992:	b938      	cbnz	r0, 80119a4 <__pow5mult+0x9c>
 8011994:	4622      	mov	r2, r4
 8011996:	4621      	mov	r1, r4
 8011998:	4638      	mov	r0, r7
 801199a:	f7ff ff0b 	bl	80117b4 <__multiply>
 801199e:	6020      	str	r0, [r4, #0]
 80119a0:	f8c0 9000 	str.w	r9, [r0]
 80119a4:	4604      	mov	r4, r0
 80119a6:	e7e4      	b.n	8011972 <__pow5mult+0x6a>
 80119a8:	4630      	mov	r0, r6
 80119aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ae:	bf00      	nop
 80119b0:	08012d70 	.word	0x08012d70
 80119b4:	08012b8a 	.word	0x08012b8a
 80119b8:	08012d15 	.word	0x08012d15

080119bc <__lshift>:
 80119bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119c0:	460c      	mov	r4, r1
 80119c2:	6849      	ldr	r1, [r1, #4]
 80119c4:	6923      	ldr	r3, [r4, #16]
 80119c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119ca:	68a3      	ldr	r3, [r4, #8]
 80119cc:	4607      	mov	r7, r0
 80119ce:	4691      	mov	r9, r2
 80119d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119d4:	f108 0601 	add.w	r6, r8, #1
 80119d8:	42b3      	cmp	r3, r6
 80119da:	db0b      	blt.n	80119f4 <__lshift+0x38>
 80119dc:	4638      	mov	r0, r7
 80119de:	f7ff fd95 	bl	801150c <_Balloc>
 80119e2:	4605      	mov	r5, r0
 80119e4:	b948      	cbnz	r0, 80119fa <__lshift+0x3e>
 80119e6:	4602      	mov	r2, r0
 80119e8:	4b28      	ldr	r3, [pc, #160]	@ (8011a8c <__lshift+0xd0>)
 80119ea:	4829      	ldr	r0, [pc, #164]	@ (8011a90 <__lshift+0xd4>)
 80119ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80119f0:	f7fe fb8c 	bl	801010c <__assert_func>
 80119f4:	3101      	adds	r1, #1
 80119f6:	005b      	lsls	r3, r3, #1
 80119f8:	e7ee      	b.n	80119d8 <__lshift+0x1c>
 80119fa:	2300      	movs	r3, #0
 80119fc:	f100 0114 	add.w	r1, r0, #20
 8011a00:	f100 0210 	add.w	r2, r0, #16
 8011a04:	4618      	mov	r0, r3
 8011a06:	4553      	cmp	r3, sl
 8011a08:	db33      	blt.n	8011a72 <__lshift+0xb6>
 8011a0a:	6920      	ldr	r0, [r4, #16]
 8011a0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a10:	f104 0314 	add.w	r3, r4, #20
 8011a14:	f019 091f 	ands.w	r9, r9, #31
 8011a18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a20:	d02b      	beq.n	8011a7a <__lshift+0xbe>
 8011a22:	f1c9 0e20 	rsb	lr, r9, #32
 8011a26:	468a      	mov	sl, r1
 8011a28:	2200      	movs	r2, #0
 8011a2a:	6818      	ldr	r0, [r3, #0]
 8011a2c:	fa00 f009 	lsl.w	r0, r0, r9
 8011a30:	4310      	orrs	r0, r2
 8011a32:	f84a 0b04 	str.w	r0, [sl], #4
 8011a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a3a:	459c      	cmp	ip, r3
 8011a3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011a40:	d8f3      	bhi.n	8011a2a <__lshift+0x6e>
 8011a42:	ebac 0304 	sub.w	r3, ip, r4
 8011a46:	3b15      	subs	r3, #21
 8011a48:	f023 0303 	bic.w	r3, r3, #3
 8011a4c:	3304      	adds	r3, #4
 8011a4e:	f104 0015 	add.w	r0, r4, #21
 8011a52:	4584      	cmp	ip, r0
 8011a54:	bf38      	it	cc
 8011a56:	2304      	movcc	r3, #4
 8011a58:	50ca      	str	r2, [r1, r3]
 8011a5a:	b10a      	cbz	r2, 8011a60 <__lshift+0xa4>
 8011a5c:	f108 0602 	add.w	r6, r8, #2
 8011a60:	3e01      	subs	r6, #1
 8011a62:	4638      	mov	r0, r7
 8011a64:	612e      	str	r6, [r5, #16]
 8011a66:	4621      	mov	r1, r4
 8011a68:	f7ff fd90 	bl	801158c <_Bfree>
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a72:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a76:	3301      	adds	r3, #1
 8011a78:	e7c5      	b.n	8011a06 <__lshift+0x4a>
 8011a7a:	3904      	subs	r1, #4
 8011a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a80:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a84:	459c      	cmp	ip, r3
 8011a86:	d8f9      	bhi.n	8011a7c <__lshift+0xc0>
 8011a88:	e7ea      	b.n	8011a60 <__lshift+0xa4>
 8011a8a:	bf00      	nop
 8011a8c:	08012ca4 	.word	0x08012ca4
 8011a90:	08012d15 	.word	0x08012d15

08011a94 <__mcmp>:
 8011a94:	690a      	ldr	r2, [r1, #16]
 8011a96:	4603      	mov	r3, r0
 8011a98:	6900      	ldr	r0, [r0, #16]
 8011a9a:	1a80      	subs	r0, r0, r2
 8011a9c:	b530      	push	{r4, r5, lr}
 8011a9e:	d10e      	bne.n	8011abe <__mcmp+0x2a>
 8011aa0:	3314      	adds	r3, #20
 8011aa2:	3114      	adds	r1, #20
 8011aa4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011aa8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011aac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011ab0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011ab4:	4295      	cmp	r5, r2
 8011ab6:	d003      	beq.n	8011ac0 <__mcmp+0x2c>
 8011ab8:	d205      	bcs.n	8011ac6 <__mcmp+0x32>
 8011aba:	f04f 30ff 	mov.w	r0, #4294967295
 8011abe:	bd30      	pop	{r4, r5, pc}
 8011ac0:	42a3      	cmp	r3, r4
 8011ac2:	d3f3      	bcc.n	8011aac <__mcmp+0x18>
 8011ac4:	e7fb      	b.n	8011abe <__mcmp+0x2a>
 8011ac6:	2001      	movs	r0, #1
 8011ac8:	e7f9      	b.n	8011abe <__mcmp+0x2a>
	...

08011acc <__mdiff>:
 8011acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad0:	4689      	mov	r9, r1
 8011ad2:	4606      	mov	r6, r0
 8011ad4:	4611      	mov	r1, r2
 8011ad6:	4648      	mov	r0, r9
 8011ad8:	4614      	mov	r4, r2
 8011ada:	f7ff ffdb 	bl	8011a94 <__mcmp>
 8011ade:	1e05      	subs	r5, r0, #0
 8011ae0:	d112      	bne.n	8011b08 <__mdiff+0x3c>
 8011ae2:	4629      	mov	r1, r5
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	f7ff fd11 	bl	801150c <_Balloc>
 8011aea:	4602      	mov	r2, r0
 8011aec:	b928      	cbnz	r0, 8011afa <__mdiff+0x2e>
 8011aee:	4b3f      	ldr	r3, [pc, #252]	@ (8011bec <__mdiff+0x120>)
 8011af0:	f240 2137 	movw	r1, #567	@ 0x237
 8011af4:	483e      	ldr	r0, [pc, #248]	@ (8011bf0 <__mdiff+0x124>)
 8011af6:	f7fe fb09 	bl	801010c <__assert_func>
 8011afa:	2301      	movs	r3, #1
 8011afc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b00:	4610      	mov	r0, r2
 8011b02:	b003      	add	sp, #12
 8011b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b08:	bfbc      	itt	lt
 8011b0a:	464b      	movlt	r3, r9
 8011b0c:	46a1      	movlt	r9, r4
 8011b0e:	4630      	mov	r0, r6
 8011b10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011b14:	bfba      	itte	lt
 8011b16:	461c      	movlt	r4, r3
 8011b18:	2501      	movlt	r5, #1
 8011b1a:	2500      	movge	r5, #0
 8011b1c:	f7ff fcf6 	bl	801150c <_Balloc>
 8011b20:	4602      	mov	r2, r0
 8011b22:	b918      	cbnz	r0, 8011b2c <__mdiff+0x60>
 8011b24:	4b31      	ldr	r3, [pc, #196]	@ (8011bec <__mdiff+0x120>)
 8011b26:	f240 2145 	movw	r1, #581	@ 0x245
 8011b2a:	e7e3      	b.n	8011af4 <__mdiff+0x28>
 8011b2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011b30:	6926      	ldr	r6, [r4, #16]
 8011b32:	60c5      	str	r5, [r0, #12]
 8011b34:	f109 0310 	add.w	r3, r9, #16
 8011b38:	f109 0514 	add.w	r5, r9, #20
 8011b3c:	f104 0e14 	add.w	lr, r4, #20
 8011b40:	f100 0b14 	add.w	fp, r0, #20
 8011b44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011b48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011b4c:	9301      	str	r3, [sp, #4]
 8011b4e:	46d9      	mov	r9, fp
 8011b50:	f04f 0c00 	mov.w	ip, #0
 8011b54:	9b01      	ldr	r3, [sp, #4]
 8011b56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011b5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011b5e:	9301      	str	r3, [sp, #4]
 8011b60:	fa1f f38a 	uxth.w	r3, sl
 8011b64:	4619      	mov	r1, r3
 8011b66:	b283      	uxth	r3, r0
 8011b68:	1acb      	subs	r3, r1, r3
 8011b6a:	0c00      	lsrs	r0, r0, #16
 8011b6c:	4463      	add	r3, ip
 8011b6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b7c:	4576      	cmp	r6, lr
 8011b7e:	f849 3b04 	str.w	r3, [r9], #4
 8011b82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b86:	d8e5      	bhi.n	8011b54 <__mdiff+0x88>
 8011b88:	1b33      	subs	r3, r6, r4
 8011b8a:	3b15      	subs	r3, #21
 8011b8c:	f023 0303 	bic.w	r3, r3, #3
 8011b90:	3415      	adds	r4, #21
 8011b92:	3304      	adds	r3, #4
 8011b94:	42a6      	cmp	r6, r4
 8011b96:	bf38      	it	cc
 8011b98:	2304      	movcc	r3, #4
 8011b9a:	441d      	add	r5, r3
 8011b9c:	445b      	add	r3, fp
 8011b9e:	461e      	mov	r6, r3
 8011ba0:	462c      	mov	r4, r5
 8011ba2:	4544      	cmp	r4, r8
 8011ba4:	d30e      	bcc.n	8011bc4 <__mdiff+0xf8>
 8011ba6:	f108 0103 	add.w	r1, r8, #3
 8011baa:	1b49      	subs	r1, r1, r5
 8011bac:	f021 0103 	bic.w	r1, r1, #3
 8011bb0:	3d03      	subs	r5, #3
 8011bb2:	45a8      	cmp	r8, r5
 8011bb4:	bf38      	it	cc
 8011bb6:	2100      	movcc	r1, #0
 8011bb8:	440b      	add	r3, r1
 8011bba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011bbe:	b191      	cbz	r1, 8011be6 <__mdiff+0x11a>
 8011bc0:	6117      	str	r7, [r2, #16]
 8011bc2:	e79d      	b.n	8011b00 <__mdiff+0x34>
 8011bc4:	f854 1b04 	ldr.w	r1, [r4], #4
 8011bc8:	46e6      	mov	lr, ip
 8011bca:	0c08      	lsrs	r0, r1, #16
 8011bcc:	fa1c fc81 	uxtah	ip, ip, r1
 8011bd0:	4471      	add	r1, lr
 8011bd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011bd6:	b289      	uxth	r1, r1
 8011bd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011bdc:	f846 1b04 	str.w	r1, [r6], #4
 8011be0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011be4:	e7dd      	b.n	8011ba2 <__mdiff+0xd6>
 8011be6:	3f01      	subs	r7, #1
 8011be8:	e7e7      	b.n	8011bba <__mdiff+0xee>
 8011bea:	bf00      	nop
 8011bec:	08012ca4 	.word	0x08012ca4
 8011bf0:	08012d15 	.word	0x08012d15

08011bf4 <__ulp>:
 8011bf4:	b082      	sub	sp, #8
 8011bf6:	ed8d 0b00 	vstr	d0, [sp]
 8011bfa:	9a01      	ldr	r2, [sp, #4]
 8011bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8011c3c <__ulp+0x48>)
 8011bfe:	4013      	ands	r3, r2
 8011c00:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	dc08      	bgt.n	8011c1a <__ulp+0x26>
 8011c08:	425b      	negs	r3, r3
 8011c0a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011c0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011c12:	da04      	bge.n	8011c1e <__ulp+0x2a>
 8011c14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011c18:	4113      	asrs	r3, r2
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	e008      	b.n	8011c30 <__ulp+0x3c>
 8011c1e:	f1a2 0314 	sub.w	r3, r2, #20
 8011c22:	2b1e      	cmp	r3, #30
 8011c24:	bfda      	itte	le
 8011c26:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011c2a:	40da      	lsrle	r2, r3
 8011c2c:	2201      	movgt	r2, #1
 8011c2e:	2300      	movs	r3, #0
 8011c30:	4619      	mov	r1, r3
 8011c32:	4610      	mov	r0, r2
 8011c34:	ec41 0b10 	vmov	d0, r0, r1
 8011c38:	b002      	add	sp, #8
 8011c3a:	4770      	bx	lr
 8011c3c:	7ff00000 	.word	0x7ff00000

08011c40 <__b2d>:
 8011c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c44:	6906      	ldr	r6, [r0, #16]
 8011c46:	f100 0814 	add.w	r8, r0, #20
 8011c4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011c4e:	1f37      	subs	r7, r6, #4
 8011c50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011c54:	4610      	mov	r0, r2
 8011c56:	f7ff fd4b 	bl	80116f0 <__hi0bits>
 8011c5a:	f1c0 0320 	rsb	r3, r0, #32
 8011c5e:	280a      	cmp	r0, #10
 8011c60:	600b      	str	r3, [r1, #0]
 8011c62:	491b      	ldr	r1, [pc, #108]	@ (8011cd0 <__b2d+0x90>)
 8011c64:	dc15      	bgt.n	8011c92 <__b2d+0x52>
 8011c66:	f1c0 0c0b 	rsb	ip, r0, #11
 8011c6a:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c6e:	45b8      	cmp	r8, r7
 8011c70:	ea43 0501 	orr.w	r5, r3, r1
 8011c74:	bf34      	ite	cc
 8011c76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c7a:	2300      	movcs	r3, #0
 8011c7c:	3015      	adds	r0, #21
 8011c7e:	fa02 f000 	lsl.w	r0, r2, r0
 8011c82:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c86:	4303      	orrs	r3, r0
 8011c88:	461c      	mov	r4, r3
 8011c8a:	ec45 4b10 	vmov	d0, r4, r5
 8011c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c92:	45b8      	cmp	r8, r7
 8011c94:	bf3a      	itte	cc
 8011c96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c9a:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c9e:	2300      	movcs	r3, #0
 8011ca0:	380b      	subs	r0, #11
 8011ca2:	d012      	beq.n	8011cca <__b2d+0x8a>
 8011ca4:	f1c0 0120 	rsb	r1, r0, #32
 8011ca8:	fa23 f401 	lsr.w	r4, r3, r1
 8011cac:	4082      	lsls	r2, r0
 8011cae:	4322      	orrs	r2, r4
 8011cb0:	4547      	cmp	r7, r8
 8011cb2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011cb6:	bf8c      	ite	hi
 8011cb8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011cbc:	2200      	movls	r2, #0
 8011cbe:	4083      	lsls	r3, r0
 8011cc0:	40ca      	lsrs	r2, r1
 8011cc2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011cc6:	4313      	orrs	r3, r2
 8011cc8:	e7de      	b.n	8011c88 <__b2d+0x48>
 8011cca:	ea42 0501 	orr.w	r5, r2, r1
 8011cce:	e7db      	b.n	8011c88 <__b2d+0x48>
 8011cd0:	3ff00000 	.word	0x3ff00000

08011cd4 <__d2b>:
 8011cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cd8:	460f      	mov	r7, r1
 8011cda:	2101      	movs	r1, #1
 8011cdc:	ec59 8b10 	vmov	r8, r9, d0
 8011ce0:	4616      	mov	r6, r2
 8011ce2:	f7ff fc13 	bl	801150c <_Balloc>
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	b930      	cbnz	r0, 8011cf8 <__d2b+0x24>
 8011cea:	4602      	mov	r2, r0
 8011cec:	4b23      	ldr	r3, [pc, #140]	@ (8011d7c <__d2b+0xa8>)
 8011cee:	4824      	ldr	r0, [pc, #144]	@ (8011d80 <__d2b+0xac>)
 8011cf0:	f240 310f 	movw	r1, #783	@ 0x30f
 8011cf4:	f7fe fa0a 	bl	801010c <__assert_func>
 8011cf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011cfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d00:	b10d      	cbz	r5, 8011d06 <__d2b+0x32>
 8011d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d06:	9301      	str	r3, [sp, #4]
 8011d08:	f1b8 0300 	subs.w	r3, r8, #0
 8011d0c:	d023      	beq.n	8011d56 <__d2b+0x82>
 8011d0e:	4668      	mov	r0, sp
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	f7ff fd0c 	bl	801172e <__lo0bits>
 8011d16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d1a:	b1d0      	cbz	r0, 8011d52 <__d2b+0x7e>
 8011d1c:	f1c0 0320 	rsb	r3, r0, #32
 8011d20:	fa02 f303 	lsl.w	r3, r2, r3
 8011d24:	430b      	orrs	r3, r1
 8011d26:	40c2      	lsrs	r2, r0
 8011d28:	6163      	str	r3, [r4, #20]
 8011d2a:	9201      	str	r2, [sp, #4]
 8011d2c:	9b01      	ldr	r3, [sp, #4]
 8011d2e:	61a3      	str	r3, [r4, #24]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	bf0c      	ite	eq
 8011d34:	2201      	moveq	r2, #1
 8011d36:	2202      	movne	r2, #2
 8011d38:	6122      	str	r2, [r4, #16]
 8011d3a:	b1a5      	cbz	r5, 8011d66 <__d2b+0x92>
 8011d3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011d40:	4405      	add	r5, r0
 8011d42:	603d      	str	r5, [r7, #0]
 8011d44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011d48:	6030      	str	r0, [r6, #0]
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	b003      	add	sp, #12
 8011d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d52:	6161      	str	r1, [r4, #20]
 8011d54:	e7ea      	b.n	8011d2c <__d2b+0x58>
 8011d56:	a801      	add	r0, sp, #4
 8011d58:	f7ff fce9 	bl	801172e <__lo0bits>
 8011d5c:	9b01      	ldr	r3, [sp, #4]
 8011d5e:	6163      	str	r3, [r4, #20]
 8011d60:	3020      	adds	r0, #32
 8011d62:	2201      	movs	r2, #1
 8011d64:	e7e8      	b.n	8011d38 <__d2b+0x64>
 8011d66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d6e:	6038      	str	r0, [r7, #0]
 8011d70:	6918      	ldr	r0, [r3, #16]
 8011d72:	f7ff fcbd 	bl	80116f0 <__hi0bits>
 8011d76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d7a:	e7e5      	b.n	8011d48 <__d2b+0x74>
 8011d7c:	08012ca4 	.word	0x08012ca4
 8011d80:	08012d15 	.word	0x08012d15

08011d84 <__ratio>:
 8011d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d88:	b085      	sub	sp, #20
 8011d8a:	e9cd 1000 	strd	r1, r0, [sp]
 8011d8e:	a902      	add	r1, sp, #8
 8011d90:	f7ff ff56 	bl	8011c40 <__b2d>
 8011d94:	9800      	ldr	r0, [sp, #0]
 8011d96:	a903      	add	r1, sp, #12
 8011d98:	ec55 4b10 	vmov	r4, r5, d0
 8011d9c:	f7ff ff50 	bl	8011c40 <__b2d>
 8011da0:	9b01      	ldr	r3, [sp, #4]
 8011da2:	6919      	ldr	r1, [r3, #16]
 8011da4:	9b00      	ldr	r3, [sp, #0]
 8011da6:	691b      	ldr	r3, [r3, #16]
 8011da8:	1ac9      	subs	r1, r1, r3
 8011daa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011dae:	1a9b      	subs	r3, r3, r2
 8011db0:	ec5b ab10 	vmov	sl, fp, d0
 8011db4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	bfce      	itee	gt
 8011dbc:	462a      	movgt	r2, r5
 8011dbe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011dc2:	465a      	movle	r2, fp
 8011dc4:	462f      	mov	r7, r5
 8011dc6:	46d9      	mov	r9, fp
 8011dc8:	bfcc      	ite	gt
 8011dca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011dce:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011dd2:	464b      	mov	r3, r9
 8011dd4:	4652      	mov	r2, sl
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	4639      	mov	r1, r7
 8011dda:	f7ee fd5f 	bl	800089c <__aeabi_ddiv>
 8011dde:	ec41 0b10 	vmov	d0, r0, r1
 8011de2:	b005      	add	sp, #20
 8011de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011de8 <__copybits>:
 8011de8:	3901      	subs	r1, #1
 8011dea:	b570      	push	{r4, r5, r6, lr}
 8011dec:	1149      	asrs	r1, r1, #5
 8011dee:	6914      	ldr	r4, [r2, #16]
 8011df0:	3101      	adds	r1, #1
 8011df2:	f102 0314 	add.w	r3, r2, #20
 8011df6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011dfa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011dfe:	1f05      	subs	r5, r0, #4
 8011e00:	42a3      	cmp	r3, r4
 8011e02:	d30c      	bcc.n	8011e1e <__copybits+0x36>
 8011e04:	1aa3      	subs	r3, r4, r2
 8011e06:	3b11      	subs	r3, #17
 8011e08:	f023 0303 	bic.w	r3, r3, #3
 8011e0c:	3211      	adds	r2, #17
 8011e0e:	42a2      	cmp	r2, r4
 8011e10:	bf88      	it	hi
 8011e12:	2300      	movhi	r3, #0
 8011e14:	4418      	add	r0, r3
 8011e16:	2300      	movs	r3, #0
 8011e18:	4288      	cmp	r0, r1
 8011e1a:	d305      	bcc.n	8011e28 <__copybits+0x40>
 8011e1c:	bd70      	pop	{r4, r5, r6, pc}
 8011e1e:	f853 6b04 	ldr.w	r6, [r3], #4
 8011e22:	f845 6f04 	str.w	r6, [r5, #4]!
 8011e26:	e7eb      	b.n	8011e00 <__copybits+0x18>
 8011e28:	f840 3b04 	str.w	r3, [r0], #4
 8011e2c:	e7f4      	b.n	8011e18 <__copybits+0x30>

08011e2e <__any_on>:
 8011e2e:	f100 0214 	add.w	r2, r0, #20
 8011e32:	6900      	ldr	r0, [r0, #16]
 8011e34:	114b      	asrs	r3, r1, #5
 8011e36:	4298      	cmp	r0, r3
 8011e38:	b510      	push	{r4, lr}
 8011e3a:	db11      	blt.n	8011e60 <__any_on+0x32>
 8011e3c:	dd0a      	ble.n	8011e54 <__any_on+0x26>
 8011e3e:	f011 011f 	ands.w	r1, r1, #31
 8011e42:	d007      	beq.n	8011e54 <__any_on+0x26>
 8011e44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011e48:	fa24 f001 	lsr.w	r0, r4, r1
 8011e4c:	fa00 f101 	lsl.w	r1, r0, r1
 8011e50:	428c      	cmp	r4, r1
 8011e52:	d10b      	bne.n	8011e6c <__any_on+0x3e>
 8011e54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	d803      	bhi.n	8011e64 <__any_on+0x36>
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	bd10      	pop	{r4, pc}
 8011e60:	4603      	mov	r3, r0
 8011e62:	e7f7      	b.n	8011e54 <__any_on+0x26>
 8011e64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e68:	2900      	cmp	r1, #0
 8011e6a:	d0f5      	beq.n	8011e58 <__any_on+0x2a>
 8011e6c:	2001      	movs	r0, #1
 8011e6e:	e7f6      	b.n	8011e5e <__any_on+0x30>

08011e70 <__ascii_wctomb>:
 8011e70:	4603      	mov	r3, r0
 8011e72:	4608      	mov	r0, r1
 8011e74:	b141      	cbz	r1, 8011e88 <__ascii_wctomb+0x18>
 8011e76:	2aff      	cmp	r2, #255	@ 0xff
 8011e78:	d904      	bls.n	8011e84 <__ascii_wctomb+0x14>
 8011e7a:	228a      	movs	r2, #138	@ 0x8a
 8011e7c:	601a      	str	r2, [r3, #0]
 8011e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e82:	4770      	bx	lr
 8011e84:	700a      	strb	r2, [r1, #0]
 8011e86:	2001      	movs	r0, #1
 8011e88:	4770      	bx	lr

08011e8a <__ssputs_r>:
 8011e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e8e:	688e      	ldr	r6, [r1, #8]
 8011e90:	461f      	mov	r7, r3
 8011e92:	42be      	cmp	r6, r7
 8011e94:	680b      	ldr	r3, [r1, #0]
 8011e96:	4682      	mov	sl, r0
 8011e98:	460c      	mov	r4, r1
 8011e9a:	4690      	mov	r8, r2
 8011e9c:	d82d      	bhi.n	8011efa <__ssputs_r+0x70>
 8011e9e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ea2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011ea6:	d026      	beq.n	8011ef6 <__ssputs_r+0x6c>
 8011ea8:	6965      	ldr	r5, [r4, #20]
 8011eaa:	6909      	ldr	r1, [r1, #16]
 8011eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011eb0:	eba3 0901 	sub.w	r9, r3, r1
 8011eb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011eb8:	1c7b      	adds	r3, r7, #1
 8011eba:	444b      	add	r3, r9
 8011ebc:	106d      	asrs	r5, r5, #1
 8011ebe:	429d      	cmp	r5, r3
 8011ec0:	bf38      	it	cc
 8011ec2:	461d      	movcc	r5, r3
 8011ec4:	0553      	lsls	r3, r2, #21
 8011ec6:	d527      	bpl.n	8011f18 <__ssputs_r+0x8e>
 8011ec8:	4629      	mov	r1, r5
 8011eca:	f7fb ffaf 	bl	800de2c <_malloc_r>
 8011ece:	4606      	mov	r6, r0
 8011ed0:	b360      	cbz	r0, 8011f2c <__ssputs_r+0xa2>
 8011ed2:	6921      	ldr	r1, [r4, #16]
 8011ed4:	464a      	mov	r2, r9
 8011ed6:	f7fe f8fa 	bl	80100ce <memcpy>
 8011eda:	89a3      	ldrh	r3, [r4, #12]
 8011edc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ee4:	81a3      	strh	r3, [r4, #12]
 8011ee6:	6126      	str	r6, [r4, #16]
 8011ee8:	6165      	str	r5, [r4, #20]
 8011eea:	444e      	add	r6, r9
 8011eec:	eba5 0509 	sub.w	r5, r5, r9
 8011ef0:	6026      	str	r6, [r4, #0]
 8011ef2:	60a5      	str	r5, [r4, #8]
 8011ef4:	463e      	mov	r6, r7
 8011ef6:	42be      	cmp	r6, r7
 8011ef8:	d900      	bls.n	8011efc <__ssputs_r+0x72>
 8011efa:	463e      	mov	r6, r7
 8011efc:	6820      	ldr	r0, [r4, #0]
 8011efe:	4632      	mov	r2, r6
 8011f00:	4641      	mov	r1, r8
 8011f02:	f000 fa39 	bl	8012378 <memmove>
 8011f06:	68a3      	ldr	r3, [r4, #8]
 8011f08:	1b9b      	subs	r3, r3, r6
 8011f0a:	60a3      	str	r3, [r4, #8]
 8011f0c:	6823      	ldr	r3, [r4, #0]
 8011f0e:	4433      	add	r3, r6
 8011f10:	6023      	str	r3, [r4, #0]
 8011f12:	2000      	movs	r0, #0
 8011f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f18:	462a      	mov	r2, r5
 8011f1a:	f000 fa84 	bl	8012426 <_realloc_r>
 8011f1e:	4606      	mov	r6, r0
 8011f20:	2800      	cmp	r0, #0
 8011f22:	d1e0      	bne.n	8011ee6 <__ssputs_r+0x5c>
 8011f24:	6921      	ldr	r1, [r4, #16]
 8011f26:	4650      	mov	r0, sl
 8011f28:	f7fe ff5a 	bl	8010de0 <_free_r>
 8011f2c:	230c      	movs	r3, #12
 8011f2e:	f8ca 3000 	str.w	r3, [sl]
 8011f32:	89a3      	ldrh	r3, [r4, #12]
 8011f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f38:	81a3      	strh	r3, [r4, #12]
 8011f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f3e:	e7e9      	b.n	8011f14 <__ssputs_r+0x8a>

08011f40 <_svfiprintf_r>:
 8011f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f44:	4698      	mov	r8, r3
 8011f46:	898b      	ldrh	r3, [r1, #12]
 8011f48:	061b      	lsls	r3, r3, #24
 8011f4a:	b09d      	sub	sp, #116	@ 0x74
 8011f4c:	4607      	mov	r7, r0
 8011f4e:	460d      	mov	r5, r1
 8011f50:	4614      	mov	r4, r2
 8011f52:	d510      	bpl.n	8011f76 <_svfiprintf_r+0x36>
 8011f54:	690b      	ldr	r3, [r1, #16]
 8011f56:	b973      	cbnz	r3, 8011f76 <_svfiprintf_r+0x36>
 8011f58:	2140      	movs	r1, #64	@ 0x40
 8011f5a:	f7fb ff67 	bl	800de2c <_malloc_r>
 8011f5e:	6028      	str	r0, [r5, #0]
 8011f60:	6128      	str	r0, [r5, #16]
 8011f62:	b930      	cbnz	r0, 8011f72 <_svfiprintf_r+0x32>
 8011f64:	230c      	movs	r3, #12
 8011f66:	603b      	str	r3, [r7, #0]
 8011f68:	f04f 30ff 	mov.w	r0, #4294967295
 8011f6c:	b01d      	add	sp, #116	@ 0x74
 8011f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f72:	2340      	movs	r3, #64	@ 0x40
 8011f74:	616b      	str	r3, [r5, #20]
 8011f76:	2300      	movs	r3, #0
 8011f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f7a:	2320      	movs	r3, #32
 8011f7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f84:	2330      	movs	r3, #48	@ 0x30
 8011f86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012124 <_svfiprintf_r+0x1e4>
 8011f8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f8e:	f04f 0901 	mov.w	r9, #1
 8011f92:	4623      	mov	r3, r4
 8011f94:	469a      	mov	sl, r3
 8011f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f9a:	b10a      	cbz	r2, 8011fa0 <_svfiprintf_r+0x60>
 8011f9c:	2a25      	cmp	r2, #37	@ 0x25
 8011f9e:	d1f9      	bne.n	8011f94 <_svfiprintf_r+0x54>
 8011fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8011fa4:	d00b      	beq.n	8011fbe <_svfiprintf_r+0x7e>
 8011fa6:	465b      	mov	r3, fp
 8011fa8:	4622      	mov	r2, r4
 8011faa:	4629      	mov	r1, r5
 8011fac:	4638      	mov	r0, r7
 8011fae:	f7ff ff6c 	bl	8011e8a <__ssputs_r>
 8011fb2:	3001      	adds	r0, #1
 8011fb4:	f000 80a7 	beq.w	8012106 <_svfiprintf_r+0x1c6>
 8011fb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fba:	445a      	add	r2, fp
 8011fbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	f000 809f 	beq.w	8012106 <_svfiprintf_r+0x1c6>
 8011fc8:	2300      	movs	r3, #0
 8011fca:	f04f 32ff 	mov.w	r2, #4294967295
 8011fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fd2:	f10a 0a01 	add.w	sl, sl, #1
 8011fd6:	9304      	str	r3, [sp, #16]
 8011fd8:	9307      	str	r3, [sp, #28]
 8011fda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011fde:	931a      	str	r3, [sp, #104]	@ 0x68
 8011fe0:	4654      	mov	r4, sl
 8011fe2:	2205      	movs	r2, #5
 8011fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fe8:	484e      	ldr	r0, [pc, #312]	@ (8012124 <_svfiprintf_r+0x1e4>)
 8011fea:	f7ee f919 	bl	8000220 <memchr>
 8011fee:	9a04      	ldr	r2, [sp, #16]
 8011ff0:	b9d8      	cbnz	r0, 801202a <_svfiprintf_r+0xea>
 8011ff2:	06d0      	lsls	r0, r2, #27
 8011ff4:	bf44      	itt	mi
 8011ff6:	2320      	movmi	r3, #32
 8011ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ffc:	0711      	lsls	r1, r2, #28
 8011ffe:	bf44      	itt	mi
 8012000:	232b      	movmi	r3, #43	@ 0x2b
 8012002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012006:	f89a 3000 	ldrb.w	r3, [sl]
 801200a:	2b2a      	cmp	r3, #42	@ 0x2a
 801200c:	d015      	beq.n	801203a <_svfiprintf_r+0xfa>
 801200e:	9a07      	ldr	r2, [sp, #28]
 8012010:	4654      	mov	r4, sl
 8012012:	2000      	movs	r0, #0
 8012014:	f04f 0c0a 	mov.w	ip, #10
 8012018:	4621      	mov	r1, r4
 801201a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801201e:	3b30      	subs	r3, #48	@ 0x30
 8012020:	2b09      	cmp	r3, #9
 8012022:	d94b      	bls.n	80120bc <_svfiprintf_r+0x17c>
 8012024:	b1b0      	cbz	r0, 8012054 <_svfiprintf_r+0x114>
 8012026:	9207      	str	r2, [sp, #28]
 8012028:	e014      	b.n	8012054 <_svfiprintf_r+0x114>
 801202a:	eba0 0308 	sub.w	r3, r0, r8
 801202e:	fa09 f303 	lsl.w	r3, r9, r3
 8012032:	4313      	orrs	r3, r2
 8012034:	9304      	str	r3, [sp, #16]
 8012036:	46a2      	mov	sl, r4
 8012038:	e7d2      	b.n	8011fe0 <_svfiprintf_r+0xa0>
 801203a:	9b03      	ldr	r3, [sp, #12]
 801203c:	1d19      	adds	r1, r3, #4
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	9103      	str	r1, [sp, #12]
 8012042:	2b00      	cmp	r3, #0
 8012044:	bfbb      	ittet	lt
 8012046:	425b      	neglt	r3, r3
 8012048:	f042 0202 	orrlt.w	r2, r2, #2
 801204c:	9307      	strge	r3, [sp, #28]
 801204e:	9307      	strlt	r3, [sp, #28]
 8012050:	bfb8      	it	lt
 8012052:	9204      	strlt	r2, [sp, #16]
 8012054:	7823      	ldrb	r3, [r4, #0]
 8012056:	2b2e      	cmp	r3, #46	@ 0x2e
 8012058:	d10a      	bne.n	8012070 <_svfiprintf_r+0x130>
 801205a:	7863      	ldrb	r3, [r4, #1]
 801205c:	2b2a      	cmp	r3, #42	@ 0x2a
 801205e:	d132      	bne.n	80120c6 <_svfiprintf_r+0x186>
 8012060:	9b03      	ldr	r3, [sp, #12]
 8012062:	1d1a      	adds	r2, r3, #4
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	9203      	str	r2, [sp, #12]
 8012068:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801206c:	3402      	adds	r4, #2
 801206e:	9305      	str	r3, [sp, #20]
 8012070:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012134 <_svfiprintf_r+0x1f4>
 8012074:	7821      	ldrb	r1, [r4, #0]
 8012076:	2203      	movs	r2, #3
 8012078:	4650      	mov	r0, sl
 801207a:	f7ee f8d1 	bl	8000220 <memchr>
 801207e:	b138      	cbz	r0, 8012090 <_svfiprintf_r+0x150>
 8012080:	9b04      	ldr	r3, [sp, #16]
 8012082:	eba0 000a 	sub.w	r0, r0, sl
 8012086:	2240      	movs	r2, #64	@ 0x40
 8012088:	4082      	lsls	r2, r0
 801208a:	4313      	orrs	r3, r2
 801208c:	3401      	adds	r4, #1
 801208e:	9304      	str	r3, [sp, #16]
 8012090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012094:	4824      	ldr	r0, [pc, #144]	@ (8012128 <_svfiprintf_r+0x1e8>)
 8012096:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801209a:	2206      	movs	r2, #6
 801209c:	f7ee f8c0 	bl	8000220 <memchr>
 80120a0:	2800      	cmp	r0, #0
 80120a2:	d036      	beq.n	8012112 <_svfiprintf_r+0x1d2>
 80120a4:	4b21      	ldr	r3, [pc, #132]	@ (801212c <_svfiprintf_r+0x1ec>)
 80120a6:	bb1b      	cbnz	r3, 80120f0 <_svfiprintf_r+0x1b0>
 80120a8:	9b03      	ldr	r3, [sp, #12]
 80120aa:	3307      	adds	r3, #7
 80120ac:	f023 0307 	bic.w	r3, r3, #7
 80120b0:	3308      	adds	r3, #8
 80120b2:	9303      	str	r3, [sp, #12]
 80120b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120b6:	4433      	add	r3, r6
 80120b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ba:	e76a      	b.n	8011f92 <_svfiprintf_r+0x52>
 80120bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80120c0:	460c      	mov	r4, r1
 80120c2:	2001      	movs	r0, #1
 80120c4:	e7a8      	b.n	8012018 <_svfiprintf_r+0xd8>
 80120c6:	2300      	movs	r3, #0
 80120c8:	3401      	adds	r4, #1
 80120ca:	9305      	str	r3, [sp, #20]
 80120cc:	4619      	mov	r1, r3
 80120ce:	f04f 0c0a 	mov.w	ip, #10
 80120d2:	4620      	mov	r0, r4
 80120d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120d8:	3a30      	subs	r2, #48	@ 0x30
 80120da:	2a09      	cmp	r2, #9
 80120dc:	d903      	bls.n	80120e6 <_svfiprintf_r+0x1a6>
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d0c6      	beq.n	8012070 <_svfiprintf_r+0x130>
 80120e2:	9105      	str	r1, [sp, #20]
 80120e4:	e7c4      	b.n	8012070 <_svfiprintf_r+0x130>
 80120e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80120ea:	4604      	mov	r4, r0
 80120ec:	2301      	movs	r3, #1
 80120ee:	e7f0      	b.n	80120d2 <_svfiprintf_r+0x192>
 80120f0:	ab03      	add	r3, sp, #12
 80120f2:	9300      	str	r3, [sp, #0]
 80120f4:	462a      	mov	r2, r5
 80120f6:	4b0e      	ldr	r3, [pc, #56]	@ (8012130 <_svfiprintf_r+0x1f0>)
 80120f8:	a904      	add	r1, sp, #16
 80120fa:	4638      	mov	r0, r7
 80120fc:	f7fc feb4 	bl	800ee68 <_printf_float>
 8012100:	1c42      	adds	r2, r0, #1
 8012102:	4606      	mov	r6, r0
 8012104:	d1d6      	bne.n	80120b4 <_svfiprintf_r+0x174>
 8012106:	89ab      	ldrh	r3, [r5, #12]
 8012108:	065b      	lsls	r3, r3, #25
 801210a:	f53f af2d 	bmi.w	8011f68 <_svfiprintf_r+0x28>
 801210e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012110:	e72c      	b.n	8011f6c <_svfiprintf_r+0x2c>
 8012112:	ab03      	add	r3, sp, #12
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	462a      	mov	r2, r5
 8012118:	4b05      	ldr	r3, [pc, #20]	@ (8012130 <_svfiprintf_r+0x1f0>)
 801211a:	a904      	add	r1, sp, #16
 801211c:	4638      	mov	r0, r7
 801211e:	f7fd f93b 	bl	800f398 <_printf_i>
 8012122:	e7ed      	b.n	8012100 <_svfiprintf_r+0x1c0>
 8012124:	08012e70 	.word	0x08012e70
 8012128:	08012e7a 	.word	0x08012e7a
 801212c:	0800ee69 	.word	0x0800ee69
 8012130:	08011e8b 	.word	0x08011e8b
 8012134:	08012e76 	.word	0x08012e76

08012138 <__sflush_r>:
 8012138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012140:	0716      	lsls	r6, r2, #28
 8012142:	4605      	mov	r5, r0
 8012144:	460c      	mov	r4, r1
 8012146:	d454      	bmi.n	80121f2 <__sflush_r+0xba>
 8012148:	684b      	ldr	r3, [r1, #4]
 801214a:	2b00      	cmp	r3, #0
 801214c:	dc02      	bgt.n	8012154 <__sflush_r+0x1c>
 801214e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012150:	2b00      	cmp	r3, #0
 8012152:	dd48      	ble.n	80121e6 <__sflush_r+0xae>
 8012154:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012156:	2e00      	cmp	r6, #0
 8012158:	d045      	beq.n	80121e6 <__sflush_r+0xae>
 801215a:	2300      	movs	r3, #0
 801215c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012160:	682f      	ldr	r7, [r5, #0]
 8012162:	6a21      	ldr	r1, [r4, #32]
 8012164:	602b      	str	r3, [r5, #0]
 8012166:	d030      	beq.n	80121ca <__sflush_r+0x92>
 8012168:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801216a:	89a3      	ldrh	r3, [r4, #12]
 801216c:	0759      	lsls	r1, r3, #29
 801216e:	d505      	bpl.n	801217c <__sflush_r+0x44>
 8012170:	6863      	ldr	r3, [r4, #4]
 8012172:	1ad2      	subs	r2, r2, r3
 8012174:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012176:	b10b      	cbz	r3, 801217c <__sflush_r+0x44>
 8012178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801217a:	1ad2      	subs	r2, r2, r3
 801217c:	2300      	movs	r3, #0
 801217e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012180:	6a21      	ldr	r1, [r4, #32]
 8012182:	4628      	mov	r0, r5
 8012184:	47b0      	blx	r6
 8012186:	1c43      	adds	r3, r0, #1
 8012188:	89a3      	ldrh	r3, [r4, #12]
 801218a:	d106      	bne.n	801219a <__sflush_r+0x62>
 801218c:	6829      	ldr	r1, [r5, #0]
 801218e:	291d      	cmp	r1, #29
 8012190:	d82b      	bhi.n	80121ea <__sflush_r+0xb2>
 8012192:	4a2a      	ldr	r2, [pc, #168]	@ (801223c <__sflush_r+0x104>)
 8012194:	410a      	asrs	r2, r1
 8012196:	07d6      	lsls	r6, r2, #31
 8012198:	d427      	bmi.n	80121ea <__sflush_r+0xb2>
 801219a:	2200      	movs	r2, #0
 801219c:	6062      	str	r2, [r4, #4]
 801219e:	04d9      	lsls	r1, r3, #19
 80121a0:	6922      	ldr	r2, [r4, #16]
 80121a2:	6022      	str	r2, [r4, #0]
 80121a4:	d504      	bpl.n	80121b0 <__sflush_r+0x78>
 80121a6:	1c42      	adds	r2, r0, #1
 80121a8:	d101      	bne.n	80121ae <__sflush_r+0x76>
 80121aa:	682b      	ldr	r3, [r5, #0]
 80121ac:	b903      	cbnz	r3, 80121b0 <__sflush_r+0x78>
 80121ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80121b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80121b2:	602f      	str	r7, [r5, #0]
 80121b4:	b1b9      	cbz	r1, 80121e6 <__sflush_r+0xae>
 80121b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80121ba:	4299      	cmp	r1, r3
 80121bc:	d002      	beq.n	80121c4 <__sflush_r+0x8c>
 80121be:	4628      	mov	r0, r5
 80121c0:	f7fe fe0e 	bl	8010de0 <_free_r>
 80121c4:	2300      	movs	r3, #0
 80121c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80121c8:	e00d      	b.n	80121e6 <__sflush_r+0xae>
 80121ca:	2301      	movs	r3, #1
 80121cc:	4628      	mov	r0, r5
 80121ce:	47b0      	blx	r6
 80121d0:	4602      	mov	r2, r0
 80121d2:	1c50      	adds	r0, r2, #1
 80121d4:	d1c9      	bne.n	801216a <__sflush_r+0x32>
 80121d6:	682b      	ldr	r3, [r5, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d0c6      	beq.n	801216a <__sflush_r+0x32>
 80121dc:	2b1d      	cmp	r3, #29
 80121de:	d001      	beq.n	80121e4 <__sflush_r+0xac>
 80121e0:	2b16      	cmp	r3, #22
 80121e2:	d11e      	bne.n	8012222 <__sflush_r+0xea>
 80121e4:	602f      	str	r7, [r5, #0]
 80121e6:	2000      	movs	r0, #0
 80121e8:	e022      	b.n	8012230 <__sflush_r+0xf8>
 80121ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121ee:	b21b      	sxth	r3, r3
 80121f0:	e01b      	b.n	801222a <__sflush_r+0xf2>
 80121f2:	690f      	ldr	r7, [r1, #16]
 80121f4:	2f00      	cmp	r7, #0
 80121f6:	d0f6      	beq.n	80121e6 <__sflush_r+0xae>
 80121f8:	0793      	lsls	r3, r2, #30
 80121fa:	680e      	ldr	r6, [r1, #0]
 80121fc:	bf08      	it	eq
 80121fe:	694b      	ldreq	r3, [r1, #20]
 8012200:	600f      	str	r7, [r1, #0]
 8012202:	bf18      	it	ne
 8012204:	2300      	movne	r3, #0
 8012206:	eba6 0807 	sub.w	r8, r6, r7
 801220a:	608b      	str	r3, [r1, #8]
 801220c:	f1b8 0f00 	cmp.w	r8, #0
 8012210:	dde9      	ble.n	80121e6 <__sflush_r+0xae>
 8012212:	6a21      	ldr	r1, [r4, #32]
 8012214:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012216:	4643      	mov	r3, r8
 8012218:	463a      	mov	r2, r7
 801221a:	4628      	mov	r0, r5
 801221c:	47b0      	blx	r6
 801221e:	2800      	cmp	r0, #0
 8012220:	dc08      	bgt.n	8012234 <__sflush_r+0xfc>
 8012222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801222a:	81a3      	strh	r3, [r4, #12]
 801222c:	f04f 30ff 	mov.w	r0, #4294967295
 8012230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012234:	4407      	add	r7, r0
 8012236:	eba8 0800 	sub.w	r8, r8, r0
 801223a:	e7e7      	b.n	801220c <__sflush_r+0xd4>
 801223c:	dfbffffe 	.word	0xdfbffffe

08012240 <_fflush_r>:
 8012240:	b538      	push	{r3, r4, r5, lr}
 8012242:	690b      	ldr	r3, [r1, #16]
 8012244:	4605      	mov	r5, r0
 8012246:	460c      	mov	r4, r1
 8012248:	b913      	cbnz	r3, 8012250 <_fflush_r+0x10>
 801224a:	2500      	movs	r5, #0
 801224c:	4628      	mov	r0, r5
 801224e:	bd38      	pop	{r3, r4, r5, pc}
 8012250:	b118      	cbz	r0, 801225a <_fflush_r+0x1a>
 8012252:	6a03      	ldr	r3, [r0, #32]
 8012254:	b90b      	cbnz	r3, 801225a <_fflush_r+0x1a>
 8012256:	f7fd fc5f 	bl	800fb18 <__sinit>
 801225a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d0f3      	beq.n	801224a <_fflush_r+0xa>
 8012262:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012264:	07d0      	lsls	r0, r2, #31
 8012266:	d404      	bmi.n	8012272 <_fflush_r+0x32>
 8012268:	0599      	lsls	r1, r3, #22
 801226a:	d402      	bmi.n	8012272 <_fflush_r+0x32>
 801226c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801226e:	f7fd ff24 	bl	80100ba <__retarget_lock_acquire_recursive>
 8012272:	4628      	mov	r0, r5
 8012274:	4621      	mov	r1, r4
 8012276:	f7ff ff5f 	bl	8012138 <__sflush_r>
 801227a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801227c:	07da      	lsls	r2, r3, #31
 801227e:	4605      	mov	r5, r0
 8012280:	d4e4      	bmi.n	801224c <_fflush_r+0xc>
 8012282:	89a3      	ldrh	r3, [r4, #12]
 8012284:	059b      	lsls	r3, r3, #22
 8012286:	d4e1      	bmi.n	801224c <_fflush_r+0xc>
 8012288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801228a:	f7fd ff17 	bl	80100bc <__retarget_lock_release_recursive>
 801228e:	e7dd      	b.n	801224c <_fflush_r+0xc>

08012290 <fiprintf>:
 8012290:	b40e      	push	{r1, r2, r3}
 8012292:	b503      	push	{r0, r1, lr}
 8012294:	4601      	mov	r1, r0
 8012296:	ab03      	add	r3, sp, #12
 8012298:	4805      	ldr	r0, [pc, #20]	@ (80122b0 <fiprintf+0x20>)
 801229a:	f853 2b04 	ldr.w	r2, [r3], #4
 801229e:	6800      	ldr	r0, [r0, #0]
 80122a0:	9301      	str	r3, [sp, #4]
 80122a2:	f000 f917 	bl	80124d4 <_vfiprintf_r>
 80122a6:	b002      	add	sp, #8
 80122a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80122ac:	b003      	add	sp, #12
 80122ae:	4770      	bx	lr
 80122b0:	200001a4 	.word	0x200001a4

080122b4 <__swhatbuf_r>:
 80122b4:	b570      	push	{r4, r5, r6, lr}
 80122b6:	460c      	mov	r4, r1
 80122b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122bc:	2900      	cmp	r1, #0
 80122be:	b096      	sub	sp, #88	@ 0x58
 80122c0:	4615      	mov	r5, r2
 80122c2:	461e      	mov	r6, r3
 80122c4:	da0d      	bge.n	80122e2 <__swhatbuf_r+0x2e>
 80122c6:	89a3      	ldrh	r3, [r4, #12]
 80122c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80122cc:	f04f 0100 	mov.w	r1, #0
 80122d0:	bf14      	ite	ne
 80122d2:	2340      	movne	r3, #64	@ 0x40
 80122d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80122d8:	2000      	movs	r0, #0
 80122da:	6031      	str	r1, [r6, #0]
 80122dc:	602b      	str	r3, [r5, #0]
 80122de:	b016      	add	sp, #88	@ 0x58
 80122e0:	bd70      	pop	{r4, r5, r6, pc}
 80122e2:	466a      	mov	r2, sp
 80122e4:	f000 f862 	bl	80123ac <_fstat_r>
 80122e8:	2800      	cmp	r0, #0
 80122ea:	dbec      	blt.n	80122c6 <__swhatbuf_r+0x12>
 80122ec:	9901      	ldr	r1, [sp, #4]
 80122ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80122f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80122f6:	4259      	negs	r1, r3
 80122f8:	4159      	adcs	r1, r3
 80122fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80122fe:	e7eb      	b.n	80122d8 <__swhatbuf_r+0x24>

08012300 <__smakebuf_r>:
 8012300:	898b      	ldrh	r3, [r1, #12]
 8012302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012304:	079d      	lsls	r5, r3, #30
 8012306:	4606      	mov	r6, r0
 8012308:	460c      	mov	r4, r1
 801230a:	d507      	bpl.n	801231c <__smakebuf_r+0x1c>
 801230c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012310:	6023      	str	r3, [r4, #0]
 8012312:	6123      	str	r3, [r4, #16]
 8012314:	2301      	movs	r3, #1
 8012316:	6163      	str	r3, [r4, #20]
 8012318:	b003      	add	sp, #12
 801231a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801231c:	ab01      	add	r3, sp, #4
 801231e:	466a      	mov	r2, sp
 8012320:	f7ff ffc8 	bl	80122b4 <__swhatbuf_r>
 8012324:	9f00      	ldr	r7, [sp, #0]
 8012326:	4605      	mov	r5, r0
 8012328:	4639      	mov	r1, r7
 801232a:	4630      	mov	r0, r6
 801232c:	f7fb fd7e 	bl	800de2c <_malloc_r>
 8012330:	b948      	cbnz	r0, 8012346 <__smakebuf_r+0x46>
 8012332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012336:	059a      	lsls	r2, r3, #22
 8012338:	d4ee      	bmi.n	8012318 <__smakebuf_r+0x18>
 801233a:	f023 0303 	bic.w	r3, r3, #3
 801233e:	f043 0302 	orr.w	r3, r3, #2
 8012342:	81a3      	strh	r3, [r4, #12]
 8012344:	e7e2      	b.n	801230c <__smakebuf_r+0xc>
 8012346:	89a3      	ldrh	r3, [r4, #12]
 8012348:	6020      	str	r0, [r4, #0]
 801234a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801234e:	81a3      	strh	r3, [r4, #12]
 8012350:	9b01      	ldr	r3, [sp, #4]
 8012352:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012356:	b15b      	cbz	r3, 8012370 <__smakebuf_r+0x70>
 8012358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801235c:	4630      	mov	r0, r6
 801235e:	f000 f837 	bl	80123d0 <_isatty_r>
 8012362:	b128      	cbz	r0, 8012370 <__smakebuf_r+0x70>
 8012364:	89a3      	ldrh	r3, [r4, #12]
 8012366:	f023 0303 	bic.w	r3, r3, #3
 801236a:	f043 0301 	orr.w	r3, r3, #1
 801236e:	81a3      	strh	r3, [r4, #12]
 8012370:	89a3      	ldrh	r3, [r4, #12]
 8012372:	431d      	orrs	r5, r3
 8012374:	81a5      	strh	r5, [r4, #12]
 8012376:	e7cf      	b.n	8012318 <__smakebuf_r+0x18>

08012378 <memmove>:
 8012378:	4288      	cmp	r0, r1
 801237a:	b510      	push	{r4, lr}
 801237c:	eb01 0402 	add.w	r4, r1, r2
 8012380:	d902      	bls.n	8012388 <memmove+0x10>
 8012382:	4284      	cmp	r4, r0
 8012384:	4623      	mov	r3, r4
 8012386:	d807      	bhi.n	8012398 <memmove+0x20>
 8012388:	1e43      	subs	r3, r0, #1
 801238a:	42a1      	cmp	r1, r4
 801238c:	d008      	beq.n	80123a0 <memmove+0x28>
 801238e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012396:	e7f8      	b.n	801238a <memmove+0x12>
 8012398:	4402      	add	r2, r0
 801239a:	4601      	mov	r1, r0
 801239c:	428a      	cmp	r2, r1
 801239e:	d100      	bne.n	80123a2 <memmove+0x2a>
 80123a0:	bd10      	pop	{r4, pc}
 80123a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80123aa:	e7f7      	b.n	801239c <memmove+0x24>

080123ac <_fstat_r>:
 80123ac:	b538      	push	{r3, r4, r5, lr}
 80123ae:	4d07      	ldr	r5, [pc, #28]	@ (80123cc <_fstat_r+0x20>)
 80123b0:	2300      	movs	r3, #0
 80123b2:	4604      	mov	r4, r0
 80123b4:	4608      	mov	r0, r1
 80123b6:	4611      	mov	r1, r2
 80123b8:	602b      	str	r3, [r5, #0]
 80123ba:	f7f1 f887 	bl	80034cc <_fstat>
 80123be:	1c43      	adds	r3, r0, #1
 80123c0:	d102      	bne.n	80123c8 <_fstat_r+0x1c>
 80123c2:	682b      	ldr	r3, [r5, #0]
 80123c4:	b103      	cbz	r3, 80123c8 <_fstat_r+0x1c>
 80123c6:	6023      	str	r3, [r4, #0]
 80123c8:	bd38      	pop	{r3, r4, r5, pc}
 80123ca:	bf00      	nop
 80123cc:	20001570 	.word	0x20001570

080123d0 <_isatty_r>:
 80123d0:	b538      	push	{r3, r4, r5, lr}
 80123d2:	4d06      	ldr	r5, [pc, #24]	@ (80123ec <_isatty_r+0x1c>)
 80123d4:	2300      	movs	r3, #0
 80123d6:	4604      	mov	r4, r0
 80123d8:	4608      	mov	r0, r1
 80123da:	602b      	str	r3, [r5, #0]
 80123dc:	f7f1 f886 	bl	80034ec <_isatty>
 80123e0:	1c43      	adds	r3, r0, #1
 80123e2:	d102      	bne.n	80123ea <_isatty_r+0x1a>
 80123e4:	682b      	ldr	r3, [r5, #0]
 80123e6:	b103      	cbz	r3, 80123ea <_isatty_r+0x1a>
 80123e8:	6023      	str	r3, [r4, #0]
 80123ea:	bd38      	pop	{r3, r4, r5, pc}
 80123ec:	20001570 	.word	0x20001570

080123f0 <abort>:
 80123f0:	b508      	push	{r3, lr}
 80123f2:	2006      	movs	r0, #6
 80123f4:	f000 f9ae 	bl	8012754 <raise>
 80123f8:	2001      	movs	r0, #1
 80123fa:	f7f1 f817 	bl	800342c <_exit>

080123fe <_calloc_r>:
 80123fe:	b570      	push	{r4, r5, r6, lr}
 8012400:	fba1 5402 	umull	r5, r4, r1, r2
 8012404:	b93c      	cbnz	r4, 8012416 <_calloc_r+0x18>
 8012406:	4629      	mov	r1, r5
 8012408:	f7fb fd10 	bl	800de2c <_malloc_r>
 801240c:	4606      	mov	r6, r0
 801240e:	b928      	cbnz	r0, 801241c <_calloc_r+0x1e>
 8012410:	2600      	movs	r6, #0
 8012412:	4630      	mov	r0, r6
 8012414:	bd70      	pop	{r4, r5, r6, pc}
 8012416:	220c      	movs	r2, #12
 8012418:	6002      	str	r2, [r0, #0]
 801241a:	e7f9      	b.n	8012410 <_calloc_r+0x12>
 801241c:	462a      	mov	r2, r5
 801241e:	4621      	mov	r1, r4
 8012420:	f7fd fd3a 	bl	800fe98 <memset>
 8012424:	e7f5      	b.n	8012412 <_calloc_r+0x14>

08012426 <_realloc_r>:
 8012426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801242a:	4680      	mov	r8, r0
 801242c:	4615      	mov	r5, r2
 801242e:	460c      	mov	r4, r1
 8012430:	b921      	cbnz	r1, 801243c <_realloc_r+0x16>
 8012432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012436:	4611      	mov	r1, r2
 8012438:	f7fb bcf8 	b.w	800de2c <_malloc_r>
 801243c:	b92a      	cbnz	r2, 801244a <_realloc_r+0x24>
 801243e:	f7fe fccf 	bl	8010de0 <_free_r>
 8012442:	2400      	movs	r4, #0
 8012444:	4620      	mov	r0, r4
 8012446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801244a:	f000 f99f 	bl	801278c <_malloc_usable_size_r>
 801244e:	4285      	cmp	r5, r0
 8012450:	4606      	mov	r6, r0
 8012452:	d802      	bhi.n	801245a <_realloc_r+0x34>
 8012454:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012458:	d8f4      	bhi.n	8012444 <_realloc_r+0x1e>
 801245a:	4629      	mov	r1, r5
 801245c:	4640      	mov	r0, r8
 801245e:	f7fb fce5 	bl	800de2c <_malloc_r>
 8012462:	4607      	mov	r7, r0
 8012464:	2800      	cmp	r0, #0
 8012466:	d0ec      	beq.n	8012442 <_realloc_r+0x1c>
 8012468:	42b5      	cmp	r5, r6
 801246a:	462a      	mov	r2, r5
 801246c:	4621      	mov	r1, r4
 801246e:	bf28      	it	cs
 8012470:	4632      	movcs	r2, r6
 8012472:	f7fd fe2c 	bl	80100ce <memcpy>
 8012476:	4621      	mov	r1, r4
 8012478:	4640      	mov	r0, r8
 801247a:	f7fe fcb1 	bl	8010de0 <_free_r>
 801247e:	463c      	mov	r4, r7
 8012480:	e7e0      	b.n	8012444 <_realloc_r+0x1e>

08012482 <__sfputc_r>:
 8012482:	6893      	ldr	r3, [r2, #8]
 8012484:	3b01      	subs	r3, #1
 8012486:	2b00      	cmp	r3, #0
 8012488:	b410      	push	{r4}
 801248a:	6093      	str	r3, [r2, #8]
 801248c:	da08      	bge.n	80124a0 <__sfputc_r+0x1e>
 801248e:	6994      	ldr	r4, [r2, #24]
 8012490:	42a3      	cmp	r3, r4
 8012492:	db01      	blt.n	8012498 <__sfputc_r+0x16>
 8012494:	290a      	cmp	r1, #10
 8012496:	d103      	bne.n	80124a0 <__sfputc_r+0x1e>
 8012498:	f85d 4b04 	ldr.w	r4, [sp], #4
 801249c:	f7fd bc67 	b.w	800fd6e <__swbuf_r>
 80124a0:	6813      	ldr	r3, [r2, #0]
 80124a2:	1c58      	adds	r0, r3, #1
 80124a4:	6010      	str	r0, [r2, #0]
 80124a6:	7019      	strb	r1, [r3, #0]
 80124a8:	4608      	mov	r0, r1
 80124aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <__sfputs_r>:
 80124b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b2:	4606      	mov	r6, r0
 80124b4:	460f      	mov	r7, r1
 80124b6:	4614      	mov	r4, r2
 80124b8:	18d5      	adds	r5, r2, r3
 80124ba:	42ac      	cmp	r4, r5
 80124bc:	d101      	bne.n	80124c2 <__sfputs_r+0x12>
 80124be:	2000      	movs	r0, #0
 80124c0:	e007      	b.n	80124d2 <__sfputs_r+0x22>
 80124c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c6:	463a      	mov	r2, r7
 80124c8:	4630      	mov	r0, r6
 80124ca:	f7ff ffda 	bl	8012482 <__sfputc_r>
 80124ce:	1c43      	adds	r3, r0, #1
 80124d0:	d1f3      	bne.n	80124ba <__sfputs_r+0xa>
 80124d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124d4 <_vfiprintf_r>:
 80124d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d8:	460d      	mov	r5, r1
 80124da:	b09d      	sub	sp, #116	@ 0x74
 80124dc:	4614      	mov	r4, r2
 80124de:	4698      	mov	r8, r3
 80124e0:	4606      	mov	r6, r0
 80124e2:	b118      	cbz	r0, 80124ec <_vfiprintf_r+0x18>
 80124e4:	6a03      	ldr	r3, [r0, #32]
 80124e6:	b90b      	cbnz	r3, 80124ec <_vfiprintf_r+0x18>
 80124e8:	f7fd fb16 	bl	800fb18 <__sinit>
 80124ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124ee:	07d9      	lsls	r1, r3, #31
 80124f0:	d405      	bmi.n	80124fe <_vfiprintf_r+0x2a>
 80124f2:	89ab      	ldrh	r3, [r5, #12]
 80124f4:	059a      	lsls	r2, r3, #22
 80124f6:	d402      	bmi.n	80124fe <_vfiprintf_r+0x2a>
 80124f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124fa:	f7fd fdde 	bl	80100ba <__retarget_lock_acquire_recursive>
 80124fe:	89ab      	ldrh	r3, [r5, #12]
 8012500:	071b      	lsls	r3, r3, #28
 8012502:	d501      	bpl.n	8012508 <_vfiprintf_r+0x34>
 8012504:	692b      	ldr	r3, [r5, #16]
 8012506:	b99b      	cbnz	r3, 8012530 <_vfiprintf_r+0x5c>
 8012508:	4629      	mov	r1, r5
 801250a:	4630      	mov	r0, r6
 801250c:	f7fd fc6e 	bl	800fdec <__swsetup_r>
 8012510:	b170      	cbz	r0, 8012530 <_vfiprintf_r+0x5c>
 8012512:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012514:	07dc      	lsls	r4, r3, #31
 8012516:	d504      	bpl.n	8012522 <_vfiprintf_r+0x4e>
 8012518:	f04f 30ff 	mov.w	r0, #4294967295
 801251c:	b01d      	add	sp, #116	@ 0x74
 801251e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012522:	89ab      	ldrh	r3, [r5, #12]
 8012524:	0598      	lsls	r0, r3, #22
 8012526:	d4f7      	bmi.n	8012518 <_vfiprintf_r+0x44>
 8012528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801252a:	f7fd fdc7 	bl	80100bc <__retarget_lock_release_recursive>
 801252e:	e7f3      	b.n	8012518 <_vfiprintf_r+0x44>
 8012530:	2300      	movs	r3, #0
 8012532:	9309      	str	r3, [sp, #36]	@ 0x24
 8012534:	2320      	movs	r3, #32
 8012536:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801253a:	f8cd 800c 	str.w	r8, [sp, #12]
 801253e:	2330      	movs	r3, #48	@ 0x30
 8012540:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80126f0 <_vfiprintf_r+0x21c>
 8012544:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012548:	f04f 0901 	mov.w	r9, #1
 801254c:	4623      	mov	r3, r4
 801254e:	469a      	mov	sl, r3
 8012550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012554:	b10a      	cbz	r2, 801255a <_vfiprintf_r+0x86>
 8012556:	2a25      	cmp	r2, #37	@ 0x25
 8012558:	d1f9      	bne.n	801254e <_vfiprintf_r+0x7a>
 801255a:	ebba 0b04 	subs.w	fp, sl, r4
 801255e:	d00b      	beq.n	8012578 <_vfiprintf_r+0xa4>
 8012560:	465b      	mov	r3, fp
 8012562:	4622      	mov	r2, r4
 8012564:	4629      	mov	r1, r5
 8012566:	4630      	mov	r0, r6
 8012568:	f7ff ffa2 	bl	80124b0 <__sfputs_r>
 801256c:	3001      	adds	r0, #1
 801256e:	f000 80a7 	beq.w	80126c0 <_vfiprintf_r+0x1ec>
 8012572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012574:	445a      	add	r2, fp
 8012576:	9209      	str	r2, [sp, #36]	@ 0x24
 8012578:	f89a 3000 	ldrb.w	r3, [sl]
 801257c:	2b00      	cmp	r3, #0
 801257e:	f000 809f 	beq.w	80126c0 <_vfiprintf_r+0x1ec>
 8012582:	2300      	movs	r3, #0
 8012584:	f04f 32ff 	mov.w	r2, #4294967295
 8012588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801258c:	f10a 0a01 	add.w	sl, sl, #1
 8012590:	9304      	str	r3, [sp, #16]
 8012592:	9307      	str	r3, [sp, #28]
 8012594:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012598:	931a      	str	r3, [sp, #104]	@ 0x68
 801259a:	4654      	mov	r4, sl
 801259c:	2205      	movs	r2, #5
 801259e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125a2:	4853      	ldr	r0, [pc, #332]	@ (80126f0 <_vfiprintf_r+0x21c>)
 80125a4:	f7ed fe3c 	bl	8000220 <memchr>
 80125a8:	9a04      	ldr	r2, [sp, #16]
 80125aa:	b9d8      	cbnz	r0, 80125e4 <_vfiprintf_r+0x110>
 80125ac:	06d1      	lsls	r1, r2, #27
 80125ae:	bf44      	itt	mi
 80125b0:	2320      	movmi	r3, #32
 80125b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125b6:	0713      	lsls	r3, r2, #28
 80125b8:	bf44      	itt	mi
 80125ba:	232b      	movmi	r3, #43	@ 0x2b
 80125bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125c0:	f89a 3000 	ldrb.w	r3, [sl]
 80125c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80125c6:	d015      	beq.n	80125f4 <_vfiprintf_r+0x120>
 80125c8:	9a07      	ldr	r2, [sp, #28]
 80125ca:	4654      	mov	r4, sl
 80125cc:	2000      	movs	r0, #0
 80125ce:	f04f 0c0a 	mov.w	ip, #10
 80125d2:	4621      	mov	r1, r4
 80125d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125d8:	3b30      	subs	r3, #48	@ 0x30
 80125da:	2b09      	cmp	r3, #9
 80125dc:	d94b      	bls.n	8012676 <_vfiprintf_r+0x1a2>
 80125de:	b1b0      	cbz	r0, 801260e <_vfiprintf_r+0x13a>
 80125e0:	9207      	str	r2, [sp, #28]
 80125e2:	e014      	b.n	801260e <_vfiprintf_r+0x13a>
 80125e4:	eba0 0308 	sub.w	r3, r0, r8
 80125e8:	fa09 f303 	lsl.w	r3, r9, r3
 80125ec:	4313      	orrs	r3, r2
 80125ee:	9304      	str	r3, [sp, #16]
 80125f0:	46a2      	mov	sl, r4
 80125f2:	e7d2      	b.n	801259a <_vfiprintf_r+0xc6>
 80125f4:	9b03      	ldr	r3, [sp, #12]
 80125f6:	1d19      	adds	r1, r3, #4
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	9103      	str	r1, [sp, #12]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	bfbb      	ittet	lt
 8012600:	425b      	neglt	r3, r3
 8012602:	f042 0202 	orrlt.w	r2, r2, #2
 8012606:	9307      	strge	r3, [sp, #28]
 8012608:	9307      	strlt	r3, [sp, #28]
 801260a:	bfb8      	it	lt
 801260c:	9204      	strlt	r2, [sp, #16]
 801260e:	7823      	ldrb	r3, [r4, #0]
 8012610:	2b2e      	cmp	r3, #46	@ 0x2e
 8012612:	d10a      	bne.n	801262a <_vfiprintf_r+0x156>
 8012614:	7863      	ldrb	r3, [r4, #1]
 8012616:	2b2a      	cmp	r3, #42	@ 0x2a
 8012618:	d132      	bne.n	8012680 <_vfiprintf_r+0x1ac>
 801261a:	9b03      	ldr	r3, [sp, #12]
 801261c:	1d1a      	adds	r2, r3, #4
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	9203      	str	r2, [sp, #12]
 8012622:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012626:	3402      	adds	r4, #2
 8012628:	9305      	str	r3, [sp, #20]
 801262a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012700 <_vfiprintf_r+0x22c>
 801262e:	7821      	ldrb	r1, [r4, #0]
 8012630:	2203      	movs	r2, #3
 8012632:	4650      	mov	r0, sl
 8012634:	f7ed fdf4 	bl	8000220 <memchr>
 8012638:	b138      	cbz	r0, 801264a <_vfiprintf_r+0x176>
 801263a:	9b04      	ldr	r3, [sp, #16]
 801263c:	eba0 000a 	sub.w	r0, r0, sl
 8012640:	2240      	movs	r2, #64	@ 0x40
 8012642:	4082      	lsls	r2, r0
 8012644:	4313      	orrs	r3, r2
 8012646:	3401      	adds	r4, #1
 8012648:	9304      	str	r3, [sp, #16]
 801264a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801264e:	4829      	ldr	r0, [pc, #164]	@ (80126f4 <_vfiprintf_r+0x220>)
 8012650:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012654:	2206      	movs	r2, #6
 8012656:	f7ed fde3 	bl	8000220 <memchr>
 801265a:	2800      	cmp	r0, #0
 801265c:	d03f      	beq.n	80126de <_vfiprintf_r+0x20a>
 801265e:	4b26      	ldr	r3, [pc, #152]	@ (80126f8 <_vfiprintf_r+0x224>)
 8012660:	bb1b      	cbnz	r3, 80126aa <_vfiprintf_r+0x1d6>
 8012662:	9b03      	ldr	r3, [sp, #12]
 8012664:	3307      	adds	r3, #7
 8012666:	f023 0307 	bic.w	r3, r3, #7
 801266a:	3308      	adds	r3, #8
 801266c:	9303      	str	r3, [sp, #12]
 801266e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012670:	443b      	add	r3, r7
 8012672:	9309      	str	r3, [sp, #36]	@ 0x24
 8012674:	e76a      	b.n	801254c <_vfiprintf_r+0x78>
 8012676:	fb0c 3202 	mla	r2, ip, r2, r3
 801267a:	460c      	mov	r4, r1
 801267c:	2001      	movs	r0, #1
 801267e:	e7a8      	b.n	80125d2 <_vfiprintf_r+0xfe>
 8012680:	2300      	movs	r3, #0
 8012682:	3401      	adds	r4, #1
 8012684:	9305      	str	r3, [sp, #20]
 8012686:	4619      	mov	r1, r3
 8012688:	f04f 0c0a 	mov.w	ip, #10
 801268c:	4620      	mov	r0, r4
 801268e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012692:	3a30      	subs	r2, #48	@ 0x30
 8012694:	2a09      	cmp	r2, #9
 8012696:	d903      	bls.n	80126a0 <_vfiprintf_r+0x1cc>
 8012698:	2b00      	cmp	r3, #0
 801269a:	d0c6      	beq.n	801262a <_vfiprintf_r+0x156>
 801269c:	9105      	str	r1, [sp, #20]
 801269e:	e7c4      	b.n	801262a <_vfiprintf_r+0x156>
 80126a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80126a4:	4604      	mov	r4, r0
 80126a6:	2301      	movs	r3, #1
 80126a8:	e7f0      	b.n	801268c <_vfiprintf_r+0x1b8>
 80126aa:	ab03      	add	r3, sp, #12
 80126ac:	9300      	str	r3, [sp, #0]
 80126ae:	462a      	mov	r2, r5
 80126b0:	4b12      	ldr	r3, [pc, #72]	@ (80126fc <_vfiprintf_r+0x228>)
 80126b2:	a904      	add	r1, sp, #16
 80126b4:	4630      	mov	r0, r6
 80126b6:	f7fc fbd7 	bl	800ee68 <_printf_float>
 80126ba:	4607      	mov	r7, r0
 80126bc:	1c78      	adds	r0, r7, #1
 80126be:	d1d6      	bne.n	801266e <_vfiprintf_r+0x19a>
 80126c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126c2:	07d9      	lsls	r1, r3, #31
 80126c4:	d405      	bmi.n	80126d2 <_vfiprintf_r+0x1fe>
 80126c6:	89ab      	ldrh	r3, [r5, #12]
 80126c8:	059a      	lsls	r2, r3, #22
 80126ca:	d402      	bmi.n	80126d2 <_vfiprintf_r+0x1fe>
 80126cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126ce:	f7fd fcf5 	bl	80100bc <__retarget_lock_release_recursive>
 80126d2:	89ab      	ldrh	r3, [r5, #12]
 80126d4:	065b      	lsls	r3, r3, #25
 80126d6:	f53f af1f 	bmi.w	8012518 <_vfiprintf_r+0x44>
 80126da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126dc:	e71e      	b.n	801251c <_vfiprintf_r+0x48>
 80126de:	ab03      	add	r3, sp, #12
 80126e0:	9300      	str	r3, [sp, #0]
 80126e2:	462a      	mov	r2, r5
 80126e4:	4b05      	ldr	r3, [pc, #20]	@ (80126fc <_vfiprintf_r+0x228>)
 80126e6:	a904      	add	r1, sp, #16
 80126e8:	4630      	mov	r0, r6
 80126ea:	f7fc fe55 	bl	800f398 <_printf_i>
 80126ee:	e7e4      	b.n	80126ba <_vfiprintf_r+0x1e6>
 80126f0:	08012e70 	.word	0x08012e70
 80126f4:	08012e7a 	.word	0x08012e7a
 80126f8:	0800ee69 	.word	0x0800ee69
 80126fc:	080124b1 	.word	0x080124b1
 8012700:	08012e76 	.word	0x08012e76

08012704 <_raise_r>:
 8012704:	291f      	cmp	r1, #31
 8012706:	b538      	push	{r3, r4, r5, lr}
 8012708:	4605      	mov	r5, r0
 801270a:	460c      	mov	r4, r1
 801270c:	d904      	bls.n	8012718 <_raise_r+0x14>
 801270e:	2316      	movs	r3, #22
 8012710:	6003      	str	r3, [r0, #0]
 8012712:	f04f 30ff 	mov.w	r0, #4294967295
 8012716:	bd38      	pop	{r3, r4, r5, pc}
 8012718:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801271a:	b112      	cbz	r2, 8012722 <_raise_r+0x1e>
 801271c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012720:	b94b      	cbnz	r3, 8012736 <_raise_r+0x32>
 8012722:	4628      	mov	r0, r5
 8012724:	f000 f830 	bl	8012788 <_getpid_r>
 8012728:	4622      	mov	r2, r4
 801272a:	4601      	mov	r1, r0
 801272c:	4628      	mov	r0, r5
 801272e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012732:	f000 b817 	b.w	8012764 <_kill_r>
 8012736:	2b01      	cmp	r3, #1
 8012738:	d00a      	beq.n	8012750 <_raise_r+0x4c>
 801273a:	1c59      	adds	r1, r3, #1
 801273c:	d103      	bne.n	8012746 <_raise_r+0x42>
 801273e:	2316      	movs	r3, #22
 8012740:	6003      	str	r3, [r0, #0]
 8012742:	2001      	movs	r0, #1
 8012744:	e7e7      	b.n	8012716 <_raise_r+0x12>
 8012746:	2100      	movs	r1, #0
 8012748:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801274c:	4620      	mov	r0, r4
 801274e:	4798      	blx	r3
 8012750:	2000      	movs	r0, #0
 8012752:	e7e0      	b.n	8012716 <_raise_r+0x12>

08012754 <raise>:
 8012754:	4b02      	ldr	r3, [pc, #8]	@ (8012760 <raise+0xc>)
 8012756:	4601      	mov	r1, r0
 8012758:	6818      	ldr	r0, [r3, #0]
 801275a:	f7ff bfd3 	b.w	8012704 <_raise_r>
 801275e:	bf00      	nop
 8012760:	200001a4 	.word	0x200001a4

08012764 <_kill_r>:
 8012764:	b538      	push	{r3, r4, r5, lr}
 8012766:	4d07      	ldr	r5, [pc, #28]	@ (8012784 <_kill_r+0x20>)
 8012768:	2300      	movs	r3, #0
 801276a:	4604      	mov	r4, r0
 801276c:	4608      	mov	r0, r1
 801276e:	4611      	mov	r1, r2
 8012770:	602b      	str	r3, [r5, #0]
 8012772:	f7f0 fe4b 	bl	800340c <_kill>
 8012776:	1c43      	adds	r3, r0, #1
 8012778:	d102      	bne.n	8012780 <_kill_r+0x1c>
 801277a:	682b      	ldr	r3, [r5, #0]
 801277c:	b103      	cbz	r3, 8012780 <_kill_r+0x1c>
 801277e:	6023      	str	r3, [r4, #0]
 8012780:	bd38      	pop	{r3, r4, r5, pc}
 8012782:	bf00      	nop
 8012784:	20001570 	.word	0x20001570

08012788 <_getpid_r>:
 8012788:	f7f0 be38 	b.w	80033fc <_getpid>

0801278c <_malloc_usable_size_r>:
 801278c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012790:	1f18      	subs	r0, r3, #4
 8012792:	2b00      	cmp	r3, #0
 8012794:	bfbc      	itt	lt
 8012796:	580b      	ldrlt	r3, [r1, r0]
 8012798:	18c0      	addlt	r0, r0, r3
 801279a:	4770      	bx	lr

0801279c <_init>:
 801279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801279e:	bf00      	nop
 80127a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127a2:	bc08      	pop	{r3}
 80127a4:	469e      	mov	lr, r3
 80127a6:	4770      	bx	lr

080127a8 <_fini>:
 80127a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127aa:	bf00      	nop
 80127ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127ae:	bc08      	pop	{r3}
 80127b0:	469e      	mov	lr, r3
 80127b2:	4770      	bx	lr
